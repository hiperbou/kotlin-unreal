declare class LiveLinkSubjectName { 
	Name: string;
	clone() : LiveLinkSubjectName;
	static C(Other: UObject | any): LiveLinkSubjectName;
}

declare class LiveLinkSourceDebugInfo { 
	SubjectName: LiveLinkSubjectName;
	SnapshotIndex: number;
	NumberOfBufferAtSnapshot: number;
	clone() : LiveLinkSourceDebugInfo;
	static C(Other: UObject | any): LiveLinkSourceDebugInfo;
}

declare class LiveLinkSourceSettings extends UObject { 
	Mode: ELiveLinkSourceMode;
	BufferSettings: LiveLinkSourceBufferManagementSettings;
	ConnectionString: string;
	Factory: UnrealEngineClass;
	SourceDebugInfos: LiveLinkSourceDebugInfo[];
	static Load(ResourceName: string): LiveLinkSourceSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceSettings;
	static GetDefaultObject(): LiveLinkSourceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceSettings;
	static C(Other: UObject | any): LiveLinkSourceSettings;
}

declare class LiveLinkCurveConversionSettings { 
	CurveConversionAssetMap: any;
	clone() : LiveLinkCurveConversionSettings;
	static C(Other: UObject | any): LiveLinkCurveConversionSettings;
}

declare class LiveLinkCurveRemapSettings extends LiveLinkSourceSettings { 
	CurveConversionSettings: LiveLinkCurveConversionSettings;
	static Load(ResourceName: string): LiveLinkCurveRemapSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkCurveRemapSettings;
	static GetDefaultObject(): LiveLinkCurveRemapSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkCurveRemapSettings;
	static C(Other: UObject | any): LiveLinkCurveRemapSettings;
}

declare class LiveLinkFrameInterpolationProcessor extends UObject { 
	static Load(ResourceName: string): LiveLinkFrameInterpolationProcessor;
	static Find(Outer: UObject, ResourceName: string): LiveLinkFrameInterpolationProcessor;
	static GetDefaultObject(): LiveLinkFrameInterpolationProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkFrameInterpolationProcessor;
	static C(Other: UObject | any): LiveLinkFrameInterpolationProcessor;
}

declare class LiveLinkFramePreProcessor extends UObject { 
	static Load(ResourceName: string): LiveLinkFramePreProcessor;
	static Find(Outer: UObject, ResourceName: string): LiveLinkFramePreProcessor;
	static GetDefaultObject(): LiveLinkFramePreProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkFramePreProcessor;
	static C(Other: UObject | any): LiveLinkFramePreProcessor;
}

declare class LiveLinkFrameTranslator extends UObject { 
	static Load(ResourceName: string): LiveLinkFrameTranslator;
	static Find(Outer: UObject, ResourceName: string): LiveLinkFrameTranslator;
	static GetDefaultObject(): LiveLinkFrameTranslator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkFrameTranslator;
	static C(Other: UObject | any): LiveLinkFrameTranslator;
}

declare class LiveLinkLightRole extends LiveLinkTransformRole { 
	static Load(ResourceName: string): LiveLinkLightRole;
	static Find(Outer: UObject, ResourceName: string): LiveLinkLightRole;
	static GetDefaultObject(): LiveLinkLightRole;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkLightRole;
	static C(Other: UObject | any): LiveLinkLightRole;
}

declare class LiveLinkSubjectSettings extends UObject { 
	PreProcessors: LiveLinkFramePreProcessor[];
	InterpolationProcessor: LiveLinkFrameInterpolationProcessor;
	Translators: LiveLinkFrameTranslator[];
	Role: UnrealEngineClass;
	FrameRate: FrameRate;
	bRebroadcastSubject: boolean;
	static Load(ResourceName: string): LiveLinkSubjectSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkSubjectSettings;
	static GetDefaultObject(): LiveLinkSubjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSubjectSettings;
	static C(Other: UObject | any): LiveLinkSubjectSettings;
}

declare class LiveLinkVirtualSubject extends UObject { 
	Role: UnrealEngineClass;
	Subjects: LiveLinkSubjectName[];
	FrameTranslators: LiveLinkFrameTranslator[];
	static Load(ResourceName: string): LiveLinkVirtualSubject;
	static Find(Outer: UObject, ResourceName: string): LiveLinkVirtualSubject;
	static GetDefaultObject(): LiveLinkVirtualSubject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkVirtualSubject;
	static C(Other: UObject | any): LiveLinkVirtualSubject;
}

declare type EPIEPreviewDeviceType = 'Unset' | 'Android' | 'IOS' | 'TVOS' | 'Switch' | 'MAX';
declare var EPIEPreviewDeviceType : { Unset:'Unset',Android:'Android',IOS:'IOS',TVOS:'TVOS',Switch:'Switch',MAX:'MAX', };
declare class PIEPreviewDeviceSpecification extends UObject { 
	PreviewDeviceType: EPIEPreviewDeviceType;
	GPUFamily: string;
	GLVersion: string;
	VulkanVersion: string;
	AndroidVersion: string;
	DeviceMake: string;
	DeviceModel: string;
	DeviceBuildNumber: string;
	UsingHoudini: boolean;
	Hardware: string;
	Chipset: string;
	static Load(ResourceName: string): PIEPreviewDeviceSpecification;
	static Find(Outer: UObject, ResourceName: string): PIEPreviewDeviceSpecification;
	static GetDefaultObject(): PIEPreviewDeviceSpecification;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewDeviceSpecification;
	static C(Other: UObject | any): PIEPreviewDeviceSpecification;
}

declare class BlueprintFunctionLibrary extends UObject { 
	static Load(ResourceName: string): BlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibrary;
	static GetDefaultObject(): BlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibrary;
	static C(Other: UObject | any): BlueprintFunctionLibrary;
}

declare class BlueprintGameplayTagLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintGameplayTagLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintGameplayTagLibrary;
	static GetDefaultObject(): BlueprintGameplayTagLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintGameplayTagLibrary;
	static RemoveGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
	static NotEqual_TagTag(A: GameplayTag,B: string): boolean;
	static NotEqual_TagContainerTagContainer(A: GameplayTagContainer,B: string): boolean;
	static NotEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
	static NotEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
	static MatchesTag(TagOne: GameplayTag,TagTwo: GameplayTag,bExactMatch: boolean): boolean;
	static MatchesAnyTags(TagOne: GameplayTag,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
	static MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
	static MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
	static MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
	static MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
	static MakeGameplayTagContainerFromArray(GameplayTags: GameplayTag[]): GameplayTagContainer;
	static IsTagQueryEmpty(TagQuery: GameplayTagQuery): boolean;
	static IsGameplayTagValid(GameplayTag: GameplayTag): boolean;
	static HasTag(TagContainer: GameplayTagContainer,Tag: GameplayTag,bExactMatch: boolean): boolean;
	static HasAnyTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
	static HasAllTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
	static GetTagName(GameplayTag: GameplayTag): string;
	static GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): number;
	static GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): string;
	static GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): string;
	static GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject,ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
	static EqualEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
	static EqualEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
	static DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer,TagQuery: GameplayTagQuery): boolean;
	static BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer,GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
	static AppendGameplayTagContainers(InOutTagContainer?: GameplayTagContainer,InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
	static AddGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
	static C(Other: UObject | any): BlueprintGameplayTagLibrary;
}

declare class GameplayTagAssetInterface extends Interface { 
	static Load(ResourceName: string): GameplayTagAssetInterface;
	static Find(Outer: UObject, ResourceName: string): GameplayTagAssetInterface;
	static GetDefaultObject(): GameplayTagAssetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagAssetInterface;
	HasMatchingGameplayTag(TagToCheck: GameplayTag): boolean;
	HasAnyMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
	HasAllMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
	GetOwnedGameplayTags(TagContainer?: GameplayTagContainer): {TagContainer: GameplayTagContainer};
	static C(Other: UObject | any): GameplayTagAssetInterface;
}

declare class EditableGameplayTagQueryExpression extends UObject { 
	static Load(ResourceName: string): EditableGameplayTagQueryExpression;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression;
	static GetDefaultObject(): EditableGameplayTagQueryExpression;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression;
}

declare class EditableGameplayTagQuery extends UObject { 
	UserDescription: string;
	RootExpression: EditableGameplayTagQueryExpression;
	TagQueryExportText_Helper: GameplayTagQuery;
	static Load(ResourceName: string): EditableGameplayTagQuery;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQuery;
	static GetDefaultObject(): EditableGameplayTagQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQuery;
	static C(Other: UObject | any): EditableGameplayTagQuery;
}

declare class EditableGameplayTagQueryExpression_AnyTagsMatch extends EditableGameplayTagQueryExpression { 
	Tags: GameplayTagContainer;
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyTagsMatch;
}

declare class EditableGameplayTagQueryExpression_AllTagsMatch extends EditableGameplayTagQueryExpression { 
	Tags: GameplayTagContainer;
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllTagsMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllTagsMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllTagsMatch;
}

declare class EditableGameplayTagQueryExpression_NoTagsMatch extends EditableGameplayTagQueryExpression { 
	Tags: GameplayTagContainer;
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoTagsMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoTagsMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoTagsMatch;
}

declare class EditableGameplayTagQueryExpression_AnyExprMatch extends EditableGameplayTagQueryExpression { 
	Expressions: EditableGameplayTagQueryExpression[];
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyExprMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyExprMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyExprMatch;
}

declare class EditableGameplayTagQueryExpression_AllExprMatch extends EditableGameplayTagQueryExpression { 
	Expressions: EditableGameplayTagQueryExpression[];
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllExprMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllExprMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllExprMatch;
}

declare class EditableGameplayTagQueryExpression_NoExprMatch extends EditableGameplayTagQueryExpression { 
	Expressions: EditableGameplayTagQueryExpression[];
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoExprMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoExprMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoExprMatch;
}

declare type EGameplayTagSourceType = 'Native' | 'DefaultTagList' | 'TagList' | 'RestrictedTagList' | 'DataTable' | 'Invalid' | 'EGameplayTagSourceType_MAX';
declare var EGameplayTagSourceType : { Native:'Native',DefaultTagList:'DefaultTagList',TagList:'TagList',RestrictedTagList:'RestrictedTagList',DataTable:'DataTable',Invalid:'Invalid',EGameplayTagSourceType_MAX:'EGameplayTagSourceType_MAX', };
declare class TableRowBase { 
	clone() : TableRowBase;
	static C(Other: UObject | any): TableRowBase;
}

declare class GameplayTagTableRow extends TableRowBase { 
	Tag: string;
	DevComment: string;
	clone() : GameplayTagTableRow;
	static C(Other: UObject | any): GameplayTagTableRow;
}

declare class GameplayTagsList extends UObject { 
	ConfigFileName: string;
	GameplayTagList: GameplayTagTableRow[];
	static Load(ResourceName: string): GameplayTagsList;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsList;
	static GetDefaultObject(): GameplayTagsList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsList;
	static C(Other: UObject | any): GameplayTagsList;
}

declare class RestrictedGameplayTagTableRow extends GameplayTagTableRow { 
	bAllowNonRestrictedChildren: boolean;
	clone() : RestrictedGameplayTagTableRow;
	static C(Other: UObject | any): RestrictedGameplayTagTableRow;
}

declare class RestrictedGameplayTagsList extends UObject { 
	ConfigFileName: string;
	RestrictedGameplayTagList: RestrictedGameplayTagTableRow[];
	static Load(ResourceName: string): RestrictedGameplayTagsList;
	static Find(Outer: UObject, ResourceName: string): RestrictedGameplayTagsList;
	static GetDefaultObject(): RestrictedGameplayTagsList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RestrictedGameplayTagsList;
	static C(Other: UObject | any): RestrictedGameplayTagsList;
}

declare class GameplayTagSource { 
	SourceName: string;
	SourceType: EGameplayTagSourceType;
	SourceTagList: GameplayTagsList;
	SourceRestrictedTagList: RestrictedGameplayTagsList;
	clone() : GameplayTagSource;
	static C(Other: UObject | any): GameplayTagSource;
}

declare class DataTable extends UObject { 
	RowStruct: ScriptStruct;
	bStripFromClientBuilds: boolean;
	bIgnoreExtraFields: boolean;
	bIgnoreMissingFields: boolean;
	ImportKeyField: string;
	AssetImportData: AssetImportData;
	ImportPath: string;
	RowStructName: string;
	RowsSerializedWithTags: number[];
	TemporarilyReferencedObjects: any;
	static Load(ResourceName: string): DataTable;
	static Find(Outer: UObject, ResourceName: string): DataTable;
	static GetDefaultObject(): DataTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTable;
	static C(Other: UObject | any): DataTable;
	GetDataTableAsJSON(InDTExportFlags: number): string;
	DoesDataTableRowExist(RowName: string): boolean;
	FillDataTableFromCSVFile(CSVFilePath: string): boolean;
	FillDataTableFromCSVString(CSVString: string): boolean;
	FillDataTableFromJSONFile(JSONFilePath: string,ImportRowStruct: ScriptStruct): boolean;
	FillDataTableFromJSONString(JsonString: string): boolean;
	GetDataTableColumnAsString(PropertyName: string): string[];
	GetDataTableRowFromName(RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
	GetDataTableRowNames(OutRowNames?: string[]): {OutRowNames: string[]};
	static GetDataTableAsJSON(InDataTable: DataTable,InDTExportFlags: number): string;
	static DoesDataTableRowExist(Table: DataTable,RowName: string): boolean;
	static FillDataTableFromCSVFile(DataTable: DataTable,CSVFilePath: string): boolean;
	static FillDataTableFromCSVString(DataTable: DataTable,CSVString: string): boolean;
	static FillDataTableFromJSONFile(DataTable: DataTable,JSONFilePath: string,ImportRowStruct: ScriptStruct): boolean;
	static FillDataTableFromJSONString(DataTable: DataTable,JsonString: string): boolean;
	static GetDataTableColumnAsString(DataTable: DataTable,PropertyName: string): string[];
	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
}

declare class GameplayTagsManager extends UObject { 
	TagSources: GameplayTagSource[];
	GameplayTagTables: DataTable[];
	static Load(ResourceName: string): GameplayTagsManager;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsManager;
	static GetDefaultObject(): GameplayTagsManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsManager;
	static C(Other: UObject | any): GameplayTagsManager;
}

declare class GameplayTagCategoryRemap { 
	BaseCategory: string;
	RemapCategories: string[];
	clone() : GameplayTagCategoryRemap;
	static C(Other: UObject | any): GameplayTagCategoryRemap;
}

declare class GameplayTagRedirect { 
	OldTagName: string;
	NewTagName: string;
	clone() : GameplayTagRedirect;
	static C(Other: UObject | any): GameplayTagRedirect;
}

declare class RestrictedConfigInfo { 
	RestrictedConfigName: string;
	Owners: string[];
	clone() : RestrictedConfigInfo;
	static C(Other: UObject | any): RestrictedConfigInfo;
}

declare class GameplayTagsSettings extends GameplayTagsList { 
	ImportTagsFromConfig: boolean;
	WarnOnInvalidTags: boolean;
	FastReplication: boolean;
	InvalidTagCharacters: string;
	CategoryRemapping: GameplayTagCategoryRemap[];
	GameplayTagTableList: SoftObjectPath[];
	GameplayTagRedirects: GameplayTagRedirect[];
	CommonlyReplicatedTags: string[];
	NumBitsForContainerSize: number;
	NetIndexFirstBitSegment: number;
	RestrictedConfigFiles: RestrictedConfigInfo[];
	RestrictedTagList: string;
	static Load(ResourceName: string): GameplayTagsSettings;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsSettings;
	static GetDefaultObject(): GameplayTagsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsSettings;
	static C(Other: UObject | any): GameplayTagsSettings;
}

declare class GameplayTagsDeveloperSettings extends DeveloperSettings { 
	DeveloperConfigName: string;
	FavoriteTagSource: string;
	static Load(ResourceName: string): GameplayTagsDeveloperSettings;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsDeveloperSettings;
	static GetDefaultObject(): GameplayTagsDeveloperSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsDeveloperSettings;
	static C(Other: UObject | any): GameplayTagsDeveloperSettings;
}

declare class AbstractNavData extends NavigationData { 
	static GetDefaultObject(): AbstractNavData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbstractNavData;
	static C(Other: UObject | any): AbstractNavData;
}

declare class CrowdManagerBase extends UObject { 
	static Load(ResourceName: string): CrowdManagerBase;
	static Find(Outer: UObject, ResourceName: string): CrowdManagerBase;
	static GetDefaultObject(): CrowdManagerBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManagerBase;
	static C(Other: UObject | any): CrowdManagerBase;
}

declare class NavArea_Default extends NavArea { 
	static Load(ResourceName: string): NavArea_Default;
	static Find(Outer: UObject, ResourceName: string): NavArea_Default;
	static GetDefaultObject(): NavArea_Default;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Default;
	static C(Other: UObject | any): NavArea_Default;
}

declare class NavArea_LowHeight extends NavArea { 
	static Load(ResourceName: string): NavArea_LowHeight;
	static Find(Outer: UObject, ResourceName: string): NavArea_LowHeight;
	static GetDefaultObject(): NavArea_LowHeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_LowHeight;
	static C(Other: UObject | any): NavArea_LowHeight;
}

declare class NavArea_Null extends NavArea { 
	static Load(ResourceName: string): NavArea_Null;
	static Find(Outer: UObject, ResourceName: string): NavArea_Null;
	static GetDefaultObject(): NavArea_Null;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Null;
	static C(Other: UObject | any): NavArea_Null;
}

declare class NavArea_Obstacle extends NavArea { 
	static Load(ResourceName: string): NavArea_Obstacle;
	static Find(Outer: UObject, ResourceName: string): NavArea_Obstacle;
	static GetDefaultObject(): NavArea_Obstacle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Obstacle;
	static C(Other: UObject | any): NavArea_Obstacle;
}

declare class NavAreaMeta extends NavArea { 
	static Load(ResourceName: string): NavAreaMeta;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta;
	static GetDefaultObject(): NavAreaMeta;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta;
	static C(Other: UObject | any): NavAreaMeta;
}

declare class NavAreaMeta_SwitchByAgent extends NavAreaMeta { 
	Agent0Area: UnrealEngineClass;
	Agent1Area: UnrealEngineClass;
	Agent2Area: UnrealEngineClass;
	Agent3Area: UnrealEngineClass;
	Agent4Area: UnrealEngineClass;
	Agent5Area: UnrealEngineClass;
	Agent6Area: UnrealEngineClass;
	Agent7Area: UnrealEngineClass;
	Agent8Area: UnrealEngineClass;
	Agent9Area: UnrealEngineClass;
	Agent10Area: UnrealEngineClass;
	Agent11Area: UnrealEngineClass;
	Agent12Area: UnrealEngineClass;
	Agent13Area: UnrealEngineClass;
	Agent14Area: UnrealEngineClass;
	Agent15Area: UnrealEngineClass;
	static Load(ResourceName: string): NavAreaMeta_SwitchByAgent;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta_SwitchByAgent;
	static GetDefaultObject(): NavAreaMeta_SwitchByAgent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta_SwitchByAgent;
	static C(Other: UObject | any): NavAreaMeta_SwitchByAgent;
}

declare class NavCollisionCylinder { 
	Offset: Vector;
	Radius: number;
	Height: number;
	clone() : NavCollisionCylinder;
	static C(Other: UObject | any): NavCollisionCylinder;
}

declare class NavCollisionBox { 
	Offset: Vector;
	Extent: Vector;
	clone() : NavCollisionBox;
	static C(Other: UObject | any): NavCollisionBox;
}

declare class NavCollision extends NavCollisionBase { 
	CylinderCollision: NavCollisionCylinder[];
	BoxCollision: NavCollisionBox[];
	AreaClass: UnrealEngineClass;
	bGatherConvexGeometry: boolean;
	bCreateOnClient: boolean;
	static Load(ResourceName: string): NavCollision;
	static Find(Outer: UObject, ResourceName: string): NavCollision;
	static GetDefaultObject(): NavCollision;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavCollision;
	static C(Other: UObject | any): NavCollision;
}

declare class NavigationGraph extends NavigationData { 
	static GetDefaultObject(): NavigationGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraph;
	static C(Other: UObject | any): NavigationGraph;
}

declare class NavigationGraphNode extends Actor { 
	static GetDefaultObject(): NavigationGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNode;
	static C(Other: UObject | any): NavigationGraphNode;
}

declare class NavGraphNode { 
	Owner: UObject;
	clone() : NavGraphNode;
	static C(Other: UObject | any): NavGraphNode;
}

declare class NavigationGraphNodeComponent extends SceneComponent { 
	UNode: NavGraphNode;
	NextNodeComponent: NavigationGraphNodeComponent;
	PrevNodeComponent: NavigationGraphNodeComponent;
	static Load(ResourceName: string): NavigationGraphNodeComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationGraphNodeComponent;
	static GetDefaultObject(): NavigationGraphNodeComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNodeComponent;
	static C(Other: UObject | any): NavigationGraphNodeComponent;
}

declare class NavigationInvokerComponent extends ActorComponent { 
	TileGenerationRadius: number;
	TileRemovalRadius: number;
	static Load(ResourceName: string): NavigationInvokerComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationInvokerComponent;
	static GetDefaultObject(): NavigationInvokerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationInvokerComponent;
	static C(Other: UObject | any): NavigationInvokerComponent;
}

declare class NavigationPathGenerator extends Interface { 
	static Load(ResourceName: string): NavigationPathGenerator;
	static Find(Outer: UObject, ResourceName: string): NavigationPathGenerator;
	static GetDefaultObject(): NavigationPathGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPathGenerator;
	static C(Other: UObject | any): NavigationPathGenerator;
}

declare type ENavDataGatheringModeConfig = 'Invalid' | 'Instant' | 'Lazy' | 'ENavDataGatheringModeConfig_MAX';
declare var ENavDataGatheringModeConfig : { Invalid:'Invalid',Instant:'Instant',Lazy:'Lazy',ENavDataGatheringModeConfig_MAX:'ENavDataGatheringModeConfig_MAX', };
declare type FNavigationSystemRunMode = 'InvalidMode' | 'GameMode' | 'EditorMode' | 'SimulationMode' | 'PIEMode' | 'InferFromWorldMode' | 'FNavigationSystemRunMode_MAX';
declare var FNavigationSystemRunMode : { InvalidMode:'InvalidMode',GameMode:'GameMode',EditorMode:'EditorMode',SimulationMode:'SimulationMode',PIEMode:'PIEMode',InferFromWorldMode:'InferFromWorldMode',FNavigationSystemRunMode_MAX:'FNavigationSystemRunMode_MAX', };
declare class NavMeshBoundsVolume extends Volume { 
	SupportedAgents: NavAgentSelector;
	static GetDefaultObject(): NavMeshBoundsVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshBoundsVolume;
	static C(Other: UObject | any): NavMeshBoundsVolume;
}

declare type ENavigationQueryResult = 'Invalid' | 'Error' | 'Fail' | 'Success' | 'ENavigationQueryResult_MAX';
declare var ENavigationQueryResult : { Invalid:'Invalid',Error:'Error',Fail:'Fail',Success:'Success',ENavigationQueryResult_MAX:'ENavigationQueryResult_MAX', };
declare class NavigationSystemV1 extends NavigationSystemBase { 
	MainNavData: NavigationData;
	AbstractNavData: NavigationData;
	DefaultAgentName: string;
	CrowdManagerClass: Class;
	bAutoCreateNavigationData: boolean;
	bSpawnNavDataInNavBoundsLevel: boolean;
	bAllowClientSideNavigation: boolean;
	bShouldDiscardSubLevelNavData: boolean;
	bTickWhilePaused: boolean;
	bSupportRebuilding: boolean;
	bInitialBuildingLocked: boolean;
	bSkipAgentHeightCheckWhenPickingNavData: boolean;
	bGenerateNavigationOnlyAroundNavigationInvokers: boolean;
	ActiveTilesUpdateInterval: number;
	DataGatheringMode: ENavDataGatheringModeConfig;
	DirtyAreaWarningSizeThreshold: number;
	SupportedAgents: NavDataConfig[];
	SupportedAgentsMask: NavAgentSelector;
	NavDataSet: NavigationData[];
	NavDataRegistrationQueue: NavigationData[];
	OnNavDataRegisteredEvent: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
	OnNavigationGenerationFinishedDelegate: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
	OperationMode: FNavigationSystemRunMode;
	DirtyAreasUpdateFreq: number;
	static Load(ResourceName: string): NavigationSystemV1;
	static Find(Outer: UObject, ResourceName: string): NavigationSystemV1;
	static GetDefaultObject(): NavigationSystemV1;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemV1;
	UnregisterNavigationInvoker(Invoker: Actor): void;
	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
	SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: number): void;
	SetGeometryGatheringMode(NewMode: ENavDataGatheringModeConfig): void;
	ResetMaxSimultaneousTileGenerationJobsCount(): void;
	RegisterNavigationInvoker(Invoker: Actor,TileGenerationRadius: number,TileRemovalRadius: number): void;
	static ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,NavData: NavigationData,FilterClass: UnrealEngineClass,QueryExtent: Vector): Vector;
	OnNavigationBoundsUpdated(NavVolume: NavMeshBoundsVolume): void;
	static NavigationRaycast(WorldContextObject: UObject,RayStart: Vector,RayEnd: Vector,HitLocation?: Vector,FilterClass?: UnrealEngineClass,Querier?: Controller): {HitLocation: Vector, $: boolean};
	K2_ReplaceAreaInOctreeData(UObject: UObject,OldArea: UnrealEngineClass,NewArea: UnrealEngineClass): boolean;
	static K2_ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,ProjectedLocation?: Vector,NavData?: NavigationData,FilterClass?: UnrealEngineClass,QueryExtent?: Vector): {ProjectedLocation: Vector, $: boolean};
	static K2_GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
	static K2_GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
	static K2_GetRandomLocationInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
	static IsNavigationBeingBuiltOrLocked(WorldContextObject: UObject): boolean;
	static IsNavigationBeingBuilt(WorldContextObject: UObject): boolean;
	static GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
	static GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
	static GetPathLength(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathLength?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathLength: number, $: ENavigationQueryResult};
	static GetPathCost(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathCost?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathCost: number, $: ENavigationQueryResult};
	static GetNavigationSystem(WorldContextObject: UObject): NavigationSystemV1;
	static FindPathToLocationSynchronously(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
	static FindPathToActorSynchronously(WorldContextObject: UObject,PathStart: Vector,GoalActor: Actor,TetherDistance: number,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
	static C(Other: UObject | any): NavigationSystemV1;
}

declare class NavigationSystemModuleConfig extends NavigationSystemConfig { 
	bStrictlyStatic: boolean;
	bCreateOnClient: boolean;
	bAutoSpawnMissingNavData: boolean;
	bSpawnNavDataInNavBoundsLevel: boolean;
	static Load(ResourceName: string): NavigationSystemModuleConfig;
	static Find(Outer: UObject, ResourceName: string): NavigationSystemModuleConfig;
	static GetDefaultObject(): NavigationSystemModuleConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemModuleConfig;
	static C(Other: UObject | any): NavigationSystemModuleConfig;
}

declare class NavTestRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavTestRenderingComponent;
	static GetDefaultObject(): NavTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavTestRenderingComponent;
	static C(Other: UObject | any): NavTestRenderingComponent;
}

declare type ENavCostDisplay = 'TotalCost' | 'HeuristicOnly' | 'RealCostOnly' | 'ENavCostDisplay_MAX';
declare var ENavCostDisplay : { TotalCost:'TotalCost',HeuristicOnly:'HeuristicOnly',RealCostOnly:'RealCostOnly',ENavCostDisplay_MAX:'ENavCostDisplay_MAX', };
declare class NavigationTestingActor extends Actor { 
	CapsuleComponent: CapsuleComponent;
	EdRenderComp: NavTestRenderingComponent;
	InvokerComponent: NavigationInvokerComponent;
	bActAsNavigationInvoker: boolean;
	NavAgentProps: NavAgentProperties;
	QueryingExtent: Vector;
	MyNavData: NavigationData;
	ProjectedLocation: Vector;
	bProjectedLocationValid: boolean;
	bSearchStart: boolean;
	CostLimitFactor: number;
	MinimumCostLimit: number;
	bBacktracking: boolean;
	bUseHierarchicalPathfinding: boolean;
	bGatherDetailedInfo: boolean;
	bDrawDistanceToWall: boolean;
	bShowNodePool: boolean;
	bShowBestPath: boolean;
	bShowDiffWithPreviousStep: boolean;
	bShouldBeVisibleInGame: boolean;
	CostDisplayMode: ENavCostDisplay;
	TextCanvasOffset: Vector2D;
	bPathExist: boolean;
	bPathIsPartial: boolean;
	bPathSearchOutOfNodes: boolean;
	PathfindingTime: number;
	PathCost: number;
	PathfindingSteps: number;
	OtherActor: NavigationTestingActor;
	FilterClass: UnrealEngineClass;
	ShowStepIndex: number;
	OffsetFromCornersDistance: number;
	static GetDefaultObject(): NavigationTestingActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTestingActor;
	static C(Other: UObject | any): NavigationTestingActor;
}

declare type ENavLinkDirection = 'BothWays' | 'LeftToRight' | 'RightToLeft' | 'ENavLinkDirection_MAX';
declare var ENavLinkDirection : { BothWays:'BothWays',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',ENavLinkDirection_MAX:'ENavLinkDirection_MAX', };
declare class NavigationLinkBase { 
	LeftProjectHeight: number;
	MaxFallDownLength: number;
	SnapRadius: number;
	SnapHeight: number;
	SupportedAgents: NavAgentSelector;
	bSupportsAgent0: boolean;
	bSupportsAgent1: boolean;
	bSupportsAgent2: boolean;
	bSupportsAgent3: boolean;
	bSupportsAgent4: boolean;
	bSupportsAgent5: boolean;
	bSupportsAgent6: boolean;
	bSupportsAgent7: boolean;
	bSupportsAgent8: boolean;
	bSupportsAgent9: boolean;
	bSupportsAgent10: boolean;
	bSupportsAgent11: boolean;
	bSupportsAgent12: boolean;
	bSupportsAgent13: boolean;
	bSupportsAgent14: boolean;
	bSupportsAgent15: boolean;
	Description: string;
	Direction: ENavLinkDirection;
	bUseSnapHeight: boolean;
	bSnapToCheapestArea: boolean;
	bCustomFlag0: boolean;
	bCustomFlag1: boolean;
	bCustomFlag2: boolean;
	bCustomFlag3: boolean;
	bCustomFlag4: boolean;
	bCustomFlag5: boolean;
	bCustomFlag6: boolean;
	bCustomFlag7: boolean;
	AreaClass: UnrealEngineClass;
	clone() : NavigationLinkBase;
	static C(Other: UObject | any): NavigationLinkBase;
}

declare class NavigationLink extends NavigationLinkBase { 
	Left: Vector;
	Right: Vector;
	clone() : NavigationLink;
	static C(Other: UObject | any): NavigationLink;
}

declare class NavLinkComponent extends PrimitiveComponent { 
	Links: NavigationLink[];
	static Load(ResourceName: string): NavLinkComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkComponent;
	static GetDefaultObject(): NavLinkComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkComponent;
	static C(Other: UObject | any): NavLinkComponent;
}

declare class NavRelevantComponent extends ActorComponent { 
	bAttachToOwnersRoot: boolean;
	CachedNavParent: UObject;
	static Load(ResourceName: string): NavRelevantComponent;
	static Find(Outer: UObject, ResourceName: string): NavRelevantComponent;
	static GetDefaultObject(): NavRelevantComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantComponent;
	SetNavigationRelevancy(bRelevant: boolean): void;
	static C(Other: UObject | any): NavRelevantComponent;
}

declare class NavLinkCustomComponent extends NavRelevantComponent { 
	NavLinkUserId: any;
	EnabledAreaClass: UnrealEngineClass;
	DisabledAreaClass: UnrealEngineClass;
	SupportedAgents: NavAgentSelector;
	LinkRelativeStart: Vector;
	LinkRelativeEnd: Vector;
	LinkDirection: ENavLinkDirection;
	bLinkEnabled: boolean;
	bNotifyWhenEnabled: boolean;
	bNotifyWhenDisabled: boolean;
	bCreateBoxObstacle: boolean;
	ObstacleOffset: Vector;
	ObstacleExtent: Vector;
	ObstacleAreaClass: UnrealEngineClass;
	BroadcastRadius: number;
	BroadcastInterval: number;
	BroadcastChannel: ECollisionChannel;
	static Load(ResourceName: string): NavLinkCustomComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomComponent;
	static GetDefaultObject(): NavLinkCustomComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomComponent;
	static C(Other: UObject | any): NavLinkCustomComponent;
}

declare class NavLinkCustomInterface extends Interface { 
	static Load(ResourceName: string): NavLinkCustomInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomInterface;
	static GetDefaultObject(): NavLinkCustomInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomInterface;
	static C(Other: UObject | any): NavLinkCustomInterface;
}

declare class NavLinkHostInterface extends Interface { 
	static Load(ResourceName: string): NavLinkHostInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkHostInterface;
	static GetDefaultObject(): NavLinkHostInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkHostInterface;
	static C(Other: UObject | any): NavLinkHostInterface;
}

declare class NavLinkRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavLinkRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkRenderingComponent;
	static GetDefaultObject(): NavLinkRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkRenderingComponent;
	static C(Other: UObject | any): NavLinkRenderingComponent;
}

declare class NavigationSegmentLink extends NavigationLinkBase { 
	LeftStart: Vector;
	LeftEnd: Vector;
	RightStart: Vector;
	RightEnd: Vector;
	clone() : NavigationSegmentLink;
	static C(Other: UObject | any): NavigationSegmentLink;
}

declare class NavLinkDefinition extends UObject { 
	Links: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	static Load(ResourceName: string): NavLinkDefinition;
	static Find(Outer: UObject, ResourceName: string): NavLinkDefinition;
	static GetDefaultObject(): NavLinkDefinition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkDefinition;
	static C(Other: UObject | any): NavLinkDefinition;
}

declare class NavLinkTrivial extends NavLinkDefinition { 
	static Load(ResourceName: string): NavLinkTrivial;
	static Find(Outer: UObject, ResourceName: string): NavLinkTrivial;
	static GetDefaultObject(): NavLinkTrivial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkTrivial;
	static C(Other: UObject | any): NavLinkTrivial;
}

declare class NavMeshRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavMeshRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavMeshRenderingComponent;
	static GetDefaultObject(): NavMeshRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshRenderingComponent;
	static C(Other: UObject | any): NavMeshRenderingComponent;
}

declare class NavModifierComponent extends NavRelevantComponent { 
	AreaClass: UnrealEngineClass;
	FailsafeExtent: Vector;
	bIncludeAgentHeight: boolean;
	static Load(ResourceName: string): NavModifierComponent;
	static Find(Outer: UObject, ResourceName: string): NavModifierComponent;
	static GetDefaultObject(): NavModifierComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierComponent;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject | any): NavModifierComponent;
}

declare class NavModifierVolume extends Volume { 
	AreaClass: UnrealEngineClass;
	bMaskFillCollisionUnderneathForNavmesh: boolean;
	static GetDefaultObject(): NavModifierVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierVolume;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject | any): NavModifierVolume;
}

declare class NavNodeInterface extends Interface { 
	static Load(ResourceName: string): NavNodeInterface;
	static Find(Outer: UObject, ResourceName: string): NavNodeInterface;
	static GetDefaultObject(): NavNodeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavNodeInterface;
	static C(Other: UObject | any): NavNodeInterface;
}

declare type ENavSystemOverridePolicy = 'Override' | 'Append' | 'Skip' | 'ENavSystemOverridePolicy_MAX';
declare var ENavSystemOverridePolicy : { Override:'Override',Append:'Append',Skip:'Skip',ENavSystemOverridePolicy_MAX:'ENavSystemOverridePolicy_MAX', };
declare class NavSystemConfigOverride extends Actor { 
	SpriteComponent: BillboardComponent;
	NavigationSystemConfig: NavigationSystemConfig;
	OverridePolicy: ENavSystemOverridePolicy;
	bLoadOnClient: boolean;
	static GetDefaultObject(): NavSystemConfigOverride;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavSystemConfigOverride;
	ApplyChanges(): void;
	static C(Other: UObject | any): NavSystemConfigOverride;
}

declare class RecastFilter_UseDefaultArea extends NavigationQueryFilter { 
	static Load(ResourceName: string): RecastFilter_UseDefaultArea;
	static Find(Outer: UObject, ResourceName: string): RecastFilter_UseDefaultArea;
	static GetDefaultObject(): RecastFilter_UseDefaultArea;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastFilter_UseDefaultArea;
	static C(Other: UObject | any): RecastFilter_UseDefaultArea;
}

declare class RecastNavMeshDataChunk extends NavigationDataChunk { 
	static Load(ResourceName: string): RecastNavMeshDataChunk;
	static Find(Outer: UObject, ResourceName: string): RecastNavMeshDataChunk;
	static GetDefaultObject(): RecastNavMeshDataChunk;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMeshDataChunk;
	static C(Other: UObject | any): RecastNavMeshDataChunk;
}

declare class InputBehavior extends UObject { 
	static Load(ResourceName: string): InputBehavior;
	static Find(Outer: UObject, ResourceName: string): InputBehavior;
	static GetDefaultObject(): InputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputBehavior;
	static C(Other: UObject | any): InputBehavior;
}

declare class AnyButtonInputBehavior extends InputBehavior { 
	static Load(ResourceName: string): AnyButtonInputBehavior;
	static Find(Outer: UObject, ResourceName: string): AnyButtonInputBehavior;
	static GetDefaultObject(): AnyButtonInputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnyButtonInputBehavior;
	static C(Other: UObject | any): AnyButtonInputBehavior;
}

declare class InteractiveGizmoBuilder extends UObject { 
	static Load(ResourceName: string): InteractiveGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): InteractiveGizmoBuilder;
	static GetDefaultObject(): InteractiveGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveGizmoBuilder;
	static C(Other: UObject | any): InteractiveGizmoBuilder;
}

declare class AxisAngleGizmoBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): AxisAngleGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): AxisAngleGizmoBuilder;
	static GetDefaultObject(): AxisAngleGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisAngleGizmoBuilder;
	static C(Other: UObject | any): AxisAngleGizmoBuilder;
}

declare class BehaviorInfo { 
	Behavior: InputBehavior;
	clone() : BehaviorInfo;
	static C(Other: UObject | any): BehaviorInfo;
}

declare class InputBehaviorSet extends UObject { 
	Behaviors: BehaviorInfo[];
	static Load(ResourceName: string): InputBehaviorSet;
	static Find(Outer: UObject, ResourceName: string): InputBehaviorSet;
	static GetDefaultObject(): InputBehaviorSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputBehaviorSet;
	static C(Other: UObject | any): InputBehaviorSet;
}

declare class InteractiveGizmo extends UObject { 
	InputBehaviors: InputBehaviorSet;
	static Load(ResourceName: string): InteractiveGizmo;
	static Find(Outer: UObject, ResourceName: string): InteractiveGizmo;
	static GetDefaultObject(): InteractiveGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveGizmo;
	static C(Other: UObject | any): InteractiveGizmo;
}

declare class AxisAngleGizmo extends InteractiveGizmo { 
	AxisSource: any;
	AngleSource: any;
	HitTarget: any;
	StateTarget: any;
	bInInteraction: boolean;
	RotationOrigin: Vector;
	RotationAxis: Vector;
	RotationPlaneX: Vector;
	RotationPlaneY: Vector;
	InteractionStartPoint: Vector;
	InteractionCurPoint: Vector;
	InteractionStartAngle: number;
	InteractionCurAngle: number;
	static Load(ResourceName: string): AxisAngleGizmo;
	static Find(Outer: UObject, ResourceName: string): AxisAngleGizmo;
	static GetDefaultObject(): AxisAngleGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisAngleGizmo;
	static C(Other: UObject | any): AxisAngleGizmo;
}

declare class AxisPositionGizmoBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): AxisPositionGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): AxisPositionGizmoBuilder;
	static GetDefaultObject(): AxisPositionGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisPositionGizmoBuilder;
	static C(Other: UObject | any): AxisPositionGizmoBuilder;
}

declare class AxisPositionGizmo extends InteractiveGizmo { 
	AxisSource: any;
	ParameterSource: any;
	HitTarget: any;
	StateTarget: any;
	bEnableSignedAxis: boolean;
	bInInteraction: boolean;
	InteractionOrigin: Vector;
	InteractionAxis: Vector;
	InteractionStartPoint: Vector;
	InteractionCurPoint: Vector;
	InteractionStartParameter: number;
	InteractionCurParameter: number;
	ParameterSign: number;
	static Load(ResourceName: string): AxisPositionGizmo;
	static Find(Outer: UObject, ResourceName: string): AxisPositionGizmo;
	static GetDefaultObject(): AxisPositionGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisPositionGizmo;
	static C(Other: UObject | any): AxisPositionGizmo;
}

declare class GizmoConstantAxisSource extends UObject { 
	Origin: Vector;
	Direction: Vector;
	static Load(ResourceName: string): GizmoConstantAxisSource;
	static Find(Outer: UObject, ResourceName: string): GizmoConstantAxisSource;
	static GetDefaultObject(): GizmoConstantAxisSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoConstantAxisSource;
	static C(Other: UObject | any): GizmoConstantAxisSource;
}

declare class GizmoConstantFrameAxisSource extends UObject { 
	Origin: Vector;
	Direction: Vector;
	TangentX: Vector;
	TangentY: Vector;
	static Load(ResourceName: string): GizmoConstantFrameAxisSource;
	static Find(Outer: UObject, ResourceName: string): GizmoConstantFrameAxisSource;
	static GetDefaultObject(): GizmoConstantFrameAxisSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoConstantFrameAxisSource;
	static C(Other: UObject | any): GizmoConstantFrameAxisSource;
}

declare class GizmoWorldAxisSource extends UObject { 
	Origin: Vector;
	AxisIndex: number;
	static Load(ResourceName: string): GizmoWorldAxisSource;
	static Find(Outer: UObject, ResourceName: string): GizmoWorldAxisSource;
	static GetDefaultObject(): GizmoWorldAxisSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoWorldAxisSource;
	static C(Other: UObject | any): GizmoWorldAxisSource;
}

declare class GizmoComponentAxisSource extends UObject { 
	Component: SceneComponent;
	AxisIndex: number;
	bLocalAxes: boolean;
	static Load(ResourceName: string): GizmoComponentAxisSource;
	static Find(Outer: UObject, ResourceName: string): GizmoComponentAxisSource;
	static GetDefaultObject(): GizmoComponentAxisSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoComponentAxisSource;
	static C(Other: UObject | any): GizmoComponentAxisSource;
}

declare class InteractiveToolPropertySet extends UObject { 
	CachedProperties: InteractiveToolPropertySet;
	bIsPropertySetEnabled: boolean;
	static Load(ResourceName: string): InteractiveToolPropertySet;
	static Find(Outer: UObject, ResourceName: string): InteractiveToolPropertySet;
	static GetDefaultObject(): InteractiveToolPropertySet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveToolPropertySet;
	static C(Other: UObject | any): InteractiveToolPropertySet;
}

declare class BrushBaseProperties extends InteractiveToolPropertySet { 
	BrushSize: number;
	bSpecifyRadius: boolean;
	BrushRadius: number;
	BrushStrength: number;
	BrushFalloffAmount: number;
	bShowStrength: boolean;
	bShowFalloff: boolean;
	static Load(ResourceName: string): BrushBaseProperties;
	static Find(Outer: UObject, ResourceName: string): BrushBaseProperties;
	static GetDefaultObject(): BrushBaseProperties;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushBaseProperties;
	static C(Other: UObject | any): BrushBaseProperties;
}

declare class InteractiveTool extends UObject { 
	InputBehaviors: InputBehaviorSet;
	ToolPropertyObjects: UObject[];
	static Load(ResourceName: string): InteractiveTool;
	static Find(Outer: UObject, ResourceName: string): InteractiveTool;
	static GetDefaultObject(): InteractiveTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveTool;
	static C(Other: UObject | any): InteractiveTool;
}

declare class SingleSelectionTool extends InteractiveTool { 
	static Load(ResourceName: string): SingleSelectionTool;
	static Find(Outer: UObject, ResourceName: string): SingleSelectionTool;
	static GetDefaultObject(): SingleSelectionTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SingleSelectionTool;
	static C(Other: UObject | any): SingleSelectionTool;
}

declare class MeshSurfacePointTool extends SingleSelectionTool { 
	static Load(ResourceName: string): MeshSurfacePointTool;
	static Find(Outer: UObject, ResourceName: string): MeshSurfacePointTool;
	static GetDefaultObject(): MeshSurfacePointTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSurfacePointTool;
	static C(Other: UObject | any): MeshSurfacePointTool;
}

declare class BrushStampData { 
	clone() : BrushStampData;
	static C(Other: UObject | any): BrushStampData;
}

declare class BrushStampIndicator extends InteractiveGizmo { 
	BrushRadius: number;
	BrushFalloff: number;
	BrushPosition: Vector;
	BrushNormal: Vector;
	bDrawIndicatorLines: boolean;
	bDrawRadiusCircle: boolean;
	SampleStepCount: number;
	LineColor: LinearColor;
	LineThickness: number;
	bDepthTested: boolean;
	bDrawSecondaryLines: boolean;
	SecondaryLineThickness: number;
	SecondaryLineColor: LinearColor;
	AttachedComponent: PrimitiveComponent;
	static Load(ResourceName: string): BrushStampIndicator;
	static Find(Outer: UObject, ResourceName: string): BrushStampIndicator;
	static GetDefaultObject(): BrushStampIndicator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushStampIndicator;
	static C(Other: UObject | any): BrushStampIndicator;
}

declare class BaseBrushTool extends MeshSurfacePointTool { 
	BrushProperties: BrushBaseProperties;
	bInBrushStroke: boolean;
	WorldToLocalScale: number;
	LastBrushStamp: BrushStampData;
	PropertyClass: Class;
	BrushStampIndicator: BrushStampIndicator;
	static Load(ResourceName: string): BaseBrushTool;
	static Find(Outer: UObject, ResourceName: string): BaseBrushTool;
	static GetDefaultObject(): BaseBrushTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseBrushTool;
	static C(Other: UObject | any): BaseBrushTool;
}

declare class BrushStampIndicatorBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): BrushStampIndicatorBuilder;
	static Find(Outer: UObject, ResourceName: string): BrushStampIndicatorBuilder;
	static GetDefaultObject(): BrushStampIndicatorBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushStampIndicatorBuilder;
	static C(Other: UObject | any): BrushStampIndicatorBuilder;
}

declare class ClickDragInputBehavior extends AnyButtonInputBehavior { 
	bUpdateModifiersDuringDrag: boolean;
	static Load(ResourceName: string): ClickDragInputBehavior;
	static Find(Outer: UObject, ResourceName: string): ClickDragInputBehavior;
	static GetDefaultObject(): ClickDragInputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClickDragInputBehavior;
	static C(Other: UObject | any): ClickDragInputBehavior;
}

declare class LocalClickDragInputBehavior extends ClickDragInputBehavior { 
	static Load(ResourceName: string): LocalClickDragInputBehavior;
	static Find(Outer: UObject, ResourceName: string): LocalClickDragInputBehavior;
	static GetDefaultObject(): LocalClickDragInputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalClickDragInputBehavior;
	static C(Other: UObject | any): LocalClickDragInputBehavior;
}

declare class InteractiveToolBuilder extends UObject { 
	static Load(ResourceName: string): InteractiveToolBuilder;
	static Find(Outer: UObject, ResourceName: string): InteractiveToolBuilder;
	static GetDefaultObject(): InteractiveToolBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveToolBuilder;
	static C(Other: UObject | any): InteractiveToolBuilder;
}

declare class ClickDragToolBuilder extends InteractiveToolBuilder { 
	static Load(ResourceName: string): ClickDragToolBuilder;
	static Find(Outer: UObject, ResourceName: string): ClickDragToolBuilder;
	static GetDefaultObject(): ClickDragToolBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClickDragToolBuilder;
	static C(Other: UObject | any): ClickDragToolBuilder;
}

declare class ClickDragTool extends InteractiveTool { 
	static Load(ResourceName: string): ClickDragTool;
	static Find(Outer: UObject, ResourceName: string): ClickDragTool;
	static GetDefaultObject(): ClickDragTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClickDragTool;
	static C(Other: UObject | any): ClickDragTool;
}

declare class InternalToolFrameworkActor extends Actor { 
	static GetDefaultObject(): InternalToolFrameworkActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternalToolFrameworkActor;
	static C(Other: UObject | any): InternalToolFrameworkActor;
}

declare class GizmoActor extends InternalToolFrameworkActor { 
	static GetDefaultObject(): GizmoActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoActor;
	static C(Other: UObject | any): GizmoActor;
}

declare class GizmoBaseComponent extends PrimitiveComponent { 
	Color: LinearColor;
	HoverSizeMultiplier: number;
	PixelHitDistanceThreshold: number;
	static Load(ResourceName: string): GizmoBaseComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoBaseComponent;
	static GetDefaultObject(): GizmoBaseComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBaseComponent;
	UpdateWorldLocalState(bWorldIn: boolean): void;
	UpdateHoverState(bHoveringIn: boolean): void;
	static C(Other: UObject | any): GizmoBaseComponent;
}

declare class GizmoArrowComponent extends GizmoBaseComponent { 
	Direction: Vector;
	Gap: number;
	Length: number;
	Thickness: number;
	static Load(ResourceName: string): GizmoArrowComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoArrowComponent;
	static GetDefaultObject(): GizmoArrowComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoArrowComponent;
	static C(Other: UObject | any): GizmoArrowComponent;
}

declare class GizmoBoxComponent extends GizmoBaseComponent { 
	Origin: Vector;
	Rotation: Quat;
	Dimensions: Vector;
	LineThickness: number;
	bRemoveHiddenLines: boolean;
	bEnableAxisFlip: boolean;
	static Load(ResourceName: string): GizmoBoxComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoBoxComponent;
	static GetDefaultObject(): GizmoBoxComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBoxComponent;
	static C(Other: UObject | any): GizmoBoxComponent;
}

declare class GizmoCircleComponent extends GizmoBaseComponent { 
	Normal: Vector;
	Radius: number;
	Thickness: number;
	NumSides: number;
	bViewAligned: boolean;
	bOnlyAllowFrontFacingHits: boolean;
	static Load(ResourceName: string): GizmoCircleComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoCircleComponent;
	static GetDefaultObject(): GizmoCircleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoCircleComponent;
	static C(Other: UObject | any): GizmoCircleComponent;
}

declare class GizmoTransformSource extends Interface { 
	static Load(ResourceName: string): GizmoTransformSource;
	static Find(Outer: UObject, ResourceName: string): GizmoTransformSource;
	static GetDefaultObject(): GizmoTransformSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoTransformSource;
	SetTransform(NewTransform: Transform): void;
	GetTransform(): Transform;
	static C(Other: UObject | any): GizmoTransformSource;
}

declare class GizmoAxisSource extends Interface { 
	static Load(ResourceName: string): GizmoAxisSource;
	static Find(Outer: UObject, ResourceName: string): GizmoAxisSource;
	static GetDefaultObject(): GizmoAxisSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoAxisSource;
	HasTangentVectors(): boolean;
	GetTangentVectors(TangentXOut?: Vector,TangentYOut?: Vector): {TangentXOut: Vector, TangentYOut: Vector};
	GetOrigin(): Vector;
	GetDirection(): Vector;
	static C(Other: UObject | any): GizmoAxisSource;
}

declare class GizmoClickTarget extends Interface { 
	static Load(ResourceName: string): GizmoClickTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoClickTarget;
	static GetDefaultObject(): GizmoClickTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoClickTarget;
	UpdateHoverState(bHovering: boolean): void;
	static C(Other: UObject | any): GizmoClickTarget;
}

declare class GizmoStateTarget extends Interface { 
	static Load(ResourceName: string): GizmoStateTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoStateTarget;
	static GetDefaultObject(): GizmoStateTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoStateTarget;
	EndUpdate(): void;
	BeginUpdate(): void;
	static C(Other: UObject | any): GizmoStateTarget;
}

declare class GizmoFloatParameterSource extends Interface { 
	static Load(ResourceName: string): GizmoFloatParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoFloatParameterSource;
	static GetDefaultObject(): GizmoFloatParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoFloatParameterSource;
	SetParameter(NewValue: number): void;
	GetParameter(): number;
	EndModify(): void;
	BeginModify(): void;
	static C(Other: UObject | any): GizmoFloatParameterSource;
}

declare class GizmoVec2ParameterSource extends Interface { 
	static Load(ResourceName: string): GizmoVec2ParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoVec2ParameterSource;
	static GetDefaultObject(): GizmoVec2ParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoVec2ParameterSource;
	SetParameter(NewValue: Vector2D): void;
	GetParameter(): Vector2D;
	EndModify(): void;
	BeginModify(): void;
	static C(Other: UObject | any): GizmoVec2ParameterSource;
}

declare class GizmoLineHandleComponent extends GizmoBaseComponent { 
	Normal: Vector;
	HandleSize: number;
	Thickness: number;
	Direction: Vector;
	Length: number;
	bImageScale: boolean;
	static Load(ResourceName: string): GizmoLineHandleComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoLineHandleComponent;
	static GetDefaultObject(): GizmoLineHandleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoLineHandleComponent;
	static C(Other: UObject | any): GizmoLineHandleComponent;
}

declare class GizmoRectangleComponent extends GizmoBaseComponent { 
	DirectionX: Vector;
	DirectionY: Vector;
	OffsetX: number;
	OffsetY: number;
	LengthX: number;
	LengthY: number;
	Thickness: number;
	SegmentFlags: number;
	static Load(ResourceName: string): GizmoRectangleComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoRectangleComponent;
	static GetDefaultObject(): GizmoRectangleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoRectangleComponent;
	static C(Other: UObject | any): GizmoRectangleComponent;
}

declare class GizmoLambdaHitTarget extends UObject { 
	static Load(ResourceName: string): GizmoLambdaHitTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoLambdaHitTarget;
	static GetDefaultObject(): GizmoLambdaHitTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoLambdaHitTarget;
	static C(Other: UObject | any): GizmoLambdaHitTarget;
}

declare class GizmoComponentHitTarget extends UObject { 
	Component: PrimitiveComponent;
	static Load(ResourceName: string): GizmoComponentHitTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoComponentHitTarget;
	static GetDefaultObject(): GizmoComponentHitTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoComponentHitTarget;
	static C(Other: UObject | any): GizmoComponentHitTarget;
}

declare class InputBehaviorSource extends Interface { 
	static Load(ResourceName: string): InputBehaviorSource;
	static Find(Outer: UObject, ResourceName: string): InputBehaviorSource;
	static GetDefaultObject(): InputBehaviorSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputBehaviorSource;
	static C(Other: UObject | any): InputBehaviorSource;
}

declare class InputRouter extends UObject { 
	bAutoInvalidateOnHover: boolean;
	bAutoInvalidateOnCapture: boolean;
	ActiveInputBehaviors: InputBehaviorSet;
	static Load(ResourceName: string): InputRouter;
	static Find(Outer: UObject, ResourceName: string): InputRouter;
	static GetDefaultObject(): InputRouter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputRouter;
	static C(Other: UObject | any): InputRouter;
}

declare class InteractionMechanic extends UObject { 
	static Load(ResourceName: string): InteractionMechanic;
	static Find(Outer: UObject, ResourceName: string): InteractionMechanic;
	static GetDefaultObject(): InteractionMechanic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractionMechanic;
	static C(Other: UObject | any): InteractionMechanic;
}

declare class ActiveGizmo { 
	clone() : ActiveGizmo;
	static C(Other: UObject | any): ActiveGizmo;
}

declare class InteractiveGizmoManager extends UObject { 
	ActiveGizmos: ActiveGizmo[];
	GizmoBuilders: any;
	static Load(ResourceName: string): InteractiveGizmoManager;
	static Find(Outer: UObject, ResourceName: string): InteractiveGizmoManager;
	static GetDefaultObject(): InteractiveGizmoManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveGizmoManager;
	static C(Other: UObject | any): InteractiveGizmoManager;
}

declare class ToolContextTransactionProvider extends Interface { 
	static Load(ResourceName: string): ToolContextTransactionProvider;
	static Find(Outer: UObject, ResourceName: string): ToolContextTransactionProvider;
	static GetDefaultObject(): ToolContextTransactionProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolContextTransactionProvider;
	static C(Other: UObject | any): ToolContextTransactionProvider;
}

declare class InteractiveToolManager extends UObject { 
	ActiveLeftTool: InteractiveTool;
	ActiveRightTool: InteractiveTool;
	ToolBuilders: any;
	static Load(ResourceName: string): InteractiveToolManager;
	static Find(Outer: UObject, ResourceName: string): InteractiveToolManager;
	static GetDefaultObject(): InteractiveToolManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveToolManager;
	static C(Other: UObject | any): InteractiveToolManager;
}

declare class ToolFrameworkComponent extends Interface { 
	static Load(ResourceName: string): ToolFrameworkComponent;
	static Find(Outer: UObject, ResourceName: string): ToolFrameworkComponent;
	static GetDefaultObject(): ToolFrameworkComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolFrameworkComponent;
	static C(Other: UObject | any): ToolFrameworkComponent;
}

declare class InteractiveToolsContext extends UObject { 
	InputRouter: InputRouter;
	ToolManager: InteractiveToolManager;
	GizmoManager: InteractiveGizmoManager;
	ToolManagerClass: Class;
	static Load(ResourceName: string): InteractiveToolsContext;
	static Find(Outer: UObject, ResourceName: string): InteractiveToolsContext;
	static GetDefaultObject(): InteractiveToolsContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveToolsContext;
	static C(Other: UObject | any): InteractiveToolsContext;
}

declare class IntervalGizmoActor extends GizmoActor { 
	UpIntervalComponent: GizmoLineHandleComponent;
	DownIntervalComponent: GizmoLineHandleComponent;
	ForwardIntervalComponent: GizmoLineHandleComponent;
	static GetDefaultObject(): IntervalGizmoActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntervalGizmoActor;
	static C(Other: UObject | any): IntervalGizmoActor;
}

declare class IntervalGizmoBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): IntervalGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): IntervalGizmoBuilder;
	static GetDefaultObject(): IntervalGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntervalGizmoBuilder;
	static C(Other: UObject | any): IntervalGizmoBuilder;
}

declare class GizmoTransformChangeStateTarget extends UObject { 
	TransactionManager: any;
	static Load(ResourceName: string): GizmoTransformChangeStateTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoTransformChangeStateTarget;
	static GetDefaultObject(): GizmoTransformChangeStateTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoTransformChangeStateTarget;
	static C(Other: UObject | any): GizmoTransformChangeStateTarget;
}

declare class TransformProxy extends UObject { 
	bRotatePerObject: boolean;
	bSetPivotMode: boolean;
	SharedTransform: Transform;
	InitialSharedTransform: Transform;
	static Load(ResourceName: string): TransformProxy;
	static Find(Outer: UObject, ResourceName: string): TransformProxy;
	static GetDefaultObject(): TransformProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransformProxy;
	static C(Other: UObject | any): TransformProxy;
}

declare class IntervalGizmo extends InteractiveGizmo { 
	StateTarget: GizmoTransformChangeStateTarget;
	TransformProxy: TransformProxy;
	ActiveComponents: PrimitiveComponent[];
	ActiveGizmos: InteractiveGizmo[];
	AxisYSource: GizmoComponentAxisSource;
	AxisZSource: GizmoComponentAxisSource;
	static Load(ResourceName: string): IntervalGizmo;
	static Find(Outer: UObject, ResourceName: string): IntervalGizmo;
	static GetDefaultObject(): IntervalGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntervalGizmo;
	static C(Other: UObject | any): IntervalGizmo;
}

declare class GizmoBaseFloatParameterSource extends UObject { 
	static Load(ResourceName: string): GizmoBaseFloatParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoBaseFloatParameterSource;
	static GetDefaultObject(): GizmoBaseFloatParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBaseFloatParameterSource;
	static C(Other: UObject | any): GizmoBaseFloatParameterSource;
}

declare class GizmoAxisIntervalParameterSource extends GizmoBaseFloatParameterSource { 
	FloatParameterSource: any;
	MinParameter: number;
	MaxParameter: number;
	static Load(ResourceName: string): GizmoAxisIntervalParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoAxisIntervalParameterSource;
	static GetDefaultObject(): GizmoAxisIntervalParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoAxisIntervalParameterSource;
	static C(Other: UObject | any): GizmoAxisIntervalParameterSource;
}

declare class KeyAsModifierInputBehavior extends InputBehavior { 
	static Load(ResourceName: string): KeyAsModifierInputBehavior;
	static Find(Outer: UObject, ResourceName: string): KeyAsModifierInputBehavior;
	static GetDefaultObject(): KeyAsModifierInputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KeyAsModifierInputBehavior;
	static C(Other: UObject | any): KeyAsModifierInputBehavior;
}

declare class MeshSurfacePointToolBuilder extends InteractiveToolBuilder { 
	static Load(ResourceName: string): MeshSurfacePointToolBuilder;
	static Find(Outer: UObject, ResourceName: string): MeshSurfacePointToolBuilder;
	static GetDefaultObject(): MeshSurfacePointToolBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSurfacePointToolBuilder;
	static C(Other: UObject | any): MeshSurfacePointToolBuilder;
}

declare class MouseHoverBehavior extends InputBehavior { 
	static Load(ResourceName: string): MouseHoverBehavior;
	static Find(Outer: UObject, ResourceName: string): MouseHoverBehavior;
	static GetDefaultObject(): MouseHoverBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseHoverBehavior;
	static C(Other: UObject | any): MouseHoverBehavior;
}

declare class MultiClickSequenceInputBehavior extends AnyButtonInputBehavior { 
	static Load(ResourceName: string): MultiClickSequenceInputBehavior;
	static Find(Outer: UObject, ResourceName: string): MultiClickSequenceInputBehavior;
	static GetDefaultObject(): MultiClickSequenceInputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiClickSequenceInputBehavior;
	static C(Other: UObject | any): MultiClickSequenceInputBehavior;
}

declare class MultiSelectionTool extends InteractiveTool { 
	static Load(ResourceName: string): MultiSelectionTool;
	static Find(Outer: UObject, ResourceName: string): MultiSelectionTool;
	static GetDefaultObject(): MultiSelectionTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiSelectionTool;
	static C(Other: UObject | any): MultiSelectionTool;
}

declare class GizmoFloatParameterChange { 
	InitialValue: number;
	CurrentValue: number;
	clone() : GizmoFloatParameterChange;
	static C(Other: UObject | any): GizmoFloatParameterChange;
}

declare class GizmoLocalFloatParameterSource extends GizmoBaseFloatParameterSource { 
	Value: number;
	LastChange: GizmoFloatParameterChange;
	static Load(ResourceName: string): GizmoLocalFloatParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoLocalFloatParameterSource;
	static GetDefaultObject(): GizmoLocalFloatParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoLocalFloatParameterSource;
	static C(Other: UObject | any): GizmoLocalFloatParameterSource;
}

declare class GizmoBaseVec2ParameterSource extends UObject { 
	static Load(ResourceName: string): GizmoBaseVec2ParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoBaseVec2ParameterSource;
	static GetDefaultObject(): GizmoBaseVec2ParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBaseVec2ParameterSource;
	static C(Other: UObject | any): GizmoBaseVec2ParameterSource;
}

declare class GizmoVec2ParameterChange { 
	InitialValue: Vector2D;
	CurrentValue: Vector2D;
	clone() : GizmoVec2ParameterChange;
	static C(Other: UObject | any): GizmoVec2ParameterChange;
}

declare class GizmoLocalVec2ParameterSource extends GizmoBaseVec2ParameterSource { 
	Value: Vector2D;
	LastChange: GizmoVec2ParameterChange;
	static Load(ResourceName: string): GizmoLocalVec2ParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoLocalVec2ParameterSource;
	static GetDefaultObject(): GizmoLocalVec2ParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoLocalVec2ParameterSource;
	static C(Other: UObject | any): GizmoLocalVec2ParameterSource;
}

declare class GizmoAxisTranslationParameterSource extends GizmoBaseFloatParameterSource { 
	AxisSource: any;
	TransformSource: any;
	Parameter: number;
	LastChange: GizmoFloatParameterChange;
	CurTranslationAxis: Vector;
	CurTranslationOrigin: Vector;
	InitialTransform: Transform;
	static Load(ResourceName: string): GizmoAxisTranslationParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoAxisTranslationParameterSource;
	static GetDefaultObject(): GizmoAxisTranslationParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoAxisTranslationParameterSource;
	static C(Other: UObject | any): GizmoAxisTranslationParameterSource;
}

declare class GizmoPlaneTranslationParameterSource extends GizmoBaseVec2ParameterSource { 
	AxisSource: any;
	TransformSource: any;
	Parameter: Vector2D;
	LastChange: GizmoVec2ParameterChange;
	CurTranslationOrigin: Vector;
	CurTranslationNormal: Vector;
	CurTranslationAxisX: Vector;
	CurTranslationAxisY: Vector;
	InitialTransform: Transform;
	static Load(ResourceName: string): GizmoPlaneTranslationParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoPlaneTranslationParameterSource;
	static GetDefaultObject(): GizmoPlaneTranslationParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoPlaneTranslationParameterSource;
	static C(Other: UObject | any): GizmoPlaneTranslationParameterSource;
}

declare class GizmoAxisRotationParameterSource extends GizmoBaseFloatParameterSource { 
	AxisSource: any;
	TransformSource: any;
	Angle: number;
	LastChange: GizmoFloatParameterChange;
	CurRotationAxis: Vector;
	CurRotationOrigin: Vector;
	InitialTransform: Transform;
	static Load(ResourceName: string): GizmoAxisRotationParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoAxisRotationParameterSource;
	static GetDefaultObject(): GizmoAxisRotationParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoAxisRotationParameterSource;
	static C(Other: UObject | any): GizmoAxisRotationParameterSource;
}

declare class GizmoUniformScaleParameterSource extends GizmoBaseVec2ParameterSource { 
	AxisSource: any;
	TransformSource: any;
	ScaleMultiplier: number;
	Parameter: Vector2D;
	LastChange: GizmoVec2ParameterChange;
	CurScaleOrigin: Vector;
	CurScaleNormal: Vector;
	CurScaleAxisX: Vector;
	CurScaleAxisY: Vector;
	InitialTransform: Transform;
	static Load(ResourceName: string): GizmoUniformScaleParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoUniformScaleParameterSource;
	static GetDefaultObject(): GizmoUniformScaleParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoUniformScaleParameterSource;
	static C(Other: UObject | any): GizmoUniformScaleParameterSource;
}

declare class GizmoAxisScaleParameterSource extends GizmoBaseFloatParameterSource { 
	AxisSource: any;
	TransformSource: any;
	ScaleMultiplier: number;
	Parameter: number;
	LastChange: GizmoFloatParameterChange;
	CurScaleAxis: Vector;
	CurScaleOrigin: Vector;
	InitialTransform: Transform;
	static Load(ResourceName: string): GizmoAxisScaleParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoAxisScaleParameterSource;
	static GetDefaultObject(): GizmoAxisScaleParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoAxisScaleParameterSource;
	static C(Other: UObject | any): GizmoAxisScaleParameterSource;
}

declare class GizmoPlaneScaleParameterSource extends GizmoBaseVec2ParameterSource { 
	AxisSource: any;
	TransformSource: any;
	ScaleMultiplier: number;
	Parameter: Vector2D;
	LastChange: GizmoVec2ParameterChange;
	CurScaleOrigin: Vector;
	CurScaleNormal: Vector;
	CurScaleAxisX: Vector;
	CurScaleAxisY: Vector;
	InitialTransform: Transform;
	static Load(ResourceName: string): GizmoPlaneScaleParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoPlaneScaleParameterSource;
	static GetDefaultObject(): GizmoPlaneScaleParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoPlaneScaleParameterSource;
	static C(Other: UObject | any): GizmoPlaneScaleParameterSource;
}

declare class PlanePositionGizmoBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): PlanePositionGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): PlanePositionGizmoBuilder;
	static GetDefaultObject(): PlanePositionGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanePositionGizmoBuilder;
	static C(Other: UObject | any): PlanePositionGizmoBuilder;
}

declare class PlanePositionGizmo extends InteractiveGizmo { 
	AxisSource: any;
	ParameterSource: any;
	HitTarget: any;
	StateTarget: any;
	bEnableSignedAxis: boolean;
	bFlipX: boolean;
	bFlipY: boolean;
	bInInteraction: boolean;
	InteractionOrigin: Vector;
	InteractionNormal: Vector;
	InteractionAxisX: Vector;
	InteractionAxisY: Vector;
	InteractionStartPoint: Vector;
	InteractionCurPoint: Vector;
	InteractionStartParameter: Vector2D;
	InteractionCurParameter: Vector2D;
	ParameterSigns: Vector2D;
	static Load(ResourceName: string): PlanePositionGizmo;
	static Find(Outer: UObject, ResourceName: string): PlanePositionGizmo;
	static GetDefaultObject(): PlanePositionGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanePositionGizmo;
	static C(Other: UObject | any): PlanePositionGizmo;
}

declare class SelectionSet extends UObject { 
	static Load(ResourceName: string): SelectionSet;
	static Find(Outer: UObject, ResourceName: string): SelectionSet;
	static GetDefaultObject(): SelectionSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SelectionSet;
	static C(Other: UObject | any): SelectionSet;
}

declare class MeshSelectionSet extends SelectionSet { 
	Vertices: number[];
	Edges: number[];
	Faces: number[];
	Groups: number[];
	static Load(ResourceName: string): MeshSelectionSet;
	static Find(Outer: UObject, ResourceName: string): MeshSelectionSet;
	static GetDefaultObject(): MeshSelectionSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSelectionSet;
	static C(Other: UObject | any): MeshSelectionSet;
}

declare class SingleClickInputBehavior extends AnyButtonInputBehavior { 
	HitTestOnRelease: boolean;
	static Load(ResourceName: string): SingleClickInputBehavior;
	static Find(Outer: UObject, ResourceName: string): SingleClickInputBehavior;
	static GetDefaultObject(): SingleClickInputBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SingleClickInputBehavior;
	static C(Other: UObject | any): SingleClickInputBehavior;
}

declare class SingleClickToolBuilder extends InteractiveToolBuilder { 
	static Load(ResourceName: string): SingleClickToolBuilder;
	static Find(Outer: UObject, ResourceName: string): SingleClickToolBuilder;
	static GetDefaultObject(): SingleClickToolBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SingleClickToolBuilder;
	static C(Other: UObject | any): SingleClickToolBuilder;
}

declare class SingleClickTool extends InteractiveTool { 
	static Load(ResourceName: string): SingleClickTool;
	static Find(Outer: UObject, ResourceName: string): SingleClickTool;
	static GetDefaultObject(): SingleClickTool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SingleClickTool;
	static C(Other: UObject | any): SingleClickTool;
}

declare class GizmoNilStateTarget extends UObject { 
	static Load(ResourceName: string): GizmoNilStateTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoNilStateTarget;
	static GetDefaultObject(): GizmoNilStateTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoNilStateTarget;
	static C(Other: UObject | any): GizmoNilStateTarget;
}

declare class GizmoLambdaStateTarget extends UObject { 
	static Load(ResourceName: string): GizmoLambdaStateTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoLambdaStateTarget;
	static GetDefaultObject(): GizmoLambdaStateTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoLambdaStateTarget;
	static C(Other: UObject | any): GizmoLambdaStateTarget;
}

declare class GizmoObjectModifyStateTarget extends UObject { 
	static Load(ResourceName: string): GizmoObjectModifyStateTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoObjectModifyStateTarget;
	static GetDefaultObject(): GizmoObjectModifyStateTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoObjectModifyStateTarget;
	static C(Other: UObject | any): GizmoObjectModifyStateTarget;
}

declare class TransformGizmoActor extends GizmoActor { 
	TranslateX: PrimitiveComponent;
	TranslateY: PrimitiveComponent;
	TranslateZ: PrimitiveComponent;
	TranslateYZ: PrimitiveComponent;
	TranslateXZ: PrimitiveComponent;
	TranslateXY: PrimitiveComponent;
	RotateX: PrimitiveComponent;
	RotateY: PrimitiveComponent;
	RotateZ: PrimitiveComponent;
	UniformScale: PrimitiveComponent;
	AxisScaleX: PrimitiveComponent;
	AxisScaleY: PrimitiveComponent;
	AxisScaleZ: PrimitiveComponent;
	PlaneScaleYZ: PrimitiveComponent;
	PlaneScaleXZ: PrimitiveComponent;
	PlaneScaleXY: PrimitiveComponent;
	static GetDefaultObject(): TransformGizmoActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransformGizmoActor;
	static C(Other: UObject | any): TransformGizmoActor;
}

declare class TransformGizmoBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): TransformGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): TransformGizmoBuilder;
	static GetDefaultObject(): TransformGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransformGizmoBuilder;
	static C(Other: UObject | any): TransformGizmoBuilder;
}

declare type EToolContextCoordinateSystem = 'World' | 'Local' | 'EToolContextCoordinateSystem_MAX';
declare var EToolContextCoordinateSystem : { World:'World',Local:'Local',EToolContextCoordinateSystem_MAX:'EToolContextCoordinateSystem_MAX', };
declare class GizmoBaseTransformSource extends UObject { 
	static Load(ResourceName: string): GizmoBaseTransformSource;
	static Find(Outer: UObject, ResourceName: string): GizmoBaseTransformSource;
	static GetDefaultObject(): GizmoBaseTransformSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBaseTransformSource;
	static C(Other: UObject | any): GizmoBaseTransformSource;
}

declare class GizmoScaledTransformSource extends GizmoBaseTransformSource { 
	ChildTransformSource: any;
	static Load(ResourceName: string): GizmoScaledTransformSource;
	static Find(Outer: UObject, ResourceName: string): GizmoScaledTransformSource;
	static GetDefaultObject(): GizmoScaledTransformSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoScaledTransformSource;
	static C(Other: UObject | any): GizmoScaledTransformSource;
}

declare class TransformGizmo extends InteractiveGizmo { 
	ActiveTarget: TransformProxy;
	bSnapToWorldGrid: boolean;
	bGridSizeIsExplicit: boolean;
	ExplicitGridSize: Vector;
	bRotationGridSizeIsExplicit: boolean;
	ExplicitRotationGridSize: Rotator;
	bSnapToWorldRotGrid: boolean;
	bUseContextCoordinateSystem: boolean;
	CurrentCoordinateSystem: EToolContextCoordinateSystem;
	ActiveComponents: PrimitiveComponent[];
	NonuniformScaleComponents: PrimitiveComponent[];
	ActiveGizmos: InteractiveGizmo[];
	CameraAxisSource: GizmoConstantFrameAxisSource;
	AxisXSource: GizmoComponentAxisSource;
	AxisYSource: GizmoComponentAxisSource;
	AxisZSource: GizmoComponentAxisSource;
	UnitAxisXSource: GizmoComponentAxisSource;
	UnitAxisYSource: GizmoComponentAxisSource;
	UnitAxisZSource: GizmoComponentAxisSource;
	StateTarget: GizmoTransformChangeStateTarget;
	ScaledTransformSource: GizmoScaledTransformSource;
	static Load(ResourceName: string): TransformGizmo;
	static Find(Outer: UObject, ResourceName: string): TransformGizmo;
	static GetDefaultObject(): TransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransformGizmo;
	static C(Other: UObject | any): TransformGizmo;
}

declare class GizmoComponentWorldTransformSource extends GizmoBaseTransformSource { 
	Component: SceneComponent;
	bModifyComponentOnTransform: boolean;
	static Load(ResourceName: string): GizmoComponentWorldTransformSource;
	static Find(Outer: UObject, ResourceName: string): GizmoComponentWorldTransformSource;
	static GetDefaultObject(): GizmoComponentWorldTransformSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoComponentWorldTransformSource;
	static C(Other: UObject | any): GizmoComponentWorldTransformSource;
}

declare class GizmoTransformProxyTransformSource extends GizmoBaseTransformSource { 
	Proxy: TransformProxy;
	static Load(ResourceName: string): GizmoTransformProxyTransformSource;
	static Find(Outer: UObject, ResourceName: string): GizmoTransformProxyTransformSource;
	static GetDefaultObject(): GizmoTransformProxyTransformSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoTransformProxyTransformSource;
	static C(Other: UObject | any): GizmoTransformProxyTransformSource;
}

declare class EdModeInteractiveToolsContext extends InteractiveToolsContext { 
	StandardVertexColorMaterial: MaterialInterface;
	static Load(ResourceName: string): EdModeInteractiveToolsContext;
	static Find(Outer: UObject, ResourceName: string): EdModeInteractiveToolsContext;
	static GetDefaultObject(): EdModeInteractiveToolsContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdModeInteractiveToolsContext;
	static C(Other: UObject | any): EdModeInteractiveToolsContext;
}

declare class PIEPreviewSettings extends UObject { 
	WindowPosX: number;
	WindowPosY: number;
	WindowScalingFactor: number;
	static Load(ResourceName: string): PIEPreviewSettings;
	static Find(Outer: UObject, ResourceName: string): PIEPreviewSettings;
	static GetDefaultObject(): PIEPreviewSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewSettings;
	static C(Other: UObject | any): PIEPreviewSettings;
}

declare class ClothConfigCommon extends ClothConfigBase { 
	static Load(ResourceName: string): ClothConfigCommon;
	static Find(Outer: UObject, ResourceName: string): ClothConfigCommon;
	static GetDefaultObject(): ClothConfigCommon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothConfigCommon;
	static C(Other: UObject | any): ClothConfigCommon;
}

declare type EClothingWindMethodNv = 'Legacy' | 'Accurate' | 'EClothingWindMethodNv_MAX';
declare var EClothingWindMethodNv : { Legacy:'Legacy',Accurate:'Accurate',EClothingWindMethodNv_MAX:'EClothingWindMethodNv_MAX', };
declare class ClothConstraintSetupNv { 
	Stiffness: number;
	StiffnessMultiplier: number;
	StretchLimit: number;
	CompressionLimit: number;
	clone() : ClothConstraintSetupNv;
	static C(Other: UObject | any): ClothConstraintSetupNv;
}

declare type EClothingWindMethod_Legacy = 'Legacy' | 'Accurate' | 'EClothingWindMethod_MAX';
declare var EClothingWindMethod_Legacy : { Legacy:'Legacy',Accurate:'Accurate',EClothingWindMethod_MAX:'EClothingWindMethod_MAX', };
declare class ClothConstraintSetup_Legacy { 
	Stiffness: number;
	StiffnessMultiplier: number;
	StretchLimit: number;
	CompressionLimit: number;
	clone() : ClothConstraintSetup_Legacy;
	static C(Other: UObject | any): ClothConstraintSetup_Legacy;
}

declare class ClothConfigNv extends ClothConfigCommon { 
	ClothingWindMethod: EClothingWindMethodNv;
	VerticalConstraint: ClothConstraintSetupNv;
	HorizontalConstraint: ClothConstraintSetupNv;
	BendConstraint: ClothConstraintSetupNv;
	ShearConstraint: ClothConstraintSetupNv;
	SelfCollisionRadius: number;
	SelfCollisionStiffness: number;
	SelfCollisionCullScale: number;
	Damping: Vector;
	Friction: number;
	WindDragCoefficient: number;
	WindLiftCoefficient: number;
	LinearDrag: Vector;
	AngularDrag: Vector;
	LinearInertiaScale: Vector;
	AngularInertiaScale: Vector;
	CentrifugalInertiaScale: Vector;
	SolverFrequency: number;
	StiffnessFrequency: number;
	GravityScale: number;
	GravityOverride: Vector;
	bUseGravityOverride: boolean;
	TetherStiffness: number;
	TetherLimit: number;
	CollisionThickness: number;
	AnimDriveSpringStiffness: number;
	AnimDriveDamperStiffness: number;
	WindMethod: EClothingWindMethod_Legacy;
	VerticalConstraintConfig: ClothConstraintSetup_Legacy;
	HorizontalConstraintConfig: ClothConstraintSetup_Legacy;
	BendConstraintConfig: ClothConstraintSetup_Legacy;
	ShearConstraintConfig: ClothConstraintSetup_Legacy;
	static Load(ResourceName: string): ClothConfigNv;
	static Find(Outer: UObject, ResourceName: string): ClothConfigNv;
	static GetDefaultObject(): ClothConfigNv;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothConfigNv;
	static C(Other: UObject | any): ClothConfigNv;
}

declare class ClothingSimulationFactoryNv extends ClothingSimulationFactory { 
	static Load(ResourceName: string): ClothingSimulationFactoryNv;
	static Find(Outer: UObject, ResourceName: string): ClothingSimulationFactoryNv;
	static GetDefaultObject(): ClothingSimulationFactoryNv;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationFactoryNv;
	static C(Other: UObject | any): ClothingSimulationFactoryNv;
}

declare class ClothingSimulationInteractorNv extends ClothingSimulationInteractor { 
	static Load(ResourceName: string): ClothingSimulationInteractorNv;
	static Find(Outer: UObject, ResourceName: string): ClothingSimulationInteractorNv;
	static GetDefaultObject(): ClothingSimulationInteractorNv;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationInteractorNv;
	SetAnimDriveDamperStiffness(InStiffness: number): void;
	static C(Other: UObject | any): ClothingSimulationInteractorNv;
}

declare class ClothPhysicalMeshDataNv_Legacy extends ClothPhysicalMeshDataBase_Legacy { 
	MaxDistances: number[];
	BackstopDistances: number[];
	BackstopRadiuses: number[];
	AnimDriveMultipliers: number[];
	static Load(ResourceName: string): ClothPhysicalMeshDataNv_Legacy;
	static Find(Outer: UObject, ResourceName: string): ClothPhysicalMeshDataNv_Legacy;
	static GetDefaultObject(): ClothPhysicalMeshDataNv_Legacy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothPhysicalMeshDataNv_Legacy;
	static C(Other: UObject | any): ClothPhysicalMeshDataNv_Legacy;
}

declare class ClothingAssetFactory extends ClothingAssetFactoryBase { 
	static Load(ResourceName: string): ClothingAssetFactory;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactory;
	static GetDefaultObject(): ClothingAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactory;
	static C(Other: UObject | any): ClothingAssetFactory;
}

declare type EMovieSceneCaptureProtocolState = 'Idle' | 'Initialized' | 'Capturing' | 'Finalizing' | 'EMovieSceneCaptureProtocolState_MAX';
declare var EMovieSceneCaptureProtocolState : { Idle:'Idle',Initialized:'Initialized',Capturing:'Capturing',Finalizing:'Finalizing',EMovieSceneCaptureProtocolState_MAX:'EMovieSceneCaptureProtocolState_MAX', };
declare class MovieSceneCaptureProtocolBase extends UObject { 
	State: EMovieSceneCaptureProtocolState;
	static Load(ResourceName: string): MovieSceneCaptureProtocolBase;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureProtocolBase;
	static GetDefaultObject(): MovieSceneCaptureProtocolBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureProtocolBase;
	IsCapturing(): boolean;
	GetState(): EMovieSceneCaptureProtocolState;
	static C(Other: UObject | any): MovieSceneCaptureProtocolBase;
}

declare class MovieSceneAudioCaptureProtocolBase extends MovieSceneCaptureProtocolBase { 
	static Load(ResourceName: string): MovieSceneAudioCaptureProtocolBase;
	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioCaptureProtocolBase;
	static GetDefaultObject(): MovieSceneAudioCaptureProtocolBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioCaptureProtocolBase;
	static C(Other: UObject | any): MovieSceneAudioCaptureProtocolBase;
}

declare class NullAudioCaptureProtocol extends MovieSceneAudioCaptureProtocolBase { 
	static Load(ResourceName: string): NullAudioCaptureProtocol;
	static Find(Outer: UObject, ResourceName: string): NullAudioCaptureProtocol;
	static GetDefaultObject(): NullAudioCaptureProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullAudioCaptureProtocol;
	static C(Other: UObject | any): NullAudioCaptureProtocol;
}

declare class MasterAudioSubmixCaptureProtocol extends MovieSceneAudioCaptureProtocolBase { 
	Filename: string;
	static Load(ResourceName: string): MasterAudioSubmixCaptureProtocol;
	static Find(Outer: UObject, ResourceName: string): MasterAudioSubmixCaptureProtocol;
	static GetDefaultObject(): MasterAudioSubmixCaptureProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MasterAudioSubmixCaptureProtocol;
	static C(Other: UObject | any): MasterAudioSubmixCaptureProtocol;
}

declare class MovieSceneImageCaptureProtocolBase extends MovieSceneCaptureProtocolBase { 
	static Load(ResourceName: string): MovieSceneImageCaptureProtocolBase;
	static Find(Outer: UObject, ResourceName: string): MovieSceneImageCaptureProtocolBase;
	static GetDefaultObject(): MovieSceneImageCaptureProtocolBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneImageCaptureProtocolBase;
	static C(Other: UObject | any): MovieSceneImageCaptureProtocolBase;
}

declare class CompositionGraphCapturePasses { 
	Value: string[];
	clone() : CompositionGraphCapturePasses;
	static C(Other: UObject | any): CompositionGraphCapturePasses;
}

declare type EHDRCaptureGamut = 'HCGM_Rec709' | 'HCGM_P3DCI' | 'HCGM_Rec2020' | 'HCGM_ACES' | 'HCGM_ACEScg' | 'HCGM_Linear' | 'HCGM_MAX';
declare var EHDRCaptureGamut : { HCGM_Rec709:'HCGM_Rec709',HCGM_P3DCI:'HCGM_P3DCI',HCGM_Rec2020:'HCGM_Rec2020',HCGM_ACES:'HCGM_ACES',HCGM_ACEScg:'HCGM_ACEScg',HCGM_Linear:'HCGM_Linear',HCGM_MAX:'HCGM_MAX', };
declare class CompositionGraphCaptureProtocol extends MovieSceneImageCaptureProtocolBase { 
	IncludeRenderPasses: CompositionGraphCapturePasses;
	bCaptureFramesInHDR: boolean;
	HDRCompressionQuality: number;
	CaptureGamut: EHDRCaptureGamut;
	PostProcessingMaterial: SoftObjectPath;
	bDisableScreenPercentage: boolean;
	PostProcessingMaterialPtr: MaterialInterface;
	static Load(ResourceName: string): CompositionGraphCaptureProtocol;
	static Find(Outer: UObject, ResourceName: string): CompositionGraphCaptureProtocol;
	static GetDefaultObject(): CompositionGraphCaptureProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositionGraphCaptureProtocol;
	static C(Other: UObject | any): CompositionGraphCaptureProtocol;
}

declare class FrameGrabberProtocol extends MovieSceneImageCaptureProtocolBase { 
	static Load(ResourceName: string): FrameGrabberProtocol;
	static Find(Outer: UObject, ResourceName: string): FrameGrabberProtocol;
	static GetDefaultObject(): FrameGrabberProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FrameGrabberProtocol;
	static C(Other: UObject | any): FrameGrabberProtocol;
}

declare class ImageSequenceProtocol extends FrameGrabberProtocol { 
	static Load(ResourceName: string): ImageSequenceProtocol;
	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol;
	static GetDefaultObject(): ImageSequenceProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol;
	static C(Other: UObject | any): ImageSequenceProtocol;
}

declare class CompressedImageSequenceProtocol extends ImageSequenceProtocol { 
	CompressionQuality: number;
	static Load(ResourceName: string): CompressedImageSequenceProtocol;
	static Find(Outer: UObject, ResourceName: string): CompressedImageSequenceProtocol;
	static GetDefaultObject(): CompressedImageSequenceProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressedImageSequenceProtocol;
	static C(Other: UObject | any): CompressedImageSequenceProtocol;
}

declare class ImageSequenceProtocol_BMP extends ImageSequenceProtocol { 
	static Load(ResourceName: string): ImageSequenceProtocol_BMP;
	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_BMP;
	static GetDefaultObject(): ImageSequenceProtocol_BMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_BMP;
	static C(Other: UObject | any): ImageSequenceProtocol_BMP;
}

declare class ImageSequenceProtocol_PNG extends CompressedImageSequenceProtocol { 
	static Load(ResourceName: string): ImageSequenceProtocol_PNG;
	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_PNG;
	static GetDefaultObject(): ImageSequenceProtocol_PNG;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_PNG;
	static C(Other: UObject | any): ImageSequenceProtocol_PNG;
}

declare class ImageSequenceProtocol_JPG extends CompressedImageSequenceProtocol { 
	static Load(ResourceName: string): ImageSequenceProtocol_JPG;
	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_JPG;
	static GetDefaultObject(): ImageSequenceProtocol_JPG;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_JPG;
	static C(Other: UObject | any): ImageSequenceProtocol_JPG;
}

declare class ImageSequenceProtocol_EXR extends ImageSequenceProtocol { 
	bCompressed: boolean;
	CaptureGamut: EHDRCaptureGamut;
	static Load(ResourceName: string): ImageSequenceProtocol_EXR;
	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_EXR;
	static GetDefaultObject(): ImageSequenceProtocol_EXR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_EXR;
	static C(Other: UObject | any): ImageSequenceProtocol_EXR;
}

declare class MovieSceneCaptureInterface extends Interface { 
	static Load(ResourceName: string): MovieSceneCaptureInterface;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureInterface;
	static GetDefaultObject(): MovieSceneCaptureInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureInterface;
	static C(Other: UObject | any): MovieSceneCaptureInterface;
}

declare class DirectoryPath { 
	Path: string;
	clone() : DirectoryPath;
	static C(Other: UObject | any): DirectoryPath;
}

declare class CaptureResolution { 
	ResX: number;
	ResY: number;
	clone() : CaptureResolution;
	static C(Other: UObject | any): CaptureResolution;
}

declare class MovieSceneCaptureSettings { 
	OutputDirectory: DirectoryPath;
	GameModeOverride: UnrealEngineClass;
	OutputFormat: string;
	bOverwriteExisting: boolean;
	bUseRelativeFrameNumbers: boolean;
	HandleFrames: number;
	MovieExtension: string;
	ZeroPadFrameNumbers: number;
	FrameRate: FrameRate;
	bUseCustomFrameRate: boolean;
	CustomFrameRate: FrameRate;
	Resolution: CaptureResolution;
	bEnableTextureStreaming: boolean;
	bCinematicEngineScalability: boolean;
	bCinematicMode: boolean;
	bAllowMovement: boolean;
	bAllowTurning: boolean;
	bShowPlayer: boolean;
	bShowHUD: boolean;
	bUsePathTracer: boolean;
	PathTracerSamplePerPixel: number;
	clone() : MovieSceneCaptureSettings;
	static C(Other: UObject | any): MovieSceneCaptureSettings;
}

declare class MovieSceneCapture extends UObject { 
	ImageCaptureProtocolType: SoftClassPath;
	AudioCaptureProtocolType: SoftClassPath;
	ImageCaptureProtocol: MovieSceneImageCaptureProtocolBase;
	AudioCaptureProtocol: MovieSceneAudioCaptureProtocolBase;
	Settings: MovieSceneCaptureSettings;
	bUseSeparateProcess: boolean;
	bCloseEditorWhenCaptureStarts: boolean;
	AdditionalCommandLineArguments: string;
	InheritedCommandLineArguments: string;
	static Load(ResourceName: string): MovieSceneCapture;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCapture;
	static GetDefaultObject(): MovieSceneCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCapture;
	SetImageCaptureProtocolType(ProtocolType: UnrealEngineClass): void;
	SetAudioCaptureProtocolType(ProtocolType: UnrealEngineClass): void;
	GetImageCaptureProtocol(): MovieSceneCaptureProtocolBase;
	GetAudioCaptureProtocol(): MovieSceneCaptureProtocolBase;
	static C(Other: UObject | any): MovieSceneCapture;
}

declare class LevelCapture extends MovieSceneCapture { 
	bAutoStartCapture: boolean;
	PrerequisiteActorId: Guid;
	static Load(ResourceName: string): LevelCapture;
	static Find(Outer: UObject, ResourceName: string): LevelCapture;
	static GetDefaultObject(): LevelCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelCapture;
	static C(Other: UObject | any): LevelCapture;
}

declare class MovieSceneCaptureEnvironment extends UObject { 
	static Load(ResourceName: string): MovieSceneCaptureEnvironment;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureEnvironment;
	static GetDefaultObject(): MovieSceneCaptureEnvironment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureEnvironment;
	static IsCaptureInProgress(): boolean;
	static GetCaptureFrameNumber(): number;
	static GetCaptureElapsedTime(): number;
	static FindImageCaptureProtocol(): MovieSceneImageCaptureProtocolBase;
	static FindAudioCaptureProtocol(): MovieSceneAudioCaptureProtocolBase;
	static C(Other: UObject | any): MovieSceneCaptureEnvironment;
}

declare class CapturedPixelsID { 
	Identifiers: any;
	clone() : CapturedPixelsID;
	static C(Other: UObject | any): CapturedPixelsID;
}

declare class CapturedPixels { 
	clone() : CapturedPixels;
	static C(Other: UObject | any): CapturedPixels;
}

declare class FrameMetrics { 
	TotalElapsedTime: number;
	FrameDelta: number;
	FrameNumber: number;
	NumDroppedFrames: number;
	clone() : FrameMetrics;
	static C(Other: UObject | any): FrameMetrics;
}

declare class UserDefinedCaptureProtocol extends MovieSceneImageCaptureProtocolBase { 
	World: World;
	static Load(ResourceName: string): UserDefinedCaptureProtocol;
	static Find(Outer: UObject, ResourceName: string): UserDefinedCaptureProtocol;
	static GetDefaultObject(): UserDefinedCaptureProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedCaptureProtocol;
	StopCapturingFinalPixels(): void;
	StartCapturingFinalPixels(StreamID: CapturedPixelsID): void;
	ResolveBuffer(Buffer: Texture,BufferID: CapturedPixelsID): void;
	OnWarmUp(): void;
	OnTick(): void;
	OnStartCapture(): void;
	OnSetup(): boolean;
	OnPreTick(): void;
	OnPixelsReceived(Pixels: CapturedPixels,ID: CapturedPixelsID,FrameMetrics: FrameMetrics): void;
	OnPauseCapture(): void;
	OnFinalize(): void;
	OnCaptureFrame(): void;
	OnCanFinalize(): boolean;
	OnBeginFinalize(): void;
	GetCurrentFrameMetrics(): FrameMetrics;
	GenerateFilename(InFrameMetrics: FrameMetrics): string;
	static C(Other: UObject | any): UserDefinedCaptureProtocol;
}

declare class UserDefinedImageCaptureProtocol extends UserDefinedCaptureProtocol { 
	Format: EDesiredImageFormat;
	bEnableCompression: boolean;
	CompressionQuality: number;
	static Load(ResourceName: string): UserDefinedImageCaptureProtocol;
	static Find(Outer: UObject, ResourceName: string): UserDefinedImageCaptureProtocol;
	static GetDefaultObject(): UserDefinedImageCaptureProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedImageCaptureProtocol;
	WriteImageToDisk(PixelData: CapturedPixels,StreamID: CapturedPixelsID,FrameMetrics: FrameMetrics,bCopyImageData: boolean): void;
	GenerateFilenameForCurrentFrame(): string;
	GenerateFilenameForBuffer(Buffer: Texture,StreamID: CapturedPixelsID): string;
	static C(Other: UObject | any): UserDefinedImageCaptureProtocol;
}

declare class VideoCaptureProtocol extends FrameGrabberProtocol { 
	bUseCompression: boolean;
	CompressionQuality: number;
	static Load(ResourceName: string): VideoCaptureProtocol;
	static Find(Outer: UObject, ResourceName: string): VideoCaptureProtocol;
	static GetDefaultObject(): VideoCaptureProtocol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VideoCaptureProtocol;
	static C(Other: UObject | any): VideoCaptureProtocol;
}

declare class SequenceRecordingBase extends UObject { 
	static Load(ResourceName: string): SequenceRecordingBase;
	static Find(Outer: UObject, ResourceName: string): SequenceRecordingBase;
	static GetDefaultObject(): SequenceRecordingBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecordingBase;
	static C(Other: UObject | any): SequenceRecordingBase;
}

declare class ActorRecordingSettings { 
	Settings: UObject[];
	clone() : ActorRecordingSettings;
	static C(Other: UObject | any): ActorRecordingSettings;
}

declare class LevelSequenceObjectReferenceMap { 
	clone() : LevelSequenceObjectReferenceMap;
	static C(Other: UObject | any): LevelSequenceObjectReferenceMap;
}

declare class LevelSequenceBindingReferences { 
	BindingIdToReferences: any;
	AnimSequenceInstances: any;
	clone() : LevelSequenceBindingReferences;
	static C(Other: UObject | any): LevelSequenceBindingReferences;
}

declare class LevelSequence extends MovieSceneSequence { 
	MovieScene: MovieScene;
	ObjectReferences: LevelSequenceObjectReferenceMap;
	BindingReferences: LevelSequenceBindingReferences;
	PossessedObjects: any;
	DirectorBlueprint: Blueprint;
	DirectorClass: UnrealEngineClass;
	MetaDataObjects: UObject[];
	AssetUserData: AssetUserData[];
	static Load(ResourceName: string): LevelSequence;
	static Find(Outer: UObject, ResourceName: string): LevelSequence;
	static GetDefaultObject(): LevelSequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequence;
	RemoveMetaDataByClass(InClass: UnrealEngineClass): void;
	FindOrAddMetaDataByClass(InClass: UnrealEngineClass): UObject;
	FindMetaDataByClass(InClass: UnrealEngineClass): UObject;
	CopyMetaData(InMetaData: UObject): UObject;
	static C(Other: UObject | any): LevelSequence;
}

declare class AnimationRecordingSettings { 
	bRecordInWorldSpace: boolean;
	bRemoveRootAnimation: boolean;
	bAutoSaveAsset: boolean;
	SampleRate: number;
	Length: number;
	InterpMode: ERichCurveInterpMode;
	TangentMode: ERichCurveTangentMode;
	bRecordTransforms: boolean;
	bRecordCurves: boolean;
	clone() : AnimationRecordingSettings;
	static C(Other: UObject | any): AnimationRecordingSettings;
}

declare class ActorRecording extends SequenceRecordingBase { 
	ActorSettings: ActorRecordingSettings;
	bActive: boolean;
	bCreateLevelSequence: boolean;
	TargetLevelSequence: LevelSequence;
	TargetName: string;
	TakeNumber: any;
	bSpecifyTargetAnimation: boolean;
	TargetAnimation: AnimSequence;
	AnimationSettings: AnimationRecordingSettings;
	bRecordToPossessable: boolean;
	ActorToRecord: Actor;
	static Load(ResourceName: string): ActorRecording;
	static Find(Outer: UObject, ResourceName: string): ActorRecording;
	static GetDefaultObject(): ActorRecording;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorRecording;
	static C(Other: UObject | any): ActorRecording;
}

declare class MovieScene3DTransformSectionRecorderSettings extends UObject { 
	bRecordTransforms: boolean;
	static Load(ResourceName: string): MovieScene3DTransformSectionRecorderSettings;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformSectionRecorderSettings;
	static GetDefaultObject(): MovieScene3DTransformSectionRecorderSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformSectionRecorderSettings;
	static C(Other: UObject | any): MovieScene3DTransformSectionRecorderSettings;
}

declare class SequenceRecorderActorGroup extends UObject { 
	GroupName: string;
	SequenceName: string;
	SequenceRecordingBasePath: DirectoryPath;
	bSpecifyTargetLevelSequence: boolean;
	TargetLevelSequence: LevelSequence;
	bDuplicateTargetLevelSequence: boolean;
	bRecordTargetLevelSequenceLength: boolean;
	RecordedActors: ActorRecording[];
	static Load(ResourceName: string): SequenceRecorderActorGroup;
	static Find(Outer: UObject, ResourceName: string): SequenceRecorderActorGroup;
	static GetDefaultObject(): SequenceRecorderActorGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderActorGroup;
	static C(Other: UObject | any): SequenceRecorderActorGroup;
}

declare class SequenceRecorderGroup extends Actor { 
	ActorGroups: SequenceRecorderActorGroup[];
	static GetDefaultObject(): SequenceRecorderGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderGroup;
	static C(Other: UObject | any): SequenceRecorderGroup;
}

declare class SequenceRecorderBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SequenceRecorderBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): SequenceRecorderBlueprintLibrary;
	static GetDefaultObject(): SequenceRecorderBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderBlueprintLibrary;
	static StopRecordingSequence(): void;
	static StartRecordingSequence(ActorsToRecord: Actor[]): void;
	static IsRecordingSequence(): boolean;
	static C(Other: UObject | any): SequenceRecorderBlueprintLibrary;
}

declare type EAudioRecordingMode = 'None' | 'AudioTrack' | 'EAudioRecordingMode_MAX';
declare var EAudioRecordingMode : { None:'None',AudioTrack:'AudioTrack',EAudioRecordingMode_MAX:'EAudioRecordingMode_MAX', };
declare class SequenceRecorderActorFilter { 
	ActorClassesToRecord: UnrealEngineClass[];
	clone() : SequenceRecorderActorFilter;
	static C(Other: UObject | any): SequenceRecorderActorFilter;
}

declare class PropertiesToRecordForClass { 
	Class: UnrealEngineClass;
	Properties: string[];
	clone() : PropertiesToRecordForClass;
	static C(Other: UObject | any): PropertiesToRecordForClass;
}

declare class PropertiesToRecordForActorClass { 
	Class: UnrealEngineClass;
	Properties: string[];
	clone() : PropertiesToRecordForActorClass;
	static C(Other: UObject | any): PropertiesToRecordForActorClass;
}

declare class SettingsForActorClass { 
	Class: UnrealEngineClass;
	bRecordToPossessable: boolean;
	clone() : SettingsForActorClass;
	static C(Other: UObject | any): SettingsForActorClass;
}

declare class SequenceRecorderSettings extends UObject { 
	bCreateLevelSequence: boolean;
	bImmersiveMode: boolean;
	SequenceLength: number;
	RecordingDelay: number;
	bAllowLooping: boolean;
	GlobalTimeDilation: number;
	bIgnoreTimeDilation: boolean;
	AnimationSubDirectory: string;
	RecordAudio: EAudioRecordingMode;
	AudioGain: number;
	bSplitAudioChannelsIntoSeparateTracks: boolean;
	bReplaceRecordedAudio: boolean;
	AudioTrackName: string;
	AudioSubDirectory: string;
	bRecordNearbySpawnedActors: boolean;
	NearbyActorRecordingProximity: number;
	bRecordWorldSettingsActor: boolean;
	bReduceKeys: boolean;
	bAutoSaveAsset: boolean;
	ActorFilter: SequenceRecorderActorFilter;
	LevelSequenceActorsToTrigger: any[];
	DefaultAnimationSettings: AnimationRecordingSettings;
	bRecordSequencerSpawnedActors: boolean;
	ClassesAndPropertiesToRecord: PropertiesToRecordForClass[];
	ActorsAndPropertiesToRecord: PropertiesToRecordForActorClass[];
	PerActorSettings: SettingsForActorClass[];
	static Load(ResourceName: string): SequenceRecorderSettings;
	static Find(Outer: UObject, ResourceName: string): SequenceRecorderSettings;
	static GetDefaultObject(): SequenceRecorderSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderSettings;
	static C(Other: UObject | any): SequenceRecorderSettings;
}

declare class LevelSequenceBurnInInitSettings extends UObject { 
	static Load(ResourceName: string): LevelSequenceBurnInInitSettings;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnInInitSettings;
	static GetDefaultObject(): LevelSequenceBurnInInitSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnInInitSettings;
	static C(Other: UObject | any): LevelSequenceBurnInInitSettings;
}

declare class LevelSequenceBurnInOptions extends UObject { 
	bUseBurnIn: boolean;
	BurnInClass: SoftClassPath;
	Settings: LevelSequenceBurnInInitSettings;
	static Load(ResourceName: string): LevelSequenceBurnInOptions;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnInOptions;
	static GetDefaultObject(): LevelSequenceBurnInOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnInOptions;
	SetBurnIn(InBurnInClass: SoftClassPath): void;
	static C(Other: UObject | any): LevelSequenceBurnInOptions;
}

declare class AutomatedLevelSequenceCapture extends MovieSceneCapture { 
	LevelSequenceAsset: SoftObjectPath;
	ShotName: string;
	bUseCustomStartFrame: boolean;
	CustomStartFrame: FrameNumber;
	bUseCustomEndFrame: boolean;
	CustomEndFrame: FrameNumber;
	WarmUpFrameCount: number;
	DelayBeforeWarmUp: number;
	DelayBeforeShotWarmUp: number;
	DelayEveryFrame: number;
	BurnInOptions: LevelSequenceBurnInOptions;
	bWriteEditDecisionList: boolean;
	bWriteFinalCutProXML: boolean;
	LevelSequenceActor: any;
	static Load(ResourceName: string): AutomatedLevelSequenceCapture;
	static Find(Outer: UObject, ResourceName: string): AutomatedLevelSequenceCapture;
	static GetDefaultObject(): AutomatedLevelSequenceCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedLevelSequenceCapture;
	static C(Other: UObject | any): AutomatedLevelSequenceCapture;
}

declare class BoolChannelKeyProxy extends UObject { 
	Time: FrameNumber;
	bValue: boolean;
	static Load(ResourceName: string): BoolChannelKeyProxy;
	static Find(Outer: UObject, ResourceName: string): BoolChannelKeyProxy;
	static GetDefaultObject(): BoolChannelKeyProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoolChannelKeyProxy;
	static C(Other: UObject | any): BoolChannelKeyProxy;
}

declare class MovieSceneTangentData { 
	ArriveTangent: number;
	LeaveTangent: number;
	ArriveTangentWeight: number;
	LeaveTangentWeight: number;
	TangentWeightMode: ERichCurveTangentWeightMode;
	clone() : MovieSceneTangentData;
	static C(Other: UObject | any): MovieSceneTangentData;
}

declare class MovieSceneFloatValue { 
	Value: number;
	Tangent: MovieSceneTangentData;
	InterpMode: ERichCurveInterpMode;
	TangentMode: ERichCurveTangentMode;
	PaddingByte: number;
	clone() : MovieSceneFloatValue;
	static C(Other: UObject | any): MovieSceneFloatValue;
}

declare class FloatChannelKeyProxy extends UObject { 
	Time: FrameNumber;
	Value: MovieSceneFloatValue;
	static Load(ResourceName: string): FloatChannelKeyProxy;
	static Find(Outer: UObject, ResourceName: string): FloatChannelKeyProxy;
	static GetDefaultObject(): FloatChannelKeyProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatChannelKeyProxy;
	static C(Other: UObject | any): FloatChannelKeyProxy;
}

declare class IntegerChannelKeyProxy extends UObject { 
	Time: FrameNumber;
	Value: number;
	static Load(ResourceName: string): IntegerChannelKeyProxy;
	static Find(Outer: UObject, ResourceName: string): IntegerChannelKeyProxy;
	static GetDefaultObject(): IntegerChannelKeyProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntegerChannelKeyProxy;
	static C(Other: UObject | any): IntegerChannelKeyProxy;
}

declare class K2Node extends EdGraphNode { 
	static Load(ResourceName: string): K2Node;
	static Find(Outer: UObject, ResourceName: string): K2Node;
	static GetDefaultObject(): K2Node;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node;
	static C(Other: UObject | any): K2Node;
}

declare class K2Node_GetSequenceBinding extends K2Node { 
	SourceSequence: SoftObjectPath;
	Binding: MovieSceneObjectBindingID;
	static Load(ResourceName: string): K2Node_GetSequenceBinding;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetSequenceBinding;
	static GetDefaultObject(): K2Node_GetSequenceBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSequenceBinding;
	static C(Other: UObject | any): K2Node_GetSequenceBinding;
}

declare class MovieSceneEventSectionBase extends MovieSceneSection { 
	static Load(ResourceName: string): MovieSceneEventSectionBase;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventSectionBase;
	static GetDefaultObject(): MovieSceneEventSectionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventSectionBase;
	static C(Other: UObject | any): MovieSceneEventSectionBase;
}

declare class MovieSceneEventBlueprintExtension extends BlueprintExtension { 
	EventSections: MovieSceneEventSectionBase[];
	static Load(ResourceName: string): MovieSceneEventBlueprintExtension;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventBlueprintExtension;
	static GetDefaultObject(): MovieSceneEventBlueprintExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventBlueprintExtension;
	static C(Other: UObject | any): MovieSceneEventBlueprintExtension;
}

declare class MovieSceneToolsPropertyTrackSettings { 
	ComponentName: string;
	PropertyName: string;
	clone() : MovieSceneToolsPropertyTrackSettings;
	static C(Other: UObject | any): MovieSceneToolsPropertyTrackSettings;
}

declare class MovieSceneToolsFbxSettings { 
	FbxPropertyName: string;
	PropertyPath: MovieSceneToolsPropertyTrackSettings;
	clone() : MovieSceneToolsFbxSettings;
	static C(Other: UObject | any): MovieSceneToolsFbxSettings;
}

declare class MovieSceneToolsProjectSettings extends UObject { 
	DefaultStartTime: number;
	DefaultDuration: number;
	ShotDirectory: string;
	ShotPrefix: string;
	FirstShotNumber: any;
	ShotIncrement: any;
	ShotNumDigits: any;
	TakeNumDigits: any;
	FirstTakeNumber: any;
	TakeSeparator: string;
	SubSequenceSeparator: string;
	FbxSettings: MovieSceneToolsFbxSettings[];
	static Load(ResourceName: string): MovieSceneToolsProjectSettings;
	static Find(Outer: UObject, ResourceName: string): MovieSceneToolsProjectSettings;
	static GetDefaultObject(): MovieSceneToolsProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneToolsProjectSettings;
	static C(Other: UObject | any): MovieSceneToolsProjectSettings;
}

declare type EThumbnailQuality = 'Draft' | 'Normal' | 'Best' | 'EThumbnailQuality_MAX';
declare var EThumbnailQuality : { Draft:'Draft',Normal:'Normal',Best:'Best',EThumbnailQuality_MAX:'EThumbnailQuality_MAX', };
declare class MovieSceneUserThumbnailSettings extends UObject { 
	bDrawThumbnails: boolean;
	bDrawSingleThumbnails: boolean;
	ThumbnailSize: IntPoint;
	Quality: EThumbnailQuality;
	static Load(ResourceName: string): MovieSceneUserThumbnailSettings;
	static Find(Outer: UObject, ResourceName: string): MovieSceneUserThumbnailSettings;
	static GetDefaultObject(): MovieSceneUserThumbnailSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserThumbnailSettings;
	static C(Other: UObject | any): MovieSceneUserThumbnailSettings;
}

declare class MovieSceneUserImportFBXSettings extends UObject { 
	bMatchByNameOnly: boolean;
	bForceFrontXAxis: boolean;
	bCreateCameras: boolean;
	bReduceKeys: boolean;
	ReduceKeysTolerance: number;
	static Load(ResourceName: string): MovieSceneUserImportFBXSettings;
	static Find(Outer: UObject, ResourceName: string): MovieSceneUserImportFBXSettings;
	static GetDefaultObject(): MovieSceneUserImportFBXSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserImportFBXSettings;
	static C(Other: UObject | any): MovieSceneUserImportFBXSettings;
}

declare class ControlFindReplaceString { 
	Find: string;
	Replace: string;
	clone() : ControlFindReplaceString;
	static C(Other: UObject | any): ControlFindReplaceString;
}

declare type FControlRigChannelEnum = 'Bool' | 'Enum' | 'Integer' | 'Float' | 'Vector2DX' | 'Vector2DY' | 'PositionX' | 'PositionY' | 'PositionZ' | 'RotatorX' | 'RotatorY' | 'RotatorZ' | 'ScaleX' | 'ScaleY' | 'ScaleZ' | 'FControlRigChannelEnum_MAX';
declare var FControlRigChannelEnum : { Bool:'Bool',Enum:'Enum',Integer:'Integer',Float:'Float',Vector2DX:'Vector2DX',Vector2DY:'Vector2DY',PositionX:'PositionX',PositionY:'PositionY',PositionZ:'PositionZ',RotatorX:'RotatorX',RotatorY:'RotatorY',RotatorZ:'RotatorZ',ScaleX:'ScaleX',ScaleY:'ScaleY',ScaleZ:'ScaleZ',FControlRigChannelEnum_MAX:'FControlRigChannelEnum_MAX', };
declare type FTransformChannelEnum = 'TranslateX' | 'TranslateY' | 'TranslateZ' | 'RotateX' | 'RotateY' | 'RotateZ' | 'ScaleX' | 'ScaleY' | 'ScaleZ' | 'FTransformChannelEnum_MAX';
declare var FTransformChannelEnum : { TranslateX:'TranslateX',TranslateY:'TranslateY',TranslateZ:'TranslateZ',RotateX:'RotateX',RotateY:'RotateY',RotateZ:'RotateZ',ScaleX:'ScaleX',ScaleY:'ScaleY',ScaleZ:'ScaleZ',FTransformChannelEnum_MAX:'FTransformChannelEnum_MAX', };
declare class ControlToTransformMappings { 
	ControlChannel: FControlRigChannelEnum;
	FBXChannel: FTransformChannelEnum;
	bNegate: boolean;
	clone() : ControlToTransformMappings;
	static C(Other: UObject | any): ControlToTransformMappings;
}

declare class MovieSceneUserImportFBXControlRigSettings extends UObject { 
	ImportedFileName: string;
	ImportedStartTime: FrameNumber;
	ImportedEndTime: FrameNumber;
	ImportedNodeNames: string[];
	ImportedFrameRate: string;
	FindAndReplaceStrings: ControlFindReplaceString[];
	bForceFrontXAxis: boolean;
	bImportOntoSelectedControls: boolean;
	TimeToInsertOrReplaceAnimation: FrameNumber;
	bInsertAnimation: boolean;
	bSpecifyTimeRange: boolean;
	StartTimeRange: FrameNumber;
	EndTimeRange: FrameNumber;
	ControlChannelMappings: ControlToTransformMappings[];
	static Load(ResourceName: string): MovieSceneUserImportFBXControlRigSettings;
	static Find(Outer: UObject, ResourceName: string): MovieSceneUserImportFBXControlRigSettings;
	static GetDefaultObject(): MovieSceneUserImportFBXControlRigSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserImportFBXControlRigSettings;
	static C(Other: UObject | any): MovieSceneUserImportFBXControlRigSettings;
}

declare class AdvancedCopyCustomization extends UObject { 
	static Load(ResourceName: string): AdvancedCopyCustomization;
	static Find(Outer: UObject, ResourceName: string): AdvancedCopyCustomization;
	static GetDefaultObject(): AdvancedCopyCustomization;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AdvancedCopyCustomization;
	static C(Other: UObject | any): AdvancedCopyCustomization;
}

declare class AssetToolsImpl extends UObject { 
	static Load(ResourceName: string): AssetToolsImpl;
	static Find(Outer: UObject, ResourceName: string): AssetToolsImpl;
	static GetDefaultObject(): AssetToolsImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsImpl;
	static C(Other: UObject | any): AssetToolsImpl;
}

declare class AdvancedCopyMap { 
	ClassToCopy: SoftClassPath;
	AdvancedCopyCustomization: SoftClassPath;
	clone() : AdvancedCopyMap;
	static C(Other: UObject | any): AdvancedCopyMap;
}

declare class AssetToolsSettings extends DeveloperSettings { 
	AdvancedCopyCustomizations: AdvancedCopyMap[];
	static Load(ResourceName: string): AssetToolsSettings;
	static Find(Outer: UObject, ResourceName: string): AssetToolsSettings;
	static GetDefaultObject(): AssetToolsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsSettings;
	static C(Other: UObject | any): AssetToolsSettings;
}

declare class AssetRenameData { 
	Asset: any;
	NewPackagePath: string;
	NewName: string;
	OldObjectPath: SoftObjectPath;
	NewObjectPath: SoftObjectPath;
	bOnlyFixSoftReferences: boolean;
	clone() : AssetRenameData;
	static C(Other: UObject | any): AssetRenameData;
}

declare type EAssetRenameResult = 'Failure' | 'Success' | 'Pending' | 'EAssetRenameResult_MAX';
declare var EAssetRenameResult : { Failure:'Failure',Success:'Success',Pending:'Pending',EAssetRenameResult_MAX:'EAssetRenameResult_MAX', };
declare class AutomatedAssetImportData extends UObject { 
	GroupName: string;
	Filenames: string[];
	DestinationPath: string;
	FactoryName: string;
	bReplaceExisting: boolean;
	bSkipReadOnly: boolean;
	Factory: Factory;
	LevelToLoad: string;
	static Load(ResourceName: string): AutomatedAssetImportData;
	static Find(Outer: UObject, ResourceName: string): AutomatedAssetImportData;
	static GetDefaultObject(): AutomatedAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedAssetImportData;
	static C(Other: UObject | any): AutomatedAssetImportData;
}

declare class Factory extends UObject { 
	bCreateNew: boolean;
	SupportedClass: UnrealEngineClass;
	ContextClass: UnrealEngineClass;
	Formats: string[];
	bEditAfterNew: boolean;
	bEditorImport: boolean;
	bText: boolean;
	ImportPriority: number;
	AutomatedImportData: AutomatedAssetImportData;
	AssetImportTask: AssetImportTask;
	OverwriteYesOrNoToAllState: number;
	static Load(ResourceName: string): Factory;
	static Find(Outer: UObject, ResourceName: string): Factory;
	static GetDefaultObject(): Factory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Factory;
	ScriptFactoryCreateFile(InTask: AssetImportTask): boolean;
	ScriptFactoryCanImport(Filename: string): boolean;
	static C(Other: UObject | any): Factory;
}

declare class AssetImportTask extends UObject { 
	Filename: string;
	DestinationPath: string;
	DestinationName: string;
	bReplaceExisting: boolean;
	bReplaceExistingSettings: boolean;
	bAutomated: boolean;
	bSave: boolean;
	Factory: Factory;
	Options: UObject;
	ImportedObjectPaths: string[];
	Result: UObject[];
	static Load(ResourceName: string): AssetImportTask;
	static Find(Outer: UObject, ResourceName: string): AssetImportTask;
	static GetDefaultObject(): AssetImportTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetImportTask;
	static C(Other: UObject | any): AssetImportTask;
}

declare class AssetTools extends Interface { 
	static Load(ResourceName: string): AssetTools;
	static Find(Outer: UObject, ResourceName: string): AssetTools;
	static GetDefaultObject(): AssetTools;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetTools;
	RenameReferencingSoftObjectPaths(PackagesToCheck: Package[],AssetRedirectorMap: any): void;
	RenameAssetsWithDialog(AssetsAndNames: AssetRenameData[],bAutoCheckout: boolean): EAssetRenameResult;
	RenameAssets(AssetsAndNames: AssetRenameData[]): boolean;
	OpenEditorForAssets(Assets: UObject[]): void;
	ImportAssetTasks(ImportTasks: AssetImportTask[]): void;
	ImportAssetsWithDialog(DestinationPath: string): UObject[];
	ImportAssetsAutomated(ImportData: AutomatedAssetImportData): UObject[];
	FindSoftReferencesToObject(TargetObject: SoftObjectPath,ReferencingObjects?: UObject[]): {ReferencingObjects: UObject[]};
	ExportAssetsWithDialog(AssetsToExport: string[],bPromptForIndividualFilenames: boolean): void;
	ExportAssets(AssetsToExport: string[],ExportPath: string): void;
	DuplicateAssetWithDialogAndTitle(AssetName: string,PackagePath: string,OriginalObject: UObject,DialogTitle: string): UObject;
	DuplicateAssetWithDialog(AssetName: string,PackagePath: string,OriginalObject: UObject): UObject;
	DuplicateAsset(AssetName: string,PackagePath: string,OriginalObject: UObject): UObject;
	CreateUniqueAssetName(InBasePackageName: string,InSuffix: string,OutPackageName?: string,OutAssetName?: string): {OutPackageName: string, OutAssetName: string};
	CreateAssetWithDialog(AssetName: string,PackagePath: string,AssetClass: UnrealEngineClass,Factory: Factory,CallingContext: string): UObject;
	CreateAsset(AssetName: string,PackagePath: string,AssetClass: UnrealEngineClass,Factory: Factory,CallingContext: string): UObject;
	static C(Other: UObject | any): AssetTools;
}

declare class AssetToolsHelpers extends UObject { 
	static Load(ResourceName: string): AssetToolsHelpers;
	static Find(Outer: UObject, ResourceName: string): AssetToolsHelpers;
	static GetDefaultObject(): AssetToolsHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsHelpers;
	static C(Other: UObject | any): AssetToolsHelpers;
}

declare class ContentBrowserFrontEndFilterExtension extends UObject { 
	static Load(ResourceName: string): ContentBrowserFrontEndFilterExtension;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserFrontEndFilterExtension;
	static GetDefaultObject(): ContentBrowserFrontEndFilterExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserFrontEndFilterExtension;
	static C(Other: UObject | any): ContentBrowserFrontEndFilterExtension;
}

declare class ContentBrowserAssetContextMenuContext extends UObject { 
	SelectedObjects: any[];
	CommonClass: UnrealEngineClass;
	bCanBeModified: boolean;
	static Load(ResourceName: string): ContentBrowserAssetContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserAssetContextMenuContext;
	static GetDefaultObject(): ContentBrowserAssetContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserAssetContextMenuContext;
	GetSelectedObjects(): UObject[];
	static C(Other: UObject | any): ContentBrowserAssetContextMenuContext;
}

declare class ContentBrowserAssetViewContextMenuContext extends UObject { 
	static Load(ResourceName: string): ContentBrowserAssetViewContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserAssetViewContextMenuContext;
	static GetDefaultObject(): ContentBrowserAssetViewContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserAssetViewContextMenuContext;
	static C(Other: UObject | any): ContentBrowserAssetViewContextMenuContext;
}

declare class ContentBrowserFolderContext extends UObject { 
	bCanBeModified: boolean;
	NumAssetPaths: number;
	NumClassPaths: number;
	static Load(ResourceName: string): ContentBrowserFolderContext;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserFolderContext;
	static GetDefaultObject(): ContentBrowserFolderContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserFolderContext;
	static C(Other: UObject | any): ContentBrowserFolderContext;
}

declare class ContentBrowserAddNewContextMenuContext extends UObject { 
	static Load(ResourceName: string): ContentBrowserAddNewContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserAddNewContextMenuContext;
	static GetDefaultObject(): ContentBrowserAddNewContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserAddNewContextMenuContext;
	static C(Other: UObject | any): ContentBrowserAddNewContextMenuContext;
}

declare class MovieSceneCopyableBinding extends UObject { 
	SpawnableObjectTemplate: UObject;
	Tracks: MovieSceneTrack[];
	Binding: MovieSceneBinding;
	Spawnable: MovieSceneSpawnable;
	Possessable: MovieScenePossessable;
	static Load(ResourceName: string): MovieSceneCopyableBinding;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCopyableBinding;
	static GetDefaultObject(): MovieSceneCopyableBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCopyableBinding;
	static C(Other: UObject | any): MovieSceneCopyableBinding;
}

declare class MovieSceneCopyableTrack extends UObject { 
	Track: MovieSceneTrack;
	bIsAMasterTrack: boolean;
	static Load(ResourceName: string): MovieSceneCopyableTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCopyableTrack;
	static GetDefaultObject(): MovieSceneCopyableTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCopyableTrack;
	static C(Other: UObject | any): MovieSceneCopyableTrack;
}

declare class Exporter extends UObject { 
	SupportedClass: UnrealEngineClass;
	ExportRootScope: UObject;
	FormatExtension: string[];
	FormatDescription: string[];
	PreferredFormatIndex: number;
	TextIndent: number;
	bText: boolean;
	bSelectedOnly: boolean;
	bForceFileOperations: boolean;
	ExportTask: AssetExportTask;
	static Load(ResourceName: string): Exporter;
	static Find(Outer: UObject, ResourceName: string): Exporter;
	static GetDefaultObject(): Exporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Exporter;
	ScriptRunAssetExportTask(Task: AssetExportTask): boolean;
	static RunAssetExportTasks(ExportTasks: AssetExportTask[]): boolean;
	static RunAssetExportTask(Task: AssetExportTask): boolean;
	static C(Other: UObject | any): Exporter;
}

declare class AssetExportTask extends UObject { 
	UObject: UObject;
	Exporter: Exporter;
	Filename: string;
	bSelected: boolean;
	bReplaceIdentical: boolean;
	bPrompt: boolean;
	bAutomated: boolean;
	bUseFileArchive: boolean;
	bWriteEmptyFiles: boolean;
	IgnoreObjectList: UObject[];
	Options: UObject;
	Errors: string[];
	static Load(ResourceName: string): AssetExportTask;
	static Find(Outer: UObject, ResourceName: string): AssetExportTask;
	static GetDefaultObject(): AssetExportTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetExportTask;
	static C(Other: UObject | any): AssetExportTask;
}

declare class SequencerExportTask extends AssetExportTask { 
	SequencerContext: UObject;
	static Load(ResourceName: string): SequencerExportTask;
	static Find(Outer: UObject, ResourceName: string): SequencerExportTask;
	static GetDefaultObject(): SequencerExportTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerExportTask;
	static C(Other: UObject | any): SequencerExportTask;
}

declare class MovieSceneTransformMask { 
	mask: any;
	clone() : MovieSceneTransformMask;
	static C(Other: UObject | any): MovieSceneTransformMask;
}

declare class MovieSceneChannel { 
	clone() : MovieSceneChannel;
	static C(Other: UObject | any): MovieSceneChannel;
}

declare class KeyHandleLookupTable { 
	clone() : KeyHandleLookupTable;
	static C(Other: UObject | any): KeyHandleLookupTable;
}

declare class MovieSceneKeyHandleMap extends KeyHandleLookupTable { 
	clone() : MovieSceneKeyHandleMap;
	static C(Other: UObject | any): MovieSceneKeyHandleMap;
}

declare class MovieSceneFloatChannel extends MovieSceneChannel { 
	PreInfinityExtrap: ERichCurveExtrapolation;
	PostInfinityExtrap: ERichCurveExtrapolation;
	Times: FrameNumber[];
	Values: MovieSceneFloatValue[];
	DefaultValue: number;
	bHasDefaultValue: boolean;
	KeyHandles: MovieSceneKeyHandleMap;
	TickResolution: FrameRate;
	clone() : MovieSceneFloatChannel;
	static C(Other: UObject | any): MovieSceneFloatChannel;
}

declare type EShow3DTrajectory = 'EST_OnlyWhenSelected' | 'EST_Always' | 'EST_Never' | 'EST_MAX';
declare var EShow3DTrajectory : { EST_OnlyWhenSelected:'EST_OnlyWhenSelected',EST_Always:'EST_Always',EST_Never:'EST_Never',EST_MAX:'EST_MAX', };
declare class MovieScene3DTransformSection extends MovieSceneSection { 
	TransformMask: MovieSceneTransformMask;
	Translation: MovieSceneFloatChannel;
	Rotation: MovieSceneFloatChannel;
	Scale: MovieSceneFloatChannel;
	ManualWeight: MovieSceneFloatChannel;
	bUseQuaternionInterpolation: boolean;
	Show3DTrajectory: EShow3DTrajectory;
	static Load(ResourceName: string): MovieScene3DTransformSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformSection;
	static GetDefaultObject(): MovieScene3DTransformSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformSection;
	static C(Other: UObject | any): MovieScene3DTransformSection;
}

declare class SequencerKeyActor extends Actor { 
	KeyMeshComponent: StaticMeshComponent;
	AssociatedActor: Actor;
	TrackSection: MovieScene3DTransformSection;
	KeyTime: number;
	static GetDefaultObject(): SequencerKeyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerKeyActor;
	static C(Other: UObject | any): SequencerKeyActor;
}

declare class MovieSceneKeyStructType extends ScriptStruct { 
	SourceTimesProperty: any;
	SourceValuesProperty: any;
	DestTimeProperty: any;
	DestValueProperty: any;
	static Load(ResourceName: string): MovieSceneKeyStructType;
	static Find(Outer: UObject, ResourceName: string): MovieSceneKeyStructType;
	static GetDefaultObject(): MovieSceneKeyStructType;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneKeyStructType;
	static C(Other: UObject | any): MovieSceneKeyStructType;
}

declare class SequencerMeshTrail extends Actor { 
	static GetDefaultObject(): SequencerMeshTrail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerMeshTrail;
	static C(Other: UObject | any): SequencerMeshTrail;
}

declare class SequencerSettingsContainer extends UObject { 
	static Load(ResourceName: string): SequencerSettingsContainer;
	static Find(Outer: UObject, ResourceName: string): SequencerSettingsContainer;
	static GetDefaultObject(): SequencerSettingsContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerSettingsContainer;
	static C(Other: UObject | any): SequencerSettingsContainer;
}

declare type EAutoChangeMode = 'AutoKey' | 'AutoTrack' | 'All' | 'None' | 'EAutoChangeMode_MAX';
declare var EAutoChangeMode : { AutoKey:'AutoKey',AutoTrack:'AutoTrack',All:'All',None:'None',EAutoChangeMode_MAX:'EAutoChangeMode_MAX', };
declare type EAllowEditsMode = 'AllEdits' | 'AllowSequencerEditsOnly' | 'AllowLevelEditsOnly' | 'EAllowEditsMode_MAX';
declare var EAllowEditsMode : { AllEdits:'AllEdits',AllowSequencerEditsOnly:'AllowSequencerEditsOnly',AllowLevelEditsOnly:'AllowLevelEditsOnly',EAllowEditsMode_MAX:'EAllowEditsMode_MAX', };
declare type EKeyGroupMode = 'KeyChanged' | 'KeyGroup' | 'KeyAll' | 'EKeyGroupMode_MAX';
declare var EKeyGroupMode : { KeyChanged:'KeyChanged',KeyGroup:'KeyGroup',KeyAll:'KeyAll',EKeyGroupMode_MAX:'EKeyGroupMode_MAX', };
declare type EMovieSceneKeyInterpolation = 'Auto' | 'User' | 'Break' | 'Linear' | 'Constant' | 'EMovieSceneKeyInterpolation_MAX';
declare var EMovieSceneKeyInterpolation : { Auto:'Auto',User:'User',Break:'Break',Linear:'Linear',Constant:'Constant',EMovieSceneKeyInterpolation_MAX:'EMovieSceneKeyInterpolation_MAX', };
declare type ESequencerSpawnPosition = 'SSP_Origin' | 'SSP_PlaceInFrontOfCamera' | 'SSP_MAX';
declare var ESequencerSpawnPosition : { SSP_Origin:'SSP_Origin',SSP_PlaceInFrontOfCamera:'SSP_PlaceInFrontOfCamera',SSP_MAX:'SSP_MAX', };
declare type ESequencerZoomPosition = 'SZP_CurrentTime' | 'SZP_MousePosition' | 'SZP_MAX';
declare var ESequencerZoomPosition : { SZP_CurrentTime:'SZP_CurrentTime',SZP_MousePosition:'SZP_MousePosition',SZP_MAX:'SZP_MAX', };
declare type ESequencerLoopMode = 'SLM_NoLoop' | 'SLM_Loop' | 'SLM_LoopSelectionRange' | 'SLM_MAX';
declare var ESequencerLoopMode : { SLM_NoLoop:'SLM_NoLoop',SLM_Loop:'SLM_Loop',SLM_LoopSelectionRange:'SLM_LoopSelectionRange',SLM_MAX:'SLM_MAX', };
declare type EFrameNumberDisplayFormats = 'NonDropFrameTimecode' | 'DropFrameTimecode' | 'Seconds' | 'Frames' | 'MAX_Count' | 'EFrameNumberDisplayFormats_MAX';
declare var EFrameNumberDisplayFormats : { NonDropFrameTimecode:'NonDropFrameTimecode',DropFrameTimecode:'DropFrameTimecode',Seconds:'Seconds',Frames:'Frames',MAX_Count:'MAX_Count',EFrameNumberDisplayFormats_MAX:'EFrameNumberDisplayFormats_MAX', };
declare class SequencerSettings extends UObject { 
	AutoChangeMode: EAutoChangeMode;
	AllowEditsMode: EAllowEditsMode;
	KeyGroupMode: EKeyGroupMode;
	bKeyInterpPropertiesOnly: boolean;
	KeyInterpolation: EMovieSceneKeyInterpolation;
	bAutoSetTrackDefaults: boolean;
	SpawnPosition: ESequencerSpawnPosition;
	bCreateSpawnableCameras: boolean;
	bShowRangeSlider: boolean;
	bIsSnapEnabled: boolean;
	bSnapKeyTimesToInterval: boolean;
	bSnapKeyTimesToKeys: boolean;
	bSnapSectionTimesToInterval: boolean;
	bSnapSectionTimesToSections: boolean;
	bSnapKeysAndSectionsToPlayRange: boolean;
	bSnapPlayTimeToKeys: boolean;
	bSnapPlayTimeToInterval: boolean;
	bSnapPlayTimeToPressedKey: boolean;
	bSnapPlayTimeToDraggedKey: boolean;
	bSnapCurveValueToInterval: boolean;
	bShowSelectedNodesOnly: boolean;
	bRewindOnRecord: boolean;
	ZoomPosition: ESequencerZoomPosition;
	bAutoScrollEnabled: boolean;
	bLinkCurveEditorTimeRange: boolean;
	bSynchronizeCurveEditorSelection: boolean;
	bIsolateCurveEditorToSelection: boolean;
	LoopMode: ESequencerLoopMode;
	bKeepCursorInPlayRangeWhileScrubbing: boolean;
	bKeepCursorInPlayRange: boolean;
	bKeepPlayRangeInSectionBounds: boolean;
	ZeroPadFrames: number;
	bShowCombinedKeyframes: boolean;
	bInfiniteKeyAreas: boolean;
	bShowChannelColors: boolean;
	ReduceKeysTolerance: number;
	bDeleteKeysWhenTrimming: boolean;
	bDisableSectionsAfterBaking: boolean;
	bCleanPlaybackMode: boolean;
	bActivateRealtimeViewports: boolean;
	bEvaluateSubSequencesInIsolation: boolean;
	bRerunConstructionScripts: boolean;
	bShowDebugVisualization: boolean;
	bVisualizePreAndPostRoll: boolean;
	bCompileDirectorOnEvaluate: boolean;
	TrajectoryPathCap: any;
	bShowOutlinerInfoColumn: boolean;
	FrameNumberDisplayFormat: EFrameNumberDisplayFormats;
	static Load(ResourceName: string): SequencerSettings;
	static Find(Outer: UObject, ResourceName: string): SequencerSettings;
	static GetDefaultObject(): SequencerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerSettings;
	static C(Other: UObject | any): SequencerSettings;
}

declare class SequencerTrackFilterExtension extends UObject { 
	static Load(ResourceName: string): SequencerTrackFilterExtension;
	static Find(Outer: UObject, ResourceName: string): SequencerTrackFilterExtension;
	static GetDefaultObject(): SequencerTrackFilterExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerTrackFilterExtension;
	static C(Other: UObject | any): SequencerTrackFilterExtension;
}

declare class MeshReconstructorBase extends UObject { 
	static Load(ResourceName: string): MeshReconstructorBase;
	static Find(Outer: UObject, ResourceName: string): MeshReconstructorBase;
	static GetDefaultObject(): MeshReconstructorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshReconstructorBase;
	StopReconstruction(): void;
	StartReconstruction(): void;
	PauseReconstruction(): void;
	IsReconstructionStarted(): boolean;
	IsReconstructionPaused(): boolean;
	DisconnectMRMesh(): void;
	ConnectMRMesh(Mesh: MRMeshComponent): void;
	static C(Other: UObject | any): MeshReconstructorBase;
}

declare type EMeshTrackerVertexColorMode = 'None' | 'Confidence' | 'Block' | 'EMeshTrackerVertexColorMode_MAX';
declare var EMeshTrackerVertexColorMode : { None:'None',Confidence:'Confidence',Block:'Block',EMeshTrackerVertexColorMode_MAX:'EMeshTrackerVertexColorMode_MAX', };
declare class MockDataMeshTrackerComponent extends SceneComponent { 
	OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(index: number, Vertices: Vector[], Triangles: number[], Normals: Vector[], Confidence: number[]) => void>;
	ScanWorld: boolean;
	RequestNormals: boolean;
	RequestVertexConfidence: boolean;
	VertexColorMode: EMeshTrackerVertexColorMode;
	BlockVertexColors: Color[];
	VertexColorFromConfidenceZero: LinearColor;
	VertexColorFromConfidenceOne: LinearColor;
	UpdateInterval: number;
	MRMesh: MRMeshComponent;
	static Load(ResourceName: string): MockDataMeshTrackerComponent;
	static Find(Outer: UObject, ResourceName: string): MockDataMeshTrackerComponent;
	static GetDefaultObject(): MockDataMeshTrackerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockDataMeshTrackerComponent;
	DisconnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
	ConnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
	static C(Other: UObject | any): MockDataMeshTrackerComponent;
}

declare class ARActor extends Actor { 
	static GetDefaultObject(): ARActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARActor;
	AddARComponent(InComponentClass: UnrealEngineClass,NativeID: Guid): ARComponent;
	static C(Other: UObject | any): ARActor;
}

declare type EARCaptureType = 'Camera' | 'QRCode' | 'SpatialMapping' | 'SceneUnderstanding' | 'EARCaptureType_MAX';
declare var EARCaptureType : { Camera:'Camera',QRCode:'QRCode',SpatialMapping:'SpatialMapping',SceneUnderstanding:'SceneUnderstanding',EARCaptureType_MAX:'EARCaptureType_MAX', };
declare type EARWorldMappingState = 'NotAvailable' | 'StillMappingNotRelocalizable' | 'StillMappingRelocalizable' | 'Mapped' | 'EARWorldMappingState_MAX';
declare var EARWorldMappingState : { NotAvailable:'NotAvailable',StillMappingNotRelocalizable:'StillMappingNotRelocalizable',StillMappingRelocalizable:'StillMappingRelocalizable',Mapped:'Mapped',EARWorldMappingState_MAX:'EARWorldMappingState_MAX', };
declare type EARTrackingQualityReason = 'None' | 'Initializing' | 'Relocalizing' | 'ExcessiveMotion' | 'InsufficientFeatures' | 'InsufficientLight' | 'BadState' | 'EARTrackingQualityReason_MAX';
declare var EARTrackingQualityReason : { None:'None',Initializing:'Initializing',Relocalizing:'Relocalizing',ExcessiveMotion:'ExcessiveMotion',InsufficientFeatures:'InsufficientFeatures',InsufficientLight:'InsufficientLight',BadState:'BadState',EARTrackingQualityReason_MAX:'EARTrackingQualityReason_MAX', };
declare type EARTrackingQuality = 'NotTracking' | 'OrientationOnly' | 'OrientationAndPosition' | 'EARTrackingQuality_MAX';
declare var EARTrackingQuality : { NotTracking:'NotTracking',OrientationOnly:'OrientationOnly',OrientationAndPosition:'OrientationAndPosition',EARTrackingQuality_MAX:'EARTrackingQuality_MAX', };
declare type EARTextureType = 'Unknown' | 'CameraImage' | 'CameraDepth' | 'EnvironmentCapture' | 'PersonSegmentationImage' | 'PersonSegmentationDepth' | 'SceneDepthMap' | 'SceneDepthConfidenceMap' | 'EARTextureType_MAX';
declare var EARTextureType : { Unknown:'Unknown',CameraImage:'CameraImage',CameraDepth:'CameraDepth',EnvironmentCapture:'EnvironmentCapture',PersonSegmentationImage:'PersonSegmentationImage',PersonSegmentationDepth:'PersonSegmentationDepth',SceneDepthMap:'SceneDepthMap',SceneDepthConfidenceMap:'SceneDepthConfidenceMap',EARTextureType_MAX:'EARTextureType_MAX', };
declare class ARTexture extends Texture { 
	TextureType: EARTextureType;
	Timestamp: number;
	ExternalTextureGuid: Guid;
	Size: Vector2D;
	static Load(ResourceName: string): ARTexture;
	static Find(Outer: UObject, ResourceName: string): ARTexture;
	static GetDefaultObject(): ARTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTexture;
	static C(Other: UObject | any): ARTexture;
}

declare class ARLightEstimate extends UObject { 
	static Load(ResourceName: string): ARLightEstimate;
	static Find(Outer: UObject, ResourceName: string): ARLightEstimate;
	static GetDefaultObject(): ARLightEstimate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARLightEstimate;
	static C(Other: UObject | any): ARLightEstimate;
}

declare class ARCameraIntrinsics { 
	ImageResolution: IntPoint;
	FocalLength: Vector2D;
	PrincipalPoint: Vector2D;
	clone() : ARCameraIntrinsics;
	static C(Other: UObject | any): ARCameraIntrinsics;
	GetCameraIntrinsics(): {OutCameraIntrinsics: ARCameraIntrinsics, $: boolean};
	static GetCameraIntrinsics(OutCameraIntrinsics?: ARCameraIntrinsics): {OutCameraIntrinsics: ARCameraIntrinsics, $: boolean};
}

declare class ARTextureCameraImage extends ARTexture { 
	static Load(ResourceName: string): ARTextureCameraImage;
	static Find(Outer: UObject, ResourceName: string): ARTextureCameraImage;
	static GetDefaultObject(): ARTextureCameraImage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTextureCameraImage;
	static C(Other: UObject | any): ARTextureCameraImage;
}

declare type EARDepthQuality = 'Unkown' | 'Low' | 'High' | 'EARDepthQuality_MAX';
declare var EARDepthQuality : { Unkown:'Unkown',Low:'Low',High:'High',EARDepthQuality_MAX:'EARDepthQuality_MAX', };
declare type EARDepthAccuracy = 'Unkown' | 'Approximate' | 'Accurate' | 'EARDepthAccuracy_MAX';
declare var EARDepthAccuracy : { Unkown:'Unkown',Approximate:'Approximate',Accurate:'Accurate',EARDepthAccuracy_MAX:'EARDepthAccuracy_MAX', };
declare class ARTextureCameraDepth extends ARTexture { 
	DepthQuality: EARDepthQuality;
	DepthAccuracy: EARDepthAccuracy;
	bIsTemporallySmoothed: boolean;
	static Load(ResourceName: string): ARTextureCameraDepth;
	static Find(Outer: UObject, ResourceName: string): ARTextureCameraDepth;
	static GetDefaultObject(): ARTextureCameraDepth;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTextureCameraDepth;
	static C(Other: UObject | any): ARTextureCameraDepth;
}

declare type EARSessionStatus = 'NotStarted' | 'Running' | 'NotSupported' | 'FatalError' | 'PermissionNotGranted' | 'UnsupportedConfiguration' | 'Other' | 'EARSessionStatus_MAX';
declare var EARSessionStatus : { NotStarted:'NotStarted',Running:'Running',NotSupported:'NotSupported',FatalError:'FatalError',PermissionNotGranted:'PermissionNotGranted',UnsupportedConfiguration:'UnsupportedConfiguration',Other:'Other',EARSessionStatus_MAX:'EARSessionStatus_MAX', };
declare class ARSessionStatus { 
	AdditionalInfo: string;
	Status: EARSessionStatus;
	clone() : ARSessionStatus;
	static C(Other: UObject | any): ARSessionStatus;
	static GetARSessionStatus(): ARSessionStatus;
}

declare class ARSkeletonDefinition { 
	NumJoints: number;
	JointNames: string[];
	ParentIndices: number[];
	clone() : ARSkeletonDefinition;
	static C(Other: UObject | any): ARSkeletonDefinition;
}

declare type EARJointTransformSpace = 'Model' | 'ParentJoint' | 'EARJointTransformSpace_MAX';
declare var EARJointTransformSpace : { Model:'Model',ParentJoint:'ParentJoint',EARJointTransformSpace_MAX:'EARJointTransformSpace_MAX', };
declare class ARPose3D { 
	SkeletonDefinition: ARSkeletonDefinition;
	JointTransforms: Transform[];
	IsJointTracked: boolean[];
	JointTransformSpace: EARJointTransformSpace;
	clone() : ARPose3D;
	static C(Other: UObject | any): ARPose3D;
}

declare class ARTrackedPose extends ARTrackedGeometry { 
	TrackedPose: ARPose3D;
	static Load(ResourceName: string): ARTrackedPose;
	static Find(Outer: UObject, ResourceName: string): ARTrackedPose;
	static GetDefaultObject(): ARTrackedPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedPose;
	GetTrackedPoseData(): ARPose3D;
	static C(Other: UObject | any): ARTrackedPose;
}

declare class ARTrackedPoint extends ARTrackedGeometry { 
	static Load(ResourceName: string): ARTrackedPoint;
	static Find(Outer: UObject, ResourceName: string): ARTrackedPoint;
	static GetDefaultObject(): ARTrackedPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedPoint;
	static C(Other: UObject | any): ARTrackedPoint;
}

declare type EARPlaneOrientation = 'Horizontal' | 'Vertical' | 'Diagonal' | 'EARPlaneOrientation_MAX';
declare var EARPlaneOrientation : { Horizontal:'Horizontal',Vertical:'Vertical',Diagonal:'Diagonal',EARPlaneOrientation_MAX:'EARPlaneOrientation_MAX', };
declare class ARPlaneGeometry extends ARTrackedGeometry { 
	Orientation: EARPlaneOrientation;
	Center: Vector;
	Extent: Vector;
	BoundaryPolygon: Vector[];
	SubsumedBy: ARPlaneGeometry;
	static Load(ResourceName: string): ARPlaneGeometry;
	static Find(Outer: UObject, ResourceName: string): ARPlaneGeometry;
	static GetDefaultObject(): ARPlaneGeometry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARPlaneGeometry;
	GetSubsumedBy(): ARPlaneGeometry;
	GetOrientation(): EARPlaneOrientation;
	GetExtent(): Vector;
	GetCenter(): Vector;
	GetBoundaryPolygonInLocalSpace(): Vector[];
	static C(Other: UObject | any): ARPlaneGeometry;
}

declare class ARTrackedImage extends ARTrackedGeometry { 
	DetectedImage: ARCandidateImage;
	EstimatedSize: Vector2D;
	static Load(ResourceName: string): ARTrackedImage;
	static Find(Outer: UObject, ResourceName: string): ARTrackedImage;
	static GetDefaultObject(): ARTrackedImage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedImage;
	GetEstimateSize(): Vector2D;
	GetDetectedImage(): ARCandidateImage;
	static C(Other: UObject | any): ARTrackedImage;
}

declare class AREnvironmentCaptureProbeTexture extends TextureCube { 
	TextureType: EARTextureType;
	Timestamp: number;
	ExternalTextureGuid: Guid;
	Size: Vector2D;
	static Load(ResourceName: string): AREnvironmentCaptureProbeTexture;
	static Find(Outer: UObject, ResourceName: string): AREnvironmentCaptureProbeTexture;
	static GetDefaultObject(): AREnvironmentCaptureProbeTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AREnvironmentCaptureProbeTexture;
	static C(Other: UObject | any): AREnvironmentCaptureProbeTexture;
}

declare class AREnvironmentCaptureProbe extends ARTrackedGeometry { 
	Extent: Vector;
	EnvironmentCaptureTexture: AREnvironmentCaptureProbeTexture;
	static Load(ResourceName: string): AREnvironmentCaptureProbe;
	static Find(Outer: UObject, ResourceName: string): AREnvironmentCaptureProbe;
	static GetDefaultObject(): AREnvironmentCaptureProbe;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AREnvironmentCaptureProbe;
	GetExtent(): Vector;
	GetEnvironmentCaptureTexture(): AREnvironmentCaptureProbeTexture;
	static C(Other: UObject | any): AREnvironmentCaptureProbe;
}

declare class ARPose2D { 
	SkeletonDefinition: ARSkeletonDefinition;
	JointLocations: Vector2D[];
	IsJointTracked: boolean[];
	clone() : ARPose2D;
	static C(Other: UObject | any): ARPose2D;
}

declare class ARBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ARBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): ARBlueprintLibrary;
	static GetDefaultObject(): ARBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBlueprintLibrary;
	static UnpinComponent(ComponentToUnpin: SceneComponent): void;
	static ToggleARCapture(bOnOff: boolean,CaptureType: EARCaptureType): boolean;
	static StopARSession(): void;
	static StartARSession(SessionConfig: ARSessionConfig): void;
	static SetEnabledXRCamera(bOnOff: boolean): void;
	static SetARWorldScale(InWorldScale: number): void;
	static SetARWorldOriginLocationAndRotation(OriginLocation: Vector,OriginRotation: Rotator,bIsTransformInWorldSpace: boolean,bMaintainUpDirection: boolean): void;
	static SetAlignmentTransform(InAlignmentTransform: Transform): void;
	static SaveARPinToLocalStore(InSaveName: string,InPin: ARPin): boolean;
	static ResizeXRCamera(InSize: IntPoint): IntPoint;
	static RemovePin(PinToRemove: ARPin): void;
	static RemoveARPinFromLocalStore(InSaveName: string): void;
	static RemoveAllARPinsFromLocalStore(): void;
	static PinComponentToTraceResult(ComponentToPin: SceneComponent,TraceResult: ARTraceResult,DebugName: string): ARPin;
	static PinComponentToARPin(ComponentToPin: SceneComponent,Pin: ARPin): boolean;
	static PinComponent(ComponentToPin: SceneComponent,PinToWorldTransform: Transform,TrackedGeometry: ARTrackedGeometry,DebugName: string): ARPin;
	static PauseARSession(): void;
	static LoadARPinsFromLocalStore(): any;
	static LineTraceTrackedObjects3D(Start: Vector,End: Vector,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
	static LineTraceTrackedObjects(ScreenCoord: Vector2D,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
	static IsSessionTypeSupported(SessionType: EARSessionType): boolean;
	static IsSessionTrackingFeatureSupported(SessionType: EARSessionType,SessionTrackingFeature: EARSessionTrackingFeature): boolean;
	static IsSceneReconstructionSupported(SessionType: EARSessionType,SceneReconstructionMethod: EARSceneReconstruction): boolean;
	static IsARSupported(): boolean;
	static IsARPinLocalStoreSupported(): boolean;
	static IsARPinLocalStoreReady(): boolean;
	static GetWorldMappingStatus(): EARWorldMappingState;
	static GetTrackingQualityReason(): EARTrackingQualityReason;
	static GetTrackingQuality(): EARTrackingQuality;
	static GetSupportedVideoFormats(SessionType: EARSessionType): ARVideoFormat[];
	static GetSessionConfig(): ARSessionConfig;
	static GetPointCloud(): Vector[];
	static GetPersonSegmentationImage(): ARTexture;
	static GetPersonSegmentationDepthImage(): ARTexture;
	static GetObjectClassificationAtLocation(InWorldLocation: Vector,OutClassification?: EARObjectClassification,OutClassificationLocation?: Vector,MaxLocationDiff?: number): {OutClassification: EARObjectClassification, OutClassificationLocation: Vector, $: boolean};
	static GetNumberOfTrackedFacesSupported(): number;
	static GetCurrentLightEstimate(): ARLightEstimate;
	static GetCameraIntrinsics(OutCameraIntrinsics?: ARCameraIntrinsics): {OutCameraIntrinsics: ARCameraIntrinsics, $: boolean};
	static GetCameraImage(): ARTextureCameraImage;
	static GetCameraDepth(): ARTextureCameraDepth;
	static GetARWorldScale(): number;
	static GetARTexture(TextureType: EARTextureType): ARTexture;
	static GetARSessionStatus(): ARSessionStatus;
	static GetAllTrackedPoses(): ARTrackedPose[];
	static GetAllTrackedPoints(): ARTrackedPoint[];
	static GetAllTrackedPlanes(): ARPlaneGeometry[];
	static GetAllTrackedImages(): ARTrackedImage[];
	static GetAllTrackedEnvironmentCaptureProbes(): AREnvironmentCaptureProbe[];
	static GetAllTracked2DPoses(): ARPose2D[];
	static GetAllPins(): ARPin[];
	static GetAllGeometriesByClass(GeometryClass: UnrealEngineClass): ARTrackedGeometry[];
	static GetAllGeometries(): ARTrackedGeometry[];
	static GetAlignmentTransform(): Transform;
	static FindTrackedPointsByName(PointName: string): ARTrackedPoint[];
	static DebugDrawTrackedGeometry(TrackedGeometry: ARTrackedGeometry,WorldContextObject: UObject,Color: LinearColor,OutlineThickness: number,PersistForSeconds: number): void;
	static DebugDrawPin(ARPin: ARPin,WorldContextObject: UObject,Color: LinearColor,Scale: number,PersistForSeconds: number): void;
	static CalculateClosestIntersection(StartPoints: Vector[],EndPoints: Vector[],ClosestIntersection?: Vector): {ClosestIntersection: Vector};
	static CalculateAlignmentTransform(TransformInFirstCoordinateSystem: Transform,TransformInSecondCoordinateSystem: Transform,AlignmentTransform?: Transform): {AlignmentTransform: Transform};
	static AddTrackedPointWithName(WorldTransform: Transform,PointName: string,bDeletePointsWithSameName: boolean): boolean;
	static AddRuntimeCandidateImage(SessionConfig: ARSessionConfig,CandidateTexture: Texture2D,FriendlyName: string,PhysicalWidth: number): ARCandidateImage;
	static AddManualEnvironmentCaptureProbe(Location: Vector,Extent: Vector): boolean;
	static C(Other: UObject | any): ARBlueprintLibrary;
}

declare class ARTraceResultLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ARTraceResultLibrary;
	static Find(Outer: UObject, ResourceName: string): ARTraceResultLibrary;
	static GetDefaultObject(): ARTraceResultLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTraceResultLibrary;
	static GetTrackedGeometry(TraceResult: ARTraceResult): ARTrackedGeometry;
	static GetTraceChannel(TraceResult: ARTraceResult): EARLineTraceChannels;
	static GetLocalTransform(TraceResult: ARTraceResult): Transform;
	static GetLocalToWorldTransform(TraceResult: ARTraceResult): Transform;
	static GetLocalToTrackingTransform(TraceResult: ARTraceResult): Transform;
	static GetDistanceFromCamera(TraceResult: ARTraceResult): number;
	static C(Other: UObject | any): ARTraceResultLibrary;
}

declare class BlueprintAsyncActionBase extends UObject { 
	static Load(ResourceName: string): BlueprintAsyncActionBase;
	static Find(Outer: UObject, ResourceName: string): BlueprintAsyncActionBase;
	static GetDefaultObject(): BlueprintAsyncActionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintAsyncActionBase;
	Activate(): void;
	static C(Other: UObject | any): BlueprintAsyncActionBase;
}

declare class ARBaseAsyncTaskBlueprintProxy extends BlueprintAsyncActionBase { 
	static Load(ResourceName: string): ARBaseAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): ARBaseAsyncTaskBlueprintProxy;
	static GetDefaultObject(): ARBaseAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBaseAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): ARBaseAsyncTaskBlueprintProxy;
}

declare class ARSaveWorldAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
	OnSuccess: UnrealEngineMulticastDelegate<(SavedWorld: number[]) => void>;
	OnFailed: UnrealEngineMulticastDelegate<(SavedWorld: number[]) => void>;
	static Load(ResourceName: string): ARSaveWorldAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): ARSaveWorldAsyncTaskBlueprintProxy;
	static GetDefaultObject(): ARSaveWorldAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSaveWorldAsyncTaskBlueprintProxy;
	static ARSaveWorld(WorldContextObject: UObject): ARSaveWorldAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): ARSaveWorldAsyncTaskBlueprintProxy;
}

declare class ARGetCandidateObjectAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
	OnSuccess: UnrealEngineMulticastDelegate<(SavedObject: ARCandidateObject) => void>;
	OnFailed: UnrealEngineMulticastDelegate<(SavedObject: ARCandidateObject) => void>;
	static Load(ResourceName: string): ARGetCandidateObjectAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): ARGetCandidateObjectAsyncTaskBlueprintProxy;
	static GetDefaultObject(): ARGetCandidateObjectAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARGetCandidateObjectAsyncTaskBlueprintProxy;
	static ARGetCandidateObject(WorldContextObject: UObject,Location: Vector,Extent: Vector): ARGetCandidateObjectAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): ARGetCandidateObjectAsyncTaskBlueprintProxy;
}

declare type EARServicePermissionRequestResult = 'Granted' | 'Denied' | 'EARServicePermissionRequestResult_MAX';
declare var EARServicePermissionRequestResult : { Granted:'Granted',Denied:'Denied',EARServicePermissionRequestResult_MAX:'EARServicePermissionRequestResult_MAX', };
declare type EARServiceInstallRequestResult = 'Installed' | 'DeviceNotCompatible' | 'UserDeclinedInstallation' | 'FatalError' | 'EARServiceInstallRequestResult_MAX';
declare var EARServiceInstallRequestResult : { Installed:'Installed',DeviceNotCompatible:'DeviceNotCompatible',UserDeclinedInstallation:'UserDeclinedInstallation',FatalError:'FatalError',EARServiceInstallRequestResult_MAX:'EARServiceInstallRequestResult_MAX', };
declare type EARServiceAvailability = 'UnknownError' | 'UnknownChecking' | 'UnknownTimedOut' | 'UnsupportedDeviceNotCapable' | 'SupportedNotInstalled' | 'SupportedVersionTooOld' | 'SupportedInstalled' | 'EARServiceAvailability_MAX';
declare var EARServiceAvailability : { UnknownError:'UnknownError',UnknownChecking:'UnknownChecking',UnknownTimedOut:'UnknownTimedOut',UnsupportedDeviceNotCapable:'UnsupportedDeviceNotCapable',SupportedNotInstalled:'SupportedNotInstalled',SupportedVersionTooOld:'SupportedVersionTooOld',SupportedInstalled:'SupportedInstalled',EARServiceAvailability_MAX:'EARServiceAvailability_MAX', };
declare class ARDependencyHandler extends UObject { 
	static Load(ResourceName: string): ARDependencyHandler;
	static Find(Outer: UObject, ResourceName: string): ARDependencyHandler;
	static GetDefaultObject(): ARDependencyHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARDependencyHandler;
	StartARSessionLatent(WorldContextObject: UObject,SessionConfig: ARSessionConfig,LatentInfo: LatentActionInfo): void;
	RequestARSessionPermission(WorldContextObject: UObject,SessionConfig: ARSessionConfig,LatentInfo: LatentActionInfo,OutPermissionResult?: EARServicePermissionRequestResult): {OutPermissionResult: EARServicePermissionRequestResult};
	InstallARService(WorldContextObject: UObject,LatentInfo: LatentActionInfo,OutInstallResult?: EARServiceInstallRequestResult): {OutInstallResult: EARServiceInstallRequestResult};
	static GetARDependencyHandler(): ARDependencyHandler;
	CheckARServiceAvailability(WorldContextObject: UObject,LatentInfo: LatentActionInfo,OutAvailability?: EARServiceAvailability): {OutAvailability: EARServiceAvailability};
	static C(Other: UObject | any): ARDependencyHandler;
}

declare type EARGeoTrackingStateReason = 'None' | 'NotAvailableAtLocation' | 'NeedLocationPermissions' | 'DevicePointedTooLow' | 'WorldTrackingUnstable' | 'WaitingForLocation' | 'GeoDataNotLoaded' | 'VisualLocalizationFailed' | 'WaitingForAvailabilityCheck' | 'EARGeoTrackingStateReason_MAX';
declare var EARGeoTrackingStateReason : { None:'None',NotAvailableAtLocation:'NotAvailableAtLocation',NeedLocationPermissions:'NeedLocationPermissions',DevicePointedTooLow:'DevicePointedTooLow',WorldTrackingUnstable:'WorldTrackingUnstable',WaitingForLocation:'WaitingForLocation',GeoDataNotLoaded:'GeoDataNotLoaded',VisualLocalizationFailed:'VisualLocalizationFailed',WaitingForAvailabilityCheck:'WaitingForAvailabilityCheck',EARGeoTrackingStateReason_MAX:'EARGeoTrackingStateReason_MAX', };
declare type EARGeoTrackingState = 'Initializing' | 'Localized' | 'Localizing' | 'NotAvailable' | 'EARGeoTrackingState_MAX';
declare var EARGeoTrackingState : { Initializing:'Initializing',Localized:'Localized',Localizing:'Localizing',NotAvailable:'NotAvailable',EARGeoTrackingState_MAX:'EARGeoTrackingState_MAX', };
declare type EARGeoTrackingAccuracy = 'Undetermined' | 'Low' | 'Medium' | 'High' | 'EARGeoTrackingAccuracy_MAX';
declare var EARGeoTrackingAccuracy : { Undetermined:'Undetermined',Low:'Low',Medium:'Medium',High:'High',EARGeoTrackingAccuracy_MAX:'EARGeoTrackingAccuracy_MAX', };
declare class ARGeoTrackingSupport extends UObject { 
	static Load(ResourceName: string): ARGeoTrackingSupport;
	static Find(Outer: UObject, ResourceName: string): ARGeoTrackingSupport;
	static GetDefaultObject(): ARGeoTrackingSupport;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARGeoTrackingSupport;
	static GetGeoTrackingSupport(): ARGeoTrackingSupport;
	GetGeoTrackingStateReason(): EARGeoTrackingStateReason;
	GetGeoTrackingState(): EARGeoTrackingState;
	GetGeoTrackingAccuracy(): EARGeoTrackingAccuracy;
	AddGeoAnchorAtLocationWithAltitude(Longitude: number,Latitude: number,AltitudeMeters: number,OptionalAnchorName: string): boolean;
	AddGeoAnchorAtLocation(Longitude: number,Latitude: number,OptionalAnchorName: string): boolean;
	static C(Other: UObject | any): ARGeoTrackingSupport;
}

declare class CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
	OnSuccess: UnrealEngineMulticastDelegate<(bIsAvailable: boolean, Error: string) => void>;
	OnFailed: UnrealEngineMulticastDelegate<(bIsAvailable: boolean, Error: string) => void>;
	static Load(ResourceName: string): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static GetDefaultObject(): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static CheckGeoTrackingAvailabilityAtLocation(WorldContextObject: UObject,Longitude: number,Latitude: number): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static CheckGeoTrackingAvailability(WorldContextObject: UObject): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
}

declare class GetGeoLocationAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
	OnSuccess: UnrealEngineMulticastDelegate<(Longitude: number, Latitude: number, Altitude: number, Error: string) => void>;
	OnFailed: UnrealEngineMulticastDelegate<(Longitude: number, Latitude: number, Altitude: number, Error: string) => void>;
	static Load(ResourceName: string): GetGeoLocationAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): GetGeoLocationAsyncTaskBlueprintProxy;
	static GetDefaultObject(): GetGeoLocationAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GetGeoLocationAsyncTaskBlueprintProxy;
	static GetGeoLocationAtWorldPosition(WorldContextObject: UObject,WorldPosition: Vector): GetGeoLocationAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): GetGeoLocationAsyncTaskBlueprintProxy;
}

declare class ARLifeCycleComponent extends SceneComponent { 
	OnARActorSpawnedDelegate: UnrealEngineMulticastDelegate<(ComponentClass: UnrealEngineClass, NativeID: Guid, SpawnedActor: ARActor) => void>;
	OnARActorToBeDestroyedDelegate: UnrealEngineMulticastDelegate<(Actor: ARActor) => void>;
	static Load(ResourceName: string): ARLifeCycleComponent;
	static Find(Outer: UObject, ResourceName: string): ARLifeCycleComponent;
	static GetDefaultObject(): ARLifeCycleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARLifeCycleComponent;
	ServerSpawnARActor(ComponentClass: UnrealEngineClass,NativeID: Guid): void;
	ServerDestroyARActor(Actor: ARActor): void;
	static C(Other: UObject | any): ARLifeCycleComponent;
}

declare class ARBasicLightEstimate extends ARLightEstimate { 
	AmbientIntensityLumens: number;
	AmbientColorTemperatureKelvin: number;
	AmbientColor: LinearColor;
	static Load(ResourceName: string): ARBasicLightEstimate;
	static Find(Outer: UObject, ResourceName: string): ARBasicLightEstimate;
	static GetDefaultObject(): ARBasicLightEstimate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBasicLightEstimate;
	GetAmbientIntensityLumens(): number;
	GetAmbientColorTemperatureKelvin(): number;
	GetAmbientColor(): LinearColor;
	static C(Other: UObject | any): ARBasicLightEstimate;
}

declare class AROriginActor extends Actor { 
	static GetDefaultObject(): AROriginActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AROriginActor;
	static C(Other: UObject | any): AROriginActor;
}

declare class GameMode extends GameModeBase { 
	MatchState: string;
	bDelayedStart: boolean;
	NumSpectators: number;
	NumPlayers: number;
	NumBots: number;
	MinRespawnDelay: number;
	NumTravellingPlayers: number;
	EngineMessageClass: UnrealEngineClass;
	InactivePlayerArray: PlayerState[];
	InactivePlayerStateLifeSpan: number;
	MaxInactivePlayers: number;
	bHandleDedicatedServerReplays: boolean;
	static GetDefaultObject(): GameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMode;
	StartMatch(): void;
	SetBandwidthLimit(AsyncIOBandwidthLimit: number): void;
	Say(Msg: string): void;
	RestartGame(): void;
	ReadyToStartMatch(): boolean;
	ReadyToEndMatch(): boolean;
	K2_OnSetMatchState(NewState: string): void;
	IsMatchInProgress(): boolean;
	GetMatchState(): string;
	EndMatch(): void;
	AbortMatch(): void;
	static C(Other: UObject | any): GameMode;
}

declare class GameState extends GameStateBase { 
	MatchState: string;
	PreviousMatchState: string;
	ElapsedTime: number;
	static GetDefaultObject(): GameState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameState;
	OnRep_MatchState(): void;
	OnRep_ElapsedTime(): void;
	static C(Other: UObject | any): GameState;
}

declare class ARSharedWorldGameState extends GameState { 
	PreviewImageData: number[];
	ARWorldData: number[];
	PreviewImageBytesTotal: number;
	ARWorldBytesTotal: number;
	PreviewImageBytesDelivered: number;
	ARWorldBytesDelivered: number;
	static GetDefaultObject(): ARSharedWorldGameState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldGameState;
	K2_OnARWorldMapIsReady(): void;
	static C(Other: UObject | any): ARSharedWorldGameState;
}

declare class ARSharedWorldGameMode extends GameMode { 
	BufferSizePerChunk: number;
	static GetDefaultObject(): ARSharedWorldGameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldGameMode;
	SetPreviewImageData(ImageData: number[]): void;
	SetARWorldSharingIsReady(): void;
	SetARSharedWorldData(ARWorldData: number[]): void;
	GetARSharedWorldGameState(): ARSharedWorldGameState;
	static C(Other: UObject | any): ARSharedWorldGameMode;
}

declare class ARSharedWorldPlayerController extends PlayerController { 
	static GetDefaultObject(): ARSharedWorldPlayerController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldPlayerController;
	ServerMarkReadyForReceiving(): void;
	ClientUpdatePreviewImageData(Offset: number,Buffer: number[]): void;
	ClientUpdateARWorldData(Offset: number,Buffer: number[]): void;
	ClientInitSharedWorld(PreviewImageSize: number,ARWorldDataSize: number): void;
	static C(Other: UObject | any): ARSharedWorldPlayerController;
}

declare class LightComponentBase extends SceneComponent { 
	LightGuid: Guid;
	Brightness: number;
	Intensity: number;
	LightColor: Color;
	bAffectsWorld: boolean;
	CastShadows: boolean;
	CastStaticShadows: boolean;
	CastDynamicShadows: boolean;
	bAffectTranslucentLighting: boolean;
	bTransmission: boolean;
	bCastVolumetricShadow: boolean;
	bCastDeepShadow: boolean;
	bCastRaytracedShadow: boolean;
	bAffectReflection: boolean;
	bAffectGlobalIllumination: boolean;
	DeepShadowLayerDistribution: number;
	IndirectLightingIntensity: number;
	VolumetricScatteringIntensity: number;
	SamplesPerPixel: number;
	StaticEditorTexture: Texture2D;
	StaticEditorTextureScale: number;
	DynamicEditorTexture: Texture2D;
	DynamicEditorTextureScale: number;
	static Load(ResourceName: string): LightComponentBase;
	static Find(Outer: UObject, ResourceName: string): LightComponentBase;
	static GetDefaultObject(): LightComponentBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponentBase;
	SetSamplesPerPixel(NewValue: number): void;
	SetCastVolumetricShadow(bNewValue: boolean): void;
	SetCastShadows(bNewValue: boolean): void;
	SetCastRaytracedShadow(bNewValue: boolean): void;
	SetCastDeepShadow(bNewValue: boolean): void;
	SetAffectReflection(bNewValue: boolean): void;
	SetAffectGlobalIllumination(bNewValue: boolean): void;
	GetLightColor(): LinearColor;
	static C(Other: UObject | any): LightComponentBase;
}

declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap' | 'SLS_MAX';
declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap',SLS_MAX:'SLS_MAX', };
declare type EOcclusionCombineMode = 'OCM_Minimum' | 'OCM_Multiply' | 'OCM_MAX';
declare var EOcclusionCombineMode : { OCM_Minimum:'OCM_Minimum',OCM_Multiply:'OCM_Multiply',OCM_MAX:'OCM_MAX', };
declare class SkyLightComponent extends LightComponentBase { 
	bRealTimeCapture: boolean;
	SourceType: ESkyLightSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	CubemapResolution: number;
	SkyDistanceThreshold: number;
	bCaptureEmissiveOnly: boolean;
	bLowerHemisphereIsBlack: boolean;
	LowerHemisphereColor: LinearColor;
	OcclusionMaxDistance: number;
	Contrast: number;
	OcclusionExponent: number;
	MinOcclusion: number;
	OcclusionTint: Color;
	bCloudAmbientOcclusion: boolean;
	CloudAmbientOcclusionStrength: number;
	CloudAmbientOcclusionExtent: number;
	CloudAmbientOcclusionMapResolutionScale: number;
	CloudAmbientOcclusionApertureScale: number;
	OcclusionCombineMode: EOcclusionCombineMode;
	BlendDestinationCubemap: TextureCube;
	static Load(ResourceName: string): SkyLightComponent;
	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
	static GetDefaultObject(): SkyLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
	SetVolumetricScatteringIntensity(NewIntensity: number): void;
	SetOcclusionTint(InTint: Color): void;
	SetOcclusionExponent(InOcclusionExponent: number): void;
	SetOcclusionContrast(InOcclusionContrast: number): void;
	SetMinOcclusion(InMinOcclusion: number): void;
	SetLowerHemisphereColor(InLowerHemisphereColor: LinearColor): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
	SetCubemap(NewCubemap: TextureCube): void;
	RecaptureSky(): void;
	static C(Other: UObject | any): SkyLightComponent;
}

declare class SkyLight extends Info { 
	LightComponent: SkyLightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): SkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): SkyLight;
}

declare class ARSkyLight extends SkyLight { 
	CaptureProbe: AREnvironmentCaptureProbe;
	static GetDefaultObject(): ARSkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSkyLight;
	SetEnvironmentCaptureProbe(InCaptureProbe: AREnvironmentCaptureProbe): void;
	static C(Other: UObject | any): ARSkyLight;
}

declare class ARTraceResultDummy extends UObject { 
	static Load(ResourceName: string): ARTraceResultDummy;
	static Find(Outer: UObject, ResourceName: string): ARTraceResultDummy;
	static GetDefaultObject(): ARTraceResultDummy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTraceResultDummy;
	static C(Other: UObject | any): ARTraceResultDummy;
}

declare class ARTrackedQRCode extends ARTrackedImage { 
	QRCode: string;
	Version: number;
	static Load(ResourceName: string): ARTrackedQRCode;
	static Find(Outer: UObject, ResourceName: string): ARTrackedQRCode;
	static GetDefaultObject(): ARTrackedQRCode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedQRCode;
	static C(Other: UObject | any): ARTrackedQRCode;
}

declare type EAREye = 'LeftEye' | 'RightEye' | 'EAREye_MAX';
declare var EAREye : { LeftEye:'LeftEye',RightEye:'RightEye',EAREye_MAX:'EAREye_MAX', };
declare type EARFaceBlendShape = 'EyeBlinkLeft' | 'EyeLookDownLeft' | 'EyeLookInLeft' | 'EyeLookOutLeft' | 'EyeLookUpLeft' | 'EyeSquintLeft' | 'EyeWideLeft' | 'EyeBlinkRight' | 'EyeLookDownRight' | 'EyeLookInRight' | 'EyeLookOutRight' | 'EyeLookUpRight' | 'EyeSquintRight' | 'EyeWideRight' | 'JawForward' | 'JawLeft' | 'JawRight' | 'JawOpen' | 'MouthClose' | 'MouthFunnel' | 'MouthPucker' | 'MouthLeft' | 'MouthRight' | 'MouthSmileLeft' | 'MouthSmileRight' | 'MouthFrownLeft' | 'MouthFrownRight' | 'MouthDimpleLeft' | 'MouthDimpleRight' | 'MouthStretchLeft' | 'MouthStretchRight' | 'MouthRollLower' | 'MouthRollUpper' | 'MouthShrugLower' | 'MouthShrugUpper' | 'MouthPressLeft' | 'MouthPressRight' | 'MouthLowerDownLeft' | 'MouthLowerDownRight' | 'MouthUpperUpLeft' | 'MouthUpperUpRight' | 'BrowDownLeft' | 'BrowDownRight' | 'BrowInnerUp' | 'BrowOuterUpLeft' | 'BrowOuterUpRight' | 'CheekPuff' | 'CheekSquintLeft' | 'CheekSquintRight' | 'NoseSneerLeft' | 'NoseSneerRight' | 'TongueOut' | 'HeadYaw' | 'HeadPitch' | 'HeadRoll' | 'LeftEyeYaw' | 'LeftEyePitch' | 'LeftEyeRoll' | 'RightEyeYaw' | 'RightEyePitch' | 'RightEyeRoll' | 'MAX';
declare var EARFaceBlendShape : { EyeBlinkLeft:'EyeBlinkLeft',EyeLookDownLeft:'EyeLookDownLeft',EyeLookInLeft:'EyeLookInLeft',EyeLookOutLeft:'EyeLookOutLeft',EyeLookUpLeft:'EyeLookUpLeft',EyeSquintLeft:'EyeSquintLeft',EyeWideLeft:'EyeWideLeft',EyeBlinkRight:'EyeBlinkRight',EyeLookDownRight:'EyeLookDownRight',EyeLookInRight:'EyeLookInRight',EyeLookOutRight:'EyeLookOutRight',EyeLookUpRight:'EyeLookUpRight',EyeSquintRight:'EyeSquintRight',EyeWideRight:'EyeWideRight',JawForward:'JawForward',JawLeft:'JawLeft',JawRight:'JawRight',JawOpen:'JawOpen',MouthClose:'MouthClose',MouthFunnel:'MouthFunnel',MouthPucker:'MouthPucker',MouthLeft:'MouthLeft',MouthRight:'MouthRight',MouthSmileLeft:'MouthSmileLeft',MouthSmileRight:'MouthSmileRight',MouthFrownLeft:'MouthFrownLeft',MouthFrownRight:'MouthFrownRight',MouthDimpleLeft:'MouthDimpleLeft',MouthDimpleRight:'MouthDimpleRight',MouthStretchLeft:'MouthStretchLeft',MouthStretchRight:'MouthStretchRight',MouthRollLower:'MouthRollLower',MouthRollUpper:'MouthRollUpper',MouthShrugLower:'MouthShrugLower',MouthShrugUpper:'MouthShrugUpper',MouthPressLeft:'MouthPressLeft',MouthPressRight:'MouthPressRight',MouthLowerDownLeft:'MouthLowerDownLeft',MouthLowerDownRight:'MouthLowerDownRight',MouthUpperUpLeft:'MouthUpperUpLeft',MouthUpperUpRight:'MouthUpperUpRight',BrowDownLeft:'BrowDownLeft',BrowDownRight:'BrowDownRight',BrowInnerUp:'BrowInnerUp',BrowOuterUpLeft:'BrowOuterUpLeft',BrowOuterUpRight:'BrowOuterUpRight',CheekPuff:'CheekPuff',CheekSquintLeft:'CheekSquintLeft',CheekSquintRight:'CheekSquintRight',NoseSneerLeft:'NoseSneerLeft',NoseSneerRight:'NoseSneerRight',TongueOut:'TongueOut',HeadYaw:'HeadYaw',HeadPitch:'HeadPitch',HeadRoll:'HeadRoll',LeftEyeYaw:'LeftEyeYaw',LeftEyePitch:'LeftEyePitch',LeftEyeRoll:'LeftEyeRoll',RightEyeYaw:'RightEyeYaw',RightEyePitch:'RightEyePitch',RightEyeRoll:'RightEyeRoll',MAX:'MAX', };
declare class ARFaceGeometry extends ARTrackedGeometry { 
	LookAtTarget: Vector;
	bIsTracked: boolean;
	BlendShapes: any;
	LeftEyeTransform: Transform;
	RightEyeTransform: Transform;
	static Load(ResourceName: string): ARFaceGeometry;
	static Find(Outer: UObject, ResourceName: string): ARFaceGeometry;
	static GetDefaultObject(): ARFaceGeometry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARFaceGeometry;
	GetWorldSpaceEyeTransform(Eye: EAREye): Transform;
	GetLocalSpaceEyeTransform(Eye: EAREye): Transform;
	GetBlendShapeValue(BlendShape: EARFaceBlendShape): number;
	GetBlendShapes(): any;
	static C(Other: UObject | any): ARFaceGeometry;
}

declare class ARTrackedObject extends ARTrackedGeometry { 
	DetectedObject: ARCandidateObject;
	static Load(ResourceName: string): ARTrackedObject;
	static Find(Outer: UObject, ResourceName: string): ARTrackedObject;
	static GetDefaultObject(): ARTrackedObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedObject;
	GetDetectedObject(): ARCandidateObject;
	static C(Other: UObject | any): ARTrackedObject;
}

declare class ARMeshGeometry extends ARTrackedGeometry { 
	static Load(ResourceName: string): ARMeshGeometry;
	static Find(Outer: UObject, ResourceName: string): ARMeshGeometry;
	static GetDefaultObject(): ARMeshGeometry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARMeshGeometry;
	GetObjectClassificationAtLocation(InWorldLocation: Vector,OutClassification?: EARObjectClassification,OutClassificationLocation?: Vector,MaxLocationDiff?: number): {OutClassification: EARObjectClassification, OutClassificationLocation: Vector, $: boolean};
	static C(Other: UObject | any): ARMeshGeometry;
}

declare class ARGeoAnchor extends ARTrackedGeometry { 
	static Load(ResourceName: string): ARGeoAnchor;
	static Find(Outer: UObject, ResourceName: string): ARGeoAnchor;
	static GetDefaultObject(): ARGeoAnchor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARGeoAnchor;
	GetLongitude(): number;
	GetLatitude(): number;
	GetAltitudeSource(): EARAltitudeSource;
	GetAltitudeMeters(): number;
	static C(Other: UObject | any): ARGeoAnchor;
}

declare class ARTrackableNotifyComponent extends ActorComponent { 
	OnAddTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
	OnUpdateTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
	OnRemoveTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
	OnAddTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
	OnUpdateTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
	OnRemoveTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
	OnAddTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
	OnUpdateTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
	OnRemoveTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
	OnAddTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
	OnUpdateTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
	OnRemoveTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
	OnAddTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
	OnUpdateTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
	OnRemoveTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
	OnAddTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
	OnUpdateTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
	OnRemoveTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
	OnAddTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
	OnUpdateTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
	OnRemoveTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
	static Load(ResourceName: string): ARTrackableNotifyComponent;
	static Find(Outer: UObject, ResourceName: string): ARTrackableNotifyComponent;
	static GetDefaultObject(): ARTrackableNotifyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackableNotifyComponent;
	static C(Other: UObject | any): ARTrackableNotifyComponent;
}

declare class ARTypesDummyClass extends UObject { 
	static Load(ResourceName: string): ARTypesDummyClass;
	static Find(Outer: UObject, ResourceName: string): ARTypesDummyClass;
	static GetDefaultObject(): ARTypesDummyClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTypesDummyClass;
	static C(Other: UObject | any): ARTypesDummyClass;
}

declare type EHMDTrackingOrigin = 'Floor' | 'Eye' | 'Stage' | 'Unbounded' | 'EHMDTrackingOrigin_MAX';
declare var EHMDTrackingOrigin : { Floor:'Floor',Eye:'Eye',Stage:'Stage',Unbounded:'Unbounded',EHMDTrackingOrigin_MAX:'EHMDTrackingOrigin_MAX', };
declare type ESpectatorScreenMode = 'Disabled' | 'SingleEyeLetterboxed' | 'Undistorted' | 'Distorted' | 'SingleEye' | 'SingleEyeCroppedToFill' | 'Texture' | 'TexturePlusEye' | 'ESpectatorScreenMode_MAX';
declare var ESpectatorScreenMode : { Disabled:'Disabled',SingleEyeLetterboxed:'SingleEyeLetterboxed',Undistorted:'Undistorted',Distorted:'Distorted',SingleEye:'SingleEye',SingleEyeCroppedToFill:'SingleEyeCroppedToFill',Texture:'Texture',TexturePlusEye:'TexturePlusEye',ESpectatorScreenMode_MAX:'ESpectatorScreenMode_MAX', };
declare type EHMDWornState = 'Unknown' | 'Worn' | 'NotWorn' | 'EHMDWornState_MAX';
declare var EHMDWornState : { Unknown:'Unknown',Worn:'Worn',NotWorn:'NotWorn',EHMDWornState_MAX:'EHMDWornState_MAX', };
declare type EXRTrackedDeviceType = 'HeadMountedDisplay' | 'Controller' | 'TrackingReference' | 'Other' | 'Invalid' | 'Any' | 'EXRTrackedDeviceType_MAX';
declare var EXRTrackedDeviceType : { HeadMountedDisplay:'HeadMountedDisplay',Controller:'Controller',TrackingReference:'TrackingReference',Other:'Other',Invalid:'Invalid',Any:'Any',EXRTrackedDeviceType_MAX:'EXRTrackedDeviceType_MAX', };
declare type EXRDeviceConnectionResult = 'NoTrackingSystem' | 'FeatureNotSupported' | 'NoValidViewport' | 'MiscFailure' | 'Success' | 'EXRDeviceConnectionResult_MAX';
declare var EXRDeviceConnectionResult : { NoTrackingSystem:'NoTrackingSystem',FeatureNotSupported:'FeatureNotSupported',NoValidViewport:'NoValidViewport',MiscFailure:'MiscFailure',Success:'Success',EXRDeviceConnectionResult_MAX:'EXRDeviceConnectionResult_MAX', };
declare type ESpatialInputGestureAxis = 'None' | 'Manipulation' | 'Navigation' | 'NavigationRails' | 'ESpatialInputGestureAxis_MAX';
declare var ESpatialInputGestureAxis : { None:'None',Manipulation:'Manipulation',Navigation:'Navigation',NavigationRails:'NavigationRails',ESpatialInputGestureAxis_MAX:'ESpatialInputGestureAxis_MAX', };
declare class XRGestureConfig { 
	bTap: boolean;
	bHold: boolean;
	AxisGesture: ESpatialInputGestureAxis;
	bNavigationAxisX: boolean;
	bNavigationAxisY: boolean;
	bNavigationAxisZ: boolean;
	clone() : XRGestureConfig;
	static C(Other: UObject | any): XRGestureConfig;
	ConfigureGestures(): boolean;
	static ConfigureGestures(GestureConfig: XRGestureConfig): boolean;
}

declare class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static GetDefaultObject(): HeadMountedDisplayFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HeadMountedDisplayFunctionLibrary;
	static UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform): void;
	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
	static SetTrackingOrigin(Origin: EHMDTrackingOrigin): void;
	static SetSpectatorScreenTexture(InTexture: Texture): void;
	static SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D,EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
	static SetSpectatorScreenMode(Mode: ESpectatorScreenMode): void;
	static SetClippingPlanes(Near: number,Far: number): void;
	static ResetOrientationAndPosition(Yaw: number,Options: EOrientPositionSelector): void;
	static IsSpectatorScreenModeControllable(): boolean;
	static IsInLowPersistenceMode(): boolean;
	static IsHeadMountedDisplayEnabled(): boolean;
	static IsHeadMountedDisplayConnected(): boolean;
	static IsDeviceTracking(XRDeviceId: XRDeviceId): boolean;
	static HasValidTrackingPosition(): boolean;
	static GetXRSystemFlags(): number;
	static GetWorldToMetersScale(WorldContext: UObject): number;
	static GetVRFocusState(bUseFocus?: boolean,bHasFocus?: boolean): {bUseFocus: boolean, bHasFocus: boolean};
	static GetVersionString(): string;
	static GetTrackingToWorldTransform(WorldContext: UObject): Transform;
	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
	static GetTrackingOrigin(): EHMDTrackingOrigin;
	static GetScreenPercentage(): number;
	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
	static GetPixelDensity(): number;
	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
	static GetNumOfTrackingSensors(): number;
	static GetMotionControllerData(WorldContext: UObject,hand: EControllerHand,MotionControllerData?: XRMotionControllerData): {MotionControllerData: XRMotionControllerData};
	static GetHMDWornState(): EHMDWornState;
	static GetHMDDeviceName(): string;
	static GetHMDData(WorldContext: UObject,HMDData?: XRHMDData): {HMDData: XRHMDData};
	static GetDeviceWorldPose(WorldContext: UObject,XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
	static GetDevicePose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
	static GetControllerTransformForTime(WorldContext: UObject,ControllerIndex: number,MotionSource: string,Time: Timespan,bTimeWasUsed?: boolean,Orientation?: Rotator,Position?: Vector,bProvidedLinearVelocity?: boolean,LinearVelocity?: Vector,bProvidedAngularVelocity?: boolean,AngularVelocityRadPerSec?: Vector): {bTimeWasUsed: boolean, Orientation: Rotator, Position: Vector, bProvidedLinearVelocity: boolean, LinearVelocity: Vector, bProvidedAngularVelocity: boolean, AngularVelocityRadPerSec: Vector, $: boolean};
	static EnumerateTrackedDevices(SystemId: string,DeviceType: EXRTrackedDeviceType): XRDeviceId[];
	static EnableLowPersistenceMode(bEnable: boolean): void;
	static EnableHMD(bEnable: boolean): boolean;
	static DisconnectRemoteXRDevice(): void;
	static ConnectRemoteXRDevice(IpAddress: string,BitRate: number): EXRDeviceConnectionResult;
	static ConfigureGestures(GestureConfig: XRGestureConfig): boolean;
	static ClearXRTimedInputActionDelegate(ActionPath: string): void;
	static CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform): void;
	static C(Other: UObject | any): HeadMountedDisplayFunctionLibrary;
}

declare class MotionControllerComponent extends PrimitiveComponent { 
	PlayerIndex: number;
	hand: EControllerHand;
	MotionSource: string;
	bDisableLowLatencyUpdate: boolean;
	CurrentTrackingStatus: ETrackingStatus;
	bDisplayDeviceModel: boolean;
	DisplayModelSource: string;
	CustomDisplayMesh: StaticMesh;
	DisplayMeshMaterialOverrides: MaterialInterface[];
	DisplayComponent: PrimitiveComponent;
	static Load(ResourceName: string): MotionControllerComponent;
	static Find(Outer: UObject, ResourceName: string): MotionControllerComponent;
	static GetDefaultObject(): MotionControllerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionControllerComponent;
	SetTrackingSource(NewSource: EControllerHand): void;
	SetTrackingMotionSource(NewSource: string): void;
	SetShowDeviceModel(bShowControllerModel: boolean): void;
	SetDisplayModelSource(NewDisplayModelSource: string): void;
	SetCustomDisplayMesh(NewDisplayMesh: StaticMesh): void;
	SetAssociatedPlayerIndex(NewPlayer: number): void;
	OnMotionControllerUpdated(): void;
	IsTracked(): boolean;
	GetTrackingSource(): EControllerHand;
	GetParameterValue(InName: string,bValueFound?: boolean): {bValueFound: boolean, $: number};
	GetHandJointPosition(jointIndex: number,bValueFound?: boolean): {bValueFound: boolean, $: Vector};
	static C(Other: UObject | any): MotionControllerComponent;
	DisableMotionTrackingForComponent(): void;
	EnableMotionTrackingForComponent(): boolean;
	IsMotionTrackingEnabledForComponent(): boolean;
	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
}

declare class MotionTrackedDeviceFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MotionTrackedDeviceFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MotionTrackedDeviceFunctionLibrary;
	static GetDefaultObject(): MotionTrackedDeviceFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionTrackedDeviceFunctionLibrary;
	static SetIsControllerMotionTrackingEnabledByDefault(Enable: boolean): void;
	static IsMotionTrackingEnabledForSource(PlayerIndex: number,SourceName: string): boolean;
	static IsMotionTrackingEnabledForDevice(PlayerIndex: number,hand: EControllerHand): boolean;
	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
	static IsMotionTrackedDeviceCountManagementNecessary(): boolean;
	static IsMotionSourceTracking(PlayerIndex: number,SourceName: string): boolean;
	static GetMotionTrackingEnabledControllerCount(): number;
	static GetMaximumMotionTrackedControllerCount(): number;
	static GetActiveTrackingSystemName(): string;
	static EnumerateMotionSources(): string[];
	static EnableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): boolean;
	static EnableMotionTrackingOfDevice(PlayerIndex: number,hand: EControllerHand): boolean;
	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
	static DisableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): void;
	static DisableMotionTrackingOfDevice(PlayerIndex: number,hand: EControllerHand): void;
	static DisableMotionTrackingOfControllersForPlayer(PlayerIndex: number): void;
	static DisableMotionTrackingOfAllControllers(): void;
	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
	static C(Other: UObject | any): MotionTrackedDeviceFunctionLibrary;
}

declare class VRNotificationsComponent extends ActorComponent { 
	HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDLostDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	VRControllerRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): VRNotificationsComponent;
	static Find(Outer: UObject, ResourceName: string): VRNotificationsComponent;
	static GetDefaultObject(): VRNotificationsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRNotificationsComponent;
	static C(Other: UObject | any): VRNotificationsComponent;
}

declare class XRAssetFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): XRAssetFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): XRAssetFunctionLibrary;
	static GetDefaultObject(): XRAssetFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): XRAssetFunctionLibrary;
	static AddNamedDeviceVisualizationComponentBlocking(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
	static AddDeviceVisualizationComponentBlocking(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
	static C(Other: UObject | any): XRAssetFunctionLibrary;
}

declare class AsyncTask_LoadXRDeviceVisComponent extends BlueprintAsyncActionBase { 
	OnModelLoaded: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
	OnLoadFailure: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
	SpawnedComponent: PrimitiveComponent;
	static Load(ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
	static Find(Outer: UObject, ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
	static GetDefaultObject(): AsyncTask_LoadXRDeviceVisComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncTask_LoadXRDeviceVisComponent;
	static AddNamedDeviceVisualizationComponentAsync(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId,NewComponent?: PrimitiveComponent): {XRDeviceId: XRDeviceId, NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
	static AddDeviceVisualizationComponentAsync(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform,NewComponent?: PrimitiveComponent): {NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
	static C(Other: UObject | any): AsyncTask_LoadXRDeviceVisComponent;
}

declare class XRLoadingScreenFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): XRLoadingScreenFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): XRLoadingScreenFunctionLibrary;
	static GetDefaultObject(): XRLoadingScreenFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): XRLoadingScreenFunctionLibrary;
	static ShowLoadingScreen(): void;
	static SetLoadingScreen(Texture: Texture,Scale: Vector2D,Offset: Vector,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
	static HideLoadingScreen(): void;
	static ClearLoadingScreenSplashes(): void;
	static AddLoadingScreenSplash(Texture: Texture,Translation: Vector,Rotation: Rotator,Size: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
	static C(Other: UObject | any): XRLoadingScreenFunctionLibrary;
}

declare class SoundNode extends UObject { 
	ChildNodes: SoundNode[];
	GraphNode: EdGraphNode;
	static Load(ResourceName: string): SoundNode;
	static Find(Outer: UObject, ResourceName: string): SoundNode;
	static GetDefaultObject(): SoundNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNode;
	static C(Other: UObject | any): SoundNode;
}

declare class SoundCue extends SoundBase { 
	bPrimeOnLoad: boolean;
	FirstNode: SoundNode;
	VolumeMultiplier: number;
	PitchMultiplier: number;
	AttenuationOverrides: SoundAttenuationSettings;
	AllNodes: SoundNode[];
	SoundCueGraph: EdGraph;
	SubtitlePriority: number;
	bOverrideAttenuation: boolean;
	bExcludeFromRandomNodeBranchCulling: boolean;
	CookedQualityIndex: number;
	bHasPlayWhenSilent: boolean;
	static Load(ResourceName: string): SoundCue;
	static Find(Outer: UObject, ResourceName: string): SoundCue;
	static GetDefaultObject(): SoundCue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCue;
	static C(Other: UObject | any): SoundCue;
	PrimeSoundCueForPlayback(): void;
	static PrimeSoundCueForPlayback(SoundCue: SoundCue): void;
}

declare class VREditorAssetContainer extends DataAsset { 
	DockableWindowCloseSound: SoundBase;
	DockableWindowOpenSound: SoundBase;
	DockableWindowDropSound: SoundBase;
	DockableWindowDragSound: SoundBase;
	DropFromContentBrowserSound: SoundBase;
	RadialMenuOpenSound: SoundBase;
	RadialMenuCloseSound: SoundBase;
	TeleportSound: SoundBase;
	ButtonPressSound: SoundCue;
	AutoScaleSound: SoundBase;
	GenericHMDMesh: StaticMesh;
	PlaneMesh: StaticMesh;
	CylinderMesh: StaticMesh;
	LaserPointerStartMesh: StaticMesh;
	LaserPointerMesh: StaticMesh;
	LaserPointerEndMesh: StaticMesh;
	LaserPointerHoverMesh: StaticMesh;
	VivePreControllerMesh: StaticMesh;
	OculusControllerMesh: StaticMesh;
	GenericControllerMesh: StaticMesh;
	TeleportRootMesh: StaticMesh;
	WindowMesh: StaticMesh;
	WindowSelectionBarMesh: StaticMesh;
	WindowCloseButtonMesh: StaticMesh;
	RadialMenuMainMesh: StaticMesh;
	RadialMenuPointerMesh: StaticMesh;
	PointerCursorMesh: StaticMesh;
	LineSegmentCylinderMesh: StaticMesh;
	JointSphereMesh: StaticMesh;
	DockingButtonMesh: StaticMesh;
	GridMaterial: MaterialInterface;
	LaserPointerMaterial: MaterialInterface;
	LaserPointerTranslucentMaterial: MaterialInterface;
	WorldMovementPostProcessMaterial: Material;
	TextMaterial: MaterialInterface;
	VivePreControllerMaterial: MaterialInterface;
	OculusControllerMaterial: MaterialInterface;
	TeleportMaterial: MaterialInterface;
	WindowMaterial: MaterialInterface;
	WindowTranslucentMaterial: MaterialInterface;
	LineMaterial: Material;
	TranslucentTextMaterial: MaterialInterface;
	TextFont: Font;
	static Load(ResourceName: string): VREditorAssetContainer;
	static Find(Outer: UObject, ResourceName: string): VREditorAssetContainer;
	static GetDefaultObject(): VREditorAssetContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAssetContainer;
	static C(Other: UObject | any): VREditorAssetContainer;
}

declare class EditorWorldExtensionActorData { 
	Actor: Actor;
	bValidForPIE: boolean;
	clone() : EditorWorldExtensionActorData;
	static C(Other: UObject | any): EditorWorldExtensionActorData;
}

declare class EditorWorldExtension extends UObject { 
	ExtensionActors: EditorWorldExtensionActorData[];
	static Load(ResourceName: string): EditorWorldExtension;
	static Find(Outer: UObject, ResourceName: string): EditorWorldExtension;
	static GetDefaultObject(): EditorWorldExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtension;
	static C(Other: UObject | any): EditorWorldExtension;
}

declare type EHorizTextAligment = 'EHTA_Left' | 'EHTA_Center' | 'EHTA_Right' | 'EHTA_MAX';
declare var EHorizTextAligment : { EHTA_Left:'EHTA_Left',EHTA_Center:'EHTA_Center',EHTA_Right:'EHTA_Right',EHTA_MAX:'EHTA_MAX', };
declare type EVerticalTextAligment = 'EVRTA_TextTop' | 'EVRTA_TextCenter' | 'EVRTA_TextBottom' | 'EVRTA_QuadTop' | 'EVRTA_MAX';
declare var EVerticalTextAligment : { EVRTA_TextTop:'EVRTA_TextTop',EVRTA_TextCenter:'EVRTA_TextCenter',EVRTA_TextBottom:'EVRTA_TextBottom',EVRTA_QuadTop:'EVRTA_QuadTop',EVRTA_MAX:'EVRTA_MAX', };
declare class TextRenderComponent extends PrimitiveComponent { 
	text: string;
	TextMaterial: MaterialInterface;
	Font: Font;
	HorizontalAlignment: EHorizTextAligment;
	VerticalAlignment: EVerticalTextAligment;
	TextRenderColor: Color;
	XScale: number;
	YScale: number;
	WorldSize: number;
	InvDefaultSize: number;
	HorizSpacingAdjust: number;
	VertSpacingAdjust: number;
	bAlwaysRenderAsText: boolean;
	static Load(ResourceName: string): TextRenderComponent;
	static Find(Outer: UObject, ResourceName: string): TextRenderComponent;
	static GetDefaultObject(): TextRenderComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderComponent;
	SetYScale(Value: number): void;
	SetXScale(Value: number): void;
	SetWorldSize(Value: number): void;
	SetVertSpacingAdjust(Value: number): void;
	SetVerticalAlignment(Value: EVerticalTextAligment): void;
	SetTextRenderColor(Value: Color): void;
	SetTextMaterial(Material: MaterialInterface): void;
	SetText(Value: string): void;
	SetHorizSpacingAdjust(Value: number): void;
	SetHorizontalAlignment(Value: EHorizTextAligment): void;
	SetFont(Value: Font): void;
	K2_SetText(Value: string): void;
	GetTextWorldSize(): Vector;
	GetTextLocalSize(): Vector;
	static C(Other: UObject | any): TextRenderComponent;
}

declare class PostProcessComponent extends SceneComponent { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	static Load(ResourceName: string): PostProcessComponent;
	static Find(Outer: UObject, ResourceName: string): PostProcessComponent;
	static GetDefaultObject(): PostProcessComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessComponent;
	static C(Other: UObject | any): PostProcessComponent;
}

declare class VREditorAvatarActor extends Actor { 
	HeadMeshComponent: StaticMeshComponent;
	WorldMovementGridMeshComponent: StaticMeshComponent;
	WorldMovementGridMID: MaterialInstanceDynamic;
	WorldMovementGridOpacity: number;
	bIsDrawingWorldMovementPostProcess: boolean;
	WorldMovementPostProcessMaterial: MaterialInstanceDynamic;
	ScaleProgressMeshComponent: StaticMeshComponent;
	CurrentScaleProgressMeshComponent: StaticMeshComponent;
	UserScaleIndicatorText: TextRenderComponent;
	FixedUserScaleMID: MaterialInstanceDynamic;
	TranslucentFixedUserScaleMID: MaterialInstanceDynamic;
	CurrentUserScaleMID: MaterialInstanceDynamic;
	TranslucentCurrentUserScaleMID: MaterialInstanceDynamic;
	PostProcessComponent: PostProcessComponent;
	VRMode: VREditorMode;
	static GetDefaultObject(): VREditorAvatarActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAvatarActor;
	static C(Other: UObject | any): VREditorAvatarActor;
}

declare class VREditorBaseActor extends Actor { 
	VRMode: VREditorMode;
	static GetDefaultObject(): VREditorBaseActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseActor;
	static C(Other: UObject | any): VREditorBaseActor;
}

declare class VREditorFloatingUICreationContext { 
	WidgetClass: UnrealEngineClass;
	PanelID: string;
	ParentActor: Actor;
	PanelSpawnOffset: Transform;
	PanelSize: Vector2D;
	PanelMesh: StaticMesh;
	EditorUISize: number;
	bHideWindowHandles: boolean;
	bMaskOutWidgetBackground: boolean;
	bNoCloseButton: boolean;
	clone() : VREditorFloatingUICreationContext;
	static C(Other: UObject | any): VREditorFloatingUICreationContext;
}

declare type EWidgetSpace = 'World' | 'Screen' | 'EWidgetSpace_MAX';
declare var EWidgetSpace : { World:'World',Screen:'Screen',EWidgetSpace_MAX:'EWidgetSpace_MAX', };
declare type EWidgetTimingPolicy = 'RealTime' | 'GameTime' | 'EWidgetTimingPolicy_MAX';
declare var EWidgetTimingPolicy : { RealTime:'RealTime',GameTime:'GameTime',EWidgetTimingPolicy_MAX:'EWidgetTimingPolicy_MAX', };
declare type EWindowVisibility = 'Visible' | 'SelfHitTestInvisible' | 'EWindowVisibility_MAX';
declare var EWindowVisibility : { Visible:'Visible',SelfHitTestInvisible:'SelfHitTestInvisible',EWindowVisibility_MAX:'EWindowVisibility_MAX', };
declare type EWidgetBlendMode = 'Opaque' | 'Masked' | 'Transparent' | 'EWidgetBlendMode_MAX';
declare var EWidgetBlendMode : { Opaque:'Opaque',Masked:'Masked',Transparent:'Transparent',EWidgetBlendMode_MAX:'EWidgetBlendMode_MAX', };
declare type EWidgetGeometryMode = 'Plane' | 'Cylinder' | 'EWidgetGeometryMode_MAX';
declare var EWidgetGeometryMode : { Plane:'Plane',Cylinder:'Cylinder',EWidgetGeometryMode_MAX:'EWidgetGeometryMode_MAX', };
declare type ETickMode = 'Disabled' | 'Enabled' | 'Automatic' | 'ETickMode_MAX';
declare var ETickMode : { Disabled:'Disabled',Enabled:'Enabled',Automatic:'Automatic',ETickMode_MAX:'ETickMode_MAX', };
declare class WidgetComponent extends MeshComponent { 
	Space: EWidgetSpace;
	TimingPolicy: EWidgetTimingPolicy;
	WidgetClass: UnrealEngineClass;
	DrawSize: IntPoint;
	bManuallyRedraw: boolean;
	bRedrawRequested: boolean;
	RedrawTime: number;
	CurrentDrawSize: IntPoint;
	bDrawAtDesiredSize: boolean;
	Pivot: Vector2D;
	bReceiveHardwareInput: boolean;
	bWindowFocusable: boolean;
	WindowVisibility: EWindowVisibility;
	bApplyGammaCorrection: boolean;
	OwnerPlayer: LocalPlayer;
	BackgroundColor: LinearColor;
	TintColorAndOpacity: LinearColor;
	OpacityFromTexture: number;
	BlendMode: EWidgetBlendMode;
	bIsTwoSided: boolean;
	TickWhenOffscreen: boolean;
	BodySetup: BodySetup;
	TranslucentMaterial: MaterialInterface;
	TranslucentMaterial_OneSided: MaterialInterface;
	OpaqueMaterial: MaterialInterface;
	OpaqueMaterial_OneSided: MaterialInterface;
	MaskedMaterial: MaterialInterface;
	MaskedMaterial_OneSided: MaterialInterface;
	RenderTarget: TextureRenderTarget2D;
	MaterialInstance: MaterialInstanceDynamic;
	bAddedToScreen: boolean;
	bEditTimeUsable: boolean;
	SharedLayerName: string;
	LayerZOrder: number;
	GeometryMode: EWidgetGeometryMode;
	CylinderArcAngle: number;
	TickMode: ETickMode;
	Widget: UserWidget;
	static Load(ResourceName: string): WidgetComponent;
	static Find(Outer: UObject, ResourceName: string): WidgetComponent;
	static GetDefaultObject(): WidgetComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetComponent;
	SetWindowVisibility(InVisibility: EWindowVisibility): void;
	SetWindowFocusable(bInWindowFocusable: boolean): void;
	SetWidgetSpace(NewSpace: EWidgetSpace): void;
	SetWidget(Widget: UserWidget): void;
	SetTwoSided(bWantTwoSided: boolean): void;
	SetTintColorAndOpacity(NewTintColorAndOpacity: LinearColor): void;
	SetTickWhenOffscreen(bWantTickWhenOffscreen: boolean): void;
	SetTickMode(InTickMode: ETickMode): void;
	SetRedrawTime(InRedrawTime: number): void;
	SetPivot(InPivot: Vector2D): void;
	SetOwnerPlayer(LocalPlayer: LocalPlayer): void;
	SetManuallyRedraw(bUseManualRedraw: boolean): void;
	SetGeometryMode(InGeometryMode: EWidgetGeometryMode): void;
	SetDrawSize(Size: Vector2D): void;
	SetDrawAtDesiredSize(bInDrawAtDesiredSize: boolean): void;
	SetCylinderArcAngle(InCylinderArcAngle: number): void;
	SetBackgroundColor(NewBackgroundColor: LinearColor): void;
	RequestRedraw(): void;
	IsWidgetVisible(): boolean;
	GetWindowVisiblility(): EWindowVisibility;
	GetWindowFocusable(): boolean;
	GetWidgetSpace(): EWidgetSpace;
	GetWidget(): UserWidget;
	GetUserWidgetObject(): UserWidget;
	GetTwoSided(): boolean;
	GetTickWhenOffscreen(): boolean;
	GetRenderTarget(): TextureRenderTarget2D;
	GetRedrawTime(): number;
	GetPivot(): Vector2D;
	GetOwnerPlayer(): LocalPlayer;
	GetMaterialInstance(): MaterialInstanceDynamic;
	GetManuallyRedraw(): boolean;
	GetGeometryMode(): EWidgetGeometryMode;
	GetDrawSize(): Vector2D;
	GetDrawAtDesiredSize(): boolean;
	GetCylinderArcAngle(): number;
	GetCurrentDrawSize(): Vector2D;
	static C(Other: UObject | any): WidgetComponent;
}

declare type EVREditorWidgetDrawingPolicy = 'Always' | 'Hovering' | 'EVREditorWidgetDrawingPolicy_MAX';
declare var EVREditorWidgetDrawingPolicy : { Always:'Always',Hovering:'Hovering',EVREditorWidgetDrawingPolicy_MAX:'EVREditorWidgetDrawingPolicy_MAX', };
declare class VREditorWidgetComponent extends WidgetComponent { 
	DrawingPolicy: EVREditorWidgetDrawingPolicy;
	bIsHovering: boolean;
	bHasEverDrawn: boolean;
	static Load(ResourceName: string): VREditorWidgetComponent;
	static Find(Outer: UObject, ResourceName: string): VREditorWidgetComponent;
	static GetDefaultObject(): VREditorWidgetComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWidgetComponent;
	static C(Other: UObject | any): VREditorWidgetComponent;
}

declare class VREditorFloatingUI extends VREditorBaseActor { 
	CreationContext: VREditorFloatingUICreationContext;
	UserWidget: UserWidget;
	WidgetComponent: VREditorWidgetComponent;
	WindowMeshComponent: StaticMeshComponent;
	UserWidgetClass: UnrealEngineClass;
	static GetDefaultObject(): VREditorFloatingUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingUI;
	static C(Other: UObject | any): VREditorFloatingUI;
}

declare class VREditorRadialFloatingUI extends VREditorBaseActor { 
	WidgetComponents: VREditorWidgetComponent[];
	WindowMeshComponent: StaticMeshComponent;
	ArrowMeshComponent: StaticMeshComponent;
	CentralWidgetComponent: VREditorWidgetComponent;
	static GetDefaultObject(): VREditorRadialFloatingUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRadialFloatingUI;
	static C(Other: UObject | any): VREditorRadialFloatingUI;
}

declare class ViewportDragOperation extends UObject { 
	static Load(ResourceName: string): ViewportDragOperation;
	static Find(Outer: UObject, ResourceName: string): ViewportDragOperation;
	static GetDefaultObject(): ViewportDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperation;
	static C(Other: UObject | any): ViewportDragOperation;
}

declare class ViewportDragOperationComponent extends ActorComponent { 
	DragOperation: ViewportDragOperation;
	DragOperationSubclass: UnrealEngineClass;
	static Load(ResourceName: string): ViewportDragOperationComponent;
	static Find(Outer: UObject, ResourceName: string): ViewportDragOperationComponent;
	static GetDefaultObject(): ViewportDragOperationComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperationComponent;
	static C(Other: UObject | any): ViewportDragOperationComponent;
}

declare class VREditorDockableWindow extends VREditorFloatingUI { 
	DockButtonMeshComponent: StaticMeshComponent;
	SelectionBarMeshComponent: StaticMeshComponent;
	CloseButtonMeshComponent: StaticMeshComponent;
	DockButtonMID: MaterialInstanceDynamic;
	SelectionBarMID: MaterialInstanceDynamic;
	SelectionBarTranslucentMID: MaterialInstanceDynamic;
	CloseButtonMID: MaterialInstanceDynamic;
	CloseButtonTranslucentMID: MaterialInstanceDynamic;
	DragOperationComponent: ViewportDragOperationComponent;
	static GetDefaultObject(): VREditorDockableWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableWindow;
	static C(Other: UObject | any): VREditorDockableWindow;
}

declare class ViewportTransformer extends UObject { 
	ViewportWorldInteraction: ViewportWorldInteraction;
	static Load(ResourceName: string): ViewportTransformer;
	static Find(Outer: UObject, ResourceName: string): ViewportTransformer;
	static GetDefaultObject(): ViewportTransformer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportTransformer;
	Shutdown(): void;
	ShouldCenterTransformGizmoPivot(): boolean;
	OnStopDragging(Interactor: ViewportInteractor): void;
	OnStartDragging(Interactor: ViewportInteractor): void;
	Init(InitViewportWorldInteraction: ViewportWorldInteraction): void;
	CanAlignToActors(): boolean;
	static C(Other: UObject | any): ViewportTransformer;
}

declare class GizmoHandle { 
	clone() : GizmoHandle;
	static C(Other: UObject | any): GizmoHandle;
}

declare class GizmoHandleGroup extends SceneComponent { 
	GizmoMaterial: MaterialInterface;
	TranslucentGizmoMaterial: MaterialInterface;
	Handles: GizmoHandle[];
	OwningTransformGizmoActor: BaseTransformGizmo;
	DragOperationComponent: ViewportDragOperationComponent;
	static Load(ResourceName: string): GizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): GizmoHandleGroup;
	static GetDefaultObject(): GizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleGroup;
	static C(Other: UObject | any): GizmoHandleGroup;
}

declare class BaseTransformGizmo extends Actor { 
	SceneComponent: SceneComponent;
	AllHandleGroups: GizmoHandleGroup[];
	WorldInteraction: ViewportWorldInteraction;
	static GetDefaultObject(): BaseTransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseTransformGizmo;
	static C(Other: UObject | any): BaseTransformGizmo;
}

declare class MouseCursorInteractor extends ViewportInteractor { 
	static Load(ResourceName: string): MouseCursorInteractor;
	static Find(Outer: UObject, ResourceName: string): MouseCursorInteractor;
	static GetDefaultObject(): MouseCursorInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseCursorInteractor;
	static C(Other: UObject | any): MouseCursorInteractor;
}

declare class ViewportInteractionAssetContainer extends DataAsset { 
	GizmoHandleSelectedSound: SoundBase;
	GizmoHandleDropSound: SoundBase;
	SelectionChangeSound: SoundBase;
	SelectionDropSound: SoundBase;
	SelectionStartDragSound: SoundBase;
	GridSnapSound: SoundBase;
	ActorSnapSound: SoundBase;
	UndoSound: SoundBase;
	RedoSound: SoundBase;
	GridMesh: StaticMesh;
	TranslationHandleMesh: StaticMesh;
	UniformScaleHandleMesh: StaticMesh;
	ScaleHandleMesh: StaticMesh;
	PlaneTranslationHandleMesh: StaticMesh;
	RotationHandleMesh: StaticMesh;
	RotationHandleSelectedMesh: StaticMesh;
	StartRotationIndicatorMesh: StaticMesh;
	CurrentRotationIndicatorMesh: StaticMesh;
	FreeRotationHandleMesh: StaticMesh;
	GridMaterial: MaterialInterface;
	TransformGizmoMaterial: MaterialInterface;
	TranslucentTransformGizmoMaterial: MaterialInterface;
	static Load(ResourceName: string): ViewportInteractionAssetContainer;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractionAssetContainer;
	static GetDefaultObject(): ViewportInteractionAssetContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractionAssetContainer;
	static C(Other: UObject | any): ViewportInteractionAssetContainer;
}

declare class ViewportWorldInteraction extends EditorWorldExtension { 
	Interactors: ViewportInteractor[];
	ViewportTransformer: ViewportTransformer;
	TransformGizmoActor: BaseTransformGizmo;
	SnapGridActor: Actor;
	SnapGridMeshComponent: StaticMeshComponent;
	SnapGridMID: MaterialInstanceDynamic;
	DefaultMouseCursorInteractor: MouseCursorInteractor;
	ActorsToExcludeFromHitTest: any[];
	AssetContainer: ViewportInteractionAssetContainer;
	static Load(ResourceName: string): ViewportWorldInteraction;
	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteraction;
	static GetDefaultObject(): ViewportWorldInteraction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteraction;
	SetWorldToMetersScale(NewWorldToMetersScale: number,bCompensateRoomWorldScale: boolean): void;
	SetRoomTransformForNextFrame(NewRoomTransform: Transform): void;
	SetHeadTransform(NewHeadTransform: Transform): void;
	RemoveInteractor(Interactor: ViewportInteractor): void;
	GetWorldScaleFactor(): number;
	GetTransformGizmoActor(): BaseTransformGizmo;
	GetRoomTransform(): Transform;
	GetRoomSpaceHeadTransform(): Transform;
	GetInteractors(): ViewportInteractor[];
	GetHeadTransform(): Transform;
	AddInteractor(Interactor: ViewportInteractor): void;
	AddActorToExcludeFromHitTests(ActorToExcludeFromHitTests: Actor): void;
	static C(Other: UObject | any): ViewportWorldInteraction;
}

declare type EHitResultGizmoFilterMode = 'All' | 'NoGizmos' | 'GizmosOnly' | 'EHitResultGizmoFilterMode_MAX';
declare var EHitResultGizmoFilterMode : { All:'All',NoGizmos:'NoGizmos',GizmosOnly:'GizmosOnly',EHitResultGizmoFilterMode_MAX:'EHitResultGizmoFilterMode_MAX', };
declare type EViewportInteractionDraggingMode = 'Nothing' | 'TransformablesWithGizmo' | 'TransformablesAtLaserImpact' | 'AssistingDrag' | 'TransformablesFreely' | 'World' | 'Interactable' | 'Material' | 'EViewportInteractionDraggingMode_MAX';
declare var EViewportInteractionDraggingMode : { Nothing:'Nothing',TransformablesWithGizmo:'TransformablesWithGizmo',TransformablesAtLaserImpact:'TransformablesAtLaserImpact',AssistingDrag:'AssistingDrag',TransformablesFreely:'TransformablesFreely',World:'World',Interactable:'Interactable',Material:'Material',EViewportInteractionDraggingMode_MAX:'EViewportInteractionDraggingMode_MAX', };
declare class ViewportActionKeyInput { 
	ActionType: string;
	Event: EInputEvent;
	bIsInputCaptured: boolean;
	clone() : ViewportActionKeyInput;
	static C(Other: UObject | any): ViewportActionKeyInput;
}

declare class ViewportInteractor extends UObject { 
	KeyToActionMap: any;
	WorldInteraction: ViewportWorldInteraction;
	OtherInteractor: ViewportInteractor;
	static Load(ResourceName: string): ViewportInteractor;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractor;
	static GetDefaultObject(): ViewportInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractor;
	Tick(DeltaTime: number): void;
	Shutdown(): void;
	SetHitResultGizmoFilterMode(newFilter: EHitResultGizmoFilterMode): void;
	SetDraggingMode(NewDraggingMode: EViewportInteractionDraggingMode): void;
	SetCanCarry(bInCanCarry: boolean): void;
	IsHoveringOverGizmo(): boolean;
	HandleInputKey_BP(Action: ViewportActionKeyInput,Key: Key,Event: EInputEvent,bOutWasHandled?: boolean): {bOutWasHandled: boolean};
	HandleInputAxis_BP(Action: ViewportActionKeyInput,Key: Key,Delta: number,DeltaTime: number,bOutWasHandled?: boolean): {bOutWasHandled: boolean};
	GetWorldInteraction(): ViewportWorldInteraction;
	GetTransformAndForwardVector(OutHandTransform?: Transform,OutForwardVector?: Vector): {OutHandTransform: Transform, OutForwardVector: Vector, $: boolean};
	GetTransform(): Transform;
	GetRoomSpaceTransform(): Transform;
	GetOtherInteractor(): ViewportInteractor;
	GetLastTransform(): Transform;
	GetLastRoomSpaceTransform(): Transform;
	GetLaserPointer(LaserPointerStart?: Vector,LaserPointerEnd?: Vector,bEvenIfBlocked?: boolean,LaserLengthOverride?: number): {LaserPointerStart: Vector, LaserPointerEnd: Vector, $: boolean};
	GetHoverLocation(): Vector;
	GetHitResultGizmoFilterMode(): EHitResultGizmoFilterMode;
	GetDraggingMode(): EViewportInteractionDraggingMode;
	CanCarry(): boolean;
	static C(Other: UObject | any): ViewportInteractor;
}

declare class InterpCurvePointQuat { 
	InVal: number;
	OutVal: Quat;
	ArriveTangent: Quat;
	LeaveTangent: Quat;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointQuat;
	static C(Other: UObject | any): InterpCurvePointQuat;
}

declare class InterpCurveQuat { 
	Points: InterpCurvePointQuat[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveQuat;
	static C(Other: UObject | any): InterpCurveQuat;
}

declare class InterpCurvePointFloat { 
	InVal: number;
	OutVal: number;
	ArriveTangent: number;
	LeaveTangent: number;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointFloat;
	static C(Other: UObject | any): InterpCurvePointFloat;
}

declare class InterpCurveFloat { 
	Points: InterpCurvePointFloat[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveFloat;
	static C(Other: UObject | any): InterpCurveFloat;
}

declare class SplineMetadata extends UObject { 
	static Load(ResourceName: string): SplineMetadata;
	static Find(Outer: UObject, ResourceName: string): SplineMetadata;
	static GetDefaultObject(): SplineMetadata;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMetadata;
	static C(Other: UObject | any): SplineMetadata;
}

declare class SplineCurves { 
	Position: InterpCurveVector;
	Rotation: InterpCurveQuat;
	Scale: InterpCurveVector;
	ReparamTable: InterpCurveFloat;
	MetaData: SplineMetadata;
	Version: any;
	clone() : SplineCurves;
	static C(Other: UObject | any): SplineCurves;
}

declare type ESplineCoordinateSpace = 'Local' | 'World' | 'ESplineCoordinateSpace_MAX';
declare var ESplineCoordinateSpace : { Local:'Local',World:'World',ESplineCoordinateSpace_MAX:'ESplineCoordinateSpace_MAX', };
declare type ESplinePointType = 'Linear' | 'Curve' | 'Constant' | 'CurveClamped' | 'CurveCustomTangent' | 'ESplinePointType_MAX';
declare var ESplinePointType : { Linear:'Linear',Curve:'Curve',Constant:'Constant',CurveClamped:'CurveClamped',CurveCustomTangent:'CurveCustomTangent',ESplinePointType_MAX:'ESplinePointType_MAX', };
declare class SplinePoint { 
	InputKey: number;
	Position: Vector;
	ArriveTangent: Vector;
	LeaveTangent: Vector;
	Rotation: Rotator;
	Scale: Vector;
	Type: ESplinePointType;
	clone() : SplinePoint;
	static C(Other: UObject | any): SplinePoint;
}

declare class SplineComponent extends PrimitiveComponent { 
	SplineCurves: SplineCurves;
	SplineInfo: InterpCurveVector;
	SplineRotInfo: InterpCurveQuat;
	SplineScaleInfo: InterpCurveVector;
	SplineReparamTable: InterpCurveFloat;
	bAllowSplineEditingPerInstance: boolean;
	ReparamStepsPerSegment: number;
	Duration: number;
	bStationaryEndpoints: boolean;
	bSplineHasBeenEdited: boolean;
	bModifiedByConstructionScript: boolean;
	bInputSplinePointsToConstructionScript: boolean;
	bDrawDebug: boolean;
	bClosedLoop: boolean;
	bLoopPositionOverride: boolean;
	LoopPosition: number;
	DefaultUpVector: Vector;
	EditorUnselectedSplineSegmentColor: LinearColor;
	EditorSelectedSplineSegmentColor: LinearColor;
	EditorTangentColor: LinearColor;
	bAllowDiscontinuousSpline: boolean;
	bShouldVisualizeScale: boolean;
	ScaleVisualizationWidth: number;
	static Load(ResourceName: string): SplineComponent;
	static Find(Outer: UObject, ResourceName: string): SplineComponent;
	static GetDefaultObject(): SplineComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineComponent;
	UpdateSpline(): void;
	SetWorldLocationAtSplinePoint(PointIndex: number,InLocation: Vector): void;
	SetUpVectorAtSplinePoint(PointIndex: number,InUpVector: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	SetUnselectedSplineSegmentColor(SegmentColor: LinearColor): void;
	SetTangentsAtSplinePoint(PointIndex: number,InArriveTangent: Vector,InLeaveTangent: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	SetTangentColor(TangentColor: LinearColor): void;
	SetTangentAtSplinePoint(PointIndex: number,InTangent: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	SetSplineWorldPoints(Points: Vector[]): void;
	SetSplinePointType(PointIndex: number,Type: ESplinePointType,bUpdateSpline: boolean): void;
	SetSplinePoints(Points: Vector[],CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	SetSplineLocalPoints(Points: Vector[]): void;
	SetSelectedSplineSegmentColor(SegmentColor: LinearColor): void;
	SetScaleAtSplinePoint(PointIndex: number,InScaleVector: Vector,bUpdateSpline: boolean): void;
	SetRotationAtSplinePoint(PointIndex: number,InRotation: Rotator,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	SetLocationAtSplinePoint(PointIndex: number,InLocation: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	SetDrawDebug(bShow: boolean): void;
	SetDefaultUpVector(UpVector: Vector,CoordinateSpace: ESplineCoordinateSpace): void;
	SetClosedLoopAtPosition(bInClosedLoop: boolean,Key: number,bUpdateSpline: boolean): void;
	SetClosedLoop(bInClosedLoop: boolean,bUpdateSpline: boolean): void;
	RemoveSplinePoint(index: number,bUpdateSpline: boolean): void;
	IsClosedLoop(): boolean;
	GetWorldTangentAtDistanceAlongSpline(Distance: number): Vector;
	GetWorldRotationAtTime(Time: number,bUseConstantVelocity: boolean): Rotator;
	GetWorldRotationAtDistanceAlongSpline(Distance: number): Rotator;
	GetWorldLocationAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
	GetWorldLocationAtSplinePoint(PointIndex: number): Vector;
	GetWorldLocationAtDistanceAlongSpline(Distance: number): Vector;
	GetWorldDirectionAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
	GetWorldDirectionAtDistanceAlongSpline(Distance: number): Vector;
	GetVectorPropertyAtSplinePoint(index: number,PropertyName: string): Vector;
	GetVectorPropertyAtSplineInputKey(InKey: number,PropertyName: string): Vector;
	GetUpVectorAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
	GetUpVectorAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetUpVectorAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetUpVectorAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetTransformAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean,bUseScale: boolean): Transform;
	GetTransformAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
	GetTransformAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
	GetTransformAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
	GetTangentAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
	GetTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetTangentAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetTangentAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetSplinePointType(PointIndex: number): ESplinePointType;
	GetSplineLength(): number;
	GetScaleAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
	GetScaleAtSplinePoint(PointIndex: number): Vector;
	GetScaleAtSplineInputKey(InKey: number): Vector;
	GetScaleAtDistanceAlongSpline(Distance: number): Vector;
	GetRotationAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Rotator;
	GetRotationAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
	GetRotationAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
	GetRotationAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
	GetRollAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): number;
	GetRollAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): number;
	GetRollAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): number;
	GetRollAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): number;
	GetRightVectorAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
	GetRightVectorAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetRightVectorAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetRightVectorAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetNumberOfSplineSegments(): number;
	GetNumberOfSplinePoints(): number;
	GetLocationAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
	GetLocationAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetLocationAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetLocationAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetLocationAndTangentAtSplinePoint(PointIndex: number,Location?: Vector,Tangent?: Vector,CoordinateSpace?: ESplineCoordinateSpace): {Location: Vector, Tangent: Vector};
	GetLocalLocationAndTangentAtSplinePoint(PointIndex: number,LocalLocation?: Vector,LocalTangent?: Vector): {LocalLocation: Vector, LocalTangent: Vector};
	GetLeaveTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetInputKeyAtDistanceAlongSpline(Distance: number): number;
	GetFloatPropertyAtSplinePoint(index: number,PropertyName: string): number;
	GetFloatPropertyAtSplineInputKey(InKey: number,PropertyName: string): number;
	GetDistanceAlongSplineAtSplinePoint(PointIndex: number): number;
	GetDistanceAlongSplineAtSplineInputKey(InKey: number): number;
	GetDirectionAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
	GetDirectionAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetDirectionAtSplineInputKey(InKey: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetDirectionAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetDefaultUpVector(CoordinateSpace: ESplineCoordinateSpace): Vector;
	GetArriveTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
	FindUpVectorClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
	FindTransformClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
	FindTangentClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
	FindScaleClosestToWorldLocation(WorldLocation: Vector): Vector;
	FindRotationClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Rotator;
	FindRollClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): number;
	FindRightVectorClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
	FindLocationClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
	FindInputKeyClosestToWorldLocation(WorldLocation: Vector): number;
	FindDirectionClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
	ClearSplinePoints(bUpdateSpline: boolean): void;
	AddSplineWorldPoint(Position: Vector): void;
	AddSplinePointAtIndex(Position: Vector,index: number,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	AddSplinePoint(Position: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
	AddSplineLocalPoint(Position: Vector): void;
	AddPoints(Points: SplinePoint[],bUpdateSpline: boolean): void;
	AddPoint(Point: SplinePoint,bUpdateSpline: boolean): void;
	static C(Other: UObject | any): SplineComponent;
}

declare class SplineMeshParams { 
	StartPos: Vector;
	StartTangent: Vector;
	StartScale: Vector2D;
	StartRoll: number;
	StartOffset: Vector2D;
	EndPos: Vector;
	EndScale: Vector2D;
	EndTangent: Vector;
	EndRoll: number;
	EndOffset: Vector2D;
	clone() : SplineMeshParams;
	static C(Other: UObject | any): SplineMeshParams;
}

declare type ESplineMeshAxis = 'X' | 'Y' | 'Z' | 'ESplineMeshAxis_MAX';
declare var ESplineMeshAxis : { X:'X',Y:'Y',Z:'Z',ESplineMeshAxis_MAX:'ESplineMeshAxis_MAX', };
declare class SplineMeshComponent extends StaticMeshComponent { 
	SplineParams: SplineMeshParams;
	SplineUpDir: Vector;
	SplineBoundaryMin: number;
	CachedMeshBodySetupGuid: Guid;
	BodySetup: BodySetup;
	SplineBoundaryMax: number;
	bAllowSplineEditingPerInstance: boolean;
	bSmoothInterpRollScale: boolean;
	bMeshDirty: boolean;
	ForwardAxis: ESplineMeshAxis;
	VirtualTextureMainPassMaxDrawDistance: number;
	bSelected: boolean;
	static Load(ResourceName: string): SplineMeshComponent;
	static Find(Outer: UObject, ResourceName: string): SplineMeshComponent;
	static GetDefaultObject(): SplineMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshComponent;
	UpdateMesh(): void;
	SetStartTangent(StartTangent: Vector,bUpdateMesh: boolean): void;
	SetStartScale(StartScale: Vector2D,bUpdateMesh: boolean): void;
	SetStartRoll(StartRoll: number,bUpdateMesh: boolean): void;
	SetStartPosition(StartPos: Vector,bUpdateMesh: boolean): void;
	SetStartOffset(StartOffset: Vector2D,bUpdateMesh: boolean): void;
	SetStartAndEnd(StartPos: Vector,StartTangent: Vector,EndPos: Vector,EndTangent: Vector,bUpdateMesh: boolean): void;
	SetSplineUpDir(InSplineUpDir: Vector,bUpdateMesh: boolean): void;
	SetForwardAxis(InForwardAxis: ESplineMeshAxis,bUpdateMesh: boolean): void;
	SetEndTangent(EndTangent: Vector,bUpdateMesh: boolean): void;
	SetEndScale(EndScale: Vector2D,bUpdateMesh: boolean): void;
	SetEndRoll(EndRoll: number,bUpdateMesh: boolean): void;
	SetEndPosition(EndPos: Vector,bUpdateMesh: boolean): void;
	SetEndOffset(EndOffset: Vector2D,bUpdateMesh: boolean): void;
	SetBoundaryMin(InBoundaryMin: number,bUpdateMesh: boolean): void;
	SetBoundaryMax(InBoundaryMax: number,bUpdateMesh: boolean): void;
	GetStartTangent(): Vector;
	GetStartScale(): Vector2D;
	GetStartRoll(): number;
	GetStartPosition(): Vector;
	GetStartOffset(): Vector2D;
	GetSplineUpDir(): Vector;
	GetForwardAxis(): ESplineMeshAxis;
	GetEndTangent(): Vector;
	GetEndScale(): Vector2D;
	GetEndRoll(): number;
	GetEndPosition(): Vector;
	GetEndOffset(): Vector2D;
	GetBoundaryMin(): number;
	GetBoundaryMax(): number;
	static C(Other: UObject | any): SplineMeshComponent;
}

declare class TextureLightProfile extends Texture2D { 
	Brightness: number;
	TextureMultiplier: number;
	static Load(ResourceName: string): TextureLightProfile;
	static Find(Outer: UObject, ResourceName: string): TextureLightProfile;
	static GetDefaultObject(): TextureLightProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLightProfile;
	static C(Other: UObject | any): TextureLightProfile;
}

declare class LightComponent extends LightComponentBase { 
	Temperature: number;
	MaxDrawDistance: number;
	MaxDistanceFadeRange: number;
	bUseTemperature: boolean;
	ShadowMapChannel: number;
	MinRoughness: number;
	SpecularScale: number;
	ShadowResolutionScale: number;
	ShadowBias: number;
	ShadowSlopeBias: number;
	ShadowSharpen: number;
	ContactShadowLength: number;
	ContactShadowLengthInWS: boolean;
	InverseSquaredFalloff: boolean;
	CastTranslucentShadows: boolean;
	bCastShadowsFromCinematicObjectsOnly: boolean;
	bAffectDynamicIndirectLighting: boolean;
	bForceCachedShadowsForMovablePrimitives: boolean;
	LightingChannels: LightingChannels;
	LightFunctionMaterial: MaterialInterface;
	LightFunctionScale: Vector;
	IESTexture: TextureLightProfile;
	bUseIESBrightness: boolean;
	IESBrightnessScale: number;
	LightFunctionFadeDistance: number;
	DisabledBrightness: number;
	bEnableLightShaftBloom: boolean;
	BloomScale: number;
	BloomThreshold: number;
	BloomMaxBrightness: number;
	BloomTint: Color;
	bUseRayTracedDistanceFieldShadows: boolean;
	RayStartOffsetDepthScale: number;
	static Load(ResourceName: string): LightComponent;
	static Find(Outer: UObject, ResourceName: string): LightComponent;
	static GetDefaultObject(): LightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponent;
	SetVolumetricScatteringIntensity(NewIntensity: number): void;
	SetUseIESBrightness(bNewValue: boolean): void;
	SetTransmission(bNewValue: boolean): void;
	SetTemperature(NewTemperature: number): void;
	SetSpecularScale(NewValue: number): void;
	SetShadowSlopeBias(NewValue: number): void;
	SetShadowBias(NewValue: number): void;
	SetLightingChannels(bChannel0: boolean,bChannel1: boolean,bChannel2: boolean): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightFunctionDisabledBrightness(NewValue: number): void;
	SetLightColor(NewLightColor: LinearColor,bSRGB: boolean): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetIESTexture(NewValue: TextureLightProfile): void;
	SetIESBrightnessScale(NewValue: number): void;
	SetForceCachedShadowsForMovablePrimitives(bNewValue: boolean): void;
	SetEnableLightShaftBloom(bNewValue: boolean): void;
	SetBloomTint(NewValue: Color): void;
	SetBloomThreshold(NewValue: number): void;
	SetBloomScale(NewValue: number): void;
	SetBloomMaxBrightness(NewValue: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	SetAffectDynamicIndirectLighting(bNewValue: boolean): void;
	static C(Other: UObject | any): LightComponent;
}

declare type ELightUnits = 'Unitless' | 'Candelas' | 'Lumens' | 'ELightUnits_MAX';
declare var ELightUnits : { Unitless:'Unitless',Candelas:'Candelas',Lumens:'Lumens',ELightUnits_MAX:'ELightUnits_MAX', };
declare class LightmassLightSettings { 
	IndirectLightingSaturation: number;
	ShadowExponent: number;
	bUseAreaShadowsForStationaryLight: boolean;
	clone() : LightmassLightSettings;
	static C(Other: UObject | any): LightmassLightSettings;
}

declare class LightmassPointLightSettings extends LightmassLightSettings { 
	clone() : LightmassPointLightSettings;
	static C(Other: UObject | any): LightmassPointLightSettings;
}

declare class LocalLightComponent extends LightComponent { 
	IntensityUnits: ELightUnits;
	Radius: number;
	AttenuationRadius: number;
	LightmassSettings: LightmassPointLightSettings;
	static Load(ResourceName: string): LocalLightComponent;
	static Find(Outer: UObject, ResourceName: string): LocalLightComponent;
	static GetDefaultObject(): LocalLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalLightComponent;
	SetIntensityUnits(NewIntensityUnits: ELightUnits): void;
	SetAttenuationRadius(NewRadius: number): void;
	static GetUnitsConversionFactor(SrcUnits: ELightUnits,TargetUnits: ELightUnits,CosHalfConeAngle: number): number;
	static C(Other: UObject | any): LocalLightComponent;
}

declare class PointLightComponent extends LocalLightComponent { 
	bUseInverseSquaredFalloff: boolean;
	LightFalloffExponent: number;
	SourceRadius: number;
	SoftSourceRadius: number;
	SourceLength: number;
	static Load(ResourceName: string): PointLightComponent;
	static Find(Outer: UObject, ResourceName: string): PointLightComponent;
	static GetDefaultObject(): PointLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLightComponent;
	SetSourceRadius(bNewValue: number): void;
	SetSourceLength(NewValue: number): void;
	SetSoftSourceRadius(bNewValue: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	static C(Other: UObject | any): PointLightComponent;
}

declare type EControllerType = 'Laser' | 'AssistingLaser' | 'UI' | 'Navigation' | 'Unknown' | 'EControllerType_MAX';
declare var EControllerType : { Laser:'Laser',AssistingLaser:'AssistingLaser',UI:'UI',Navigation:'Navigation',Unknown:'Unknown',EControllerType_MAX:'EControllerType_MAX', };
declare class VREditorTeleporter extends Actor { 
	VRMode: VREditorMode;
	TeleportDirectionMeshComponent: StaticMeshComponent;
	HMDMeshComponent: StaticMeshComponent;
	LeftMotionControllerMeshComponent: StaticMeshComponent;
	RightMotionControllerMeshComponent: StaticMeshComponent;
	TeleportMID: MaterialInstanceDynamic;
	InteractorTryingTeleport: ViewportInteractor;
	static GetDefaultObject(): VREditorTeleporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTeleporter;
	TeleportDone(): void;
	StopAiming(): void;
	StartTeleport(): void;
	StartAiming(Interactor: ViewportInteractor): void;
	Shutdown(): void;
	SetVisibility(bVisible: boolean): void;
	SetColor(Color: LinearColor): void;
	IsTeleporting(): boolean;
	IsAiming(): boolean;
	Init(InMode: VREditorMode): void;
	GetVRMode(): VREditorMode;
	GetSlideDelta(Interactor: VREditorInteractor,Axis: boolean): number;
	GetInteractorTryingTeleport(): ViewportInteractor;
	DoTeleport(): void;
	static C(Other: UObject | any): VREditorTeleporter;
}

declare class VREditorInteractor extends ViewportInteractor { 
	bIsUndoRedoSwipeEnabled: boolean;
	MotionControllerComponent: MotionControllerComponent;
	HandMeshComponent: StaticMeshComponent;
	LaserSplineComponent: SplineComponent;
	LaserSplineMeshComponents: SplineMeshComponent[];
	LaserPointerMID: MaterialInstanceDynamic;
	TranslucentLaserPointerMID: MaterialInstanceDynamic;
	HoverMeshComponent: StaticMeshComponent;
	HoverPointLightComponent: PointLightComponent;
	HandMeshMID: MaterialInstanceDynamic;
	OwningAvatar: Actor;
	ControllerType: EControllerType;
	OverrideControllerType: EControllerType;
	ControllerMotionSource: string;
	VRMode: VREditorMode;
	static Load(ResourceName: string): VREditorInteractor;
	static Find(Outer: UObject, ResourceName: string): VREditorInteractor;
	static GetDefaultObject(): VREditorInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorInteractor;
	TryOverrideControllerType(InControllerType: EControllerType): boolean;
	SetupComponent(OwningActor: Actor): void;
	SetForceShowLaser(bInForceShow: boolean): void;
	SetForceLaserColor(InColor: LinearColor): void;
	SetControllerType(InControllerType: EControllerType): void;
	SetControllerHandSide(InControllerHandSide: string): void;
	ReplaceHandMeshComponent(NewMesh: StaticMesh): void;
	IsTouchingTrackpad(): boolean;
	IsHoveringOverUI(): boolean;
	IsClickingOnUI(): boolean;
	Init(InVRMode: VREditorMode): void;
	GetTrackpadPosition(): Vector2D;
	GetTeleportActor(): VREditorTeleporter;
	GetSlideDelta(): number;
	GetSelectAndMoveTriggerValue(): number;
	GetMotionControllerComponent(): MotionControllerComponent;
	GetLastTrackpadPosition(): Vector2D;
	GetLaserStart(): Vector;
	GetLaserEnd(): Vector;
	GetHMDDeviceType(): string;
	GetControllerType(): EControllerType;
	GetControllerSide(): EControllerHand;
	GetControllerHandSide(): string;
	static C(Other: UObject | any): VREditorInteractor;
}

declare class VRButton { 
	ButtonWidget: VREditorWidgetComponent;
	clone() : VRButton;
	static C(Other: UObject | any): VRButton;
}

declare class VRRadialMenuHandler extends UObject { 
	static Load(ResourceName: string): VRRadialMenuHandler;
	static Find(Outer: UObject, ResourceName: string): VRRadialMenuHandler;
	static GetDefaultObject(): VRRadialMenuHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRRadialMenuHandler;
	static C(Other: UObject | any): VRRadialMenuHandler;
}

declare class VREditorUISystem extends UObject { 
	VRMode: VREditorMode;
	FloatingUIs: any;
	PreviewWindowInfo: any;
	InfoDisplayPanel: VREditorFloatingUI;
	QuickRadialMenu: VREditorRadialFloatingUI;
	DraggingUI: VREditorDockableWindow;
	ColorPickerUI: VREditorDockableWindow;
	LaserInteractor: VREditorInteractor;
	UIInteractor: VREditorInteractor;
	VRButtons: VRButton[];
	RadialMenuHandler: VRRadialMenuHandler;
	static Load(ResourceName: string): VREditorUISystem;
	static Find(Outer: UObject, ResourceName: string): VREditorUISystem;
	static GetDefaultObject(): VREditorUISystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorUISystem;
	static C(Other: UObject | any): VREditorUISystem;
}

declare class VREditorPlacement extends UObject { 
	VRMode: VREditorMode;
	ViewportWorldInteraction: ViewportWorldInteraction;
	FloatingUIAssetDraggedFrom: WidgetComponent;
	PlacingMaterialOrTextureAsset: UObject;
	static Load(ResourceName: string): VREditorPlacement;
	static Find(Outer: UObject, ResourceName: string): VREditorPlacement;
	static GetDefaultObject(): VREditorPlacement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorPlacement;
	static C(Other: UObject | any): VREditorPlacement;
}

declare class VREditorMode extends EditorWorldExtension { 
	AvatarActor: VREditorAvatarActor;
	UISystem: VREditorUISystem;
	TeleportActor: VREditorTeleporter;
	AutoScalerSystem: VREditorAutoScaler;
	WorldInteraction: ViewportWorldInteraction;
	PlacementSystem: VREditorPlacement;
	Interactors: VREditorInteractor[];
	AssetContainer: VREditorAssetContainer;
	static Load(ResourceName: string): VREditorMode;
	static Find(Outer: UObject, ResourceName: string): VREditorMode;
	static GetDefaultObject(): VREditorMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMode;
	GetWorldScaleFactor(): number;
	static C(Other: UObject | any): VREditorMode;
}

declare class VREditorAutoScaler extends UObject { 
	VRMode: VREditorMode;
	static Load(ResourceName: string): VREditorAutoScaler;
	static Find(Outer: UObject, ResourceName: string): VREditorAutoScaler;
	static GetDefaultObject(): VREditorAutoScaler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAutoScaler;
	static C(Other: UObject | any): VREditorAutoScaler;
}

declare class VREditorBaseUserWidget extends UserWidget { 
	Owner: any;
	static Load(ResourceName: string): VREditorBaseUserWidget;
	static Find(Outer: UObject, ResourceName: string): VREditorBaseUserWidget;
	static GetDefaultObject(): VREditorBaseUserWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseUserWidget;
	static C(Other: UObject | any): VREditorBaseUserWidget;
}

declare class VREditorCameraWidgetComponent extends VREditorWidgetComponent { 
	static Load(ResourceName: string): VREditorCameraWidgetComponent;
	static Find(Outer: UObject, ResourceName: string): VREditorCameraWidgetComponent;
	static GetDefaultObject(): VREditorCameraWidgetComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorCameraWidgetComponent;
	static C(Other: UObject | any): VREditorCameraWidgetComponent;
}

declare class VREditorDockableCameraWindow extends VREditorDockableWindow { 
	static GetDefaultObject(): VREditorDockableCameraWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableCameraWindow;
	static C(Other: UObject | any): VREditorDockableCameraWindow;
}

declare class DockableWindowDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): DockableWindowDragOperation;
	static Find(Outer: UObject, ResourceName: string): DockableWindowDragOperation;
	static GetDefaultObject(): DockableWindowDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DockableWindowDragOperation;
	static C(Other: UObject | any): DockableWindowDragOperation;
}

declare class VREditorFloatingCameraUI extends VREditorFloatingUI { 
	OffsetFromCamera: Vector;
	LinkedActor: any;
	static GetDefaultObject(): VREditorFloatingCameraUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingCameraUI;
	static C(Other: UObject | any): VREditorFloatingCameraUI;
}

declare class FloatingText extends Actor { 
	SceneComponent: SceneComponent;
	FirstLineComponent: StaticMeshComponent;
	JointSphereComponent: StaticMeshComponent;
	SecondLineComponent: StaticMeshComponent;
	TextComponent: TextRenderComponent;
	MaskedTextMaterial: MaterialInterface;
	TranslucentTextMaterial: MaterialInterface;
	LineMaterial: MaterialInterface;
	LineMaterialMID: MaterialInstanceDynamic;
	static GetDefaultObject(): FloatingText;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingText;
	static C(Other: UObject | any): FloatingText;
}

declare class VISettings extends UObject { 
	bScaleWorldFromFloor: boolean;
	bScaleWorldWithDynamicPivot: boolean;
	bAllowSimultaneousWorldScalingAndRotation: boolean;
	static Load(ResourceName: string): VISettings;
	static Find(Outer: UObject, ResourceName: string): VISettings;
	static GetDefaultObject(): VISettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VISettings;
	static C(Other: UObject | any): VISettings;
}

declare type EInteractorHand = 'Right' | 'Left' | 'EInteractorHand_MAX';
declare var EInteractorHand : { Right:'Right',Left:'Left',EInteractorHand_MAX:'EInteractorHand_MAX', };
declare class VRModeSettings extends VISettings { 
	bEnableAutoVREditMode: boolean;
	bAutokeySequences: boolean;
	InteractorHand: EInteractorHand;
	bShowWorldMovementGrid: boolean;
	bShowWorldMovementPostProcess: boolean;
	bShowWorldScaleProgressBar: boolean;
	UIBrightness: number;
	GizmoScale: number;
	DoubleClickTime: number;
	TriggerPressedThreshold_Vive: number;
	TriggerPressedThreshold_Rift: number;
	InteractorClass: Class;
	TeleporterClass: Class;
	static Load(ResourceName: string): VRModeSettings;
	static Find(Outer: UObject, ResourceName: string): VRModeSettings;
	static GetDefaultObject(): VRModeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRModeSettings;
	static C(Other: UObject | any): VRModeSettings;
}

declare type EGizmoHandleTypes = 'All' | 'Translate' | 'Rotate' | 'Scale' | 'EGizmoHandleTypes_MAX';
declare var EGizmoHandleTypes : { All:'All',Translate:'Translate',Rotate:'Rotate',Scale:'Scale',EGizmoHandleTypes_MAX:'EGizmoHandleTypes_MAX', };
declare class VRScoutingInteractor extends VREditorInteractor { 
	FlyingIndicatorComponent: StaticMeshComponent;
	static Load(ResourceName: string): VRScoutingInteractor;
	static Find(Outer: UObject, ResourceName: string): VRScoutingInteractor;
	static GetDefaultObject(): VRScoutingInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRScoutingInteractor;
	SetGizmoMode(InGizmoMode: EGizmoHandleTypes): void;
	static GetSelectedActors(): Actor[];
	GetGizmoMode(): EGizmoHandleTypes;
	static C(Other: UObject | any): VRScoutingInteractor;
}

declare class LevelEditorMenuContext extends UObject { 
	static Load(ResourceName: string): LevelEditorMenuContext;
	static Find(Outer: UObject, ResourceName: string): LevelEditorMenuContext;
	static GetDefaultObject(): LevelEditorMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorMenuContext;
	static C(Other: UObject | any): LevelEditorMenuContext;
}

declare class LevelEditorContextMenuContext extends UObject { 
	static Load(ResourceName: string): LevelEditorContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): LevelEditorContextMenuContext;
	static GetDefaultObject(): LevelEditorContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorContextMenuContext;
	static C(Other: UObject | any): LevelEditorContextMenuContext;
}

declare class LevelViewportToolBarContext extends UObject { 
	static Load(ResourceName: string): LevelViewportToolBarContext;
	static Find(Outer: UObject, ResourceName: string): LevelViewportToolBarContext;
	static GetDefaultObject(): LevelViewportToolBarContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelViewportToolBarContext;
	static C(Other: UObject | any): LevelViewportToolBarContext;
}

declare class ActorTransformer extends ViewportTransformer { 
	static Load(ResourceName: string): ActorTransformer;
	static Find(Outer: UObject, ResourceName: string): ActorTransformer;
	static GetDefaultObject(): ActorTransformer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorTransformer;
	static C(Other: UObject | any): ActorTransformer;
}

declare class ViewportInteractableInterface extends Interface { 
	static Load(ResourceName: string): ViewportInteractableInterface;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractableInterface;
	static GetDefaultObject(): ViewportInteractableInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractableInterface;
	static C(Other: UObject | any): ViewportInteractableInterface;
}

declare class TranslationDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): TranslationDragOperation;
	static Find(Outer: UObject, ResourceName: string): TranslationDragOperation;
	static GetDefaultObject(): TranslationDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationDragOperation;
	static C(Other: UObject | any): TranslationDragOperation;
}

declare class PlaneTranslationDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): PlaneTranslationDragOperation;
	static Find(Outer: UObject, ResourceName: string): PlaneTranslationDragOperation;
	static GetDefaultObject(): PlaneTranslationDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneTranslationDragOperation;
	static C(Other: UObject | any): PlaneTranslationDragOperation;
}

declare class RotateOnAngleDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): RotateOnAngleDragOperation;
	static Find(Outer: UObject, ResourceName: string): RotateOnAngleDragOperation;
	static GetDefaultObject(): RotateOnAngleDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotateOnAngleDragOperation;
	static C(Other: UObject | any): RotateOnAngleDragOperation;
}

declare class ScaleDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): ScaleDragOperation;
	static Find(Outer: UObject, ResourceName: string): ScaleDragOperation;
	static GetDefaultObject(): ScaleDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScaleDragOperation;
	static C(Other: UObject | any): ScaleDragOperation;
}

declare class UniformScaleDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): UniformScaleDragOperation;
	static Find(Outer: UObject, ResourceName: string): UniformScaleDragOperation;
	static GetDefaultObject(): UniformScaleDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleDragOperation;
	static C(Other: UObject | any): UniformScaleDragOperation;
}

declare class AxisGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): AxisGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): AxisGizmoHandleGroup;
	static GetDefaultObject(): AxisGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisGizmoHandleGroup;
	static C(Other: UObject | any): AxisGizmoHandleGroup;
}

declare class GizmoHandleMeshComponent extends StaticMeshComponent { 
	static Load(ResourceName: string): GizmoHandleMeshComponent;
	static Find(Outer: UObject, ResourceName: string): GizmoHandleMeshComponent;
	static GetDefaultObject(): GizmoHandleMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleMeshComponent;
	static C(Other: UObject | any): GizmoHandleMeshComponent;
}

declare class UniformScaleGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): UniformScaleGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): UniformScaleGizmoHandleGroup;
	static GetDefaultObject(): UniformScaleGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleGizmoHandleGroup;
	static C(Other: UObject | any): UniformScaleGizmoHandleGroup;
}

declare class PivotTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotTranslationGizmoHandleGroup;
	static GetDefaultObject(): PivotTranslationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTranslationGizmoHandleGroup;
	static C(Other: UObject | any): PivotTranslationGizmoHandleGroup;
}

declare class PivotScaleGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotScaleGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotScaleGizmoHandleGroup;
	static GetDefaultObject(): PivotScaleGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotScaleGizmoHandleGroup;
	static C(Other: UObject | any): PivotScaleGizmoHandleGroup;
}

declare class PivotPlaneTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
	static GetDefaultObject(): PivotPlaneTranslationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotPlaneTranslationGizmoHandleGroup;
	static C(Other: UObject | any): PivotPlaneTranslationGizmoHandleGroup;
}

declare class PivotRotationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	RootFullRotationHandleComponent: SceneComponent;
	FullRotationHandleMeshComponent: GizmoHandleMeshComponent;
	StartRotationIndicatorMeshComponent: GizmoHandleMeshComponent;
	RootStartRotationIdicatorComponent: SceneComponent;
	DeltaRotationIndicatorMeshComponent: GizmoHandleMeshComponent;
	RootDeltaRotationIndicatorComponent: SceneComponent;
	static Load(ResourceName: string): PivotRotationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotRotationGizmoHandleGroup;
	static GetDefaultObject(): PivotRotationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotRotationGizmoHandleGroup;
	static C(Other: UObject | any): PivotRotationGizmoHandleGroup;
}

declare class StretchGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): StretchGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleGroup;
	static GetDefaultObject(): StretchGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleGroup;
	static C(Other: UObject | any): StretchGizmoHandleGroup;
}

declare class PivotTransformGizmo extends BaseTransformGizmo { 
	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
	TranslationGizmoHandleGroup: PivotTranslationGizmoHandleGroup;
	ScaleGizmoHandleGroup: PivotScaleGizmoHandleGroup;
	PlaneTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup;
	RotationGizmoHandleGroup: PivotRotationGizmoHandleGroup;
	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
	LastDraggingHandle: ActorComponent;
	static GetDefaultObject(): PivotTransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTransformGizmo;
	static C(Other: UObject | any): PivotTransformGizmo;
}

declare class StretchGizmoHandleDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): StretchGizmoHandleDragOperation;
	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleDragOperation;
	static GetDefaultObject(): StretchGizmoHandleDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleDragOperation;
	static C(Other: UObject | any): StretchGizmoHandleDragOperation;
}

declare type ELocalizationTargetConflictStatus = 'Unknown' | 'ConflictsPresent' | 'Clear' | 'ELocalizationTargetConflictStatus_MAX';
declare var ELocalizationTargetConflictStatus : { Unknown:'Unknown',ConflictsPresent:'ConflictsPresent',Clear:'Clear',ELocalizationTargetConflictStatus_MAX:'ELocalizationTargetConflictStatus_MAX', };
declare class FilePath { 
	FilePath: string;
	clone() : FilePath;
	static C(Other: UObject | any): FilePath;
}

declare type ELocalizationGatherPathRoot = 'Auto' | 'Engine' | 'Project' | 'ELocalizationGatherPathRoot_MAX';
declare var ELocalizationGatherPathRoot : { Auto:'Auto',Engine:'Engine',Project:'Project',ELocalizationGatherPathRoot_MAX:'ELocalizationGatherPathRoot_MAX', };
declare class GatherTextSearchDirectory { 
	PathRoot: ELocalizationGatherPathRoot;
	Path: string;
	clone() : GatherTextSearchDirectory;
	static C(Other: UObject | any): GatherTextSearchDirectory;
}

declare class GatherTextExcludePath { 
	PathRoot: ELocalizationGatherPathRoot;
	Pattern: string;
	clone() : GatherTextExcludePath;
	static C(Other: UObject | any): GatherTextExcludePath;
}

declare class GatherTextFileExtension { 
	Pattern: string;
	clone() : GatherTextFileExtension;
	static C(Other: UObject | any): GatherTextFileExtension;
}

declare class GatherTextFromTextFilesConfiguration { 
	IsEnabled: boolean;
	SearchDirectories: GatherTextSearchDirectory[];
	ExcludePathWildcards: GatherTextExcludePath[];
	FileExtensions: GatherTextFileExtension[];
	ShouldGatherFromEditorOnlyData: boolean;
	clone() : GatherTextFromTextFilesConfiguration;
	static C(Other: UObject | any): GatherTextFromTextFilesConfiguration;
}

declare class GatherTextIncludePath { 
	PathRoot: ELocalizationGatherPathRoot;
	Pattern: string;
	clone() : GatherTextIncludePath;
	static C(Other: UObject | any): GatherTextIncludePath;
}

declare class GatherTextFromPackagesConfiguration { 
	IsEnabled: boolean;
	IncludePathWildcards: GatherTextIncludePath[];
	ExcludePathWildcards: GatherTextExcludePath[];
	FileExtensions: GatherTextFileExtension[];
	Collections: string[];
	ExcludeClasses: SoftClassPath[];
	ShouldExcludeDerivedClasses: boolean;
	ShouldGatherFromEditorOnlyData: boolean;
	SkipGatherCache: boolean;
	clone() : GatherTextFromPackagesConfiguration;
	static C(Other: UObject | any): GatherTextFromPackagesConfiguration;
}

declare class MetaDataKeyName { 
	Name: string;
	clone() : MetaDataKeyName;
	static C(Other: UObject | any): MetaDataKeyName;
}

declare class MetaDataTextKeyPattern { 
	Pattern: string;
	clone() : MetaDataTextKeyPattern;
	static C(Other: UObject | any): MetaDataTextKeyPattern;
}

declare class MetaDataKeyGatherSpecification { 
	MetaDataKey: MetaDataKeyName;
	TextNamespace: string;
	TextKeyPattern: MetaDataTextKeyPattern;
	clone() : MetaDataKeyGatherSpecification;
	static C(Other: UObject | any): MetaDataKeyGatherSpecification;
}

declare class GatherTextFromMetaDataConfiguration { 
	IsEnabled: boolean;
	IncludePathWildcards: GatherTextIncludePath[];
	ExcludePathWildcards: GatherTextExcludePath[];
	KeySpecifications: MetaDataKeyGatherSpecification[];
	ShouldGatherFromEditorOnlyData: boolean;
	clone() : GatherTextFromMetaDataConfiguration;
	static C(Other: UObject | any): GatherTextFromMetaDataConfiguration;
}

declare type ELocalizedTextCollapseMode = 'IdenticalTextIdAndSource' | 'IdenticalPackageIdTextIdAndSource' | 'IdenticalNamespaceAndSource' | 'ELocalizedTextCollapseMode_MAX';
declare var ELocalizedTextCollapseMode : { IdenticalTextIdAndSource:'IdenticalTextIdAndSource',IdenticalPackageIdTextIdAndSource:'IdenticalPackageIdTextIdAndSource',IdenticalNamespaceAndSource:'IdenticalNamespaceAndSource',ELocalizedTextCollapseMode_MAX:'ELocalizedTextCollapseMode_MAX', };
declare type EPortableObjectFormat = 'Unreal' | 'Crowdin' | 'EPortableObjectFormat_MAX';
declare var EPortableObjectFormat : { Unreal:'Unreal',Crowdin:'Crowdin',EPortableObjectFormat_MAX:'EPortableObjectFormat_MAX', };
declare class LocalizationExportingSettings { 
	CollapseMode: ELocalizedTextCollapseMode;
	POFormat: EPortableObjectFormat;
	ShouldPersistCommentsOnExport: boolean;
	ShouldAddSourceLocationsAsComments: boolean;
	clone() : LocalizationExportingSettings;
	static C(Other: UObject | any): LocalizationExportingSettings;
}

declare class LocalizationCompilationSettings { 
	SkipSourceCheck: boolean;
	ValidateFormatPatterns: boolean;
	ValidateSafeWhitespace: boolean;
	clone() : LocalizationCompilationSettings;
	static C(Other: UObject | any): LocalizationCompilationSettings;
}

declare class LocalizationImportDialogueSettings { 
	RawAudioPath: DirectoryPath;
	ImportedDialogueFolder: string;
	bImportNativeAsSource: boolean;
	clone() : LocalizationImportDialogueSettings;
	static C(Other: UObject | any): LocalizationImportDialogueSettings;
}

declare class CultureStatistics { 
	CultureName: string;
	WordCount: any;
	clone() : CultureStatistics;
	static C(Other: UObject | any): CultureStatistics;
}

declare class LocalizationTargetSettings { 
	Name: string;
	Guid: Guid;
	ConflictStatus: ELocalizationTargetConflictStatus;
	TargetDependencies: Guid[];
	AdditionalManifestDependencies: FilePath[];
	RequiredModuleNames: string[];
	GatherFromTextFiles: GatherTextFromTextFilesConfiguration;
	GatherFromPackages: GatherTextFromPackagesConfiguration;
	GatherFromMetaData: GatherTextFromMetaDataConfiguration;
	ExportSettings: LocalizationExportingSettings;
	CompileSettings: LocalizationCompilationSettings;
	ImportDialogueSettings: LocalizationImportDialogueSettings;
	NativeCultureIndex: number;
	SupportedCulturesStatistics: CultureStatistics[];
	clone() : LocalizationTargetSettings;
	static C(Other: UObject | any): LocalizationTargetSettings;
}

declare class LocalizationTarget extends UObject { 
	Settings: LocalizationTargetSettings;
	static Load(ResourceName: string): LocalizationTarget;
	static Find(Outer: UObject, ResourceName: string): LocalizationTarget;
	static GetDefaultObject(): LocalizationTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationTarget;
	static C(Other: UObject | any): LocalizationTarget;
}

declare class LocalizationTargetSet extends UObject { 
	TargetObjects: LocalizationTarget[];
	static Load(ResourceName: string): LocalizationTargetSet;
	static Find(Outer: UObject, ResourceName: string): LocalizationTargetSet;
	static GetDefaultObject(): LocalizationTargetSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationTargetSet;
	static C(Other: UObject | any): LocalizationTargetSet;
}

declare class LocalizationSettings extends UObject { 
	EngineTargetSet: LocalizationTargetSet;
	EngineTargetsSettings: LocalizationTargetSettings[];
	GameTargetSet: LocalizationTargetSet;
	GameTargetsSettings: LocalizationTargetSettings[];
	static Load(ResourceName: string): LocalizationSettings;
	static Find(Outer: UObject, ResourceName: string): LocalizationSettings;
	static GetDefaultObject(): LocalizationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationSettings;
	static C(Other: UObject | any): LocalizationSettings;
}

declare class CookerStats extends UObject { 
	Assets: any[];
	SizeBefore: number;
	SizeAfter: number;
	Path: string;
	static Load(ResourceName: string): CookerStats;
	static Find(Outer: UObject, ResourceName: string): CookerStats;
	static GetDefaultObject(): CookerStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerStats;
	static C(Other: UObject | any): CookerStats;
}

declare class LightingBuildInfo extends UObject { 
	UObject: any;
	LightingTime: number;
	UnmappedTexelsPercentage: number;
	UnmappedTexelsMemory: number;
	TotalTexelMemory: number;
	LevelName: string;
	static Load(ResourceName: string): LightingBuildInfo;
	static Find(Outer: UObject, ResourceName: string): LightingBuildInfo;
	static GetDefaultObject(): LightingBuildInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightingBuildInfo;
	static C(Other: UObject | any): LightingBuildInfo;
}

declare class PrimitiveStats extends UObject { 
	UObject: any;
	Actors: any[];
	Type: string;
	Count: number;
	Sections: number;
	HWInstances: number;
	InstSections: number;
	Triangles: number;
	InstTriangles: number;
	ResourceSize: number;
	VertexColorMem: number;
	InstVertexColorMem: number;
	LightsLM: number;
	LightsOther: number;
	LightsTotal: number;
	ObjLightCost: number;
	LightMapData: number;
	LMSMResolution: number;
	RadiusMin: number;
	RadiusMax: number;
	RadiusAvg: number;
	static Load(ResourceName: string): PrimitiveStats;
	static Find(Outer: UObject, ResourceName: string): PrimitiveStats;
	static GetDefaultObject(): PrimitiveStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveStats;
	static C(Other: UObject | any): PrimitiveStats;
}

declare class ShaderCookerStats extends UObject { 
	Name: string;
	Platform: string;
	Category: string;
	Compiled: number;
	Cooked: number;
	Permutations: number;
	CompileTime: number;
	Path: string;
	static Load(ResourceName: string): ShaderCookerStats;
	static Find(Outer: UObject, ResourceName: string): ShaderCookerStats;
	static GetDefaultObject(): ShaderCookerStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderCookerStats;
	static C(Other: UObject | any): ShaderCookerStats;
}

declare class StaticMeshLightingInfo extends UObject { 
	StaticMeshActor: any;
	StaticMesh: any;
	LevelName: string;
	TextureMapping: string;
	bTextureMapping: boolean;
	bHasLightmapTexCoords: boolean;
	StaticLightingResolution: number;
	TextureLightMapMemoryUsage: number;
	VertexLightMapMemoryUsage: number;
	LightMapLightCount: number;
	TextureShadowMapMemoryUsage: number;
	VertexShadowMapMemoryUsage: number;
	ShadowMapLightCount: number;
	static Load(ResourceName: string): StaticMeshLightingInfo;
	static Find(Outer: UObject, ResourceName: string): StaticMeshLightingInfo;
	static GetDefaultObject(): StaticMeshLightingInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshLightingInfo;
	static C(Other: UObject | any): StaticMeshLightingInfo;
}

declare class TextureStats extends UObject { 
	Texture: any;
	Actors: any[];
	Type: string;
	MaxDim: Vector2D;
	CurrentDim: Vector2D;
	Format: EPixelFormat;
	Group: TextureGroup;
	LODBias: number;
	CurrentKB: number;
	FullyLoadedKB: number;
	NumUses: number;
	LastTimeRendered: number;
	Path: string;
	static Load(ResourceName: string): TextureStats;
	static Find(Outer: UObject, ResourceName: string): TextureStats;
	static GetDefaultObject(): TextureStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureStats;
	static C(Other: UObject | any): TextureStats;
}

declare class ClothSharedConfigCommon extends ClothConfigCommon { 
	static Load(ResourceName: string): ClothSharedConfigCommon;
	static Find(Outer: UObject, ResourceName: string): ClothSharedConfigCommon;
	static GetDefaultObject(): ClothSharedConfigCommon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothSharedConfigCommon;
	static C(Other: UObject | any): ClothSharedConfigCommon;
}

declare class ClothingAssetCustomData extends UObject { 
	static Load(ResourceName: string): ClothingAssetCustomData;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetCustomData;
	static GetDefaultObject(): ClothingAssetCustomData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetCustomData;
	static C(Other: UObject | any): ClothingAssetCustomData;
}

declare class ClothPhysicalMeshData { 
	Vertices: Vector[];
	Normals: Vector[];
	VertexColors: Color[];
	Indices: any[];
	WeightMaps: any;
	InverseMasses: number[];
	BoneData: ClothVertBoneData[];
	MaxBoneWeights: number;
	NumFixedVerts: number;
	SelfCollisionIndices: any[];
	MaxDistances: number[];
	BackstopDistances: number[];
	BackstopRadiuses: number[];
	AnimDriveMultipliers: number[];
	clone() : ClothPhysicalMeshData;
	static C(Other: UObject | any): ClothPhysicalMeshData;
}

declare class ClothCollisionPrim_Sphere { 
	BoneIndex: number;
	Radius: number;
	LocalPosition: Vector;
	clone() : ClothCollisionPrim_Sphere;
	static C(Other: UObject | any): ClothCollisionPrim_Sphere;
}

declare class ClothCollisionPrim_SphereConnection { 
	SphereIndices: number;
	clone() : ClothCollisionPrim_SphereConnection;
	static C(Other: UObject | any): ClothCollisionPrim_SphereConnection;
}

declare class ClothCollisionPrim_Convex { 
	planes: Plane[];
	SurfacePoints: Vector[];
	BoneIndex: number;
	clone() : ClothCollisionPrim_Convex;
	static C(Other: UObject | any): ClothCollisionPrim_Convex;
}

declare class ClothCollisionPrim_Box { 
	LocalPosition: Vector;
	LocalRotation: Quat;
	HalfExtents: Vector;
	BoneIndex: number;
	clone() : ClothCollisionPrim_Box;
	static C(Other: UObject | any): ClothCollisionPrim_Box;
}

declare class ClothCollisionData { 
	Spheres: ClothCollisionPrim_Sphere[];
	SphereConnections: ClothCollisionPrim_SphereConnection[];
	Convexes: ClothCollisionPrim_Convex[];
	Boxes: ClothCollisionPrim_Box[];
	clone() : ClothCollisionData;
	static C(Other: UObject | any): ClothCollisionData;
}

declare class PointWeightMap { 
	Values: number[];
	Name: string;
	CurrentTarget: number;
	bEnabled: boolean;
	clone() : PointWeightMap;
	static C(Other: UObject | any): PointWeightMap;
}

declare class ClothLODDataCommon_Legacy extends UObject { 
	PhysicalMeshData: ClothPhysicalMeshDataBase_Legacy;
	ClothPhysicalMeshData: ClothPhysicalMeshData;
	CollisionData: ClothCollisionData;
	ParameterMasks: PointWeightMap[];
	static Load(ResourceName: string): ClothLODDataCommon_Legacy;
	static Find(Outer: UObject, ResourceName: string): ClothLODDataCommon_Legacy;
	static GetDefaultObject(): ClothLODDataCommon_Legacy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothLODDataCommon_Legacy;
	static C(Other: UObject | any): ClothLODDataCommon_Legacy;
}

declare type EWeightMapTargetCommon = 'None' | 'MaxDistance' | 'BackstopDistance' | 'BackstopRadius' | 'AnimDriveMultiplier' | 'EWeightMapTargetCommon_MAX';
declare var EWeightMapTargetCommon : { None:'None',MaxDistance:'MaxDistance',BackstopDistance:'BackstopDistance',BackstopRadius:'BackstopRadius',AnimDriveMultiplier:'AnimDriveMultiplier',EWeightMapTargetCommon_MAX:'EWeightMapTargetCommon_MAX', };
declare class ClothParameterMask_Legacy { 
	MaskName: string;
	CurrentTarget: EWeightMapTargetCommon;
	MaxValue: number;
	MinValue: number;
	Values: number[];
	bEnabled: boolean;
	clone() : ClothParameterMask_Legacy;
	static C(Other: UObject | any): ClothParameterMask_Legacy;
}

declare class ClothLODDataCommon { 
	PhysicalMeshData: ClothPhysicalMeshData;
	CollisionData: ClothCollisionData;
	bUseMultipleInfluences: boolean;
	SkinningKernelRadius: number;
	ParameterMasks: ClothParameterMask_Legacy[];
	PointWeightMaps: PointWeightMap[];
	clone() : ClothLODDataCommon;
	static C(Other: UObject | any): ClothLODDataCommon;
}

declare class ClothConfig_Legacy { 
	WindMethod: EClothingWindMethod_Legacy;
	VerticalConstraintConfig: ClothConstraintSetup_Legacy;
	HorizontalConstraintConfig: ClothConstraintSetup_Legacy;
	BendConstraintConfig: ClothConstraintSetup_Legacy;
	ShearConstraintConfig: ClothConstraintSetup_Legacy;
	SelfCollisionRadius: number;
	SelfCollisionStiffness: number;
	SelfCollisionCullScale: number;
	Damping: Vector;
	Friction: number;
	WindDragCoefficient: number;
	WindLiftCoefficient: number;
	LinearDrag: Vector;
	AngularDrag: Vector;
	LinearInertiaScale: Vector;
	AngularInertiaScale: Vector;
	CentrifugalInertiaScale: Vector;
	SolverFrequency: number;
	StiffnessFrequency: number;
	GravityScale: number;
	GravityOverride: Vector;
	bUseGravityOverride: boolean;
	TetherStiffness: number;
	TetherLimit: number;
	CollisionThickness: number;
	AnimDriveSpringStiffness: number;
	AnimDriveDamperStiffness: number;
	clone() : ClothConfig_Legacy;
	static C(Other: UObject | any): ClothConfig_Legacy;
}

declare class ClothingAssetCommon extends ClothingAssetBase { 
	PhysicsAsset: PhysicsAsset;
	ClothConfigs: any;
	ClothSharedSimConfig: ClothConfigBase;
	ClothSimConfig: ClothConfigBase;
	ChaosClothSimConfig: ClothConfigBase;
	ClothLODData: ClothLODDataCommon_Legacy[];
	LODData: ClothLODDataCommon[];
	LodMap: number[];
	UsedBoneNames: string[];
	UsedBoneIndices: number[];
	ReferenceBoneIndex: number;
	CustomData: ClothingAssetCustomData;
	ClothConfig: ClothConfig_Legacy;
	static Load(ResourceName: string): ClothingAssetCommon;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetCommon;
	static GetDefaultObject(): ClothingAssetCommon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetCommon;
	static C(Other: UObject | any): ClothingAssetCommon;
}

declare class PreviewSceneProfile { 
	ProfileName: string;
	bSharedProfile: boolean;
	bUseSkyLighting: boolean;
	DirectionalLightIntensity: number;
	DirectionalLightColor: LinearColor;
	SkyLightIntensity: number;
	bRotateLightingRig: boolean;
	bShowEnvironment: boolean;
	bShowFloor: boolean;
	EnvironmentColor: LinearColor;
	EnvironmentIntensity: number;
	EnvironmentCubeMap: TextureCube;
	EnvironmentCubeMapPath: string;
	bPostProcessingEnabled: boolean;
	PostProcessingSettings: PostProcessSettings;
	LightingRigRotation: number;
	RotationSpeed: number;
	DirectionalLightRotation: Rotator;
	clone() : PreviewSceneProfile;
	static C(Other: UObject | any): PreviewSceneProfile;
}

declare class LocalProfiles extends UObject { 
	Profiles: PreviewSceneProfile[];
	static Load(ResourceName: string): LocalProfiles;
	static Find(Outer: UObject, ResourceName: string): LocalProfiles;
	static GetDefaultObject(): LocalProfiles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalProfiles;
	static C(Other: UObject | any): LocalProfiles;
}

declare class SharedProfiles extends UObject { 
	Profiles: PreviewSceneProfile[];
	static Load(ResourceName: string): SharedProfiles;
	static Find(Outer: UObject, ResourceName: string): SharedProfiles;
	static GetDefaultObject(): SharedProfiles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SharedProfiles;
	static C(Other: UObject | any): SharedProfiles;
}

declare class AssetViewerSettings extends UObject { 
	Profiles: PreviewSceneProfile[];
	static Load(ResourceName: string): AssetViewerSettings;
	static Find(Outer: UObject, ResourceName: string): AssetViewerSettings;
	static GetDefaultObject(): AssetViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetViewerSettings;
	static C(Other: UObject | any): AssetViewerSettings;
}

declare class PropertyEntry { 
	Property: EMaterialProperty;
	bUseCustomSize: boolean;
	CustomSize: IntPoint;
	bUseConstantValue: boolean;
	ConstantValue: number;
	clone() : PropertyEntry;
	static C(Other: UObject | any): PropertyEntry;
}

declare class MaterialOptions extends UObject { 
	Properties: PropertyEntry[];
	TextureSize: IntPoint;
	LODIndices: number[];
	bUseMeshData: boolean;
	bUseSpecificUVIndex: boolean;
	TextureCoordinateIndex: number;
	static Load(ResourceName: string): MaterialOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialOptions;
	static GetDefaultObject(): MaterialOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialOptions;
	static C(Other: UObject | any): MaterialOptions;
}

declare class AssetBakeOptions extends UObject { 
	static Load(ResourceName: string): AssetBakeOptions;
	static Find(Outer: UObject, ResourceName: string): AssetBakeOptions;
	static GetDefaultObject(): AssetBakeOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetBakeOptions;
	static C(Other: UObject | any): AssetBakeOptions;
}

declare type EMaterialBakeMethod = 'IndividualMaterial' | 'AtlasMaterial' | 'BinnedMaterial' | 'EMaterialBakeMethod_MAX';
declare var EMaterialBakeMethod : { IndividualMaterial:'IndividualMaterial',AtlasMaterial:'AtlasMaterial',BinnedMaterial:'BinnedMaterial',EMaterialBakeMethod_MAX:'EMaterialBakeMethod_MAX', };
declare class MaterialMergeOptions extends UObject { 
	Method: EMaterialBakeMethod;
	BlendMode: EBlendMode;
	static Load(ResourceName: string): MaterialMergeOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialMergeOptions;
	static GetDefaultObject(): MaterialMergeOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialMergeOptions;
	static C(Other: UObject | any): MaterialMergeOptions;
}

declare class MaterialInstanceConstant extends MaterialInstance { 
	ParameterStateId: Guid;
	PhysMaterialMask: PhysicalMaterialMask;
	static Load(ResourceName: string): MaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstant;
	static GetDefaultObject(): MaterialInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstant;
	K2_GetVectorParameterValue(ParameterName: string): LinearColor;
	K2_GetTextureParameterValue(ParameterName: string): Texture;
	K2_GetScalarParameterValue(ParameterName: string): number;
	static C(Other: UObject | any): MaterialInstanceConstant;
	ClearAllMaterialInstanceParameters(): void;
	GetMaterialInstanceScalarParameterValue(ParameterName: string): number;
	GetMaterialInstanceStaticSwitchParameterValue(ParameterName: string): boolean;
	GetMaterialInstanceTextureParameterValue(ParameterName: string): Texture;
	GetMaterialInstanceVectorParameterValue(ParameterName: string): LinearColor;
	SetMaterialInstanceParent(NewParent: MaterialInterface): void;
	SetMaterialInstanceScalarParameterValue(ParameterName: string,Value: number): boolean;
	SetMaterialInstanceTextureParameterValue(ParameterName: string,Value: Texture): boolean;
	SetMaterialInstanceVectorParameterValue(ParameterName: string,Value: LinearColor): boolean;
	UpdateMaterialInstance(): void;
	static ClearAllMaterialInstanceParameters(Instance: MaterialInstanceConstant): void;
	static GetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): number;
	static GetMaterialInstanceStaticSwitchParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): boolean;
	static GetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): Texture;
	static GetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): LinearColor;
	static SetMaterialInstanceParent(Instance: MaterialInstanceConstant,NewParent: MaterialInterface): void;
	static SetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: number): boolean;
	static SetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: Texture): boolean;
	static SetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: LinearColor): boolean;
	static UpdateMaterialInstance(Instance: MaterialInstanceConstant): void;
}

declare class MaterialEditingLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MaterialEditingLibrary;
	static Find(Outer: UObject, ResourceName: string): MaterialEditingLibrary;
	static GetDefaultObject(): MaterialEditingLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditingLibrary;
	static UpdateMaterialInstance(Instance: MaterialInstanceConstant): void;
	static UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface,PreviewMaterial: Material): void;
	static SetMaterialUsage(Material: Material,Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
	static SetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: LinearColor): boolean;
	static SetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: Texture): boolean;
	static SetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: number): boolean;
	static SetMaterialInstanceParent(Instance: MaterialInstanceConstant,NewParent: MaterialInterface): void;
	static RecompileMaterial(Material: Material): void;
	static LayoutMaterialFunctionExpressions(MaterialFunction: MaterialFunction): void;
	static LayoutMaterialExpressions(Material: Material): void;
	static HasMaterialUsage(Material: Material,Usage: EMaterialUsage): boolean;
	static GetVectorParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
	static GetVectorParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
	static GetUsedTextures(Material: Material): Texture[];
	static GetTextureParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
	static GetTextureParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
	static GetStaticSwitchParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
	static GetStaticSwitchParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
	static GetScalarParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
	static GetScalarParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
	static GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): number;
	static GetNumMaterialExpressions(Material: Material): number;
	static GetMaterialSelectedNodes(Material: Material): any;
	static GetMaterialPropertyInputNode(Material: Material,Property: EMaterialProperty): MaterialExpression;
	static GetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): LinearColor;
	static GetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): Texture;
	static GetMaterialInstanceStaticSwitchParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): boolean;
	static GetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): number;
	static GetMaterialDefaultVectorParameterValue(Material: Material,ParameterName: string): LinearColor;
	static GetMaterialDefaultTextureParameterValue(Material: Material,ParameterName: string): Texture;
	static GetMaterialDefaultStaticSwitchParameterValue(Material: Material,ParameterName: string): boolean;
	static GetMaterialDefaultScalarParameterValue(Material: Material,ParameterName: string): number;
	static GetInputsForMaterialExpression(Material: Material,MaterialExpression: MaterialExpression): MaterialExpression[];
	static GetChildInstances(Parent: MaterialInterface,ChildInstances?: AssetData[]): {ChildInstances: AssetData[]};
	static DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction,Expression: MaterialExpression): void;
	static DeleteMaterialExpression(Material: Material,Expression: MaterialExpression): void;
	static DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): void;
	static DeleteAllMaterialExpressions(Material: Material): void;
	static CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
	static CreateMaterialExpression(Material: Material,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
	static ConnectMaterialProperty(FromExpression: MaterialExpression,FromOutputName: string,Property: EMaterialProperty): boolean;
	static ConnectMaterialExpressions(FromExpression: MaterialExpression,FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
	static ClearAllMaterialInstanceParameters(Instance: MaterialInstanceConstant): void;
	static C(Other: UObject | any): MaterialEditingLibrary;
}

declare class MaterialEditorMenuContext extends UObject { 
	static Load(ResourceName: string): MaterialEditorMenuContext;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorMenuContext;
	static GetDefaultObject(): MaterialEditorMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorMenuContext;
	static C(Other: UObject | any): MaterialEditorMenuContext;
}

declare class MaterialEditorSettings extends UObject { 
	MaliOfflineCompilerPath: FilePath;
	DefaultPreviewWidth: number;
	DefaultPreviewHeight: number;
	static Load(ResourceName: string): MaterialEditorSettings;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorSettings;
	static GetDefaultObject(): MaterialEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorSettings;
	static C(Other: UObject | any): MaterialEditorSettings;
}

declare class CurveEditorFilterBase extends UObject { 
	static Load(ResourceName: string): CurveEditorFilterBase;
	static Find(Outer: UObject, ResourceName: string): CurveEditorFilterBase;
	static GetDefaultObject(): CurveEditorFilterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorFilterBase;
	static C(Other: UObject | any): CurveEditorFilterBase;
}

declare class CurveEditorBakeFilter extends CurveEditorFilterBase { 
	bUseSnapRateForInterval: boolean;
	BakeInterval: number;
	static Load(ResourceName: string): CurveEditorBakeFilter;
	static Find(Outer: UObject, ResourceName: string): CurveEditorBakeFilter;
	static GetDefaultObject(): CurveEditorBakeFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorBakeFilter;
	static C(Other: UObject | any): CurveEditorBakeFilter;
}

declare class KeyPosition { 
	InputValue: any;
	OutputValue: any;
	clone() : KeyPosition;
	static C(Other: UObject | any): KeyPosition;
}

declare class KeyAttributes { 
	bHasArriveTangent: boolean;
	bHasLeaveTangent: boolean;
	bHasInterpMode: boolean;
	bHasTangentMode: boolean;
	bHasTangentWeightMode: boolean;
	bHasArriveTangentWeight: boolean;
	bHasLeaveTangentWeight: boolean;
	ArriveTangent: number;
	LeaveTangent: number;
	InterpMode: ERichCurveInterpMode;
	TangentMode: ERichCurveTangentMode;
	TangentWeightMode: ERichCurveTangentWeightMode;
	ArriveTangentWeight: number;
	LeaveTangentWeight: number;
	clone() : KeyAttributes;
	static C(Other: UObject | any): KeyAttributes;
}

declare class CurveEditorCopyableCurveKeys extends UObject { 
	KeyPositions: KeyPosition[];
	KeyAttributes: KeyAttributes[];
	ShortDisplayName: string;
	LongDisplayName: string;
	IntentionName: string;
	static Load(ResourceName: string): CurveEditorCopyableCurveKeys;
	static Find(Outer: UObject, ResourceName: string): CurveEditorCopyableCurveKeys;
	static GetDefaultObject(): CurveEditorCopyableCurveKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorCopyableCurveKeys;
	static C(Other: UObject | any): CurveEditorCopyableCurveKeys;
}

declare class CurveEditorCopyBuffer extends UObject { 
	Curves: CurveEditorCopyableCurveKeys[];
	TimeOffset: any;
	bAbsolutePosition: boolean;
	static Load(ResourceName: string): CurveEditorCopyBuffer;
	static Find(Outer: UObject, ResourceName: string): CurveEditorCopyBuffer;
	static GetDefaultObject(): CurveEditorCopyBuffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorCopyBuffer;
	static C(Other: UObject | any): CurveEditorCopyBuffer;
}

declare class CurveEditorEulerFilter extends CurveEditorFilterBase { 
	static Load(ResourceName: string): CurveEditorEulerFilter;
	static Find(Outer: UObject, ResourceName: string): CurveEditorEulerFilter;
	static GetDefaultObject(): CurveEditorEulerFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorEulerFilter;
	static C(Other: UObject | any): CurveEditorEulerFilter;
}

declare class CurveEditorKeyProxy extends Interface { 
	static Load(ResourceName: string): CurveEditorKeyProxy;
	static Find(Outer: UObject, ResourceName: string): CurveEditorKeyProxy;
	static GetDefaultObject(): CurveEditorKeyProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorKeyProxy;
	static C(Other: UObject | any): CurveEditorKeyProxy;
}

declare class CurveEditorReduceFilter extends CurveEditorFilterBase { 
	Tolerance: number;
	static Load(ResourceName: string): CurveEditorReduceFilter;
	static Find(Outer: UObject, ResourceName: string): CurveEditorReduceFilter;
	static GetDefaultObject(): CurveEditorReduceFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorReduceFilter;
	static C(Other: UObject | any): CurveEditorReduceFilter;
}

declare type ECurveEditorTangentVisibility = 'AllTangents' | 'SelectedKeys' | 'NoTangents' | 'ECurveEditorTangentVisibility_MAX';
declare var ECurveEditorTangentVisibility : { AllTangents:'AllTangents',SelectedKeys:'SelectedKeys',NoTangents:'NoTangents',ECurveEditorTangentVisibility_MAX:'ECurveEditorTangentVisibility_MAX', };
declare type ECurveEditorZoomPosition = 'CurrentTime' | 'MousePosition' | 'ECurveEditorZoomPosition_MAX';
declare var ECurveEditorZoomPosition : { CurrentTime:'CurrentTime',MousePosition:'MousePosition',ECurveEditorZoomPosition_MAX:'ECurveEditorZoomPosition_MAX', };
declare class CurveEditorSettings extends UObject { 
	bAutoFrameCurveEditor: boolean;
	bShowCurveEditorCurveToolTips: boolean;
	TangentVisibility: ECurveEditorTangentVisibility;
	ZoomPosition: ECurveEditorZoomPosition;
	static Load(ResourceName: string): CurveEditorSettings;
	static Find(Outer: UObject, ResourceName: string): CurveEditorSettings;
	static GetDefaultObject(): CurveEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorSettings;
	static C(Other: UObject | any): CurveEditorSettings;
}

declare class RichCurveKeyProxy extends UObject { 
	Value: RichCurveKey;
	static Load(ResourceName: string): RichCurveKeyProxy;
	static Find(Outer: UObject, ResourceName: string): RichCurveKeyProxy;
	static GetDefaultObject(): RichCurveKeyProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RichCurveKeyProxy;
	static C(Other: UObject | any): RichCurveKeyProxy;
}

declare class CameraRig_Crane extends Actor { 
	CranePitch: number;
	CraneYaw: number;
	CraneArmLength: number;
	bLockMountPitch: boolean;
	bLockMountYaw: boolean;
	TransformComponent: SceneComponent;
	CraneYawControl: SceneComponent;
	CranePitchControl: SceneComponent;
	CraneCameraMount: SceneComponent;
	PreviewMesh_CraneArm: StaticMeshComponent;
	PreviewMesh_CraneBase: StaticMeshComponent;
	PreviewMesh_CraneMount: StaticMeshComponent;
	PreviewMesh_CraneCounterWeight: StaticMeshComponent;
	static GetDefaultObject(): CameraRig_Crane;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraRig_Crane;
	static C(Other: UObject | any): CameraRig_Crane;
}

declare class CameraRig_Rail extends Actor { 
	CurrentPositionOnRail: number;
	bLockOrientationToRail: boolean;
	bShowRailVisualization: boolean;
	PreviewMeshScale: number;
	TransformComponent: SceneComponent;
	RailSplineComponent: SplineComponent;
	RailCameraMount: SceneComponent;
	PreviewMesh_Rail: SplineMeshComponent;
	PreviewRailMeshSegments: SplineMeshComponent[];
	PreviewRailStaticMesh: StaticMesh;
	PreviewMesh_Mount: StaticMeshComponent;
	static GetDefaultObject(): CameraRig_Rail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraRig_Rail;
	GetRailSplineComponent(): SplineComponent;
	static C(Other: UObject | any): CameraRig_Rail;
}

declare class CameraLookatTrackingSettings { 
	bEnableLookAtTracking: boolean;
	bDrawDebugLookAtTrackingPosition: boolean;
	LookAtTrackingInterpSpeed: number;
	ActorToTrack: Actor;
	RelativeOffset: Vector;
	bAllowRoll: boolean;
	clone() : CameraLookatTrackingSettings;
	static C(Other: UObject | any): CameraLookatTrackingSettings;
}

declare class CameraFilmbackSettings { 
	SensorWidth: number;
	SensorHeight: number;
	SensorAspectRatio: number;
	clone() : CameraFilmbackSettings;
	static C(Other: UObject | any): CameraFilmbackSettings;
}

declare class CameraLensSettings { 
	MinFocalLength: number;
	MaxFocalLength: number;
	MinFStop: number;
	MaxFStop: number;
	MinimumFocusDistance: number;
	DiaphragmBladeCount: number;
	clone() : CameraLensSettings;
	static C(Other: UObject | any): CameraLensSettings;
}

declare type ECameraFocusMethod = 'DoNotOverride' | 'Manual' | 'Tracking' | 'Disable' | 'MAX';
declare var ECameraFocusMethod : { DoNotOverride:'DoNotOverride',Manual:'Manual',Tracking:'Tracking',Disable:'Disable',MAX:'MAX', };
declare class CameraTrackingFocusSettings { 
	ActorToTrack: Actor;
	RelativeOffset: Vector;
	bDrawDebugTrackingFocusPoint: boolean;
	clone() : CameraTrackingFocusSettings;
	static C(Other: UObject | any): CameraTrackingFocusSettings;
}

declare class CameraFocusSettings { 
	FocusMethod: ECameraFocusMethod;
	ManualFocusDistance: number;
	TrackingFocusSettings: CameraTrackingFocusSettings;
	bDrawDebugFocusPlane: boolean;
	DebugFocusPlaneColor: Color;
	bSmoothFocusChanges: boolean;
	FocusSmoothingInterpSpeed: number;
	FocusOffset: number;
	clone() : CameraFocusSettings;
	static C(Other: UObject | any): CameraFocusSettings;
}

declare class NamedFilmbackPreset { 
	Name: string;
	FilmbackSettings: CameraFilmbackSettings;
	clone() : NamedFilmbackPreset;
	static C(Other: UObject | any): NamedFilmbackPreset;
}

declare class NamedLensPreset { 
	Name: string;
	LensSettings: CameraLensSettings;
	clone() : NamedLensPreset;
	static C(Other: UObject | any): NamedLensPreset;
}

declare class CineCameraComponent extends CameraComponent { 
	FilmbackSettings: CameraFilmbackSettings;
	Filmback: CameraFilmbackSettings;
	LensSettings: CameraLensSettings;
	FocusSettings: CameraFocusSettings;
	CurrentFocalLength: number;
	CurrentAperture: number;
	CurrentFocusDistance: number;
	CurrentHorizontalFOV: number;
	FocusPlaneVisualizationMesh: StaticMesh;
	FocusPlaneVisualizationMaterial: Material;
	DebugFocusPlaneComponent: StaticMeshComponent;
	DebugFocusPlaneMID: MaterialInstanceDynamic;
	FilmbackPresets: NamedFilmbackPreset[];
	LensPresets: NamedLensPreset[];
	DefaultFilmbackPresetName: string;
	DefaultFilmbackPreset: string;
	DefaultLensPresetName: string;
	DefaultLensFocalLength: number;
	DefaultLensFStop: number;
	static Load(ResourceName: string): CineCameraComponent;
	static Find(Outer: UObject, ResourceName: string): CineCameraComponent;
	static GetDefaultObject(): CineCameraComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CineCameraComponent;
	SetLensPresetByName(InPresetName: string): void;
	SetFilmbackPresetByName(InPresetName: string): void;
	SetCurrentFocalLength(InFocalLength: number): void;
	GetVerticalFieldOfView(): number;
	static GetLensPresetsCopy(): NamedLensPreset[];
	GetLensPresetName(): string;
	GetHorizontalFieldOfView(): number;
	static GetFilmbackPresetsCopy(): NamedFilmbackPreset[];
	GetFilmbackPresetName(): string;
	GetDefaultFilmbackPresetName(): string;
	static C(Other: UObject | any): CineCameraComponent;
}

declare class CineCameraActor extends CameraActor { 
	LookatTrackingSettings: CameraLookatTrackingSettings;
	static GetDefaultObject(): CineCameraActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CineCameraActor;
	GetCineCameraComponent(): CineCameraComponent;
	static C(Other: UObject | any): CineCameraActor;
}

declare type EHardwareClass = 'Unspecified' | 'Desktop' | 'Mobile' | 'EHardwareClass_MAX';
declare var EHardwareClass : { Unspecified:'Unspecified',Desktop:'Desktop',Mobile:'Mobile',EHardwareClass_MAX:'EHardwareClass_MAX', };
declare type EGraphicsPreset = 'Unspecified' | 'Maximum' | 'Scalable' | 'EGraphicsPreset_MAX';
declare var EGraphicsPreset : { Unspecified:'Unspecified',Maximum:'Maximum',Scalable:'Scalable',EGraphicsPreset_MAX:'EGraphicsPreset_MAX', };
declare class HardwareTargetingSettings extends UObject { 
	TargetedHardwareClass: EHardwareClass;
	AppliedTargetedHardwareClass: EHardwareClass;
	DefaultGraphicsPerformance: EGraphicsPreset;
	AppliedDefaultGraphicsPerformance: EGraphicsPreset;
	static Load(ResourceName: string): HardwareTargetingSettings;
	static Find(Outer: UObject, ResourceName: string): HardwareTargetingSettings;
	static GetDefaultObject(): HardwareTargetingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HardwareTargetingSettings;
	static C(Other: UObject | any): HardwareTargetingSettings;
}

declare class ClassTemplate extends UObject { 
	GeneratedBaseClass: UnrealEngineClass;
	static Load(ResourceName: string): ClassTemplate;
	static Find(Outer: UObject, ResourceName: string): ClassTemplate;
	static GetDefaultObject(): ClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassTemplate;
	static C(Other: UObject | any): ClassTemplate;
}

declare class PluginClassTemplate extends ClassTemplate { 
	PluginName: string;
	static Load(ResourceName: string): PluginClassTemplate;
	static Find(Outer: UObject, ResourceName: string): PluginClassTemplate;
	static GetDefaultObject(): PluginClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginClassTemplate;
	static C(Other: UObject | any): PluginClassTemplate;
}

declare class ClassTemplateEditorSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): ClassTemplateEditorSubsystem;
	static Find(Outer: UObject, ResourceName: string): ClassTemplateEditorSubsystem;
	static GetDefaultObject(): ClassTemplateEditorSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassTemplateEditorSubsystem;
	static C(Other: UObject | any): ClassTemplateEditorSubsystem;
}

declare class LocalizedTemplateString { 
	Language: string;
	text: string;
	clone() : LocalizedTemplateString;
	static C(Other: UObject | any): LocalizedTemplateString;
}

declare class TemplateFolderRename { 
	From: string;
	To: string;
	clone() : TemplateFolderRename;
	static C(Other: UObject | any): TemplateFolderRename;
}

declare class TemplateReplacement { 
	Extensions: string[];
	From: string;
	To: string;
	bCaseSensitive: boolean;
	clone() : TemplateReplacement;
	static C(Other: UObject | any): TemplateReplacement;
}

declare type ETemplateSetting = 'Languages' | 'HardwareTarget' | 'GraphicsPreset' | 'StarterContent' | 'XR' | 'Raytracing' | 'All' | 'ETemplateSetting_MAX';
declare var ETemplateSetting : { Languages:'Languages',HardwareTarget:'HardwareTarget',GraphicsPreset:'GraphicsPreset',StarterContent:'StarterContent',XR:'XR',Raytracing:'Raytracing',All:'All',ETemplateSetting_MAX:'ETemplateSetting_MAX', };
declare type EFeaturePackDetailLevel = 'Standard' | 'High' | 'EFeaturePackDetailLevel_MAX';
declare var EFeaturePackDetailLevel : { Standard:'Standard',High:'High',EFeaturePackDetailLevel_MAX:'EFeaturePackDetailLevel_MAX', };
declare class FeaturePackLevelSet { 
	DetailLevels: EFeaturePackDetailLevel[];
	MountName: string;
	clone() : FeaturePackLevelSet;
	static C(Other: UObject | any): FeaturePackLevelSet;
}

declare class TemplateProjectDefs extends UObject { 
	LocalizedDisplayNames: LocalizedTemplateString[];
	LocalizedDescriptions: LocalizedTemplateString[];
	FoldersToIgnore: string[];
	FilesToIgnore: string[];
	FolderRenames: TemplateFolderRename[];
	FilenameReplacements: TemplateReplacement[];
	ReplacementsInFiles: TemplateReplacement[];
	SortKey: string;
	Categories: string[];
	ClassTypes: string;
	AssetTypes: string;
	bAllowProjectCreation: boolean;
	bIsEnterprise: boolean;
	bIsBlank: boolean;
	HiddenSettings: ETemplateSetting[];
	PacksToInclude: string[];
	EditDetailLevelPreference: EFeaturePackDetailLevel;
	SharedContentPacks: FeaturePackLevelSet[];
	StarterContent: string;
	static Load(ResourceName: string): TemplateProjectDefs;
	static Find(Outer: UObject, ResourceName: string): TemplateProjectDefs;
	static GetDefaultObject(): TemplateProjectDefs;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateProjectDefs;
	static C(Other: UObject | any): TemplateProjectDefs;
}

declare class DefaultTemplateProjectDefs extends TemplateProjectDefs { 
	static Load(ResourceName: string): DefaultTemplateProjectDefs;
	static Find(Outer: UObject, ResourceName: string): DefaultTemplateProjectDefs;
	static GetDefaultObject(): DefaultTemplateProjectDefs;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultTemplateProjectDefs;
	static C(Other: UObject | any): DefaultTemplateProjectDefs;
}

declare class TemplateCategoryDef { 
	Key: string;
	LocalizedDisplayNames: LocalizedTemplateString[];
	LocalizedDescriptions: LocalizedTemplateString[];
	Icon: string;
	IsMajorCategory: boolean;
	clone() : TemplateCategoryDef;
	static C(Other: UObject | any): TemplateCategoryDef;
}

declare class TemplateCategories extends UObject { 
	Categories: TemplateCategoryDef[];
	static Load(ResourceName: string): TemplateCategories;
	static Find(Outer: UObject, ResourceName: string): TemplateCategories;
	static GetDefaultObject(): TemplateCategories;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateCategories;
	static C(Other: UObject | any): TemplateCategories;
}

declare class SourceControlState { 
	Filename: string;
	bIsValid: boolean;
	bIsUnknown: boolean;
	bCanCheckIn: boolean;
	bCanCheckOut: boolean;
	bIsCheckedOut: boolean;
	bIsCurrent: boolean;
	bIsSourceControlled: boolean;
	bIsAdded: boolean;
	bIsDeleted: boolean;
	bIsIgnored: boolean;
	bCanEdit: boolean;
	bCanDelete: boolean;
	bIsModified: boolean;
	bCanAdd: boolean;
	bIsConflicted: boolean;
	bCanRevert: boolean;
	bIsCheckedOutOther: boolean;
	CheckedOutOther: string;
	clone() : SourceControlState;
	static C(Other: UObject | any): SourceControlState;
}

declare class SourceControlHelpers extends UObject { 
	static Load(ResourceName: string): SourceControlHelpers;
	static Find(Outer: UObject, ResourceName: string): SourceControlHelpers;
	static GetDefaultObject(): SourceControlHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SourceControlHelpers;
	static SyncFiles(InFiles: string[],bSilent: boolean): boolean;
	static SyncFile(InFile: string,bSilent: boolean): boolean;
	static RevertUnchangedFiles(InFiles: string[],bSilent: boolean): boolean;
	static RevertUnchangedFile(InFile: string,bSilent: boolean): boolean;
	static RevertFiles(InFiles: string[],bSilent: boolean): boolean;
	static RevertFile(InFile: string,bSilent: boolean): boolean;
	static QueryFileState(InFile: string,bSilent: boolean): SourceControlState;
	static MarkFilesForAdd(InFiles: string[],bSilent: boolean): boolean;
	static MarkFileForDelete(InFile: string,bSilent: boolean): boolean;
	static MarkFileForAdd(InFile: string,bSilent: boolean): boolean;
	static LastErrorMsg(): string;
	static IsEnabled(): boolean;
	static IsAvailable(): boolean;
	static CurrentProvider(): string;
	static CopyFile(InSourceFile: string,InDestFile: string,bSilent: boolean): boolean;
	static CheckOutOrAddFile(InFile: string,bSilent: boolean): boolean;
	static CheckOutFiles(InFiles: string[],bSilent: boolean): boolean;
	static CheckOutFile(InFile: string,bSilent: boolean): boolean;
	static CheckInFiles(InFiles: string[],InDescription: string,bSilent: boolean): boolean;
	static CheckInFile(InFile: string,InDescription: string,bSilent: boolean): boolean;
	static C(Other: UObject | any): SourceControlHelpers;
}

declare type EContentBrowserDataMenuContext_AddNewMenuDomain = 'Toolbar' | 'AssetView' | 'PathView' | 'EContentBrowserDataMenuContext_MAX';
declare var EContentBrowserDataMenuContext_AddNewMenuDomain : { Toolbar:'Toolbar',AssetView:'AssetView',PathView:'PathView',EContentBrowserDataMenuContext_MAX:'EContentBrowserDataMenuContext_MAX', };
declare class ContentBrowserDataMenuContext_AddNewMenu extends UObject { 
	SelectedPaths: string[];
	OwnerDomain: EContentBrowserDataMenuContext_AddNewMenuDomain;
	static Load(ResourceName: string): ContentBrowserDataMenuContext_AddNewMenu;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserDataMenuContext_AddNewMenu;
	static GetDefaultObject(): ContentBrowserDataMenuContext_AddNewMenu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserDataMenuContext_AddNewMenu;
	static C(Other: UObject | any): ContentBrowserDataMenuContext_AddNewMenu;
}

declare class ContentBrowserItem { 
	clone() : ContentBrowserItem;
	static C(Other: UObject | any): ContentBrowserItem;
	GetDisplayName(): string;
	GetVirtualPath(): string;
	IsFile(): boolean;
	IsFolder(): boolean;
	static GetDisplayName(Item: ContentBrowserItem): string;
	static GetVirtualPath(Item: ContentBrowserItem): string;
	static IsFile(Item: ContentBrowserItem): boolean;
	static IsFolder(Item: ContentBrowserItem): boolean;
}

declare class ContentBrowserDataMenuContext_FolderMenu extends UObject { 
	SelectedItems: ContentBrowserItem[];
	bCanBeModified: boolean;
	static Load(ResourceName: string): ContentBrowserDataMenuContext_FolderMenu;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserDataMenuContext_FolderMenu;
	static GetDefaultObject(): ContentBrowserDataMenuContext_FolderMenu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserDataMenuContext_FolderMenu;
	static C(Other: UObject | any): ContentBrowserDataMenuContext_FolderMenu;
}

declare class ContentBrowserDataMenuContext_FileMenu extends UObject { 
	SelectedItems: ContentBrowserItem[];
	bCanBeModified: boolean;
	static Load(ResourceName: string): ContentBrowserDataMenuContext_FileMenu;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserDataMenuContext_FileMenu;
	static GetDefaultObject(): ContentBrowserDataMenuContext_FileMenu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserDataMenuContext_FileMenu;
	static C(Other: UObject | any): ContentBrowserDataMenuContext_FileMenu;
}

declare class ContentBrowserDataMenuContext_DragDropMenu extends UObject { 
	DropTargetItem: ContentBrowserItem;
	DraggedItems: ContentBrowserItem[];
	bCanMove: boolean;
	bCanCopy: boolean;
	static Load(ResourceName: string): ContentBrowserDataMenuContext_DragDropMenu;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserDataMenuContext_DragDropMenu;
	static GetDefaultObject(): ContentBrowserDataMenuContext_DragDropMenu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserDataMenuContext_DragDropMenu;
	static C(Other: UObject | any): ContentBrowserDataMenuContext_DragDropMenu;
}

declare class ContentBrowserDataSource extends UObject { 
	static Load(ResourceName: string): ContentBrowserDataSource;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserDataSource;
	static GetDefaultObject(): ContentBrowserDataSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserDataSource;
	static C(Other: UObject | any): ContentBrowserDataSource;
}

declare type EContentBrowserItemTypeFilter = 'IncludeNone' | 'IncludeFolders' | 'IncludeFiles' | 'IncludeAll' | 'EContentBrowserItemTypeFilter_MAX';
declare var EContentBrowserItemTypeFilter : { IncludeNone:'IncludeNone',IncludeFolders:'IncludeFolders',IncludeFiles:'IncludeFiles',IncludeAll:'IncludeAll',EContentBrowserItemTypeFilter_MAX:'EContentBrowserItemTypeFilter_MAX', };
declare type EContentBrowserItemCategoryFilter = 'IncludeNone' | 'IncludeAssets' | 'IncludeClasses' | 'IncludeCollections' | 'IncludeMisc' | 'IncludeAll' | 'EContentBrowserItemCategoryFilter_MAX';
declare var EContentBrowserItemCategoryFilter : { IncludeNone:'IncludeNone',IncludeAssets:'IncludeAssets',IncludeClasses:'IncludeClasses',IncludeCollections:'IncludeCollections',IncludeMisc:'IncludeMisc',IncludeAll:'IncludeAll',EContentBrowserItemCategoryFilter_MAX:'EContentBrowserItemCategoryFilter_MAX', };
declare type EContentBrowserItemAttributeFilter = 'IncludeNone' | 'IncludeProject' | 'IncludeEngine' | 'IncludePlugins' | 'IncludeDeveloper' | 'IncludeLocalized' | 'IncludeAll' | 'EContentBrowserItemAttributeFilter_MAX';
declare var EContentBrowserItemAttributeFilter : { IncludeNone:'IncludeNone',IncludeProject:'IncludeProject',IncludeEngine:'IncludeEngine',IncludePlugins:'IncludePlugins',IncludeDeveloper:'IncludeDeveloper',IncludeLocalized:'IncludeLocalized',IncludeAll:'IncludeAll',EContentBrowserItemAttributeFilter_MAX:'EContentBrowserItemAttributeFilter_MAX', };
declare class ContentBrowserDataFilter { 
	bRecursivePaths: boolean;
	ItemTypeFilter: EContentBrowserItemTypeFilter;
	ItemCategoryFilter: EContentBrowserItemCategoryFilter;
	ItemAttributeFilter: EContentBrowserItemAttributeFilter;
	clone() : ContentBrowserDataFilter;
	static C(Other: UObject | any): ContentBrowserDataFilter;
}

declare class ContentBrowserDataSubsystem extends EditorSubsystem { 
	EnabledDataSources: string[];
	static Load(ResourceName: string): ContentBrowserDataSubsystem;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserDataSubsystem;
	static GetDefaultObject(): ContentBrowserDataSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserDataSubsystem;
	GetItemsUnderPath(InPath: string,InFilter: ContentBrowserDataFilter): ContentBrowserItem[];
	GetItemsAtPath(InPath: string,InItemTypeFilter: EContentBrowserItemTypeFilter): ContentBrowserItem[];
	GetItemAtPath(InPath: string,InItemTypeFilter: EContentBrowserItemTypeFilter): ContentBrowserItem;
	GetAvailableDataSources(): string[];
	GetActiveDataSources(): string[];
	DeactivateDataSource(Name: string): boolean;
	DeactivateAllDataSources(): void;
	ActivateDataSource(Name: string): boolean;
	ActivateAllDataSources(): void;
	static C(Other: UObject | any): ContentBrowserDataSubsystem;
}

declare class ContentBrowserItemLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ContentBrowserItemLibrary;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserItemLibrary;
	static GetDefaultObject(): ContentBrowserItemLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserItemLibrary;
	static IsFolder(Item: ContentBrowserItem): boolean;
	static IsFile(Item: ContentBrowserItem): boolean;
	static GetVirtualPath(Item: ContentBrowserItem): string;
	static GetDisplayName(Item: ContentBrowserItem): string;
	static C(Other: UObject | any): ContentBrowserItemLibrary;
}

declare class ClassViewerProjectSettings extends UObject { 
	InternalOnlyPaths: DirectoryPath[];
	InternalOnlyClasses: SoftClassPath[];
	static Load(ResourceName: string): ClassViewerProjectSettings;
	static Find(Outer: UObject, ResourceName: string): ClassViewerProjectSettings;
	static GetDefaultObject(): ClassViewerProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassViewerProjectSettings;
	static C(Other: UObject | any): ClassViewerProjectSettings;
}

declare type EditConditionTestEnum = 'First' | 'Second' | 'EditConditionTestEnum_MAX';
declare var EditConditionTestEnum : { First:'First',Second:'Second',EditConditionTestEnum_MAX:'EditConditionTestEnum_MAX', };
declare type EditConditionByteEnum = 'First' | 'Second' | 'EditConditionByteEnum_MAX';
declare var EditConditionByteEnum : { First:'First',Second:'Second',EditConditionByteEnum_MAX:'EditConditionByteEnum_MAX', };
declare class EditConditionTestObject extends UObject { 
	BoolProperty: boolean;
	EnumProperty: EditConditionTestEnum;
	ByteEnumProperty: EditConditionByteEnum;
	DoubleProperty: any;
	IntegerProperty: number;
	UintBitfieldProperty: boolean;
	UObjectPtr: UObject;
	SoftClassPtr: Class;
	WeakObjectPtr: any;
	static Load(ResourceName: string): EditConditionTestObject;
	static Find(Outer: UObject, ResourceName: string): EditConditionTestObject;
	static GetDefaultObject(): EditConditionTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditConditionTestObject;
	static C(Other: UObject | any): EditConditionTestObject;
}

declare class BlueprintNodeSpawner extends UObject { 
	NodeClass: UnrealEngineClass;
	static Load(ResourceName: string): BlueprintNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintNodeSpawner;
	static GetDefaultObject(): BlueprintNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintNodeSpawner;
	static C(Other: UObject | any): BlueprintNodeSpawner;
}

declare class BlueprintEventNodeSpawner extends BlueprintNodeSpawner { 
	EventFunc: UFunction;
	CustomEventName: string;
	static Load(ResourceName: string): BlueprintEventNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintEventNodeSpawner;
	static GetDefaultObject(): BlueprintEventNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEventNodeSpawner;
	static C(Other: UObject | any): BlueprintEventNodeSpawner;
}

declare class BlueprintBoundEventNodeSpawner extends BlueprintEventNodeSpawner { 
	EventDelegate: any;
	static Load(ResourceName: string): BlueprintBoundEventNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintBoundEventNodeSpawner;
	static GetDefaultObject(): BlueprintBoundEventNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintBoundEventNodeSpawner;
	static C(Other: UObject | any): BlueprintBoundEventNodeSpawner;
}

declare class BlueprintBoundNodeSpawner extends BlueprintNodeSpawner { 
	static Load(ResourceName: string): BlueprintBoundNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintBoundNodeSpawner;
	static GetDefaultObject(): BlueprintBoundNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintBoundNodeSpawner;
	static C(Other: UObject | any): BlueprintBoundNodeSpawner;
}

declare class BlueprintComponentNodeSpawner extends BlueprintNodeSpawner { 
	ComponentClass: UnrealEngineClass;
	ComponentName: string;
	ComponentAssetName: string;
	static Load(ResourceName: string): BlueprintComponentNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintComponentNodeSpawner;
	static GetDefaultObject(): BlueprintComponentNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintComponentNodeSpawner;
	static C(Other: UObject | any): BlueprintComponentNodeSpawner;
}

declare class BlueprintFieldNodeSpawner extends BlueprintNodeSpawner { 
	OwnerClass: UnrealEngineClass;
	Field: Field;
	Property: any;
	static Load(ResourceName: string): BlueprintFieldNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintFieldNodeSpawner;
	static GetDefaultObject(): BlueprintFieldNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFieldNodeSpawner;
	static C(Other: UObject | any): BlueprintFieldNodeSpawner;
}

declare class BlueprintDelegateNodeSpawner extends BlueprintFieldNodeSpawner { 
	static Load(ResourceName: string): BlueprintDelegateNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintDelegateNodeSpawner;
	static GetDefaultObject(): BlueprintDelegateNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintDelegateNodeSpawner;
	static C(Other: UObject | any): BlueprintDelegateNodeSpawner;
}

declare type ESaveOnCompile = 'SoC_Never' | 'SoC_SuccessOnly' | 'SoC_Always' | 'SoC_MAX';
declare var ESaveOnCompile : { SoC_Never:'SoC_Never',SoC_SuccessOnly:'SoC_SuccessOnly',SoC_Always:'SoC_Always',SoC_MAX:'SoC_MAX', };
declare class BlueprintEditorSettings extends UObject { 
	bDrawMidpointArrowsInBlueprints: boolean;
	bShowGraphInstructionText: boolean;
	bHideUnrelatedNodes: boolean;
	bShowShortTooltips: boolean;
	bSplitContextTargetSettings: boolean;
	bExposeAllMemberComponentFunctions: boolean;
	bShowContextualFavorites: boolean;
	bExposeDeprecatedFunctions: boolean;
	bCompactCallOnMemberNodes: boolean;
	bFlattenFavoritesMenus: boolean;
	bFavorPureCastNodes: boolean;
	bAutoCastObjectConnections: boolean;
	bShowViewportOnSimulate: boolean;
	bShowInheritedVariables: boolean;
	bAlwaysShowInterfacesInOverrides: boolean;
	bShowParentClassInOverrides: boolean;
	bShowEmptySections: boolean;
	bShowAccessSpecifier: boolean;
	bSpawnDefaultBlueprintNodes: boolean;
	bHideConstructionScriptComponentsInDetailsView: boolean;
	bHostFindInBlueprintsInGlobalTab: boolean;
	bNavigateToNativeFunctionsFromCallNodes: boolean;
	Bookmarks: any;
	BookmarkNodes: BPEditorBookmarkNode[];
	bIncludeCommentNodesInBookmarksTab: boolean;
	bShowBookmarksForCurrentDocumentOnlyInTab: boolean;
	GraphEditorQuickJumps: any;
	SaveOnCompile: ESaveOnCompile;
	bJumpToNodeErrors: boolean;
	bAllowExplicitImpureNodeDisabling: boolean;
	bShowActionMenuItemSignatures: boolean;
	bBlueprintNodeUniqueNames: boolean;
	NamespacesToAlwaysInclude: string[];
	bShowDetailedCompileResults: boolean;
	CompileEventDisplayThresholdMs: number;
	NodeTemplateCacheCapMB: number;
	static Load(ResourceName: string): BlueprintEditorSettings;
	static Find(Outer: UObject, ResourceName: string): BlueprintEditorSettings;
	static GetDefaultObject(): BlueprintEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEditorSettings;
	static C(Other: UObject | any): BlueprintEditorSettings;
}

declare class BlueprintFunctionNodeSpawner extends BlueprintFieldNodeSpawner { 
	static Load(ResourceName: string): BlueprintFunctionNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionNodeSpawner;
	static GetDefaultObject(): BlueprintFunctionNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionNodeSpawner;
	static C(Other: UObject | any): BlueprintFunctionNodeSpawner;
}

declare class BlueprintVariableNodeSpawner extends BlueprintFieldNodeSpawner { 
	LocalVarOuter: EdGraph;
	LocalVarDesc: BPVariableDescription;
	static Load(ResourceName: string): BlueprintVariableNodeSpawner;
	static Find(Outer: UObject, ResourceName: string): BlueprintVariableNodeSpawner;
	static GetDefaultObject(): BlueprintVariableNodeSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintVariableNodeSpawner;
	static C(Other: UObject | any): BlueprintVariableNodeSpawner;
}

declare class BlueprintCallableFunctionRedirect { 
	ClassName: string;
	OldFunctionName: string;
	NewFunctionName: string;
	BlueprintParamName: string;
	ClassParamName: string;
	clone() : BlueprintCallableFunctionRedirect;
	static C(Other: UObject | any): BlueprintCallableFunctionRedirect;
}

declare class EdGraphSchema_K2 extends EdGraphSchema { 
	EditoronlyBPFunctionRedirects: BlueprintCallableFunctionRedirect[];
	static Load(ResourceName: string): EdGraphSchema_K2;
	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_K2;
	static GetDefaultObject(): EdGraphSchema_K2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_K2;
	static C(Other: UObject | any): EdGraphSchema_K2;
}

declare class K2Node_EditablePinBase extends K2Node { 
	bIsEditable: boolean;
	static Load(ResourceName: string): K2Node_EditablePinBase;
	static Find(Outer: UObject, ResourceName: string): K2Node_EditablePinBase;
	static GetDefaultObject(): K2Node_EditablePinBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EditablePinBase;
	static C(Other: UObject | any): K2Node_EditablePinBase;
}

declare class MemberReference { 
	MemberParent: UObject;
	MemberScope: string;
	MemberName: string;
	MemberGuid: Guid;
	bSelfContext: boolean;
	bWasDeprecated: boolean;
	clone() : MemberReference;
	static C(Other: UObject | any): MemberReference;
}

declare class K2Node_Event extends K2Node_EditablePinBase { 
	EventSignatureName: string;
	EventSignatureClass: UnrealEngineClass;
	EventReference: MemberReference;
	bOverrideFunction: boolean;
	bInternalEvent: boolean;
	CustomFunctionName: string;
	FunctionFlags: any;
	static Load(ResourceName: string): K2Node_Event;
	static Find(Outer: UObject, ResourceName: string): K2Node_Event;
	static GetDefaultObject(): K2Node_Event;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Event;
	static C(Other: UObject | any): K2Node_Event;
}

declare class K2Node_ActorBoundEvent extends K2Node_Event { 
	DelegatePropertyName: string;
	DelegateOwnerClass: UnrealEngineClass;
	EventOwner: Actor;
	static Load(ResourceName: string): K2Node_ActorBoundEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_ActorBoundEvent;
	static GetDefaultObject(): K2Node_ActorBoundEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ActorBoundEvent;
	static C(Other: UObject | any): K2Node_ActorBoundEvent;
}

declare class K2Node_CallFunction extends K2Node { 
	bIsPureFunc: boolean;
	bIsConstFunc: boolean;
	bWantsEnumToExecExpansion: boolean;
	bIsInterfaceCall: boolean;
	bIsFinalFunction: boolean;
	bIsBeadFunction: boolean;
	FunctionReference: MemberReference;
	CallFunctionName: string;
	CallFunctionClass: UnrealEngineClass;
	static Load(ResourceName: string): K2Node_CallFunction;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallFunction;
	static GetDefaultObject(): K2Node_CallFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallFunction;
	static C(Other: UObject | any): K2Node_CallFunction;
}

declare class K2Node_AddComponent extends K2Node_CallFunction { 
	bHasExposedVariable: boolean;
	TemplateBlueprint: string;
	TemplateType: UnrealEngineClass;
	static Load(ResourceName: string): K2Node_AddComponent;
	static Find(Outer: UObject, ResourceName: string): K2Node_AddComponent;
	static GetDefaultObject(): K2Node_AddComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AddComponent;
	static C(Other: UObject | any): K2Node_AddComponent;
}

declare class K2Node_ConstructObjectFromClass extends K2Node { 
	static Load(ResourceName: string): K2Node_ConstructObjectFromClass;
	static Find(Outer: UObject, ResourceName: string): K2Node_ConstructObjectFromClass;
	static GetDefaultObject(): K2Node_ConstructObjectFromClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ConstructObjectFromClass;
	static C(Other: UObject | any): K2Node_ConstructObjectFromClass;
}

declare class K2Node_AddComponentByClass extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_AddComponentByClass;
	static Find(Outer: UObject, ResourceName: string): K2Node_AddComponentByClass;
	static GetDefaultObject(): K2Node_AddComponentByClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AddComponentByClass;
	static C(Other: UObject | any): K2Node_AddComponentByClass;
}

declare class K2Node_BaseMCDelegate extends K2Node { 
	DelegateReference: MemberReference;
	static Load(ResourceName: string): K2Node_BaseMCDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_BaseMCDelegate;
	static GetDefaultObject(): K2Node_BaseMCDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_BaseMCDelegate;
	static C(Other: UObject | any): K2Node_BaseMCDelegate;
}

declare class K2Node_AddDelegate extends K2Node_BaseMCDelegate { 
	static Load(ResourceName: string): K2Node_AddDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_AddDelegate;
	static GetDefaultObject(): K2Node_AddDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AddDelegate;
	static C(Other: UObject | any): K2Node_AddDelegate;
}

declare class K2Node_AddPinInterface extends Interface { 
	static Load(ResourceName: string): K2Node_AddPinInterface;
	static Find(Outer: UObject, ResourceName: string): K2Node_AddPinInterface;
	static GetDefaultObject(): K2Node_AddPinInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AddPinInterface;
	static C(Other: UObject | any): K2Node_AddPinInterface;
}

declare class K2Node_AssignDelegate extends K2Node_AddDelegate { 
	static Load(ResourceName: string): K2Node_AssignDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_AssignDelegate;
	static GetDefaultObject(): K2Node_AssignDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AssignDelegate;
	static C(Other: UObject | any): K2Node_AssignDelegate;
}

declare class K2Node_AssignmentStatement extends K2Node { 
	static Load(ResourceName: string): K2Node_AssignmentStatement;
	static Find(Outer: UObject, ResourceName: string): K2Node_AssignmentStatement;
	static GetDefaultObject(): K2Node_AssignmentStatement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AssignmentStatement;
	static C(Other: UObject | any): K2Node_AssignmentStatement;
}

declare class K2Node_BaseAsyncTask extends K2Node { 
	ProxyFactoryFunctionName: string;
	ProxyFactoryClass: UnrealEngineClass;
	ProxyClass: UnrealEngineClass;
	ProxyActivateFunctionName: string;
	static Load(ResourceName: string): K2Node_BaseAsyncTask;
	static Find(Outer: UObject, ResourceName: string): K2Node_BaseAsyncTask;
	static GetDefaultObject(): K2Node_BaseAsyncTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_BaseAsyncTask;
	static C(Other: UObject | any): K2Node_BaseAsyncTask;
}

declare class K2Node_AsyncAction extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_AsyncAction;
	static Find(Outer: UObject, ResourceName: string): K2Node_AsyncAction;
	static GetDefaultObject(): K2Node_AsyncAction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AsyncAction;
	static C(Other: UObject | any): K2Node_AsyncAction;
}

declare class K2Node_BitmaskLiteral extends K2Node { 
	BitflagsEnum: Enum;
	static Load(ResourceName: string): K2Node_BitmaskLiteral;
	static Find(Outer: UObject, ResourceName: string): K2Node_BitmaskLiteral;
	static GetDefaultObject(): K2Node_BitmaskLiteral;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_BitmaskLiteral;
	static C(Other: UObject | any): K2Node_BitmaskLiteral;
}

declare type ESelfContextInfo = 'Unspecified' | 'NotSelfContext' | 'ESelfContextInfo_MAX';
declare var ESelfContextInfo : { Unspecified:'Unspecified',NotSelfContext:'NotSelfContext',ESelfContextInfo_MAX:'ESelfContextInfo_MAX', };
declare class K2Node_Variable extends K2Node { 
	VariableReference: MemberReference;
	SelfContextInfo: ESelfContextInfo;
	VariableSourceClass: UnrealEngineClass;
	VariableName: string;
	bSelfContext: boolean;
	static Load(ResourceName: string): K2Node_Variable;
	static Find(Outer: UObject, ResourceName: string): K2Node_Variable;
	static GetDefaultObject(): K2Node_Variable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Variable;
	static C(Other: UObject | any): K2Node_Variable;
}

declare class K2Node_StructOperation extends K2Node_Variable { 
	StructType: ScriptStruct;
	static Load(ResourceName: string): K2Node_StructOperation;
	static Find(Outer: UObject, ResourceName: string): K2Node_StructOperation;
	static GetDefaultObject(): K2Node_StructOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_StructOperation;
	static C(Other: UObject | any): K2Node_StructOperation;
}

declare class OptionalPinFromProperty { 
	PropertyName: string;
	PropertyFriendlyName: string;
	PropertyTooltip: string;
	CategoryName: string;
	bShowPin: boolean;
	bCanToggleVisibility: boolean;
	bPropertyIsCustomized: boolean;
	bHasOverridePin: boolean;
	bIsMarkedForAdvancedDisplay: boolean;
	bIsOverrideEnabled: boolean;
	bIsSetValuePinVisible: boolean;
	bIsOverridePinVisible: boolean;
	clone() : OptionalPinFromProperty;
	static C(Other: UObject | any): OptionalPinFromProperty;
}

declare class K2Node_StructMemberGet extends K2Node_StructOperation { 
	ShowPinForProperties: OptionalPinFromProperty[];
	static Load(ResourceName: string): K2Node_StructMemberGet;
	static Find(Outer: UObject, ResourceName: string): K2Node_StructMemberGet;
	static GetDefaultObject(): K2Node_StructMemberGet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_StructMemberGet;
	static C(Other: UObject | any): K2Node_StructMemberGet;
}

declare class K2Node_BreakStruct extends K2Node_StructMemberGet { 
	bMadeAfterOverridePinRemoval: boolean;
	static Load(ResourceName: string): K2Node_BreakStruct;
	static Find(Outer: UObject, ResourceName: string): K2Node_BreakStruct;
	static GetDefaultObject(): K2Node_BreakStruct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_BreakStruct;
	static C(Other: UObject | any): K2Node_BreakStruct;
}

declare class K2Node_CallArrayFunction extends K2Node_CallFunction { 
	static Load(ResourceName: string): K2Node_CallArrayFunction;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallArrayFunction;
	static GetDefaultObject(): K2Node_CallArrayFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallArrayFunction;
	static C(Other: UObject | any): K2Node_CallArrayFunction;
}

declare class K2Node_CallDataTableFunction extends K2Node_CallFunction { 
	static Load(ResourceName: string): K2Node_CallDataTableFunction;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallDataTableFunction;
	static GetDefaultObject(): K2Node_CallDataTableFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallDataTableFunction;
	static C(Other: UObject | any): K2Node_CallDataTableFunction;
}

declare class K2Node_CallDelegate extends K2Node_BaseMCDelegate { 
	static Load(ResourceName: string): K2Node_CallDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallDelegate;
	static GetDefaultObject(): K2Node_CallDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallDelegate;
	static C(Other: UObject | any): K2Node_CallDelegate;
}

declare class K2Node_CallFunctionOnMember extends K2Node_CallFunction { 
	MemberVariableToCallOn: MemberReference;
	static Load(ResourceName: string): K2Node_CallFunctionOnMember;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallFunctionOnMember;
	static GetDefaultObject(): K2Node_CallFunctionOnMember;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallFunctionOnMember;
	static C(Other: UObject | any): K2Node_CallFunctionOnMember;
}

declare class K2Node_CallMaterialParameterCollectionFunction extends K2Node_CallFunction { 
	static Load(ResourceName: string): K2Node_CallMaterialParameterCollectionFunction;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallMaterialParameterCollectionFunction;
	static GetDefaultObject(): K2Node_CallMaterialParameterCollectionFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallMaterialParameterCollectionFunction;
	static C(Other: UObject | any): K2Node_CallMaterialParameterCollectionFunction;
}

declare class K2Node_CallParentFunction extends K2Node_CallFunction { 
	static Load(ResourceName: string): K2Node_CallParentFunction;
	static Find(Outer: UObject, ResourceName: string): K2Node_CallParentFunction;
	static GetDefaultObject(): K2Node_CallParentFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CallParentFunction;
	static C(Other: UObject | any): K2Node_CallParentFunction;
}

declare class K2Node_CastByteToEnum extends K2Node { 
	Enum: Enum;
	bSafe: boolean;
	static Load(ResourceName: string): K2Node_CastByteToEnum;
	static Find(Outer: UObject, ResourceName: string): K2Node_CastByteToEnum;
	static GetDefaultObject(): K2Node_CastByteToEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CastByteToEnum;
	static C(Other: UObject | any): K2Node_CastByteToEnum;
}

declare class K2Node_DynamicCast extends K2Node { 
	TargetType: UnrealEngineClass;
	bIsPureCast: boolean;
	static Load(ResourceName: string): K2Node_DynamicCast;
	static Find(Outer: UObject, ResourceName: string): K2Node_DynamicCast;
	static GetDefaultObject(): K2Node_DynamicCast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_DynamicCast;
	static C(Other: UObject | any): K2Node_DynamicCast;
}

declare class K2Node_ClassDynamicCast extends K2Node_DynamicCast { 
	static Load(ResourceName: string): K2Node_ClassDynamicCast;
	static Find(Outer: UObject, ResourceName: string): K2Node_ClassDynamicCast;
	static GetDefaultObject(): K2Node_ClassDynamicCast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ClassDynamicCast;
	static C(Other: UObject | any): K2Node_ClassDynamicCast;
}

declare class K2Node_ClearDelegate extends K2Node_BaseMCDelegate { 
	static Load(ResourceName: string): K2Node_ClearDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_ClearDelegate;
	static GetDefaultObject(): K2Node_ClearDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ClearDelegate;
	static C(Other: UObject | any): K2Node_ClearDelegate;
}

declare class K2Node_CommutativeAssociativeBinaryOperator extends K2Node_CallFunction { 
	NumAdditionalInputs: number;
	static Load(ResourceName: string): K2Node_CommutativeAssociativeBinaryOperator;
	static Find(Outer: UObject, ResourceName: string): K2Node_CommutativeAssociativeBinaryOperator;
	static GetDefaultObject(): K2Node_CommutativeAssociativeBinaryOperator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CommutativeAssociativeBinaryOperator;
	static C(Other: UObject | any): K2Node_CommutativeAssociativeBinaryOperator;
}

declare class K2Node_ComponentBoundEvent extends K2Node_Event { 
	DelegatePropertyName: string;
	DelegateOwnerClass: UnrealEngineClass;
	ComponentPropertyName: string;
	DelegatePropertyDisplayName: string;
	static Load(ResourceName: string): K2Node_ComponentBoundEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_ComponentBoundEvent;
	static GetDefaultObject(): K2Node_ComponentBoundEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ComponentBoundEvent;
	static C(Other: UObject | any): K2Node_ComponentBoundEvent;
}

declare class KismetUserDeclaredFunctionMetadata { 
	Tooltip: string;
	Category: string;
	Keywords: string;
	CompactNodeTitle: string;
	InstanceTitleColor: LinearColor;
	DeprecationMessage: string;
	bIsDeprecated: boolean;
	bCallInEditor: boolean;
	HasLatentFunctions: any;
	clone() : KismetUserDeclaredFunctionMetadata;
	static C(Other: UObject | any): KismetUserDeclaredFunctionMetadata;
}

declare class K2Node_Tunnel extends K2Node_EditablePinBase { 
	OutputSourceNode: K2Node_Tunnel;
	InputSinkNode: K2Node_Tunnel;
	bCanHaveInputs: boolean;
	bCanHaveOutputs: boolean;
	MetaData: KismetUserDeclaredFunctionMetadata;
	static Load(ResourceName: string): K2Node_Tunnel;
	static Find(Outer: UObject, ResourceName: string): K2Node_Tunnel;
	static GetDefaultObject(): K2Node_Tunnel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Tunnel;
	static C(Other: UObject | any): K2Node_Tunnel;
}

declare class K2Node_Composite extends K2Node_Tunnel { 
	BoundGraph: EdGraph;
	static Load(ResourceName: string): K2Node_Composite;
	static Find(Outer: UObject, ResourceName: string): K2Node_Composite;
	static GetDefaultObject(): K2Node_Composite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Composite;
	static C(Other: UObject | any): K2Node_Composite;
}

declare class K2Node_ConvertAsset extends K2Node { 
	static Load(ResourceName: string): K2Node_ConvertAsset;
	static Find(Outer: UObject, ResourceName: string): K2Node_ConvertAsset;
	static GetDefaultObject(): K2Node_ConvertAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ConvertAsset;
	static C(Other: UObject | any): K2Node_ConvertAsset;
}

declare class K2Node_Copy extends K2Node { 
	static Load(ResourceName: string): K2Node_Copy;
	static Find(Outer: UObject, ResourceName: string): K2Node_Copy;
	static GetDefaultObject(): K2Node_Copy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Copy;
	static C(Other: UObject | any): K2Node_Copy;
}

declare class K2Node_CreateDelegate extends K2Node { 
	SelectedFunctionName: string;
	SelectedFunctionGuid: Guid;
	static Load(ResourceName: string): K2Node_CreateDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateDelegate;
	static GetDefaultObject(): K2Node_CreateDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateDelegate;
	static C(Other: UObject | any): K2Node_CreateDelegate;
}

declare class K2Node_CustomEvent extends K2Node_Event { 
	DeprecationMessage: string;
	bIsDeprecated: boolean;
	bCallInEditor: boolean;
	MetaData: KismetUserDeclaredFunctionMetadata;
	static Load(ResourceName: string): K2Node_CustomEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_CustomEvent;
	static GetDefaultObject(): K2Node_CustomEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CustomEvent;
	static C(Other: UObject | any): K2Node_CustomEvent;
}

declare class K2Node_DeadClass extends K2Node { 
	static Load(ResourceName: string): K2Node_DeadClass;
	static Find(Outer: UObject, ResourceName: string): K2Node_DeadClass;
	static GetDefaultObject(): K2Node_DeadClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_DeadClass;
	static C(Other: UObject | any): K2Node_DeadClass;
}

declare class K2Node_DelegateSet extends K2Node { 
	DelegatePropertyName: string;
	DelegatePropertyClass: UnrealEngineClass;
	static Load(ResourceName: string): K2Node_DelegateSet;
	static Find(Outer: UObject, ResourceName: string): K2Node_DelegateSet;
	static GetDefaultObject(): K2Node_DelegateSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_DelegateSet;
	static C(Other: UObject | any): K2Node_DelegateSet;
}

declare class K2Node_TemporaryVariable extends K2Node { 
	VariableType: EdGraphPinType;
	bIsPersistent: boolean;
	static Load(ResourceName: string): K2Node_TemporaryVariable;
	static Find(Outer: UObject, ResourceName: string): K2Node_TemporaryVariable;
	static GetDefaultObject(): K2Node_TemporaryVariable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_TemporaryVariable;
	static C(Other: UObject | any): K2Node_TemporaryVariable;
}

declare class K2Node_DoOnceMultiInput extends K2Node { 
	NumAdditionalInputs: number;
	DataNode: K2Node_TemporaryVariable;
	static Load(ResourceName: string): K2Node_DoOnceMultiInput;
	static Find(Outer: UObject, ResourceName: string): K2Node_DoOnceMultiInput;
	static GetDefaultObject(): K2Node_DoOnceMultiInput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_DoOnceMultiInput;
	static C(Other: UObject | any): K2Node_DoOnceMultiInput;
}

declare class K2Node_EaseFunction extends K2Node { 
	EaseFunctionName: string;
	static Load(ResourceName: string): K2Node_EaseFunction;
	static Find(Outer: UObject, ResourceName: string): K2Node_EaseFunction;
	static GetDefaultObject(): K2Node_EaseFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EaseFunction;
	static C(Other: UObject | any): K2Node_EaseFunction;
}

declare class K2Node_EditorPropertyAccessBase extends K2Node_CallFunction { 
	static Load(ResourceName: string): K2Node_EditorPropertyAccessBase;
	static Find(Outer: UObject, ResourceName: string): K2Node_EditorPropertyAccessBase;
	static GetDefaultObject(): K2Node_EditorPropertyAccessBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EditorPropertyAccessBase;
	static C(Other: UObject | any): K2Node_EditorPropertyAccessBase;
}

declare class K2Node_GetEditorProperty extends K2Node_EditorPropertyAccessBase { 
	static Load(ResourceName: string): K2Node_GetEditorProperty;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetEditorProperty;
	static GetDefaultObject(): K2Node_GetEditorProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEditorProperty;
	static C(Other: UObject | any): K2Node_GetEditorProperty;
}

declare class K2Node_SetEditorProperty extends K2Node_EditorPropertyAccessBase { 
	static Load(ResourceName: string): K2Node_SetEditorProperty;
	static Find(Outer: UObject, ResourceName: string): K2Node_SetEditorProperty;
	static GetDefaultObject(): K2Node_SetEditorProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SetEditorProperty;
	static C(Other: UObject | any): K2Node_SetEditorProperty;
}

declare class K2Node_EnumEquality extends K2Node { 
	static Load(ResourceName: string): K2Node_EnumEquality;
	static Find(Outer: UObject, ResourceName: string): K2Node_EnumEquality;
	static GetDefaultObject(): K2Node_EnumEquality;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EnumEquality;
	static C(Other: UObject | any): K2Node_EnumEquality;
}

declare class K2Node_EnumInequality extends K2Node_EnumEquality { 
	static Load(ResourceName: string): K2Node_EnumInequality;
	static Find(Outer: UObject, ResourceName: string): K2Node_EnumInequality;
	static GetDefaultObject(): K2Node_EnumInequality;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EnumInequality;
	static C(Other: UObject | any): K2Node_EnumInequality;
}

declare class K2Node_EnumLiteral extends K2Node { 
	Enum: Enum;
	static Load(ResourceName: string): K2Node_EnumLiteral;
	static Find(Outer: UObject, ResourceName: string): K2Node_EnumLiteral;
	static GetDefaultObject(): K2Node_EnumLiteral;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EnumLiteral;
	static C(Other: UObject | any): K2Node_EnumLiteral;
}

declare class K2Node_EventNodeInterface extends Interface { 
	static Load(ResourceName: string): K2Node_EventNodeInterface;
	static Find(Outer: UObject, ResourceName: string): K2Node_EventNodeInterface;
	static GetDefaultObject(): K2Node_EventNodeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_EventNodeInterface;
	static C(Other: UObject | any): K2Node_EventNodeInterface;
}

declare class K2Node_ExecutionSequence extends K2Node { 
	static Load(ResourceName: string): K2Node_ExecutionSequence;
	static Find(Outer: UObject, ResourceName: string): K2Node_ExecutionSequence;
	static GetDefaultObject(): K2Node_ExecutionSequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ExecutionSequence;
	static C(Other: UObject | any): K2Node_ExecutionSequence;
}

declare class K2Node_ForEachElementInEnum extends K2Node { 
	Enum: Enum;
	static Load(ResourceName: string): K2Node_ForEachElementInEnum;
	static Find(Outer: UObject, ResourceName: string): K2Node_ForEachElementInEnum;
	static GetDefaultObject(): K2Node_ForEachElementInEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ForEachElementInEnum;
	static C(Other: UObject | any): K2Node_ForEachElementInEnum;
}

declare class K2Node_FormatText extends K2Node { 
	PinNames: string[];
	static Load(ResourceName: string): K2Node_FormatText;
	static Find(Outer: UObject, ResourceName: string): K2Node_FormatText;
	static GetDefaultObject(): K2Node_FormatText;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_FormatText;
	static C(Other: UObject | any): K2Node_FormatText;
}

declare class K2Node_FunctionTerminator extends K2Node_EditablePinBase { 
	FunctionReference: MemberReference;
	SignatureClass: UnrealEngineClass;
	SignatureName: string;
	static Load(ResourceName: string): K2Node_FunctionTerminator;
	static Find(Outer: UObject, ResourceName: string): K2Node_FunctionTerminator;
	static GetDefaultObject(): K2Node_FunctionTerminator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_FunctionTerminator;
	static C(Other: UObject | any): K2Node_FunctionTerminator;
}

declare class K2Node_FunctionEntry extends K2Node_FunctionTerminator { 
	CustomGeneratedFunctionName: string;
	MetaData: KismetUserDeclaredFunctionMetadata;
	LocalVariables: BPVariableDescription[];
	bEnforceConstCorrectness: boolean;
	ExtraFlags: number;
	static Load(ResourceName: string): K2Node_FunctionEntry;
	static Find(Outer: UObject, ResourceName: string): K2Node_FunctionEntry;
	static GetDefaultObject(): K2Node_FunctionEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_FunctionEntry;
	static C(Other: UObject | any): K2Node_FunctionEntry;
}

declare class K2Node_FunctionResult extends K2Node_FunctionTerminator { 
	static Load(ResourceName: string): K2Node_FunctionResult;
	static Find(Outer: UObject, ResourceName: string): K2Node_FunctionResult;
	static GetDefaultObject(): K2Node_FunctionResult;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_FunctionResult;
	static C(Other: UObject | any): K2Node_FunctionResult;
}

declare class K2Node_GenericCreateObject extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_GenericCreateObject;
	static Find(Outer: UObject, ResourceName: string): K2Node_GenericCreateObject;
	static GetDefaultObject(): K2Node_GenericCreateObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GenericCreateObject;
	static C(Other: UObject | any): K2Node_GenericCreateObject;
}

declare class K2Node_GetArrayItem extends K2Node { 
	bReturnByRefDesired: boolean;
	static Load(ResourceName: string): K2Node_GetArrayItem;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetArrayItem;
	static GetDefaultObject(): K2Node_GetArrayItem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetArrayItem;
	static C(Other: UObject | any): K2Node_GetArrayItem;
}

declare class K2Node_GetClassDefaults extends K2Node { 
	BlueprintSubscribedTo: Blueprint;
	ShowPinForProperties: OptionalPinFromProperty[];
	bExcludeObjectContainers: boolean;
	bExcludeObjectArrays: boolean;
	static Load(ResourceName: string): K2Node_GetClassDefaults;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetClassDefaults;
	static GetDefaultObject(): K2Node_GetClassDefaults;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetClassDefaults;
	static C(Other: UObject | any): K2Node_GetClassDefaults;
}

declare class K2Node_GetDataTableRow extends K2Node { 
	static Load(ResourceName: string): K2Node_GetDataTableRow;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetDataTableRow;
	static GetDefaultObject(): K2Node_GetDataTableRow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetDataTableRow;
	static C(Other: UObject | any): K2Node_GetDataTableRow;
}

declare class K2Node_GetEnumeratorName extends K2Node { 
	static Load(ResourceName: string): K2Node_GetEnumeratorName;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetEnumeratorName;
	static GetDefaultObject(): K2Node_GetEnumeratorName;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEnumeratorName;
	static C(Other: UObject | any): K2Node_GetEnumeratorName;
}

declare class K2Node_GetEnumeratorNameAsString extends K2Node_GetEnumeratorName { 
	static Load(ResourceName: string): K2Node_GetEnumeratorNameAsString;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetEnumeratorNameAsString;
	static GetDefaultObject(): K2Node_GetEnumeratorNameAsString;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEnumeratorNameAsString;
	static C(Other: UObject | any): K2Node_GetEnumeratorNameAsString;
}

declare class K2Node_GetInputAxisKeyValue extends K2Node_CallFunction { 
	InputAxisKey: Key;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	static Load(ResourceName: string): K2Node_GetInputAxisKeyValue;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetInputAxisKeyValue;
	static GetDefaultObject(): K2Node_GetInputAxisKeyValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetInputAxisKeyValue;
	static C(Other: UObject | any): K2Node_GetInputAxisKeyValue;
}

declare class K2Node_GetInputAxisValue extends K2Node_CallFunction { 
	InputAxisName: string;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	static Load(ResourceName: string): K2Node_GetInputAxisValue;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetInputAxisValue;
	static GetDefaultObject(): K2Node_GetInputAxisValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetInputAxisValue;
	static C(Other: UObject | any): K2Node_GetInputAxisValue;
}

declare class K2Node_GetInputVectorAxisValue extends K2Node_GetInputAxisKeyValue { 
	static Load(ResourceName: string): K2Node_GetInputVectorAxisValue;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetInputVectorAxisValue;
	static GetDefaultObject(): K2Node_GetInputVectorAxisValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetInputVectorAxisValue;
	static C(Other: UObject | any): K2Node_GetInputVectorAxisValue;
}

declare class K2Node_GetNumEnumEntries extends K2Node { 
	Enum: Enum;
	static Load(ResourceName: string): K2Node_GetNumEnumEntries;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetNumEnumEntries;
	static GetDefaultObject(): K2Node_GetNumEnumEntries;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetNumEnumEntries;
	static C(Other: UObject | any): K2Node_GetNumEnumEntries;
}

declare class K2Node_GetSubsystem extends K2Node { 
	CustomClass: UnrealEngineClass;
	static Load(ResourceName: string): K2Node_GetSubsystem;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetSubsystem;
	static GetDefaultObject(): K2Node_GetSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSubsystem;
	static C(Other: UObject | any): K2Node_GetSubsystem;
}

declare class K2Node_GetSubsystemFromPC extends K2Node_GetSubsystem { 
	static Load(ResourceName: string): K2Node_GetSubsystemFromPC;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetSubsystemFromPC;
	static GetDefaultObject(): K2Node_GetSubsystemFromPC;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSubsystemFromPC;
	static C(Other: UObject | any): K2Node_GetSubsystemFromPC;
}

declare class K2Node_GetEngineSubsystem extends K2Node_GetSubsystem { 
	static Load(ResourceName: string): K2Node_GetEngineSubsystem;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetEngineSubsystem;
	static GetDefaultObject(): K2Node_GetEngineSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEngineSubsystem;
	static C(Other: UObject | any): K2Node_GetEngineSubsystem;
}

declare class K2Node_GetEditorSubsystem extends K2Node_GetSubsystem { 
	static Load(ResourceName: string): K2Node_GetEditorSubsystem;
	static Find(Outer: UObject, ResourceName: string): K2Node_GetEditorSubsystem;
	static GetDefaultObject(): K2Node_GetEditorSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEditorSubsystem;
	static C(Other: UObject | any): K2Node_GetEditorSubsystem;
}

declare class K2Node_IfThenElse extends K2Node { 
	static Load(ResourceName: string): K2Node_IfThenElse;
	static Find(Outer: UObject, ResourceName: string): K2Node_IfThenElse;
	static GetDefaultObject(): K2Node_IfThenElse;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_IfThenElse;
	static C(Other: UObject | any): K2Node_IfThenElse;
}

declare class K2Node_InputAction extends K2Node { 
	InputActionName: string;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputAction;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputAction;
	static GetDefaultObject(): K2Node_InputAction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputAction;
	static C(Other: UObject | any): K2Node_InputAction;
}

declare class K2Node_InputActionEvent extends K2Node_Event { 
	InputActionName: string;
	InputKeyEvent: EInputEvent;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputActionEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputActionEvent;
	static GetDefaultObject(): K2Node_InputActionEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputActionEvent;
	static C(Other: UObject | any): K2Node_InputActionEvent;
}

declare class K2Node_InputAxisEvent extends K2Node_Event { 
	InputAxisName: string;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputAxisEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputAxisEvent;
	static GetDefaultObject(): K2Node_InputAxisEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputAxisEvent;
	static C(Other: UObject | any): K2Node_InputAxisEvent;
}

declare class K2Node_InputAxisKeyEvent extends K2Node_Event { 
	AxisKey: Key;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputAxisKeyEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputAxisKeyEvent;
	static GetDefaultObject(): K2Node_InputAxisKeyEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputAxisKeyEvent;
	static C(Other: UObject | any): K2Node_InputAxisKeyEvent;
}

declare class K2Node_InputKey extends K2Node { 
	InputKey: Key;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	bControl: boolean;
	bAlt: boolean;
	bShift: boolean;
	bCommand: boolean;
	static Load(ResourceName: string): K2Node_InputKey;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputKey;
	static GetDefaultObject(): K2Node_InputKey;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputKey;
	static C(Other: UObject | any): K2Node_InputKey;
}

declare class InputChord { 
	Key: Key;
	bShift: boolean;
	bCtrl: boolean;
	bAlt: boolean;
	bCmd: boolean;
	clone() : InputChord;
	static C(Other: UObject | any): InputChord;
	EqualEqual_InputChordInputChord(B: InputChord): boolean;
	InputChord_GetDisplayName(): string;
	static EqualEqual_InputChordInputChord(A: InputChord,B: InputChord): boolean;
	static InputChord_GetDisplayName(Key: InputChord): string;
}

declare class K2Node_InputKeyEvent extends K2Node_Event { 
	InputChord: InputChord;
	InputKeyEvent: EInputEvent;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputKeyEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputKeyEvent;
	static GetDefaultObject(): K2Node_InputKeyEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputKeyEvent;
	static C(Other: UObject | any): K2Node_InputKeyEvent;
}

declare class K2Node_InputTouch extends K2Node { 
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputTouch;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputTouch;
	static GetDefaultObject(): K2Node_InputTouch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputTouch;
	static C(Other: UObject | any): K2Node_InputTouch;
}

declare class K2Node_InputTouchEvent extends K2Node_Event { 
	InputKeyEvent: EInputEvent;
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	static Load(ResourceName: string): K2Node_InputTouchEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputTouchEvent;
	static GetDefaultObject(): K2Node_InputTouchEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputTouchEvent;
	static C(Other: UObject | any): K2Node_InputTouchEvent;
}

declare class K2Node_InputVectorAxisEvent extends K2Node_InputAxisKeyEvent { 
	static Load(ResourceName: string): K2Node_InputVectorAxisEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_InputVectorAxisEvent;
	static GetDefaultObject(): K2Node_InputVectorAxisEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InputVectorAxisEvent;
	static C(Other: UObject | any): K2Node_InputVectorAxisEvent;
}

declare class K2Node_Knot extends K2Node { 
	static Load(ResourceName: string): K2Node_Knot;
	static Find(Outer: UObject, ResourceName: string): K2Node_Knot;
	static GetDefaultObject(): K2Node_Knot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Knot;
	static C(Other: UObject | any): K2Node_Knot;
}

declare class K2Node_Literal extends K2Node { 
	ObjectRef: UObject;
	static Load(ResourceName: string): K2Node_Literal;
	static Find(Outer: UObject, ResourceName: string): K2Node_Literal;
	static GetDefaultObject(): K2Node_Literal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Literal;
	static C(Other: UObject | any): K2Node_Literal;
}

declare class K2Node_LoadAsset extends K2Node { 
	static Load(ResourceName: string): K2Node_LoadAsset;
	static Find(Outer: UObject, ResourceName: string): K2Node_LoadAsset;
	static GetDefaultObject(): K2Node_LoadAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LoadAsset;
	static C(Other: UObject | any): K2Node_LoadAsset;
}

declare class K2Node_LoadAssetClass extends K2Node_LoadAsset { 
	static Load(ResourceName: string): K2Node_LoadAssetClass;
	static Find(Outer: UObject, ResourceName: string): K2Node_LoadAssetClass;
	static GetDefaultObject(): K2Node_LoadAssetClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LoadAssetClass;
	static C(Other: UObject | any): K2Node_LoadAssetClass;
}

declare class K2Node_LocalVariable extends K2Node_TemporaryVariable { 
	CustomVariableName: string;
	VariableTooltip: string;
	static Load(ResourceName: string): K2Node_LocalVariable;
	static Find(Outer: UObject, ResourceName: string): K2Node_LocalVariable;
	static GetDefaultObject(): K2Node_LocalVariable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LocalVariable;
	static C(Other: UObject | any): K2Node_LocalVariable;
}

declare class GraphReference { 
	MacroGraph: EdGraph;
	GraphBlueprint: Blueprint;
	GraphGuid: Guid;
	clone() : GraphReference;
	static C(Other: UObject | any): GraphReference;
}

declare class K2Node_MacroInstance extends K2Node_Tunnel { 
	MacroGraph: EdGraph;
	MacroGraphReference: GraphReference;
	ResolvedWildcardType: EdGraphPinType;
	static Load(ResourceName: string): K2Node_MacroInstance;
	static Find(Outer: UObject, ResourceName: string): K2Node_MacroInstance;
	static GetDefaultObject(): K2Node_MacroInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MacroInstance;
	static C(Other: UObject | any): K2Node_MacroInstance;
}

declare class K2Node_MakeContainer extends K2Node { 
	NumInputs: number;
	static Load(ResourceName: string): K2Node_MakeContainer;
	static Find(Outer: UObject, ResourceName: string): K2Node_MakeContainer;
	static GetDefaultObject(): K2Node_MakeContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MakeContainer;
	static C(Other: UObject | any): K2Node_MakeContainer;
}

declare class K2Node_MakeArray extends K2Node_MakeContainer { 
	static Load(ResourceName: string): K2Node_MakeArray;
	static Find(Outer: UObject, ResourceName: string): K2Node_MakeArray;
	static GetDefaultObject(): K2Node_MakeArray;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MakeArray;
	static C(Other: UObject | any): K2Node_MakeArray;
}

declare class K2Node_MakeMap extends K2Node_MakeContainer { 
	static Load(ResourceName: string): K2Node_MakeMap;
	static Find(Outer: UObject, ResourceName: string): K2Node_MakeMap;
	static GetDefaultObject(): K2Node_MakeMap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MakeMap;
	static C(Other: UObject | any): K2Node_MakeMap;
}

declare class K2Node_MakeSet extends K2Node_MakeContainer { 
	static Load(ResourceName: string): K2Node_MakeSet;
	static Find(Outer: UObject, ResourceName: string): K2Node_MakeSet;
	static GetDefaultObject(): K2Node_MakeSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MakeSet;
	static C(Other: UObject | any): K2Node_MakeSet;
}

declare class K2Node_StructMemberSet extends K2Node_StructOperation { 
	ShowPinForProperties: OptionalPinFromProperty[];
	static Load(ResourceName: string): K2Node_StructMemberSet;
	static Find(Outer: UObject, ResourceName: string): K2Node_StructMemberSet;
	static GetDefaultObject(): K2Node_StructMemberSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_StructMemberSet;
	static C(Other: UObject | any): K2Node_StructMemberSet;
}

declare class K2Node_MakeStruct extends K2Node_StructMemberSet { 
	bMadeAfterOverridePinRemoval: boolean;
	static Load(ResourceName: string): K2Node_MakeStruct;
	static Find(Outer: UObject, ResourceName: string): K2Node_MakeStruct;
	static GetDefaultObject(): K2Node_MakeStruct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MakeStruct;
	static C(Other: UObject | any): K2Node_MakeStruct;
}

declare class K2Node_MakeVariable extends K2Node { 
	VariableType: BPVariableDescription;
	static Load(ResourceName: string): K2Node_MakeVariable;
	static Find(Outer: UObject, ResourceName: string): K2Node_MakeVariable;
	static GetDefaultObject(): K2Node_MakeVariable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MakeVariable;
	static C(Other: UObject | any): K2Node_MakeVariable;
}

declare class K2Node_MathExpression extends K2Node_Composite { 
	Expression: string;
	bMadeAfterRotChange: boolean;
	static Load(ResourceName: string): K2Node_MathExpression;
	static Find(Outer: UObject, ResourceName: string): K2Node_MathExpression;
	static GetDefaultObject(): K2Node_MathExpression;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MathExpression;
	static C(Other: UObject | any): K2Node_MathExpression;
}

declare class K2Node_MatineeController extends K2Node { 
	MatineeActor: MatineeActor;
	static Load(ResourceName: string): K2Node_MatineeController;
	static Find(Outer: UObject, ResourceName: string): K2Node_MatineeController;
	static GetDefaultObject(): K2Node_MatineeController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MatineeController;
	static C(Other: UObject | any): K2Node_MatineeController;
}

declare class K2Node_Message extends K2Node_CallFunction { 
	static Load(ResourceName: string): K2Node_Message;
	static Find(Outer: UObject, ResourceName: string): K2Node_Message;
	static GetDefaultObject(): K2Node_Message;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Message;
	static C(Other: UObject | any): K2Node_Message;
}

declare class K2Node_MultiGate extends K2Node_ExecutionSequence { 
	DataNode: K2Node_TemporaryVariable;
	static Load(ResourceName: string): K2Node_MultiGate;
	static Find(Outer: UObject, ResourceName: string): K2Node_MultiGate;
	static GetDefaultObject(): K2Node_MultiGate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_MultiGate;
	static C(Other: UObject | any): K2Node_MultiGate;
}

declare class K2Node_PureAssignmentStatement extends K2Node { 
	static Load(ResourceName: string): K2Node_PureAssignmentStatement;
	static Find(Outer: UObject, ResourceName: string): K2Node_PureAssignmentStatement;
	static GetDefaultObject(): K2Node_PureAssignmentStatement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PureAssignmentStatement;
	static C(Other: UObject | any): K2Node_PureAssignmentStatement;
}

declare class K2Node_RemoveDelegate extends K2Node_BaseMCDelegate { 
	static Load(ResourceName: string): K2Node_RemoveDelegate;
	static Find(Outer: UObject, ResourceName: string): K2Node_RemoveDelegate;
	static GetDefaultObject(): K2Node_RemoveDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_RemoveDelegate;
	static C(Other: UObject | any): K2Node_RemoveDelegate;
}

declare class K2Node_Select extends K2Node { 
	NumOptionPins: number;
	IndexPinType: EdGraphPinType;
	Enum: Enum;
	EnumEntries: string[];
	EnumEntryFriendlyNames: string[];
	bReconstructNode: boolean;
	static Load(ResourceName: string): K2Node_Select;
	static Find(Outer: UObject, ResourceName: string): K2Node_Select;
	static GetDefaultObject(): K2Node_Select;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Select;
	static C(Other: UObject | any): K2Node_Select;
}

declare class K2Node_Self extends K2Node { 
	static Load(ResourceName: string): K2Node_Self;
	static Find(Outer: UObject, ResourceName: string): K2Node_Self;
	static GetDefaultObject(): K2Node_Self;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Self;
	static C(Other: UObject | any): K2Node_Self;
}

declare class K2Node_SetFieldsInStruct extends K2Node_MakeStruct { 
	static Load(ResourceName: string): K2Node_SetFieldsInStruct;
	static Find(Outer: UObject, ResourceName: string): K2Node_SetFieldsInStruct;
	static GetDefaultObject(): K2Node_SetFieldsInStruct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SetFieldsInStruct;
	static C(Other: UObject | any): K2Node_SetFieldsInStruct;
}

declare class K2Node_SetVariableOnPersistentFrame extends K2Node { 
	static Load(ResourceName: string): K2Node_SetVariableOnPersistentFrame;
	static Find(Outer: UObject, ResourceName: string): K2Node_SetVariableOnPersistentFrame;
	static GetDefaultObject(): K2Node_SetVariableOnPersistentFrame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SetVariableOnPersistentFrame;
	static C(Other: UObject | any): K2Node_SetVariableOnPersistentFrame;
}

declare class K2Node_SpawnActor extends K2Node { 
	static Load(ResourceName: string): K2Node_SpawnActor;
	static Find(Outer: UObject, ResourceName: string): K2Node_SpawnActor;
	static GetDefaultObject(): K2Node_SpawnActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SpawnActor;
	static C(Other: UObject | any): K2Node_SpawnActor;
}

declare class K2Node_SpawnActorFromClass extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_SpawnActorFromClass;
	static Find(Outer: UObject, ResourceName: string): K2Node_SpawnActorFromClass;
	static GetDefaultObject(): K2Node_SpawnActorFromClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SpawnActorFromClass;
	static C(Other: UObject | any): K2Node_SpawnActorFromClass;
}

declare class K2Node_Switch extends K2Node { 
	bHasDefaultPin: boolean;
	FunctionName: string;
	FunctionClass: UnrealEngineClass;
	static Load(ResourceName: string): K2Node_Switch;
	static Find(Outer: UObject, ResourceName: string): K2Node_Switch;
	static GetDefaultObject(): K2Node_Switch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Switch;
	static C(Other: UObject | any): K2Node_Switch;
}

declare class K2Node_SwitchEnum extends K2Node_Switch { 
	Enum: Enum;
	EnumEntries: string[];
	EnumFriendlyNames: string[];
	static Load(ResourceName: string): K2Node_SwitchEnum;
	static Find(Outer: UObject, ResourceName: string): K2Node_SwitchEnum;
	static GetDefaultObject(): K2Node_SwitchEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SwitchEnum;
	static C(Other: UObject | any): K2Node_SwitchEnum;
}

declare class K2Node_SwitchInteger extends K2Node_Switch { 
	StartIndex: number;
	static Load(ResourceName: string): K2Node_SwitchInteger;
	static Find(Outer: UObject, ResourceName: string): K2Node_SwitchInteger;
	static GetDefaultObject(): K2Node_SwitchInteger;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SwitchInteger;
	static C(Other: UObject | any): K2Node_SwitchInteger;
}

declare class K2Node_SwitchName extends K2Node_Switch { 
	PinNames: string[];
	static Load(ResourceName: string): K2Node_SwitchName;
	static Find(Outer: UObject, ResourceName: string): K2Node_SwitchName;
	static GetDefaultObject(): K2Node_SwitchName;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SwitchName;
	static C(Other: UObject | any): K2Node_SwitchName;
}

declare class K2Node_SwitchString extends K2Node_Switch { 
	PinNames: string[];
	bIsCaseSensitive: boolean;
	static Load(ResourceName: string): K2Node_SwitchString;
	static Find(Outer: UObject, ResourceName: string): K2Node_SwitchString;
	static GetDefaultObject(): K2Node_SwitchString;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_SwitchString;
	static C(Other: UObject | any): K2Node_SwitchString;
}

declare class K2Node_Timeline extends K2Node { 
	TimelineName: string;
	bAutoPlay: boolean;
	TimelineGuid: Guid;
	bLoop: boolean;
	bReplicated: boolean;
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): K2Node_Timeline;
	static Find(Outer: UObject, ResourceName: string): K2Node_Timeline;
	static GetDefaultObject(): K2Node_Timeline;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_Timeline;
	static C(Other: UObject | any): K2Node_Timeline;
}

declare type ETunnelBoundaryType = 'Unknown' | 'EntrySite' | 'InputSite' | 'OutputSite' | 'ETunnelBoundaryType_MAX';
declare var ETunnelBoundaryType : { Unknown:'Unknown',EntrySite:'EntrySite',InputSite:'InputSite',OutputSite:'OutputSite',ETunnelBoundaryType_MAX:'ETunnelBoundaryType_MAX', };
declare class K2Node_TunnelBoundary extends K2Node { 
	BaseName: string;
	TunnelBoundaryType: ETunnelBoundaryType;
	static Load(ResourceName: string): K2Node_TunnelBoundary;
	static Find(Outer: UObject, ResourceName: string): K2Node_TunnelBoundary;
	static GetDefaultObject(): K2Node_TunnelBoundary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_TunnelBoundary;
	static C(Other: UObject | any): K2Node_TunnelBoundary;
}

declare class K2Node_VariableGet extends K2Node_Variable { 
	bIsPureGet: boolean;
	static Load(ResourceName: string): K2Node_VariableGet;
	static Find(Outer: UObject, ResourceName: string): K2Node_VariableGet;
	static GetDefaultObject(): K2Node_VariableGet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_VariableGet;
	static C(Other: UObject | any): K2Node_VariableGet;
}

declare class K2Node_VariableSet extends K2Node_Variable { 
	static Load(ResourceName: string): K2Node_VariableSet;
	static Find(Outer: UObject, ResourceName: string): K2Node_VariableSet;
	static GetDefaultObject(): K2Node_VariableSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_VariableSet;
	static C(Other: UObject | any): K2Node_VariableSet;
}

declare class K2Node_VariableSetRef extends K2Node { 
	static Load(ResourceName: string): K2Node_VariableSetRef;
	static Find(Outer: UObject, ResourceName: string): K2Node_VariableSetRef;
	static GetDefaultObject(): K2Node_VariableSetRef;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_VariableSetRef;
	static C(Other: UObject | any): K2Node_VariableSetRef;
}

declare class NodeDependingOnEnumInterface extends Interface { 
	static Load(ResourceName: string): NodeDependingOnEnumInterface;
	static Find(Outer: UObject, ResourceName: string): NodeDependingOnEnumInterface;
	static GetDefaultObject(): NodeDependingOnEnumInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NodeDependingOnEnumInterface;
	static C(Other: UObject | any): NodeDependingOnEnumInterface;
}

declare class BlueprintCompilerExtension extends UObject { 
	static Load(ResourceName: string): BlueprintCompilerExtension;
	static Find(Outer: UObject, ResourceName: string): BlueprintCompilerExtension;
	static GetDefaultObject(): BlueprintCompilerExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintCompilerExtension;
	static C(Other: UObject | any): BlueprintCompilerExtension;
}

declare class BlueprintEditorToolMenuContext extends UObject { 
	static Load(ResourceName: string): BlueprintEditorToolMenuContext;
	static Find(Outer: UObject, ResourceName: string): BlueprintEditorToolMenuContext;
	static GetDefaultObject(): BlueprintEditorToolMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEditorToolMenuContext;
	static C(Other: UObject | any): BlueprintEditorToolMenuContext;
}

declare class FavoritedBlueprintPaletteItem { 
	clone() : FavoritedBlueprintPaletteItem;
	static C(Other: UObject | any): FavoritedBlueprintPaletteItem;
}

declare class BlueprintPaletteFavorites extends UObject { 
	CustomFavorites: string[];
	CurrentFavorites: FavoritedBlueprintPaletteItem[];
	CurrentProfile: string;
	static Load(ResourceName: string): BlueprintPaletteFavorites;
	static Find(Outer: UObject, ResourceName: string): BlueprintPaletteFavorites;
	static GetDefaultObject(): BlueprintPaletteFavorites;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPaletteFavorites;
	static C(Other: UObject | any): BlueprintPaletteFavorites;
}

declare class SCSEditorExtensionContext extends UObject { 
	static Load(ResourceName: string): SCSEditorExtensionContext;
	static Find(Outer: UObject, ResourceName: string): SCSEditorExtensionContext;
	static GetDefaultObject(): SCSEditorExtensionContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SCSEditorExtensionContext;
	static C(Other: UObject | any): SCSEditorExtensionContext;
}

declare class SSCSEditorMenuContext extends UObject { 
	static Load(ResourceName: string): SSCSEditorMenuContext;
	static Find(Outer: UObject, ResourceName: string): SSCSEditorMenuContext;
	static GetDefaultObject(): SSCSEditorMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SSCSEditorMenuContext;
	static C(Other: UObject | any): SSCSEditorMenuContext;
}

declare type EBlueprintPinStyleType = 'BPST_Original' | 'BPST_VariantA' | 'BPST_MAX';
declare var EBlueprintPinStyleType : { BPST_Original:'BPST_Original',BPST_VariantA:'BPST_VariantA',BPST_MAX:'BPST_MAX', };
declare type EGraphPanningMouseButton = 'Right' | 'Middle' | 'Both' | 'EGraphPanningMouseButton_MAX';
declare var EGraphPanningMouseButton : { Right:'Right',Middle:'Middle',Both:'Both',EGraphPanningMouseButton_MAX:'EGraphPanningMouseButton_MAX', };
declare class GraphEditorSettings extends UObject { 
	DataPinStyle: EBlueprintPinStyleType;
	PanningMouseButton: EGraphPanningMouseButton;
	PaddingAbovePin: number;
	PaddingBelowPin: number;
	PaddingRightOfInput: number;
	PaddingLeftOfOutput: number;
	PaddingTowardsNodeEdge: number;
	bTreatSplinesLikePins: boolean;
	SplineHoverTolerance: number;
	ForwardSplineHorizontalDeltaRange: number;
	ForwardSplineVerticalDeltaRange: number;
	ForwardSplineTangentFromHorizontalDelta: Vector2D;
	ForwardSplineTangentFromVerticalDelta: Vector2D;
	BackwardSplineHorizontalDeltaRange: number;
	BackwardSplineVerticalDeltaRange: number;
	BackwardSplineTangentFromHorizontalDelta: Vector2D;
	BackwardSplineTangentFromVerticalDelta: Vector2D;
	DefaultPinTypeColor: LinearColor;
	ExecutionPinTypeColor: LinearColor;
	BooleanPinTypeColor: LinearColor;
	BytePinTypeColor: LinearColor;
	ClassPinTypeColor: LinearColor;
	IntPinTypeColor: LinearColor;
	Int64PinTypeColor: LinearColor;
	FloatPinTypeColor: LinearColor;
	NamePinTypeColor: LinearColor;
	SoftObjectPinTypeColor: LinearColor;
	SoftClassPinTypeColor: LinearColor;
	DelegatePinTypeColor: LinearColor;
	ObjectPinTypeColor: LinearColor;
	InterfacePinTypeColor: LinearColor;
	StringPinTypeColor: LinearColor;
	TextPinTypeColor: LinearColor;
	StructPinTypeColor: LinearColor;
	WildcardPinTypeColor: LinearColor;
	VectorPinTypeColor: LinearColor;
	RotatorPinTypeColor: LinearColor;
	TransformPinTypeColor: LinearColor;
	IndexPinTypeColor: LinearColor;
	EventNodeTitleColor: LinearColor;
	FunctionCallNodeTitleColor: LinearColor;
	PureFunctionCallNodeTitleColor: LinearColor;
	ParentFunctionCallNodeTitleColor: LinearColor;
	FunctionTerminatorNodeTitleColor: LinearColor;
	ExecBranchNodeTitleColor: LinearColor;
	ExecSequenceNodeTitleColor: LinearColor;
	ResultNodeTitleColor: LinearColor;
	DefaultCommentNodeTitleColor: LinearColor;
	PreviewNodeTitleColor: LinearColor;
	DefaultDataWireThickness: number;
	DefaultExecutionWireThickness: number;
	TraceAttackColor: LinearColor;
	TraceAttackWireThickness: number;
	TraceAttackHoldPeriod: number;
	TraceDecayPeriod: number;
	TraceDecayExponent: number;
	TraceSustainColor: LinearColor;
	TraceSustainWireThickness: number;
	TraceSustainHoldPeriod: number;
	TraceReleaseColor: LinearColor;
	TraceReleaseWireThickness: number;
	TraceReleasePeriod: number;
	TraceReleaseExponent: number;
	TracePositionBonusPeriod: number;
	TracePositionExponent: number;
	PaddingAutoCollateIncrement: number;
	bOpenCreateMenuOnBlankGraphAreas: boolean;
	static Load(ResourceName: string): GraphEditorSettings;
	static Find(Outer: UObject, ResourceName: string): GraphEditorSettings;
	static GetDefaultObject(): GraphEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GraphEditorSettings;
	static C(Other: UObject | any): GraphEditorSettings;
}

declare class AnimationConduitGraphSchema extends EdGraphSchema_K2 { 
	static Load(ResourceName: string): AnimationConduitGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationConduitGraphSchema;
	static GetDefaultObject(): AnimationConduitGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationConduitGraphSchema;
	static C(Other: UObject | any): AnimationConduitGraphSchema;
}

declare class AnimGraphBlendOptions { 
	BlendInTime: number;
	BlendOutTime: number;
	clone() : AnimGraphBlendOptions;
	static C(Other: UObject | any): AnimGraphBlendOptions;
}

declare class AnimationGraph extends EdGraph { 
	BlendOptions: AnimGraphBlendOptions;
	static Load(ResourceName: string): AnimationGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationGraph;
	static GetDefaultObject(): AnimationGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationGraph;
	static C(Other: UObject | any): AnimationGraph;
}

declare type EBlueprintUsage = 'NoProperties' | 'DoesNotUseBlueprint' | 'UsesBlueprint' | 'EBlueprintUsage_MAX';
declare var EBlueprintUsage : { NoProperties:'NoProperties',DoesNotUseBlueprint:'DoesNotUseBlueprint',UsesBlueprint:'UsesBlueprint',EBlueprintUsage_MAX:'EBlueprintUsage_MAX', };
declare class AnimGraphNode_Base extends K2Node { 
	ShowPinForProperties: OptionalPinFromProperty[];
	PropertyBindings: any;
	BlueprintUsage: EBlueprintUsage;
	static Load(ResourceName: string): AnimGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Base;
	static GetDefaultObject(): AnimGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Base;
	static C(Other: UObject | any): AnimGraphNode_Base;
}

declare class AnimNode_Base { 
	clone() : AnimNode_Base;
	static C(Other: UObject | any): AnimNode_Base;
}

declare class PoseLinkBase { 
	LinkID: number;
	SourceLinkID: number;
	clone() : PoseLinkBase;
	static C(Other: UObject | any): PoseLinkBase;
}

declare class PoseLink extends PoseLinkBase { 
	clone() : PoseLink;
	static C(Other: UObject | any): PoseLink;
}

declare class AnimNode_Root extends AnimNode_Base { 
	Result: PoseLink;
	Name: string;
	Group: string;
	clone() : AnimNode_Root;
	static C(Other: UObject | any): AnimNode_Root;
}

declare class AnimNode_StateResult extends AnimNode_Root { 
	clone() : AnimNode_StateResult;
	static C(Other: UObject | any): AnimNode_StateResult;
}

declare class AnimGraphNode_StateResult extends AnimGraphNode_Base { 
	UNode: AnimNode_StateResult;
	static Load(ResourceName: string): AnimGraphNode_StateResult;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_StateResult;
	static GetDefaultObject(): AnimGraphNode_StateResult;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_StateResult;
	static C(Other: UObject | any): AnimGraphNode_StateResult;
}

declare class AnimGraphNode_CustomTransitionResult extends AnimGraphNode_StateResult { 
	static Load(ResourceName: string): AnimGraphNode_CustomTransitionResult;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CustomTransitionResult;
	static GetDefaultObject(): AnimGraphNode_CustomTransitionResult;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CustomTransitionResult;
	static C(Other: UObject | any): AnimGraphNode_CustomTransitionResult;
}

declare class AnimationCustomTransitionGraph extends AnimationGraph { 
	MyResultNode: AnimGraphNode_CustomTransitionResult;
	static Load(ResourceName: string): AnimationCustomTransitionGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationCustomTransitionGraph;
	static GetDefaultObject(): AnimationCustomTransitionGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationCustomTransitionGraph;
	static C(Other: UObject | any): AnimationCustomTransitionGraph;
}

declare class AnimationGraphSchema extends EdGraphSchema_K2 { 
	PN_SequenceName: string;
	NAME_NeverAsPin: string;
	NAME_PinHiddenByDefault: string;
	NAME_PinShownByDefault: string;
	NAME_AlwaysAsPin: string;
	NAME_CustomizeProperty: string;
	NAME_OnEvaluate: string;
	DefaultEvaluationHandlerName: string;
	static Load(ResourceName: string): AnimationGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationGraphSchema;
	static GetDefaultObject(): AnimationGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationGraphSchema;
	static C(Other: UObject | any): AnimationGraphSchema;
}

declare class AnimationCustomTransitionSchema extends AnimationGraphSchema { 
	static Load(ResourceName: string): AnimationCustomTransitionSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationCustomTransitionSchema;
	static GetDefaultObject(): AnimationCustomTransitionSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationCustomTransitionSchema;
	static C(Other: UObject | any): AnimationCustomTransitionSchema;
}

declare class AnimationStateGraph extends AnimationGraph { 
	MyResultNode: AnimGraphNode_StateResult;
	static Load(ResourceName: string): AnimationStateGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationStateGraph;
	static GetDefaultObject(): AnimationStateGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateGraph;
	static C(Other: UObject | any): AnimationStateGraph;
}

declare class AnimationStateGraphSchema extends AnimationGraphSchema { 
	static Load(ResourceName: string): AnimationStateGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationStateGraphSchema;
	static GetDefaultObject(): AnimationStateGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateGraphSchema;
	static C(Other: UObject | any): AnimationStateGraphSchema;
}

declare class AnimStateEntryNode extends EdGraphNode { 
	static Load(ResourceName: string): AnimStateEntryNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateEntryNode;
	static GetDefaultObject(): AnimStateEntryNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateEntryNode;
	static C(Other: UObject | any): AnimStateEntryNode;
}

declare class AnimGraphNode_StateMachineBase extends AnimGraphNode_Base { 
	EditorStateMachineGraph: AnimationStateMachineGraph;
	static Load(ResourceName: string): AnimGraphNode_StateMachineBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_StateMachineBase;
	static GetDefaultObject(): AnimGraphNode_StateMachineBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_StateMachineBase;
	static C(Other: UObject | any): AnimGraphNode_StateMachineBase;
}

declare class AnimationStateMachineGraph extends EdGraph { 
	EntryNode: AnimStateEntryNode;
	OwnerAnimGraphNode: AnimGraphNode_StateMachineBase;
	static Load(ResourceName: string): AnimationStateMachineGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationStateMachineGraph;
	static GetDefaultObject(): AnimationStateMachineGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateMachineGraph;
	static C(Other: UObject | any): AnimationStateMachineGraph;
}

declare class AnimationStateMachineSchema extends EdGraphSchema { 
	static Load(ResourceName: string): AnimationStateMachineSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationStateMachineSchema;
	static GetDefaultObject(): AnimationStateMachineSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateMachineSchema;
	static C(Other: UObject | any): AnimationStateMachineSchema;
}

declare class AnimNode_TransitionResult extends AnimNode_Base { 
	bCanEnterTransition: boolean;
	clone() : AnimNode_TransitionResult;
	static C(Other: UObject | any): AnimNode_TransitionResult;
}

declare class AnimGraphNode_TransitionResult extends AnimGraphNode_Base { 
	UNode: AnimNode_TransitionResult;
	static Load(ResourceName: string): AnimGraphNode_TransitionResult;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TransitionResult;
	static GetDefaultObject(): AnimGraphNode_TransitionResult;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TransitionResult;
	static C(Other: UObject | any): AnimGraphNode_TransitionResult;
}

declare class AnimationTransitionGraph extends AnimationGraph { 
	MyResultNode: AnimGraphNode_TransitionResult;
	static Load(ResourceName: string): AnimationTransitionGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationTransitionGraph;
	static GetDefaultObject(): AnimationTransitionGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationTransitionGraph;
	static C(Other: UObject | any): AnimationTransitionGraph;
}

declare class AnimationTransitionSchema extends EdGraphSchema_K2 { 
	static Load(ResourceName: string): AnimationTransitionSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationTransitionSchema;
	static GetDefaultObject(): AnimationTransitionSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationTransitionSchema;
	static C(Other: UObject | any): AnimationTransitionSchema;
}

declare class AnimBlueprintPostCompileValidation extends UObject { 
	static Load(ResourceName: string): AnimBlueprintPostCompileValidation;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintPostCompileValidation;
	static GetDefaultObject(): AnimBlueprintPostCompileValidation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintPostCompileValidation;
	static C(Other: UObject | any): AnimBlueprintPostCompileValidation;
}

declare type EAnimGroupRole = 'CanBeLeader' | 'AlwaysFollower' | 'AlwaysLeader' | 'TransitionLeader' | 'TransitionFollower' | 'EAnimGroupRole_MAX';
declare var EAnimGroupRole : { CanBeLeader:'CanBeLeader',AlwaysFollower:'AlwaysFollower',AlwaysLeader:'AlwaysLeader',TransitionLeader:'TransitionLeader',TransitionFollower:'TransitionFollower',EAnimGroupRole_MAX:'EAnimGroupRole_MAX', };
declare type EAnimSyncGroupScope = 'Local' | 'Component' | 'EAnimSyncGroupScope_MAX';
declare var EAnimSyncGroupScope : { Local:'Local',Component:'Component',EAnimSyncGroupScope_MAX:'EAnimSyncGroupScope_MAX', };
declare class AnimationGroupReference { 
	GroupName: string;
	GroupRole: EAnimGroupRole;
	GroupScope: EAnimSyncGroupScope;
	clone() : AnimationGroupReference;
	static C(Other: UObject | any): AnimationGroupReference;
}

declare class AnimGraphNode_AssetPlayerBase extends AnimGraphNode_Base { 
	SyncGroup: AnimationGroupReference;
	static Load(ResourceName: string): AnimGraphNode_AssetPlayerBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_AssetPlayerBase;
	static GetDefaultObject(): AnimGraphNode_AssetPlayerBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_AssetPlayerBase;
	static C(Other: UObject | any): AnimGraphNode_AssetPlayerBase;
}

declare class AnimGraphNode_BlendSpaceBase extends AnimGraphNode_AssetPlayerBase { 
	static Load(ResourceName: string): AnimGraphNode_BlendSpaceBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendSpaceBase;
	static GetDefaultObject(): AnimGraphNode_BlendSpaceBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendSpaceBase;
	static C(Other: UObject | any): AnimGraphNode_BlendSpaceBase;
}

declare class AnimNode_AssetPlayerBase extends AnimNode_Base { 
	GroupName: string;
	GroupIndex: number;
	GroupRole: EAnimGroupRole;
	GroupScope: EAnimSyncGroupScope;
	bIgnoreForRelevancyTest: boolean;
	BlendWeight: number;
	InternalTimeAccumulator: number;
	clone() : AnimNode_AssetPlayerBase;
	static C(Other: UObject | any): AnimNode_AssetPlayerBase;
}

declare type EFilterInterpolationType = 'BSIT_Average' | 'BSIT_Linear' | 'BSIT_Cubic' | 'BSIT_MAX';
declare var EFilterInterpolationType : { BSIT_Average:'BSIT_Average',BSIT_Linear:'BSIT_Linear',BSIT_Cubic:'BSIT_Cubic',BSIT_MAX:'BSIT_MAX', };
declare class InterpolationParameter { 
	InterpolationTime: number;
	InterpolationType: EFilterInterpolationType;
	clone() : InterpolationParameter;
	static C(Other: UObject | any): InterpolationParameter;
}

declare type ENotifyTriggerMode = 'AllAnimations' | 'HighestWeightedAnimation' | 'None' | 'ENotifyTriggerMode_MAX';
declare var ENotifyTriggerMode : { AllAnimations:'AllAnimations',HighestWeightedAnimation:'HighestWeightedAnimation',None:'None',ENotifyTriggerMode_MAX:'ENotifyTriggerMode_MAX', };
declare class PerBoneInterpolation { 
	BoneReference: BoneReference;
	InterpolationSpeedPerSec: number;
	clone() : PerBoneInterpolation;
	static C(Other: UObject | any): PerBoneInterpolation;
}

declare class BlendSample { 
	Animation: AnimSequence;
	SampleValue: Vector;
	RateScale: number;
	bSnapToGrid: boolean;
	bIsValid: boolean;
	clone() : BlendSample;
	static C(Other: UObject | any): BlendSample;
}

declare class EditorElement { 
	Indices: number;
	Weights: number;
	clone() : EditorElement;
	static C(Other: UObject | any): EditorElement;
}

declare class BlendParameter { 
	DisplayName: string;
	Min: number;
	Max: number;
	GridNum: number;
	clone() : BlendParameter;
	static C(Other: UObject | any): BlendParameter;
}

declare class BlendSpaceBase extends AnimationAsset { 
	bRotationBlendInMeshSpace: boolean;
	PreviewBasePose: AnimSequence;
	AnimLength: number;
	InterpolationParam: InterpolationParameter;
	TargetWeightInterpolationSpeedPerSec: number;
	NotifyTriggerMode: ENotifyTriggerMode;
	PerBoneBlend: PerBoneInterpolation[];
	SampleIndexWithMarkers: number;
	SampleData: BlendSample[];
	GridSamples: EditorElement[];
	BlendParameters: BlendParameter;
	static Load(ResourceName: string): BlendSpaceBase;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceBase;
	static GetDefaultObject(): BlendSpaceBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceBase;
	static C(Other: UObject | any): BlendSpaceBase;
}

declare class AnimNode_BlendSpacePlayer extends AnimNode_AssetPlayerBase { 
	X: number;
	Y: number;
	Z: number;
	PlayRate: number;
	bLoop: boolean;
	bResetPlayTimeWhenBlendSpaceChanges: boolean;
	StartPosition: number;
	BlendSpace: BlendSpaceBase;
	PreviousBlendSpace: BlendSpaceBase;
	clone() : AnimNode_BlendSpacePlayer;
	static C(Other: UObject | any): AnimNode_BlendSpacePlayer;
}

declare class AnimNode_AimOffsetLookAt extends AnimNode_BlendSpacePlayer { 
	BasePose: PoseLink;
	LODThreshold: number;
	SourceSocketName: string;
	PivotSocketName: string;
	LookAtLocation: Vector;
	SocketAxis: Vector;
	Alpha: number;
	clone() : AnimNode_AimOffsetLookAt;
	static C(Other: UObject | any): AnimNode_AimOffsetLookAt;
}

declare class AnimGraphNode_AimOffsetLookAt extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_AimOffsetLookAt;
	static Load(ResourceName: string): AnimGraphNode_AimOffsetLookAt;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_AimOffsetLookAt;
	static GetDefaultObject(): AnimGraphNode_AimOffsetLookAt;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_AimOffsetLookAt;
	static C(Other: UObject | any): AnimGraphNode_AimOffsetLookAt;
}

declare class AnimGraphNode_SkeletalControlBase extends AnimGraphNode_Base { 
	static Load(ResourceName: string): AnimGraphNode_SkeletalControlBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SkeletalControlBase;
	static GetDefaultObject(): AnimGraphNode_SkeletalControlBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SkeletalControlBase;
	static C(Other: UObject | any): AnimGraphNode_SkeletalControlBase;
}

declare class ComponentSpacePoseLink extends PoseLinkBase { 
	clone() : ComponentSpacePoseLink;
	static C(Other: UObject | any): ComponentSpacePoseLink;
}

declare type EAnimAlphaInputType = 'Float' | 'Bool' | 'Curve' | 'EAnimAlphaInputType_MAX';
declare var EAnimAlphaInputType : { Float:'Float',Bool:'Bool',Curve:'Curve',EAnimAlphaInputType_MAX:'EAnimAlphaInputType_MAX', };
declare class InputScaleBias { 
	Scale: number;
	Bias: number;
	clone() : InputScaleBias;
	static C(Other: UObject | any): InputScaleBias;
}

declare class InputAlphaBoolBlend { 
	BlendInTime: number;
	BlendOutTime: number;
	BlendOption: EAlphaBlendOption;
	bInitialized: boolean;
	CustomCurve: CurveFloat;
	AlphaBlend: AlphaBlend;
	clone() : InputAlphaBoolBlend;
	static C(Other: UObject | any): InputAlphaBoolBlend;
}

declare class InputRange { 
	Min: number;
	Max: number;
	clone() : InputRange;
	static C(Other: UObject | any): InputRange;
}

declare class InputScaleBiasClamp { 
	bMapRange: boolean;
	bClampResult: boolean;
	bInterpResult: boolean;
	InRange: InputRange;
	OutRange: InputRange;
	Scale: number;
	Bias: number;
	ClampMin: number;
	ClampMax: number;
	InterpSpeedIncreasing: number;
	InterpSpeedDecreasing: number;
	clone() : InputScaleBiasClamp;
	static C(Other: UObject | any): InputScaleBiasClamp;
}

declare class AnimNode_SkeletalControlBase extends AnimNode_Base { 
	ComponentPose: ComponentSpacePoseLink;
	LODThreshold: number;
	ActualAlpha: number;
	AlphaInputType: EAnimAlphaInputType;
	bAlphaBoolEnabled: boolean;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	AlphaBoolBlend: InputAlphaBoolBlend;
	AlphaCurveName: string;
	AlphaScaleBiasClamp: InputScaleBiasClamp;
	clone() : AnimNode_SkeletalControlBase;
	static C(Other: UObject | any): AnimNode_SkeletalControlBase;
}

declare type AnimPhysLinearConstraintType = 'Free' | 'Limited' | 'AnimPhysLinearConstraintType_MAX';
declare var AnimPhysLinearConstraintType : { Free:'Free',Limited:'Limited',AnimPhysLinearConstraintType_MAX:'AnimPhysLinearConstraintType_MAX', };
declare type AnimPhysAngularConstraintType = 'Angular' | 'Cone' | 'AnimPhysAngularConstraintType_MAX';
declare var AnimPhysAngularConstraintType : { Angular:'Angular',Cone:'Cone',AnimPhysAngularConstraintType_MAX:'AnimPhysAngularConstraintType_MAX', };
declare type AnimPhysTwistAxis = 'AxisX' | 'AxisY' | 'AxisZ' | 'AnimPhysTwistAxis_MAX';
declare var AnimPhysTwistAxis : { AxisX:'AxisX',AxisY:'AxisY',AxisZ:'AxisZ',AnimPhysTwistAxis_MAX:'AnimPhysTwistAxis_MAX', };
declare class AnimPhysConstraintSetup { 
	LinearXLimitType: AnimPhysLinearConstraintType;
	LinearYLimitType: AnimPhysLinearConstraintType;
	LinearZLimitType: AnimPhysLinearConstraintType;
	LinearAxesMin: Vector;
	LinearAxesMax: Vector;
	AngularConstraintType: AnimPhysAngularConstraintType;
	TwistAxis: AnimPhysTwistAxis;
	AngularTargetAxis: AnimPhysTwistAxis;
	ConeAngle: number;
	AngularXAngle: number;
	AngularYAngle: number;
	AngularZAngle: number;
	AngularLimitsMin: Vector;
	AngularLimitsMax: Vector;
	AngularTarget: Vector;
	clone() : AnimPhysConstraintSetup;
	static C(Other: UObject | any): AnimPhysConstraintSetup;
}

declare type ESphericalLimitType = 'Inner' | 'Outer' | 'ESphericalLimitType_MAX';
declare var ESphericalLimitType : { Inner:'Inner',Outer:'Outer',ESphericalLimitType_MAX:'ESphericalLimitType_MAX', };
declare class AnimPhysSphericalLimit { 
	DrivingBone: BoneReference;
	SphereLocalOffset: Vector;
	LimitRadius: number;
	LimitType: ESphericalLimitType;
	clone() : AnimPhysSphericalLimit;
	static C(Other: UObject | any): AnimPhysSphericalLimit;
}

declare class AnimPhysPlanarLimit { 
	DrivingBone: BoneReference;
	PlaneTransform: Transform;
	clone() : AnimPhysPlanarLimit;
	static C(Other: UObject | any): AnimPhysPlanarLimit;
}

declare type AnimPhysCollisionType = 'CoM' | 'CustomSphere' | 'InnerSphere' | 'OuterSphere' | 'AnimPhysCollisionType_MAX';
declare var AnimPhysCollisionType : { CoM:'CoM',CustomSphere:'CustomSphere',InnerSphere:'InnerSphere',OuterSphere:'OuterSphere',AnimPhysCollisionType_MAX:'AnimPhysCollisionType_MAX', };
declare type AnimPhysSimSpaceType = 'Component' | 'Actor' | 'World' | 'RootRelative' | 'BoneRelative' | 'AnimPhysSimSpaceType_MAX';
declare var AnimPhysSimSpaceType : { Component:'Component',Actor:'Actor',World:'World',RootRelative:'RootRelative',BoneRelative:'BoneRelative',AnimPhysSimSpaceType_MAX:'AnimPhysSimSpaceType_MAX', };
declare type ERotationComponent = 'EulerX' | 'EulerY' | 'EulerZ' | 'QuaternionAngle' | 'SwingAngle' | 'TwistAngle' | 'ERotationComponent_MAX';
declare var ERotationComponent : { EulerX:'EulerX',EulerY:'EulerY',EulerZ:'EulerZ',QuaternionAngle:'QuaternionAngle',SwingAngle:'SwingAngle',TwistAngle:'TwistAngle',ERotationComponent_MAX:'ERotationComponent_MAX', };
declare type EEasingFuncType = 'Linear' | 'Sinusoidal' | 'Cubic' | 'QuadraticInOut' | 'CubicInOut' | 'HermiteCubic' | 'QuarticInOut' | 'QuinticInOut' | 'CircularIn' | 'CircularOut' | 'CircularInOut' | 'ExpIn' | 'ExpOut' | 'ExpInOut' | 'CustomCurve' | 'EEasingFuncType_MAX';
declare var EEasingFuncType : { Linear:'Linear',Sinusoidal:'Sinusoidal',Cubic:'Cubic',QuadraticInOut:'QuadraticInOut',CubicInOut:'CubicInOut',HermiteCubic:'HermiteCubic',QuarticInOut:'QuarticInOut',QuinticInOut:'QuinticInOut',CircularIn:'CircularIn',CircularOut:'CircularOut',CircularInOut:'CircularInOut',ExpIn:'ExpIn',ExpOut:'ExpOut',ExpInOut:'ExpInOut',CustomCurve:'CustomCurve',EEasingFuncType_MAX:'EEasingFuncType_MAX', };
declare class RotationRetargetingInfo { 
	bEnabled: boolean;
	Source: Transform;
	Target: Transform;
	RotationComponent: ERotationComponent;
	TwistAxis: Vector;
	bUseAbsoluteAngle: boolean;
	SourceMinimum: number;
	SourceMaximum: number;
	TargetMinimum: number;
	TargetMaximum: number;
	EasingType: EEasingFuncType;
	CustomCurve: RuntimeFloatCurve;
	bFlipEasing: boolean;
	EasingWeight: number;
	bClamp: boolean;
	clone() : RotationRetargetingInfo;
	static C(Other: UObject | any): RotationRetargetingInfo;
}

declare class AnimNode_AnimDynamics extends AnimNode_SkeletalControlBase { 
	LinearDampingOverride: number;
	AngularDampingOverride: number;
	RelativeSpaceBone: BoneReference;
	BoundBone: BoneReference;
	ChainEnd: BoneReference;
	BoxExtents: Vector;
	LocalJointOffset: Vector;
	GravityScale: number;
	GravityOverride: Vector;
	LinearSpringConstant: number;
	AngularSpringConstant: number;
	WindScale: number;
	ComponentLinearAccScale: Vector;
	ComponentLinearVelScale: Vector;
	ComponentAppliedLinearAccClamp: Vector;
	AngularBiasOverride: number;
	NumSolverIterationsPreUpdate: number;
	NumSolverIterationsPostUpdate: number;
	ConstraintSetup: AnimPhysConstraintSetup;
	SphericalLimits: AnimPhysSphericalLimit[];
	SphereCollisionRadius: number;
	ExternalForce: Vector;
	PlanarLimits: AnimPhysPlanarLimit[];
	CollisionType: AnimPhysCollisionType;
	SimulationSpace: AnimPhysSimSpaceType;
	bUseSphericalLimits: boolean;
	bUsePlanarLimit: boolean;
	bDoUpdate: boolean;
	bDoEval: boolean;
	bOverrideLinearDamping: boolean;
	bOverrideAngularBias: boolean;
	bOverrideAngularDamping: boolean;
	bEnableWind: boolean;
	bUseGravityOverride: boolean;
	bLinearSpring: boolean;
	bAngularSpring: boolean;
	bChain: boolean;
	RetargetingSettings: RotationRetargetingInfo;
	clone() : AnimNode_AnimDynamics;
	static C(Other: UObject | any): AnimNode_AnimDynamics;
}

declare class AnimGraphNode_AnimDynamics extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_AnimDynamics;
	bPreviewLive: boolean;
	bShowLinearLimits: boolean;
	bShowAngularLimits: boolean;
	bShowPlanarLimit: boolean;
	bShowSphericalLimit: boolean;
	bShowCollisionSpheres: boolean;
	LastPreviewComponent: SkeletalMeshComponent;
	static Load(ResourceName: string): AnimGraphNode_AnimDynamics;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_AnimDynamics;
	static GetDefaultObject(): AnimGraphNode_AnimDynamics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_AnimDynamics;
	static C(Other: UObject | any): AnimGraphNode_AnimDynamics;
}

declare class AnimNode_ApplyAdditive extends AnimNode_Base { 
	Base: PoseLink;
	Additive: PoseLink;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	LODThreshold: number;
	AlphaBoolBlend: InputAlphaBoolBlend;
	AlphaCurveName: string;
	AlphaScaleBiasClamp: InputScaleBiasClamp;
	AlphaInputType: EAnimAlphaInputType;
	bAlphaBoolEnabled: boolean;
	clone() : AnimNode_ApplyAdditive;
	static C(Other: UObject | any): AnimNode_ApplyAdditive;
}

declare class AnimGraphNode_ApplyAdditive extends AnimGraphNode_Base { 
	UNode: AnimNode_ApplyAdditive;
	static Load(ResourceName: string): AnimGraphNode_ApplyAdditive;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ApplyAdditive;
	static GetDefaultObject(): AnimGraphNode_ApplyAdditive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ApplyAdditive;
	static C(Other: UObject | any): AnimGraphNode_ApplyAdditive;
}

declare class AngularRangeLimit { 
	LimitMin: Vector;
	LimitMax: Vector;
	Bone: BoneReference;
	clone() : AngularRangeLimit;
	static C(Other: UObject | any): AngularRangeLimit;
}

declare class AnimNode_ApplyLimits extends AnimNode_SkeletalControlBase { 
	AngularRangeLimits: AngularRangeLimit[];
	AngularOffsets: Vector[];
	clone() : AnimNode_ApplyLimits;
	static C(Other: UObject | any): AnimNode_ApplyLimits;
}

declare class AnimGraphNode_ApplyLimits extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_ApplyLimits;
	static Load(ResourceName: string): AnimGraphNode_ApplyLimits;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ApplyLimits;
	static GetDefaultObject(): AnimGraphNode_ApplyLimits;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ApplyLimits;
	static C(Other: UObject | any): AnimGraphNode_ApplyLimits;
}

declare class AnimNode_ApplyMeshSpaceAdditive extends AnimNode_Base { 
	Base: PoseLink;
	Additive: PoseLink;
	AlphaInputType: EAnimAlphaInputType;
	Alpha: number;
	bAlphaBoolEnabled: boolean;
	AlphaBoolBlend: InputAlphaBoolBlend;
	AlphaCurveName: string;
	AlphaScaleBias: InputScaleBias;
	AlphaScaleBiasClamp: InputScaleBiasClamp;
	LODThreshold: number;
	clone() : AnimNode_ApplyMeshSpaceAdditive;
	static C(Other: UObject | any): AnimNode_ApplyMeshSpaceAdditive;
}

declare class AnimGraphNode_ApplyMeshSpaceAdditive extends AnimGraphNode_Base { 
	UNode: AnimNode_ApplyMeshSpaceAdditive;
	static Load(ResourceName: string): AnimGraphNode_ApplyMeshSpaceAdditive;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ApplyMeshSpaceAdditive;
	static GetDefaultObject(): AnimGraphNode_ApplyMeshSpaceAdditive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ApplyMeshSpaceAdditive;
	static C(Other: UObject | any): AnimGraphNode_ApplyMeshSpaceAdditive;
}

declare class BlendBoneByChannelEntry { 
	SourceBone: BoneReference;
	TargetBone: BoneReference;
	bBlendTranslation: boolean;
	bBlendRotation: boolean;
	bBlendScale: boolean;
	clone() : BlendBoneByChannelEntry;
	static C(Other: UObject | any): BlendBoneByChannelEntry;
}

declare type EBoneControlSpace = 'BCS_WorldSpace' | 'BCS_ComponentSpace' | 'BCS_ParentBoneSpace' | 'BCS_BoneSpace' | 'BCS_MAX';
declare var EBoneControlSpace : { BCS_WorldSpace:'BCS_WorldSpace',BCS_ComponentSpace:'BCS_ComponentSpace',BCS_ParentBoneSpace:'BCS_ParentBoneSpace',BCS_BoneSpace:'BCS_BoneSpace',BCS_MAX:'BCS_MAX', };
declare class AnimNode_BlendBoneByChannel extends AnimNode_Base { 
	A: PoseLink;
	B: PoseLink;
	BoneDefinitions: BlendBoneByChannelEntry[];
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	TransformsSpace: EBoneControlSpace;
	clone() : AnimNode_BlendBoneByChannel;
	static C(Other: UObject | any): AnimNode_BlendBoneByChannel;
}

declare class AnimGraphNode_BlendBoneByChannel extends AnimGraphNode_Base { 
	BlendNode: AnimNode_BlendBoneByChannel;
	static Load(ResourceName: string): AnimGraphNode_BlendBoneByChannel;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendBoneByChannel;
	static GetDefaultObject(): AnimGraphNode_BlendBoneByChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendBoneByChannel;
	static C(Other: UObject | any): AnimGraphNode_BlendBoneByChannel;
}

declare class AnimGraphNode_BlendListBase extends AnimGraphNode_Base { 
	static Load(ResourceName: string): AnimGraphNode_BlendListBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListBase;
	static GetDefaultObject(): AnimGraphNode_BlendListBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListBase;
	static C(Other: UObject | any): AnimGraphNode_BlendListBase;
}

declare type EBlendListTransitionType = 'StandardBlend' | 'Inertialization' | 'EBlendListTransitionType_MAX';
declare var EBlendListTransitionType : { StandardBlend:'StandardBlend',Inertialization:'Inertialization',EBlendListTransitionType_MAX:'EBlendListTransitionType_MAX', };
declare class AnimNode_BlendListBase extends AnimNode_Base { 
	BlendPose: PoseLink[];
	BlendTime: number[];
	TransitionType: EBlendListTransitionType;
	BlendType: EAlphaBlendOption;
	bResetChildOnActivation: boolean;
	CustomBlendCurve: CurveFloat;
	BlendProfile: BlendProfile;
	clone() : AnimNode_BlendListBase;
	static C(Other: UObject | any): AnimNode_BlendListBase;
}

declare class AnimNode_BlendListByBool extends AnimNode_BlendListBase { 
	bActiveValue: boolean;
	clone() : AnimNode_BlendListByBool;
	static C(Other: UObject | any): AnimNode_BlendListByBool;
}

declare class AnimGraphNode_BlendListByBool extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_BlendListByBool;
	static Load(ResourceName: string): AnimGraphNode_BlendListByBool;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListByBool;
	static GetDefaultObject(): AnimGraphNode_BlendListByBool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListByBool;
	static C(Other: UObject | any): AnimGraphNode_BlendListByBool;
}

declare class AnimNode_BlendListByEnum extends AnimNode_BlendListBase { 
	EnumToPoseIndex: number[];
	ActiveEnumValue: number;
	clone() : AnimNode_BlendListByEnum;
	static C(Other: UObject | any): AnimNode_BlendListByEnum;
}

declare class AnimGraphNode_BlendListByEnum extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_BlendListByEnum;
	BoundEnum: Enum;
	VisibleEnumEntries: string[];
	static Load(ResourceName: string): AnimGraphNode_BlendListByEnum;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListByEnum;
	static GetDefaultObject(): AnimGraphNode_BlendListByEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListByEnum;
	static C(Other: UObject | any): AnimGraphNode_BlendListByEnum;
}

declare class AnimNode_BlendListByInt extends AnimNode_BlendListBase { 
	ActiveChildIndex: number;
	clone() : AnimNode_BlendListByInt;
	static C(Other: UObject | any): AnimNode_BlendListByInt;
}

declare class AnimGraphNode_BlendListByInt extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_BlendListByInt;
	static Load(ResourceName: string): AnimGraphNode_BlendListByInt;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListByInt;
	static GetDefaultObject(): AnimGraphNode_BlendListByInt;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListByInt;
	static C(Other: UObject | any): AnimGraphNode_BlendListByInt;
}

declare class AnimNode_BlendSpaceEvaluator extends AnimNode_BlendSpacePlayer { 
	NormalizedTime: number;
	clone() : AnimNode_BlendSpaceEvaluator;
	static C(Other: UObject | any): AnimNode_BlendSpaceEvaluator;
}

declare class AnimGraphNode_BlendSpaceEvaluator extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_BlendSpaceEvaluator;
	static Load(ResourceName: string): AnimGraphNode_BlendSpaceEvaluator;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendSpaceEvaluator;
	static GetDefaultObject(): AnimGraphNode_BlendSpaceEvaluator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendSpaceEvaluator;
	static C(Other: UObject | any): AnimGraphNode_BlendSpaceEvaluator;
}

declare class AnimGraphNode_BlendSpacePlayer extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_BlendSpacePlayer;
	static Load(ResourceName: string): AnimGraphNode_BlendSpacePlayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendSpacePlayer;
	static GetDefaultObject(): AnimGraphNode_BlendSpacePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendSpacePlayer;
	static C(Other: UObject | any): AnimGraphNode_BlendSpacePlayer;
}

declare type EComponentType = 'None' | 'TranslationX' | 'TranslationY' | 'TranslationZ' | 'RotationX' | 'RotationY' | 'RotationZ' | 'Scale' | 'ScaleX' | 'ScaleY' | 'ScaleZ' | 'EComponentType_MAX';
declare var EComponentType : { None:'None',TranslationX:'TranslationX',TranslationY:'TranslationY',TranslationZ:'TranslationZ',RotationX:'RotationX',RotationY:'RotationY',RotationZ:'RotationZ',Scale:'Scale',ScaleX:'ScaleX',ScaleY:'ScaleY',ScaleZ:'ScaleZ',EComponentType_MAX:'EComponentType_MAX', };
declare type EDrivenDestinationMode = 'Bone' | 'MorphTarget' | 'MaterialParameter' | 'EDrivenDestinationMode_MAX';
declare var EDrivenDestinationMode : { Bone:'Bone',MorphTarget:'MorphTarget',MaterialParameter:'MaterialParameter',EDrivenDestinationMode_MAX:'EDrivenDestinationMode_MAX', };
declare type EDrivenBoneModificationMode = 'AddToInput' | 'ReplaceComponent' | 'AddToRefPose' | 'EDrivenBoneModificationMode_MAX';
declare var EDrivenBoneModificationMode : { AddToInput:'AddToInput',ReplaceComponent:'ReplaceComponent',AddToRefPose:'AddToRefPose',EDrivenBoneModificationMode_MAX:'EDrivenBoneModificationMode_MAX', };
declare class AnimNode_BoneDrivenController extends AnimNode_SkeletalControlBase { 
	SourceBone: BoneReference;
	DrivingCurve: CurveFloat;
	Multiplier: number;
	RangeMin: number;
	RangeMax: number;
	RemappedMin: number;
	RemappedMax: number;
	ParameterName: string;
	TargetBone: BoneReference;
	TargetComponent: EComponentType;
	DestinationMode: EDrivenDestinationMode;
	ModificationMode: EDrivenBoneModificationMode;
	SourceComponent: EComponentType;
	bUseRange: boolean;
	bAffectTargetTranslationX: boolean;
	bAffectTargetTranslationY: boolean;
	bAffectTargetTranslationZ: boolean;
	bAffectTargetRotationX: boolean;
	bAffectTargetRotationY: boolean;
	bAffectTargetRotationZ: boolean;
	bAffectTargetScaleX: boolean;
	bAffectTargetScaleY: boolean;
	bAffectTargetScaleZ: boolean;
	clone() : AnimNode_BoneDrivenController;
	static C(Other: UObject | any): AnimNode_BoneDrivenController;
}

declare class AnimGraphNode_BoneDrivenController extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_BoneDrivenController;
	static Load(ResourceName: string): AnimGraphNode_BoneDrivenController;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BoneDrivenController;
	static GetDefaultObject(): AnimGraphNode_BoneDrivenController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BoneDrivenController;
	static C(Other: UObject | any): AnimGraphNode_BoneDrivenController;
}

declare class SocketReference { 
	SocketName: string;
	clone() : SocketReference;
	static C(Other: UObject | any): SocketReference;
}

declare class BoneSocketTarget { 
	bUseSocket: boolean;
	BoneReference: BoneReference;
	SocketReference: SocketReference;
	clone() : BoneSocketTarget;
	static C(Other: UObject | any): BoneSocketTarget;
}

declare class AnimNode_CCDIK extends AnimNode_SkeletalControlBase { 
	EffectorLocation: Vector;
	EffectorLocationSpace: EBoneControlSpace;
	EffectorTarget: BoneSocketTarget;
	TipBone: BoneReference;
	RootBone: BoneReference;
	Precision: number;
	MaxIterations: number;
	bStartFromTail: boolean;
	bEnableRotationLimit: boolean;
	RotationLimitPerJoints: number[];
	clone() : AnimNode_CCDIK;
	static C(Other: UObject | any): AnimNode_CCDIK;
}

declare class AnimGraphNode_CCDIK extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_CCDIK;
	static Load(ResourceName: string): AnimGraphNode_CCDIK;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CCDIK;
	static GetDefaultObject(): AnimGraphNode_CCDIK;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CCDIK;
	static C(Other: UObject | any): AnimGraphNode_CCDIK;
}

declare class AnimNode_ConvertComponentToLocalSpace extends AnimNode_Base { 
	ComponentPose: ComponentSpacePoseLink;
	clone() : AnimNode_ConvertComponentToLocalSpace;
	static C(Other: UObject | any): AnimNode_ConvertComponentToLocalSpace;
}

declare class AnimGraphNode_ComponentToLocalSpace extends AnimGraphNode_Base { 
	UNode: AnimNode_ConvertComponentToLocalSpace;
	static Load(ResourceName: string): AnimGraphNode_ComponentToLocalSpace;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ComponentToLocalSpace;
	static GetDefaultObject(): AnimGraphNode_ComponentToLocalSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ComponentToLocalSpace;
	static C(Other: UObject | any): AnimGraphNode_ComponentToLocalSpace;
}

declare type EConstraintOffsetOption = 'None' | 'Offset_RefPose' | 'EConstraintOffsetOption_MAX';
declare var EConstraintOffsetOption : { None:'None',Offset_RefPose:'Offset_RefPose',EConstraintOffsetOption_MAX:'EConstraintOffsetOption_MAX', };
declare type ETransformConstraintType = 'Translation' | 'Rotation' | 'Scale' | 'Parent' | 'ETransformConstraintType_MAX';
declare var ETransformConstraintType : { Translation:'Translation',Rotation:'Rotation',Scale:'Scale',Parent:'Parent',ETransformConstraintType_MAX:'ETransformConstraintType_MAX', };
declare class FilterOptionPerAxis { 
	bX: boolean;
	bY: boolean;
	bZ: boolean;
	clone() : FilterOptionPerAxis;
	static C(Other: UObject | any): FilterOptionPerAxis;
}

declare class Constraint { 
	TargetBone: BoneReference;
	OffsetOption: EConstraintOffsetOption;
	TransformType: ETransformConstraintType;
	PerAxis: FilterOptionPerAxis;
	clone() : Constraint;
	static C(Other: UObject | any): Constraint;
}

declare class AnimNode_Constraint extends AnimNode_SkeletalControlBase { 
	BoneToModify: BoneReference;
	ConstraintSetup: Constraint[];
	ConstraintWeights: number[];
	clone() : AnimNode_Constraint;
	static C(Other: UObject | any): AnimNode_Constraint;
}

declare class AnimGraphNode_Constraint extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_Constraint;
	static Load(ResourceName: string): AnimGraphNode_Constraint;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Constraint;
	static GetDefaultObject(): AnimGraphNode_Constraint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Constraint;
	static C(Other: UObject | any): AnimGraphNode_Constraint;
}

declare class AnimNode_CopyBone extends AnimNode_SkeletalControlBase { 
	SourceBone: BoneReference;
	TargetBone: BoneReference;
	bCopyTranslation: boolean;
	bCopyRotation: boolean;
	bCopyScale: boolean;
	ControlSpace: EBoneControlSpace;
	clone() : AnimNode_CopyBone;
	static C(Other: UObject | any): AnimNode_CopyBone;
}

declare class AnimGraphNode_CopyBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_CopyBone;
	static Load(ResourceName: string): AnimGraphNode_CopyBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CopyBone;
	static GetDefaultObject(): AnimGraphNode_CopyBone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CopyBone;
	static C(Other: UObject | any): AnimGraphNode_CopyBone;
}

declare type CopyBoneDeltaMode = 'Accumulate' | 'Copy' | 'CopyBoneDeltaMode_MAX';
declare var CopyBoneDeltaMode : { Accumulate:'Accumulate',Copy:'Copy',CopyBoneDeltaMode_MAX:'CopyBoneDeltaMode_MAX', };
declare class AnimNode_CopyBoneDelta extends AnimNode_SkeletalControlBase { 
	SourceBone: BoneReference;
	TargetBone: BoneReference;
	bCopyTranslation: boolean;
	bCopyRotation: boolean;
	bCopyScale: boolean;
	CopyMode: CopyBoneDeltaMode;
	TranslationMultiplier: number;
	RotationMultiplier: number;
	ScaleMultiplier: number;
	clone() : AnimNode_CopyBoneDelta;
	static C(Other: UObject | any): AnimNode_CopyBoneDelta;
}

declare class AnimGraphNode_CopyBoneDelta extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_CopyBoneDelta;
	static Load(ResourceName: string): AnimGraphNode_CopyBoneDelta;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CopyBoneDelta;
	static GetDefaultObject(): AnimGraphNode_CopyBoneDelta;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CopyBoneDelta;
	static C(Other: UObject | any): AnimGraphNode_CopyBoneDelta;
}

declare class AnimNode_CopyPoseFromMesh extends AnimNode_Base { 
	SourceMeshComponent: any;
	bUseAttachedParent: boolean;
	bCopyCurves: boolean;
	bCopyCustomAttributes: boolean;
	bUseMeshPose: boolean;
	RootBoneToCopy: string;
	clone() : AnimNode_CopyPoseFromMesh;
	static C(Other: UObject | any): AnimNode_CopyPoseFromMesh;
}

declare class AnimGraphNode_CopyPoseFromMesh extends AnimGraphNode_Base { 
	UNode: AnimNode_CopyPoseFromMesh;
	static Load(ResourceName: string): AnimGraphNode_CopyPoseFromMesh;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CopyPoseFromMesh;
	static GetDefaultObject(): AnimGraphNode_CopyPoseFromMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CopyPoseFromMesh;
	static C(Other: UObject | any): AnimGraphNode_CopyPoseFromMesh;
}

declare class AnimNode_CurveSource extends AnimNode_Base { 
	SourcePose: PoseLink;
	SourceBinding: string;
	Alpha: number;
	CurveSource: any;
	clone() : AnimNode_CurveSource;
	static C(Other: UObject | any): AnimNode_CurveSource;
}

declare class AnimGraphNode_CurveSource extends AnimGraphNode_Base { 
	UNode: AnimNode_CurveSource;
	static Load(ResourceName: string): AnimGraphNode_CurveSource;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CurveSource;
	static GetDefaultObject(): AnimGraphNode_CurveSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CurveSource;
	static C(Other: UObject | any): AnimGraphNode_CurveSource;
}

declare class AnimGraphNode_CustomProperty extends AnimGraphNode_Base { 
	KnownExposableProperties: string[];
	ExposedPropertyNames: string[];
	static Load(ResourceName: string): AnimGraphNode_CustomProperty;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CustomProperty;
	static GetDefaultObject(): AnimGraphNode_CustomProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CustomProperty;
	static C(Other: UObject | any): AnimGraphNode_CustomProperty;
}

declare type EBoneRotationSource = 'BRS_KeepComponentSpaceRotation' | 'BRS_KeepLocalSpaceRotation' | 'BRS_CopyFromTarget' | 'BRS_MAX';
declare var EBoneRotationSource : { BRS_KeepComponentSpaceRotation:'BRS_KeepComponentSpaceRotation',BRS_KeepLocalSpaceRotation:'BRS_KeepLocalSpaceRotation',BRS_CopyFromTarget:'BRS_CopyFromTarget',BRS_MAX:'BRS_MAX', };
declare class AnimNode_Fabrik extends AnimNode_SkeletalControlBase { 
	EffectorTransform: Transform;
	EffectorTarget: BoneSocketTarget;
	TipBone: BoneReference;
	RootBone: BoneReference;
	Precision: number;
	MaxIterations: number;
	EffectorTransformSpace: EBoneControlSpace;
	EffectorRotationSource: EBoneRotationSource;
	bEnableDebugDraw: boolean;
	EffectorTransformBone: BoneReference;
	clone() : AnimNode_Fabrik;
	static C(Other: UObject | any): AnimNode_Fabrik;
}

declare class AnimGraphNode_Fabrik extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_Fabrik;
	static Load(ResourceName: string): AnimGraphNode_Fabrik;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Fabrik;
	static GetDefaultObject(): AnimGraphNode_Fabrik;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Fabrik;
	static C(Other: UObject | any): AnimGraphNode_Fabrik;
}

declare class AnimNode_HandIKRetargeting extends AnimNode_SkeletalControlBase { 
	RightHandFK: BoneReference;
	LeftHandFK: BoneReference;
	RightHandIK: BoneReference;
	LeftHandIK: BoneReference;
	IKBonesToMove: BoneReference[];
	HandFKWeight: number;
	clone() : AnimNode_HandIKRetargeting;
	static C(Other: UObject | any): AnimNode_HandIKRetargeting;
}

declare class AnimGraphNode_HandIKRetargeting extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_HandIKRetargeting;
	static Load(ResourceName: string): AnimGraphNode_HandIKRetargeting;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_HandIKRetargeting;
	static GetDefaultObject(): AnimGraphNode_HandIKRetargeting;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_HandIKRetargeting;
	static C(Other: UObject | any): AnimGraphNode_HandIKRetargeting;
}

declare type ERefPoseType = 'EIT_LocalSpace' | 'EIT_Additive' | 'EIT_MAX';
declare var ERefPoseType : { EIT_LocalSpace:'EIT_LocalSpace',EIT_Additive:'EIT_Additive',EIT_MAX:'EIT_MAX', };
declare class AnimNode_RefPose extends AnimNode_Base { 
	RefPoseType: ERefPoseType;
	clone() : AnimNode_RefPose;
	static C(Other: UObject | any): AnimNode_RefPose;
}

declare class AnimGraphNode_RefPoseBase extends AnimGraphNode_Base { 
	UNode: AnimNode_RefPose;
	static Load(ResourceName: string): AnimGraphNode_RefPoseBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RefPoseBase;
	static GetDefaultObject(): AnimGraphNode_RefPoseBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RefPoseBase;
	static C(Other: UObject | any): AnimGraphNode_RefPoseBase;
}

declare class AnimGraphNode_IdentityPose extends AnimGraphNode_RefPoseBase { 
	static Load(ResourceName: string): AnimGraphNode_IdentityPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_IdentityPose;
	static GetDefaultObject(): AnimGraphNode_IdentityPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_IdentityPose;
	static C(Other: UObject | any): AnimGraphNode_IdentityPose;
}

declare class AnimNode_Inertialization extends AnimNode_Base { 
	Source: PoseLink;
	clone() : AnimNode_Inertialization;
	static C(Other: UObject | any): AnimNode_Inertialization;
}

declare class AnimGraphNode_Inertialization extends AnimGraphNode_Base { 
	UNode: AnimNode_Inertialization;
	static Load(ResourceName: string): AnimGraphNode_Inertialization;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Inertialization;
	static GetDefaultObject(): AnimGraphNode_Inertialization;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Inertialization;
	static C(Other: UObject | any): AnimGraphNode_Inertialization;
}

declare class BranchFilter { 
	BoneName: string;
	BlendDepth: number;
	clone() : BranchFilter;
	static C(Other: UObject | any): BranchFilter;
}

declare class InputBlendPose { 
	BranchFilters: BranchFilter[];
	clone() : InputBlendPose;
	static C(Other: UObject | any): InputBlendPose;
}

declare type ECurveBlendOption = 'Override' | 'DoNotOverride' | 'NormalizeByWeight' | 'BlendByWeight' | 'UseBasePose' | 'UseMaxValue' | 'UseMinValue' | 'ECurveBlendOption_MAX';
declare var ECurveBlendOption : { Override:'Override',DoNotOverride:'DoNotOverride',NormalizeByWeight:'NormalizeByWeight',BlendByWeight:'BlendByWeight',UseBasePose:'UseBasePose',UseMaxValue:'UseMaxValue',UseMinValue:'UseMinValue',ECurveBlendOption_MAX:'ECurveBlendOption_MAX', };
declare class PerBoneBlendWeight { 
	SourceIndex: number;
	BlendWeight: number;
	clone() : PerBoneBlendWeight;
	static C(Other: UObject | any): PerBoneBlendWeight;
}

declare class AnimNode_LayeredBoneBlend extends AnimNode_Base { 
	BasePose: PoseLink;
	BlendPoses: PoseLink[];
	LayerSetup: InputBlendPose[];
	BlendWeights: number[];
	bMeshSpaceRotationBlend: boolean;
	bMeshSpaceScaleBlend: boolean;
	CurveBlendOption: ECurveBlendOption;
	bBlendRootMotionBasedOnRootBone: boolean;
	LODThreshold: number;
	PerBoneBlendWeights: PerBoneBlendWeight[];
	SkeletonGuid: Guid;
	VirtualBoneGuid: Guid;
	clone() : AnimNode_LayeredBoneBlend;
	static C(Other: UObject | any): AnimNode_LayeredBoneBlend;
}

declare class AnimGraphNode_LayeredBoneBlend extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_LayeredBoneBlend;
	static Load(ResourceName: string): AnimGraphNode_LayeredBoneBlend;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LayeredBoneBlend;
	static GetDefaultObject(): AnimGraphNode_LayeredBoneBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LayeredBoneBlend;
	static C(Other: UObject | any): AnimGraphNode_LayeredBoneBlend;
}

declare class AnimLegIKDefinition { 
	IKFootBone: BoneReference;
	FKFootBone: BoneReference;
	NumBonesInLimb: number;
	MinRotationAngle: number;
	FootBoneForwardAxis: EAxis;
	HingeRotationAxis: EAxis;
	bEnableRotationLimit: boolean;
	bEnableKneeTwistCorrection: boolean;
	clone() : AnimLegIKDefinition;
	static C(Other: UObject | any): AnimLegIKDefinition;
}

declare class AnimNode_LegIK extends AnimNode_SkeletalControlBase { 
	ReachPrecision: number;
	MaxIterations: number;
	LegsDefinition: AnimLegIKDefinition[];
	clone() : AnimNode_LegIK;
	static C(Other: UObject | any): AnimNode_LegIK;
}

declare class AnimGraphNode_LegIK extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_LegIK;
	static Load(ResourceName: string): AnimGraphNode_LegIK;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LegIK;
	static GetDefaultObject(): AnimGraphNode_LegIK;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LegIK;
	static C(Other: UObject | any): AnimGraphNode_LegIK;
}

declare class AnimGraphNode_LinkedAnimGraphBase extends AnimGraphNode_CustomProperty { 
	static Load(ResourceName: string): AnimGraphNode_LinkedAnimGraphBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LinkedAnimGraphBase;
	static GetDefaultObject(): AnimGraphNode_LinkedAnimGraphBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LinkedAnimGraphBase;
	static C(Other: UObject | any): AnimGraphNode_LinkedAnimGraphBase;
}

declare class AnimNode_CustomProperty extends AnimNode_Base { 
	SourcePropertyNames: string[];
	DestPropertyNames: string[];
	TargetInstance: UObject;
	clone() : AnimNode_CustomProperty;
	static C(Other: UObject | any): AnimNode_CustomProperty;
}

declare class AnimNode_LinkedAnimGraph extends AnimNode_CustomProperty { 
	InputPoses: PoseLink[];
	InputPoseNames: string[];
	InstanceClass: UnrealEngineClass;
	Tag: string;
	bReceiveNotifiesFromLinkedInstances: boolean;
	bPropagateNotifiesToLinkedInstances: boolean;
	clone() : AnimNode_LinkedAnimGraph;
	static C(Other: UObject | any): AnimNode_LinkedAnimGraph;
}

declare class AnimGraphNode_LinkedAnimGraph extends AnimGraphNode_LinkedAnimGraphBase { 
	UNode: AnimNode_LinkedAnimGraph;
	static Load(ResourceName: string): AnimGraphNode_LinkedAnimGraph;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LinkedAnimGraph;
	static GetDefaultObject(): AnimGraphNode_LinkedAnimGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LinkedAnimGraph;
	static C(Other: UObject | any): AnimGraphNode_LinkedAnimGraph;
}

declare class AnimLayerInterface extends Interface { 
	static Load(ResourceName: string): AnimLayerInterface;
	static Find(Outer: UObject, ResourceName: string): AnimLayerInterface;
	static GetDefaultObject(): AnimLayerInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimLayerInterface;
	static C(Other: UObject | any): AnimLayerInterface;
}

declare class AnimNode_LinkedAnimLayer extends AnimNode_LinkedAnimGraph { 
	Interface: UnrealEngineClass;
	Layer: string;
	clone() : AnimNode_LinkedAnimLayer;
	static C(Other: UObject | any): AnimNode_LinkedAnimLayer;
}

declare class AnimGraphNode_LinkedAnimLayer extends AnimGraphNode_LinkedAnimGraphBase { 
	UNode: AnimNode_LinkedAnimLayer;
	InterfaceGuid: Guid;
	static Load(ResourceName: string): AnimGraphNode_LinkedAnimLayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LinkedAnimLayer;
	static GetDefaultObject(): AnimGraphNode_LinkedAnimLayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LinkedAnimLayer;
	static C(Other: UObject | any): AnimGraphNode_LinkedAnimLayer;
}

declare class AnimNode_LinkedInputPose extends AnimNode_Base { 
	Name: string;
	Graph: string;
	InputPose: PoseLink;
	clone() : AnimNode_LinkedInputPose;
	static C(Other: UObject | any): AnimNode_LinkedInputPose;
}

declare class AnimBlueprintFunctionPinInfo { 
	Name: string;
	Type: EdGraphPinType;
	clone() : AnimBlueprintFunctionPinInfo;
	static C(Other: UObject | any): AnimBlueprintFunctionPinInfo;
}

declare class AnimGraphNode_LinkedInputPose extends AnimGraphNode_Base { 
	UNode: AnimNode_LinkedInputPose;
	Inputs: AnimBlueprintFunctionPinInfo[];
	FunctionReference: MemberReference;
	InputPoseIndex: number;
	static Load(ResourceName: string): AnimGraphNode_LinkedInputPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LinkedInputPose;
	static GetDefaultObject(): AnimGraphNode_LinkedInputPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LinkedInputPose;
	static C(Other: UObject | any): AnimGraphNode_LinkedInputPose;
}

declare class AnimGraphNode_LocalRefPose extends AnimGraphNode_RefPoseBase { 
	static Load(ResourceName: string): AnimGraphNode_LocalRefPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LocalRefPose;
	static GetDefaultObject(): AnimGraphNode_LocalRefPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LocalRefPose;
	static C(Other: UObject | any): AnimGraphNode_LocalRefPose;
}

declare class AnimNode_ConvertLocalToComponentSpace extends AnimNode_Base { 
	LocalPose: PoseLink;
	clone() : AnimNode_ConvertLocalToComponentSpace;
	static C(Other: UObject | any): AnimNode_ConvertLocalToComponentSpace;
}

declare class AnimGraphNode_LocalToComponentSpace extends AnimGraphNode_Base { 
	UNode: AnimNode_ConvertLocalToComponentSpace;
	static Load(ResourceName: string): AnimGraphNode_LocalToComponentSpace;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LocalToComponentSpace;
	static GetDefaultObject(): AnimGraphNode_LocalToComponentSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LocalToComponentSpace;
	static C(Other: UObject | any): AnimGraphNode_LocalToComponentSpace;
}

declare class Axis { 
	Axis: Vector;
	bInLocalSpace: boolean;
	clone() : Axis;
	static C(Other: UObject | any): Axis;
}

declare type EInterpolationBlend = 'Linear' | 'Cubic' | 'Sinusoidal' | 'EaseInOutExponent2' | 'EaseInOutExponent3' | 'EaseInOutExponent4' | 'EaseInOutExponent5' | 'MAX';
declare var EInterpolationBlend : { Linear:'Linear',Cubic:'Cubic',Sinusoidal:'Sinusoidal',EaseInOutExponent2:'EaseInOutExponent2',EaseInOutExponent3:'EaseInOutExponent3',EaseInOutExponent4:'EaseInOutExponent4',EaseInOutExponent5:'EaseInOutExponent5',MAX:'MAX', };
declare type EAxisOption = 'X' | 'Y' | 'Z' | 'X_Neg' | 'Y_Neg' | 'Z_Neg' | 'Custom' | 'EAxisOption_MAX';
declare var EAxisOption : { X:'X',Y:'Y',Z:'Z',X_Neg:'X_Neg',Y_Neg:'Y_Neg',Z_Neg:'Z_Neg',Custom:'Custom',EAxisOption_MAX:'EAxisOption_MAX', };
declare class AnimNode_LookAt extends AnimNode_SkeletalControlBase { 
	BoneToModify: BoneReference;
	LookAtTarget: BoneSocketTarget;
	LookAtLocation: Vector;
	LookAt_Axis: Axis;
	bUseLookUpAxis: boolean;
	InterpolationType: EInterpolationBlend;
	LookUp_Axis: Axis;
	LookAtClamp: number;
	InterpolationTime: number;
	InterpolationTriggerThreashold: number;
	LookAtBone: BoneReference;
	LookAtSocket: string;
	LookAtAxis: EAxisOption;
	CustomLookAtAxis: Vector;
	LookUpAxis: EAxisOption;
	CustomLookUpAxis: Vector;
	clone() : AnimNode_LookAt;
	static C(Other: UObject | any): AnimNode_LookAt;
}

declare class AnimGraphNode_LookAt extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_LookAt;
	static Load(ResourceName: string): AnimGraphNode_LookAt;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LookAt;
	static GetDefaultObject(): AnimGraphNode_LookAt;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LookAt;
	static C(Other: UObject | any): AnimGraphNode_LookAt;
}

declare class AnimNode_MakeDynamicAdditive extends AnimNode_Base { 
	Base: PoseLink;
	Additive: PoseLink;
	bMeshSpaceAdditive: boolean;
	clone() : AnimNode_MakeDynamicAdditive;
	static C(Other: UObject | any): AnimNode_MakeDynamicAdditive;
}

declare class AnimGraphNode_MakeDynamicAdditive extends AnimGraphNode_Base { 
	UNode: AnimNode_MakeDynamicAdditive;
	static Load(ResourceName: string): AnimGraphNode_MakeDynamicAdditive;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_MakeDynamicAdditive;
	static GetDefaultObject(): AnimGraphNode_MakeDynamicAdditive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_MakeDynamicAdditive;
	static C(Other: UObject | any): AnimGraphNode_MakeDynamicAdditive;
}

declare class AnimNode_MeshSpaceRefPose extends AnimNode_Base { 
	clone() : AnimNode_MeshSpaceRefPose;
	static C(Other: UObject | any): AnimNode_MeshSpaceRefPose;
}

declare class AnimGraphNode_MeshRefPose extends AnimGraphNode_Base { 
	UNode: AnimNode_MeshSpaceRefPose;
	static Load(ResourceName: string): AnimGraphNode_MeshRefPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_MeshRefPose;
	static GetDefaultObject(): AnimGraphNode_MeshRefPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_MeshRefPose;
	static C(Other: UObject | any): AnimGraphNode_MeshRefPose;
}

declare type EBoneModificationMode = 'BMM_Ignore' | 'BMM_Replace' | 'BMM_Additive' | 'BMM_MAX';
declare var EBoneModificationMode : { BMM_Ignore:'BMM_Ignore',BMM_Replace:'BMM_Replace',BMM_Additive:'BMM_Additive',BMM_MAX:'BMM_MAX', };
declare class AnimNode_ModifyBone extends AnimNode_SkeletalControlBase { 
	BoneToModify: BoneReference;
	Translation: Vector;
	Rotation: Rotator;
	Scale: Vector;
	TranslationMode: EBoneModificationMode;
	RotationMode: EBoneModificationMode;
	ScaleMode: EBoneModificationMode;
	TranslationSpace: EBoneControlSpace;
	RotationSpace: EBoneControlSpace;
	ScaleSpace: EBoneControlSpace;
	clone() : AnimNode_ModifyBone;
	static C(Other: UObject | any): AnimNode_ModifyBone;
}

declare class AnimGraphNode_ModifyBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_ModifyBone;
	static Load(ResourceName: string): AnimGraphNode_ModifyBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ModifyBone;
	static GetDefaultObject(): AnimGraphNode_ModifyBone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ModifyBone;
	static C(Other: UObject | any): AnimGraphNode_ModifyBone;
}

declare type EModifyCurveApplyMode = 'Add' | 'Scale' | 'Blend' | 'WeightedMovingAverage' | 'RemapCurve' | 'EModifyCurveApplyMode_MAX';
declare var EModifyCurveApplyMode : { Add:'Add',Scale:'Scale',Blend:'Blend',WeightedMovingAverage:'WeightedMovingAverage',RemapCurve:'RemapCurve',EModifyCurveApplyMode_MAX:'EModifyCurveApplyMode_MAX', };
declare class AnimNode_ModifyCurve extends AnimNode_Base { 
	SourcePose: PoseLink;
	CurveValues: number[];
	CurveNames: string[];
	Alpha: number;
	ApplyMode: EModifyCurveApplyMode;
	clone() : AnimNode_ModifyCurve;
	static C(Other: UObject | any): AnimNode_ModifyCurve;
}

declare class AnimGraphNode_ModifyCurve extends AnimGraphNode_Base { 
	UNode: AnimNode_ModifyCurve;
	static Load(ResourceName: string): AnimGraphNode_ModifyCurve;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ModifyCurve;
	static GetDefaultObject(): AnimGraphNode_ModifyCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ModifyCurve;
	static C(Other: UObject | any): AnimGraphNode_ModifyCurve;
}

declare class AnimNode_MultiWayBlend extends AnimNode_Base { 
	Poses: PoseLink[];
	DesiredAlphas: number[];
	AlphaScaleBias: InputScaleBias;
	bAdditiveNode: boolean;
	bNormalizeAlpha: boolean;
	clone() : AnimNode_MultiWayBlend;
	static C(Other: UObject | any): AnimNode_MultiWayBlend;
}

declare class AnimGraphNode_MultiWayBlend extends AnimGraphNode_Base { 
	UNode: AnimNode_MultiWayBlend;
	static Load(ResourceName: string): AnimGraphNode_MultiWayBlend;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_MultiWayBlend;
	static GetDefaultObject(): AnimGraphNode_MultiWayBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_MultiWayBlend;
	static C(Other: UObject | any): AnimGraphNode_MultiWayBlend;
}

declare class AnimNode_ObserveBone extends AnimNode_SkeletalControlBase { 
	BoneToObserve: BoneReference;
	DisplaySpace: EBoneControlSpace;
	bRelativeToRefPose: boolean;
	Translation: Vector;
	Rotation: Rotator;
	Scale: Vector;
	clone() : AnimNode_ObserveBone;
	static C(Other: UObject | any): AnimNode_ObserveBone;
}

declare class AnimGraphNode_ObserveBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_ObserveBone;
	static Load(ResourceName: string): AnimGraphNode_ObserveBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ObserveBone;
	static GetDefaultObject(): AnimGraphNode_ObserveBone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ObserveBone;
	static C(Other: UObject | any): AnimGraphNode_ObserveBone;
}

declare class AnimGraphNode_PoseHandler extends AnimGraphNode_AssetPlayerBase { 
	static Load(ResourceName: string): AnimGraphNode_PoseHandler;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseHandler;
	static GetDefaultObject(): AnimGraphNode_PoseHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseHandler;
	static C(Other: UObject | any): AnimGraphNode_PoseHandler;
}

declare class AnimNode_PoseHandler extends AnimNode_AssetPlayerBase { 
	PoseAsset: PoseAsset;
	clone() : AnimNode_PoseHandler;
	static C(Other: UObject | any): AnimNode_PoseHandler;
}

declare class AnimNode_PoseBlendNode extends AnimNode_PoseHandler { 
	SourcePose: PoseLink;
	BlendOption: EAlphaBlendOption;
	CustomCurve: CurveFloat;
	clone() : AnimNode_PoseBlendNode;
	static C(Other: UObject | any): AnimNode_PoseBlendNode;
}

declare class AnimGraphNode_PoseBlendNode extends AnimGraphNode_PoseHandler { 
	UNode: AnimNode_PoseBlendNode;
	static Load(ResourceName: string): AnimGraphNode_PoseBlendNode;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseBlendNode;
	static GetDefaultObject(): AnimGraphNode_PoseBlendNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseBlendNode;
	static C(Other: UObject | any): AnimGraphNode_PoseBlendNode;
}

declare class AnimNode_PoseByName extends AnimNode_PoseHandler { 
	PoseName: string;
	PoseWeight: number;
	clone() : AnimNode_PoseByName;
	static C(Other: UObject | any): AnimNode_PoseByName;
}

declare class AnimGraphNode_PoseByName extends AnimGraphNode_AssetPlayerBase { 
	UNode: AnimNode_PoseByName;
	static Load(ResourceName: string): AnimGraphNode_PoseByName;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseByName;
	static GetDefaultObject(): AnimGraphNode_PoseByName;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseByName;
	static C(Other: UObject | any): AnimGraphNode_PoseByName;
}

declare class PoseDriverTransform { 
	TargetTranslation: Vector;
	TargetRotation: Rotator;
	clone() : PoseDriverTransform;
	static C(Other: UObject | any): PoseDriverTransform;
}

declare type ERBFDistanceMethod = 'Euclidean' | 'Quaternion' | 'SwingAngle' | 'TwistAngle' | 'DefaultMethod' | 'ERBFDistanceMethod_MAX';
declare var ERBFDistanceMethod : { Euclidean:'Euclidean',Quaternion:'Quaternion',SwingAngle:'SwingAngle',TwistAngle:'TwistAngle',DefaultMethod:'DefaultMethod',ERBFDistanceMethod_MAX:'ERBFDistanceMethod_MAX', };
declare type ERBFFunctionType = 'Gaussian' | 'Exponential' | 'Linear' | 'Cubic' | 'Quintic' | 'DefaultFunction' | 'ERBFFunctionType_MAX';
declare var ERBFFunctionType : { Gaussian:'Gaussian',Exponential:'Exponential',Linear:'Linear',Cubic:'Cubic',Quintic:'Quintic',DefaultFunction:'DefaultFunction',ERBFFunctionType_MAX:'ERBFFunctionType_MAX', };
declare class PoseDriverTarget { 
	BoneTransforms: PoseDriverTransform[];
	TargetRotation: Rotator;
	TargetScale: number;
	DistanceMethod: ERBFDistanceMethod;
	FunctionType: ERBFFunctionType;
	bApplyCustomCurve: boolean;
	CustomCurve: RichCurve;
	DrivenName: string;
	bIsHidden: boolean;
	clone() : PoseDriverTarget;
	static C(Other: UObject | any): PoseDriverTarget;
}

declare type ERBFSolverType = 'Additive' | 'Interpolative' | 'ERBFSolverType_MAX';
declare var ERBFSolverType : { Additive:'Additive',Interpolative:'Interpolative',ERBFSolverType_MAX:'ERBFSolverType_MAX', };
declare type EBoneAxis = 'BA_X' | 'BA_Y' | 'BA_Z' | 'BA_MAX';
declare var EBoneAxis : { BA_X:'BA_X',BA_Y:'BA_Y',BA_Z:'BA_Z',BA_MAX:'BA_MAX', };
declare type ERBFNormalizeMethod = 'OnlyNormalizeAboveOne' | 'AlwaysNormalize' | 'NormalizeWithinMedian' | 'NoNormalization' | 'ERBFNormalizeMethod_MAX';
declare var ERBFNormalizeMethod : { OnlyNormalizeAboveOne:'OnlyNormalizeAboveOne',AlwaysNormalize:'AlwaysNormalize',NormalizeWithinMedian:'NormalizeWithinMedian',NoNormalization:'NoNormalization',ERBFNormalizeMethod_MAX:'ERBFNormalizeMethod_MAX', };
declare class RBFParams { 
	TargetDimensions: number;
	SolverType: ERBFSolverType;
	Radius: number;
	bAutomaticRadius: boolean;
	UFunction: ERBFFunctionType;
	DistanceMethod: ERBFDistanceMethod;
	TwistAxis: EBoneAxis;
	WeightThreshold: number;
	NormalizeMethod: ERBFNormalizeMethod;
	MedianReference: Vector;
	MedianMin: number;
	MedianMax: number;
	clone() : RBFParams;
	static C(Other: UObject | any): RBFParams;
}

declare type EPoseDriverType = 'SwingAndTwist' | 'SwingOnly' | 'Translation' | 'EPoseDriverType_MAX';
declare var EPoseDriverType : { SwingAndTwist:'SwingAndTwist',SwingOnly:'SwingOnly',Translation:'Translation',EPoseDriverType_MAX:'EPoseDriverType_MAX', };
declare type EPoseDriverSource = 'Rotation' | 'Translation' | 'EPoseDriverSource_MAX';
declare var EPoseDriverSource : { Rotation:'Rotation',Translation:'Translation',EPoseDriverSource_MAX:'EPoseDriverSource_MAX', };
declare type EPoseDriverOutput = 'DrivePoses' | 'DriveCurves' | 'EPoseDriverOutput_MAX';
declare var EPoseDriverOutput : { DrivePoses:'DrivePoses',DriveCurves:'DriveCurves',EPoseDriverOutput_MAX:'EPoseDriverOutput_MAX', };
declare class AnimNode_PoseDriver extends AnimNode_PoseHandler { 
	SourcePose: PoseLink;
	SourceBones: BoneReference[];
	OnlyDriveBones: BoneReference[];
	PoseTargets: PoseDriverTarget[];
	EvalSpaceBone: BoneReference;
	RBFParams: RBFParams;
	SourceBone: BoneReference;
	TwistAxis: EBoneAxis;
	Type: EPoseDriverType;
	RadialScaling: number;
	DriveSource: EPoseDriverSource;
	DriveOutput: EPoseDriverOutput;
	bOnlyDriveSelectedBones: boolean;
	bSoloDrivenOnly: boolean;
	LODThreshold: number;
	clone() : AnimNode_PoseDriver;
	static C(Other: UObject | any): AnimNode_PoseDriver;
}

declare class AnimGraphNode_PoseDriver extends AnimGraphNode_PoseHandler { 
	UNode: AnimNode_PoseDriver;
	AxisLength: number;
	ConeSubdivision: number;
	bDrawDebugCones: boolean;
	LastPreviewComponent: SkeletalMeshComponent;
	static Load(ResourceName: string): AnimGraphNode_PoseDriver;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseDriver;
	static GetDefaultObject(): AnimGraphNode_PoseDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseDriver;
	static C(Other: UObject | any): AnimGraphNode_PoseDriver;
}

declare type ESnapshotSourceMode = 'NamedSnapshot' | 'SnapshotPin' | 'ESnapshotSourceMode_MAX';
declare var ESnapshotSourceMode : { NamedSnapshot:'NamedSnapshot',SnapshotPin:'SnapshotPin',ESnapshotSourceMode_MAX:'ESnapshotSourceMode_MAX', };
declare class AnimNode_PoseSnapshot extends AnimNode_Base { 
	SnapshotName: string;
	Snapshot: PoseSnapshot;
	Mode: ESnapshotSourceMode;
	clone() : AnimNode_PoseSnapshot;
	static C(Other: UObject | any): AnimNode_PoseSnapshot;
}

declare class AnimGraphNode_PoseSnapshot extends AnimGraphNode_Base { 
	UNode: AnimNode_PoseSnapshot;
	static Load(ResourceName: string): AnimGraphNode_PoseSnapshot;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseSnapshot;
	static GetDefaultObject(): AnimGraphNode_PoseSnapshot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseSnapshot;
	static C(Other: UObject | any): AnimGraphNode_PoseSnapshot;
}

declare class RandomPlayerSequenceEntry { 
	Sequence: AnimSequence;
	ChanceToPlay: number;
	MinLoopCount: number;
	MaxLoopCount: number;
	MinPlayRate: number;
	MaxPlayRate: number;
	BlendIn: AlphaBlend;
	clone() : RandomPlayerSequenceEntry;
	static C(Other: UObject | any): RandomPlayerSequenceEntry;
}

declare class AnimNode_RandomPlayer extends AnimNode_Base { 
	Entries: RandomPlayerSequenceEntry[];
	bShuffleMode: boolean;
	clone() : AnimNode_RandomPlayer;
	static C(Other: UObject | any): AnimNode_RandomPlayer;
}

declare class AnimGraphNode_RandomPlayer extends AnimGraphNode_Base { 
	UNode: AnimNode_RandomPlayer;
	static Load(ResourceName: string): AnimGraphNode_RandomPlayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RandomPlayer;
	static GetDefaultObject(): AnimGraphNode_RandomPlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RandomPlayer;
	static C(Other: UObject | any): AnimGraphNode_RandomPlayer;
}

declare class AnimNode_ResetRoot extends AnimNode_SkeletalControlBase { 
	clone() : AnimNode_ResetRoot;
	static C(Other: UObject | any): AnimNode_ResetRoot;
}

declare class AnimGraphNode_ResetRoot extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_ResetRoot;
	static Load(ResourceName: string): AnimGraphNode_ResetRoot;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ResetRoot;
	static GetDefaultObject(): AnimGraphNode_ResetRoot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ResetRoot;
	static C(Other: UObject | any): AnimGraphNode_ResetRoot;
}

declare class SimSpaceSettings { 
	MasterAlpha: number;
	VelocityScaleZ: number;
	MaxLinearVelocity: number;
	MaxAngularVelocity: number;
	MaxLinearAcceleration: number;
	MaxAngularAcceleration: number;
	ExternalLinearDrag: number;
	ExternalLinearDragV: Vector;
	ExternalLinearVelocity: Vector;
	ExternalAngularVelocity: Vector;
	clone() : SimSpaceSettings;
	static C(Other: UObject | any): SimSpaceSettings;
}

declare type ESimulationSpace = 'ComponentSpace' | 'WorldSpace' | 'BaseBoneSpace' | 'ESimulationSpace_MAX';
declare var ESimulationSpace : { ComponentSpace:'ComponentSpace',WorldSpace:'WorldSpace',BaseBoneSpace:'BaseBoneSpace',ESimulationSpace_MAX:'ESimulationSpace_MAX', };
declare class AnimNode_RigidBody extends AnimNode_SkeletalControlBase { 
	OverridePhysicsAsset: PhysicsAsset;
	OverrideWorldGravity: Vector;
	ExternalForce: Vector;
	ComponentLinearAccScale: Vector;
	ComponentLinearVelScale: Vector;
	ComponentAppliedLinearAccClamp: Vector;
	SimSpaceSettings: SimSpaceSettings;
	CachedBoundsScale: number;
	BaseBoneRef: BoneReference;
	OverlapChannel: ECollisionChannel;
	SimulationSpace: ESimulationSpace;
	bForceDisableCollisionBetweenConstraintBodies: boolean;
	bEnableWorldGeometry: boolean;
	bOverrideWorldGravity: boolean;
	bTransferBoneVelocities: boolean;
	bFreezeIncomingPoseOnStart: boolean;
	bClampLinearTranslationLimitToRefPose: boolean;
	WorldSpaceMinimumScale: number;
	EvaluationResetTime: number;
	bComponentSpaceSimulation: boolean;
	clone() : AnimNode_RigidBody;
	static C(Other: UObject | any): AnimNode_RigidBody;
}

declare class AnimGraphNode_RigidBody extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_RigidBody;
	static Load(ResourceName: string): AnimGraphNode_RigidBody;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RigidBody;
	static GetDefaultObject(): AnimGraphNode_RigidBody;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RigidBody;
	static C(Other: UObject | any): AnimGraphNode_RigidBody;
}

declare class AnimGraphNode_Root extends AnimGraphNode_Base { 
	UNode: AnimNode_Root;
	static Load(ResourceName: string): AnimGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Root;
	static GetDefaultObject(): AnimGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Root;
	static C(Other: UObject | any): AnimGraphNode_Root;
}

declare class AnimNode_RotateRootBone extends AnimNode_Base { 
	BasePose: PoseLink;
	Pitch: number;
	Yaw: number;
	PitchScaleBiasClamp: InputScaleBiasClamp;
	YawScaleBiasClamp: InputScaleBiasClamp;
	MeshToComponent: Rotator;
	clone() : AnimNode_RotateRootBone;
	static C(Other: UObject | any): AnimNode_RotateRootBone;
}

declare class AnimGraphNode_RotateRootBone extends AnimGraphNode_Base { 
	UNode: AnimNode_RotateRootBone;
	static Load(ResourceName: string): AnimGraphNode_RotateRootBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RotateRootBone;
	static GetDefaultObject(): AnimGraphNode_RotateRootBone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RotateRootBone;
	static C(Other: UObject | any): AnimGraphNode_RotateRootBone;
}

declare class AnimNode_RotationMultiplier extends AnimNode_SkeletalControlBase { 
	TargetBone: BoneReference;
	SourceBone: BoneReference;
	Multiplier: number;
	RotationAxisToRefer: EBoneAxis;
	bIsAdditive: boolean;
	clone() : AnimNode_RotationMultiplier;
	static C(Other: UObject | any): AnimNode_RotationMultiplier;
}

declare class AnimGraphNode_RotationMultiplier extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_RotationMultiplier;
	static Load(ResourceName: string): AnimGraphNode_RotationMultiplier;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RotationMultiplier;
	static GetDefaultObject(): AnimGraphNode_RotationMultiplier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RotationMultiplier;
	static C(Other: UObject | any): AnimGraphNode_RotationMultiplier;
}

declare class AnimNode_RotationOffsetBlendSpace extends AnimNode_BlendSpacePlayer { 
	BasePose: PoseLink;
	LODThreshold: number;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	AlphaBoolBlend: InputAlphaBoolBlend;
	AlphaCurveName: string;
	AlphaScaleBiasClamp: InputScaleBiasClamp;
	AlphaInputType: EAnimAlphaInputType;
	bAlphaBoolEnabled: boolean;
	clone() : AnimNode_RotationOffsetBlendSpace;
	static C(Other: UObject | any): AnimNode_RotationOffsetBlendSpace;
}

declare class AnimGraphNode_RotationOffsetBlendSpace extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_RotationOffsetBlendSpace;
	static Load(ResourceName: string): AnimGraphNode_RotationOffsetBlendSpace;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RotationOffsetBlendSpace;
	static GetDefaultObject(): AnimGraphNode_RotationOffsetBlendSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RotationOffsetBlendSpace;
	static C(Other: UObject | any): AnimGraphNode_RotationOffsetBlendSpace;
}

declare class AnimNode_SaveCachedPose extends AnimNode_Base { 
	Pose: PoseLink;
	CachePoseName: string;
	clone() : AnimNode_SaveCachedPose;
	static C(Other: UObject | any): AnimNode_SaveCachedPose;
}

declare class AnimGraphNode_SaveCachedPose extends AnimGraphNode_Base { 
	UNode: AnimNode_SaveCachedPose;
	CacheName: string;
	static Load(ResourceName: string): AnimGraphNode_SaveCachedPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SaveCachedPose;
	static GetDefaultObject(): AnimGraphNode_SaveCachedPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SaveCachedPose;
	static C(Other: UObject | any): AnimGraphNode_SaveCachedPose;
}

declare type EScaleChainInitialLength = 'FixedDefaultLengthValue' | 'Distance' | 'ChainLength' | 'EScaleChainInitialLength_MAX';
declare var EScaleChainInitialLength : { FixedDefaultLengthValue:'FixedDefaultLengthValue',Distance:'Distance',ChainLength:'ChainLength',EScaleChainInitialLength_MAX:'EScaleChainInitialLength_MAX', };
declare class AnimNode_ScaleChainLength extends AnimNode_Base { 
	InputPose: PoseLink;
	DefaultChainLength: number;
	ChainStartBone: BoneReference;
	ChainEndBone: BoneReference;
	TargetLocation: Vector;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	ChainInitialLength: EScaleChainInitialLength;
	clone() : AnimNode_ScaleChainLength;
	static C(Other: UObject | any): AnimNode_ScaleChainLength;
}

declare class AnimGraphNode_ScaleChainLength extends AnimGraphNode_Base { 
	UNode: AnimNode_ScaleChainLength;
	static Load(ResourceName: string): AnimGraphNode_ScaleChainLength;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ScaleChainLength;
	static GetDefaultObject(): AnimGraphNode_ScaleChainLength;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ScaleChainLength;
	static C(Other: UObject | any): AnimGraphNode_ScaleChainLength;
}

declare type ESequenceEvalReinit = 'NoReset' | 'StartPosition' | 'ExplicitTime' | 'ESequenceEvalReinit_MAX';
declare var ESequenceEvalReinit : { NoReset:'NoReset',StartPosition:'StartPosition',ExplicitTime:'ExplicitTime',ESequenceEvalReinit_MAX:'ESequenceEvalReinit_MAX', };
declare class AnimNode_SequenceEvaluator extends AnimNode_AssetPlayerBase { 
	Sequence: AnimSequenceBase;
	ExplicitTime: number;
	bShouldLoop: boolean;
	bTeleportToExplicitTime: boolean;
	ReinitializationBehavior: ESequenceEvalReinit;
	StartPosition: number;
	clone() : AnimNode_SequenceEvaluator;
	static C(Other: UObject | any): AnimNode_SequenceEvaluator;
}

declare class AnimGraphNode_SequenceEvaluator extends AnimGraphNode_AssetPlayerBase { 
	UNode: AnimNode_SequenceEvaluator;
	static Load(ResourceName: string): AnimGraphNode_SequenceEvaluator;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SequenceEvaluator;
	static GetDefaultObject(): AnimGraphNode_SequenceEvaluator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SequenceEvaluator;
	static C(Other: UObject | any): AnimGraphNode_SequenceEvaluator;
}

declare class AnimNode_SequencePlayer extends AnimNode_AssetPlayerBase { 
	Sequence: AnimSequenceBase;
	PlayRateBasis: number;
	PlayRate: number;
	PlayRateScaleBiasClamp: InputScaleBiasClamp;
	StartPosition: number;
	bLoopAnimation: boolean;
	clone() : AnimNode_SequencePlayer;
	static C(Other: UObject | any): AnimNode_SequencePlayer;
}

declare class AnimGraphNode_SequencePlayer extends AnimGraphNode_AssetPlayerBase { 
	UNode: AnimNode_SequencePlayer;
	static Load(ResourceName: string): AnimGraphNode_SequencePlayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SequencePlayer;
	static GetDefaultObject(): AnimGraphNode_SequencePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SequencePlayer;
	static C(Other: UObject | any): AnimGraphNode_SequencePlayer;
}

declare class AnimNode_Slot extends AnimNode_Base { 
	Source: PoseLink;
	SlotName: string;
	bAlwaysUpdateSourcePose: boolean;
	clone() : AnimNode_Slot;
	static C(Other: UObject | any): AnimNode_Slot;
}

declare class AnimGraphNode_Slot extends AnimGraphNode_Base { 
	UNode: AnimNode_Slot;
	static Load(ResourceName: string): AnimGraphNode_Slot;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Slot;
	static GetDefaultObject(): AnimGraphNode_Slot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Slot;
	static C(Other: UObject | any): AnimGraphNode_Slot;
}

declare type ESplineBoneAxis = 'None' | 'X' | 'Y' | 'Z' | 'ESplineBoneAxis_MAX';
declare var ESplineBoneAxis : { None:'None',X:'X',Y:'Y',Z:'Z',ESplineBoneAxis_MAX:'ESplineBoneAxis_MAX', };
declare class AnimNode_SplineIK extends AnimNode_SkeletalControlBase { 
	StartBone: BoneReference;
	EndBone: BoneReference;
	BoneAxis: ESplineBoneAxis;
	bAutoCalculateSpline: boolean;
	PointCount: number;
	ControlPoints: Transform[];
	Roll: number;
	TwistStart: number;
	TwistEnd: number;
	TwistBlend: AlphaBlend;
	Stretch: number;
	Offset: number;
	clone() : AnimNode_SplineIK;
	static C(Other: UObject | any): AnimNode_SplineIK;
}

declare class AnimGraphNode_SplineIK extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_SplineIK;
	static Load(ResourceName: string): AnimGraphNode_SplineIK;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SplineIK;
	static GetDefaultObject(): AnimGraphNode_SplineIK;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SplineIK;
	static C(Other: UObject | any): AnimGraphNode_SplineIK;
}

declare class AnimNode_SpringBone extends AnimNode_SkeletalControlBase { 
	SpringBone: BoneReference;
	MaxDisplacement: number;
	SpringStiffness: number;
	SpringDamping: number;
	ErrorResetThresh: number;
	bNoZSpring: boolean;
	bLimitDisplacement: boolean;
	bTranslateX: boolean;
	bTranslateY: boolean;
	bTranslateZ: boolean;
	bRotateX: boolean;
	bRotateY: boolean;
	bRotateZ: boolean;
	clone() : AnimNode_SpringBone;
	static C(Other: UObject | any): AnimNode_SpringBone;
}

declare class AnimGraphNode_SpringBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_SpringBone;
	static Load(ResourceName: string): AnimGraphNode_SpringBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SpringBone;
	static GetDefaultObject(): AnimGraphNode_SpringBone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SpringBone;
	static C(Other: UObject | any): AnimGraphNode_SpringBone;
}

declare class AnimNode_StateMachine extends AnimNode_Base { 
	StateMachineIndexInClass: number;
	MaxTransitionsPerFrame: number;
	bSkipFirstUpdateTransition: boolean;
	bReinitializeOnBecomingRelevant: boolean;
	clone() : AnimNode_StateMachine;
	static C(Other: UObject | any): AnimNode_StateMachine;
}

declare class AnimGraphNode_StateMachine extends AnimGraphNode_StateMachineBase { 
	UNode: AnimNode_StateMachine;
	static Load(ResourceName: string): AnimGraphNode_StateMachine;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_StateMachine;
	static GetDefaultObject(): AnimGraphNode_StateMachine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_StateMachine;
	static C(Other: UObject | any): AnimGraphNode_StateMachine;
}

declare class RotationLimit { 
	LimitMin: Vector;
	LimitMax: Vector;
	clone() : RotationLimit;
	static C(Other: UObject | any): RotationLimit;
}

declare class AnimNode_Trail extends AnimNode_SkeletalControlBase { 
	TrailBone: BoneReference;
	ChainLength: number;
	ChainBoneAxis: EAxis;
	bInvertChainBoneAxis: boolean;
	bLimitStretch: boolean;
	bLimitRotation: boolean;
	bUsePlanarLimit: boolean;
	bActorSpaceFakeVel: boolean;
	bReorientParentToChild: boolean;
	bEnableDebug: boolean;
	bShowBaseMotion: boolean;
	bShowTrailLocation: boolean;
	bShowLimit: boolean;
	DebugLifeTime: number;
	TrailRelaxation: number;
	MaxDeltaTime: number;
	RelaxationSpeedScale: number;
	TrailRelaxationSpeed: RuntimeFloatCurve;
	RelaxationSpeedScaleInputProcessor: InputScaleBiasClamp;
	RotationLimits: RotationLimit[];
	RotationOffsets: Vector[];
	PlanarLimits: AnimPhysPlanarLimit[];
	StretchLimit: number;
	FakeVelocity: Vector;
	BaseJoint: BoneReference;
	TrailBoneRotationBlendAlpha: number;
	LastBoneRotationAnimAlphaBlend: number;
	clone() : AnimNode_Trail;
	static C(Other: UObject | any): AnimNode_Trail;
}

declare class AnimGraphNode_Trail extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_Trail;
	static Load(ResourceName: string): AnimGraphNode_Trail;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Trail;
	static GetDefaultObject(): AnimGraphNode_Trail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Trail;
	static C(Other: UObject | any): AnimGraphNode_Trail;
}

declare type EEvaluatorDataSource = 'EDS_SourcePose' | 'EDS_DestinationPose' | 'EDS_MAX';
declare var EEvaluatorDataSource : { EDS_SourcePose:'EDS_SourcePose',EDS_DestinationPose:'EDS_DestinationPose',EDS_MAX:'EDS_MAX', };
declare type EEvaluatorMode = 'EM_Standard' | 'EM_Freeze' | 'EM_DelayedFreeze' | 'EM_MAX';
declare var EEvaluatorMode : { EM_Standard:'EM_Standard',EM_Freeze:'EM_Freeze',EM_DelayedFreeze:'EM_DelayedFreeze',EM_MAX:'EM_MAX', };
declare class AnimNode_TransitionPoseEvaluator extends AnimNode_Base { 
	FramesToCachePose: number;
	DataSource: EEvaluatorDataSource;
	EvaluatorMode: EEvaluatorMode;
	clone() : AnimNode_TransitionPoseEvaluator;
	static C(Other: UObject | any): AnimNode_TransitionPoseEvaluator;
}

declare class AnimGraphNode_TransitionPoseEvaluator extends AnimGraphNode_Base { 
	UNode: AnimNode_TransitionPoseEvaluator;
	static Load(ResourceName: string): AnimGraphNode_TransitionPoseEvaluator;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TransitionPoseEvaluator;
	static GetDefaultObject(): AnimGraphNode_TransitionPoseEvaluator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TransitionPoseEvaluator;
	static C(Other: UObject | any): AnimGraphNode_TransitionPoseEvaluator;
}

declare class ReferenceBoneFrame { 
	Bone: BoneReference;
	Axis: Axis;
	clone() : ReferenceBoneFrame;
	static C(Other: UObject | any): ReferenceBoneFrame;
}

declare class AnimCurveParam { 
	Name: string;
	clone() : AnimCurveParam;
	static C(Other: UObject | any): AnimCurveParam;
}

declare class AnimNode_TwistCorrectiveNode extends AnimNode_SkeletalControlBase { 
	BaseFrame: ReferenceBoneFrame;
	TwistFrame: ReferenceBoneFrame;
	TwistPlaneNormalAxis: Axis;
	RangeMax: number;
	RemappedMin: number;
	RemappedMax: number;
	Curve: AnimCurveParam;
	clone() : AnimNode_TwistCorrectiveNode;
	static C(Other: UObject | any): AnimNode_TwistCorrectiveNode;
}

declare class AnimGraphNode_TwistCorrectiveNode extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_TwistCorrectiveNode;
	static Load(ResourceName: string): AnimGraphNode_TwistCorrectiveNode;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TwistCorrectiveNode;
	static GetDefaultObject(): AnimGraphNode_TwistCorrectiveNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TwistCorrectiveNode;
	static C(Other: UObject | any): AnimGraphNode_TwistCorrectiveNode;
}

declare class AnimNode_TwoBoneIK extends AnimNode_SkeletalControlBase { 
	IKBone: BoneReference;
	StartStretchRatio: number;
	MaxStretchScale: number;
	StretchLimits: Vector2D;
	bNoTwist: boolean;
	JointTargetSpaceBoneName: string;
	EffectorSpaceBoneName: string;
	EffectorLocation: Vector;
	EffectorTarget: BoneSocketTarget;
	JointTargetLocation: Vector;
	JointTarget: BoneSocketTarget;
	TwistAxis: Axis;
	EffectorLocationSpace: EBoneControlSpace;
	JointTargetLocationSpace: EBoneControlSpace;
	bAllowStretching: boolean;
	bTakeRotationFromEffectorSpace: boolean;
	bMaintainEffectorRelRot: boolean;
	bAllowTwist: boolean;
	clone() : AnimNode_TwoBoneIK;
	static C(Other: UObject | any): AnimNode_TwoBoneIK;
}

declare class AnimGraphNode_TwoBoneIK extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_TwoBoneIK;
	bEnableDebugDraw: boolean;
	static Load(ResourceName: string): AnimGraphNode_TwoBoneIK;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TwoBoneIK;
	static GetDefaultObject(): AnimGraphNode_TwoBoneIK;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TwoBoneIK;
	static C(Other: UObject | any): AnimGraphNode_TwoBoneIK;
}

declare class AnimNode_TwoWayBlend extends AnimNode_Base { 
	A: PoseLink;
	B: PoseLink;
	AlphaInputType: EAnimAlphaInputType;
	bAlphaBoolEnabled: boolean;
	bResetChildOnActivation: boolean;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	AlphaBoolBlend: InputAlphaBoolBlend;
	AlphaCurveName: string;
	AlphaScaleBiasClamp: InputScaleBiasClamp;
	clone() : AnimNode_TwoWayBlend;
	static C(Other: UObject | any): AnimNode_TwoWayBlend;
}

declare class AnimGraphNode_TwoWayBlend extends AnimGraphNode_Base { 
	BlendNode: AnimNode_TwoWayBlend;
	static Load(ResourceName: string): AnimGraphNode_TwoWayBlend;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TwoWayBlend;
	static GetDefaultObject(): AnimGraphNode_TwoWayBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TwoWayBlend;
	static C(Other: UObject | any): AnimGraphNode_TwoWayBlend;
}

declare class AnimNode_UseCachedPose extends AnimNode_Base { 
	LinkToCachingNode: PoseLink;
	CachePoseName: string;
	clone() : AnimNode_UseCachedPose;
	static C(Other: UObject | any): AnimNode_UseCachedPose;
}

declare class AnimGraphNode_UseCachedPose extends AnimGraphNode_Base { 
	UNode: AnimNode_UseCachedPose;
	SaveCachedPoseNode: any;
	NameOfCache: string;
	static Load(ResourceName: string): AnimGraphNode_UseCachedPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_UseCachedPose;
	static GetDefaultObject(): AnimGraphNode_UseCachedPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_UseCachedPose;
	static C(Other: UObject | any): AnimGraphNode_UseCachedPose;
}

declare class AnimPreviewAttacheInstance extends AnimInstance { 
	static Load(ResourceName: string): AnimPreviewAttacheInstance;
	static Find(Outer: UObject, ResourceName: string): AnimPreviewAttacheInstance;
	static GetDefaultObject(): AnimPreviewAttacheInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimPreviewAttacheInstance;
	static C(Other: UObject | any): AnimPreviewAttacheInstance;
}

declare class AnimSingleNodeInstance extends AnimInstance { 
	CurrentAsset: AnimationAsset;
	PostEvaluateAnimEvent: UnrealEngineDelegate<() => void>;
	static Load(ResourceName: string): AnimSingleNodeInstance;
	static Find(Outer: UObject, ResourceName: string): AnimSingleNodeInstance;
	static GetDefaultObject(): AnimSingleNodeInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSingleNodeInstance;
	StopAnim(): void;
	SetReverse(bInReverse: boolean): void;
	SetPreviewCurveOverride(PoseName: string,Value: number,bRemoveIfZero: boolean): void;
	SetPositionWithPreviousTime(InPosition: number,InPreviousTime: number,bFireNotifies: boolean): void;
	SetPosition(InPosition: number,bFireNotifies: boolean): void;
	SetPlayRate(InPlayRate: number): void;
	SetPlaying(bIsPlaying: boolean): void;
	SetLooping(bIsLooping: boolean): void;
	SetBlendSpaceInput(InBlendInput: Vector): void;
	SetAnimationAsset(NewAsset: AnimationAsset,bIsLooping: boolean,InPlayRate: number): void;
	PlayAnim(bIsLooping: boolean,InPlayRate: number,InStartPosition: number): void;
	GetLength(): number;
	GetAnimationAsset(): AnimationAsset;
	static C(Other: UObject | any): AnimSingleNodeInstance;
}

declare type EMontagePreviewType = 'EMPT_Normal' | 'EMPT_AllSections' | 'EMPT_MAX';
declare var EMontagePreviewType : { EMPT_Normal:'EMPT_Normal',EMPT_AllSections:'EMPT_AllSections',EMPT_MAX:'EMPT_MAX', };
declare class AnimPreviewInstance extends AnimSingleNodeInstance { 
	MontagePreviewType: EMontagePreviewType;
	MontagePreviewStartSectionIdx: number;
	static Load(ResourceName: string): AnimPreviewInstance;
	static Find(Outer: UObject, ResourceName: string): AnimPreviewInstance;
	static GetDefaultObject(): AnimPreviewInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimPreviewInstance;
	static C(Other: UObject | any): AnimPreviewInstance;
}

declare class AnimStateNodeBase extends EdGraphNode { 
	static Load(ResourceName: string): AnimStateNodeBase;
	static Find(Outer: UObject, ResourceName: string): AnimStateNodeBase;
	static GetDefaultObject(): AnimStateNodeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateNodeBase;
	static C(Other: UObject | any): AnimStateNodeBase;
}

declare class AnimStateConduitNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	static Load(ResourceName: string): AnimStateConduitNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateConduitNode;
	static GetDefaultObject(): AnimStateConduitNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateConduitNode;
	static C(Other: UObject | any): AnimStateConduitNode;
}

declare type EAnimStateType = 'AST_SingleAnimation' | 'AST_BlendGraph' | 'AST_MAX';
declare var EAnimStateType : { AST_SingleAnimation:'AST_SingleAnimation',AST_BlendGraph:'AST_BlendGraph',AST_MAX:'AST_MAX', };
declare class AnimStateNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	StateType: EAnimStateType;
	StateEntered: AnimNotifyEvent;
	StateLeft: AnimNotifyEvent;
	StateFullyBlended: AnimNotifyEvent;
	bAlwaysResetOnEntry: boolean;
	static Load(ResourceName: string): AnimStateNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateNode;
	static GetDefaultObject(): AnimStateNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateNode;
	static C(Other: UObject | any): AnimStateNode;
}

declare type ETransitionBlendMode = 'TBM_Linear' | 'TBM_Cubic' | 'TBM_MAX';
declare var ETransitionBlendMode : { TBM_Linear:'TBM_Linear',TBM_Cubic:'TBM_Cubic',TBM_MAX:'TBM_MAX', };
declare type ETransitionLogicType = 'TLT_StandardBlend' | 'TLT_Inertialization' | 'TLT_Custom' | 'TLT_MAX';
declare var ETransitionLogicType : { TLT_StandardBlend:'TLT_StandardBlend',TLT_Inertialization:'TLT_Inertialization',TLT_Custom:'TLT_Custom',TLT_MAX:'TLT_MAX', };
declare class AnimStateTransitionNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	CustomTransitionGraph: EdGraph;
	PriorityOrder: number;
	CrossfadeDuration: number;
	CrossfadeMode: ETransitionBlendMode;
	BlendMode: EAlphaBlendOption;
	CustomBlendCurve: CurveFloat;
	BlendProfile: BlendProfile;
	bAutomaticRuleBasedOnSequencePlayerInState: boolean;
	LogicType: ETransitionLogicType;
	TransitionStart: AnimNotifyEvent;
	TransitionEnd: AnimNotifyEvent;
	TransitionInterrupt: AnimNotifyEvent;
	Bidirectional: boolean;
	bSharedRules: boolean;
	bSharedCrossfade: boolean;
	SharedRulesName: string;
	SharedRulesGuid: Guid;
	SharedColor: LinearColor;
	SharedCrossfadeName: string;
	SharedCrossfadeGuid: Guid;
	SharedCrossfadeIdx: number;
	static Load(ResourceName: string): AnimStateTransitionNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateTransitionNode;
	static GetDefaultObject(): AnimStateTransitionNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateTransitionNode;
	static C(Other: UObject | any): AnimStateTransitionNode;
}

declare class ClassVariableCreator extends Interface { 
	static Load(ResourceName: string): ClassVariableCreator;
	static Find(Outer: UObject, ResourceName: string): ClassVariableCreator;
	static GetDefaultObject(): ClassVariableCreator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassVariableCreator;
	static C(Other: UObject | any): ClassVariableCreator;
}

declare class K2Node_AnimGetter extends K2Node_CallFunction { 
	SourceNode: AnimGraphNode_Base;
	SourceStateNode: AnimStateNodeBase;
	GetterClass: UnrealEngineClass;
	SourceAnimBlueprint: AnimBlueprint;
	CachedTitle: string;
	Contexts: string[];
	static Load(ResourceName: string): K2Node_AnimGetter;
	static Find(Outer: UObject, ResourceName: string): K2Node_AnimGetter;
	static GetDefaultObject(): K2Node_AnimGetter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AnimGetter;
	static C(Other: UObject | any): K2Node_AnimGetter;
}

declare class K2Node_PlayMontage extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_PlayMontage;
	static Find(Outer: UObject, ResourceName: string): K2Node_PlayMontage;
	static GetDefaultObject(): K2Node_PlayMontage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayMontage;
	static C(Other: UObject | any): K2Node_PlayMontage;
}

declare type ETransitionGetter = 'AnimationAsset_GetCurrentTime' | 'AnimationAsset_GetLength' | 'AnimationAsset_GetCurrentTimeFraction' | 'AnimationAsset_GetTimeFromEnd' | 'AnimationAsset_GetTimeFromEndFraction' | 'CurrentState_ElapsedTime' | 'CurrentState_GetBlendWeight' | 'CurrentTransitionDuration' | 'ArbitraryState_GetBlendWeight' | 'ETransitionGetter_MAX';
declare var ETransitionGetter : { AnimationAsset_GetCurrentTime:'AnimationAsset_GetCurrentTime',AnimationAsset_GetLength:'AnimationAsset_GetLength',AnimationAsset_GetCurrentTimeFraction:'AnimationAsset_GetCurrentTimeFraction',AnimationAsset_GetTimeFromEnd:'AnimationAsset_GetTimeFromEnd',AnimationAsset_GetTimeFromEndFraction:'AnimationAsset_GetTimeFromEndFraction',CurrentState_ElapsedTime:'CurrentState_ElapsedTime',CurrentState_GetBlendWeight:'CurrentState_GetBlendWeight',CurrentTransitionDuration:'CurrentTransitionDuration',ArbitraryState_GetBlendWeight:'ArbitraryState_GetBlendWeight',ETransitionGetter_MAX:'ETransitionGetter_MAX', };
declare class K2Node_TransitionRuleGetter extends K2Node { 
	GetterType: ETransitionGetter;
	AssociatedAnimAssetPlayerNode: AnimGraphNode_Base;
	AssociatedStateNode: AnimStateNode;
	static Load(ResourceName: string): K2Node_TransitionRuleGetter;
	static Find(Outer: UObject, ResourceName: string): K2Node_TransitionRuleGetter;
	static GetDefaultObject(): K2Node_TransitionRuleGetter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_TransitionRuleGetter;
	static C(Other: UObject | any): K2Node_TransitionRuleGetter;
}

declare class Texture2DDynamic extends Texture { 
	Format: EPixelFormat;
	static Load(ResourceName: string): Texture2DDynamic;
	static Find(Outer: UObject, ResourceName: string): Texture2DDynamic;
	static GetDefaultObject(): Texture2DDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DDynamic;
	static C(Other: UObject | any): Texture2DDynamic;
}

declare class AsyncTaskDownloadImage extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(Texture: Texture2DDynamic) => void>;
	OnFail: UnrealEngineMulticastDelegate<(Texture: Texture2DDynamic) => void>;
	static Load(ResourceName: string): AsyncTaskDownloadImage;
	static Find(Outer: UObject, ResourceName: string): AsyncTaskDownloadImage;
	static GetDefaultObject(): AsyncTaskDownloadImage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncTaskDownloadImage;
	static DownloadImage(URL: string): AsyncTaskDownloadImage;
	static C(Other: UObject | any): AsyncTaskDownloadImage;
}

declare class ContentWidget extends PanelWidget { 
	static Load(ResourceName: string): ContentWidget;
	static Find(Outer: UObject, ResourceName: string): ContentWidget;
	static GetDefaultObject(): ContentWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentWidget;
	SetContent(Content: Widget): PanelSlot;
	GetContentSlot(): PanelSlot;
	GetContent(): Widget;
	static C(Other: UObject | any): ContentWidget;
}

declare class BackgroundBlur extends ContentWidget { 
	Padding: Margin;
	HorizontalAlignment: EHorizontalAlignment;
	VerticalAlignment: EVerticalAlignment;
	bApplyAlphaToBlur: boolean;
	BlurStrength: number;
	bOverrideAutoRadiusCalculation: boolean;
	BlurRadius: number;
	LowQualityFallbackBrush: SlateBrush;
	static Load(ResourceName: string): BackgroundBlur;
	static Find(Outer: UObject, ResourceName: string): BackgroundBlur;
	static GetDefaultObject(): BackgroundBlur;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BackgroundBlur;
	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
	SetPadding(InPadding: Margin): void;
	SetLowQualityFallbackBrush(InBrush: SlateBrush): void;
	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
	SetBlurStrength(InStrength: number): void;
	SetBlurRadius(InBlurRadius: number): void;
	SetApplyAlphaToBlur(bInApplyAlphaToBlur: boolean): void;
	static C(Other: UObject | any): BackgroundBlur;
}

declare class BackgroundBlurSlot extends PanelSlot { 
	Padding: Margin;
	HorizontalAlignment: EHorizontalAlignment;
	VerticalAlignment: EVerticalAlignment;
	static Load(ResourceName: string): BackgroundBlurSlot;
	static Find(Outer: UObject, ResourceName: string): BackgroundBlurSlot;
	static GetDefaultObject(): BackgroundBlurSlot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BackgroundBlurSlot;
	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
	SetPadding(InPadding: Margin): void;
	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
	static C(Other: UObject | any): BackgroundBlurSlot;
}

declare class BoolBinding extends PropertyBinding { 
	static Load(ResourceName: string): BoolBinding;
	static Find(Outer: UObject, ResourceName: string): BoolBinding;
	static GetDefaultObject(): BoolBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoolBinding;
	GetValue(): boolean;
	static C(Other: UObject | any): BoolBinding;
}

declare class Border extends ContentWidget { 
	HorizontalAlignment: EHorizontalAlignment;
	VerticalAlignment: EVerticalAlignment;
	bShowEffectWhenDisabled: boolean;
	ContentColorAndOpacity: LinearColor;
	ContentColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
	Padding: Margin;
	Background: SlateBrush;
	BackgroundDelegate: UnrealEngineDelegate<() => SlateBrush>;
	BrushColor: LinearColor;
	BrushColorDelegate: UnrealEngineDelegate<() => LinearColor>;
	DesiredSizeScale: Vector2D;
	bFlipForRightToLeftFlowDirection: boolean;
	OnMouseButtonDownEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
	OnMouseButtonUpEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
	OnMouseMoveEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
	OnMouseDoubleClickEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
	Brush: SlateBrushAsset;
	static Load(ResourceName: string): Border;
	static Find(Outer: UObject, ResourceName: string): Border;
	static GetDefaultObject(): Border;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Border;
	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
	SetPadding(InPadding: Margin): void;
	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
	SetDesiredSizeScale(InScale: Vector2D): void;
	SetContentColorAndOpacity(InContentColorAndOpacity: LinearColor): void;
	SetBrushFromTexture(Texture: Texture2D): void;
	SetBrushFromMaterial(Material: MaterialInterface): void;
	SetBrushFromAsset(Asset: SlateBrushAsset): void;
	SetBrushColor(InBrushColor: LinearColor): void;
	SetBrush(InBrush: SlateBrush): void;
	GetDynamicMaterial(): MaterialInstanceDynamic;
	static C(Other: UObject | any): Border;
}

declare class BrushBinding extends PropertyBinding { 
	static Load(ResourceName: string): BrushBinding;
	static Find(Outer: UObject, ResourceName: string): BrushBinding;
	static GetDefaultObject(): BrushBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushBinding;
	GetValue(): SlateBrush;
	static C(Other: UObject | any): BrushBinding;
}

declare type EButtonClickMethod = 'DownAndUp' | 'MouseDown' | 'MouseUp' | 'PreciseClick' | 'EButtonClickMethod_MAX';
declare var EButtonClickMethod : { DownAndUp:'DownAndUp',MouseDown:'MouseDown',MouseUp:'MouseUp',PreciseClick:'PreciseClick',EButtonClickMethod_MAX:'EButtonClickMethod_MAX', };
declare type EButtonTouchMethod = 'DownAndUp' | 'Down' | 'PreciseTap' | 'EButtonTouchMethod_MAX';
declare var EButtonTouchMethod : { DownAndUp:'DownAndUp',Down:'Down',PreciseTap:'PreciseTap',EButtonTouchMethod_MAX:'EButtonTouchMethod_MAX', };
declare type EButtonPressMethod = 'DownAndUp' | 'ButtonPress' | 'ButtonRelease' | 'EButtonPressMethod_MAX';
declare var EButtonPressMethod : { DownAndUp:'DownAndUp',ButtonPress:'ButtonPress',ButtonRelease:'ButtonRelease',EButtonPressMethod_MAX:'EButtonPressMethod_MAX', };
declare class Button extends ContentWidget { 
	Style: SlateWidgetStyleAsset;
	WidgetStyle: ButtonStyle;
	ColorAndOpacity: LinearColor;
	BackgroundColor: LinearColor;
	ClickMethod: EButtonClickMethod;
	TouchMethod: EButtonTouchMethod;
	PressMethod: EButtonPressMethod;
	IsFocusable: boolean;
	OnClicked: UnrealEngineMulticastDelegate<() => void>;
	OnPressed: UnrealEngineMulticastDelegate<() => void>;
	OnReleased: UnrealEngineMulticastDelegate<() => void>;
	OnHovered: UnrealEngineMulticastDelegate<() => void>;
	OnUnhovered: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): Button;
	static Find(Outer: UObject, ResourceName: string): Button;
	static GetDefaultObject(): Button;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Button;
	SetTouchMethod(InTouchMethod: EButtonTouchMethod): void;
	SetStyle(InStyle: ButtonStyle): void;
	SetPressMethod(InPressMethod: EButtonPressMethod): void;
	SetColorAndOpacity(InColorAndOpacity: LinearColor): void;
	SetClickMethod(InClickMethod: EButtonClickMethod): void;
	SetBackgroundColor(InBackgroundColor: LinearColor): void;
	IsPressed(): boolean;
	static C(Other: UObject | any): Button;
}

declare class ButtonSlot extends PanelSlot { 
	Padding: Margin;
	HorizontalAlignment: EHorizontalAlignment;
	VerticalAlignment: EVerticalAlignment;
	static Load(ResourceName: string): ButtonSlot;
	static Find(Outer: UObject, ResourceName: string): ButtonSlot;
	static GetDefaultObject(): ButtonSlot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonSlot;
	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
	SetPadding(InPadding: Margin): void;
	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
	static C(Other: UObject | any): ButtonSlot;
}

declare class CanvasPanel extends PanelWidget { 
	static Load(ResourceName: string): CanvasPanel;
	static Find(Outer: UObject, ResourceName: string): CanvasPanel;
	static GetDefaultObject(): CanvasPanel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasPanel;
	AddChildToCanvas(Content: Widget): CanvasPanelSlot;
	static C(Other: UObject | any): CanvasPanel;
}

declare class CheckBox extends ContentWidget { 
	CheckedState: ECheckBoxState;
	CheckedStateDelegate: UnrealEngineDelegate<() => ECheckBoxState>;
	WidgetStyle: CheckBoxStyle;
	Style: SlateWidgetStyleAsset;
	UncheckedImage: SlateBrushAsset;
	UncheckedHoveredImage: SlateBrushAsset;
	UncheckedPressedImage: SlateBrushAsset;
	CheckedImage: SlateBrushAsset;
	CheckedHoveredImage: SlateBrushAsset;
	CheckedPressedImage: SlateBrushAsset;
	UndeterminedImage: SlateBrushAsset;
	UndeterminedHoveredImage: SlateBrushAsset;
	UndeterminedPressedImage: SlateBrushAsset;
	HorizontalAlignment: EHorizontalAlignment;
	Padding: Margin;
	BorderBackgroundColor: SlateColor;
	ClickMethod: EButtonClickMethod;
	TouchMethod: EButtonTouchMethod;
	PressMethod: EButtonPressMethod;
	IsFocusable: boolean;
	OnCheckStateChanged: UnrealEngineMulticastDelegate<(bIsChecked: boolean) => void>;
	static Load(ResourceName: string): CheckBox;
	static Find(Outer: UObject, ResourceName: string): CheckBox;
	static GetDefaultObject(): CheckBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBox;
	SetTouchMethod(InTouchMethod: EButtonTouchMethod): void;
	SetPressMethod(InPressMethod: EButtonPressMethod): void;
	SetIsChecked(InIsChecked: boolean): void;
	SetClickMethod(InClickMethod: EButtonClickMethod): void;
	SetCheckedState(InCheckedState: ECheckBoxState): void;
	IsPressed(): boolean;
	IsChecked(): boolean;
	GetCheckedState(): ECheckBoxState;
	static C(Other: UObject | any): CheckBox;
}

declare class CheckedStateBinding extends PropertyBinding { 
	static Load(ResourceName: string): CheckedStateBinding;
	static Find(Outer: UObject, ResourceName: string): CheckedStateBinding;
	static GetDefaultObject(): CheckedStateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckedStateBinding;
	GetValue(): ECheckBoxState;
	static C(Other: UObject | any): CheckedStateBinding;
}

declare class CircularThrobber extends Widget { 
	NumberOfPieces: number;
	Period: number;
	Radius: number;
	PieceImage: SlateBrushAsset;
	UImage: SlateBrush;
	bEnableRadius: boolean;
	static Load(ResourceName: string): CircularThrobber;
	static Find(Outer: UObject, ResourceName: string): CircularThrobber;
	static GetDefaultObject(): CircularThrobber;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CircularThrobber;
	SetRadius(InRadius: number): void;
	SetPeriod(InPeriod: number): void;
	SetNumberOfPieces(InNumberOfPieces: number): void;
	static C(Other: UObject | any): CircularThrobber;
}

declare class ColorBinding extends PropertyBinding { 
	static Load(ResourceName: string): ColorBinding;
	static Find(Outer: UObject, ResourceName: string): ColorBinding;
	static GetDefaultObject(): ColorBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ColorBinding;
	GetSlateValue(): SlateColor;
	GetLinearValue(): LinearColor;
	static C(Other: UObject | any): ColorBinding;
}

declare class ComboBox extends Widget { 
	Items: UObject[];
	OnGenerateWidgetEvent: UnrealEngineDelegate<(Item: UObject) => Widget>;
	bIsFocusable: boolean;
	static Load(ResourceName: string): ComboBox;
	static Find(Outer: UObject, ResourceName: string): ComboBox;
	static GetDefaultObject(): ComboBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboBox;
	static C(Other: UObject | any): ComboBox;
}

declare class TableRowStyle extends SlateWidgetStyle { 
	SelectorFocusedBrush: SlateBrush;
	ActiveHoveredBrush: SlateBrush;
	ActiveBrush: SlateBrush;
	InactiveHoveredBrush: SlateBrush;
	InactiveBrush: SlateBrush;
	EvenRowBackgroundHoveredBrush: SlateBrush;
	EvenRowBackgroundBrush: SlateBrush;
	OddRowBackgroundHoveredBrush: SlateBrush;
	OddRowBackgroundBrush: SlateBrush;
	TextColor: SlateColor;
	SelectedTextColor: SlateColor;
	DropIndicator_Above: SlateBrush;
	DropIndicator_Onto: SlateBrush;
	DropIndicator_Below: SlateBrush;
	ActiveHighlightedBrush: SlateBrush;
	InactiveHighlightedBrush: SlateBrush;
	clone() : TableRowStyle;
	static C(Other: UObject | any): TableRowStyle;
}

declare type ESelectInfo = 'OnKeyPress' | 'OnNavigation' | 'OnMouseClick' | 'Direct' | 'ESelectInfo_MAX';
declare var ESelectInfo : { OnKeyPress:'OnKeyPress',OnNavigation:'OnNavigation',OnMouseClick:'OnMouseClick',Direct:'Direct',ESelectInfo_MAX:'ESelectInfo_MAX', };
declare class ComboBoxString extends Widget { 
	DefaultOptions: string[];
	SelectedOption: string;
	WidgetStyle: ComboBoxStyle;
	ItemStyle: TableRowStyle;
	ContentPadding: Margin;
	MaxListHeight: number;
	HasDownArrow: boolean;
	EnableGamepadNavigationMode: boolean;
	Font: SlateFontInfo;
	ForegroundColor: SlateColor;
	bIsFocusable: boolean;
	OnGenerateWidgetEvent: UnrealEngineDelegate<(Item: string) => Widget>;
	OnSelectionChanged: UnrealEngineMulticastDelegate<(SelectedItem: string, SelectionType: ESelectInfo) => void>;
	OnOpening: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): ComboBoxString;
	static Find(Outer: UObject, ResourceName: string): ComboBoxString;
	static GetDefaultObject(): ComboBoxString;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboBoxString;
	SetSelectedOption(Option: string): void;
	SetSelectedIndex(index: number): void;
	RemoveOption(Option: string): boolean;
	RefreshOptions(): void;
	IsOpen(): boolean;
	GetSelectedOption(): string;
	GetSelectedIndex(): number;
	GetOptionCount(): number;
	GetOptionAtIndex(index: number): string;
	FindOptionIndex(Option: string): number;
	ClearSelection(): void;
	ClearOptions(): void;
	AddOption(Option: string): void;
	static C(Other: UObject | any): ComboBoxString;
}

declare type EDynamicBoxType = 'Horizontal' | 'Vertical' | 'Wrap' | 'VerticalWrap' | 'Radial' | 'Overlay' | 'EDynamicBoxType_MAX';
declare var EDynamicBoxType : { Horizontal:'Horizontal',Vertical:'Vertical',Wrap:'Wrap',VerticalWrap:'VerticalWrap',Radial:'Radial',Overlay:'Overlay',EDynamicBoxType_MAX:'EDynamicBoxType_MAX', };
declare class RadialBoxSettings { 
	bDistributeItemsEvenly: boolean;
	AngleBetweenItems: number;
	StartingAngle: number;
	clone() : RadialBoxSettings;
	static C(Other: UObject | any): RadialBoxSettings;
}

declare class UserWidgetPool { 
	ActiveWidgets: UserWidget[];
	InactiveWidgets: UserWidget[];
	clone() : UserWidgetPool;
	static C(Other: UObject | any): UserWidgetPool;
}

declare class DynamicEntryBoxBase extends Widget { 
	EntryBoxType: EDynamicBoxType;
	EntrySpacing: Vector2D;
	SpacingPattern: Vector2D[];
	EntrySizeRule: SlateChildSize;
	EntryHorizontalAlignment: EHorizontalAlignment;
	EntryVerticalAlignment: EVerticalAlignment;
	MaxElementSize: number;
	RadialBoxSettings: RadialBoxSettings;
	EntryWidgetPool: UserWidgetPool;
	static Load(ResourceName: string): DynamicEntryBoxBase;
	static Find(Outer: UObject, ResourceName: string): DynamicEntryBoxBase;
	static GetDefaultObject(): DynamicEntryBoxBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicEntryBoxBase;
	SetRadialSettings(InSettings: RadialBoxSettings): void;
	SetEntrySpacing(InEntrySpacing: Vector2D): void;
	GetNumEntries(): number;
	GetAllEntries(): UserWidget[];
	static C(Other: UObject | any): DynamicEntryBoxBase;
}

declare class DynamicEntryBox extends DynamicEntryBoxBase { 
	NumDesignerPreviewEntries: number;
	EntryWidgetClass: UnrealEngineClass;
	static Load(ResourceName: string): DynamicEntryBox;
	static Find(Outer: UObject, ResourceName: string): DynamicEntryBox;
	static GetDefaultObject(): DynamicEntryBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicEntryBox;
	Reset(bDeleteWidgets: boolean): void;
	RemoveEntry(EntryWidget: UserWidget): void;
	BP_CreateEntryOfClass(EntryClass: UnrealEngineClass): UserWidget;
	BP_CreateEntry(): UserWidget;
	static C(Other: UObject | any): DynamicEntryBox;
}

declare type EVirtualKeyboardType = 'Default' | 'Number' | 'Web' | 'Email' | 'Password' | 'AlphaNumeric' | 'EVirtualKeyboardType_MAX';
declare var EVirtualKeyboardType : { Default:'Default',Number:'Number',Web:'Web',Email:'Email',Password:'Password',AlphaNumeric:'AlphaNumeric',EVirtualKeyboardType_MAX:'EVirtualKeyboardType_MAX', };
declare class VirtualKeyboardOptions { 
	bEnableAutocorrect: boolean;
	clone() : VirtualKeyboardOptions;
	static C(Other: UObject | any): VirtualKeyboardOptions;
}

declare type EVirtualKeyboardTrigger = 'OnFocusByPointer' | 'OnAllFocusEvents' | 'EVirtualKeyboardTrigger_MAX';
declare var EVirtualKeyboardTrigger : { OnFocusByPointer:'OnFocusByPointer',OnAllFocusEvents:'OnAllFocusEvents',EVirtualKeyboardTrigger_MAX:'EVirtualKeyboardTrigger_MAX', };
declare type EVirtualKeyboardDismissAction = 'TextChangeOnDismiss' | 'TextCommitOnAccept' | 'TextCommitOnDismiss' | 'EVirtualKeyboardDismissAction_MAX';
declare var EVirtualKeyboardDismissAction : { TextChangeOnDismiss:'TextChangeOnDismiss',TextCommitOnAccept:'TextCommitOnAccept',TextCommitOnDismiss:'TextCommitOnDismiss',EVirtualKeyboardDismissAction_MAX:'EVirtualKeyboardDismissAction_MAX', };
declare type ETextJustify = 'Left' | 'Center' | 'Right' | 'ETextJustify_MAX';
declare var ETextJustify : { Left:'Left',Center:'Center',Right:'Right',ETextJustify_MAX:'ETextJustify_MAX', };
declare type ETextShapingMethod = 'Auto' | 'KerningOnly' | 'FullShaping' | 'ETextShapingMethod_MAX';
declare var ETextShapingMethod : { Auto:'Auto',KerningOnly:'KerningOnly',FullShaping:'FullShaping',ETextShapingMethod_MAX:'ETextShapingMethod_MAX', };
declare type ETextFlowDirection = 'Auto' | 'LeftToRight' | 'RightToLeft' | 'ETextFlowDirection_MAX';
declare var ETextFlowDirection : { Auto:'Auto',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',ETextFlowDirection_MAX:'ETextFlowDirection_MAX', };
declare class ShapedTextOptions { 
	bOverride_TextShapingMethod: boolean;
	bOverride_TextFlowDirection: boolean;
	TextShapingMethod: ETextShapingMethod;
	TextFlowDirection: ETextFlowDirection;
	clone() : ShapedTextOptions;
	static C(Other: UObject | any): ShapedTextOptions;
}

declare type ETextCommit = 'Default' | 'OnEnter' | 'OnUserMovedFocus' | 'OnCleared' | 'ETextCommit_MAX';
declare var ETextCommit : { Default:'Default',OnEnter:'OnEnter',OnUserMovedFocus:'OnUserMovedFocus',OnCleared:'OnCleared',ETextCommit_MAX:'ETextCommit_MAX', };
declare class EditableText extends Widget { 
	text: string;
	TextDelegate: UnrealEngineDelegate<() => string>;
	HintText: string;
	HintTextDelegate: UnrealEngineDelegate<() => string>;
	WidgetStyle: EditableTextStyle;
	Style: SlateWidgetStyleAsset;
	BackgroundImageSelected: SlateBrushAsset;
	BackgroundImageComposing: SlateBrushAsset;
	CaretImage: SlateBrushAsset;
	Font: SlateFontInfo;
	ColorAndOpacity: SlateColor;
	IsReadOnly: boolean;
	IsPassword: boolean;
	MinimumDesiredWidth: number;
	IsCaretMovedWhenGainFocus: boolean;
	SelectAllTextWhenFocused: boolean;
	RevertTextOnEscape: boolean;
	ClearKeyboardFocusOnCommit: boolean;
	SelectAllTextOnCommit: boolean;
	AllowContextMenu: boolean;
	KeyboardType: EVirtualKeyboardType;
	VirtualKeyboardOptions: VirtualKeyboardOptions;
	VirtualKeyboardTrigger: EVirtualKeyboardTrigger;
	VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	Justification: ETextJustify;
	ShapedTextOptions: ShapedTextOptions;
	OnTextChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
	OnTextCommitted: UnrealEngineMulticastDelegate<(text: string, CommitMethod: ETextCommit) => void>;
	static Load(ResourceName: string): EditableText;
	static Find(Outer: UObject, ResourceName: string): EditableText;
	static GetDefaultObject(): EditableText;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableText;
	SetText(InText: string): void;
	SetJustification(InJustification: ETextJustify): void;
	SetIsReadOnly(InbIsReadyOnly: boolean): void;
	SetIsPassword(InbIsPassword: boolean): void;
	SetHintText(InHintText: string): void;
	GetText(): string;
	static C(Other: UObject | any): EditableText;
}

declare class EditableTextBox extends Widget { 
	text: string;
	TextDelegate: UnrealEngineDelegate<() => string>;
	WidgetStyle: EditableTextBoxStyle;
	Style: SlateWidgetStyleAsset;
	HintText: string;
	HintTextDelegate: UnrealEngineDelegate<() => string>;
	Font: SlateFontInfo;
	ForegroundColor: LinearColor;
	BackgroundColor: LinearColor;
	ReadOnlyForegroundColor: LinearColor;
	IsReadOnly: boolean;
	IsPassword: boolean;
	MinimumDesiredWidth: number;
	Padding: Margin;
	IsCaretMovedWhenGainFocus: boolean;
	SelectAllTextWhenFocused: boolean;
	RevertTextOnEscape: boolean;
	ClearKeyboardFocusOnCommit: boolean;
	SelectAllTextOnCommit: boolean;
	AllowContextMenu: boolean;
	KeyboardType: EVirtualKeyboardType;
	VirtualKeyboardOptions: VirtualKeyboardOptions;
	VirtualKeyboardTrigger: EVirtualKeyboardTrigger;
	VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	Justification: ETextJustify;
	ShapedTextOptions: ShapedTextOptions;
	OnTextChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
	OnTextCommitted: UnrealEngineMulticastDelegate<(text: string, CommitMethod: ETextCommit) => void>;
	static Load(ResourceName: string): EditableTextBox;
	static Find(Outer: UObject, ResourceName: string): EditableTextBox;
	static GetDefaultObject(): EditableTextBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableTextBox;
	SetText(InText: string): void;
	SetJustification(InJustification: ETextJustify): void;
	SetIsReadOnly(bReadOnly: boolean): void;
	SetIsPassword(bIsPassword: boolean): void;
	SetHintText(InText: string): void;
	SetError(InError: string): void;
	HasError(): boolean;
	GetText(): string;
	ClearError(): void;
	static C(Other: UObject | any): EditableTextBox;
}

declare class ExpandableAreaStyle extends SlateWidgetStyle { 
	CollapsedImage: SlateBrush;
	ExpandedImage: SlateBrush;
	RolloutAnimationSeconds: number;
	clone() : ExpandableAreaStyle;
	static C(Other: UObject | any): ExpandableAreaStyle;
}

declare class ExpandableArea extends Widget { 
	Style: ExpandableAreaStyle;
	BorderBrush: SlateBrush;
	BorderColor: SlateColor;
	bIsExpanded: boolean;
	MaxHeight: number;
	HeaderPadding: Margin;
	AreaPadding: Margin;
	OnExpansionChanged: UnrealEngineMulticastDelegate<(Area: ExpandableArea, bIsExpanded: boolean) => void>;
	HeaderContent: Widget;
	BodyContent: Widget;
	static Load(ResourceName: string): ExpandableArea;
	static Find(Outer: UObject, ResourceName: string): ExpandableArea;
	static GetDefaultObject(): ExpandableArea;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExpandableArea;
	SetIsExpanded_Animated(IsExpanded: boolean): void;
	SetIsExpanded(IsExpanded: boolean): void;
	GetIsExpanded(): boolean;
	static C(Other: UObject | any): ExpandableArea;
}

declare class FloatBinding extends PropertyBinding { 
	static Load(ResourceName: string): FloatBinding;
	static Find(Outer: UObject, ResourceName: string): FloatBinding;
	static GetDefaultObject(): FloatBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatBinding;
	GetValue(): number;
	static C(Other: UObject | any): FloatBinding;
}

declare class GridPanel extends PanelWidget { 
	ColumnFill: number[];
	RowFill: number[];
	static Load(ResourceName: string): GridPanel;
	static Find(Outer: UObject, ResourceName: string): GridPanel;
	static GetDefaultObject(): GridPanel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPanel;
	SetRowFill(ColumnIndex: number,Coefficient: number): void;
	SetColumnFill(ColumnIndex: number,Coefficient: number): void;
	AddChildToGrid(Content: Widget,InRow: number,InColumn: number): GridSlot;
	static C(Other: UObject | any): GridPanel;
}

declare class HorizontalBox extends PanelWidget { 
	static Load(ResourceName: string): HorizontalBox;
	static Find(Outer: UObject, ResourceName: string): HorizontalBox;
	static GetDefaultObject(): HorizontalBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HorizontalBox;
	AddChildToHorizontalBox(Content: Widget): HorizontalBoxSlot;
	static C(Other: UObject | any): HorizontalBox;
}

declare class UImage extends Widget { 
	UImage: SlateBrushAsset;
	Brush: SlateBrush;
	BrushDelegate: UnrealEngineDelegate<() => SlateBrush>;
	ColorAndOpacity: LinearColor;
	ColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
	bFlipForRightToLeftFlowDirection: boolean;
	OnMouseButtonDownEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
	static Load(ResourceName: string): UImage;
	static Find(Outer: UObject, ResourceName: string): UImage;
	static GetDefaultObject(): UImage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UImage;
	SetOpacity(InOpacity: number): void;
	SetColorAndOpacity(InColorAndOpacity: LinearColor): void;
	SetBrushTintColor(TintColor: SlateColor): void;
	SetBrushSize(DesiredSize: Vector2D): void;
	SetBrushResourceObject(ResourceObject: UObject): void;
	SetBrushFromTextureDynamic(Texture: Texture2DDynamic,bMatchSize: boolean): void;
	SetBrushFromTexture(Texture: Texture2D,bMatchSize: boolean): void;
	SetBrushFromSoftTexture(SoftTexture: Texture2D,bMatchSize: boolean): void;
	SetBrushFromSoftMaterial(SoftMaterial: MaterialInterface): void;
	SetBrushFromMaterial(Material: MaterialInterface): void;
	SetBrushFromAsset(Asset: SlateBrushAsset): void;
	SetBrush(InBrush: SlateBrush): void;
	GetDynamicMaterial(): MaterialInstanceDynamic;
	static C(Other: UObject | any): UImage;
}

declare class InputKeySelector extends Widget { 
	WidgetStyle: ButtonStyle;
	TextStyle: TextBlockStyle;
	SelectedKey: InputChord;
	Font: SlateFontInfo;
	Margin: Margin;
	ColorAndOpacity: LinearColor;
	KeySelectionText: string;
	NoKeySpecifiedText: string;
	bAllowModifierKeys: boolean;
	bAllowGamepadKeys: boolean;
	EscapeKeys: Key[];
	OnKeySelected: UnrealEngineMulticastDelegate<(SelectedKey: InputChord) => void>;
	OnIsSelectingKeyChanged: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): InputKeySelector;
	static Find(Outer: UObject, ResourceName: string): InputKeySelector;
	static GetDefaultObject(): InputKeySelector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputKeySelector;
	SetTextBlockVisibility(InVisibility: ESlateVisibility): void;
	SetSelectedKey(InSelectedKey: InputChord): void;
	SetNoKeySpecifiedText(InNoKeySpecifiedText: string): void;
	SetKeySelectionText(InKeySelectionText: string): void;
	SetEscapeKeys(InKeys: Key[]): void;
	SetAllowModifierKeys(bInAllowModifierKeys: boolean): void;
	SetAllowGamepadKeys(bInAllowGamepadKeys: boolean): void;
	GetIsSelectingKey(): boolean;
	static C(Other: UObject | any): InputKeySelector;
}

declare class Int32Binding extends PropertyBinding { 
	static Load(ResourceName: string): Int32Binding;
	static Find(Outer: UObject, ResourceName: string): Int32Binding;
	static GetDefaultObject(): Int32Binding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int32Binding;
	GetValue(): number;
	static C(Other: UObject | any): Int32Binding;
}

declare class InvalidationBox extends ContentWidget { 
	bCanCache: boolean;
	CacheRelativeTransforms: boolean;
	static Load(ResourceName: string): InvalidationBox;
	static Find(Outer: UObject, ResourceName: string): InvalidationBox;
	static GetDefaultObject(): InvalidationBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InvalidationBox;
	SetCanCache(CanCache: boolean): void;
	InvalidateCache(): void;
	GetCanCache(): boolean;
	static C(Other: UObject | any): InvalidationBox;
}

declare class UserListEntry extends Interface { 
	static Load(ResourceName: string): UserListEntry;
	static Find(Outer: UObject, ResourceName: string): UserListEntry;
	static GetDefaultObject(): UserListEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserListEntry;
	BP_OnItemSelectionChanged(bIsSelected: boolean): void;
	BP_OnItemExpansionChanged(bIsExpanded: boolean): void;
	BP_OnEntryReleased(): void;
	static C(Other: UObject | any): UserListEntry;
}

declare class UserListEntryLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): UserListEntryLibrary;
	static Find(Outer: UObject, ResourceName: string): UserListEntryLibrary;
	static GetDefaultObject(): UserListEntryLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserListEntryLibrary;
	static C(Other: UObject | any): UserListEntryLibrary;
}

declare class UserObjectListEntry extends UserListEntry { 
	static Load(ResourceName: string): UserObjectListEntry;
	static Find(Outer: UObject, ResourceName: string): UserObjectListEntry;
	static GetDefaultObject(): UserObjectListEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserObjectListEntry;
	OnListItemObjectSet(ListItemObject: UObject): void;
	static C(Other: UObject | any): UserObjectListEntry;
}

declare class UserObjectListEntryLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): UserObjectListEntryLibrary;
	static Find(Outer: UObject, ResourceName: string): UserObjectListEntryLibrary;
	static GetDefaultObject(): UserObjectListEntryLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserObjectListEntryLibrary;
	static C(Other: UObject | any): UserObjectListEntryLibrary;
}

declare class ListViewBase extends Widget { 
	EntryWidgetClass: UnrealEngineClass;
	WheelScrollMultiplier: number;
	bEnableScrollAnimation: boolean;
	bEnableFixedLineOffset: boolean;
	FixedLineScrollOffset: number;
	BP_OnEntryGenerated: UnrealEngineMulticastDelegate<(Widget: UserWidget) => void>;
	BP_OnEntryReleased: UnrealEngineMulticastDelegate<(Widget: UserWidget) => void>;
	NumDesignerPreviewEntries: number;
	EntryWidgetPool: UserWidgetPool;
	static Load(ResourceName: string): ListViewBase;
	static Find(Outer: UObject, ResourceName: string): ListViewBase;
	static GetDefaultObject(): ListViewBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListViewBase;
	SetWheelScrollMultiplier(NewWheelScrollMultiplier: number): void;
	SetScrollOffset(InScrollOffset: number): void;
	SetScrollbarVisibility(InVisibility: ESlateVisibility): void;
	ScrollToTop(): void;
	ScrollToBottom(): void;
	RequestRefresh(): void;
	RegenerateAllEntries(): void;
	GetDisplayedEntryWidgets(): UserWidget[];
	static C(Other: UObject | any): ListViewBase;
}

declare type EOrientation = 'Orient_Horizontal' | 'Orient_Vertical' | 'Orient_MAX';
declare var EOrientation : { Orient_Horizontal:'Orient_Horizontal',Orient_Vertical:'Orient_Vertical',Orient_MAX:'Orient_MAX', };
declare type ESelectionMode = 'None' | 'Single' | 'SingleToggle' | 'Multi' | 'ESelectionMode_MAX';
declare var ESelectionMode : { None:'None',Single:'Single',SingleToggle:'SingleToggle',Multi:'Multi',ESelectionMode_MAX:'ESelectionMode_MAX', };
declare type EConsumeMouseWheel = 'WhenScrollingPossible' | 'Always' | 'Never' | 'EConsumeMouseWheel_MAX';
declare var EConsumeMouseWheel : { WhenScrollingPossible:'WhenScrollingPossible',Always:'Always',Never:'Never',EConsumeMouseWheel_MAX:'EConsumeMouseWheel_MAX', };
declare class ListView extends ListViewBase { 
	Orientation: EOrientation;
	SelectionMode: ESelectionMode;
	ConsumeMouseWheel: EConsumeMouseWheel;
	bClearSelectionOnClick: boolean;
	bIsFocusable: boolean;
	EntrySpacing: number;
	bReturnFocusToSelection: boolean;
	ListItems: UObject[];
	BP_OnEntryInitialized: UnrealEngineMulticastDelegate<(Item: UObject, Widget: UserWidget) => void>;
	BP_OnItemClicked: UnrealEngineMulticastDelegate<(Item: UObject) => void>;
	BP_OnItemDoubleClicked: UnrealEngineMulticastDelegate<(Item: UObject) => void>;
	BP_OnItemIsHoveredChanged: UnrealEngineMulticastDelegate<(Item: UObject, bIsHovered: boolean) => void>;
	BP_OnItemSelectionChanged: UnrealEngineMulticastDelegate<(Item: UObject, bIsSelected: boolean) => void>;
	BP_OnItemScrolledIntoView: UnrealEngineMulticastDelegate<(Item: UObject, Widget: UserWidget) => void>;
	static Load(ResourceName: string): ListView;
	static Find(Outer: UObject, ResourceName: string): ListView;
	static GetDefaultObject(): ListView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListView;
	SetSelectionMode(SelectionMode: ESelectionMode): void;
	SetSelectedIndex(index: number): void;
	ScrollIndexIntoView(index: number): void;
	RemoveItem(Item: UObject): void;
	NavigateToIndex(index: number): void;
	IsRefreshPending(): boolean;
	GetNumItems(): number;
	GetListItems(): UObject[];
	GetItemAt(index: number): UObject;
	GetIndexForItem(Item: UObject): number;
	ClearListItems(): void;
	BP_SetSelectedItem(Item: UObject): void;
	BP_SetListItems(InListItems: UObject[]): void;
	BP_SetItemSelection(Item: UObject,bSelected: boolean): void;
	BP_ScrollItemIntoView(Item: UObject): void;
	BP_NavigateToItem(Item: UObject): void;
	BP_IsItemVisible(Item: UObject): boolean;
	BP_GetSelectedItems(Items?: UObject[]): {Items: UObject[], $: boolean};
	BP_GetSelectedItem(): UObject;
	BP_GetNumItemsSelected(): number;
	BP_ClearSelection(): void;
	BP_CancelScrollIntoView(): void;
	AddItem(Item: UObject): void;
	static C(Other: UObject | any): ListView;
}

declare class ListViewDesignerPreviewItem extends UObject { 
	static Load(ResourceName: string): ListViewDesignerPreviewItem;
	static Find(Outer: UObject, ResourceName: string): ListViewDesignerPreviewItem;
	static GetDefaultObject(): ListViewDesignerPreviewItem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListViewDesignerPreviewItem;
	static C(Other: UObject | any): ListViewDesignerPreviewItem;
}

declare type EMenuPlacement = 'MenuPlacement_BelowAnchor' | 'MenuPlacement_CenteredBelowAnchor' | 'MenuPlacement_BelowRightAnchor' | 'MenuPlacement_ComboBox' | 'MenuPlacement_ComboBoxRight' | 'MenuPlacement_MenuRight' | 'MenuPlacement_AboveAnchor' | 'MenuPlacement_CenteredAboveAnchor' | 'MenuPlacement_AboveRightAnchor' | 'MenuPlacement_MenuLeft' | 'MenuPlacement_Center' | 'MenuPlacement_RightLeftCenter' | 'MenuPlacement_MatchBottomLeft' | 'MenuPlacement_MAX';
declare var EMenuPlacement : { MenuPlacement_BelowAnchor:'MenuPlacement_BelowAnchor',MenuPlacement_CenteredBelowAnchor:'MenuPlacement_CenteredBelowAnchor',MenuPlacement_BelowRightAnchor:'MenuPlacement_BelowRightAnchor',MenuPlacement_ComboBox:'MenuPlacement_ComboBox',MenuPlacement_ComboBoxRight:'MenuPlacement_ComboBoxRight',MenuPlacement_MenuRight:'MenuPlacement_MenuRight',MenuPlacement_AboveAnchor:'MenuPlacement_AboveAnchor',MenuPlacement_CenteredAboveAnchor:'MenuPlacement_CenteredAboveAnchor',MenuPlacement_AboveRightAnchor:'MenuPlacement_AboveRightAnchor',MenuPlacement_MenuLeft:'MenuPlacement_MenuLeft',MenuPlacement_Center:'MenuPlacement_Center',MenuPlacement_RightLeftCenter:'MenuPlacement_RightLeftCenter',MenuPlacement_MatchBottomLeft:'MenuPlacement_MatchBottomLeft',MenuPlacement_MAX:'MenuPlacement_MAX', };
declare class MenuAnchor extends ContentWidget { 
	MenuClass: UnrealEngineClass;
	OnGetMenuContentEvent: UnrealEngineDelegate<() => Widget>;
	OnGetUserMenuContentEvent: UnrealEngineDelegate<() => UserWidget>;
	PLACEMENT: EMenuPlacement;
	bFitInWindow: boolean;
	ShouldDeferPaintingAfterWindowContent: boolean;
	UseApplicationMenuStack: boolean;
	OnMenuOpenChanged: UnrealEngineMulticastDelegate<(bIsOpen: boolean) => void>;
	static Load(ResourceName: string): MenuAnchor;
	static Find(Outer: UObject, ResourceName: string): MenuAnchor;
	static GetDefaultObject(): MenuAnchor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MenuAnchor;
	ToggleOpen(bFocusOnOpen: boolean): void;
	ShouldOpenDueToClick(): boolean;
	SetPlacement(InPlacement: EMenuPlacement): void;
	Open(bFocusMenu: boolean): void;
	IsOpen(): boolean;
	HasOpenSubMenus(): boolean;
	GetMenuPosition(): Vector2D;
	FitInWindow(bFit: boolean): void;
	Close(): void;
	static C(Other: UObject | any): MenuAnchor;
}

declare class MouseCursorBinding extends PropertyBinding { 
	static Load(ResourceName: string): MouseCursorBinding;
	static Find(Outer: UObject, ResourceName: string): MouseCursorBinding;
	static GetDefaultObject(): MouseCursorBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseCursorBinding;
	GetValue(): EMouseCursor;
	static C(Other: UObject | any): MouseCursorBinding;
}

declare class MovieSceneEntitySystem extends UObject { 
	Linker: MovieSceneEntitySystemLinker;
	static Load(ResourceName: string): MovieSceneEntitySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEntitySystem;
	static GetDefaultObject(): MovieSceneEntitySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEntitySystem;
	static C(Other: UObject | any): MovieSceneEntitySystem;
}

declare class MovieSceneEntityInstantiatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneEntityInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEntityInstantiatorSystem;
	static GetDefaultObject(): MovieSceneEntityInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEntityInstantiatorSystem;
	static C(Other: UObject | any): MovieSceneEntityInstantiatorSystem;
}

declare class MovieScenePropertyInstantiatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieScenePropertyInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePropertyInstantiatorSystem;
	static GetDefaultObject(): MovieScenePropertyInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePropertyInstantiatorSystem;
	static C(Other: UObject | any): MovieScenePropertyInstantiatorSystem;
}

declare class MovieScenePropertySystem extends MovieSceneEntitySystem { 
	InstantiatorSystem: MovieScenePropertyInstantiatorSystem;
	static Load(ResourceName: string): MovieScenePropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePropertySystem;
	static GetDefaultObject(): MovieScenePropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePropertySystem;
	static C(Other: UObject | any): MovieScenePropertySystem;
}

declare class MovieScene2DTransformPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieScene2DTransformPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieScene2DTransformPropertySystem;
	static GetDefaultObject(): MovieScene2DTransformPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene2DTransformPropertySystem;
	static C(Other: UObject | any): MovieScene2DTransformPropertySystem;
}

declare class MovieScene2DTransformMask { 
	mask: any;
	clone() : MovieScene2DTransformMask;
	static C(Other: UObject | any): MovieScene2DTransformMask;
}

declare class MovieScene2DTransformSection extends MovieSceneSection { 
	TransformMask: MovieScene2DTransformMask;
	Translation: MovieSceneFloatChannel;
	Rotation: MovieSceneFloatChannel;
	Scale: MovieSceneFloatChannel;
	Shear: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieScene2DTransformSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene2DTransformSection;
	static GetDefaultObject(): MovieScene2DTransformSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene2DTransformSection;
	static C(Other: UObject | any): MovieScene2DTransformSection;
}

declare class MovieSceneNameableTrack extends MovieSceneTrack { 
	DisplayName: string;
	static Load(ResourceName: string): MovieSceneNameableTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneNameableTrack;
	static GetDefaultObject(): MovieSceneNameableTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneNameableTrack;
	static C(Other: UObject | any): MovieSceneNameableTrack;
}

declare class MovieScenePropertyBinding { 
	PropertyName: string;
	PropertyPath: string;
	bCanUseClassLookup: boolean;
	clone() : MovieScenePropertyBinding;
	static C(Other: UObject | any): MovieScenePropertyBinding;
}

declare class MovieScenePropertyTrack extends MovieSceneNameableTrack { 
	UniqueTrackName: string;
	PropertyName: string;
	PropertyPath: string;
	SectionToKey: MovieSceneSection;
	PropertyBinding: MovieScenePropertyBinding;
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieScenePropertyTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScenePropertyTrack;
	static GetDefaultObject(): MovieScenePropertyTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePropertyTrack;
	static C(Other: UObject | any): MovieScenePropertyTrack;
}

declare class MovieScene2DTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieScene2DTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene2DTransformTrack;
	static GetDefaultObject(): MovieScene2DTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene2DTransformTrack;
	static C(Other: UObject | any): MovieScene2DTransformTrack;
}

declare class MovieSceneMarginSection extends MovieSceneSection { 
	TopCurve: MovieSceneFloatChannel;
	LeftCurve: MovieSceneFloatChannel;
	RightCurve: MovieSceneFloatChannel;
	BottomCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneMarginSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMarginSection;
	static GetDefaultObject(): MovieSceneMarginSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMarginSection;
	static C(Other: UObject | any): MovieSceneMarginSection;
}

declare class MovieSceneMarginTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneMarginTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMarginTrack;
	static GetDefaultObject(): MovieSceneMarginTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMarginTrack;
	static C(Other: UObject | any): MovieSceneMarginTrack;
}

declare class MovieSceneMaterialTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneMaterialTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMaterialTrack;
	static GetDefaultObject(): MovieSceneMaterialTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMaterialTrack;
	static C(Other: UObject | any): MovieSceneMaterialTrack;
}

declare class MovieSceneWidgetMaterialTrack extends MovieSceneMaterialTrack { 
	BrushPropertyNamePath: string[];
	TrackName: string;
	static Load(ResourceName: string): MovieSceneWidgetMaterialTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneWidgetMaterialTrack;
	static GetDefaultObject(): MovieSceneWidgetMaterialTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneWidgetMaterialTrack;
	static C(Other: UObject | any): MovieSceneWidgetMaterialTrack;
}

declare type ETextWrappingPolicy = 'DefaultWrapping' | 'AllowPerCharacterWrapping' | 'ETextWrappingPolicy_MAX';
declare var ETextWrappingPolicy : { DefaultWrapping:'DefaultWrapping',AllowPerCharacterWrapping:'AllowPerCharacterWrapping',ETextWrappingPolicy_MAX:'ETextWrappingPolicy_MAX', };
declare class TextLayoutWidget extends Widget { 
	ShapedTextOptions: ShapedTextOptions;
	Justification: ETextJustify;
	WrappingPolicy: ETextWrappingPolicy;
	AutoWrapText: boolean;
	WrapTextAt: number;
	Margin: Margin;
	LineHeightPercentage: number;
	static Load(ResourceName: string): TextLayoutWidget;
	static Find(Outer: UObject, ResourceName: string): TextLayoutWidget;
	static GetDefaultObject(): TextLayoutWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextLayoutWidget;
	SetJustification(InJustification: ETextJustify): void;
	static C(Other: UObject | any): TextLayoutWidget;
}

declare class MultiLineEditableText extends TextLayoutWidget { 
	text: string;
	HintText: string;
	HintTextDelegate: UnrealEngineDelegate<() => string>;
	WidgetStyle: TextBlockStyle;
	bIsReadOnly: boolean;
	Font: SlateFontInfo;
	SelectAllTextWhenFocused: boolean;
	ClearTextSelectionOnFocusLoss: boolean;
	RevertTextOnEscape: boolean;
	ClearKeyboardFocusOnCommit: boolean;
	AllowContextMenu: boolean;
	VirtualKeyboardOptions: VirtualKeyboardOptions;
	VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	OnTextChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
	OnTextCommitted: UnrealEngineMulticastDelegate<(text: string, CommitMethod: ETextCommit) => void>;
	static Load(ResourceName: string): MultiLineEditableText;
	static Find(Outer: UObject, ResourceName: string): MultiLineEditableText;
	static GetDefaultObject(): MultiLineEditableText;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiLineEditableText;
	SetWidgetStyle(InWidgetStyle: TextBlockStyle): void;
	SetText(InText: string): void;
	SetIsReadOnly(bReadOnly: boolean): void;
	SetHintText(InHintText: string): void;
	GetText(): string;
	GetHintText(): string;
	static C(Other: UObject | any): MultiLineEditableText;
}

declare class MultiLineEditableTextBox extends TextLayoutWidget { 
	text: string;
	HintText: string;
	HintTextDelegate: UnrealEngineDelegate<() => string>;
	WidgetStyle: EditableTextBoxStyle;
	TextStyle: TextBlockStyle;
	bIsReadOnly: boolean;
	AllowContextMenu: boolean;
	VirtualKeyboardOptions: VirtualKeyboardOptions;
	VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	Style: SlateWidgetStyleAsset;
	Font: SlateFontInfo;
	ForegroundColor: LinearColor;
	BackgroundColor: LinearColor;
	ReadOnlyForegroundColor: LinearColor;
	OnTextChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
	OnTextCommitted: UnrealEngineMulticastDelegate<(text: string, CommitMethod: ETextCommit) => void>;
	static Load(ResourceName: string): MultiLineEditableTextBox;
	static Find(Outer: UObject, ResourceName: string): MultiLineEditableTextBox;
	static GetDefaultObject(): MultiLineEditableTextBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiLineEditableTextBox;
	SetTextStyle(InTextStyle: TextBlockStyle): void;
	SetText(InText: string): void;
	SetIsReadOnly(bReadOnly: boolean): void;
	SetHintText(InHintText: string): void;
	SetError(InError: string): void;
	GetText(): string;
	GetHintText(): string;
	static C(Other: UObject | any): MultiLineEditableTextBox;
}

declare class NamedSlot extends ContentWidget { 
	static Load(ResourceName: string): NamedSlot;
	static Find(Outer: UObject, ResourceName: string): NamedSlot;
	static GetDefaultObject(): NamedSlot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NamedSlot;
	static C(Other: UObject | any): NamedSlot;
}

declare class NamedSlotInterface extends Interface { 
	static Load(ResourceName: string): NamedSlotInterface;
	static Find(Outer: UObject, ResourceName: string): NamedSlotInterface;
	static GetDefaultObject(): NamedSlotInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NamedSlotInterface;
	static C(Other: UObject | any): NamedSlotInterface;
}

declare class NativeWidgetHost extends Widget { 
	static Load(ResourceName: string): NativeWidgetHost;
	static Find(Outer: UObject, ResourceName: string): NativeWidgetHost;
	static GetDefaultObject(): NativeWidgetHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NativeWidgetHost;
	static C(Other: UObject | any): NativeWidgetHost;
	SetContent(SlateWidget: JavascriptSlateWidget): Widget;
	static SetContent(TargetWidget: NativeWidgetHost,SlateWidget: JavascriptSlateWidget): Widget;
}

declare class Overlay extends PanelWidget { 
	static Load(ResourceName: string): Overlay;
	static Find(Outer: UObject, ResourceName: string): Overlay;
	static GetDefaultObject(): Overlay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Overlay;
	AddChildToOverlay(Content: Widget): OverlaySlot;
	static C(Other: UObject | any): Overlay;
}

declare type EProgressBarFillType = 'LeftToRight' | 'RightToLeft' | 'FillFromCenter' | 'TopToBottom' | 'BottomToTop' | 'EProgressBarFillType_MAX';
declare var EProgressBarFillType : { LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',FillFromCenter:'FillFromCenter',TopToBottom:'TopToBottom',BottomToTop:'BottomToTop',EProgressBarFillType_MAX:'EProgressBarFillType_MAX', };
declare class ProgressBar extends Widget { 
	WidgetStyle: ProgressBarStyle;
	Style: SlateWidgetStyleAsset;
	BackgroundImage: SlateBrushAsset;
	FillImage: SlateBrushAsset;
	MarqueeImage: SlateBrushAsset;
	Percent: number;
	BarFillType: EProgressBarFillType;
	bIsMarquee: boolean;
	BorderPadding: Vector2D;
	PercentDelegate: UnrealEngineDelegate<() => number>;
	FillColorAndOpacity: LinearColor;
	FillColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
	static Load(ResourceName: string): ProgressBar;
	static Find(Outer: UObject, ResourceName: string): ProgressBar;
	static GetDefaultObject(): ProgressBar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProgressBar;
	SetPercent(InPercent: number): void;
	SetIsMarquee(InbIsMarquee: boolean): void;
	SetFillColorAndOpacity(InColor: LinearColor): void;
	static C(Other: UObject | any): ProgressBar;
}

declare class RetainerBox extends ContentWidget { 
	bRetainRender: boolean;
	RenderOnInvalidation: boolean;
	RenderOnPhase: boolean;
	Phase: number;
	PhaseCount: number;
	EffectMaterial: MaterialInterface;
	TextureParameter: string;
	static Load(ResourceName: string): RetainerBox;
	static Find(Outer: UObject, ResourceName: string): RetainerBox;
	static GetDefaultObject(): RetainerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RetainerBox;
	SetTextureParameter(TextureParameter: string): void;
	SetRetainRendering(bInRetainRendering: boolean): void;
	SetRenderingPhase(RenderPhase: number,TotalPhases: number): void;
	SetEffectMaterial(EffectMaterial: MaterialInterface): void;
	RequestRender(): void;
	GetEffectMaterial(): MaterialInstanceDynamic;
	static C(Other: UObject | any): RetainerBox;
}

declare class RichTextBlockDecorator extends UObject { 
	static Load(ResourceName: string): RichTextBlockDecorator;
	static Find(Outer: UObject, ResourceName: string): RichTextBlockDecorator;
	static GetDefaultObject(): RichTextBlockDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RichTextBlockDecorator;
	static C(Other: UObject | any): RichTextBlockDecorator;
}

declare type ETextTransformPolicy = 'None' | 'ToLower' | 'ToUpper' | 'ETextTransformPolicy_MAX';
declare var ETextTransformPolicy : { None:'None',ToLower:'ToLower',ToUpper:'ToUpper',ETextTransformPolicy_MAX:'ETextTransformPolicy_MAX', };
declare class RichTextBlock extends TextLayoutWidget { 
	text: string;
	TextStyleSet: DataTable;
	DecoratorClasses: UnrealEngineClass[];
	bOverrideDefaultStyle: boolean;
	DefaultTextStyleOverride: TextBlockStyle;
	MinDesiredWidth: number;
	TextTransformPolicy: ETextTransformPolicy;
	DefaultTextStyle: TextBlockStyle;
	InstanceDecorators: RichTextBlockDecorator[];
	static Load(ResourceName: string): RichTextBlock;
	static Find(Outer: UObject, ResourceName: string): RichTextBlock;
	static GetDefaultObject(): RichTextBlock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RichTextBlock;
	SetTextTransformPolicy(InTransformPolicy: ETextTransformPolicy): void;
	SetTextStyleSet(NewTextStyleSet: DataTable): void;
	SetText(InText: string): void;
	SetMinDesiredWidth(InMinDesiredWidth: number): void;
	SetDefaultTextStyle(InDefaultTextStyle: TextBlockStyle): void;
	SetDefaultStrikeBrush(InStrikeBrush?: SlateBrush): {InStrikeBrush: SlateBrush};
	SetDefaultShadowOffset(InShadowOffset: Vector2D): void;
	SetDefaultShadowColorAndOpacity(InShadowColorAndOpacity: LinearColor): void;
	SetDefaultFont(InFontInfo: SlateFontInfo): void;
	SetDefaultColorAndOpacity(InColorAndOpacity: SlateColor): void;
	SetAutoWrapText(InAutoTextWrap: boolean): void;
	GetText(): string;
	GetDecoratorByClass(DecoratorClass: UnrealEngineClass): RichTextBlockDecorator;
	ClearAllDefaultStyleOverrides(): void;
	static C(Other: UObject | any): RichTextBlock;
}

declare class RichTextBlockImageDecorator extends RichTextBlockDecorator { 
	ImageSet: DataTable;
	static Load(ResourceName: string): RichTextBlockImageDecorator;
	static Find(Outer: UObject, ResourceName: string): RichTextBlockImageDecorator;
	static GetDefaultObject(): RichTextBlockImageDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RichTextBlockImageDecorator;
	static C(Other: UObject | any): RichTextBlockImageDecorator;
}

declare class SafeZone extends ContentWidget { 
	PadLeft: boolean;
	PadRight: boolean;
	PadTop: boolean;
	PadBottom: boolean;
	static Load(ResourceName: string): SafeZone;
	static Find(Outer: UObject, ResourceName: string): SafeZone;
	static GetDefaultObject(): SafeZone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SafeZone;
	SetSidesToPad(InPadLeft: boolean,InPadRight: boolean,InPadTop: boolean,InPadBottom: boolean): void;
	static C(Other: UObject | any): SafeZone;
}

declare type EStretch = 'None' | 'Fill' | 'ScaleToFit' | 'ScaleToFitX' | 'ScaleToFitY' | 'ScaleToFill' | 'ScaleBySafeZone' | 'UserSpecified' | 'EStretch_MAX';
declare var EStretch : { None:'None',Fill:'Fill',ScaleToFit:'ScaleToFit',ScaleToFitX:'ScaleToFitX',ScaleToFitY:'ScaleToFitY',ScaleToFill:'ScaleToFill',ScaleBySafeZone:'ScaleBySafeZone',UserSpecified:'UserSpecified',EStretch_MAX:'EStretch_MAX', };
declare type EStretchDirection = 'Both' | 'DownOnly' | 'UpOnly' | 'EStretchDirection_MAX';
declare var EStretchDirection : { Both:'Both',DownOnly:'DownOnly',UpOnly:'UpOnly',EStretchDirection_MAX:'EStretchDirection_MAX', };
declare class ScaleBox extends ContentWidget { 
	Stretch: EStretch;
	StretchDirection: EStretchDirection;
	UserSpecifiedScale: number;
	IgnoreInheritedScale: boolean;
	static Load(ResourceName: string): ScaleBox;
	static Find(Outer: UObject, ResourceName: string): ScaleBox;
	static GetDefaultObject(): ScaleBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScaleBox;
	SetUserSpecifiedScale(InUserSpecifiedScale: number): void;
	SetStretchDirection(InStretchDirection: EStretchDirection): void;
	SetStretch(InStretch: EStretch): void;
	SetIgnoreInheritedScale(bInIgnoreInheritedScale: boolean): void;
	static C(Other: UObject | any): ScaleBox;
}

declare class ScrollBar extends Widget { 
	WidgetStyle: ScrollBarStyle;
	Style: SlateWidgetStyleAsset;
	bAlwaysShowScrollbar: boolean;
	bAlwaysShowScrollbarTrack: boolean;
	Orientation: EOrientation;
	Thickness: Vector2D;
	Padding: Margin;
	static Load(ResourceName: string): ScrollBar;
	static Find(Outer: UObject, ResourceName: string): ScrollBar;
	static GetDefaultObject(): ScrollBar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBar;
	SetState(InOffsetFraction: number,InThumbSizeFraction: number): void;
	static C(Other: UObject | any): ScrollBar;
}

declare type EDescendantScrollDestination = 'IntoView' | 'TopOrLeft' | 'Center' | 'EDescendantScrollDestination_MAX';
declare var EDescendantScrollDestination : { IntoView:'IntoView',TopOrLeft:'TopOrLeft',Center:'Center',EDescendantScrollDestination_MAX:'EDescendantScrollDestination_MAX', };
declare type EScrollWhenFocusChanges = 'NoScroll' | 'InstantScroll' | 'AnimatedScroll' | 'EScrollWhenFocusChanges_MAX';
declare var EScrollWhenFocusChanges : { NoScroll:'NoScroll',InstantScroll:'InstantScroll',AnimatedScroll:'AnimatedScroll',EScrollWhenFocusChanges_MAX:'EScrollWhenFocusChanges_MAX', };
declare class ScrollBox extends PanelWidget { 
	WidgetStyle: ScrollBoxStyle;
	WidgetBarStyle: ScrollBarStyle;
	Style: SlateWidgetStyleAsset;
	BarStyle: SlateWidgetStyleAsset;
	Orientation: EOrientation;
	ScrollBarVisibility: ESlateVisibility;
	ConsumeMouseWheel: EConsumeMouseWheel;
	ScrollbarThickness: Vector2D;
	ScrollbarPadding: Margin;
	AlwaysShowScrollbar: boolean;
	AlwaysShowScrollbarTrack: boolean;
	AllowOverscroll: boolean;
	bAnimateWheelScrolling: boolean;
	NavigationDestination: EDescendantScrollDestination;
	NavigationScrollPadding: number;
	ScrollWhenFocusChanges: EScrollWhenFocusChanges;
	bAllowRightClickDragScrolling: boolean;
	WheelScrollMultiplier: number;
	OnUserScrolled: UnrealEngineMulticastDelegate<(CurrentOffset: number) => void>;
	static Load(ResourceName: string): ScrollBox;
	static Find(Outer: UObject, ResourceName: string): ScrollBox;
	static GetDefaultObject(): ScrollBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBox;
	SetWheelScrollMultiplier(NewWheelScrollMultiplier: number): void;
	SetScrollOffset(NewScrollOffset: number): void;
	SetScrollBarVisibility(NewScrollBarVisibility: ESlateVisibility): void;
	SetScrollbarThickness(NewScrollbarThickness: Vector2D): void;
	SetScrollbarPadding(NewScrollbarPadding: Margin): void;
	SetOrientation(NewOrientation: EOrientation): void;
	SetConsumeMouseWheel(NewConsumeMouseWheel: EConsumeMouseWheel): void;
	SetAnimateWheelScrolling(bShouldAnimateWheelScrolling: boolean): void;
	SetAlwaysShowScrollbar(NewAlwaysShowScrollbar: boolean): void;
	SetAllowOverscroll(NewAllowOverscroll: boolean): void;
	ScrollWidgetIntoView(WidgetToFind: Widget,AnimateScroll: boolean,ScrollDestination: EDescendantScrollDestination,Padding: number): void;
	ScrollToStart(): void;
	ScrollToEnd(): void;
	GetViewOffsetFraction(): number;
	GetScrollOffsetOfEnd(): number;
	GetScrollOffset(): number;
	EndInertialScrolling(): void;
	static C(Other: UObject | any): ScrollBox;
}

declare class SizeBox extends ContentWidget { 
	WidthOverride: number;
	HeightOverride: number;
	MinDesiredWidth: number;
	MinDesiredHeight: number;
	MaxDesiredWidth: number;
	MaxDesiredHeight: number;
	MinAspectRatio: number;
	MaxAspectRatio: number;
	bOverride_WidthOverride: boolean;
	bOverride_HeightOverride: boolean;
	bOverride_MinDesiredWidth: boolean;
	bOverride_MinDesiredHeight: boolean;
	bOverride_MaxDesiredWidth: boolean;
	bOverride_MaxDesiredHeight: boolean;
	bOverride_MinAspectRatio: boolean;
	bOverride_MaxAspectRatio: boolean;
	static Load(ResourceName: string): SizeBox;
	static Find(Outer: UObject, ResourceName: string): SizeBox;
	static GetDefaultObject(): SizeBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SizeBox;
	SetWidthOverride(InWidthOverride: number): void;
	SetMinDesiredWidth(InMinDesiredWidth: number): void;
	SetMinDesiredHeight(InMinDesiredHeight: number): void;
	SetMinAspectRatio(InMinAspectRatio: number): void;
	SetMaxDesiredWidth(InMaxDesiredWidth: number): void;
	SetMaxDesiredHeight(InMaxDesiredHeight: number): void;
	SetMaxAspectRatio(InMaxAspectRatio: number): void;
	SetHeightOverride(InHeightOverride: number): void;
	ClearWidthOverride(): void;
	ClearMinDesiredWidth(): void;
	ClearMinDesiredHeight(): void;
	ClearMinAspectRatio(): void;
	ClearMaxDesiredWidth(): void;
	ClearMaxDesiredHeight(): void;
	ClearMaxAspectRatio(): void;
	ClearHeightOverride(): void;
	static C(Other: UObject | any): SizeBox;
}

declare class SlateBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SlateBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): SlateBlueprintLibrary;
	static GetDefaultObject(): SlateBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBlueprintLibrary;
	static TransformVectorLocalToAbsolute(Geometry: Geometry,LocalVector: Vector2D): Vector2D;
	static TransformVectorAbsoluteToLocal(Geometry: Geometry,AbsoluteVector: Vector2D): Vector2D;
	static TransformScalarLocalToAbsolute(Geometry: Geometry,LocalScalar: number): number;
	static TransformScalarAbsoluteToLocal(Geometry: Geometry,AbsoluteScalar: number): number;
	static ScreenToWidgetLocal(WorldContextObject: UObject,Geometry: Geometry,ScreenPosition: Vector2D,LocalCoordinate?: Vector2D,bIncludeWindowPosition?: boolean): {LocalCoordinate: Vector2D};
	static ScreenToWidgetAbsolute(WorldContextObject: UObject,ScreenPosition: Vector2D,AbsoluteCoordinate?: Vector2D,bIncludeWindowPosition?: boolean): {AbsoluteCoordinate: Vector2D};
	static ScreenToViewport(WorldContextObject: UObject,ScreenPosition: Vector2D,ViewportPosition?: Vector2D): {ViewportPosition: Vector2D};
	static LocalToViewport(WorldContextObject: UObject,Geometry: Geometry,LocalCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
	static LocalToAbsolute(Geometry: Geometry,LocalCoordinate: Vector2D): Vector2D;
	static IsUnderLocation(Geometry: Geometry,AbsoluteCoordinate: Vector2D): boolean;
	static GetLocalTopLeft(Geometry: Geometry): Vector2D;
	static GetLocalSize(Geometry: Geometry): Vector2D;
	static GetAbsoluteSize(Geometry: Geometry): Vector2D;
	static EqualEqual_SlateBrush(A: SlateBrush,B: SlateBrush): boolean;
	static AbsoluteToViewport(WorldContextObject: UObject,AbsoluteDesktopCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
	static AbsoluteToLocal(Geometry: Geometry,AbsoluteCoordinate: Vector2D): Vector2D;
	static C(Other: UObject | any): SlateBlueprintLibrary;
}

declare class SlateMeshVertex { 
	Position: Vector2D;
	Color: Color;
	UV0: Vector2D;
	UV1: Vector2D;
	UV2: Vector2D;
	UV3: Vector2D;
	UV4: Vector2D;
	UV5: Vector2D;
	clone() : SlateMeshVertex;
	static C(Other: UObject | any): SlateMeshVertex;
}

declare class SlateVectorArtData extends UObject { 
	MeshAsset: StaticMesh;
	SourceMaterial: MaterialInterface;
	VertexData: SlateMeshVertex[];
	IndexData: any[];
	Material: MaterialInterface;
	ExtentMin: Vector2D;
	ExtentMax: Vector2D;
	static Load(ResourceName: string): SlateVectorArtData;
	static Find(Outer: UObject, ResourceName: string): SlateVectorArtData;
	static GetDefaultObject(): SlateVectorArtData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateVectorArtData;
	static C(Other: UObject | any): SlateVectorArtData;
}

declare class SliderStyle extends SlateWidgetStyle { 
	NormalBarImage: SlateBrush;
	HoveredBarImage: SlateBrush;
	DisabledBarImage: SlateBrush;
	NormalThumbImage: SlateBrush;
	HoveredThumbImage: SlateBrush;
	DisabledThumbImage: SlateBrush;
	BarThickness: number;
	clone() : SliderStyle;
	static C(Other: UObject | any): SliderStyle;
}

declare class Slider extends Widget { 
	Value: number;
	ValueDelegate: UnrealEngineDelegate<() => number>;
	MinValue: number;
	MaxValue: number;
	WidgetStyle: SliderStyle;
	Orientation: EOrientation;
	SliderBarColor: LinearColor;
	SliderHandleColor: LinearColor;
	IndentHandle: boolean;
	Locked: boolean;
	MouseUsesStep: boolean;
	RequiresControllerLock: boolean;
	StepSize: number;
	IsFocusable: boolean;
	OnMouseCaptureBegin: UnrealEngineMulticastDelegate<() => void>;
	OnMouseCaptureEnd: UnrealEngineMulticastDelegate<() => void>;
	OnControllerCaptureBegin: UnrealEngineMulticastDelegate<() => void>;
	OnControllerCaptureEnd: UnrealEngineMulticastDelegate<() => void>;
	OnValueChanged: UnrealEngineMulticastDelegate<(Value: number) => void>;
	static Load(ResourceName: string): Slider;
	static Find(Outer: UObject, ResourceName: string): Slider;
	static GetDefaultObject(): Slider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Slider;
	SetValue(InValue: number): void;
	SetStepSize(InValue: number): void;
	SetSliderHandleColor(InValue: LinearColor): void;
	SetSliderBarColor(InValue: LinearColor): void;
	SetMinValue(InValue: number): void;
	SetMaxValue(InValue: number): void;
	SetLocked(InValue: boolean): void;
	SetIndentHandle(InValue: boolean): void;
	GetValue(): number;
	GetNormalizedValue(): number;
	static C(Other: UObject | any): Slider;
}

declare class Spacer extends Widget { 
	Size: Vector2D;
	static Load(ResourceName: string): Spacer;
	static Find(Outer: UObject, ResourceName: string): Spacer;
	static GetDefaultObject(): Spacer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Spacer;
	SetSize(InSize: Vector2D): void;
	static C(Other: UObject | any): Spacer;
}

declare class SpinBox extends Widget { 
	Value: number;
	ValueDelegate: UnrealEngineDelegate<() => number>;
	WidgetStyle: SpinBoxStyle;
	Style: SlateWidgetStyleAsset;
	MinFractionalDigits: number;
	MaxFractionalDigits: number;
	bAlwaysUsesDeltaSnap: boolean;
	Delta: number;
	SliderExponent: number;
	Font: SlateFontInfo;
	Justification: ETextJustify;
	MinDesiredWidth: number;
	ClearKeyboardFocusOnCommit: boolean;
	SelectAllTextOnCommit: boolean;
	ForegroundColor: SlateColor;
	OnValueChanged: UnrealEngineMulticastDelegate<(InValue: number) => void>;
	OnValueCommitted: UnrealEngineMulticastDelegate<(InValue: number, CommitMethod: ETextCommit) => void>;
	OnBeginSliderMovement: UnrealEngineMulticastDelegate<() => void>;
	OnEndSliderMovement: UnrealEngineMulticastDelegate<(InValue: number) => void>;
	bOverride_MinValue: boolean;
	bOverride_MaxValue: boolean;
	bOverride_MinSliderValue: boolean;
	bOverride_MaxSliderValue: boolean;
	MinValue: number;
	MaxValue: number;
	MinSliderValue: number;
	MaxSliderValue: number;
	static Load(ResourceName: string): SpinBox;
	static Find(Outer: UObject, ResourceName: string): SpinBox;
	static GetDefaultObject(): SpinBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpinBox;
	SetValue(NewValue: number): void;
	SetMinValue(NewValue: number): void;
	SetMinSliderValue(NewValue: number): void;
	SetMinFractionalDigits(NewValue: number): void;
	SetMaxValue(NewValue: number): void;
	SetMaxSliderValue(NewValue: number): void;
	SetMaxFractionalDigits(NewValue: number): void;
	SetForegroundColor(InForegroundColor: SlateColor): void;
	SetDelta(NewValue: number): void;
	SetAlwaysUsesDeltaSnap(bNewValue: boolean): void;
	GetValue(): number;
	GetMinValue(): number;
	GetMinSliderValue(): number;
	GetMinFractionalDigits(): number;
	GetMaxValue(): number;
	GetMaxSliderValue(): number;
	GetMaxFractionalDigits(): number;
	GetDelta(): number;
	GetAlwaysUsesDeltaSnap(): boolean;
	ClearMinValue(): void;
	ClearMinSliderValue(): void;
	ClearMaxValue(): void;
	ClearMaxSliderValue(): void;
	static C(Other: UObject | any): SpinBox;
}

declare class TextBinding extends PropertyBinding { 
	static Load(ResourceName: string): TextBinding;
	static Find(Outer: UObject, ResourceName: string): TextBinding;
	static GetDefaultObject(): TextBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBinding;
	GetTextValue(): string;
	GetStringValue(): string;
	static C(Other: UObject | any): TextBinding;
}

declare class TextBlock extends TextLayoutWidget { 
	text: string;
	TextDelegate: UnrealEngineDelegate<() => string>;
	ColorAndOpacity: SlateColor;
	ColorAndOpacityDelegate: UnrealEngineDelegate<() => SlateColor>;
	Font: SlateFontInfo;
	StrikeBrush: SlateBrush;
	ShadowOffset: Vector2D;
	ShadowColorAndOpacity: LinearColor;
	ShadowColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
	MinDesiredWidth: number;
	bWrapWithInvalidationPanel: boolean;
	bAutoWrapText: boolean;
	TextTransformPolicy: ETextTransformPolicy;
	bSimpleTextMode: boolean;
	static Load(ResourceName: string): TextBlock;
	static Find(Outer: UObject, ResourceName: string): TextBlock;
	static GetDefaultObject(): TextBlock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBlock;
	SetTextTransformPolicy(InTransformPolicy: ETextTransformPolicy): void;
	SetText(InText: string): void;
	SetStrikeBrush(InStrikeBrush: SlateBrush): void;
	SetShadowOffset(InShadowOffset: Vector2D): void;
	SetShadowColorAndOpacity(InShadowColorAndOpacity: LinearColor): void;
	SetOpacity(InOpacity: number): void;
	SetMinDesiredWidth(InMinDesiredWidth: number): void;
	SetFont(InFontInfo: SlateFontInfo): void;
	SetColorAndOpacity(InColorAndOpacity: SlateColor): void;
	SetAutoWrapText(InAutoTextWrap: boolean): void;
	GetText(): string;
	GetDynamicOutlineMaterial(): MaterialInstanceDynamic;
	GetDynamicFontMaterial(): MaterialInstanceDynamic;
	static C(Other: UObject | any): TextBlock;
}

declare class Throbber extends Widget { 
	NumberOfPieces: number;
	bAnimateHorizontally: boolean;
	bAnimateVertically: boolean;
	bAnimateOpacity: boolean;
	PieceImage: SlateBrushAsset;
	UImage: SlateBrush;
	static Load(ResourceName: string): Throbber;
	static Find(Outer: UObject, ResourceName: string): Throbber;
	static GetDefaultObject(): Throbber;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Throbber;
	SetNumberOfPieces(InNumberOfPieces: number): void;
	SetAnimateVertically(bInAnimateVertically: boolean): void;
	SetAnimateOpacity(bInAnimateOpacity: boolean): void;
	SetAnimateHorizontally(bInAnimateHorizontally: boolean): void;
	static C(Other: UObject | any): Throbber;
}

declare type EListItemAlignment = 'EvenlyDistributed' | 'EvenlySize' | 'EvenlyWide' | 'LeftAligned' | 'RightAligned' | 'CenterAligned' | 'Fill' | 'EListItemAlignment_MAX';
declare var EListItemAlignment : { EvenlyDistributed:'EvenlyDistributed',EvenlySize:'EvenlySize',EvenlyWide:'EvenlyWide',LeftAligned:'LeftAligned',RightAligned:'RightAligned',CenterAligned:'CenterAligned',Fill:'Fill',EListItemAlignment_MAX:'EListItemAlignment_MAX', };
declare class TileView extends ListView { 
	EntryHeight: number;
	EntryWidth: number;
	TileAlignment: EListItemAlignment;
	bWrapHorizontalNavigation: boolean;
	static Load(ResourceName: string): TileView;
	static Find(Outer: UObject, ResourceName: string): TileView;
	static GetDefaultObject(): TileView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileView;
	SetEntryWidth(NewWidth: number): void;
	SetEntryHeight(NewHeight: number): void;
	GetEntryWidth(): number;
	GetEntryHeight(): number;
	static C(Other: UObject | any): TileView;
}

declare class TreeView extends ListView { 
	BP_OnGetItemChildren: UnrealEngineDelegate<(Item: UObject, Children: UObject[]) => void>;
	BP_OnItemExpansionChanged: UnrealEngineMulticastDelegate<(Item: UObject, bIsExpanded: boolean) => void>;
	static Load(ResourceName: string): TreeView;
	static Find(Outer: UObject, ResourceName: string): TreeView;
	static GetDefaultObject(): TreeView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TreeView;
	SetItemExpansion(Item: UObject,bExpandItem: boolean): void;
	ExpandAll(): void;
	CollapseAll(): void;
	static C(Other: UObject | any): TreeView;
}

declare class UniformGridPanel extends PanelWidget { 
	SlotPadding: Margin;
	MinDesiredSlotWidth: number;
	MinDesiredSlotHeight: number;
	static Load(ResourceName: string): UniformGridPanel;
	static Find(Outer: UObject, ResourceName: string): UniformGridPanel;
	static GetDefaultObject(): UniformGridPanel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformGridPanel;
	SetSlotPadding(InSlotPadding: Margin): void;
	SetMinDesiredSlotWidth(InMinDesiredSlotWidth: number): void;
	SetMinDesiredSlotHeight(InMinDesiredSlotHeight: number): void;
	AddChildToUniformGrid(Content: Widget,InRow: number,InColumn: number): UniformGridSlot;
	static C(Other: UObject | any): UniformGridPanel;
}

declare class VerticalBox extends PanelWidget { 
	static Load(ResourceName: string): VerticalBox;
	static Find(Outer: UObject, ResourceName: string): VerticalBox;
	static GetDefaultObject(): VerticalBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VerticalBox;
	AddChildToVerticalBox(Content: Widget): VerticalBoxSlot;
	static C(Other: UObject | any): VerticalBox;
}

declare class Viewport extends ContentWidget { 
	BackgroundColor: LinearColor;
	static Load(ResourceName: string): Viewport;
	static Find(Outer: UObject, ResourceName: string): Viewport;
	static GetDefaultObject(): Viewport;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Viewport;
	Spawn(ActorClass: UnrealEngineClass): Actor;
	SetViewRotation(Rotation: Rotator): void;
	SetViewLocation(Location: Vector): void;
	GetViewRotation(): Rotator;
	GetViewportWorld(): World;
	GetViewLocation(): Vector;
	static C(Other: UObject | any): Viewport;
}

declare class VisibilityBinding extends PropertyBinding { 
	static Load(ResourceName: string): VisibilityBinding;
	static Find(Outer: UObject, ResourceName: string): VisibilityBinding;
	static GetDefaultObject(): VisibilityBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisibilityBinding;
	GetValue(): ESlateVisibility;
	static C(Other: UObject | any): VisibilityBinding;
}

declare class BlueprintWidgetAnimationDelegateBinding { 
	Action: EWidgetAnimationEvent;
	AnimationToBind: string;
	FunctionNameToBind: string;
	UserTag: string;
	clone() : BlueprintWidgetAnimationDelegateBinding;
	static C(Other: UObject | any): BlueprintWidgetAnimationDelegateBinding;
}

declare class WidgetAnimationDelegateBinding extends DynamicBlueprintBinding { 
	WidgetAnimationDelegateBindings: BlueprintWidgetAnimationDelegateBinding[];
	static Load(ResourceName: string): WidgetAnimationDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): WidgetAnimationDelegateBinding;
	static GetDefaultObject(): WidgetAnimationDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetAnimationDelegateBinding;
	static C(Other: UObject | any): WidgetAnimationDelegateBinding;
}

declare class WidgetAnimationPlayCallbackProxy extends UObject { 
	Finished: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): WidgetAnimationPlayCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): WidgetAnimationPlayCallbackProxy;
	static GetDefaultObject(): WidgetAnimationPlayCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetAnimationPlayCallbackProxy;
	static CreatePlayAnimationTimeRangeProxyObject(Result?: UMGSequencePlayer,Widget?: UserWidget,InAnimation?: WidgetAnimation,StartAtTime?: number,EndAtTime?: number,NumLoopsToPlay?: number,PlayMode?: EUMGSequencePlayMode,PlaybackSpeed?: number): {Result: UMGSequencePlayer, $: WidgetAnimationPlayCallbackProxy};
	static CreatePlayAnimationProxyObject(Result?: UMGSequencePlayer,Widget?: UserWidget,InAnimation?: WidgetAnimation,StartAtTime?: number,NumLoopsToPlay?: number,PlayMode?: EUMGSequencePlayMode,PlaybackSpeed?: number): {Result: UMGSequencePlayer, $: WidgetAnimationPlayCallbackProxy};
	static C(Other: UObject | any): WidgetAnimationPlayCallbackProxy;
}

declare class WidgetBinding extends PropertyBinding { 
	static Load(ResourceName: string): WidgetBinding;
	static Find(Outer: UObject, ResourceName: string): WidgetBinding;
	static GetDefaultObject(): WidgetBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBinding;
	GetValue(): Widget;
	static C(Other: UObject | any): WidgetBinding;
}

declare class EventGraphFastCallPair { 
	FunctionToPatch: UFunction;
	EventGraphCallOffset: number;
	clone() : EventGraphFastCallPair;
	static C(Other: UObject | any): EventGraphFastCallPair;
}

declare class BlueprintGeneratedClass extends Class { 
	NumReplicatedProperties: number;
	bHasNativizedParent: boolean;
	bHasCookedComponentInstancingData: boolean;
	bIsSparseClassDataSerializable: boolean;
	DynamicBindingObjects: DynamicBlueprintBinding[];
	ComponentTemplates: ActorComponent[];
	Timelines: TimelineTemplate[];
	ComponentClassOverrides: BPComponentClassOverride[];
	SimpleConstructionScript: SimpleConstructionScript;
	InheritableComponentHandler: InheritableComponentHandler;
	UberGraphFramePointerProperty: StructProperty;
	UberGraphFunction: UFunction;
	FastCallPairs: EventGraphFastCallPair[];
	OverridenArchetypeForCDO: UObject;
	PropertyGuids: any;
	CalledFunctions: UFunction[];
	CookedComponentInstancingData: any;
	static Load(ResourceName: string): BlueprintGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): BlueprintGeneratedClass;
	static GetDefaultObject(): BlueprintGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintGeneratedClass;
	static C(Other: UObject | any): BlueprintGeneratedClass;
}

declare type EBindingKind = 'Function' | 'Property' | 'EBindingKind_MAX';
declare var EBindingKind : { Function:'Function',Property:'Property',EBindingKind_MAX:'EBindingKind_MAX', };
declare class DelegateRuntimeBinding { 
	ObjectName: string;
	PropertyName: string;
	FunctionName: string;
	SourcePath: DynamicPropertyPath;
	Kind: EBindingKind;
	clone() : DelegateRuntimeBinding;
	static C(Other: UObject | any): DelegateRuntimeBinding;
}

declare class WidgetBlueprintGeneratedClass extends BlueprintGeneratedClass { 
	WidgetTree: WidgetTree;
	bCanCallPreConstruct: boolean;
	bClassRequiresNativeTick: boolean;
	Bindings: DelegateRuntimeBinding[];
	Animations: WidgetAnimation[];
	NamedSlots: string[];
	static Load(ResourceName: string): WidgetBlueprintGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintGeneratedClass;
	static GetDefaultObject(): WidgetBlueprintGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintGeneratedClass;
	static C(Other: UObject | any): WidgetBlueprintGeneratedClass;
}

declare class NavigationEvent extends InputEvent { 
	clone() : NavigationEvent;
	static C(Other: UObject | any): NavigationEvent;
	GetInputEventFromNavigationEvent(): InputEvent;
	static GetInputEventFromNavigationEvent(Event: NavigationEvent): InputEvent;
}

declare class WidgetBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): WidgetBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintLibrary;
	static GetDefaultObject(): WidgetBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintLibrary;
	static UnlockMouse(Reply?: EventReply): {Reply: EventReply, $: EventReply};
	static Unhandled(): EventReply;
	static SetWindowTitleBarState(TitleBarContent: Widget,Mode: EWindowTitleBarMode,bTitleBarDragEnabled: boolean,bWindowButtonsVisible: boolean,bTitleBarVisible: boolean): void;
	static SetWindowTitleBarCloseButtonActive(bActive: boolean): void;
	static SetUserFocus(Reply?: EventReply,FocusWidget?: Widget,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
	static SetMousePosition(Reply?: EventReply,NewMousePosition?: Vector2D): {Reply: EventReply, $: EventReply};
	static SetInputMode_UIOnlyEx(PlayerController: PlayerController,InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode): void;
	static SetInputMode_UIOnly(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean): void;
	static SetInputMode_GameOnly(PlayerController: PlayerController): void;
	static SetInputMode_GameAndUIEx(PlayerController: PlayerController,InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode,bHideCursorDuringCapture: boolean): void;
	static SetInputMode_GameAndUI(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean,bHideCursorDuringCapture: boolean): void;
	static SetHardwareCursor(WorldContextObject: UObject,CursorShape: EMouseCursor,CursorName: string,HotSpot: Vector2D): boolean;
	static SetFocusToGameViewport(): void;
	static SetColorVisionDeficiencyType(Type: EColorVisionDeficiency,Severity: number,CorrectDeficiency: boolean,ShowCorrectionWithDeficiency: boolean): void;
	static SetBrushResourceToTexture(Brush?: SlateBrush,Texture?: Texture2D): {Brush: SlateBrush};
	static SetBrushResourceToMaterial(Brush?: SlateBrush,Material?: MaterialInterface): {Brush: SlateBrush};
	static RestorePreviousWindowTitleBarState(): void;
	static ReleaseMouseCapture(Reply?: EventReply): {Reply: EventReply, $: EventReply};
	static ReleaseJoystickCapture(Reply?: EventReply,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
	static NoResourceBrush(): SlateBrush;
	static MakeBrushFromTexture(Texture: Texture2D,Width: number,Height: number): SlateBrush;
	static MakeBrushFromMaterial(Material: MaterialInterface,Width: number,Height: number): SlateBrush;
	static MakeBrushFromAsset(BrushAsset: SlateBrushAsset): SlateBrush;
	static LockMouse(Reply?: EventReply,CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
	static IsDragDropping(): boolean;
	static Handled(): EventReply;
	static GetSafeZonePadding(WorldContextObject: UObject,SafePadding?: Vector4,SafePaddingScale?: Vector2D,SpillOverPadding?: Vector4): {SafePadding: Vector4, SafePaddingScale: Vector2D, SpillOverPadding: Vector4};
	static GetKeyEventFromAnalogInputEvent(Event: AnalogInputEvent): KeyEvent;
	static GetInputEventFromPointerEvent(Event: UPointerEvent): InputEvent;
	static GetInputEventFromNavigationEvent(Event: NavigationEvent): InputEvent;
	static GetInputEventFromKeyEvent(Event: KeyEvent): InputEvent;
	static GetInputEventFromCharacterEvent(Event: CharacterEvent): InputEvent;
	static GetDynamicMaterial(Brush?: SlateBrush): {Brush: SlateBrush, $: MaterialInstanceDynamic};
	static GetDragDroppingContent(): DragDropOperation;
	static GetBrushResourceAsTexture2D(Brush: SlateBrush): Texture2D;
	static GetBrushResourceAsMaterial(Brush: SlateBrush): MaterialInterface;
	static GetBrushResource(Brush: SlateBrush): UObject;
	static GetAllWidgetsWithInterface(WorldContextObject: UObject,FoundWidgets?: UserWidget[],Interface?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
	static GetAllWidgetsOfClass(WorldContextObject: UObject,FoundWidgets?: UserWidget[],WidgetClass?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
	static EndDragDrop(Reply?: EventReply): {Reply: EventReply, $: EventReply};
	static DrawTextFormatted(Context?: PaintContext,text?: string,Position?: Vector2D,Font?: Font,FontSize?: number,FontTypeFace?: string,Tint?: LinearColor): {Context: PaintContext};
	static DrawText(Context?: PaintContext,inString?: string,Position?: Vector2D,Tint?: LinearColor): {Context: PaintContext};
	static DrawLines(Context?: PaintContext,Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
	static DrawLine(Context?: PaintContext,PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
	static DrawBox(Context?: PaintContext,Position?: Vector2D,Size?: Vector2D,Brush?: SlateBrushAsset,Tint?: LinearColor): {Context: PaintContext};
	static DismissAllMenus(): void;
	static DetectDragIfPressed(UPointerEvent: UPointerEvent,WidgetDetectingDrag: Widget,DragKey: Key): EventReply;
	static DetectDrag(Reply?: EventReply,WidgetDetectingDrag?: Widget,DragKey?: Key): {Reply: EventReply, $: EventReply};
	static CreateDragDropOperation(OperationClass: UnrealEngineClass): DragDropOperation;
	static Create(WorldContextObject: UObject,WidgetType: UnrealEngineClass,OwningPlayer: PlayerController): UserWidget;
	static ClearUserFocus(Reply?: EventReply,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
	static CaptureMouse(Reply?: EventReply,CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
	static CaptureJoystick(Reply?: EventReply,CapturingWidget?: Widget,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
	static CancelDragDrop(): void;
	static C(Other: UObject | any): WidgetBlueprintLibrary;
}

declare type EWidgetInteractionSource = 'World' | 'Mouse' | 'CenterScreen' | 'Custom' | 'EWidgetInteractionSource_MAX';
declare var EWidgetInteractionSource : { World:'World',Mouse:'Mouse',CenterScreen:'CenterScreen',Custom:'Custom',EWidgetInteractionSource_MAX:'EWidgetInteractionSource_MAX', };
declare class WidgetInteractionComponent extends SceneComponent { 
	OnHoveredWidgetChanged: UnrealEngineMulticastDelegate<(WidgetComponent: WidgetComponent, PreviousWidgetComponent: WidgetComponent) => void>;
	VirtualUserIndex: number;
	PointerIndex: number;
	TraceChannel: ECollisionChannel;
	InteractionDistance: number;
	InteractionSource: EWidgetInteractionSource;
	bEnableHitTesting: boolean;
	bShowDebug: boolean;
	DebugSphereLineThickness: number;
	DebugLineThickness: number;
	DebugColor: LinearColor;
	CustomHitResult: HitResult;
	LocalHitLocation: Vector2D;
	LastLocalHitLocation: Vector2D;
	HoveredWidgetComponent: WidgetComponent;
	LastHitResult: HitResult;
	bIsHoveredWidgetInteractable: boolean;
	bIsHoveredWidgetFocusable: boolean;
	bIsHoveredWidgetHitTestVisible: boolean;
	ArrowComponent: ArrowComponent;
	static Load(ResourceName: string): WidgetInteractionComponent;
	static Find(Outer: UObject, ResourceName: string): WidgetInteractionComponent;
	static GetDefaultObject(): WidgetInteractionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetInteractionComponent;
	SetFocus(FocusWidget: Widget): void;
	SetCustomHitResult(HitResult: HitResult): void;
	SendKeyChar(Characters: string,bRepeat: boolean): boolean;
	ScrollWheel(ScrollDelta: number): void;
	ReleasePointerKey(Key: Key): void;
	ReleaseKey(Key: Key): boolean;
	PressPointerKey(Key: Key): void;
	PressKey(Key: Key,bRepeat: boolean): boolean;
	PressAndReleaseKey(Key: Key): boolean;
	IsOverInteractableWidget(): boolean;
	IsOverHitTestVisibleWidget(): boolean;
	IsOverFocusableWidget(): boolean;
	GetLastHitResult(): HitResult;
	GetHoveredWidgetComponent(): WidgetComponent;
	Get2DHitLocation(): Vector2D;
	static C(Other: UObject | any): WidgetInteractionComponent;
}

declare class WidgetLayoutLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): WidgetLayoutLibrary;
	static Find(Outer: UObject, ResourceName: string): WidgetLayoutLibrary;
	static GetDefaultObject(): WidgetLayoutLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetLayoutLibrary;
	static SlotAsWrapBoxSlot(Widget: Widget): WrapBoxSlot;
	static SlotAsWidgetSwitcherSlot(Widget: Widget): WidgetSwitcherSlot;
	static SlotAsVerticalBoxSlot(Widget: Widget): VerticalBoxSlot;
	static SlotAsUniformGridSlot(Widget: Widget): UniformGridSlot;
	static SlotAsSizeBoxSlot(Widget: Widget): SizeBoxSlot;
	static SlotAsScrollBoxSlot(Widget: Widget): ScrollBoxSlot;
	static SlotAsScaleBoxSlot(Widget: Widget): ScaleBoxSlot;
	static SlotAsSafeBoxSlot(Widget: Widget): SafeZoneSlot;
	static SlotAsOverlaySlot(Widget: Widget): OverlaySlot;
	static SlotAsHorizontalBoxSlot(Widget: Widget): HorizontalBoxSlot;
	static SlotAsGridSlot(Widget: Widget): GridSlot;
	static SlotAsCanvasSlot(Widget: Widget): CanvasPanelSlot;
	static SlotAsBorderSlot(Widget: Widget): BorderSlot;
	static RemoveAllWidgets(WorldContextObject: UObject): void;
	static ProjectWorldLocationToWidgetPosition(PlayerController: PlayerController,WorldLocation: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
	static GetViewportWidgetGeometry(WorldContextObject: UObject): Geometry;
	static GetViewportSize(WorldContextObject: UObject): Vector2D;
	static GetViewportScale(WorldContextObject: UObject): number;
	static GetPlayerScreenWidgetGeometry(PlayerController: PlayerController): Geometry;
	static GetMousePositionScaledByDPI(Player: PlayerController,LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
	static GetMousePositionOnViewport(WorldContextObject: UObject): Vector2D;
	static GetMousePositionOnPlatform(): Vector2D;
	static C(Other: UObject | any): WidgetLayoutLibrary;
}

declare class WidgetSwitcher extends PanelWidget { 
	ActiveWidgetIndex: number;
	static Load(ResourceName: string): WidgetSwitcher;
	static Find(Outer: UObject, ResourceName: string): WidgetSwitcher;
	static GetDefaultObject(): WidgetSwitcher;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetSwitcher;
	SetActiveWidgetIndex(index: number): void;
	SetActiveWidget(Widget: Widget): void;
	GetWidgetAtIndex(index: number): Widget;
	GetNumWidgets(): number;
	GetActiveWidgetIndex(): number;
	GetActiveWidget(): Widget;
	static C(Other: UObject | any): WidgetSwitcher;
}

declare class WindowTitleBarArea extends ContentWidget { 
	bWindowButtonsEnabled: boolean;
	bDoubleClickTogglesFullscreen: boolean;
	static Load(ResourceName: string): WindowTitleBarArea;
	static Find(Outer: UObject, ResourceName: string): WindowTitleBarArea;
	static GetDefaultObject(): WindowTitleBarArea;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindowTitleBarArea;
	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
	SetPadding(InPadding: Margin): void;
	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
	static C(Other: UObject | any): WindowTitleBarArea;
}

declare class WindowTitleBarAreaSlot extends PanelSlot { 
	Padding: Margin;
	HorizontalAlignment: EHorizontalAlignment;
	VerticalAlignment: EVerticalAlignment;
	static Load(ResourceName: string): WindowTitleBarAreaSlot;
	static Find(Outer: UObject, ResourceName: string): WindowTitleBarAreaSlot;
	static GetDefaultObject(): WindowTitleBarAreaSlot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindowTitleBarAreaSlot;
	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
	SetPadding(InPadding: Margin): void;
	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
	static C(Other: UObject | any): WindowTitleBarAreaSlot;
}

declare class WrapBox extends PanelWidget { 
	InnerSlotPadding: Vector2D;
	WrapWidth: number;
	WrapSize: number;
	bExplicitWrapWidth: boolean;
	bExplicitWrapSize: boolean;
	Orientation: EOrientation;
	static Load(ResourceName: string): WrapBox;
	static Find(Outer: UObject, ResourceName: string): WrapBox;
	static GetDefaultObject(): WrapBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrapBox;
	SetInnerSlotPadding(InPadding: Vector2D): void;
	AddChildToWrapBox(Content: Widget): WrapBoxSlot;
	static C(Other: UObject | any): WrapBox;
}

declare class AnimationDataSourceRegistry extends UObject { 
	DataSources: any;
	static Load(ResourceName: string): AnimationDataSourceRegistry;
	static Find(Outer: UObject, ResourceName: string): AnimationDataSourceRegistry;
	static GetDefaultObject(): AnimationDataSourceRegistry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationDataSourceRegistry;
	static C(Other: UObject | any): AnimationDataSourceRegistry;
}

declare class AnimNotify_PlayMontageNotify extends AnimNotify { 
	NotifyName: string;
	static Load(ResourceName: string): AnimNotify_PlayMontageNotify;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlayMontageNotify;
	static GetDefaultObject(): AnimNotify_PlayMontageNotify;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlayMontageNotify;
	static C(Other: UObject | any): AnimNotify_PlayMontageNotify;
}

declare class AnimNotify_PlayMontageNotifyWindow extends AnimNotifyState { 
	NotifyName: string;
	static Load(ResourceName: string): AnimNotify_PlayMontageNotifyWindow;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlayMontageNotifyWindow;
	static GetDefaultObject(): AnimNotify_PlayMontageNotifyWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlayMontageNotifyWindow;
	static C(Other: UObject | any): AnimNotify_PlayMontageNotifyWindow;
}

declare class AnimSequencerInstance extends AnimInstance { 
	static Load(ResourceName: string): AnimSequencerInstance;
	static Find(Outer: UObject, ResourceName: string): AnimSequencerInstance;
	static GetDefaultObject(): AnimSequencerInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequencerInstance;
	static C(Other: UObject | any): AnimSequencerInstance;
}

declare class PositionHistory { 
	Positions: Vector[];
	Range: number;
	clone() : PositionHistory;
	static C(Other: UObject | any): PositionHistory;
}

declare class KismetAnimationLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetAnimationLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetAnimationLibrary;
	static GetDefaultObject(): KismetAnimationLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetAnimationLibrary;
	static K2_TwoBoneIK(RootPos: Vector,JointPos: Vector,EndPos: Vector,JointTarget: Vector,Effector: Vector,OutJointPos?: Vector,OutEndPos?: Vector,bAllowStretching?: boolean,StartStretchRatio?: number,MaxStretchScale?: number): {OutJointPos: Vector, OutEndPos: Vector};
	static K2_StartProfilingTimer(): void;
	static K2_MakePerlinNoiseVectorAndRemap(X: number,Y: number,Z: number,RangeOutMinX: number,RangeOutMaxX: number,RangeOutMinY: number,RangeOutMaxY: number,RangeOutMinZ: number,RangeOutMaxZ: number): Vector;
	static K2_MakePerlinNoiseAndRemap(Value: number,RangeOutMin: number,RangeOutMax: number): number;
	static K2_LookAt(CurrentTransform: Transform,TargetPosition: Vector,LookAtVector: Vector,bUseUpVector: boolean,UpVector: Vector,ClampConeInDegree: number): Transform;
	static K2_EndProfilingTimer(bLog: boolean,LogPrefix: string): number;
	static K2_DistanceBetweenTwoSocketsAndMapRange(Component: SkeletalMeshComponent,SocketOrBoneNameA: string,SocketSpaceA: ERelativeTransformSpace,SocketOrBoneNameB: string,SocketSpaceB: ERelativeTransformSpace,bRemapRange: boolean,InRangeMin: number,InRangeMax: number,OutRangeMin: number,OutRangeMax: number): number;
	static K2_DirectionBetweenSockets(Component: SkeletalMeshComponent,SocketOrBoneNameFrom: string,SocketOrBoneNameTo: string): Vector;
	static K2_CalculateVelocityFromSockets(DeltaSeconds: number,Component: SkeletalMeshComponent,SocketOrBoneName: string,ReferenceSocketOrBone: string,SocketSpace: ERelativeTransformSpace,OffsetInBoneSpace: Vector,History?: PositionHistory,NumberOfSamples?: number,VelocityMin?: number,VelocityMax?: number,EasingType?: EEasingFuncType,CustomCurve?: RuntimeFloatCurve): {History: PositionHistory, $: number};
	static K2_CalculateVelocityFromPositionHistory(DeltaSeconds: number,Position: Vector,History?: PositionHistory,NumberOfSamples?: number,VelocityMin?: number,VelocityMax?: number): {History: PositionHistory, $: number};
	static C(Other: UObject | any): KismetAnimationLibrary;
}

declare class BranchingPointNotifyPayload { 
	clone() : BranchingPointNotifyPayload;
	static C(Other: UObject | any): BranchingPointNotifyPayload;
}

declare class PlayMontageCallbackProxy extends UObject { 
	OnCompleted: UnrealEngineMulticastDelegate<(NotifyName: string) => void>;
	OnBlendOut: UnrealEngineMulticastDelegate<(NotifyName: string) => void>;
	OnInterrupted: UnrealEngineMulticastDelegate<(NotifyName: string) => void>;
	OnNotifyBegin: UnrealEngineMulticastDelegate<(NotifyName: string) => void>;
	OnNotifyEnd: UnrealEngineMulticastDelegate<(NotifyName: string) => void>;
	static Load(ResourceName: string): PlayMontageCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): PlayMontageCallbackProxy;
	static GetDefaultObject(): PlayMontageCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayMontageCallbackProxy;
	OnNotifyEndReceived(NotifyName: string,BranchingPointNotifyPayload: BranchingPointNotifyPayload): void;
	OnNotifyBeginReceived(NotifyName: string,BranchingPointNotifyPayload: BranchingPointNotifyPayload): void;
	OnMontageEnded(Montage: AnimMontage,bInterrupted: boolean): void;
	OnMontageBlendingOut(Montage: AnimMontage,bInterrupted: boolean): void;
	static CreateProxyObjectForPlayMontage(InSkeletalMeshComponent: SkeletalMeshComponent,MontageToPlay: AnimMontage,PlayRate: number,StartingPosition: number,StartingSection: string): PlayMontageCallbackProxy;
	static C(Other: UObject | any): PlayMontageCallbackProxy;
}

declare class SequencerAnimationSupport extends Interface { 
	static Load(ResourceName: string): SequencerAnimationSupport;
	static Find(Outer: UObject, ResourceName: string): SequencerAnimationSupport;
	static GetDefaultObject(): SequencerAnimationSupport;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerAnimationSupport;
	static C(Other: UObject | any): SequencerAnimationSupport;
}

declare class FloatChannelEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): FloatChannelEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): FloatChannelEvaluatorSystem;
	static GetDefaultObject(): FloatChannelEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatChannelEvaluatorSystem;
	static C(Other: UObject | any): FloatChannelEvaluatorSystem;
}

declare class MovieSceneTransformOrigin extends Interface { 
	static Load(ResourceName: string): MovieSceneTransformOrigin;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTransformOrigin;
	static GetDefaultObject(): MovieSceneTransformOrigin;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTransformOrigin;
	BP_GetTransformOrigin(): Transform;
	static C(Other: UObject | any): MovieSceneTransformOrigin;
}

declare class MovieScene3DConstraintSection extends MovieSceneSection { 
	ConstraintId: Guid;
	ConstraintBindingID: MovieSceneObjectBindingID;
	static Load(ResourceName: string): MovieScene3DConstraintSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DConstraintSection;
	static GetDefaultObject(): MovieScene3DConstraintSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DConstraintSection;
	SetConstraintBindingID(InConstraintBindingID: MovieSceneObjectBindingID): void;
	GetConstraintBindingID(): MovieSceneObjectBindingID;
	static C(Other: UObject | any): MovieScene3DConstraintSection;
}

declare class MovieScene3DAttachSection extends MovieScene3DConstraintSection { 
	AttachSocketName: string;
	AttachComponentName: string;
	bFullRevertOnDetach: boolean;
	ReAttachOnDetach: Actor;
	AttachmentLocationRule: EAttachmentRule;
	AttachmentRotationRule: EAttachmentRule;
	AttachmentScaleRule: EAttachmentRule;
	DetachmentLocationRule: EDetachmentRule;
	DetachmentRotationRule: EDetachmentRule;
	DetachmentScaleRule: EDetachmentRule;
	static Load(ResourceName: string): MovieScene3DAttachSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DAttachSection;
	static GetDefaultObject(): MovieScene3DAttachSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DAttachSection;
	static C(Other: UObject | any): MovieScene3DAttachSection;
}

declare class MovieScene3DConstraintTrack extends MovieSceneTrack { 
	ConstraintSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieScene3DConstraintTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DConstraintTrack;
	static GetDefaultObject(): MovieScene3DConstraintTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DConstraintTrack;
	static C(Other: UObject | any): MovieScene3DConstraintTrack;
}

declare class MovieScene3DAttachTrack extends MovieScene3DConstraintTrack { 
	static Load(ResourceName: string): MovieScene3DAttachTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DAttachTrack;
	static GetDefaultObject(): MovieScene3DAttachTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DAttachTrack;
	static C(Other: UObject | any): MovieScene3DAttachTrack;
}

declare type MovieScene3DPathSection_Axis = 'X' | 'Y' | 'Z' | 'NEG_X' | 'NEG_Y' | 'NEG_Z' | 'MovieScene3DPathSection_MAX';
declare var MovieScene3DPathSection_Axis : { X:'X',Y:'Y',Z:'Z',NEG_X:'NEG_X',NEG_Y:'NEG_Y',NEG_Z:'NEG_Z',MovieScene3DPathSection_MAX:'MovieScene3DPathSection_MAX', };
declare class MovieScene3DPathSection extends MovieScene3DConstraintSection { 
	TimingCurve: MovieSceneFloatChannel;
	FrontAxisEnum: MovieScene3DPathSection_Axis;
	UpAxisEnum: MovieScene3DPathSection_Axis;
	bFollow: boolean;
	bReverse: boolean;
	bForceUpright: boolean;
	static Load(ResourceName: string): MovieScene3DPathSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DPathSection;
	static GetDefaultObject(): MovieScene3DPathSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DPathSection;
	static C(Other: UObject | any): MovieScene3DPathSection;
}

declare class MovieScene3DPathTrack extends MovieScene3DConstraintTrack { 
	static Load(ResourceName: string): MovieScene3DPathTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DPathTrack;
	static GetDefaultObject(): MovieScene3DPathTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DPathTrack;
	static C(Other: UObject | any): MovieScene3DPathTrack;
}

declare class MovieScene3DTransformPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieScene3DTransformPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformPropertySystem;
	static GetDefaultObject(): MovieScene3DTransformPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformPropertySystem;
	static C(Other: UObject | any): MovieScene3DTransformPropertySystem;
}

declare class MovieScene3DTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieScene3DTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformTrack;
	static GetDefaultObject(): MovieScene3DTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformTrack;
	static C(Other: UObject | any): MovieScene3DTransformTrack;
}

declare class MovieSceneActorReferenceKey { 
	UObject: MovieSceneObjectBindingID;
	ComponentName: string;
	SocketName: string;
	clone() : MovieSceneActorReferenceKey;
	static C(Other: UObject | any): MovieSceneActorReferenceKey;
}

declare class MovieSceneActorReferenceData extends MovieSceneChannel { 
	KeyTimes: FrameNumber[];
	KeyValues: MovieSceneActorReferenceKey[];
	clone() : MovieSceneActorReferenceData;
	static C(Other: UObject | any): MovieSceneActorReferenceData;
}

declare class MovieSceneActorReferenceSection extends MovieSceneSection { 
	ActorReferenceData: MovieSceneActorReferenceData;
	ActorGuidIndexCurve: IntegralCurve;
	ActorGuidStrings: string[];
	static Load(ResourceName: string): MovieSceneActorReferenceSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneActorReferenceSection;
	static GetDefaultObject(): MovieSceneActorReferenceSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneActorReferenceSection;
	static C(Other: UObject | any): MovieSceneActorReferenceSection;
}

declare class MovieSceneActorReferenceTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneActorReferenceTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneActorReferenceTrack;
	static GetDefaultObject(): MovieSceneActorReferenceTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneActorReferenceTrack;
	static C(Other: UObject | any): MovieSceneActorReferenceTrack;
}

declare class MovieSceneAudioSection extends MovieSceneSection { 
	Sound: SoundBase;
	StartFrameOffset: FrameNumber;
	StartOffset: number;
	AudioStartTime: number;
	AudioDilationFactor: number;
	AudioVolume: number;
	SoundVolume: MovieSceneFloatChannel;
	PitchMultiplier: MovieSceneFloatChannel;
	AttachActorData: MovieSceneActorReferenceData;
	bLooping: boolean;
	bSuppressSubtitles: boolean;
	bOverrideAttenuation: boolean;
	AttenuationSettings: SoundAttenuation;
	OnQueueSubtitles: UnrealEngineDelegate<(Subtitles: SubtitleCue[], CueDuration: number) => void>;
	OnAudioFinished: UnrealEngineMulticastDelegate<() => void>;
	OnAudioPlaybackPercent: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: number) => void>;
	static Load(ResourceName: string): MovieSceneAudioSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioSection;
	static GetDefaultObject(): MovieSceneAudioSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioSection;
	SetStartOffset(InStartOffset: FrameNumber): void;
	SetSound(InSound: SoundBase): void;
	GetStartOffset(): FrameNumber;
	GetSound(): SoundBase;
	static C(Other: UObject | any): MovieSceneAudioSection;
}

declare class MovieSceneAudioTrack extends MovieSceneNameableTrack { 
	AudioSections: MovieSceneSection[];
	RowHeight: number;
	static Load(ResourceName: string): MovieSceneAudioTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioTrack;
	static GetDefaultObject(): MovieSceneAudioTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioTrack;
	static C(Other: UObject | any): MovieSceneAudioTrack;
}

declare class MovieSceneBaseValueEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneBaseValueEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBaseValueEvaluatorSystem;
	static GetDefaultObject(): MovieSceneBaseValueEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBaseValueEvaluatorSystem;
	static C(Other: UObject | any): MovieSceneBaseValueEvaluatorSystem;
}

declare class MovieSceneBoolTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneBoolTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBoolTrack;
	static GetDefaultObject(): MovieSceneBoolTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBoolTrack;
	static C(Other: UObject | any): MovieSceneBoolTrack;
}

declare class MovieSceneByteChannel extends MovieSceneChannel { 
	Times: FrameNumber[];
	DefaultValue: number;
	bHasDefaultValue: boolean;
	Values: number[];
	Enum: Enum;
	clone() : MovieSceneByteChannel;
	static C(Other: UObject | any): MovieSceneByteChannel;
}

declare class MovieSceneByteSection extends MovieSceneSection { 
	ByteCurve: MovieSceneByteChannel;
	static Load(ResourceName: string): MovieSceneByteSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneByteSection;
	static GetDefaultObject(): MovieSceneByteSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneByteSection;
	static C(Other: UObject | any): MovieSceneByteSection;
}

declare class MovieSceneByteTrack extends MovieScenePropertyTrack { 
	Enum: Enum;
	static Load(ResourceName: string): MovieSceneByteTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneByteTrack;
	static GetDefaultObject(): MovieSceneByteTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneByteTrack;
	static C(Other: UObject | any): MovieSceneByteTrack;
}

declare class MovieSceneCameraAnimSectionData { 
	CameraAnim: CameraAnim;
	PlayRate: number;
	PlayScale: number;
	BlendInTime: number;
	BlendOutTime: number;
	bLooping: boolean;
	clone() : MovieSceneCameraAnimSectionData;
	static C(Other: UObject | any): MovieSceneCameraAnimSectionData;
}

declare class MovieSceneCameraAnimSection extends MovieSceneSection { 
	AnimData: MovieSceneCameraAnimSectionData;
	CameraAnim: CameraAnim;
	PlayRate: number;
	PlayScale: number;
	BlendInTime: number;
	BlendOutTime: number;
	bLooping: boolean;
	static Load(ResourceName: string): MovieSceneCameraAnimSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraAnimSection;
	static GetDefaultObject(): MovieSceneCameraAnimSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraAnimSection;
	static C(Other: UObject | any): MovieSceneCameraAnimSection;
}

declare class MovieSceneCameraAnimTrack extends MovieSceneNameableTrack { 
	CameraAnimSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraAnimTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraAnimTrack;
	static GetDefaultObject(): MovieSceneCameraAnimTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraAnimTrack;
	static C(Other: UObject | any): MovieSceneCameraAnimTrack;
}

declare class MovieSceneCameraCutSection extends MovieSceneSection { 
	bLockPreviousCamera: boolean;
	CameraGuid: Guid;
	CameraBindingID: MovieSceneObjectBindingID;
	InitialCameraCutTransform: Transform;
	bHasInitialCameraCutTransform: boolean;
	ThumbnailReferenceOffset: number;
	static Load(ResourceName: string): MovieSceneCameraCutSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutSection;
	static GetDefaultObject(): MovieSceneCameraCutSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutSection;
	SetCameraBindingID(InCameraBindingID: MovieSceneObjectBindingID): void;
	GetCameraBindingID(): MovieSceneObjectBindingID;
	static C(Other: UObject | any): MovieSceneCameraCutSection;
}

declare class MovieSceneCameraCutTrack extends MovieSceneNameableTrack { 
	bCanBlend: boolean;
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraCutTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutTrack;
	static GetDefaultObject(): MovieSceneCameraCutTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutTrack;
	static C(Other: UObject | any): MovieSceneCameraCutTrack;
}

declare class MovieSceneTrackInstanceInput { 
	Section: MovieSceneSection;
	clone() : MovieSceneTrackInstanceInput;
	static C(Other: UObject | any): MovieSceneTrackInstanceInput;
}

declare class MovieSceneTrackInstance extends UObject { 
	AnimatedObject: UObject;
	bIsMasterTrackInstance: boolean;
	Linker: MovieSceneEntitySystemLinker;
	Inputs: MovieSceneTrackInstanceInput[];
	static Load(ResourceName: string): MovieSceneTrackInstance;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTrackInstance;
	static GetDefaultObject(): MovieSceneTrackInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTrackInstance;
	static C(Other: UObject | any): MovieSceneTrackInstance;
}

declare class MovieSceneCameraCutTrackInstance extends MovieSceneTrackInstance { 
	static Load(ResourceName: string): MovieSceneCameraCutTrackInstance;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutTrackInstance;
	static GetDefaultObject(): MovieSceneCameraCutTrackInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutTrackInstance;
	static C(Other: UObject | any): MovieSceneCameraCutTrackInstance;
}

declare class MovieSceneCameraShakeSectionData { 
	ShakeClass: UnrealEngineClass;
	PlayScale: number;
	PlaySpace: ECameraShakePlaySpace;
	UserDefinedPlaySpace: Rotator;
	clone() : MovieSceneCameraShakeSectionData;
	static C(Other: UObject | any): MovieSceneCameraShakeSectionData;
}

declare class MovieSceneCameraShakeSection extends MovieSceneSection { 
	ShakeData: MovieSceneCameraShakeSectionData;
	ShakeClass: UnrealEngineClass;
	PlayScale: number;
	PlaySpace: ECameraShakePlaySpace;
	UserDefinedPlaySpace: Rotator;
	static Load(ResourceName: string): MovieSceneCameraShakeSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSection;
	static GetDefaultObject(): MovieSceneCameraShakeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSection;
	static C(Other: UObject | any): MovieSceneCameraShakeSection;
}

declare class MovieSceneCameraShakeSourceShakeSection extends MovieSceneSection { 
	ShakeData: MovieSceneCameraShakeSectionData;
	static Load(ResourceName: string): MovieSceneCameraShakeSourceShakeSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceShakeSection;
	static GetDefaultObject(): MovieSceneCameraShakeSourceShakeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceShakeSection;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceShakeSection;
}

declare class MovieSceneCameraShakeSourceShakeTrack extends MovieSceneNameableTrack { 
	CameraShakeSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraShakeSourceShakeTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceShakeTrack;
	static GetDefaultObject(): MovieSceneCameraShakeSourceShakeTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceShakeTrack;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceShakeTrack;
}

declare class MovieSceneCameraShakeSourceTrigger { 
	ShakeClass: UnrealEngineClass;
	PlayScale: number;
	PlaySpace: ECameraShakePlaySpace;
	UserDefinedPlaySpace: Rotator;
	clone() : MovieSceneCameraShakeSourceTrigger;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTrigger;
}

declare class MovieSceneCameraShakeSourceTriggerChannel extends MovieSceneChannel { 
	KeyTimes: FrameNumber[];
	KeyValues: MovieSceneCameraShakeSourceTrigger[];
	clone() : MovieSceneCameraShakeSourceTriggerChannel;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTriggerChannel;
}

declare class MovieSceneCameraShakeSourceTriggerSection extends MovieSceneSection { 
	Channel: MovieSceneCameraShakeSourceTriggerChannel;
	static Load(ResourceName: string): MovieSceneCameraShakeSourceTriggerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceTriggerSection;
	static GetDefaultObject(): MovieSceneCameraShakeSourceTriggerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceTriggerSection;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTriggerSection;
}

declare class MovieSceneCameraShakeSourceTriggerTrack extends MovieSceneTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraShakeSourceTriggerTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceTriggerTrack;
	static GetDefaultObject(): MovieSceneCameraShakeSourceTriggerTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceTriggerTrack;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTriggerTrack;
}

declare class MovieSceneCameraShakeTrack extends MovieSceneNameableTrack { 
	CameraShakeSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraShakeTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeTrack;
	static GetDefaultObject(): MovieSceneCameraShakeTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeTrack;
	static C(Other: UObject | any): MovieSceneCameraShakeTrack;
}

declare class MovieSceneSectionParameters { 
	StartFrameOffset: FrameNumber;
	bCanLoop: boolean;
	EndFrameOffset: FrameNumber;
	FirstLoopStartFrameOffset: FrameNumber;
	TimeScale: number;
	HierarchicalBias: number;
	StartOffset: number;
	PrerollTime: number;
	PostrollTime: number;
	clone() : MovieSceneSectionParameters;
	static C(Other: UObject | any): MovieSceneSectionParameters;
}

declare class MovieSceneSubSection extends MovieSceneSection { 
	Parameters: MovieSceneSectionParameters;
	StartOffset: number;
	TimeScale: number;
	PrerollTime: number;
	SubSequence: MovieSceneSequence;
	ActorToRecord: any;
	TargetSequenceName: string;
	TargetPathToRecordTo: DirectoryPath;
	static Load(ResourceName: string): MovieSceneSubSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSubSection;
	static GetDefaultObject(): MovieSceneSubSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSubSection;
	SetSequence(Sequence: MovieSceneSequence): void;
	GetSequence(): MovieSceneSequence;
	static C(Other: UObject | any): MovieSceneSubSection;
}

declare class MovieSceneCinematicShotSection extends MovieSceneSubSection { 
	ShotDisplayName: string;
	DisplayName: string;
	ThumbnailReferenceOffset: number;
	static Load(ResourceName: string): MovieSceneCinematicShotSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCinematicShotSection;
	static GetDefaultObject(): MovieSceneCinematicShotSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCinematicShotSection;
	SetShotDisplayName(InShotDisplayName: string): void;
	GetShotDisplayName(): string;
	static C(Other: UObject | any): MovieSceneCinematicShotSection;
}

declare class MovieSceneSubTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneSubTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSubTrack;
	static GetDefaultObject(): MovieSceneSubTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSubTrack;
	static C(Other: UObject | any): MovieSceneSubTrack;
}

declare class MovieSceneCinematicShotTrack extends MovieSceneSubTrack { 
	static Load(ResourceName: string): MovieSceneCinematicShotTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCinematicShotTrack;
	static GetDefaultObject(): MovieSceneCinematicShotTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCinematicShotTrack;
	static C(Other: UObject | any): MovieSceneCinematicShotTrack;
}

declare class MovieSceneColorSection extends MovieSceneSection { 
	RedCurve: MovieSceneFloatChannel;
	GreenCurve: MovieSceneFloatChannel;
	BlueCurve: MovieSceneFloatChannel;
	AlphaCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneColorSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneColorSection;
	static GetDefaultObject(): MovieSceneColorSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneColorSection;
	static C(Other: UObject | any): MovieSceneColorSection;
}

declare class MovieSceneColorTrack extends MovieScenePropertyTrack { 
	bIsSlateColor: boolean;
	static Load(ResourceName: string): MovieSceneColorTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneColorTrack;
	static GetDefaultObject(): MovieSceneColorTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneColorTrack;
	static C(Other: UObject | any): MovieSceneColorTrack;
}

declare class MovieSceneComponentAttachmentInvalidatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneComponentAttachmentInvalidatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentAttachmentInvalidatorSystem;
	static GetDefaultObject(): MovieSceneComponentAttachmentInvalidatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentAttachmentInvalidatorSystem;
	static C(Other: UObject | any): MovieSceneComponentAttachmentInvalidatorSystem;
}

declare class MovieSceneComponentAttachmentSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneComponentAttachmentSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentAttachmentSystem;
	static GetDefaultObject(): MovieSceneComponentAttachmentSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentAttachmentSystem;
	static C(Other: UObject | any): MovieSceneComponentAttachmentSystem;
}

declare class MovieSceneComponentMobilitySystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneComponentMobilitySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentMobilitySystem;
	static GetDefaultObject(): MovieSceneComponentMobilitySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentMobilitySystem;
	static C(Other: UObject | any): MovieSceneComponentMobilitySystem;
}

declare class MovieScenePreAnimatedComponentTransformSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieScenePreAnimatedComponentTransformSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePreAnimatedComponentTransformSystem;
	static GetDefaultObject(): MovieScenePreAnimatedComponentTransformSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePreAnimatedComponentTransformSystem;
	static C(Other: UObject | any): MovieScenePreAnimatedComponentTransformSystem;
}

declare class MovieSceneComponentTransformSystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneComponentTransformSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentTransformSystem;
	static GetDefaultObject(): MovieSceneComponentTransformSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentTransformSystem;
	static C(Other: UObject | any): MovieSceneComponentTransformSystem;
}

declare class MovieSceneEnumSection extends MovieSceneSection { 
	EnumCurve: MovieSceneByteChannel;
	static Load(ResourceName: string): MovieSceneEnumSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEnumSection;
	static GetDefaultObject(): MovieSceneEnumSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEnumSection;
	static C(Other: UObject | any): MovieSceneEnumSection;
}

declare class MovieSceneEnumTrack extends MovieScenePropertyTrack { 
	Enum: Enum;
	static Load(ResourceName: string): MovieSceneEnumTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEnumTrack;
	static GetDefaultObject(): MovieSceneEnumTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEnumTrack;
	static C(Other: UObject | any): MovieSceneEnumTrack;
}

declare class MovieSceneEulerTransformPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneEulerTransformPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEulerTransformPropertySystem;
	static GetDefaultObject(): MovieSceneEulerTransformPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEulerTransformPropertySystem;
	static C(Other: UObject | any): MovieSceneEulerTransformPropertySystem;
}

declare class MovieSceneEulerTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneEulerTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEulerTransformTrack;
	static GetDefaultObject(): MovieSceneEulerTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEulerTransformTrack;
	static C(Other: UObject | any): MovieSceneEulerTransformTrack;
}

declare class MovieSceneEventPtrs { 
	UFunction: UFunction;
	BoundObjectProperty: any;
	clone() : MovieSceneEventPtrs;
	static C(Other: UObject | any): MovieSceneEventPtrs;
}

declare class MovieSceneEvent { 
	Ptrs: MovieSceneEventPtrs;
	PayloadVariables: any;
	CompiledFunctionName: string;
	BoundObjectPinName: string;
	WeakEndpoint: any;
	GraphGuid: Guid;
	NodeGuid: Guid;
	FunctionEntry: any;
	clone() : MovieSceneEvent;
	static C(Other: UObject | any): MovieSceneEvent;
}

declare class MovieSceneEventRepeaterSection extends MovieSceneEventSectionBase { 
	Event: MovieSceneEvent;
	static Load(ResourceName: string): MovieSceneEventRepeaterSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventRepeaterSection;
	static GetDefaultObject(): MovieSceneEventRepeaterSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventRepeaterSection;
	static C(Other: UObject | any): MovieSceneEventRepeaterSection;
}

declare class NameCurveKey { 
	Time: number;
	Value: string;
	clone() : NameCurveKey;
	static C(Other: UObject | any): NameCurveKey;
}

declare class NameCurve extends IndexedCurve { 
	Keys: NameCurveKey[];
	clone() : NameCurve;
	static C(Other: UObject | any): NameCurve;
}

declare class MovieSceneEventParameters { 
	clone() : MovieSceneEventParameters;
	static C(Other: UObject | any): MovieSceneEventParameters;
}

declare class EventPayload { 
	EventName: string;
	Parameters: MovieSceneEventParameters;
	clone() : EventPayload;
	static C(Other: UObject | any): EventPayload;
}

declare class MovieSceneEventSectionData extends MovieSceneChannel { 
	Times: FrameNumber[];
	KeyValues: EventPayload[];
	KeyTimes: number[];
	clone() : MovieSceneEventSectionData;
	static C(Other: UObject | any): MovieSceneEventSectionData;
}

declare class MovieSceneEventSection extends MovieSceneSection { 
	Events: NameCurve;
	EventData: MovieSceneEventSectionData;
	static Load(ResourceName: string): MovieSceneEventSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventSection;
	static GetDefaultObject(): MovieSceneEventSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventSection;
	static C(Other: UObject | any): MovieSceneEventSection;
}

declare class MovieSceneEventSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventSystem;
	static GetDefaultObject(): MovieSceneEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventSystem;
	static C(Other: UObject | any): MovieSceneEventSystem;
}

declare class MovieScenePreSpawnEventSystem extends MovieSceneEventSystem { 
	static Load(ResourceName: string): MovieScenePreSpawnEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePreSpawnEventSystem;
	static GetDefaultObject(): MovieScenePreSpawnEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePreSpawnEventSystem;
	static C(Other: UObject | any): MovieScenePreSpawnEventSystem;
}

declare class MovieScenePostSpawnEventSystem extends MovieSceneEventSystem { 
	static Load(ResourceName: string): MovieScenePostSpawnEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePostSpawnEventSystem;
	static GetDefaultObject(): MovieScenePostSpawnEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePostSpawnEventSystem;
	static C(Other: UObject | any): MovieScenePostSpawnEventSystem;
}

declare class MovieScenePostEvalEventSystem extends MovieSceneEventSystem { 
	static Load(ResourceName: string): MovieScenePostEvalEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePostEvalEventSystem;
	static GetDefaultObject(): MovieScenePostEvalEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePostEvalEventSystem;
	static C(Other: UObject | any): MovieScenePostEvalEventSystem;
}

declare type EFireEventsAtPosition = 'AtStartOfEvaluation' | 'AtEndOfEvaluation' | 'AfterSpawn' | 'EFireEventsAtPosition_MAX';
declare var EFireEventsAtPosition : { AtStartOfEvaluation:'AtStartOfEvaluation',AtEndOfEvaluation:'AtEndOfEvaluation',AfterSpawn:'AfterSpawn',EFireEventsAtPosition_MAX:'EFireEventsAtPosition_MAX', };
declare class MovieSceneEventTrack extends MovieSceneNameableTrack { 
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	EventPosition: EFireEventsAtPosition;
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneEventTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventTrack;
	static GetDefaultObject(): MovieSceneEventTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventTrack;
	static C(Other: UObject | any): MovieSceneEventTrack;
}

declare class MovieSceneEventChannel extends MovieSceneChannel { 
	KeyTimes: FrameNumber[];
	KeyValues: MovieSceneEvent[];
	clone() : MovieSceneEventChannel;
	static C(Other: UObject | any): MovieSceneEventChannel;
}

declare class MovieSceneEventTriggerSection extends MovieSceneEventSectionBase { 
	EventChannel: MovieSceneEventChannel;
	static Load(ResourceName: string): MovieSceneEventTriggerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventTriggerSection;
	static GetDefaultObject(): MovieSceneEventTriggerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventTriggerSection;
	static C(Other: UObject | any): MovieSceneEventTriggerSection;
}

declare class MovieSceneFadeSection extends MovieSceneSection { 
	FloatCurve: MovieSceneFloatChannel;
	FadeColor: LinearColor;
	bFadeAudio: boolean;
	static Load(ResourceName: string): MovieSceneFadeSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFadeSection;
	static GetDefaultObject(): MovieSceneFadeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFadeSection;
	static C(Other: UObject | any): MovieSceneFadeSection;
}

declare class MovieSceneFloatTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneFloatTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatTrack;
	static GetDefaultObject(): MovieSceneFloatTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatTrack;
	static C(Other: UObject | any): MovieSceneFloatTrack;
}

declare class MovieSceneFadeTrack extends MovieSceneFloatTrack { 
	static Load(ResourceName: string): MovieSceneFadeTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFadeTrack;
	static GetDefaultObject(): MovieSceneFadeTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFadeTrack;
	static C(Other: UObject | any): MovieSceneFadeTrack;
}

declare class MovieSceneFloatPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneFloatPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatPropertySystem;
	static GetDefaultObject(): MovieSceneFloatPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatPropertySystem;
	static C(Other: UObject | any): MovieSceneFloatPropertySystem;
}

declare class MovieSceneFloatSection extends MovieSceneSection { 
	FloatCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneFloatSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatSection;
	static GetDefaultObject(): MovieSceneFloatSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatSection;
	static C(Other: UObject | any): MovieSceneFloatSection;
}

declare class MovieSceneHierarchicalBiasSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneHierarchicalBiasSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneHierarchicalBiasSystem;
	static GetDefaultObject(): MovieSceneHierarchicalBiasSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneHierarchicalBiasSystem;
	static C(Other: UObject | any): MovieSceneHierarchicalBiasSystem;
}

declare class MovieSceneIntegerChannel extends MovieSceneChannel { 
	Times: FrameNumber[];
	DefaultValue: number;
	bHasDefaultValue: boolean;
	Values: number[];
	clone() : MovieSceneIntegerChannel;
	static C(Other: UObject | any): MovieSceneIntegerChannel;
}

declare class MovieSceneIntegerSection extends MovieSceneSection { 
	IntegerCurve: MovieSceneIntegerChannel;
	static Load(ResourceName: string): MovieSceneIntegerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneIntegerSection;
	static GetDefaultObject(): MovieSceneIntegerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneIntegerSection;
	static C(Other: UObject | any): MovieSceneIntegerSection;
}

declare class MovieSceneIntegerTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneIntegerTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneIntegerTrack;
	static GetDefaultObject(): MovieSceneIntegerTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneIntegerTrack;
	static C(Other: UObject | any): MovieSceneIntegerTrack;
}

declare class MovieSceneInterrogatedPropertyInstantiatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static GetDefaultObject(): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static C(Other: UObject | any): MovieSceneInterrogatedPropertyInstantiatorSystem;
}

declare type ELevelVisibility = 'Visible' | 'Hidden' | 'ELevelVisibility_MAX';
declare var ELevelVisibility : { Visible:'Visible',Hidden:'Hidden',ELevelVisibility_MAX:'ELevelVisibility_MAX', };
declare class MovieSceneLevelVisibilitySection extends MovieSceneSection { 
	Visibility: ELevelVisibility;
	LevelNames: string[];
	static Load(ResourceName: string): MovieSceneLevelVisibilitySection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilitySection;
	static GetDefaultObject(): MovieSceneLevelVisibilitySection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilitySection;
	SetVisibility(InVisibility: ELevelVisibility): void;
	SetLevelNames(InLevelNames: string[]): void;
	GetVisibility(): ELevelVisibility;
	GetLevelNames(): string[];
	static C(Other: UObject | any): MovieSceneLevelVisibilitySection;
}

declare class MovieSceneLevelVisibilitySystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneLevelVisibilitySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilitySystem;
	static GetDefaultObject(): MovieSceneLevelVisibilitySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilitySystem;
	static C(Other: UObject | any): MovieSceneLevelVisibilitySystem;
}

declare class MovieSceneLevelVisibilityTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneLevelVisibilityTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilityTrack;
	static GetDefaultObject(): MovieSceneLevelVisibilityTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilityTrack;
	static C(Other: UObject | any): MovieSceneLevelVisibilityTrack;
}

declare class MovieSceneMaterialParameterCollectionTrack extends MovieSceneMaterialTrack { 
	MPC: MaterialParameterCollection;
	static Load(ResourceName: string): MovieSceneMaterialParameterCollectionTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMaterialParameterCollectionTrack;
	static GetDefaultObject(): MovieSceneMaterialParameterCollectionTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMaterialParameterCollectionTrack;
	static C(Other: UObject | any): MovieSceneMaterialParameterCollectionTrack;
}

declare class MovieSceneComponentMaterialTrack extends MovieSceneMaterialTrack { 
	MaterialIndex: number;
	static Load(ResourceName: string): MovieSceneComponentMaterialTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentMaterialTrack;
	static GetDefaultObject(): MovieSceneComponentMaterialTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentMaterialTrack;
	static C(Other: UObject | any): MovieSceneComponentMaterialTrack;
}

declare class MovieSceneObjectPathChannelKeyValue { 
	SoftPtr: UObject;
	HardPtr: UObject;
	clone() : MovieSceneObjectPathChannelKeyValue;
	static C(Other: UObject | any): MovieSceneObjectPathChannelKeyValue;
}

declare class MovieSceneObjectPathChannel extends MovieSceneChannel { 
	PropertyClass: UnrealEngineClass;
	Times: FrameNumber[];
	Values: MovieSceneObjectPathChannelKeyValue[];
	DefaultValue: MovieSceneObjectPathChannelKeyValue;
	clone() : MovieSceneObjectPathChannel;
	static C(Other: UObject | any): MovieSceneObjectPathChannel;
}

declare class MovieSceneObjectPropertySection extends MovieSceneSection { 
	ObjectChannel: MovieSceneObjectPathChannel;
	static Load(ResourceName: string): MovieSceneObjectPropertySection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneObjectPropertySection;
	static GetDefaultObject(): MovieSceneObjectPropertySection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneObjectPropertySection;
	static C(Other: UObject | any): MovieSceneObjectPropertySection;
}

declare class MovieSceneObjectPropertyTrack extends MovieScenePropertyTrack { 
	PropertyClass: UnrealEngineClass;
	static Load(ResourceName: string): MovieSceneObjectPropertyTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneObjectPropertyTrack;
	static GetDefaultObject(): MovieSceneObjectPropertyTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneObjectPropertyTrack;
	static C(Other: UObject | any): MovieSceneObjectPropertyTrack;
}

declare class MovieSceneBoolChannel extends MovieSceneChannel { 
	Times: FrameNumber[];
	DefaultValue: boolean;
	bHasDefaultValue: boolean;
	Values: boolean[];
	clone() : MovieSceneBoolChannel;
	static C(Other: UObject | any): MovieSceneBoolChannel;
}

declare class BoolParameterNameAndCurve { 
	ParameterName: string;
	ParameterCurve: MovieSceneBoolChannel;
	clone() : BoolParameterNameAndCurve;
	static C(Other: UObject | any): BoolParameterNameAndCurve;
}

declare class ScalarParameterNameAndCurve { 
	ParameterName: string;
	ParameterCurve: MovieSceneFloatChannel;
	clone() : ScalarParameterNameAndCurve;
	static C(Other: UObject | any): ScalarParameterNameAndCurve;
}

declare class Vector2DParameterNameAndCurves { 
	ParameterName: string;
	XCurve: MovieSceneFloatChannel;
	YCurve: MovieSceneFloatChannel;
	clone() : Vector2DParameterNameAndCurves;
	static C(Other: UObject | any): Vector2DParameterNameAndCurves;
}

declare class VectorParameterNameAndCurves { 
	ParameterName: string;
	XCurve: MovieSceneFloatChannel;
	YCurve: MovieSceneFloatChannel;
	ZCurve: MovieSceneFloatChannel;
	clone() : VectorParameterNameAndCurves;
	static C(Other: UObject | any): VectorParameterNameAndCurves;
}

declare class ColorParameterNameAndCurves { 
	ParameterName: string;
	RedCurve: MovieSceneFloatChannel;
	GreenCurve: MovieSceneFloatChannel;
	BlueCurve: MovieSceneFloatChannel;
	AlphaCurve: MovieSceneFloatChannel;
	clone() : ColorParameterNameAndCurves;
	static C(Other: UObject | any): ColorParameterNameAndCurves;
}

declare class TransformParameterNameAndCurves { 
	ParameterName: string;
	Translation: MovieSceneFloatChannel;
	Rotation: MovieSceneFloatChannel;
	Scale: MovieSceneFloatChannel;
	clone() : TransformParameterNameAndCurves;
	static C(Other: UObject | any): TransformParameterNameAndCurves;
}

declare class MovieSceneParameterSection extends MovieSceneSection { 
	BoolParameterNamesAndCurves: BoolParameterNameAndCurve[];
	ScalarParameterNamesAndCurves: ScalarParameterNameAndCurve[];
	Vector2DParameterNamesAndCurves: Vector2DParameterNameAndCurves[];
	VectorParameterNamesAndCurves: VectorParameterNameAndCurves[];
	ColorParameterNamesAndCurves: ColorParameterNameAndCurves[];
	TransformParameterNamesAndCurves: TransformParameterNameAndCurves[];
	static Load(ResourceName: string): MovieSceneParameterSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParameterSection;
	static GetDefaultObject(): MovieSceneParameterSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParameterSection;
	RemoveVectorParameter(InParameterName: string): boolean;
	RemoveVector2DParameter(InParameterName: string): boolean;
	RemoveTransformParameter(InParameterName: string): boolean;
	RemoveScalarParameter(InParameterName: string): boolean;
	RemoveColorParameter(InParameterName: string): boolean;
	RemoveBoolParameter(InParameterName: string): boolean;
	GetParameterNames(ParameterNames?: any): {ParameterNames: any};
	AddVectorParameterKey(InParameterName: string,InTime: FrameNumber,InValue: Vector): void;
	AddVector2DParameterKey(InParameterName: string,InTime: FrameNumber,InValue: Vector2D): void;
	AddTransformParameterKey(InParameterName: string,InTime: FrameNumber,InValue: Transform): void;
	AddScalarParameterKey(InParameterName: string,InTime: FrameNumber,InValue: number): void;
	AddColorParameterKey(InParameterName: string,InTime: FrameNumber,InValue: LinearColor): void;
	AddBoolParameterKey(InParameterName: string,InTime: FrameNumber,InValue: boolean): void;
	static C(Other: UObject | any): MovieSceneParameterSection;
}

declare class MovieSceneParticleParameterTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneParticleParameterTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParticleParameterTrack;
	static GetDefaultObject(): MovieSceneParticleParameterTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParticleParameterTrack;
	static C(Other: UObject | any): MovieSceneParticleParameterTrack;
}

declare class MovieSceneParticleChannel extends MovieSceneByteChannel { 
	clone() : MovieSceneParticleChannel;
	static C(Other: UObject | any): MovieSceneParticleChannel;
}

declare class MovieSceneParticleSection extends MovieSceneSection { 
	ParticleKeys: MovieSceneParticleChannel;
	static Load(ResourceName: string): MovieSceneParticleSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParticleSection;
	static GetDefaultObject(): MovieSceneParticleSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParticleSection;
	static C(Other: UObject | any): MovieSceneParticleSection;
}

declare class MovieSceneParticleTrack extends MovieSceneNameableTrack { 
	ParticleSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneParticleTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParticleTrack;
	static GetDefaultObject(): MovieSceneParticleTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParticleTrack;
	static C(Other: UObject | any): MovieSceneParticleTrack;
}

declare class MovieSceneBlenderSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBlenderSystem;
	static GetDefaultObject(): MovieSceneBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBlenderSystem;
	static C(Other: UObject | any): MovieSceneBlenderSystem;
}

declare class MovieScenePiecewiseFloatBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseFloatBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseFloatBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseFloatBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseFloatBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseFloatBlenderSystem;
}

declare class MovieScenePrimitiveMaterialSection extends MovieSceneSection { 
	MaterialChannel: MovieSceneObjectPathChannel;
	static Load(ResourceName: string): MovieScenePrimitiveMaterialSection;
	static Find(Outer: UObject, ResourceName: string): MovieScenePrimitiveMaterialSection;
	static GetDefaultObject(): MovieScenePrimitiveMaterialSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePrimitiveMaterialSection;
	static C(Other: UObject | any): MovieScenePrimitiveMaterialSection;
}

declare class MovieScenePrimitiveMaterialTrack extends MovieScenePropertyTrack { 
	MaterialIndex: number;
	static Load(ResourceName: string): MovieScenePrimitiveMaterialTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScenePrimitiveMaterialTrack;
	static GetDefaultObject(): MovieScenePrimitiveMaterialTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePrimitiveMaterialTrack;
	static C(Other: UObject | any): MovieScenePrimitiveMaterialTrack;
}

declare class MovieSceneQuaternionInterpolationRotationSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneQuaternionInterpolationRotationSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneQuaternionInterpolationRotationSystem;
	static GetDefaultObject(): MovieSceneQuaternionInterpolationRotationSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneQuaternionInterpolationRotationSystem;
	static C(Other: UObject | any): MovieSceneQuaternionInterpolationRotationSystem;
}

declare class MovieSceneSkeletalAnimationParams { 
	Animation: AnimSequenceBase;
	FirstLoopStartFrameOffset: FrameNumber;
	StartFrameOffset: FrameNumber;
	EndFrameOffset: FrameNumber;
	PlayRate: number;
	bReverse: boolean;
	SlotName: string;
	Weight: MovieSceneFloatChannel;
	bSkipAnimNotifiers: boolean;
	bForceCustomMode: boolean;
	StartOffset: number;
	EndOffset: number;
	clone() : MovieSceneSkeletalAnimationParams;
	static C(Other: UObject | any): MovieSceneSkeletalAnimationParams;
}

declare class MovieSceneSkeletalAnimationSection extends MovieSceneSection { 
	Params: MovieSceneSkeletalAnimationParams;
	AnimSequence: AnimSequence;
	Animation: AnimSequenceBase;
	StartOffset: number;
	EndOffset: number;
	PlayRate: number;
	bReverse: boolean;
	SlotName: string;
	StartLocationOffset: Vector;
	StartRotationOffset: Rotator;
	bMatchWithPrevious: boolean;
	MatchedBoneName: string;
	MatchedLocationOffset: Vector;
	MatchedRotationOffset: Rotator;
	bMatchTranslation: boolean;
	bMatchIncludeZHeight: boolean;
	bMatchRotationYaw: boolean;
	bMatchRotationPitch: boolean;
	bMatchRotationRoll: boolean;
	bShowSkeleton: boolean;
	static Load(ResourceName: string): MovieSceneSkeletalAnimationSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSkeletalAnimationSection;
	static GetDefaultObject(): MovieSceneSkeletalAnimationSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSkeletalAnimationSection;
	static C(Other: UObject | any): MovieSceneSkeletalAnimationSection;
}

declare class MovieSceneSkeletalAnimRootMotionTrackParams { 
	clone() : MovieSceneSkeletalAnimRootMotionTrackParams;
	static C(Other: UObject | any): MovieSceneSkeletalAnimRootMotionTrackParams;
}

declare class MovieSceneSkeletalAnimationTrack extends MovieSceneNameableTrack { 
	AnimationSections: MovieSceneSection[];
	bUseLegacySectionIndexBlend: boolean;
	RootMotionParams: MovieSceneSkeletalAnimRootMotionTrackParams;
	bBlendFirstChildOfRoot: boolean;
	bShowRootMotionTrail: boolean;
	static Load(ResourceName: string): MovieSceneSkeletalAnimationTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSkeletalAnimationTrack;
	static GetDefaultObject(): MovieSceneSkeletalAnimationTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSkeletalAnimationTrack;
	static C(Other: UObject | any): MovieSceneSkeletalAnimationTrack;
}

declare class MovieSceneSlomoSection extends MovieSceneSection { 
	FloatCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneSlomoSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSlomoSection;
	static GetDefaultObject(): MovieSceneSlomoSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSlomoSection;
	static C(Other: UObject | any): MovieSceneSlomoSection;
}

declare class MovieSceneSlomoTrack extends MovieSceneFloatTrack { 
	static Load(ResourceName: string): MovieSceneSlomoTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSlomoTrack;
	static GetDefaultObject(): MovieSceneSlomoTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSlomoTrack;
	static C(Other: UObject | any): MovieSceneSlomoTrack;
}

declare class MovieSceneStringChannel extends MovieSceneChannel { 
	Times: FrameNumber[];
	Values: string[];
	DefaultValue: string;
	bHasDefaultValue: boolean;
	clone() : MovieSceneStringChannel;
	static C(Other: UObject | any): MovieSceneStringChannel;
}

declare class MovieSceneStringSection extends MovieSceneSection { 
	StringCurve: MovieSceneStringChannel;
	static Load(ResourceName: string): MovieSceneStringSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneStringSection;
	static GetDefaultObject(): MovieSceneStringSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneStringSection;
	static C(Other: UObject | any): MovieSceneStringSection;
}

declare class MovieSceneStringTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneStringTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneStringTrack;
	static GetDefaultObject(): MovieSceneStringTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneStringTrack;
	static C(Other: UObject | any): MovieSceneStringTrack;
}

declare class MovieSceneTransformOriginSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneTransformOriginSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTransformOriginSystem;
	static GetDefaultObject(): MovieSceneTransformOriginSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTransformOriginSystem;
	static C(Other: UObject | any): MovieSceneTransformOriginSystem;
}

declare class MovieSceneTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTransformTrack;
	static GetDefaultObject(): MovieSceneTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTransformTrack;
	static C(Other: UObject | any): MovieSceneTransformTrack;
}

declare class MovieSceneVectorSection extends MovieSceneSection { 
	Curves: MovieSceneFloatChannel;
	ChannelsUsed: number;
	static Load(ResourceName: string): MovieSceneVectorSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneVectorSection;
	static GetDefaultObject(): MovieSceneVectorSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneVectorSection;
	static C(Other: UObject | any): MovieSceneVectorSection;
}

declare class MovieSceneVectorTrack extends MovieScenePropertyTrack { 
	NumChannelsUsed: number;
	static Load(ResourceName: string): MovieSceneVectorTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneVectorTrack;
	static GetDefaultObject(): MovieSceneVectorTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneVectorTrack;
	static C(Other: UObject | any): MovieSceneVectorTrack;
}

declare class MovieSceneVisibilityTrack extends MovieSceneBoolTrack { 
	static Load(ResourceName: string): MovieSceneVisibilityTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneVisibilityTrack;
	static GetDefaultObject(): MovieSceneVisibilityTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneVisibilityTrack;
	static C(Other: UObject | any): MovieSceneVisibilityTrack;
}

declare class MovieSceneHierarchicalEasingInstantiatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneHierarchicalEasingInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneHierarchicalEasingInstantiatorSystem;
	static GetDefaultObject(): MovieSceneHierarchicalEasingInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneHierarchicalEasingInstantiatorSystem;
	static C(Other: UObject | any): MovieSceneHierarchicalEasingInstantiatorSystem;
}

declare class WeightAndEasingEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): WeightAndEasingEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): WeightAndEasingEvaluatorSystem;
	static GetDefaultObject(): WeightAndEasingEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WeightAndEasingEvaluatorSystem;
	static C(Other: UObject | any): WeightAndEasingEvaluatorSystem;
}

declare class EngineCustomTimeStep extends UObject { 
	static Load(ResourceName: string): EngineCustomTimeStep;
	static Find(Outer: UObject, ResourceName: string): EngineCustomTimeStep;
	static GetDefaultObject(): EngineCustomTimeStep;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineCustomTimeStep;
	static C(Other: UObject | any): EngineCustomTimeStep;
}

declare class FixedFrameRateCustomTimeStep extends EngineCustomTimeStep { 
	FixedFrameRate: FrameRate;
	static Load(ResourceName: string): FixedFrameRateCustomTimeStep;
	static Find(Outer: UObject, ResourceName: string): FixedFrameRateCustomTimeStep;
	static GetDefaultObject(): FixedFrameRateCustomTimeStep;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixedFrameRateCustomTimeStep;
	static C(Other: UObject | any): FixedFrameRateCustomTimeStep;
}

declare class GenlockedCustomTimeStep extends FixedFrameRateCustomTimeStep { 
	static Load(ResourceName: string): GenlockedCustomTimeStep;
	static Find(Outer: UObject, ResourceName: string): GenlockedCustomTimeStep;
	static GetDefaultObject(): GenlockedCustomTimeStep;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenlockedCustomTimeStep;
	static C(Other: UObject | any): GenlockedCustomTimeStep;
}

declare type ETimecodeProviderSynchronizationState = 'Closed' | 'Error' | 'Synchronized' | 'Synchronizing' | 'ETimecodeProviderSynchronizationState_MAX';
declare var ETimecodeProviderSynchronizationState : { Closed:'Closed',Error:'Error',Synchronized:'Synchronized',Synchronizing:'Synchronizing',ETimecodeProviderSynchronizationState_MAX:'ETimecodeProviderSynchronizationState_MAX', };
declare class TimecodeProvider extends UObject { 
	FrameDelay: number;
	static Load(ResourceName: string): TimecodeProvider;
	static Find(Outer: UObject, ResourceName: string): TimecodeProvider;
	static GetDefaultObject(): TimecodeProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimecodeProvider;
	GetTimecode(): Timecode;
	GetSynchronizationState(): ETimecodeProviderSynchronizationState;
	GetQualifiedFrameTime(): QualifiedFrameTime;
	GetFrameRate(): FrameRate;
	GetDelayedTimecode(): Timecode;
	GetDelayedQualifiedFrameTime(): QualifiedFrameTime;
	FetchTimecode(OutFrameTime?: QualifiedFrameTime): {OutFrameTime: QualifiedFrameTime, $: boolean};
	FetchAndUpdate(): void;
	static C(Other: UObject | any): TimecodeProvider;
}

declare class GenlockedTimecodeProvider extends TimecodeProvider { 
	bUseGenlockToCount: boolean;
	static Load(ResourceName: string): GenlockedTimecodeProvider;
	static Find(Outer: UObject, ResourceName: string): GenlockedTimecodeProvider;
	static GetDefaultObject(): GenlockedTimecodeProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenlockedTimecodeProvider;
	static C(Other: UObject | any): GenlockedTimecodeProvider;
}

declare class TimeManagementBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): TimeManagementBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): TimeManagementBlueprintLibrary;
	static GetDefaultObject(): TimeManagementBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimeManagementBlueprintLibrary;
	static TransformTime(SourceTime: FrameTime,SourceRate: FrameRate,DestinationRate: FrameRate): FrameTime;
	static Subtract_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
	static Subtract_FrameNumberFrameNumber(A: FrameNumber,B: FrameNumber): FrameNumber;
	static SnapFrameTimeToRate(SourceTime: FrameTime,SourceRate: FrameRate,SnapToRate: FrameRate): FrameTime;
	static Multiply_SecondsFrameRate(TimeInSeconds: number,FrameRate: FrameRate): FrameTime;
	static Multiply_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
	static IsValid_MultipleOf(InFrameRate: FrameRate,OtherFramerate: FrameRate): boolean;
	static IsValid_Framerate(InFrameRate: FrameRate): boolean;
	static GetTimecodeFrameRate(): FrameRate;
	static GetTimecode(): Timecode;
	static Divide_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
	static Conv_TimecodeToString(InTimecode: Timecode,bForceSignDisplay: boolean): string;
	static Conv_QualifiedFrameTimeToSeconds(InFrameTime: QualifiedFrameTime): number;
	static Conv_FrameRateToSeconds(InFrameRate: FrameRate): number;
	static Conv_FrameNumberToInteger(InFrameNumber: FrameNumber): number;
	static Add_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
	static Add_FrameNumberFrameNumber(A: FrameNumber,B: FrameNumber): FrameNumber;
	static C(Other: UObject | any): TimeManagementBlueprintLibrary;
}

declare class TimeSynchronizationSource extends UObject { 
	bUseForSynchronization: boolean;
	FrameOffset: number;
	static Load(ResourceName: string): TimeSynchronizationSource;
	static Find(Outer: UObject, ResourceName: string): TimeSynchronizationSource;
	static GetDefaultObject(): TimeSynchronizationSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimeSynchronizationSource;
	static C(Other: UObject | any): TimeSynchronizationSource;
}

declare class MovieSceneCustomClockSource extends Interface { 
	static Load(ResourceName: string): MovieSceneCustomClockSource;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCustomClockSource;
	static GetDefaultObject(): MovieSceneCustomClockSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCustomClockSource;
	OnTick(DeltaSeconds: number,InPlayRate: number): void;
	OnStopPlaying(InStopTime: QualifiedFrameTime): void;
	OnStartPlaying(InStartTime: QualifiedFrameTime): void;
	OnRequestCurrentTime(InCurrentTime: QualifiedFrameTime,InPlayRate: number): FrameTime;
	static C(Other: UObject | any): MovieSceneCustomClockSource;
}

declare class MovieSceneEntityProvider extends Interface { 
	static Load(ResourceName: string): MovieSceneEntityProvider;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEntityProvider;
	static GetDefaultObject(): MovieSceneEntityProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEntityProvider;
	static C(Other: UObject | any): MovieSceneEntityProvider;
}

declare class MovieScenePlaybackClient extends Interface { 
	static Load(ResourceName: string): MovieScenePlaybackClient;
	static Find(Outer: UObject, ResourceName: string): MovieScenePlaybackClient;
	static GetDefaultObject(): MovieScenePlaybackClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePlaybackClient;
	static C(Other: UObject | any): MovieScenePlaybackClient;
}

declare class MovieSceneTrackTemplateProducer extends Interface { 
	static Load(ResourceName: string): MovieSceneTrackTemplateProducer;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTrackTemplateProducer;
	static GetDefaultObject(): MovieSceneTrackTemplateProducer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTrackTemplateProducer;
	static C(Other: UObject | any): MovieSceneTrackTemplateProducer;
}

declare class NodeAndChannelMappings extends Interface { 
	static Load(ResourceName: string): NodeAndChannelMappings;
	static Find(Outer: UObject, ResourceName: string): NodeAndChannelMappings;
	static GetDefaultObject(): NodeAndChannelMappings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NodeAndChannelMappings;
	static C(Other: UObject | any): NodeAndChannelMappings;
}

declare class MovieSceneBindingOverrideData { 
	ObjectBindingID: MovieSceneObjectBindingID;
	UObject: any;
	bOverridesDefault: boolean;
	clone() : MovieSceneBindingOverrideData;
	static C(Other: UObject | any): MovieSceneBindingOverrideData;
}

declare class MovieSceneBindingOverrides extends UObject { 
	BindingData: MovieSceneBindingOverrideData[];
	static Load(ResourceName: string): MovieSceneBindingOverrides;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBindingOverrides;
	static GetDefaultObject(): MovieSceneBindingOverrides;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBindingOverrides;
	static C(Other: UObject | any): MovieSceneBindingOverrides;
}

declare class MovieSceneBindingOwnerInterface extends Interface { 
	static Load(ResourceName: string): MovieSceneBindingOwnerInterface;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBindingOwnerInterface;
	static GetDefaultObject(): MovieSceneBindingOwnerInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBindingOwnerInterface;
	static C(Other: UObject | any): MovieSceneBindingOwnerInterface;
}

declare class MovieSceneBoolSection extends MovieSceneSection { 
	DefaultValue: boolean;
	BoolCurve: MovieSceneBoolChannel;
	bIsExternallyInverted: boolean;
	static Load(ResourceName: string): MovieSceneBoolSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBoolSection;
	static GetDefaultObject(): MovieSceneBoolSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBoolSection;
	static C(Other: UObject | any): MovieSceneBoolSection;
}

declare class MovieSceneGenericBoundObjectInstantiator extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneGenericBoundObjectInstantiator;
	static Find(Outer: UObject, ResourceName: string): MovieSceneGenericBoundObjectInstantiator;
	static GetDefaultObject(): MovieSceneGenericBoundObjectInstantiator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneGenericBoundObjectInstantiator;
	static C(Other: UObject | any): MovieSceneGenericBoundObjectInstantiator;
}

declare class MovieSceneBoundSceneComponentInstantiator extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneBoundSceneComponentInstantiator;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBoundSceneComponentInstantiator;
	static GetDefaultObject(): MovieSceneBoundSceneComponentInstantiator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBoundSceneComponentInstantiator;
	static C(Other: UObject | any): MovieSceneBoundSceneComponentInstantiator;
}

declare class MovieSceneSceneComponentImpersonator extends Interface { 
	static Load(ResourceName: string): MovieSceneSceneComponentImpersonator;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSceneComponentImpersonator;
	static GetDefaultObject(): MovieSceneSceneComponentImpersonator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSceneComponentImpersonator;
	static C(Other: UObject | any): MovieSceneSceneComponentImpersonator;
}

declare class MovieSceneFloatDecomposer extends Interface { 
	static Load(ResourceName: string): MovieSceneFloatDecomposer;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatDecomposer;
	static GetDefaultObject(): MovieSceneFloatDecomposer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatDecomposer;
	static C(Other: UObject | any): MovieSceneFloatDecomposer;
}

declare type EMovieSceneBuiltInEasing = 'Linear' | 'SinIn' | 'SinOut' | 'SinInOut' | 'QuadIn' | 'QuadOut' | 'QuadInOut' | 'CubicIn' | 'CubicOut' | 'CubicInOut' | 'QuartIn' | 'QuartOut' | 'QuartInOut' | 'QuintIn' | 'QuintOut' | 'QuintInOut' | 'ExpoIn' | 'ExpoOut' | 'ExpoInOut' | 'CircIn' | 'CircOut' | 'CircInOut' | 'EMovieSceneBuiltInEasing_MAX';
declare var EMovieSceneBuiltInEasing : { Linear:'Linear',SinIn:'SinIn',SinOut:'SinOut',SinInOut:'SinInOut',QuadIn:'QuadIn',QuadOut:'QuadOut',QuadInOut:'QuadInOut',CubicIn:'CubicIn',CubicOut:'CubicOut',CubicInOut:'CubicInOut',QuartIn:'QuartIn',QuartOut:'QuartOut',QuartInOut:'QuartInOut',QuintIn:'QuintIn',QuintOut:'QuintOut',QuintInOut:'QuintInOut',ExpoIn:'ExpoIn',ExpoOut:'ExpoOut',ExpoInOut:'ExpoInOut',CircIn:'CircIn',CircOut:'CircOut',CircInOut:'CircInOut',EMovieSceneBuiltInEasing_MAX:'EMovieSceneBuiltInEasing_MAX', };
declare class MovieSceneBuiltInEasingFunction extends UObject { 
	Type: EMovieSceneBuiltInEasing;
	static Load(ResourceName: string): MovieSceneBuiltInEasingFunction;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBuiltInEasingFunction;
	static GetDefaultObject(): MovieSceneBuiltInEasingFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBuiltInEasingFunction;
	static C(Other: UObject | any): MovieSceneBuiltInEasingFunction;
}

declare class MovieSceneEasingExternalCurve extends UObject { 
	Curve: CurveFloat;
	static Load(ResourceName: string): MovieSceneEasingExternalCurve;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEasingExternalCurve;
	static GetDefaultObject(): MovieSceneEasingExternalCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEasingExternalCurve;
	static C(Other: UObject | any): MovieSceneEasingExternalCurve;
}

declare class MovieSceneEasingFunction extends Interface { 
	static Load(ResourceName: string): MovieSceneEasingFunction;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEasingFunction;
	static GetDefaultObject(): MovieSceneEasingFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEasingFunction;
	OnEvaluate(Interp: number): number;
	static C(Other: UObject | any): MovieSceneEasingFunction;
}

declare class MovieSceneEvalTimeSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneEvalTimeSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEvalTimeSystem;
	static GetDefaultObject(): MovieSceneEvalTimeSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEvalTimeSystem;
	static C(Other: UObject | any): MovieSceneEvalTimeSystem;
}

declare class MovieSceneKeyProxy extends Interface { 
	static Load(ResourceName: string): MovieSceneKeyProxy;
	static Find(Outer: UObject, ResourceName: string): MovieSceneKeyProxy;
	static GetDefaultObject(): MovieSceneKeyProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneKeyProxy;
	static C(Other: UObject | any): MovieSceneKeyProxy;
}

declare class MovieSceneMasterInstantiatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneMasterInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMasterInstantiatorSystem;
	static GetDefaultObject(): MovieSceneMasterInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMasterInstantiatorSystem;
	static C(Other: UObject | any): MovieSceneMasterInstantiatorSystem;
}

declare class MovieScenePreAnimatedStateSystemInterface extends Interface { 
	static Load(ResourceName: string): MovieScenePreAnimatedStateSystemInterface;
	static Find(Outer: UObject, ResourceName: string): MovieScenePreAnimatedStateSystemInterface;
	static GetDefaultObject(): MovieScenePreAnimatedStateSystemInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePreAnimatedStateSystemInterface;
	static C(Other: UObject | any): MovieScenePreAnimatedStateSystemInterface;
}

declare class MovieSceneCachePreAnimatedStateSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneCachePreAnimatedStateSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCachePreAnimatedStateSystem;
	static GetDefaultObject(): MovieSceneCachePreAnimatedStateSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCachePreAnimatedStateSystem;
	static C(Other: UObject | any): MovieSceneCachePreAnimatedStateSystem;
}

declare class MovieSceneRestorePreAnimatedStateSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneRestorePreAnimatedStateSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneRestorePreAnimatedStateSystem;
	static GetDefaultObject(): MovieSceneRestorePreAnimatedStateSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneRestorePreAnimatedStateSystem;
	static C(Other: UObject | any): MovieSceneRestorePreAnimatedStateSystem;
}

declare type EMovieScenePlayerStatus = 'Stopped' | 'Playing' | 'Recording' | 'Scrubbing' | 'Jumping' | 'Stepping' | 'Paused' | 'MAX';
declare var EMovieScenePlayerStatus : { Stopped:'Stopped',Playing:'Playing',Recording:'Recording',Scrubbing:'Scrubbing',Jumping:'Jumping',Stepping:'Stepping',Paused:'Paused',MAX:'MAX', };
declare class MovieSceneSequenceLoopCount { 
	Value: number;
	clone() : MovieSceneSequenceLoopCount;
	static C(Other: UObject | any): MovieSceneSequenceLoopCount;
}

declare class MovieSceneSequencePlaybackSettings { 
	bAutoPlay: boolean;
	LoopCount: MovieSceneSequenceLoopCount;
	PlayRate: number;
	StartTime: number;
	bRandomStartTime: boolean;
	bRestoreState: boolean;
	bDisableMovementInput: boolean;
	bDisableLookAtInput: boolean;
	bHidePlayer: boolean;
	bHideHud: boolean;
	bDisableCameraCuts: boolean;
	bPauseAtEnd: boolean;
	clone() : MovieSceneSequencePlaybackSettings;
	static C(Other: UObject | any): MovieSceneSequencePlaybackSettings;
}

declare class MovieSceneSequenceReplProperties { 
	LastKnownPosition: FrameTime;
	LastKnownStatus: EMovieScenePlayerStatus;
	LastKnownNumLoops: number;
	clone() : MovieSceneSequenceReplProperties;
	static C(Other: UObject | any): MovieSceneSequenceReplProperties;
}

declare class MovieSceneSequenceTickManager extends UObject { 
	SequenceActors: Actor[];
	Linker: MovieSceneEntitySystemLinker;
	static Load(ResourceName: string): MovieSceneSequenceTickManager;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSequenceTickManager;
	static GetDefaultObject(): MovieSceneSequenceTickManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSequenceTickManager;
	static C(Other: UObject | any): MovieSceneSequenceTickManager;
}

declare type EMovieScenePositionType = 'Frame' | 'Time' | 'MarkedFrame' | 'EMovieScenePositionType_MAX';
declare var EMovieScenePositionType : { Frame:'Frame',Time:'Time',MarkedFrame:'MarkedFrame',EMovieScenePositionType_MAX:'EMovieScenePositionType_MAX', };
declare type EUpdatePositionMethod = 'Play' | 'Jump' | 'Scrub' | 'EUpdatePositionMethod_MAX';
declare var EUpdatePositionMethod : { Play:'Play',Jump:'Jump',Scrub:'Scrub',EUpdatePositionMethod_MAX:'EUpdatePositionMethod_MAX', };
declare class MovieSceneSequencePlaybackParams { 
	Frame: FrameTime;
	Time: number;
	MarkedFrame: string;
	PositionType: EMovieScenePositionType;
	UpdateMethod: EUpdatePositionMethod;
	clone() : MovieSceneSequencePlaybackParams;
	static C(Other: UObject | any): MovieSceneSequencePlaybackParams;
}

declare class MovieSceneSequencePlayer extends UObject { 
	OnPlay: UnrealEngineMulticastDelegate<() => void>;
	OnPlayReverse: UnrealEngineMulticastDelegate<() => void>;
	OnStop: UnrealEngineMulticastDelegate<() => void>;
	OnPause: UnrealEngineMulticastDelegate<() => void>;
	OnFinished: UnrealEngineMulticastDelegate<() => void>;
	Status: EMovieScenePlayerStatus;
	bReversePlayback: boolean;
	Sequence: MovieSceneSequence;
	StartTime: FrameNumber;
	DurationFrames: number;
	DurationSubFrames: number;
	CurrentNumLoops: number;
	PlaybackSettings: MovieSceneSequencePlaybackSettings;
	RootTemplateInstance: MovieSceneRootEvaluationTemplateInstance;
	NetSyncProps: MovieSceneSequenceReplProperties;
	PlaybackClient: any;
	TickManager: MovieSceneSequenceTickManager;
	static Load(ResourceName: string): MovieSceneSequencePlayer;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSequencePlayer;
	static GetDefaultObject(): MovieSceneSequencePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSequencePlayer;
	StopAtCurrentTime(): void;
	Stop(): void;
	SetTimeRange(StartTime: number,Duration: number): void;
	SetPlayRate(PlayRate: number): void;
	SetPlaybackPosition(PlaybackParams: MovieSceneSequencePlaybackParams): void;
	SetFrameRate(FrameRate: FrameRate): void;
	SetFrameRange(StartFrame: number,Duration: number,SubFrames: number): void;
	SetDisableCameraCuts(bInDisableCameraCuts: boolean): void;
	ScrubToSeconds(TimeInSeconds: number): void;
	ScrubToMarkedFrame(InLabel: string): boolean;
	ScrubToFrame(NewPosition: FrameTime): void;
	Scrub(): void;
	RPC_OnStopEvent(StoppedTime: FrameTime): void;
	RPC_ExplicitServerUpdateEvent(Method: EUpdatePositionMethod,RelevantTime: FrameTime): void;
	PlayToSeconds(TimeInSeconds: number): void;
	PlayToMarkedFrame(InLabel: string): boolean;
	PlayToFrame(NewPosition: FrameTime): void;
	PlayTo(PlaybackParams: MovieSceneSequencePlaybackParams): void;
	PlayReverse(): void;
	PlayLooping(NumLoops: number): void;
	Play(): void;
	Pause(): void;
	JumpToSeconds(TimeInSeconds: number): void;
	JumpToMarkedFrame(InLabel: string): boolean;
	JumpToFrame(NewPosition: FrameTime): void;
	IsReversed(): boolean;
	IsPlaying(): boolean;
	IsPaused(): boolean;
	GoToEndAndStop(): void;
	GetStartTime(): QualifiedFrameTime;
	GetPlayRate(): number;
	GetObjectBindings(InObject: UObject): MovieSceneObjectBindingID[];
	GetFrameRate(): FrameRate;
	GetFrameDuration(): number;
	GetEndTime(): QualifiedFrameTime;
	GetDuration(): QualifiedFrameTime;
	GetDisableCameraCuts(): boolean;
	GetCurrentTime(): QualifiedFrameTime;
	GetBoundObjects(ObjectBinding: MovieSceneObjectBindingID): UObject[];
	ChangePlaybackDirection(): void;
	static C(Other: UObject | any): MovieSceneSequencePlayer;
}

declare class MovieSceneSpawnablesSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneSpawnablesSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSpawnablesSystem;
	static GetDefaultObject(): MovieSceneSpawnablesSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSpawnablesSystem;
	static C(Other: UObject | any): MovieSceneSpawnablesSystem;
}

declare class MovieSceneSpawnSection extends MovieSceneBoolSection { 
	static Load(ResourceName: string): MovieSceneSpawnSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSpawnSection;
	static GetDefaultObject(): MovieSceneSpawnSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSpawnSection;
	static C(Other: UObject | any): MovieSceneSpawnSection;
}

declare class MovieSceneSpawnTrack extends MovieSceneTrack { 
	Sections: MovieSceneSection[];
	ObjectGuid: Guid;
	static Load(ResourceName: string): MovieSceneSpawnTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSpawnTrack;
	static GetDefaultObject(): MovieSceneSpawnTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSpawnTrack;
	static C(Other: UObject | any): MovieSceneSpawnTrack;
}

declare class TestMovieSceneTrack extends MovieSceneTrack { 
	bHighPassFilter: boolean;
	SectionArray: MovieSceneSection[];
	static Load(ResourceName: string): TestMovieSceneTrack;
	static Find(Outer: UObject, ResourceName: string): TestMovieSceneTrack;
	static GetDefaultObject(): TestMovieSceneTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestMovieSceneTrack;
	static C(Other: UObject | any): TestMovieSceneTrack;
}

declare class TestMovieSceneSection extends MovieSceneSection { 
	static Load(ResourceName: string): TestMovieSceneSection;
	static Find(Outer: UObject, ResourceName: string): TestMovieSceneSection;
	static GetDefaultObject(): TestMovieSceneSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestMovieSceneSection;
	static C(Other: UObject | any): TestMovieSceneSection;
}

declare class TestMovieSceneSequence extends MovieSceneSequence { 
	MovieScene: MovieScene;
	static Load(ResourceName: string): TestMovieSceneSequence;
	static Find(Outer: UObject, ResourceName: string): TestMovieSceneSequence;
	static GetDefaultObject(): TestMovieSceneSequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestMovieSceneSequence;
	static C(Other: UObject | any): TestMovieSceneSequence;
}

declare class TestMovieSceneSubTrack extends MovieSceneSubTrack { 
	SectionArray: MovieSceneSection[];
	static Load(ResourceName: string): TestMovieSceneSubTrack;
	static Find(Outer: UObject, ResourceName: string): TestMovieSceneSubTrack;
	static GetDefaultObject(): TestMovieSceneSubTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestMovieSceneSubTrack;
	static C(Other: UObject | any): TestMovieSceneSubTrack;
}

declare class TestMovieSceneSubSection extends MovieSceneSubSection { 
	static Load(ResourceName: string): TestMovieSceneSubSection;
	static Find(Outer: UObject, ResourceName: string): TestMovieSceneSubSection;
	static GetDefaultObject(): TestMovieSceneSubSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestMovieSceneSubSection;
	static C(Other: UObject | any): TestMovieSceneSubSection;
}

declare class MovieSceneTrackInstanceInstantiator extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneTrackInstanceInstantiator;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTrackInstanceInstantiator;
	static GetDefaultObject(): MovieSceneTrackInstanceInstantiator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTrackInstanceInstantiator;
	static C(Other: UObject | any): MovieSceneTrackInstanceInstantiator;
}

declare class MovieSceneTrackInstanceSystem extends MovieSceneEntitySystem { 
	Instantiator: MovieSceneTrackInstanceInstantiator;
	static Load(ResourceName: string): MovieSceneTrackInstanceSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTrackInstanceSystem;
	static GetDefaultObject(): MovieSceneTrackInstanceSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTrackInstanceSystem;
	static C(Other: UObject | any): MovieSceneTrackInstanceSystem;
}

declare class AudioGenerator extends UObject { 
	static Load(ResourceName: string): AudioGenerator;
	static Find(Outer: UObject, ResourceName: string): AudioGenerator;
	static GetDefaultObject(): AudioGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioGenerator;
	static C(Other: UObject | any): AudioGenerator;
}

declare type EAudioSpectrumBandPresetType = 'KickDrum' | 'SnareDrum' | 'Voice' | 'Cymbals' | 'EAudioSpectrumBandPresetType_MAX';
declare var EAudioSpectrumBandPresetType : { KickDrum:'KickDrum',SnareDrum:'SnareDrum',Voice:'Voice',Cymbals:'Cymbals',EAudioSpectrumBandPresetType_MAX:'EAudioSpectrumBandPresetType_MAX', };
declare class SoundSubmixSpectralAnalysisBandSettings { 
	BandFrequency: number;
	AttackTimeMsec: number;
	ReleaseTimeMsec: number;
	QFactor: number;
	clone() : SoundSubmixSpectralAnalysisBandSettings;
	static C(Other: UObject | any): SoundSubmixSpectralAnalysisBandSettings;
}

declare type EMusicalNoteName = 'C' | 'Db' | 'D' | 'Eb' | 'E' | 'F' | 'Gb' | 'G' | 'Ab' | 'A' | 'Bb' | 'B' | 'EMusicalNoteName_MAX';
declare var EMusicalNoteName : { C:'C',Db:'Db',D:'D',Eb:'Eb',E:'E',F:'F',Gb:'Gb',G:'G',Ab:'Ab',A:'A',Bb:'Bb',B:'B',EMusicalNoteName_MAX:'EMusicalNoteName_MAX', };
declare class AudioMixerBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AudioMixerBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AudioMixerBlueprintLibrary;
	static GetDefaultObject(): AudioMixerBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioMixerBlueprintLibrary;
	static TrimAudioCache(InMegabytesToFree: number): number;
	static StopRecordingOutput(WorldContextObject: UObject,ExportType: EAudioRecordingExportType,Name: string,Path: string,SubmixToRecord: SoundSubmix,ExistingSoundWaveToOverwrite: SoundWave): SoundWave;
	static StopAudioBus(WorldContextObject: UObject,AudioBus: AudioBus): void;
	static StopAnalyzingOutput(WorldContextObject: UObject,SubmixToStopAnalyzing: SoundSubmix): void;
	static StartRecordingOutput(WorldContextObject: UObject,ExpectedDuration: number,SubmixToRecord: SoundSubmix): void;
	static StartAudioBus(WorldContextObject: UObject,AudioBus: AudioBus): void;
	static StartAnalyzingOutput(WorldContextObject: UObject,SubmixToAnalyze: SoundSubmix,FFTSize: EFFTSize,InterpolationMethod: EFFTPeakInterpolationMethod,WindowType: EFFTWindowType,HopSize: number,SpectrumType: EAudioSpectrumType): void;
	static SetSubmixEffectChainOverride(WorldContextObject: UObject,SoundSubmix: SoundSubmix,SubmixEffectPresetChain: SoundEffectSubmixPreset[],FadeTimeSec: number): void;
	static SetBypassSourceEffectChainEntry(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number,bBypassed: boolean): void;
	static ResumeRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
	static ReplaceSoundEffectSubmix(WorldContextObject: UObject,InSoundSubmix: SoundSubmix,SubmixChainIndex: number,SubmixEffectPreset: SoundEffectSubmixPreset): void;
	static RemoveSubmixEffectPresetAtIndex(WorldContextObject: UObject,SoundSubmix: SoundSubmix,SubmixChainIndex: number): void;
	static RemoveSubmixEffectPreset(WorldContextObject: UObject,SoundSubmix: SoundSubmix,SubmixEffectPreset: SoundEffectSubmixPreset): void;
	static RemoveSourceEffectFromPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number): void;
	static RemoveMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
	static PrimeSoundCueForPlayback(SoundCue: SoundCue): void;
	static PauseRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
	static MakePresetSpectralAnalysisBandSettings(InBandPresetType: EAudioSpectrumBandPresetType,InNumBands: number,InAttackTimeMsec: number,InReleaseTimeMsec: number): SoundSubmixSpectralAnalysisBandSettings[];
	static MakeMusicalSpectralAnalysisBandSettings(InNumSemitones: number,InStartingMusicalNote: EMusicalNoteName,InStartingOctave: number,InAttackTimeMsec: number,InReleaseTimeMsec: number): SoundSubmixSpectralAnalysisBandSettings[];
	static MakeFullSpectrumSpectralAnalysisBandSettings(InNumBands: number,InMinimumFrequency: number,InMaximumFrequency: number,InAttackTimeMsec: number,InReleaseTimeMsec: number): SoundSubmixSpectralAnalysisBandSettings[];
	static IsAudioBusActive(WorldContextObject: UObject,AudioBus: AudioBus): boolean;
	static GetPhaseForFrequencies(WorldContextObject: UObject,Frequencies: number[],Phases?: number[],SubmixToAnalyze?: SoundSubmix): {Phases: number[]};
	static GetNumberOfEntriesInSourceEffectChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain): number;
	static GetMagnitudeForFrequencies(WorldContextObject: UObject,Frequencies: number[],Magnitudes?: number[],SubmixToAnalyze?: SoundSubmix): {Magnitudes: number[]};
	static ClearSubmixEffects(WorldContextObject: UObject,SoundSubmix: SoundSubmix): void;
	static ClearSubmixEffectChainOverride(WorldContextObject: UObject,SoundSubmix: SoundSubmix,FadeTimeSec: number): void;
	static ClearMasterSubmixEffects(WorldContextObject: UObject): void;
	static AddSubmixEffect(WorldContextObject: UObject,SoundSubmix: SoundSubmix,SubmixEffectPreset: SoundEffectSubmixPreset): number;
	static AddSourceEffectToPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,Entry: SourceEffectChainEntry): void;
	static AddMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
	static C(Other: UObject | any): AudioMixerBlueprintLibrary;
}

declare type EQuartzCommandQuantization = 'Bar' | 'Beat' | 'ThirtySecondNote' | 'SixteenthNote' | 'EighthNote' | 'QuarterNote' | 'HalfNote' | 'WholeNote' | 'DottedSixteenthNote' | 'DottedEighthNote' | 'DottedQuarterNote' | 'DottedHalfNote' | 'DottedWholeNote' | 'SixteenthNoteTriplet' | 'EighthNoteTriplet' | 'QuarterNoteTriplet' | 'HalfNoteTriplet' | 'Tick' | 'Count' | 'EQuartzCommandQuantization_MAX';
declare var EQuartzCommandQuantization : { Bar:'Bar',Beat:'Beat',ThirtySecondNote:'ThirtySecondNote',SixteenthNote:'SixteenthNote',EighthNote:'EighthNote',QuarterNote:'QuarterNote',HalfNote:'HalfNote',WholeNote:'WholeNote',DottedSixteenthNote:'DottedSixteenthNote',DottedEighthNote:'DottedEighthNote',DottedQuarterNote:'DottedQuarterNote',DottedHalfNote:'DottedHalfNote',DottedWholeNote:'DottedWholeNote',SixteenthNoteTriplet:'SixteenthNoteTriplet',EighthNoteTriplet:'EighthNoteTriplet',QuarterNoteTriplet:'QuarterNoteTriplet',HalfNoteTriplet:'HalfNoteTriplet',Tick:'Tick',Count:'Count',EQuartzCommandQuantization_MAX:'EQuartzCommandQuantization_MAX', };
declare class QuartzClockHandle extends UObject { 
	static Load(ResourceName: string): QuartzClockHandle;
	static Find(Outer: UObject, ResourceName: string): QuartzClockHandle;
	static GetDefaultObject(): QuartzClockHandle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QuartzClockHandle;
	UnsubscribeFromTimeDivision(WorldContextObject: UObject,InQuantizationBoundary: EQuartzCommandQuantization): void;
	UnsubscribeFromAllTimeDivisions(WorldContextObject: UObject): void;
	ResumeClock(WorldContextObject: UObject): void;
	PauseClock(WorldContextObject: UObject): void;
	GetTicksPerSecond(WorldContextObject: UObject): number;
	GetThirtySecondNotesPerMinute(WorldContextObject: UObject): number;
	GetSecondsPerTick(WorldContextObject: UObject): number;
	GetMillisecondsPerTick(WorldContextObject: UObject): number;
	GetBeatsPerMinute(WorldContextObject: UObject): number;
	static C(Other: UObject | any): QuartzClockHandle;
}

declare type ESubmixEffectDynamicsProcessorType = 'Compressor' | 'Limiter' | 'Expander' | 'Gate' | 'Count' | 'ESubmixEffectDynamicsProcessorType_MAX';
declare var ESubmixEffectDynamicsProcessorType : { Compressor:'Compressor',Limiter:'Limiter',Expander:'Expander',Gate:'Gate',Count:'Count',ESubmixEffectDynamicsProcessorType_MAX:'ESubmixEffectDynamicsProcessorType_MAX', };
declare type ESubmixEffectDynamicsPeakMode = 'MeanSquared' | 'RootMeanSquared' | 'Peak' | 'Count' | 'ESubmixEffectDynamicsPeakMode_MAX';
declare var ESubmixEffectDynamicsPeakMode : { MeanSquared:'MeanSquared',RootMeanSquared:'RootMeanSquared',Peak:'Peak',Count:'Count',ESubmixEffectDynamicsPeakMode_MAX:'ESubmixEffectDynamicsPeakMode_MAX', };
declare type ESubmixEffectDynamicsChannelLinkMode = 'Disabled' | 'Average' | 'Peak' | 'Count' | 'ESubmixEffectDynamicsChannelLinkMode_MAX';
declare var ESubmixEffectDynamicsChannelLinkMode : { Disabled:'Disabled',Average:'Average',Peak:'Peak',Count:'Count',ESubmixEffectDynamicsChannelLinkMode_MAX:'ESubmixEffectDynamicsChannelLinkMode_MAX', };
declare class SubmixEffectDynamicProcessorFilterSettings { 
	bEnabled: boolean;
	Cutoff: number;
	GainDb: number;
	clone() : SubmixEffectDynamicProcessorFilterSettings;
	static C(Other: UObject | any): SubmixEffectDynamicProcessorFilterSettings;
}

declare class SubmixEffectDynamicsProcessorSettings { 
	DynamicsProcessorType: ESubmixEffectDynamicsProcessorType;
	PeakMode: ESubmixEffectDynamicsPeakMode;
	LinkMode: ESubmixEffectDynamicsChannelLinkMode;
	InputGainDb: number;
	ThresholdDb: number;
	Ratio: number;
	KneeBandwidthDb: number;
	LookAheadMsec: number;
	AttackTimeMsec: number;
	ReleaseTimeMsec: number;
	ExternalSubmix: SoundSubmix;
	bChannelLinked: boolean;
	bAnalogMode: boolean;
	bKeyAudition: boolean;
	KeyGainDb: number;
	OutputGainDb: number;
	KeyHighshelf: SubmixEffectDynamicProcessorFilterSettings;
	KeyLowshelf: SubmixEffectDynamicProcessorFilterSettings;
	clone() : SubmixEffectDynamicsProcessorSettings;
	static C(Other: UObject | any): SubmixEffectDynamicsProcessorSettings;
}

declare class SubmixEffectDynamicsProcessorPreset extends SoundEffectSubmixPreset { 
	Settings: SubmixEffectDynamicsProcessorSettings;
	static Load(ResourceName: string): SubmixEffectDynamicsProcessorPreset;
	static Find(Outer: UObject, ResourceName: string): SubmixEffectDynamicsProcessorPreset;
	static GetDefaultObject(): SubmixEffectDynamicsProcessorPreset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubmixEffectDynamicsProcessorPreset;
	SetSettings(Settings: SubmixEffectDynamicsProcessorSettings): void;
	SetExternalSubmix(Submix: SoundSubmix): void;
	static C(Other: UObject | any): SubmixEffectDynamicsProcessorPreset;
}

declare class SubmixEffectEQBand { 
	Frequency: number;
	Bandwidth: number;
	GainDb: number;
	bEnabled: boolean;
	clone() : SubmixEffectEQBand;
	static C(Other: UObject | any): SubmixEffectEQBand;
}

declare class SubmixEffectSubmixEQSettings { 
	EQBands: SubmixEffectEQBand[];
	clone() : SubmixEffectSubmixEQSettings;
	static C(Other: UObject | any): SubmixEffectSubmixEQSettings;
}

declare class SubmixEffectSubmixEQPreset extends SoundEffectSubmixPreset { 
	Settings: SubmixEffectSubmixEQSettings;
	static Load(ResourceName: string): SubmixEffectSubmixEQPreset;
	static Find(Outer: UObject, ResourceName: string): SubmixEffectSubmixEQPreset;
	static GetDefaultObject(): SubmixEffectSubmixEQPreset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubmixEffectSubmixEQPreset;
	SetSettings(InSettings: SubmixEffectSubmixEQSettings): void;
	static C(Other: UObject | any): SubmixEffectSubmixEQPreset;
}

declare class SubmixEffectReverbSettings { 
	bBypassEarlyReflections: boolean;
	ReflectionsDelay: number;
	GainHF: number;
	ReflectionsGain: number;
	bBypassLateReflections: boolean;
	LateDelay: number;
	DecayTime: number;
	Density: number;
	Diffusion: number;
	AirAbsorptionGainHF: number;
	DecayHFRatio: number;
	LateGain: number;
	Gain: number;
	WetLevel: number;
	DryLevel: number;
	bBypass: boolean;
	clone() : SubmixEffectReverbSettings;
	static C(Other: UObject | any): SubmixEffectReverbSettings;
}

declare class SubmixEffectReverbPreset extends SoundEffectSubmixPreset { 
	Settings: SubmixEffectReverbSettings;
	static Load(ResourceName: string): SubmixEffectReverbPreset;
	static Find(Outer: UObject, ResourceName: string): SubmixEffectReverbPreset;
	static GetDefaultObject(): SubmixEffectReverbPreset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubmixEffectReverbPreset;
	SetSettingsWithReverbEffect(InReverbEffect: ReverbEffect,WetLevel: number,DryLevel: number): void;
	SetSettings(InSettings: SubmixEffectReverbSettings): void;
	static C(Other: UObject | any): SubmixEffectReverbPreset;
}

declare type EQuartzTimeSignatureQuantization = 'HalfNote' | 'QuarterNote' | 'EighthNote' | 'SixteenthNote' | 'ThirtySecondNote' | 'Count' | 'EQuartzTimeSignatureQuantization_MAX';
declare var EQuartzTimeSignatureQuantization : { HalfNote:'HalfNote',QuarterNote:'QuarterNote',EighthNote:'EighthNote',SixteenthNote:'SixteenthNote',ThirtySecondNote:'ThirtySecondNote',Count:'Count',EQuartzTimeSignatureQuantization_MAX:'EQuartzTimeSignatureQuantization_MAX', };
declare class QuartzPulseOverrideStep { 
	NumberOfPulses: number;
	PulseDuration: EQuartzCommandQuantization;
	clone() : QuartzPulseOverrideStep;
	static C(Other: UObject | any): QuartzPulseOverrideStep;
}

declare class QuartzTimeSignature { 
	NumBeats: number;
	BeatType: EQuartzTimeSignatureQuantization;
	OptionalPulseOverride: QuartzPulseOverrideStep[];
	clone() : QuartzTimeSignature;
	static C(Other: UObject | any): QuartzTimeSignature;
}

declare class QuartzClockSettings { 
	TimeSignature: QuartzTimeSignature;
	bIgnoreLevelChange: boolean;
	clone() : QuartzClockSettings;
	static C(Other: UObject | any): QuartzClockSettings;
}

declare class QuartzSubsystem extends WorldSubsystem { 
	static Load(ResourceName: string): QuartzSubsystem;
	static Find(Outer: UObject, ResourceName: string): QuartzSubsystem;
	static GetDefaultObject(): QuartzSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QuartzSubsystem;
	GetRoundTripMinLatency(WorldContextObject: UObject): number;
	GetRoundTripMaxLatency(WorldContextObject: UObject): number;
	GetRoundTripAverageLatency(WorldContextObject: UObject): number;
	GetHandleForClock(WorldContextObject: UObject,ClockName: string): QuartzClockHandle;
	GetGameThreadToAudioRenderThreadMinLatency(WorldContextObject: UObject): number;
	GetGameThreadToAudioRenderThreadMaxLatency(WorldContextObject: UObject): number;
	GetGameThreadToAudioRenderThreadAverageLatency(WorldContextObject: UObject): number;
	GetAudioRenderThreadToGameThreadMinLatency(): number;
	GetAudioRenderThreadToGameThreadMaxLatency(): number;
	GetAudioRenderThreadToGameThreadAverageLatency(): number;
	DoesClockExist(WorldContextObject: UObject,ClockName: string): boolean;
	CreateNewClock(WorldContextObject: UObject,ClockName: string,InSettings: QuartzClockSettings,bOverrideSettingsIfClockExists: boolean): QuartzClockHandle;
	static C(Other: UObject | any): QuartzSubsystem;
}

declare class SoundWaveProcedural extends SoundWave { 
	static Load(ResourceName: string): SoundWaveProcedural;
	static Find(Outer: UObject, ResourceName: string): SoundWaveProcedural;
	static GetDefaultObject(): SoundWaveProcedural;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveProcedural;
	static C(Other: UObject | any): SoundWaveProcedural;
}

declare class SynthComponent extends SceneComponent { 
	bAutoDestroy: boolean;
	bStopWhenOwnerDestroyed: boolean;
	bAllowSpatialization: boolean;
	bOverrideAttenuation: boolean;
	bOutputToBusOnly: boolean;
	AttenuationSettings: SoundAttenuation;
	AttenuationOverrides: SoundAttenuationSettings;
	ConcurrencySettings: SoundConcurrency;
	ConcurrencySet: any;
	SoundClass: SoundClass;
	SourceEffectChain: SoundEffectSourcePresetChain;
	SoundSubmix: SoundSubmixBase;
	SoundSubmixSends: SoundSubmixSendInfo[];
	BusSends: SoundSourceBusSendInfo[];
	PreEffectBusSends: SoundSourceBusSendInfo[];
	bIsUISound: boolean;
	bIsPreviewSound: boolean;
	EnvelopeFollowerAttackTime: number;
	EnvelopeFollowerReleaseTime: number;
	OnAudioEnvelopeValue: UnrealEngineMulticastDelegate<(EnvelopeValue: number) => void>;
	Synth: SynthSound;
	AudioComponent: AudioComponent;
	static Load(ResourceName: string): SynthComponent;
	static Find(Outer: UObject, ResourceName: string): SynthComponent;
	static GetDefaultObject(): SynthComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SynthComponent;
	Stop(): void;
	Start(): void;
	SetVolumeMultiplier(VolumeMultiplier: number): void;
	SetSubmixSend(Submix: SoundSubmixBase,SendLevel: number): void;
	SetLowPassFilterFrequency(InLowPassFilterFrequency: number): void;
	SetLowPassFilterEnabled(InLowPassFilterEnabled: boolean): void;
	IsPlaying(): boolean;
	static C(Other: UObject | any): SynthComponent;
}

declare class SynthSound extends SoundWaveProcedural { 
	OwningSynthComponent: SynthComponent;
	static Load(ResourceName: string): SynthSound;
	static Find(Outer: UObject, ResourceName: string): SynthSound;
	static GetDefaultObject(): SynthSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SynthSound;
	static C(Other: UObject | any): SynthSound;
}

declare class MediaSource extends UObject { 
	static Load(ResourceName: string): MediaSource;
	static Find(Outer: UObject, ResourceName: string): MediaSource;
	static GetDefaultObject(): MediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSource;
	Validate(): boolean;
	SetMediaOptionString(Key: string,Value: string): void;
	SetMediaOptionInt64(Key: string,Value: any): void;
	SetMediaOptionFloat(Key: string,Value: number): void;
	SetMediaOptionBool(Key: string,Value: boolean): void;
	GetUrl(): string;
	static C(Other: UObject | any): MediaSource;
}

declare class BaseMediaSource extends MediaSource { 
	PlatformPlayerNames: any;
	PlayerName: string;
	static Load(ResourceName: string): BaseMediaSource;
	static Find(Outer: UObject, ResourceName: string): BaseMediaSource;
	static GetDefaultObject(): BaseMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseMediaSource;
	static C(Other: UObject | any): BaseMediaSource;
}

declare class FileMediaSource extends BaseMediaSource { 
	FilePath: string;
	PrecacheFile: boolean;
	static Load(ResourceName: string): FileMediaSource;
	static Find(Outer: UObject, ResourceName: string): FileMediaSource;
	static GetDefaultObject(): FileMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileMediaSource;
	SetFilePath(Path: string): void;
	static C(Other: UObject | any): FileMediaSource;
}

declare class MediaCaptureDevice { 
	DisplayName: string;
	URL: string;
	clone() : MediaCaptureDevice;
	static C(Other: UObject | any): MediaCaptureDevice;
}

declare class MediaBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MediaBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MediaBlueprintFunctionLibrary;
	static GetDefaultObject(): MediaBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaBlueprintFunctionLibrary;
	static EnumerateWebcamCaptureDevices(OutDevices?: MediaCaptureDevice[],Filter?: number): {OutDevices: MediaCaptureDevice[]};
	static EnumerateVideoCaptureDevices(OutDevices?: MediaCaptureDevice[],Filter?: number): {OutDevices: MediaCaptureDevice[]};
	static EnumerateAudioCaptureDevices(OutDevices?: MediaCaptureDevice[],Filter?: number): {OutDevices: MediaCaptureDevice[]};
	static C(Other: UObject | any): MediaBlueprintFunctionLibrary;
}

declare type MediaTextureOutputFormat = 'MTOF_Default' | 'MTOF_SRGB_LINOUT' | 'MTOF_MAX';
declare var MediaTextureOutputFormat : { MTOF_Default:'MTOF_Default',MTOF_SRGB_LINOUT:'MTOF_SRGB_LINOUT',MTOF_MAX:'MTOF_MAX', };
declare type MediaTextureOrientation = 'MTORI_Original' | 'MTORI_CW90' | 'MTORI_CW180' | 'MTORI_CW270' | 'MTORI_MAX';
declare var MediaTextureOrientation : { MTORI_Original:'MTORI_Original',MTORI_CW90:'MTORI_CW90',MTORI_CW180:'MTORI_CW180',MTORI_CW270:'MTORI_CW270',MTORI_MAX:'MTORI_MAX', };
declare class MediaPlaylist extends UObject { 
	Items: MediaSource[];
	static Load(ResourceName: string): MediaPlaylist;
	static Find(Outer: UObject, ResourceName: string): MediaPlaylist;
	static GetDefaultObject(): MediaPlaylist;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaPlaylist;
	Replace(index: number,Replacement: MediaSource): boolean;
	RemoveAt(index: number): boolean;
	Remove(MediaSource: MediaSource): boolean;
	Num(): number;
	Insert(MediaSource: MediaSource,index: number): void;
	GetRandom(OutIndex?: number): {OutIndex: number, $: MediaSource};
	GetPrevious(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	GetNext(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	Get(index: number): MediaSource;
	AddUrl(URL: string): boolean;
	AddFile(FilePath: string): boolean;
	Add(MediaSource: MediaSource): boolean;
	static C(Other: UObject | any): MediaPlaylist;
}

declare type EMediaPlayerTrack = 'Audio' | 'Caption' | 'Metadata' | 'Script' | 'Subtitle' | 'Text' | 'Video' | 'EMediaPlayerTrack_MAX';
declare var EMediaPlayerTrack : { Audio:'Audio',Caption:'Caption',Metadata:'Metadata',Script:'Script',Subtitle:'Subtitle',Text:'Text',Video:'Video',EMediaPlayerTrack_MAX:'EMediaPlayerTrack_MAX', };
declare class MediaPlayerTrackOptions { 
	Audio: number;
	Caption: number;
	MetaData: number;
	Script: number;
	Subtitle: number;
	text: number;
	Video: number;
	clone() : MediaPlayerTrackOptions;
	static C(Other: UObject | any): MediaPlayerTrackOptions;
}

declare type EMediaPlayerOptionBooleanOverride = 'UseMediaPlayerSetting' | 'Enabled' | 'Disabled' | 'EMediaPlayerOptionBooleanOverride_MAX';
declare var EMediaPlayerOptionBooleanOverride : { UseMediaPlayerSetting:'UseMediaPlayerSetting',Enabled:'Enabled',Disabled:'Disabled',EMediaPlayerOptionBooleanOverride_MAX:'EMediaPlayerOptionBooleanOverride_MAX', };
declare class MediaPlayerOptions { 
	Tracks: MediaPlayerTrackOptions;
	SeekTime: Timespan;
	PlayOnOpen: EMediaPlayerOptionBooleanOverride;
	loop: EMediaPlayerOptionBooleanOverride;
	clone() : MediaPlayerOptions;
	static C(Other: UObject | any): MediaPlayerOptions;
}

declare class MediaTimeStampInfo extends UObject { 
	Time: Timespan;
	SequenceIndex: any;
	static Load(ResourceName: string): MediaTimeStampInfo;
	static Find(Outer: UObject, ResourceName: string): MediaTimeStampInfo;
	static GetDefaultObject(): MediaTimeStampInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaTimeStampInfo;
	static C(Other: UObject | any): MediaTimeStampInfo;
}

declare class MediaPlayer extends UObject { 
	OnEndReached: UnrealEngineMulticastDelegate<() => void>;
	OnMediaClosed: UnrealEngineMulticastDelegate<() => void>;
	OnMediaOpened: UnrealEngineMulticastDelegate<(OpenedUrl: string) => void>;
	OnMediaOpenFailed: UnrealEngineMulticastDelegate<(FailedUrl: string) => void>;
	OnPlaybackResumed: UnrealEngineMulticastDelegate<() => void>;
	OnPlaybackSuspended: UnrealEngineMulticastDelegate<() => void>;
	OnSeekCompleted: UnrealEngineMulticastDelegate<() => void>;
	OnTracksChanged: UnrealEngineMulticastDelegate<() => void>;
	CacheAhead: Timespan;
	CacheBehind: Timespan;
	CacheBehindGame: Timespan;
	NativeAudioOut: boolean;
	PlayOnOpen: boolean;
	Shuffle: boolean;
	loop: boolean;
	Playlist: MediaPlaylist;
	PlaylistIndex: number;
	TimeDelay: Timespan;
	HorizontalFieldOfView: number;
	VerticalFieldOfView: number;
	ViewRotation: Rotator;
	PlayerGuid: Guid;
	AffectedByPIEHandling: boolean;
	static Load(ResourceName: string): MediaPlayer;
	static Find(Outer: UObject, ResourceName: string): MediaPlayer;
	static GetDefaultObject(): MediaPlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaPlayer;
	SupportsSeeking(): boolean;
	SupportsScrubbing(): boolean;
	SupportsRate(Rate: number,Unthinned: boolean): boolean;
	SetViewRotation(Rotation: Rotator,Absolute: boolean): boolean;
	SetViewField(Horizontal: number,Vertical: number,Absolute: boolean): boolean;
	SetVideoTrackFrameRate(TrackIndex: number,FormatIndex: number,FrameRate: number): boolean;
	SetTrackFormat(TrackType: EMediaPlayerTrack,TrackIndex: number,FormatIndex: number): boolean;
	SetTimeDelay(TimeDelay: Timespan): void;
	SetRate(Rate: number): boolean;
	SetNativeVolume(Volume: number): boolean;
	SetMediaOptions(Options: MediaSource): void;
	SetLooping(Looping: boolean): boolean;
	SetDesiredPlayerName(PlayerName: string): void;
	SetBlockOnTime(Time: Timespan): void;
	SelectTrack(TrackType: EMediaPlayerTrack,TrackIndex: number): boolean;
	Seek(Time: Timespan): boolean;
	Rewind(): boolean;
	Reopen(): boolean;
	Previous(): boolean;
	PlayAndSeek(): void;
	Play(): boolean;
	Pause(): boolean;
	OpenUrl(URL: string): boolean;
	OpenSourceWithOptions(MediaSource: MediaSource,Options: MediaPlayerOptions): boolean;
	OpenSourceLatent(WorldContextObject: UObject,LatentInfo: LatentActionInfo,MediaSource: MediaSource,Options: MediaPlayerOptions,bSuccess?: boolean): {bSuccess: boolean};
	OpenSource(MediaSource: MediaSource): boolean;
	OpenPlaylistIndex(InPlaylist: MediaPlaylist,index: number): boolean;
	OpenPlaylist(InPlaylist: MediaPlaylist): boolean;
	OpenFile(FilePath: string): boolean;
	Next(): boolean;
	IsReady(): boolean;
	IsPreparing(): boolean;
	IsPlaying(): boolean;
	IsPaused(): boolean;
	IsLooping(): boolean;
	IsConnecting(): boolean;
	IsClosed(): boolean;
	IsBuffering(): boolean;
	HasError(): boolean;
	GetViewRotation(): Rotator;
	GetVideoTrackType(TrackIndex: number,FormatIndex: number): string;
	GetVideoTrackFrameRates(TrackIndex: number,FormatIndex: number): FloatRange;
	GetVideoTrackFrameRate(TrackIndex: number,FormatIndex: number): number;
	GetVideoTrackDimensions(TrackIndex: number,FormatIndex: number): IntPoint;
	GetVideoTrackAspectRatio(TrackIndex: number,FormatIndex: number): number;
	GetVerticalFieldOfView(): number;
	GetUrl(): string;
	GetTrackLanguage(TrackType: EMediaPlayerTrack,TrackIndex: number): string;
	GetTrackFormat(TrackType: EMediaPlayerTrack,TrackIndex: number): number;
	GetTrackDisplayName(TrackType: EMediaPlayerTrack,TrackIndex: number): string;
	GetTimeStamp(): MediaTimeStampInfo;
	GetTimeDelay(): Timespan;
	GetTime(): Timespan;
	GetSupportedRates(OutRates?: FloatRange[],Unthinned?: boolean): {OutRates: FloatRange[]};
	GetSelectedTrack(TrackType: EMediaPlayerTrack): number;
	GetRate(): number;
	GetPlaylistIndex(): number;
	GetPlaylist(): MediaPlaylist;
	GetPlayerName(): string;
	GetNumTracks(TrackType: EMediaPlayerTrack): number;
	GetNumTrackFormats(TrackType: EMediaPlayerTrack,TrackIndex: number): number;
	GetMediaName(): string;
	GetHorizontalFieldOfView(): number;
	GetDuration(): Timespan;
	GetDesiredPlayerName(): string;
	GetAudioTrackType(TrackIndex: number,FormatIndex: number): string;
	GetAudioTrackSampleRate(TrackIndex: number,FormatIndex: number): number;
	GetAudioTrackChannels(TrackIndex: number,FormatIndex: number): number;
	Close(): void;
	CanPlayUrl(URL: string): boolean;
	CanPlaySource(MediaSource: MediaSource): boolean;
	CanPause(): boolean;
	static C(Other: UObject | any): MediaPlayer;
}

declare class MediaTexture extends Texture { 
	AddressX: TextureAddress;
	AddressY: TextureAddress;
	AutoClear: boolean;
	ClearColor: LinearColor;
	EnableGenMips: boolean;
	NumMips: number;
	NewStyleOutput: boolean;
	OutputFormat: MediaTextureOutputFormat;
	CurrentAspectRatio: number;
	CurrentOrientation: MediaTextureOrientation;
	MediaPlayer: MediaPlayer;
	static Load(ResourceName: string): MediaTexture;
	static Find(Outer: UObject, ResourceName: string): MediaTexture;
	static GetDefaultObject(): MediaTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaTexture;
	SetMediaPlayer(NewMediaPlayer: MediaPlayer): void;
	GetWidth(): number;
	GetMediaPlayer(): MediaPlayer;
	GetHeight(): number;
	GetAspectRatio(): number;
	static C(Other: UObject | any): MediaTexture;
}

declare class MediaComponent extends ActorComponent { 
	MediaTexture: MediaTexture;
	MediaPlayer: MediaPlayer;
	static Load(ResourceName: string): MediaComponent;
	static Find(Outer: UObject, ResourceName: string): MediaComponent;
	static GetDefaultObject(): MediaComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaComponent;
	GetMediaTexture(): MediaTexture;
	GetMediaPlayer(): MediaPlayer;
	static C(Other: UObject | any): MediaComponent;
}

declare type EMediaSoundChannels = 'Mono' | 'Stereo' | 'Surround' | 'EMediaSoundChannels_MAX';
declare var EMediaSoundChannels : { Mono:'Mono',Stereo:'Stereo',Surround:'Surround',EMediaSoundChannels_MAX:'EMediaSoundChannels_MAX', };
declare type EMediaSoundComponentFFTSize = 'Min_64' | 'Small_256' | 'Medium_512' | 'Large_1024' | 'EMediaSoundComponentFFTSize_MAX';
declare var EMediaSoundComponentFFTSize : { Min_64:'Min_64',Small_256:'Small_256',Medium_512:'Medium_512',Large_1024:'Large_1024',EMediaSoundComponentFFTSize_MAX:'EMediaSoundComponentFFTSize_MAX', };
declare class MediaSoundComponentSpectralData { 
	FrequencyHz: number;
	Magnitude: number;
	clone() : MediaSoundComponentSpectralData;
	static C(Other: UObject | any): MediaSoundComponentSpectralData;
}

declare class MediaSoundComponent extends SynthComponent { 
	Channels: EMediaSoundChannels;
	DynamicRateAdjustment: boolean;
	RateAdjustmentFactor: number;
	RateAdjustmentRange: FloatRange;
	MediaPlayer: MediaPlayer;
	static Load(ResourceName: string): MediaSoundComponent;
	static Find(Outer: UObject, ResourceName: string): MediaSoundComponent;
	static GetDefaultObject(): MediaSoundComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSoundComponent;
	SetSpectralAnalysisSettings(InFrequenciesToAnalyze: number[],InFFTSize: EMediaSoundComponentFFTSize): void;
	SetMediaPlayer(NewMediaPlayer: MediaPlayer): void;
	SetEnvelopeFollowingsettings(AttackTimeMsec: number,ReleaseTimeMsec: number): void;
	SetEnableSpectralAnalysis(bInSpectralAnalysisEnabled: boolean): void;
	SetEnableEnvelopeFollowing(bInEnvelopeFollowing: boolean): void;
	GetSpectralData(): MediaSoundComponentSpectralData[];
	GetNormalizedSpectralData(): MediaSoundComponentSpectralData[];
	GetMediaPlayer(): MediaPlayer;
	GetEnvelopeValue(): number;
	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: SoundAttenuationSettings): {OutAttenuationSettings: SoundAttenuationSettings, $: boolean};
	static C(Other: UObject | any): MediaSoundComponent;
}

declare class PlatformMediaSource extends MediaSource { 
	PlatformMediaSources: any;
	MediaSource: MediaSource;
	static Load(ResourceName: string): PlatformMediaSource;
	static Find(Outer: UObject, ResourceName: string): PlatformMediaSource;
	static GetDefaultObject(): PlatformMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformMediaSource;
	static C(Other: UObject | any): PlatformMediaSource;
}

declare class StreamMediaSource extends BaseMediaSource { 
	StreamUrl: string;
	static Load(ResourceName: string): StreamMediaSource;
	static Find(Outer: UObject, ResourceName: string): StreamMediaSource;
	static GetDefaultObject(): StreamMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamMediaSource;
	static C(Other: UObject | any): StreamMediaSource;
}

declare class TimeSynchronizableMediaSource extends BaseMediaSource { 
	bUseTimeSynchronization: boolean;
	FrameDelay: number;
	TimeDelay: any;
	static Load(ResourceName: string): TimeSynchronizableMediaSource;
	static Find(Outer: UObject, ResourceName: string): TimeSynchronizableMediaSource;
	static GetDefaultObject(): TimeSynchronizableMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimeSynchronizableMediaSource;
	static C(Other: UObject | any): TimeSynchronizableMediaSource;
}

declare class AnimSequenceLevelSequenceLink extends AssetUserData { 
	SkelTrackGuid: Guid;
	PathToLevelSequence: SoftObjectPath;
	static Load(ResourceName: string): AnimSequenceLevelSequenceLink;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceLevelSequenceLink;
	static GetDefaultObject(): AnimSequenceLevelSequenceLink;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceLevelSequenceLink;
	static C(Other: UObject | any): AnimSequenceLevelSequenceLink;
}

declare class DefaultLevelSequenceInstanceData extends UObject { 
	TransformOriginActor: Actor;
	TransformOrigin: Transform;
	static Load(ResourceName: string): DefaultLevelSequenceInstanceData;
	static Find(Outer: UObject, ResourceName: string): DefaultLevelSequenceInstanceData;
	static GetDefaultObject(): DefaultLevelSequenceInstanceData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultLevelSequenceInstanceData;
	static C(Other: UObject | any): DefaultLevelSequenceInstanceData;
}

declare class LevelSequenceMetaData extends Interface { 
	static Load(ResourceName: string): LevelSequenceMetaData;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceMetaData;
	static GetDefaultObject(): LevelSequenceMetaData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceMetaData;
	static C(Other: UObject | any): LevelSequenceMetaData;
}

declare class LevelSequencePlayer extends MovieSceneSequencePlayer { 
	OnCameraCut: UnrealEngineMulticastDelegate<(CameraComponent: CameraComponent) => void>;
	static Load(ResourceName: string): LevelSequencePlayer;
	static Find(Outer: UObject, ResourceName: string): LevelSequencePlayer;
	static GetDefaultObject(): LevelSequencePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequencePlayer;
	GetActiveCameraComponent(): CameraComponent;
	static CreateLevelSequencePlayer(WorldContextObject: UObject,LevelSequence: LevelSequence,Settings: MovieSceneSequencePlaybackSettings,OutActor?: LevelSequenceActor): {OutActor: LevelSequenceActor, $: LevelSequencePlayer};
	static C(Other: UObject | any): LevelSequencePlayer;
}

declare class LevelSequenceCameraSettings { 
	bOverrideAspectRatioAxisConstraint: boolean;
	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
	clone() : LevelSequenceCameraSettings;
	static C(Other: UObject | any): LevelSequenceCameraSettings;
}

declare class LevelSequenceSnapshotSettings { 
	ZeroPadAmount: number;
	FrameRate: FrameRate;
	clone() : LevelSequenceSnapshotSettings;
	static C(Other: UObject | any): LevelSequenceSnapshotSettings;
}

declare class LevelSequencePlayerSnapshot { 
	MasterName: string;
	MasterTime: QualifiedFrameTime;
	SourceTime: QualifiedFrameTime;
	CurrentShotName: string;
	CurrentShotLocalTime: QualifiedFrameTime;
	CurrentShotSourceTime: QualifiedFrameTime;
	SourceTimecode: string;
	CameraComponent: CameraComponent;
	Settings: LevelSequenceSnapshotSettings;
	ActiveShot: LevelSequence;
	ShotID: MovieSceneSequenceID;
	clone() : LevelSequencePlayerSnapshot;
	static C(Other: UObject | any): LevelSequencePlayerSnapshot;
}

declare class LevelSequenceBurnIn extends UserWidget { 
	FrameInformation: LevelSequencePlayerSnapshot;
	LevelSequenceActor: LevelSequenceActor;
	static Load(ResourceName: string): LevelSequenceBurnIn;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnIn;
	static GetDefaultObject(): LevelSequenceBurnIn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnIn;
	SetSettings(InSettings: UObject): void;
	GetSettingsClass(): UnrealEngineClass;
	static C(Other: UObject | any): LevelSequenceBurnIn;
}

declare class LevelSequenceActor extends Actor { 
	PlaybackSettings: MovieSceneSequencePlaybackSettings;
	SequencePlayer: LevelSequencePlayer;
	LevelSequence: SoftObjectPath;
	CameraSettings: LevelSequenceCameraSettings;
	BurnInOptions: LevelSequenceBurnInOptions;
	BindingOverrides: MovieSceneBindingOverrides;
	bAutoPlay: boolean;
	bOverrideInstanceData: boolean;
	bReplicatePlayback: boolean;
	DefaultInstanceData: UObject;
	BurnInInstance: LevelSequenceBurnIn;
	bShowBurnin: boolean;
	static GetDefaultObject(): LevelSequenceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceActor;
	ShowBurnin(): void;
	SetSequence(InSequence: LevelSequence): void;
	SetReplicatePlayback(ReplicatePlayback: boolean): void;
	SetBindingByTag(BindingTag: string,Actors: Actor[],bAllowBindingsFromAsset: boolean): void;
	SetBinding(Binding: MovieSceneObjectBindingID,Actors: Actor[],bAllowBindingsFromAsset: boolean): void;
	ResetBindings(): void;
	ResetBinding(Binding: MovieSceneObjectBindingID): void;
	RemoveBindingByTag(Tag: string,Actor: Actor): void;
	RemoveBinding(Binding: MovieSceneObjectBindingID,Actor: Actor): void;
	LoadSequence(): LevelSequence;
	HideBurnin(): void;
	GetSequencePlayer(): LevelSequencePlayer;
	GetSequence(): LevelSequence;
	FindNamedBindings(Tag: string): MovieSceneObjectBindingID[];
	FindNamedBinding(Tag: string): MovieSceneObjectBindingID;
	AddBindingByTag(BindingTag: string,Actor: Actor,bAllowBindingsFromAsset: boolean): void;
	AddBinding(Binding: MovieSceneObjectBindingID,Actor: Actor,bAllowBindingsFromAsset: boolean): void;
	static C(Other: UObject | any): LevelSequenceActor;
}

declare class LevelSequenceAnimSequenceLinkItem { 
	SkelTrackGuid: Guid;
	PathToAnimSequence: SoftObjectPath;
	bExportTransforms: boolean;
	bExportCurves: boolean;
	bRecordInWorldSpace: boolean;
	clone() : LevelSequenceAnimSequenceLinkItem;
	static C(Other: UObject | any): LevelSequenceAnimSequenceLinkItem;
}

declare class LevelSequenceAnimSequenceLink extends AssetUserData { 
	AnimSequenceLinks: LevelSequenceAnimSequenceLinkItem[];
	static Load(ResourceName: string): LevelSequenceAnimSequenceLink;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceAnimSequenceLink;
	static GetDefaultObject(): LevelSequenceAnimSequenceLink;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceAnimSequenceLink;
	static C(Other: UObject | any): LevelSequenceAnimSequenceLink;
}

declare class LevelSequenceDirector extends UObject { 
	Player: LevelSequencePlayer;
	static Load(ResourceName: string): LevelSequenceDirector;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceDirector;
	static GetDefaultObject(): LevelSequenceDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceDirector;
	OnCreated(): void;
	static C(Other: UObject | any): LevelSequenceDirector;
}

declare class LegacyLevelSequenceDirectorBlueprint extends Blueprint { 
	static Load(ResourceName: string): LegacyLevelSequenceDirectorBlueprint;
	static Find(Outer: UObject, ResourceName: string): LegacyLevelSequenceDirectorBlueprint;
	static GetDefaultObject(): LegacyLevelSequenceDirectorBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyLevelSequenceDirectorBlueprint;
	static C(Other: UObject | any): LegacyLevelSequenceDirectorBlueprint;
}

declare class LevelSequenceMediaController extends Actor { 
	Sequence: LevelSequenceActor;
	MediaComponent: MediaComponent;
	ServerStartTimeSeconds: number;
	static GetDefaultObject(): LevelSequenceMediaController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceMediaController;
	SynchronizeToServer(DesyncThresholdSeconds: number): void;
	Play(): void;
	OnRep_ServerStartTimeSeconds(): void;
	GetSequence(): LevelSequenceActor;
	GetMediaComponent(): MediaComponent;
	static C(Other: UObject | any): LevelSequenceMediaController;
}

declare class ActorFactory extends UObject { 
	DisplayName: string;
	MenuPriority: number;
	NewActorClassName: string;
	NewActorClass: UnrealEngineClass;
	bShowInEditorQuickMenu: boolean;
	bUseSurfaceOrientation: boolean;
	SpawnPositionOffset: Vector;
	static Load(ResourceName: string): ActorFactory;
	static Find(Outer: UObject, ResourceName: string): ActorFactory;
	static GetDefaultObject(): ActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactory;
	static C(Other: UObject | any): ActorFactory;
}

declare class ActorFactoryAmbientSound extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryAmbientSound;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAmbientSound;
	static GetDefaultObject(): ActorFactoryAmbientSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAmbientSound;
	static C(Other: UObject | any): ActorFactoryAmbientSound;
}

declare class ActorFactorySkeletalMesh extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkeletalMesh;
	static GetDefaultObject(): ActorFactorySkeletalMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkeletalMesh;
	static C(Other: UObject | any): ActorFactorySkeletalMesh;
}

declare class ActorFactoryAnimationAsset extends ActorFactorySkeletalMesh { 
	static Load(ResourceName: string): ActorFactoryAnimationAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAnimationAsset;
	static GetDefaultObject(): ActorFactoryAnimationAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAnimationAsset;
	static C(Other: UObject | any): ActorFactoryAnimationAsset;
}

declare class ActorFactoryAtmosphericFog extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryAtmosphericFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAtmosphericFog;
	static GetDefaultObject(): ActorFactoryAtmosphericFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAtmosphericFog;
	static C(Other: UObject | any): ActorFactoryAtmosphericFog;
}

declare class ActorFactoryStaticMesh extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryStaticMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryStaticMesh;
	static GetDefaultObject(): ActorFactoryStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryStaticMesh;
	static C(Other: UObject | any): ActorFactoryStaticMesh;
}

declare class ActorFactoryBasicShape extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): ActorFactoryBasicShape;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBasicShape;
	static GetDefaultObject(): ActorFactoryBasicShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBasicShape;
	static C(Other: UObject | any): ActorFactoryBasicShape;
}

declare class ActorFactoryBlueprint extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryBlueprint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBlueprint;
	static GetDefaultObject(): ActorFactoryBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBlueprint;
	static C(Other: UObject | any): ActorFactoryBlueprint;
}

declare class ActorFactoryBoxReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryBoxReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxReflectionCapture;
	static GetDefaultObject(): ActorFactoryBoxReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxReflectionCapture;
	static C(Other: UObject | any): ActorFactoryBoxReflectionCapture;
}

declare class ActorFactoryVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVolume;
	static GetDefaultObject(): ActorFactoryVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVolume;
	static C(Other: UObject | any): ActorFactoryVolume;
}

declare class ActorFactoryBoxVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactoryBoxVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxVolume;
	static GetDefaultObject(): ActorFactoryBoxVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxVolume;
	static C(Other: UObject | any): ActorFactoryBoxVolume;
}

declare class ActorFactoryCameraActor extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryCameraActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCameraActor;
	static GetDefaultObject(): ActorFactoryCameraActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCameraActor;
	static C(Other: UObject | any): ActorFactoryCameraActor;
}

declare class ActorFactoryCharacter extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryCharacter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCharacter;
	static GetDefaultObject(): ActorFactoryCharacter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCharacter;
	static C(Other: UObject | any): ActorFactoryCharacter;
}

declare class ActorFactoryClass extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryClass;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryClass;
	static GetDefaultObject(): ActorFactoryClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryClass;
	static C(Other: UObject | any): ActorFactoryClass;
}

declare class ActorFactoryCylinderVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactoryCylinderVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCylinderVolume;
	static GetDefaultObject(): ActorFactoryCylinderVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCylinderVolume;
	static C(Other: UObject | any): ActorFactoryCylinderVolume;
}

declare class ActorFactoryDeferredDecal extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDeferredDecal;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDeferredDecal;
	static GetDefaultObject(): ActorFactoryDeferredDecal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDeferredDecal;
	static C(Other: UObject | any): ActorFactoryDeferredDecal;
}

declare class ActorFactoryDirectionalLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDirectionalLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDirectionalLight;
	static GetDefaultObject(): ActorFactoryDirectionalLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDirectionalLight;
	static C(Other: UObject | any): ActorFactoryDirectionalLight;
}

declare class ActorFactoryEmitter extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryEmitter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmitter;
	static GetDefaultObject(): ActorFactoryEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmitter;
	static C(Other: UObject | any): ActorFactoryEmitter;
}

declare class ActorFactoryEmptyActor extends ActorFactory { 
	bVisualizeActor: boolean;
	static Load(ResourceName: string): ActorFactoryEmptyActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmptyActor;
	static GetDefaultObject(): ActorFactoryEmptyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmptyActor;
	static C(Other: UObject | any): ActorFactoryEmptyActor;
}

declare class ActorFactoryExponentialHeightFog extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryExponentialHeightFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryExponentialHeightFog;
	static GetDefaultObject(): ActorFactoryExponentialHeightFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryExponentialHeightFog;
	static C(Other: UObject | any): ActorFactoryExponentialHeightFog;
}

declare class ActorFactoryInteractiveFoliage extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): ActorFactoryInteractiveFoliage;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryInteractiveFoliage;
	static GetDefaultObject(): ActorFactoryInteractiveFoliage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryInteractiveFoliage;
	static C(Other: UObject | any): ActorFactoryInteractiveFoliage;
}

declare class ActorFactoryMatineeActor extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryMatineeActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryMatineeActor;
	static GetDefaultObject(): ActorFactoryMatineeActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryMatineeActor;
	static C(Other: UObject | any): ActorFactoryMatineeActor;
}

declare class ActorFactoryMovieScene extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryMovieScene;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryMovieScene;
	static GetDefaultObject(): ActorFactoryMovieScene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryMovieScene;
	static C(Other: UObject | any): ActorFactoryMovieScene;
}

declare class ActorFactoryNote extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryNote;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryNote;
	static GetDefaultObject(): ActorFactoryNote;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryNote;
	static C(Other: UObject | any): ActorFactoryNote;
}

declare class ActorFactoryPawn extends ActorFactoryEmptyActor { 
	static Load(ResourceName: string): ActorFactoryPawn;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPawn;
	static GetDefaultObject(): ActorFactoryPawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPawn;
	static C(Other: UObject | any): ActorFactoryPawn;
}

declare class ActorFactoryPhysicsAsset extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPhysicsAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPhysicsAsset;
	static GetDefaultObject(): ActorFactoryPhysicsAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPhysicsAsset;
	static C(Other: UObject | any): ActorFactoryPhysicsAsset;
}

declare class ActorFactoryPlanarReflection extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlanarReflection;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlanarReflection;
	static GetDefaultObject(): ActorFactoryPlanarReflection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlanarReflection;
	static C(Other: UObject | any): ActorFactoryPlanarReflection;
}

declare class ActorFactoryPlaneReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static GetDefaultObject(): ActorFactoryPlaneReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlaneReflectionCapture;
	static C(Other: UObject | any): ActorFactoryPlaneReflectionCapture;
}

declare class ActorFactoryPlayerStart extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlayerStart;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlayerStart;
	static GetDefaultObject(): ActorFactoryPlayerStart;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlayerStart;
	static C(Other: UObject | any): ActorFactoryPlayerStart;
}

declare class ActorFactoryPointLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPointLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPointLight;
	static GetDefaultObject(): ActorFactoryPointLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPointLight;
	static C(Other: UObject | any): ActorFactoryPointLight;
}

declare class ActorFactoryRectLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryRectLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryRectLight;
	static GetDefaultObject(): ActorFactoryRectLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryRectLight;
	static C(Other: UObject | any): ActorFactoryRectLight;
}

declare class ActorFactoryRuntimeVirtualTextureVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryRuntimeVirtualTextureVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryRuntimeVirtualTextureVolume;
	static GetDefaultObject(): ActorFactoryRuntimeVirtualTextureVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryRuntimeVirtualTextureVolume;
	static C(Other: UObject | any): ActorFactoryRuntimeVirtualTextureVolume;
}

declare class ActorFactorySkyAtmosphere extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkyAtmosphere;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyAtmosphere;
	static GetDefaultObject(): ActorFactorySkyAtmosphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkyAtmosphere;
	static C(Other: UObject | any): ActorFactorySkyAtmosphere;
}

declare class ActorFactorySkyLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkyLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyLight;
	static GetDefaultObject(): ActorFactorySkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkyLight;
	static C(Other: UObject | any): ActorFactorySkyLight;
}

declare class ActorFactorySphereReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySphereReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereReflectionCapture;
	static GetDefaultObject(): ActorFactorySphereReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereReflectionCapture;
	static C(Other: UObject | any): ActorFactorySphereReflectionCapture;
}

declare class ActorFactorySphereVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactorySphereVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereVolume;
	static GetDefaultObject(): ActorFactorySphereVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereVolume;
	static C(Other: UObject | any): ActorFactorySphereVolume;
}

declare class ActorFactorySpotLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySpotLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySpotLight;
	static GetDefaultObject(): ActorFactorySpotLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySpotLight;
	static C(Other: UObject | any): ActorFactorySpotLight;
}

declare class ActorFactoryTargetPoint extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTargetPoint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTargetPoint;
	static GetDefaultObject(): ActorFactoryTargetPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTargetPoint;
	static C(Other: UObject | any): ActorFactoryTargetPoint;
}

declare class ActorFactoryTextRender extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTextRender;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTextRender;
	static GetDefaultObject(): ActorFactoryTextRender;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTextRender;
	static C(Other: UObject | any): ActorFactoryTextRender;
}

declare class ActorFactoryTriggerBox extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerBox;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerBox;
	static GetDefaultObject(): ActorFactoryTriggerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerBox;
	static C(Other: UObject | any): ActorFactoryTriggerBox;
}

declare class ActorFactoryTriggerCapsule extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerCapsule;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerCapsule;
	static GetDefaultObject(): ActorFactoryTriggerCapsule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerCapsule;
	static C(Other: UObject | any): ActorFactoryTriggerCapsule;
}

declare class ActorFactoryTriggerSphere extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerSphere;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerSphere;
	static GetDefaultObject(): ActorFactoryTriggerSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerSphere;
	static C(Other: UObject | any): ActorFactoryTriggerSphere;
}

declare class ActorFactoryVectorFieldVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVectorFieldVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVectorFieldVolume;
	static GetDefaultObject(): ActorFactoryVectorFieldVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVectorFieldVolume;
	static C(Other: UObject | any): ActorFactoryVectorFieldVolume;
}

declare class ActorFactoryVolumetricCloud extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVolumetricCloud;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVolumetricCloud;
	static GetDefaultObject(): ActorFactoryVolumetricCloud;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVolumetricCloud;
	static C(Other: UObject | any): ActorFactoryVolumetricCloud;
}

declare class ActorGroupingUtils extends UObject { 
	static Load(ResourceName: string): ActorGroupingUtils;
	static Find(Outer: UObject, ResourceName: string): ActorGroupingUtils;
	static GetDefaultObject(): ActorGroupingUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorGroupingUtils;
	UnlockSelectedGroups(): void;
	UngroupSelected(): void;
	UngroupActors(ActorsToUngroup: Actor[]): void;
	static SetGroupingActive(bInGroupingActive: boolean): void;
	RemoveSelectedFromGroup(): void;
	LockSelectedGroups(): void;
	static IsGroupingActive(): boolean;
	GroupSelected(): void;
	GroupActors(ActorsToGroup: Actor[]): void;
	static Get(): ActorGroupingUtils;
	AddSelectedToGroup(): void;
	static C(Other: UObject | any): ActorGroupingUtils;
}

declare class BlendSpaceFactory1D extends Factory { 
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): BlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactory1D;
	static GetDefaultObject(): BlendSpaceFactory1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactory1D;
	static C(Other: UObject | any): BlendSpaceFactory1D;
}

declare class AimOffsetBlendSpaceFactory1D extends BlendSpaceFactory1D { 
	static Load(ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static GetDefaultObject(): AimOffsetBlendSpaceFactory1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactory1D;
	static C(Other: UObject | any): AimOffsetBlendSpaceFactory1D;
}

declare class BlendSpaceFactoryNew extends Factory { 
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): BlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactoryNew;
	static GetDefaultObject(): BlendSpaceFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactoryNew;
	static C(Other: UObject | any): BlendSpaceFactoryNew;
}

declare class AimOffsetBlendSpaceFactoryNew extends BlendSpaceFactoryNew { 
	static Load(ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static GetDefaultObject(): AimOffsetBlendSpaceFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactoryNew;
	static C(Other: UObject | any): AimOffsetBlendSpaceFactoryNew;
}

declare class AnalyticsPrivacySettings extends UObject { 
	bSendUsageData: boolean;
	static Load(ResourceName: string): AnalyticsPrivacySettings;
	static Find(Outer: UObject, ResourceName: string): AnalyticsPrivacySettings;
	static GetDefaultObject(): AnalyticsPrivacySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnalyticsPrivacySettings;
	static C(Other: UObject | any): AnalyticsPrivacySettings;
}

declare class AnimationBlueprintEditorOptions extends UObject { 
	bHideUnrelatedNodes: boolean;
	static Load(ResourceName: string): AnimationBlueprintEditorOptions;
	static Find(Outer: UObject, ResourceName: string): AnimationBlueprintEditorOptions;
	static GetDefaultObject(): AnimationBlueprintEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationBlueprintEditorOptions;
	static C(Other: UObject | any): AnimationBlueprintEditorOptions;
}

declare class AnimBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintFactory;
	static GetDefaultObject(): AnimBlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintFactory;
	static C(Other: UObject | any): AnimBlueprintFactory;
}

declare class AnimLayerInterfaceFactory extends AnimBlueprintFactory { 
	static Load(ResourceName: string): AnimLayerInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): AnimLayerInterfaceFactory;
	static GetDefaultObject(): AnimLayerInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimLayerInterfaceFactory;
	static C(Other: UObject | any): AnimLayerInterfaceFactory;
}

declare class ThumbnailRenderer extends UObject { 
	static Load(ResourceName: string): ThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ThumbnailRenderer;
	static GetDefaultObject(): ThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailRenderer;
	static C(Other: UObject | any): ThumbnailRenderer;
}

declare class DefaultSizedThumbnailRenderer extends ThumbnailRenderer { 
	DefaultSizeX: number;
	DefaultSizeY: number;
	static Load(ResourceName: string): DefaultSizedThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): DefaultSizedThumbnailRenderer;
	static GetDefaultObject(): DefaultSizedThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultSizedThumbnailRenderer;
	static C(Other: UObject | any): DefaultSizedThumbnailRenderer;
}

declare class AnimBlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): AnimBlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintThumbnailRenderer;
	static GetDefaultObject(): AnimBlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintThumbnailRenderer;
	static C(Other: UObject | any): AnimBlueprintThumbnailRenderer;
}

declare class AnimBoneCompressionSettingsFactory extends Factory { 
	static Load(ResourceName: string): AnimBoneCompressionSettingsFactory;
	static Find(Outer: UObject, ResourceName: string): AnimBoneCompressionSettingsFactory;
	static GetDefaultObject(): AnimBoneCompressionSettingsFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBoneCompressionSettingsFactory;
	static C(Other: UObject | any): AnimBoneCompressionSettingsFactory;
}

declare class AnimCompositeFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimCompositeFactory;
	static Find(Outer: UObject, ResourceName: string): AnimCompositeFactory;
	static GetDefaultObject(): AnimCompositeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompositeFactory;
	static C(Other: UObject | any): AnimCompositeFactory;
}

declare class AnimCurveCompressionSettingsFactory extends Factory { 
	static Load(ResourceName: string): AnimCurveCompressionSettingsFactory;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionSettingsFactory;
	static GetDefaultObject(): AnimCurveCompressionSettingsFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionSettingsFactory;
	static C(Other: UObject | any): AnimCurveCompressionSettingsFactory;
}

declare class AnimMontageFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimMontageFactory;
	static Find(Outer: UObject, ResourceName: string): AnimMontageFactory;
	static GetDefaultObject(): AnimMontageFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimMontageFactory;
	static C(Other: UObject | any): AnimMontageFactory;
}

declare class AnimSeqExportOption extends UObject { 
	bExportTransforms: boolean;
	bExportCurves: boolean;
	bRecordInWorldSpace: boolean;
	static Load(ResourceName: string): AnimSeqExportOption;
	static Find(Outer: UObject, ResourceName: string): AnimSeqExportOption;
	static GetDefaultObject(): AnimSeqExportOption;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSeqExportOption;
	static C(Other: UObject | any): AnimSeqExportOption;
}

declare class ExporterFBX extends Exporter { 
	static Load(ResourceName: string): ExporterFBX;
	static Find(Outer: UObject, ResourceName: string): ExporterFBX;
	static GetDefaultObject(): ExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExporterFBX;
	static C(Other: UObject | any): ExporterFBX;
}

declare class AnimSequenceExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): AnimSequenceExporterFBX;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceExporterFBX;
	static GetDefaultObject(): AnimSequenceExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceExporterFBX;
	static C(Other: UObject | any): AnimSequenceExporterFBX;
}

declare class AnimSequenceFactory extends Factory { 
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceFactory;
	static GetDefaultObject(): AnimSequenceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceFactory;
	static C(Other: UObject | any): AnimSequenceFactory;
}

declare class AnimSequenceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): AnimSequenceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceThumbnailRenderer;
	static GetDefaultObject(): AnimSequenceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceThumbnailRenderer;
	static C(Other: UObject | any): AnimSequenceThumbnailRenderer;
}

declare class AnimStreamableFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	static Load(ResourceName: string): AnimStreamableFactory;
	static Find(Outer: UObject, ResourceName: string): AnimStreamableFactory;
	static GetDefaultObject(): AnimStreamableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStreamableFactory;
	static C(Other: UObject | any): AnimStreamableFactory;
}

declare class AssetEditor extends UObject { 
	static Load(ResourceName: string): AssetEditor;
	static Find(Outer: UObject, ResourceName: string): AssetEditor;
	static GetDefaultObject(): AssetEditor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditor;
	static C(Other: UObject | any): AssetEditor;
}

declare class AssetEditorSubsystem extends EditorSubsystem { 
	OwnedAssetEditors: AssetEditor[];
	static Load(ResourceName: string): AssetEditorSubsystem;
	static Find(Outer: UObject, ResourceName: string): AssetEditorSubsystem;
	static GetDefaultObject(): AssetEditorSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditorSubsystem;
	OpenEditorForAssets(Assets: UObject[]): boolean;
	CloseAllEditorsForAsset(Asset: UObject): number;
	static C(Other: UObject | any): AssetEditorSubsystem;
}

declare class AssetEditorToolkitMenuContext extends UObject { 
	static Load(ResourceName: string): AssetEditorToolkitMenuContext;
	static Find(Outer: UObject, ResourceName: string): AssetEditorToolkitMenuContext;
	static GetDefaultObject(): AssetEditorToolkitMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditorToolkitMenuContext;
	static C(Other: UObject | any): AssetEditorToolkitMenuContext;
}

declare class IniStringValue { 
	Section: string;
	Key: string;
	Value: string;
	Filename: string;
	clone() : IniStringValue;
	static C(Other: UObject | any): IniStringValue;
}

declare class AssetGuideline extends AssetUserData { 
	Plugins: string[];
	ProjectSettings: IniStringValue[];
	GuidelineName: string;
	static Load(ResourceName: string): AssetGuideline;
	static Find(Outer: UObject, ResourceName: string): AssetGuideline;
	static GetDefaultObject(): AssetGuideline;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetGuideline;
	static C(Other: UObject | any): AssetGuideline;
}

declare class Commandlet extends UObject { 
	HelpDescription: string;
	HelpUsage: string;
	HelpWebLink: string;
	HelpParamNames: string[];
	HelpParamDescriptions: string[];
	IsServer: boolean;
	IsClient: boolean;
	IsEditor: boolean;
	LogToConsole: boolean;
	ShowErrorCount: boolean;
	ShowProgress: boolean;
	static Load(ResourceName: string): Commandlet;
	static Find(Outer: UObject, ResourceName: string): Commandlet;
	static GetDefaultObject(): Commandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Commandlet;
	static C(Other: UObject | any): Commandlet;
}

declare class AssetRegUtilCommandlet extends Commandlet { 
	static Load(ResourceName: string): AssetRegUtilCommandlet;
	static Find(Outer: UObject, ResourceName: string): AssetRegUtilCommandlet;
	static GetDefaultObject(): AssetRegUtilCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegUtilCommandlet;
	static C(Other: UObject | any): AssetRegUtilCommandlet;
}

declare class AssetRegistryDumpCommandlet extends Commandlet { 
	static Load(ResourceName: string): AssetRegistryDumpCommandlet;
	static Find(Outer: UObject, ResourceName: string): AssetRegistryDumpCommandlet;
	static GetDefaultObject(): AssetRegistryDumpCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistryDumpCommandlet;
	static C(Other: UObject | any): AssetRegistryDumpCommandlet;
}

declare class AudioMixerCommandlet extends Commandlet { 
	static Load(ResourceName: string): AudioMixerCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioMixerCommandlet;
	static GetDefaultObject(): AudioMixerCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioMixerCommandlet;
	static C(Other: UObject | any): AudioMixerCommandlet;
}

declare class AudioTestCommandlet extends Commandlet { 
	static Load(ResourceName: string): AudioTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioTestCommandlet;
	static GetDefaultObject(): AudioTestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioTestCommandlet;
	static C(Other: UObject | any): AudioTestCommandlet;
}

declare class AutoReimportManager extends UObject { 
	static Load(ResourceName: string): AutoReimportManager;
	static Find(Outer: UObject, ResourceName: string): AutoReimportManager;
	static GetDefaultObject(): AutoReimportManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutoReimportManager;
	static C(Other: UObject | any): AutoReimportManager;
}

declare class BaseWidgetBlueprint extends Blueprint { 
	WidgetTree: WidgetTree;
	static Load(ResourceName: string): BaseWidgetBlueprint;
	static Find(Outer: UObject, ResourceName: string): BaseWidgetBlueprint;
	static GetDefaultObject(): BaseWidgetBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseWidgetBlueprint;
	static C(Other: UObject | any): BaseWidgetBlueprint;
}

declare class BlendSpaceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): BlendSpaceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceThumbnailRenderer;
	static GetDefaultObject(): BlendSpaceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceThumbnailRenderer;
	static C(Other: UObject | any): BlendSpaceThumbnailRenderer;
}

declare class BlueprintFactory extends Factory { 
	ParentClass: UnrealEngineClass;
	static Load(ResourceName: string): BlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFactory;
	static GetDefaultObject(): BlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFactory;
	static C(Other: UObject | any): BlueprintFactory;
}

declare class BlueprintFunctionLibraryFactory extends BlueprintFactory { 
	static Load(ResourceName: string): BlueprintFunctionLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibraryFactory;
	static GetDefaultObject(): BlueprintFunctionLibraryFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibraryFactory;
	static C(Other: UObject | any): BlueprintFunctionLibraryFactory;
}

declare class BlueprintInterfaceFactory extends Factory { 
	static Load(ResourceName: string): BlueprintInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintInterfaceFactory;
	static GetDefaultObject(): BlueprintInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintInterfaceFactory;
	static C(Other: UObject | any): BlueprintInterfaceFactory;
}

declare class BlueprintMacroFactory extends BlueprintFactory { 
	static Load(ResourceName: string): BlueprintMacroFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintMacroFactory;
	static GetDefaultObject(): BlueprintMacroFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMacroFactory;
	static C(Other: UObject | any): BlueprintMacroFactory;
}

declare class BlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): BlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlueprintThumbnailRenderer;
	static GetDefaultObject(): BlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintThumbnailRenderer;
	static C(Other: UObject | any): BlueprintThumbnailRenderer;
}

declare class BrushEditingSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): BrushEditingSubsystem;
	static Find(Outer: UObject, ResourceName: string): BrushEditingSubsystem;
	static GetDefaultObject(): BrushEditingSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushEditingSubsystem;
	static C(Other: UObject | any): BrushEditingSubsystem;
}

declare class CameraAnimFactory extends Factory { 
	static Load(ResourceName: string): CameraAnimFactory;
	static Find(Outer: UObject, ResourceName: string): CameraAnimFactory;
	static GetDefaultObject(): CameraAnimFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnimFactory;
	static C(Other: UObject | any): CameraAnimFactory;
}

declare class CanvasRenderTarget2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static GetDefaultObject(): CanvasRenderTarget2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2DFactoryNew;
	static C(Other: UObject | any): CanvasRenderTarget2DFactoryNew;
}

declare class CascadeOptions extends UObject { 
	bShowModuleDump: boolean;
	BackgroundColor: Color;
	bUseSubMenus: boolean;
	bUseSpaceBarReset: boolean;
	bUseSpaceBarResetInLevel: boolean;
	Empty_Background: Color;
	Emitter_Background: Color;
	Emitter_Unselected: Color;
	Emitter_Selected: Color;
	ModuleColor_General_Unselected: Color;
	ModuleColor_General_Selected: Color;
	ModuleColor_TypeData_Unselected: Color;
	ModuleColor_TypeData_Selected: Color;
	ModuleColor_Beam_Unselected: Color;
	ModuleColor_Beam_Selected: Color;
	ModuleColor_Trail_Unselected: Color;
	ModuleColor_Trail_Selected: Color;
	ModuleColor_Spawn_Unselected: Color;
	ModuleColor_Spawn_Selected: Color;
	ModuleColor_Light_Unselected: Color;
	ModuleColor_Light_Selected: Color;
	ModuleColor_SubUV_Unselected: Color;
	ModuleColor_SubUV_Selected: Color;
	ModuleColor_Required_Unselected: Color;
	ModuleColor_Required_Selected: Color;
	ModuleColor_Event_Unselected: Color;
	ModuleColor_Event_Selected: Color;
	bShowGrid: boolean;
	GridColor_Hi: Color;
	GridColor_Low: Color;
	GridPerspectiveSize: number;
	bShowParticleCounts: boolean;
	bShowParticleEvents: boolean;
	bShowParticleTimes: boolean;
	bShowParticleDistance: boolean;
	bShowParticleMemory: boolean;
	ParticleMemoryUpdateTime: number;
	bShowFloor: boolean;
	FloorMesh: string;
	FloorPosition: Vector;
	FloorRotation: Rotator;
	FloorScale: number;
	FloorScale3D: Vector;
	ShowPPFlags: number;
	bUseSlimCascadeDraw: boolean;
	SlimCascadeDrawHeight: number;
	bCenterCascadeModuleText: boolean;
	Cascade_MouseMoveThreshold: number;
	MotionModeRadius: number;
	static Load(ResourceName: string): CascadeOptions;
	static Find(Outer: UObject, ResourceName: string): CascadeOptions;
	static GetDefaultObject(): CascadeOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CascadeOptions;
	static C(Other: UObject | any): CascadeOptions;
}

declare class ChaosPhysicalMaterialFactory extends Factory { 
	static Load(ResourceName: string): ChaosPhysicalMaterialFactory;
	static Find(Outer: UObject, ResourceName: string): ChaosPhysicalMaterialFactory;
	static GetDefaultObject(): ChaosPhysicalMaterialFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosPhysicalMaterialFactory;
	static C(Other: UObject | any): ChaosPhysicalMaterialFactory;
}

declare class ChunkDependency { 
	ChunkID: number;
	ParentChunkID: number;
	clone() : ChunkDependency;
	static C(Other: UObject | any): ChunkDependency;
}

declare class ChunkDependencyInfo extends UObject { 
	DependencyArray: ChunkDependency[];
	static Load(ResourceName: string): ChunkDependencyInfo;
	static Find(Outer: UObject, ResourceName: string): ChunkDependencyInfo;
	static GetDefaultObject(): ChunkDependencyInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChunkDependencyInfo;
	static C(Other: UObject | any): ChunkDependencyInfo;
}

declare class ClassThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): ClassThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ClassThumbnailRenderer;
	static GetDefaultObject(): ClassThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassThumbnailRenderer;
	static C(Other: UObject | any): ClassThumbnailRenderer;
}

declare type EClassViewerDeveloperType = 'CVDT_None' | 'CVDT_CurrentUser' | 'CVDT_All' | 'CVDT_Max';
declare var EClassViewerDeveloperType : { CVDT_None:'CVDT_None',CVDT_CurrentUser:'CVDT_CurrentUser',CVDT_All:'CVDT_All',CVDT_Max:'CVDT_Max', };
declare class ClassViewerSettings extends UObject { 
	AllowedClasses: string[];
	DisplayInternalClasses: boolean;
	DeveloperFolderType: EClassViewerDeveloperType;
	static Load(ResourceName: string): ClassViewerSettings;
	static Find(Outer: UObject, ResourceName: string): ClassViewerSettings;
	static GetDefaultObject(): ClassViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassViewerSettings;
	static C(Other: UObject | any): ClassViewerSettings;
}

declare class CompileAllBlueprintsCommandlet extends Commandlet { 
	static Load(ResourceName: string): CompileAllBlueprintsCommandlet;
	static Find(Outer: UObject, ResourceName: string): CompileAllBlueprintsCommandlet;
	static GetDefaultObject(): CompileAllBlueprintsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompileAllBlueprintsCommandlet;
	static C(Other: UObject | any): CompileAllBlueprintsCommandlet;
}

declare class CompositeCurveTableFactory extends Factory { 
	static Load(ResourceName: string): CompositeCurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): CompositeCurveTableFactory;
	static GetDefaultObject(): CompositeCurveTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeCurveTableFactory;
	static C(Other: UObject | any): CompositeCurveTableFactory;
}

declare class DataTableFactory extends Factory { 
	struct: ScriptStruct;
	static Load(ResourceName: string): DataTableFactory;
	static Find(Outer: UObject, ResourceName: string): DataTableFactory;
	static GetDefaultObject(): DataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFactory;
	static C(Other: UObject | any): DataTableFactory;
}

declare class CompositeDataTableFactory extends DataTableFactory { 
	static Load(ResourceName: string): CompositeDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): CompositeDataTableFactory;
	static GetDefaultObject(): CompositeDataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeDataTableFactory;
	static C(Other: UObject | any): CompositeDataTableFactory;
}

declare class CompressAnimationsCommandlet extends Commandlet { 
	static Load(ResourceName: string): CompressAnimationsCommandlet;
	static Find(Outer: UObject, ResourceName: string): CompressAnimationsCommandlet;
	static GetDefaultObject(): CompressAnimationsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressAnimationsCommandlet;
	static C(Other: UObject | any): CompressAnimationsCommandlet;
}

declare class EditorBrushBuilder extends BrushBuilder { 
	static Load(ResourceName: string): EditorBrushBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorBrushBuilder;
	static GetDefaultObject(): EditorBrushBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorBrushBuilder;
	static C(Other: UObject | any): EditorBrushBuilder;
}

declare class ConeBuilder extends EditorBrushBuilder { 
	Z: number;
	CapZ: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	static Load(ResourceName: string): ConeBuilder;
	static Find(Outer: UObject, ResourceName: string): ConeBuilder;
	static GetDefaultObject(): ConeBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConeBuilder;
	static C(Other: UObject | any): ConeBuilder;
}

declare class ContentBrowserSettings extends UObject { 
	NumObjectsToLoadBeforeWarning: number;
	bOpenSourcesPanelByDefault: boolean;
	RealTimeThumbnails: boolean;
	DisplayFolders: boolean;
	DisplayEmptyFolders: boolean;
	FilterRecursively: boolean;
	NumObjectsInRecentList: number;
	bShowFullCollectionNameInToolTip: boolean;
	bEnableRealtimeMaterialInstanceThumbnails: boolean;
	DisplayEngineFolder: boolean;
	DisplayDevelopersFolder: boolean;
	DisplayL10NFolder: boolean;
	DisplayPluginFolders: boolean;
	DisplayFavorites: boolean;
	DockCollections: boolean;
	DisplayCppFolders: boolean;
	IncludeClassNames: boolean;
	IncludeAssetPaths: boolean;
	IncludeCollectionNames: boolean;
	static Load(ResourceName: string): ContentBrowserSettings;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserSettings;
	static GetDefaultObject(): ContentBrowserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserSettings;
	static C(Other: UObject | any): ContentBrowserSettings;
}

declare class ConvertLevelsToExternalActorsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ConvertLevelsToExternalActorsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ConvertLevelsToExternalActorsCommandlet;
	static GetDefaultObject(): ConvertLevelsToExternalActorsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConvertLevelsToExternalActorsCommandlet;
	static C(Other: UObject | any): ConvertLevelsToExternalActorsCommandlet;
}

declare class CookCommandlet extends Commandlet { 
	FullGCAssetClassNames: string[];
	static Load(ResourceName: string): CookCommandlet;
	static Find(Outer: UObject, ResourceName: string): CookCommandlet;
	static GetDefaultObject(): CookCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookCommandlet;
	static C(Other: UObject | any): CookCommandlet;
}

declare type ECookProgressDisplayMode = 'Nothing' | 'RemainingPackages' | 'PackageNames' | 'NamesAndRemainingPackages' | 'Max' | 'ECookProgressDisplayMode_MAX';
declare var ECookProgressDisplayMode : { Nothing:'Nothing',RemainingPackages:'RemainingPackages',PackageNames:'PackageNames',NamesAndRemainingPackages:'NamesAndRemainingPackages',Max:'Max',ECookProgressDisplayMode_MAX:'ECookProgressDisplayMode_MAX', };
declare type EBlueprintComponentDataCookingMethod = 'Disabled' | 'AllBlueprints' | 'EnabledBlueprintsOnly' | 'EBlueprintComponentDataCookingMethod_MAX';
declare var EBlueprintComponentDataCookingMethod : { Disabled:'Disabled',AllBlueprints:'AllBlueprints',EnabledBlueprintsOnly:'EnabledBlueprintsOnly',EBlueprintComponentDataCookingMethod_MAX:'EBlueprintComponentDataCookingMethod_MAX', };
declare class CookerSettings extends DeveloperSettings { 
	bEnableCookOnTheSide: boolean;
	bEnableBuildDDCInBackground: boolean;
	bIterativeCookingForLaunchOn: boolean;
	bIterativeCookingForFileCookContent: boolean;
	bCookOnTheFlyForLaunchOn: boolean;
	CookProgressDisplayMode: ECookProgressDisplayMode;
	bIgnoreIniSettingsOutOfDateForIteration: boolean;
	bIgnoreScriptPackagesOutOfDateForIteration: boolean;
	bCompileBlueprintsInDevelopmentMode: boolean;
	BlueprintComponentDataCookingMethod: EBlueprintComponentDataCookingMethod;
	ClassesExcludedOnDedicatedServer: string[];
	ModulesExcludedOnDedicatedServer: string[];
	ClassesExcludedOnDedicatedClient: string[];
	ModulesExcludedOnDedicatedClient: string[];
	VersionedIntRValues: string[];
	DefaultPVRTCQuality: number;
	DefaultASTCQualityBySpeed: number;
	DefaultASTCQualityBySize: number;
	bAllowCookedDataInEditorBuilds: boolean;
	bCookBlueprintComponentTemplateData: boolean;
	static Load(ResourceName: string): CookerSettings;
	static Find(Outer: UObject, ResourceName: string): CookerSettings;
	static GetDefaultObject(): CookerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerSettings;
	static C(Other: UObject | any): CookerSettings;
}

declare class CookGlobalShadersCommandlet extends Commandlet { 
	static Load(ResourceName: string): CookGlobalShadersCommandlet;
	static Find(Outer: UObject, ResourceName: string): CookGlobalShadersCommandlet;
	static GetDefaultObject(): CookGlobalShadersCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookGlobalShadersCommandlet;
	static C(Other: UObject | any): CookGlobalShadersCommandlet;
}

declare class CookGlobalShadersDeviceHelperBase extends UObject { 
	static Load(ResourceName: string): CookGlobalShadersDeviceHelperBase;
	static Find(Outer: UObject, ResourceName: string): CookGlobalShadersDeviceHelperBase;
	static GetDefaultObject(): CookGlobalShadersDeviceHelperBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookGlobalShadersDeviceHelperBase;
	static C(Other: UObject | any): CookGlobalShadersDeviceHelperBase;
}

declare class CookGlobalShadersDeviceHelperStaged extends CookGlobalShadersDeviceHelperBase { 
	static Load(ResourceName: string): CookGlobalShadersDeviceHelperStaged;
	static Find(Outer: UObject, ResourceName: string): CookGlobalShadersDeviceHelperStaged;
	static GetDefaultObject(): CookGlobalShadersDeviceHelperStaged;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookGlobalShadersDeviceHelperStaged;
	static C(Other: UObject | any): CookGlobalShadersDeviceHelperStaged;
}

declare class CookOnTheFlyServer extends UObject { 
	static Load(ResourceName: string): CookOnTheFlyServer;
	static Find(Outer: UObject, ResourceName: string): CookOnTheFlyServer;
	static GetDefaultObject(): CookOnTheFlyServer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookOnTheFlyServer;
	static C(Other: UObject | any): CookOnTheFlyServer;
}

declare class CrashReporterSettings extends UObject { 
	UploadSymbolsPath: string;
	DownstreamStorage: string;
	RemoteStorage: string[];
	static Load(ResourceName: string): CrashReporterSettings;
	static Find(Outer: UObject, ResourceName: string): CrashReporterSettings;
	static GetDefaultObject(): CrashReporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReporterSettings;
	static C(Other: UObject | any): CrashReporterSettings;
}

declare class CrashReportsPrivacySettings extends UObject { 
	bSendUnattendedBugReports: boolean;
	static Load(ResourceName: string): CrashReportsPrivacySettings;
	static Find(Outer: UObject, ResourceName: string): CrashReportsPrivacySettings;
	static GetDefaultObject(): CrashReportsPrivacySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReportsPrivacySettings;
	static C(Other: UObject | any): CrashReportsPrivacySettings;
}

declare type ECSVImportType = 'ECSV_DataTable' | 'ECSV_CurveTable' | 'ECSV_CurveFloat' | 'ECSV_CurveVector' | 'ECSV_CurveLinearColor' | 'ECSV_MAX';
declare var ECSVImportType : { ECSV_DataTable:'ECSV_DataTable',ECSV_CurveTable:'ECSV_CurveTable',ECSV_CurveFloat:'ECSV_CurveFloat',ECSV_CurveVector:'ECSV_CurveVector',ECSV_CurveLinearColor:'ECSV_CurveLinearColor',ECSV_MAX:'ECSV_MAX', };
declare class CSVImportSettings { 
	ImportRowStruct: ScriptStruct;
	ImportType: ECSVImportType;
	ImportCurveInterpMode: ERichCurveInterpMode;
	clone() : CSVImportSettings;
	static C(Other: UObject | any): CSVImportSettings;
}

declare class CSVImportFactory extends Factory { 
	AutomatedImportSettings: CSVImportSettings;
	DataTableImportOptions: DataTable;
	static Load(ResourceName: string): CSVImportFactory;
	static Find(Outer: UObject, ResourceName: string): CSVImportFactory;
	static GetDefaultObject(): CSVImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CSVImportFactory;
	static C(Other: UObject | any): CSVImportFactory;
}

declare class CubeBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	Z: number;
	WallThickness: number;
	GroupName: string;
	Hollow: boolean;
	Tessellated: boolean;
	static Load(ResourceName: string): CubeBuilder;
	static Find(Outer: UObject, ResourceName: string): CubeBuilder;
	static GetDefaultObject(): CubeBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CubeBuilder;
	static C(Other: UObject | any): CubeBuilder;
}

declare class CurvedStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepHeight: number;
	StepWidth: number;
	AngleOfCurve: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	CounterClockwise: boolean;
	static Load(ResourceName: string): CurvedStairBuilder;
	static Find(Outer: UObject, ResourceName: string): CurvedStairBuilder;
	static GetDefaultObject(): CurvedStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurvedStairBuilder;
	static C(Other: UObject | any): CurvedStairBuilder;
}

declare class CurveEdOptions extends UObject { 
	MinViewRange: number;
	MaxViewRange: number;
	BackgroundColor: LinearColor;
	LabelColor: LinearColor;
	SelectedLabelColor: LinearColor;
	GridColor: LinearColor;
	GridTextColor: LinearColor;
	LabelBlockBkgColor: LinearColor;
	SelectedKeyColor: LinearColor;
	static Load(ResourceName: string): CurveEdOptions;
	static Find(Outer: UObject, ResourceName: string): CurveEdOptions;
	static GetDefaultObject(): CurveEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdOptions;
	static C(Other: UObject | any): CurveEdOptions;
}

declare class CurveFactory extends Factory { 
	CurveClass: UnrealEngineClass;
	static Load(ResourceName: string): CurveFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFactory;
	static GetDefaultObject(): CurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFactory;
	static C(Other: UObject | any): CurveFactory;
}

declare class CurveFloatFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveFloatFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFloatFactory;
	static GetDefaultObject(): CurveFloatFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFloatFactory;
	static C(Other: UObject | any): CurveFloatFactory;
}

declare class CurveLinearColorFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveLinearColorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorFactory;
	static GetDefaultObject(): CurveLinearColorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorFactory;
	static C(Other: UObject | any): CurveLinearColorFactory;
}

declare class CurveVectorFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveVectorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveVectorFactory;
	static GetDefaultObject(): CurveVectorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveVectorFactory;
	static C(Other: UObject | any): CurveVectorFactory;
}

declare class CurveImportFactory extends Factory { 
	static Load(ResourceName: string): CurveImportFactory;
	static Find(Outer: UObject, ResourceName: string): CurveImportFactory;
	static GetDefaultObject(): CurveImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveImportFactory;
	static C(Other: UObject | any): CurveImportFactory;
}

declare class CurveLinearColorAtlasFactory extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): CurveLinearColorAtlasFactory;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorAtlasFactory;
	static GetDefaultObject(): CurveLinearColorAtlasFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorAtlasFactory;
	static C(Other: UObject | any): CurveLinearColorAtlasFactory;
}

declare class CurveLinearColorThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): CurveLinearColorThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorThumbnailRenderer;
	static GetDefaultObject(): CurveLinearColorThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorThumbnailRenderer;
	static C(Other: UObject | any): CurveLinearColorThumbnailRenderer;
}

declare class CylinderBuilder extends EditorBrushBuilder { 
	Z: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	static Load(ResourceName: string): CylinderBuilder;
	static Find(Outer: UObject, ResourceName: string): CylinderBuilder;
	static GetDefaultObject(): CylinderBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CylinderBuilder;
	static C(Other: UObject | any): CylinderBuilder;
}

declare class DataAssetFactory extends Factory { 
	DataAssetClass: UnrealEngineClass;
	static Load(ResourceName: string): DataAssetFactory;
	static Find(Outer: UObject, ResourceName: string): DataAssetFactory;
	static GetDefaultObject(): DataAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataAssetFactory;
	static C(Other: UObject | any): DataAssetFactory;
}

declare class DDCCleanupCommandlet extends Commandlet { 
	static Load(ResourceName: string): DDCCleanupCommandlet;
	static Find(Outer: UObject, ResourceName: string): DDCCleanupCommandlet;
	static GetDefaultObject(): DDCCleanupCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DDCCleanupCommandlet;
	static C(Other: UObject | any): DDCCleanupCommandlet;
}

declare class DebugSkelMeshComponent extends SkeletalMeshComponent { 
	bRenderRawSkeleton: boolean;
	bDrawMesh: boolean;
	bShowBoneNames: boolean;
	bDrawBoneInfluences: boolean;
	bDrawMorphTargetVerts: boolean;
	bDrawNormals: boolean;
	bDrawTangents: boolean;
	bDrawBinormals: boolean;
	bDrawSockets: boolean;
	bSkeletonSocketsVisible: boolean;
	bMeshSocketsVisible: boolean;
	bDisplayRawAnimation: boolean;
	bDisplayNonRetargetedPose: boolean;
	bDisplayAdditiveBasePose: boolean;
	bDisplayBakedAnimation: boolean;
	bDisplaySourceAnimation: boolean;
	bDisplayBound: boolean;
	bDisplayVertexColors: boolean;
	bPreviewRootMotion: boolean;
	bShowClothData: boolean;
	MinClothPropertyView: number;
	MaxClothPropertyView: number;
	ClothMeshOpacity: number;
	bClothFlipNormal: boolean;
	bClothCullBackface: boolean;
	bRequiredBonesUpToDateDuringTick: boolean;
	BonesOfInterest: number[];
	MorphTargetOfInterests: MorphTarget[];
	SkelMaterials: MaterialInterface[];
	PreviewInstance: AnimPreviewInstance;
	SavedAnimScriptInstance: AnimInstance;
	bIsUsingInGameBounds: boolean;
	bIsUsingPreSkinnedBounds: boolean;
	bPerformSingleClothingTick: boolean;
	bPauseClothingSimulationWithAnim: boolean;
	static Load(ResourceName: string): DebugSkelMeshComponent;
	static Find(Outer: UObject, ResourceName: string): DebugSkelMeshComponent;
	static GetDefaultObject(): DebugSkelMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugSkelMeshComponent;
	static C(Other: UObject | any): DebugSkelMeshComponent;
}

declare class DEditorParameterValue extends UObject { 
	bOverride: boolean;
	ParameterInfo: MaterialParameterInfo;
	ExpressionId: Guid;
	SortPriority: number;
	static Load(ResourceName: string): DEditorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorParameterValue;
	static GetDefaultObject(): DEditorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorParameterValue;
	static C(Other: UObject | any): DEditorParameterValue;
}

declare class DFontParameters { 
	FontValue: Font;
	FontPage: number;
	clone() : DFontParameters;
	static C(Other: UObject | any): DFontParameters;
}

declare class DEditorFontParameterValue extends DEditorParameterValue { 
	ParameterValue: DFontParameters;
	static Load(ResourceName: string): DEditorFontParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorFontParameterValue;
	static GetDefaultObject(): DEditorFontParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorFontParameterValue;
	static C(Other: UObject | any): DEditorFontParameterValue;
}

declare class DEditorMaterialLayersParameterValue extends DEditorParameterValue { 
	ParameterValue: MaterialLayersFunctions;
	static Load(ResourceName: string): DEditorMaterialLayersParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorMaterialLayersParameterValue;
	static GetDefaultObject(): DEditorMaterialLayersParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorMaterialLayersParameterValue;
	static C(Other: UObject | any): DEditorMaterialLayersParameterValue;
}

declare class DEditorRuntimeVirtualTextureParameterValue extends DEditorParameterValue { 
	ParameterValue: RuntimeVirtualTexture;
	static Load(ResourceName: string): DEditorRuntimeVirtualTextureParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorRuntimeVirtualTextureParameterValue;
	static GetDefaultObject(): DEditorRuntimeVirtualTextureParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorRuntimeVirtualTextureParameterValue;
	static C(Other: UObject | any): DEditorRuntimeVirtualTextureParameterValue;
}

declare class ScalarParameterAtlasData { 
	bIsUsedAsAtlasPosition: boolean;
	Curve: CurveLinearColor;
	Atlas: CurveLinearColorAtlas;
	clone() : ScalarParameterAtlasData;
	static C(Other: UObject | any): ScalarParameterAtlasData;
}

declare class DEditorScalarParameterValue extends DEditorParameterValue { 
	ParameterValue: number;
	AtlasData: ScalarParameterAtlasData;
	static Load(ResourceName: string): DEditorScalarParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorScalarParameterValue;
	static GetDefaultObject(): DEditorScalarParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorScalarParameterValue;
	static C(Other: UObject | any): DEditorScalarParameterValue;
}

declare class DComponentMaskParameter { 
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	clone() : DComponentMaskParameter;
	static C(Other: UObject | any): DComponentMaskParameter;
}

declare class DEditorStaticComponentMaskParameterValue extends DEditorParameterValue { 
	ParameterValue: DComponentMaskParameter;
	static Load(ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static GetDefaultObject(): DEditorStaticComponentMaskParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticComponentMaskParameterValue;
	static C(Other: UObject | any): DEditorStaticComponentMaskParameterValue;
}

declare class DEditorStaticSwitchParameterValue extends DEditorParameterValue { 
	ParameterValue: boolean;
	static Load(ResourceName: string): DEditorStaticSwitchParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticSwitchParameterValue;
	static GetDefaultObject(): DEditorStaticSwitchParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticSwitchParameterValue;
	static C(Other: UObject | any): DEditorStaticSwitchParameterValue;
}

declare class DEditorTextureParameterValue extends DEditorParameterValue { 
	ParameterValue: Texture;
	ChannelNames: ParameterChannelNames;
	static Load(ResourceName: string): DEditorTextureParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorTextureParameterValue;
	static GetDefaultObject(): DEditorTextureParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorTextureParameterValue;
	static C(Other: UObject | any): DEditorTextureParameterValue;
}

declare class DEditorVectorParameterValue extends DEditorParameterValue { 
	ParameterValue: LinearColor;
	bIsUsedAsChannelMask: boolean;
	ChannelNames: ParameterChannelNames;
	static Load(ResourceName: string): DEditorVectorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorVectorParameterValue;
	static GetDefaultObject(): DEditorVectorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorVectorParameterValue;
	static C(Other: UObject | any): DEditorVectorParameterValue;
}

declare class DerivedDataCacheCommandlet extends Commandlet { 
	static Load(ResourceName: string): DerivedDataCacheCommandlet;
	static Find(Outer: UObject, ResourceName: string): DerivedDataCacheCommandlet;
	static GetDefaultObject(): DerivedDataCacheCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DerivedDataCacheCommandlet;
	static C(Other: UObject | any): DerivedDataCacheCommandlet;
}

declare class DiffAssetRegistriesCommandlet extends Commandlet { 
	AssetRegistrySearchPath: string[];
	P4Repository: string;
	P4EngineBasePath: string;
	P4EngineAssetPath: string;
	P4GameBasePath: string;
	P4GameAssetPath: string;
	RegexBranchCL: string;
	static Load(ResourceName: string): DiffAssetRegistriesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffAssetRegistriesCommandlet;
	static GetDefaultObject(): DiffAssetRegistriesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffAssetRegistriesCommandlet;
	static C(Other: UObject | any): DiffAssetRegistriesCommandlet;
}

declare class DiffAssetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): DiffAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffAssetsCommandlet;
	static GetDefaultObject(): DiffAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffAssetsCommandlet;
	static C(Other: UObject | any): DiffAssetsCommandlet;
}

declare class DiffFilesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DiffFilesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffFilesCommandlet;
	static GetDefaultObject(): DiffFilesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffFilesCommandlet;
	static C(Other: UObject | any): DiffFilesCommandlet;
}

declare class DiffPackagesCommandlet extends Commandlet { 
	Packages: Package;
	static Load(ResourceName: string): DiffPackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffPackagesCommandlet;
	static GetDefaultObject(): DiffPackagesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffPackagesCommandlet;
	static C(Other: UObject | any): DiffPackagesCommandlet;
}

declare class DumpBlueprintsInfoCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpBlueprintsInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpBlueprintsInfoCommandlet;
	static GetDefaultObject(): DumpBlueprintsInfoCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpBlueprintsInfoCommandlet;
	static C(Other: UObject | any): DumpBlueprintsInfoCommandlet;
}

declare class DumpHiddenCategoriesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpHiddenCategoriesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpHiddenCategoriesCommandlet;
	static GetDefaultObject(): DumpHiddenCategoriesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpHiddenCategoriesCommandlet;
	static C(Other: UObject | any): DumpHiddenCategoriesCommandlet;
}

declare type ECommentBoxMode = 'GroupMovement' | 'NoGroupMovement' | 'ECommentBoxMode_MAX';
declare var ECommentBoxMode : { GroupMovement:'GroupMovement',NoGroupMovement:'NoGroupMovement',ECommentBoxMode_MAX:'ECommentBoxMode_MAX', };
declare class EdGraphNode_Comment extends EdGraphNode { 
	CommentColor: LinearColor;
	FontSize: number;
	bCommentBubbleVisible_InDetailsPanel: boolean;
	bColorCommentBubble: boolean;
	MoveMode: ECommentBoxMode;
	CommentDepth: number;
	static Load(ResourceName: string): EdGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Comment;
	static GetDefaultObject(): EdGraphNode_Comment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Comment;
	static C(Other: UObject | any): EdGraphNode_Comment;
}

declare class EditorActorFolders extends UObject { 
	static Load(ResourceName: string): EditorActorFolders;
	static Find(Outer: UObject, ResourceName: string): EditorActorFolders;
	static GetDefaultObject(): EditorActorFolders;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorActorFolders;
	static C(Other: UObject | any): EditorActorFolders;
}

declare class EditorAnimBaseObj extends UObject { 
	static Load(ResourceName: string): EditorAnimBaseObj;
	static Find(Outer: UObject, ResourceName: string): EditorAnimBaseObj;
	static GetDefaultObject(): EditorAnimBaseObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimBaseObj;
	static C(Other: UObject | any): EditorAnimBaseObj;
}

declare class EditorAnimCompositeSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	static Load(ResourceName: string): EditorAnimCompositeSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCompositeSegment;
	static GetDefaultObject(): EditorAnimCompositeSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCompositeSegment;
	static C(Other: UObject | any): EditorAnimCompositeSegment;
}

declare class EditorAnimCurveBoneLinks extends UObject { 
	CurveName: SmartName;
	ConnectedBones: BoneReference[];
	MaxLOD: number;
	static Load(ResourceName: string): EditorAnimCurveBoneLinks;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCurveBoneLinks;
	static GetDefaultObject(): EditorAnimCurveBoneLinks;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCurveBoneLinks;
	static C(Other: UObject | any): EditorAnimCurveBoneLinks;
}

declare class EditorAnimSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	static Load(ResourceName: string): EditorAnimSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimSegment;
	static GetDefaultObject(): EditorAnimSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimSegment;
	static C(Other: UObject | any): EditorAnimSegment;
}

declare class EditorCompositeSection extends EditorAnimBaseObj { 
	CompositeSection: CompositeSection;
	static Load(ResourceName: string): EditorCompositeSection;
	static Find(Outer: UObject, ResourceName: string): EditorCompositeSection;
	static GetDefaultObject(): EditorCompositeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorCompositeSection;
	static C(Other: UObject | any): EditorCompositeSection;
}

declare type EWindowMode = 'Fullscreen' | 'WindowedFullscreen' | 'Windowed' | 'EWindowMode_MAX';
declare var EWindowMode : { Fullscreen:'Fullscreen',WindowedFullscreen:'WindowedFullscreen',Windowed:'Windowed',EWindowMode_MAX:'EWindowMode_MAX', };
declare class GameUserSettings extends UObject { 
	bUseVSync: boolean;
	bUseDynamicResolution: boolean;
	ResolutionSizeX: any;
	ResolutionSizeY: any;
	LastUserConfirmedResolutionSizeX: any;
	LastUserConfirmedResolutionSizeY: any;
	WindowPosX: number;
	WindowPosY: number;
	FullscreenMode: number;
	LastConfirmedFullscreenMode: number;
	PreferredFullscreenMode: number;
	Version: any;
	AudioQualityLevel: number;
	LastConfirmedAudioQualityLevel: number;
	FrameRateLimit: number;
	DesiredScreenWidth: number;
	bUseDesiredScreenHeight: boolean;
	DesiredScreenHeight: number;
	LastUserConfirmedDesiredScreenWidth: number;
	LastUserConfirmedDesiredScreenHeight: number;
	LastRecommendedScreenWidth: number;
	LastRecommendedScreenHeight: number;
	LastCPUBenchmarkResult: number;
	LastGPUBenchmarkResult: number;
	LastCPUBenchmarkSteps: number[];
	LastGPUBenchmarkSteps: number[];
	LastGPUBenchmarkMultiplier: number;
	bUseHDRDisplayOutput: boolean;
	HDRDisplayOutputNits: number;
	OnGameUserSettingsUINeedsUpdate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameUserSettings;
	static Find(Outer: UObject, ResourceName: string): GameUserSettings;
	static GetDefaultObject(): GameUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameUserSettings;
	ValidateSettings(): void;
	SupportsHDRDisplayOutput(): boolean;
	SetVSyncEnabled(bEnable: boolean): void;
	SetVisualEffectQuality(Value: number): void;
	SetViewDistanceQuality(Value: number): void;
	SetToDefaults(): void;
	SetTextureQuality(Value: number): void;
	SetShadowQuality(Value: number): void;
	SetShadingQuality(Value: number): void;
	SetScreenResolution(Resolution: IntPoint): void;
	SetResolutionScaleValueEx(NewScaleValue: number): void;
	SetResolutionScaleValue(NewScaleValue: number): void;
	SetResolutionScaleNormalized(NewScaleNormalized: number): void;
	SetPostProcessingQuality(Value: number): void;
	SetOverallScalabilityLevel(Value: number): void;
	SetFullscreenMode(InFullscreenMode: EWindowMode): void;
	SetFrameRateLimit(NewLimit: number): void;
	SetFoliageQuality(Value: number): void;
	SetDynamicResolutionEnabled(bEnable: boolean): void;
	SetBenchmarkFallbackValues(): void;
	SetAudioQualityLevel(QualityLevel: number): void;
	SetAntiAliasingQuality(Value: number): void;
	SaveSettings(): void;
	RunHardwareBenchmark(WorkScale: number,CPUMultiplier: number,GPUMultiplier: number): void;
	RevertVideoMode(): void;
	ResetToCurrentSettings(): void;
	LoadSettings(bForceReload: boolean): void;
	IsVSyncEnabled(): boolean;
	IsVSyncDirty(): boolean;
	IsScreenResolutionDirty(): boolean;
	IsHDREnabled(): boolean;
	IsFullscreenModeDirty(): boolean;
	IsDynamicResolutionEnabled(): boolean;
	IsDynamicResolutionDirty(): boolean;
	IsDirty(): boolean;
	GetVisualEffectQuality(): number;
	GetViewDistanceQuality(): number;
	GetTextureQuality(): number;
	static GetSyncInterval(): number;
	GetShadowQuality(): number;
	GetShadingQuality(): number;
	GetScreenResolution(): IntPoint;
	GetResolutionScaleNormalized(): number;
	GetResolutionScaleInformationEx(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetResolutionScaleInformation(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetRecommendedResolutionScale(): number;
	GetPreferredFullscreenMode(): EWindowMode;
	GetPostProcessingQuality(): number;
	GetOverallScalabilityLevel(): number;
	GetLastConfirmedScreenResolution(): IntPoint;
	GetLastConfirmedFullscreenMode(): EWindowMode;
	static GetGameUserSettings(): GameUserSettings;
	GetFullscreenMode(): EWindowMode;
	GetFrameRateLimit(): number;
	static GetFramePace(): number;
	GetFoliageQuality(): number;
	GetDesktopResolution(): IntPoint;
	static GetDefaultWindowPosition(): IntPoint;
	static GetDefaultWindowMode(): EWindowMode;
	GetDefaultResolutionScale(): number;
	static GetDefaultResolution(): IntPoint;
	GetCurrentHDRDisplayNits(): number;
	GetAudioQualityLevel(): number;
	GetAntiAliasingQuality(): number;
	EnableHDRDisplayOutput(bEnable: boolean,DisplayNits: number): void;
	ConfirmVideoMode(): void;
	ApplySettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyResolutionSettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyNonResolutionSettings(): void;
	ApplyHardwareBenchmarkResults(): void;
	static C(Other: UObject | any): GameUserSettings;
}

declare class AssetManager extends UObject { 
	ObjectReferenceList: UObject[];
	bIsGlobalAsyncScanEnvironment: boolean;
	bShouldGuessTypeAndName: boolean;
	bShouldUseSynchronousLoad: boolean;
	bIsLoadingFromPakFiles: boolean;
	bShouldAcquireMissingChunksOnLoad: boolean;
	bOnlyCookProductionAssets: boolean;
	bIsBulkScanning: boolean;
	bIsPrimaryAssetDirectoryCurrent: boolean;
	bIsManagementDatabaseCurrent: boolean;
	bUpdateManagementDatabaseAfterScan: boolean;
	bIncludeOnlyOnDiskAssets: boolean;
	bHasCompletedInitialScan: boolean;
	NumberOfSpawnedNotifications: number;
	static Load(ResourceName: string): AssetManager;
	static Find(Outer: UObject, ResourceName: string): AssetManager;
	static GetDefaultObject(): AssetManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetManager;
	static C(Other: UObject | any): AssetManager;
}

declare class StatColorMapEntry { 
	In: number;
	Out: Color;
	clone() : StatColorMapEntry;
	static C(Other: UObject | any): StatColorMapEntry;
}

declare class StatColorMapping { 
	StatName: string;
	ColorMap: StatColorMapEntry[];
	DisableBlend: boolean;
	clone() : StatColorMapping;
	static C(Other: UObject | any): StatColorMapping;
}

declare class GameNameRedirect { 
	OldGameName: string;
	NewGameName: string;
	clone() : GameNameRedirect;
	static C(Other: UObject | any): GameNameRedirect;
}

declare class ClassRedirect { 
	ObjectName: string;
	OldClassName: string;
	NewClassName: string;
	OldSubobjName: string;
	NewSubobjName: string;
	NewClassClass: string;
	NewClassPackage: string;
	InstanceOnly: boolean;
	clone() : ClassRedirect;
	static C(Other: UObject | any): ClassRedirect;
}

declare class PluginRedirect { 
	OldPluginName: string;
	NewPluginName: string;
	clone() : PluginRedirect;
	static C(Other: UObject | any): PluginRedirect;
}

declare class StructRedirect { 
	OldStructName: string;
	NewStructName: string;
	clone() : StructRedirect;
	static C(Other: UObject | any): StructRedirect;
}

declare type ETransitionType = 'None' | 'Paused' | 'Loading' | 'Saving' | 'Connecting' | 'Precaching' | 'WaitingToConnect' | 'MAX';
declare var ETransitionType : { None:'None',Paused:'Paused',Loading:'Loading',Saving:'Saving',Connecting:'Connecting',Precaching:'Precaching',WaitingToConnect:'WaitingToConnect',MAX:'MAX', };
declare class DropNoteInfo { 
	Location: Vector;
	Rotation: Rotator;
	Comment: string;
	clone() : DropNoteInfo;
	static C(Other: UObject | any): DropNoteInfo;
}

declare class NetDriverDefinition { 
	DefName: string;
	DriverClassName: string;
	DriverClassNameFallback: string;
	clone() : NetDriverDefinition;
	static C(Other: UObject | any): NetDriverDefinition;
}

declare class Engine extends UObject { 
	TinyFont: Font;
	TinyFontName: SoftObjectPath;
	SmallFont: Font;
	SmallFontName: SoftObjectPath;
	MediumFont: Font;
	MediumFontName: SoftObjectPath;
	LargeFont: Font;
	LargeFontName: SoftObjectPath;
	SubtitleFont: Font;
	SubtitleFontName: SoftObjectPath;
	AdditionalFonts: Font[];
	AdditionalFontNames: string[];
	ConsoleClass: UnrealEngineClass;
	ConsoleClassName: SoftClassPath;
	GameViewportClientClass: UnrealEngineClass;
	GameViewportClientClassName: SoftClassPath;
	LocalPlayerClass: UnrealEngineClass;
	LocalPlayerClassName: SoftClassPath;
	WorldSettingsClass: UnrealEngineClass;
	WorldSettingsClassName: SoftClassPath;
	NavigationSystemClassName: SoftClassPath;
	NavigationSystemClass: UnrealEngineClass;
	NavigationSystemConfigClassName: SoftClassPath;
	NavigationSystemConfigClass: UnrealEngineClass;
	AvoidanceManagerClassName: SoftClassPath;
	AvoidanceManagerClass: UnrealEngineClass;
	AIControllerClassName: SoftClassPath;
	PhysicsCollisionHandlerClass: UnrealEngineClass;
	PhysicsCollisionHandlerClassName: SoftClassPath;
	GameUserSettingsClassName: SoftClassPath;
	GameUserSettingsClass: UnrealEngineClass;
	GameUserSettings: GameUserSettings;
	LevelScriptActorClass: UnrealEngineClass;
	LevelScriptActorClassName: SoftClassPath;
	DefaultBlueprintBaseClassName: SoftClassPath;
	GameSingletonClassName: SoftClassPath;
	GameSingleton: UObject;
	AssetManagerClassName: SoftClassPath;
	AssetManager: AssetManager;
	DefaultTexture: Texture2D;
	DefaultTextureName: SoftObjectPath;
	DefaultDiffuseTexture: Texture;
	DefaultDiffuseTextureName: SoftObjectPath;
	DefaultBSPVertexTexture: Texture2D;
	DefaultBSPVertexTextureName: SoftObjectPath;
	HighFrequencyNoiseTexture: Texture2D;
	HighFrequencyNoiseTextureName: SoftObjectPath;
	DefaultBokehTexture: Texture2D;
	DefaultBokehTextureName: SoftObjectPath;
	DefaultBloomKernelTexture: Texture2D;
	DefaultBloomKernelTextureName: SoftObjectPath;
	WireframeMaterial: Material;
	WireframeMaterialName: string;
	GeomMaterial: Material;
	GeomMaterialName: SoftObjectPath;
	DebugMeshMaterial: Material;
	DebugMeshMaterialName: SoftObjectPath;
	EmissiveMeshMaterial: Material;
	EmissiveMeshMaterialName: SoftObjectPath;
	LevelColorationLitMaterial: Material;
	LevelColorationLitMaterialName: string;
	LevelColorationUnlitMaterial: Material;
	LevelColorationUnlitMaterialName: string;
	LightingTexelDensityMaterial: Material;
	LightingTexelDensityName: string;
	ShadedLevelColorationLitMaterial: Material;
	ShadedLevelColorationLitMaterialName: string;
	ShadedLevelColorationUnlitMaterial: Material;
	ShadedLevelColorationUnlitMaterialName: string;
	RemoveSurfaceMaterial: Material;
	RemoveSurfaceMaterialName: SoftObjectPath;
	VertexColorMaterial: Material;
	VertexColorMaterialName: string;
	VertexColorViewModeMaterial_ColorOnly: Material;
	VertexColorViewModeMaterialName_ColorOnly: string;
	VertexColorViewModeMaterial_AlphaAsColor: Material;
	VertexColorViewModeMaterialName_AlphaAsColor: string;
	VertexColorViewModeMaterial_RedOnly: Material;
	VertexColorViewModeMaterialName_RedOnly: string;
	VertexColorViewModeMaterial_GreenOnly: Material;
	VertexColorViewModeMaterialName_GreenOnly: string;
	VertexColorViewModeMaterial_BlueOnly: Material;
	VertexColorViewModeMaterialName_BlueOnly: string;
	BoneWeightMaterial: Material;
	BoneWeightMaterialName: SoftObjectPath;
	ClothPaintMaterial: Material;
	ClothPaintMaterialWireframe: Material;
	ClothPaintMaterialInstance: MaterialInstanceDynamic;
	ClothPaintMaterialWireframeInstance: MaterialInstanceDynamic;
	ClothPaintMaterialName: SoftObjectPath;
	ClothPaintMaterialWireframeName: SoftObjectPath;
	PhysicalMaterialMaskMaterial: Material;
	PhysicalMaterialMaskMaterialName: SoftObjectPath;
	DebugEditorMaterial: Material;
	DebugEditorMaterialName: SoftObjectPath;
	ConstraintLimitMaterial: Material;
	ConstraintLimitMaterialX: MaterialInstanceDynamic;
	ConstraintLimitMaterialXAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialY: MaterialInstanceDynamic;
	ConstraintLimitMaterialYAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialZ: MaterialInstanceDynamic;
	ConstraintLimitMaterialZAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialPrismatic: MaterialInstanceDynamic;
	InvalidLightmapSettingsMaterial: Material;
	InvalidLightmapSettingsMaterialName: SoftObjectPath;
	PreviewShadowsIndicatorMaterial: Material;
	PreviewShadowsIndicatorMaterialName: SoftObjectPath;
	ArrowMaterial: Material;
	ArrowMaterialYellow: MaterialInstanceDynamic;
	ArrowMaterialName: SoftObjectPath;
	LightingOnlyBrightness: LinearColor;
	ShaderComplexityColors: LinearColor[];
	QuadComplexityColors: LinearColor[];
	LightComplexityColors: LinearColor[];
	StationaryLightOverlapColors: LinearColor[];
	LODColorationColors: LinearColor[];
	HLODColorationColors: LinearColor[];
	StreamingAccuracyColors: LinearColor[];
	MaxPixelShaderAdditiveComplexityCount: number;
	MaxES3PixelShaderAdditiveComplexityCount: number;
	MinLightMapDensity: number;
	IdealLightMapDensity: number;
	MaxLightMapDensity: number;
	bRenderLightMapDensityGrayscale: boolean;
	RenderLightMapDensityGrayscaleScale: number;
	RenderLightMapDensityColorScale: number;
	LightMapDensityVertexMappedColor: LinearColor;
	LightMapDensitySelectedColor: LinearColor;
	StatColorMappings: StatColorMapping[];
	EditorBrushMaterial: Material;
	EditorBrushMaterialName: SoftObjectPath;
	DefaultPhysMaterial: PhysicalMaterial;
	DefaultPhysMaterialName: SoftObjectPath;
	ActiveGameNameRedirects: GameNameRedirect[];
	ActiveClassRedirects: ClassRedirect[];
	ActivePluginRedirects: PluginRedirect[];
	ActiveStructRedirects: StructRedirect[];
	PreIntegratedSkinBRDFTexture: Texture2D;
	PreIntegratedSkinBRDFTextureName: SoftObjectPath;
	BlueNoiseTexture: Texture2D;
	BlueNoiseTextureName: SoftObjectPath;
	MiniFontTexture: Texture2D;
	MiniFontTextureName: SoftObjectPath;
	WeightMapPlaceholderTexture: Texture;
	WeightMapPlaceholderTextureName: SoftObjectPath;
	LightMapDensityTexture: Texture2D;
	LightMapDensityTextureName: SoftObjectPath;
	GameViewport: GameViewportClient;
	DeferredCommands: string[];
	NearClipPlane: number;
	bSubtitlesEnabled: boolean;
	bSubtitlesForcedOff: boolean;
	MaximumLoopIterationCount: number;
	bCanBlueprintsTickByDefault: boolean;
	bOptimizeAnimBlueprintMemberVariableAccess: boolean;
	bAllowMultiThreadedAnimationUpdate: boolean;
	bEnableEditorPSysRealtimeLOD: boolean;
	bSmoothFrameRate: boolean;
	bUseFixedFrameRate: boolean;
	FixedFrameRate: number;
	SmoothedFrameRateRange: FloatRange;
	CustomTimeStep: EngineCustomTimeStep;
	CustomTimeStepClassName: SoftClassPath;
	TimecodeProvider: TimecodeProvider;
	TimecodeProviderClassName: SoftClassPath;
	bGenerateDefaultTimecode: boolean;
	GenerateDefaultTimecodeFrameRate: FrameRate;
	GenerateDefaultTimecodeFrameDelay: number;
	bCheckForMultiplePawnsSpawnedInAFrame: boolean;
	NumPawnsAllowedToBeSpawnedInAFrame: number;
	bShouldGenerateLowQualityLightmaps: boolean;
	C_WorldBox: Color;
	C_BrushWire: Color;
	C_AddWire: Color;
	C_SubtractWire: Color;
	C_SemiSolidWire: Color;
	C_NonSolidWire: Color;
	C_WireBackground: Color;
	C_ScaleBoxHi: Color;
	C_VolumeCollision: Color;
	C_BSPCollision: Color;
	C_OrthoBackground: Color;
	C_Volume: Color;
	C_BrushShape: Color;
	StreamingDistanceFactor: number;
	GameScreenshotSaveDirectory: DirectoryPath;
	TransitionType: ETransitionType;
	TransitionDescription: string;
	TransitionGameMode: string;
	bAllowMatureLanguage: boolean;
	CameraRotationThreshold: number;
	CameraTranslationThreshold: number;
	PrimitiveProbablyVisibleTime: number;
	MaxOcclusionPixelsFraction: number;
	bPauseOnLossOfFocus: boolean;
	MaxParticleResize: number;
	MaxParticleResizeWarn: number;
	PendingDroppedNotes: DropNoteInfo[];
	NetClientTicksPerSecond: number;
	DisplayGamma: number;
	MinDesiredFrameRate: number;
	DefaultSelectedMaterialColor: LinearColor;
	SelectedMaterialColor: LinearColor;
	SelectionOutlineColor: LinearColor;
	SubduedSelectionOutlineColor: LinearColor;
	SelectedMaterialColorOverride: LinearColor;
	bIsOverridingSelectedColor: boolean;
	bEnableOnScreenDebugMessages: boolean;
	bEnableOnScreenDebugMessagesDisplay: boolean;
	bSuppressMapWarnings: boolean;
	bDisableAILogging: boolean;
	bEnableVisualLogRecordingOnStart: any;
	ScreenSaverInhibitorSemaphore: number;
	bLockReadOnlyLevels: boolean;
	ParticleEventManagerClassPath: string;
	SelectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	SelectionHighlightIntensityBillboards: number;
	NetDriverDefinitions: NetDriverDefinition[];
	ServerActors: string[];
	RuntimeServerActors: string[];
	NetErrorLogInterval: number;
	bStartedLoadMapMovie: boolean;
	NextWorldContextHandle: number;
	static Load(ResourceName: string): Engine;
	static Find(Outer: UObject, ResourceName: string): Engine;
	static GetDefaultObject(): Engine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Engine;
	static C(Other: UObject | any): Engine;
	GetEditorWorld(): World;
	GetPIEWorld(): World;
	HasUndo(): boolean;
	SetClientTravel(InWorld: World,NextURL: string,InTravelType: ETravelType): void;
	static GetEditorWorld(Engine: Engine): World;
	static GetPIEWorld(Engine: Engine): World;
	static HasUndo(Engine: Engine): boolean;
	static SetClientTravel(Engine: Engine,InWorld: World,NextURL: string,InTravelType: ETravelType): void;
}

declare class JavascriptTransaction { 
	clone() : JavascriptTransaction;
	static C(Other: UObject | any): JavascriptTransaction;
	GetContext(): string;
	GetPrimaryObject(): UObject;
	GetTitle(): string;
	static GetContext(Transaction: JavascriptTransaction): string;
	static GetPrimaryObject(Transaction: JavascriptTransaction): UObject;
	static GetTitle(Transaction: JavascriptTransaction): string;
}

declare class Transactor extends UObject { 
	static Load(ResourceName: string): Transactor;
	static Find(Outer: UObject, ResourceName: string): Transactor;
	static GetDefaultObject(): Transactor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Transactor;
	static C(Other: UObject | any): Transactor;
	GetQueueLength(): number;
	GetTransaction(QueueIndex: number): JavascriptTransaction;
	IsActive(): boolean;
	static GetQueueLength(Transactor: Transactor): number;
	static GetTransaction(Transactor: Transactor,QueueIndex: number): JavascriptTransaction;
	static IsActive(Transactor: Transactor): boolean;
}

declare class EditorWorldExtensionCollection extends UObject { 
	static Load(ResourceName: string): EditorWorldExtensionCollection;
	static Find(Outer: UObject, ResourceName: string): EditorWorldExtensionCollection;
	static GetDefaultObject(): EditorWorldExtensionCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtensionCollection;
	static C(Other: UObject | any): EditorWorldExtensionCollection;
}

declare class EditorWorldExtensionManager extends UObject { 
	EditorWorldExtensionCollection: EditorWorldExtensionCollection[];
	static Load(ResourceName: string): EditorWorldExtensionManager;
	static Find(Outer: UObject, ResourceName: string): EditorWorldExtensionManager;
	static GetDefaultObject(): EditorWorldExtensionManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtensionManager;
	static C(Other: UObject | any): EditorWorldExtensionManager;
}

declare type ECsgOper = 'CSG_Active' | 'CSG_Add' | 'CSG_Subtract' | 'CSG_Intersect' | 'CSG_Deintersect' | 'CSG_None' | 'CSG_MAX';
declare var ECsgOper : { CSG_Active:'CSG_Active',CSG_Add:'CSG_Add',CSG_Subtract:'CSG_Subtract',CSG_Intersect:'CSG_Intersect',CSG_Deintersect:'CSG_Deintersect',CSG_None:'CSG_None',CSG_MAX:'CSG_MAX', };
declare class USelection extends UObject { 
	static Load(ResourceName: string): USelection;
	static Find(Outer: UObject, ResourceName: string): USelection;
	static GetDefaultObject(): USelection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): USelection;
	static C(Other: UObject | any): USelection;
	Deselect(InObject: UObject): void;
	DeselectAll(InClass: UnrealEngineClass): void;
	GetSelectedObjects(Out?: UObject[]): {Out: UObject[], $: number};
	Select(InObject: UObject): void;
	ToggleSelect(InObject: UObject): void;
	static Deselect(USelection: USelection,InObject: UObject): void;
	static DeselectAll(USelection: USelection,InClass: UnrealEngineClass): void;
	static GetSelectedObjects(USelection: USelection,Out?: UObject[]): {Out: UObject[], $: number};
	static Select(USelection: USelection,InObject: UObject): void;
	static ToggleSelect(USelection: USelection,InObject: UObject): void;
}

declare class GroupActor extends Actor { 
	bLocked: boolean;
	GroupActors: Actor[];
	SubGroups: GroupActor[];
	static GetDefaultObject(): GroupActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GroupActor;
	static C(Other: UObject | any): GroupActor;
}

declare class EditorEngine extends Engine { 
	TempModel: Model;
	ConversionTempModel: Model;
	Trans: Transactor;
	Bad: Texture2D;
	EditorFont: Font;
	PreviewSoundCue: SoundCue;
	PreviewAudioComponent: AudioComponent;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorPlane: StaticMesh;
	EditorCylinder: StaticMesh;
	bFastRebuild: boolean;
	IsImportingT3D: boolean;
	ClickFlags: any;
	ParentContext: Package;
	UnsnappedClickLocation: Vector;
	ClickLocation: Vector;
	ClickPlane: Plane;
	MouseMovement: Vector;
	DetailMode: EDetailMode;
	UseSizingBox: boolean;
	UseAxisIndicator: boolean;
	GodMode: boolean;
	GameCommandLine: string;
	bShowBrushMarkerPolys: boolean;
	bEnableSocketSnapping: boolean;
	bEnableLODLocking: boolean;
	HeightMapExportClassName: string;
	ActorFactories: ActorFactory[];
	UserOpenedFile: string;
	InEditorGameURLOptions: string;
	PlayWorld: World;
	bIsToggleBetweenPIEandSIEQueued: boolean;
	bAllowMultiplePIEWorlds: boolean;
	bRequestEndPlayMapQueued: boolean;
	bSquelchTransactionNotification: boolean;
	bNotifyUndoRedoSelectionChange: boolean;
	PlayFromHerePlayerStartClass: UnrealEngineClass;
	EditorWorld: World;
	ActorsThatWereSelected: any[];
	PlayWorldDestination: number;
	CurrentPlayWorldDestination: number;
	bMobilePreviewPortrait: boolean;
	BuildPlayDevice: number;
	UserEditedPlayWorldURL: string;
	ScratchRenderTarget2048: TextureRenderTarget2D;
	ScratchRenderTarget1024: TextureRenderTarget2D;
	ScratchRenderTarget512: TextureRenderTarget2D;
	ScratchRenderTarget256: TextureRenderTarget2D;
	PreviewMeshComp: StaticMeshComponent;
	PreviewMeshIndex: number;
	bShowPreviewMesh: boolean;
	bCustomCameraAlignEmitter: boolean;
	CustomCameraAlignEmitterDistance: number;
	bDrawSocketsInGMode: boolean;
	bDrawParticleHelpers: boolean;
	BrushBuilders: BrushBuilder[];
	EditorWorldExtensionsManager: EditorWorldExtensionManager;
	ActorGroupingUtilsClassName: SoftClassPath;
	ActorGroupingUtils: ActorGroupingUtils;
	PlayWorldLocation: Vector;
	PlayWorldRotation: Rotator;
	bIsPlayWorldQueued: boolean;
	bIsSimulateInEditorQueued: boolean;
	bHasPlayWorldPlacement: boolean;
	bUseMobilePreviewForPlayWorld: boolean;
	bUseVRPreviewForPlayWorld: boolean;
	bIsSimulatingInEditor: boolean;
	PlayInEditorViewportIndex: number;
	static Load(ResourceName: string): EditorEngine;
	static Find(Outer: UObject, ResourceName: string): EditorEngine;
	static GetDefaultObject(): EditorEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorEngine;
	static C(Other: UObject | any): EditorEngine;
	bspBrushCSG(Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	CanSelectActor(Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	Exec(InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	FindBrushBuilder(BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	GetSelectedComponents(): USelection;
	GetSelectedObjects(): USelection;
	GetSelectedSet(Class: UnrealEngineClass): USelection;
	RebuildLevel(Level: Level): void;
	RebuildStaticNavigableGeometry(Level: Level): void;
	RedrawAllViewports(bInvalidateHitProxies: boolean): void;
	SelectActor(Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	SelectComponent(Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	SelectGroup(InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	SelectNone(bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	SetMaterial(InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
	static bspBrushCSG(Engine: EditorEngine,Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	static CanSelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	static Exec(Engine: EditorEngine,InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	static FindBrushBuilder(Engine: EditorEngine,BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	static GetSelectedComponents(Engine: EditorEngine): USelection;
	static GetSelectedObjects(Engine: EditorEngine): USelection;
	static GetSelectedSet(Engine: EditorEngine,Class: UnrealEngineClass): USelection;
	static RebuildLevel(Engine: EditorEngine,Level: Level): void;
	static RebuildStaticNavigableGeometry(Engine: EditorEngine,Level: Level): void;
	static RedrawAllViewports(Engine: EditorEngine,bInvalidateHitProxies: boolean): void;
	static SelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	static SelectComponent(Engine: EditorEngine,Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	static SelectGroup(Engine: EditorEngine,InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	static SelectNone(Engine: EditorEngine,bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	static SetMaterial(Engine: EditorEngine,InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
}

declare type EConsoleForGamepadLabels = 'None' | 'XBoxOne' | 'PS4' | 'EConsoleForGamepadLabels_MAX';
declare var EConsoleForGamepadLabels : { None:'None',XBoxOne:'XBoxOne',PS4:'PS4',EConsoleForGamepadLabels_MAX:'EConsoleForGamepadLabels_MAX', };
declare class EditorExperimentalSettings extends UObject { 
	bHDREditor: boolean;
	HDREditorNITLevel: number;
	bProceduralFoliage: boolean;
	bEnableLocalizationDashboard: boolean;
	bEnableTranslationPicker: boolean;
	bEnableFavoriteSystem: boolean;
	ConsoleForGamepadLabels: EConsoleForGamepadLabels;
	bToolbarCustomization: boolean;
	bBreakOnExceptions: boolean;
	BaseClassesToAllowRecompilingDuringPlayInEditor: Class[];
	ResolvedBaseClassesToAllowRecompilingDuringPlayInEditor: UnrealEngineClass[];
	bDrawMidpointArrowsInBlueprints: boolean;
	bContextMenuChunkAssignments: boolean;
	bDisableCookInEditor: boolean;
	bSharedCookedBuilds: boolean;
	MultiProcessCooking: number;
	bAllowLateJoinInPIE: boolean;
	bAllowVulkanPreview: boolean;
	bEnableMultithreadedLightmapEncoding: boolean;
	bEnableMultithreadedShadowmapEncoding: boolean;
	bUseOpenCLForConvexHullDecomp: boolean;
	bAllowPotentiallyUnsafePropertyEditing: boolean;
	bFacialAnimationImporter: boolean;
	bMobilePIEPreviewDeviceLaunch: boolean;
	bTextAssetFormatSupport: boolean;
	bExampleLayersAndBlends: boolean;
	bEnableLongPathsSupport: boolean;
	static Load(ResourceName: string): EditorExperimentalSettings;
	static Find(Outer: UObject, ResourceName: string): EditorExperimentalSettings;
	static GetDefaultObject(): EditorExperimentalSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorExperimentalSettings;
	static C(Other: UObject | any): EditorExperimentalSettings;
}

declare type ELevelVisibilityDirtyMode = 'ModifyOnChange' | 'DontModify' | 'ELevelVisibilityDirtyMode_MAX';
declare var ELevelVisibilityDirtyMode : { ModifyOnChange:'ModifyOnChange',DontModify:'DontModify',ELevelVisibilityDirtyMode_MAX:'ELevelVisibilityDirtyMode_MAX', };
declare class EditorLevelUtils extends UObject { 
	static Load(ResourceName: string): EditorLevelUtils;
	static Find(Outer: UObject, ResourceName: string): EditorLevelUtils;
	static GetDefaultObject(): EditorLevelUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLevelUtils;
	static SetLevelVisibility(Level: Level,bShouldBeVisible: boolean,bForceLayersVisible: boolean,ModifyMode: ELevelVisibilityDirtyMode): void;
	static SetLevelsVisibility(Levels: Level[],bShouldBeVisible: boolean[],bForceLayersVisible: boolean,ModifyMode: ELevelVisibilityDirtyMode): void;
	static MoveSelectedActorsToLevel(DestLevel: LevelStreaming,bWarnAboutReferences: boolean): number;
	static MoveActorsToLevel(ActorsToMove: Actor[],DestStreamingLevel: LevelStreaming,bWarnAboutReferences: boolean,bWarnAboutRenaming: boolean): number;
	static MakeLevelCurrent(InStreamingLevel: LevelStreaming): void;
	static K2_AddLevelToWorldWithTransform(World: World,LevelPackageName: string,LevelStreamingClass: UnrealEngineClass,LevelTransform: Transform): LevelStreaming;
	static K2_AddLevelToWorld(World: World,LevelPackageName: string,LevelStreamingClass: UnrealEngineClass): LevelStreaming;
	static CreateNewStreamingLevel(LevelStreamingClass: UnrealEngineClass,NewLevelPath: string,bMoveSelectedActorsIntoNewLevel: boolean): LevelStreaming;
	static C(Other: UObject | any): EditorLevelUtils;
}

declare type ELoadLevelAtStartup = 'None' | 'ProjectDefault' | 'LastOpened' | 'ELoadLevelAtStartup_MAX';
declare var ELoadLevelAtStartup : { None:'None',ProjectDefault:'ProjectDefault',LastOpened:'LastOpened',ELoadLevelAtStartup_MAX:'ELoadLevelAtStartup_MAX', };
declare class AutoReimportWildcard { 
	wildcard: string;
	bInclude: boolean;
	clone() : AutoReimportWildcard;
	static C(Other: UObject | any): AutoReimportWildcard;
}

declare class AutoReimportDirectoryConfig { 
	SourceDirectory: string;
	MountPoint: string;
	Wildcards: AutoReimportWildcard[];
	clone() : AutoReimportDirectoryConfig;
	static C(Other: UObject | any): AutoReimportDirectoryConfig;
}

declare class EditorLoadingSavingSettings extends UObject { 
	LoadLevelAtStartup: ELoadLevelAtStartup;
	bForceCompilationAtStartup: boolean;
	bRestoreOpenAssetTabsOnRestart: boolean;
	bEnableSourceControlCompatabilityCheck: boolean;
	bMonitorContentDirectories: boolean;
	AutoReimportDirectories: string[];
	AutoReimportDirectorySettings: AutoReimportDirectoryConfig[];
	AutoReimportThreshold: number;
	bAutoCreateAssets: boolean;
	bAutoDeleteAssets: boolean;
	bDetectChangesOnStartup: boolean;
	bPromptBeforeAutoImporting: boolean;
	bDeleteSourceFilesWithAssets: boolean;
	bAutoReimportTextures: boolean;
	bAutoReimportCSV: boolean;
	bDirtyMigratedBlueprints: boolean;
	bAutoSaveEnable: boolean;
	bAutoSaveMaps: boolean;
	bAutoSaveContent: boolean;
	AutoSaveTimeMinutes: number;
	AutoSaveInteractionDelayInSeconds: number;
	AutoSaveWarningInSeconds: number;
	bAutomaticallyCheckoutOnAssetModification: boolean;
	bPromptForCheckoutOnAssetModification: boolean;
	bSCCAutoAddNewFiles: boolean;
	bSCCUseGlobalSettings: boolean;
	TextDiffToolPath: FilePath;
	static Load(ResourceName: string): EditorLoadingSavingSettings;
	static Find(Outer: UObject, ResourceName: string): EditorLoadingSavingSettings;
	static GetDefaultObject(): EditorLoadingSavingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLoadingSavingSettings;
	static C(Other: UObject | any): EditorLoadingSavingSettings;
}

declare class EditorMiscSettings extends UObject { 
	static Load(ResourceName: string): EditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): EditorMiscSettings;
	static GetDefaultObject(): EditorMiscSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorMiscSettings;
	static C(Other: UObject | any): EditorMiscSettings;
}

declare class EditorNotifyObject extends EditorAnimBaseObj { 
	Event: AnimNotifyEvent;
	static Load(ResourceName: string): EditorNotifyObject;
	static Find(Outer: UObject, ResourceName: string): EditorNotifyObject;
	static GetDefaultObject(): EditorNotifyObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorNotifyObject;
	static C(Other: UObject | any): EditorNotifyObject;
}

declare class EditorParentPlayerListObj extends UObject { 
	Overrides: AnimParentNodeAssetOverride[];
	static Load(ResourceName: string): EditorParentPlayerListObj;
	static Find(Outer: UObject, ResourceName: string): EditorParentPlayerListObj;
	static GetDefaultObject(): EditorParentPlayerListObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorParentPlayerListObj;
	static C(Other: UObject | any): EditorParentPlayerListObj;
}

declare class EditorPerformanceSettings extends DeveloperSettings { 
	bShowFrameRateAndMemory: boolean;
	bThrottleCPUWhenNotForeground: boolean;
	bDisableRealtimeViewportsInRemoteSessions: boolean;
	bMonitorEditorPerformance: boolean;
	bOverrideDPIBasedEditorViewportScaling: boolean;
	bEnableSharedDDCPerformanceNotifications: boolean;
	bEnableScalabilityWarningIndicator: boolean;
	static Load(ResourceName: string): EditorPerformanceSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerformanceSettings;
	static GetDefaultObject(): EditorPerformanceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerformanceSettings;
	static C(Other: UObject | any): EditorPerformanceSettings;
}

declare class EditorPerProjectUserSettings extends UObject { 
	bDisplayUIExtensionPoints: boolean;
	bDisplayDocumentationLink: boolean;
	bDisplayActionListItemRefIds: boolean;
	bAlwaysGatherBehaviorTreeDebuggerData: boolean;
	bDisplayBlackboardKeysInAlphabeticalOrder: boolean;
	bDisplayEngineVersionInBadge: boolean;
	bUseSimplygonSwarm: boolean;
	SimplygonServerIP: string;
	bEnableSwarmDebugging: boolean;
	SimplygonSwarmDelay: any;
	SwarmNumOfConcurrentJobs: any;
	SwarmMaxUploadChunkSizeInMB: any;
	SwarmIntermediateFolder: string;
	bAutomaticallyHotReloadNewClasses: boolean;
	bShowCompilerLogOnCompileError: boolean;
	bKeepFbxNamespace: boolean;
	bShowImportDialogAtReimport: boolean;
	DataSourceFolder: DirectoryPath;
	bKeepAttachHierarchy: boolean;
	bAnimationReimportWarnings: boolean;
	bUseCurvesForDistributions: boolean;
	PropertyMatrix_NumberOfPasteOperationsBeforeWarning: number;
	bSCSEditorShowGrid: boolean;
	bSCSEditorShowFloor: boolean;
	bGetAttentionOnUATCompletion: boolean;
	SCSViewportCameraSpeed: number;
	bAutoloadCheckedOutPackages: boolean;
	bSuppressFullyLoadPrompt: boolean;
	bAllowSelectTranslucent: boolean;
	BlueprintFavorites: BlueprintPaletteFavorites;
	AssetViewerProfileIndex: number;
	AssetViewerProfileName: string;
	MaterialQualityLevel: number;
	PreviewFeatureLevel: number;
	PreviewPlatformName: string;
	PreviewShaderFormatName: string;
	bPreviewFeatureLevelActive: boolean;
	PreviewDeviceProfileName: string;
	static Load(ResourceName: string): EditorPerProjectUserSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerProjectUserSettings;
	static GetDefaultObject(): EditorPerProjectUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerProjectUserSettings;
	static C(Other: UObject | any): EditorPerProjectUserSettings;
}

declare type EUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Lightyears' | 'Degrees' | 'Radians' | 'MetersPerSecond' | 'KilometersPerHour' | 'MilesPerHour' | 'Celsius' | 'Farenheit' | 'Kelvin' | 'Micrograms' | 'Milligrams' | 'Grams' | 'Kilograms' | 'MetricTons' | 'Ounces' | 'Pounds' | 'Stones' | 'Newtons' | 'PoundsForce' | 'KilogramsForce' | 'Hertz' | 'Kilohertz' | 'Megahertz' | 'Gigahertz' | 'RevolutionsPerMinute' | 'Bytes' | 'Kilobytes' | 'Megabytes' | 'Gigabytes' | 'Terabytes' | 'Lumens' | 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days' | 'Months' | 'Years' | 'Multiplier' | 'Percentage' | 'Unspecified' | 'EUnit_MAX';
declare var EUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Lightyears:'Lightyears',Degrees:'Degrees',Radians:'Radians',MetersPerSecond:'MetersPerSecond',KilometersPerHour:'KilometersPerHour',MilesPerHour:'MilesPerHour',Celsius:'Celsius',Farenheit:'Farenheit',Kelvin:'Kelvin',Micrograms:'Micrograms',Milligrams:'Milligrams',Grams:'Grams',Kilograms:'Kilograms',MetricTons:'MetricTons',Ounces:'Ounces',Pounds:'Pounds',Stones:'Stones',Newtons:'Newtons',PoundsForce:'PoundsForce',KilogramsForce:'KilogramsForce',Hertz:'Hertz',Kilohertz:'Kilohertz',Megahertz:'Megahertz',Gigahertz:'Gigahertz',RevolutionsPerMinute:'RevolutionsPerMinute',Bytes:'Bytes',Kilobytes:'Kilobytes',Megabytes:'Megabytes',Gigabytes:'Gigabytes',Terabytes:'Terabytes',Lumens:'Lumens',Milliseconds:'Milliseconds',Seconds:'Seconds',Minutes:'Minutes',Hours:'Hours',Days:'Days',Months:'Months',Years:'Years',Multiplier:'Multiplier',Percentage:'Percentage',Unspecified:'Unspecified',EUnit_MAX:'EUnit_MAX', };
declare type EUnitDisplay = 'None' | 'Metric' | 'Imperial' | 'Invalid' | 'EUnitDisplay_MAX';
declare var EUnitDisplay : { None:'None',Metric:'Metric',Imperial:'Imperial',Invalid:'Invalid',EUnitDisplay_MAX:'EUnitDisplay_MAX', };
declare type EDefaultLocationUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Invalid' | 'EDefaultLocationUnit_MAX';
declare var EDefaultLocationUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Invalid:'Invalid',EDefaultLocationUnit_MAX:'EDefaultLocationUnit_MAX', };
declare class EditorProjectAppearanceSettings extends DeveloperSettings { 
	bDisplayUnits: boolean;
	bDisplayUnitsOnComponentTransforms: boolean;
	DistanceUnits: EUnit[];
	MassUnits: EUnit[];
	TimeUnits: EUnit[];
	AngleUnits: EUnit;
	SpeedUnits: EUnit;
	TemperatureUnits: EUnit;
	ForceUnits: EUnit;
	UnitDisplay: EUnitDisplay;
	DefaultInputUnits: EDefaultLocationUnit;
	static Load(ResourceName: string): EditorProjectAppearanceSettings;
	static Find(Outer: UObject, ResourceName: string): EditorProjectAppearanceSettings;
	static GetDefaultObject(): EditorProjectAppearanceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorProjectAppearanceSettings;
	static C(Other: UObject | any): EditorProjectAppearanceSettings;
}

declare type ELevelEditor2DAxis = 'X' | 'Y' | 'Z' | 'ELevelEditor2DAxis_MAX';
declare var ELevelEditor2DAxis : { X:'X',Y:'Y',Z:'Z',ELevelEditor2DAxis_MAX:'ELevelEditor2DAxis_MAX', };
declare class Mode2DLayer { 
	Name: string;
	Depth: number;
	clone() : Mode2DLayer;
	static C(Other: UObject | any): Mode2DLayer;
}

declare class LevelEditor2DSettings extends DeveloperSettings { 
	bEnable2DWidget: boolean;
	bEnableSnapLayers: boolean;
	SnapAxis: ELevelEditor2DAxis;
	SnapLayers: Mode2DLayer[];
	static Load(ResourceName: string): LevelEditor2DSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditor2DSettings;
	static GetDefaultObject(): LevelEditor2DSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditor2DSettings;
	static C(Other: UObject | any): LevelEditor2DSettings;
}

declare class BlueprintEditorProjectSettings extends DeveloperSettings { 
	bForceAllDependenciesToRecompile: boolean;
	bValidateUnloadedSoftActorReferences: boolean;
	bEnableChildActorExpansionInTreeView: boolean;
	DisabledCompilerMessagesExceptEditor: string[];
	DisabledCompilerMessages: string[];
	NamespacesToAlwaysInclude: string[];
	DefaultChildActorTreeViewMode: EChildActorComponentTreeViewVisualizationMode;
	static Load(ResourceName: string): BlueprintEditorProjectSettings;
	static Find(Outer: UObject, ResourceName: string): BlueprintEditorProjectSettings;
	static GetDefaultObject(): BlueprintEditorProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEditorProjectSettings;
	static C(Other: UObject | any): BlueprintEditorProjectSettings;
}

declare class EditorSettings extends UObject { 
	bLoadTheMostRecentlyLoadedProjectAtStartup: boolean;
	bEditorAnalyticsEnabled: boolean;
	LocalDerivedDataCache: DirectoryPath;
	SharedDerivedDataCache: DirectoryPath;
	bEnableS3DDC: boolean;
	RecentlyOpenedProjectFiles: string[];
	CreatedProjectPaths: string[];
	bCopyStarterContentPreference: boolean;
	CompletedSurveys: Guid[];
	InProgressSurveys: Guid[];
	AutoScalabilityWorkScaleAmount: number;
	static Load(ResourceName: string): EditorSettings;
	static Find(Outer: UObject, ResourceName: string): EditorSettings;
	static GetDefaultObject(): EditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSettings;
	static C(Other: UObject | any): EditorSettings;
}

declare class EditorSkeletonNotifyObj extends UObject { 
	Name: string;
	static Load(ResourceName: string): EditorSkeletonNotifyObj;
	static Find(Outer: UObject, ResourceName: string): EditorSkeletonNotifyObj;
	static GetDefaultObject(): EditorSkeletonNotifyObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSkeletonNotifyObj;
	static C(Other: UObject | any): EditorSkeletonNotifyObj;
}

declare class EditorSubsystemBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): EditorSubsystemBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): EditorSubsystemBlueprintLibrary;
	static GetDefaultObject(): EditorSubsystemBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSubsystemBlueprintLibrary;
	static GetEditorSubsystem(Class: UnrealEngineClass): EditorSubsystem;
	static C(Other: UObject | any): EditorSubsystemBlueprintLibrary;
}

declare class EnumFactory extends Factory { 
	static Load(ResourceName: string): EnumFactory;
	static Find(Outer: UObject, ResourceName: string): EnumFactory;
	static GetDefaultObject(): EnumFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnumFactory;
	static C(Other: UObject | any): EnumFactory;
}

declare class GatherTextCommandletBase extends Commandlet { 
	static Load(ResourceName: string): GatherTextCommandletBase;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandletBase;
	static GetDefaultObject(): GatherTextCommandletBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandletBase;
	static C(Other: UObject | any): GatherTextCommandletBase;
}

declare class ExportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ExportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExportDialogueScriptCommandlet;
	static GetDefaultObject(): ExportDialogueScriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportDialogueScriptCommandlet;
	static C(Other: UObject | any): ExportDialogueScriptCommandlet;
}

declare class ExportPakDependenciesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ExportPakDependenciesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExportPakDependenciesCommandlet;
	static GetDefaultObject(): ExportPakDependenciesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportPakDependenciesCommandlet;
	static C(Other: UObject | any): ExportPakDependenciesCommandlet;
}

declare class ExportTextContainer extends UObject { 
	ExportText: string;
	static Load(ResourceName: string): ExportTextContainer;
	static Find(Outer: UObject, ResourceName: string): ExportTextContainer;
	static GetDefaultObject(): ExportTextContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportTextContainer;
	static C(Other: UObject | any): ExportTextContainer;
}

declare class FbxSceneImportData extends UObject { 
	SourceFbxFile: string;
	static Load(ResourceName: string): FbxSceneImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportData;
	static GetDefaultObject(): FbxSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportData;
	static C(Other: UObject | any): FbxSceneImportData;
}

declare class FbxAssetImportData extends AssetImportData { 
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bConvertScene: boolean;
	bForceFrontXAxis: boolean;
	bConvertSceneUnit: boolean;
	bImportAsScene: boolean;
	FbxSceneImportDataReference: FbxSceneImportData;
	static Load(ResourceName: string): FbxAssetImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAssetImportData;
	static GetDefaultObject(): FbxAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAssetImportData;
	static C(Other: UObject | any): FbxAssetImportData;
}

declare type EFBXAnimationLengthImportType = 'FBXALIT_ExportedTime' | 'FBXALIT_AnimatedKey' | 'FBXALIT_SetRange' | 'FBXALIT_MAX';
declare var EFBXAnimationLengthImportType : { FBXALIT_ExportedTime:'FBXALIT_ExportedTime',FBXALIT_AnimatedKey:'FBXALIT_AnimatedKey',FBXALIT_SetRange:'FBXALIT_SetRange',FBXALIT_MAX:'FBXALIT_MAX', };
declare class Int32Interval { 
	Min: number;
	Max: number;
	clone() : Int32Interval;
	static C(Other: UObject | any): Int32Interval;
}

declare class FbxAnimSequenceImportData extends FbxAssetImportData { 
	bImportMeshesInBoneHierarchy: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	StartFrame: number;
	EndFrame: number;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	CustomSampleRate: number;
	SourceAnimationName: string;
	bImportCustomAttribute: boolean;
	bDeleteExistingCustomAttributeCurves: boolean;
	bDeleteExistingNonCurveCustomAttributes: boolean;
	bImportBoneTracks: boolean;
	bSetMaterialDriveParameterOnCustomAttribute: boolean;
	MaterialCurveSuffixes: string[];
	bRemoveRedundantKeys: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	bDoNotImportCurveWithZero: boolean;
	bPreserveLocalTransform: boolean;
	static Load(ResourceName: string): FbxAnimSequenceImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAnimSequenceImportData;
	static GetDefaultObject(): FbxAnimSequenceImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAnimSequenceImportData;
	static C(Other: UObject | any): FbxAnimSequenceImportData;
}

declare type EFBXTestPlanActionType = 'Import' | 'Reimport' | 'AddLOD' | 'ReimportLOD' | 'ImportReload' | 'EFBXTestPlanActionType_MAX';
declare var EFBXTestPlanActionType : { Import:'Import',Reimport:'Reimport',AddLOD:'AddLOD',ReimportLOD:'ReimportLOD',ImportReload:'ImportReload',EFBXTestPlanActionType_MAX:'EFBXTestPlanActionType_MAX', };
declare type EFBXExpectedResultPreset = 'Error_Number' | 'Warning_Number' | 'Created_Staticmesh_Number' | 'Created_Skeletalmesh_Number' | 'Materials_Created_Number' | 'Material_Slot_Imported_Name' | 'Vertex_Number' | 'Lod_Number' | 'Vertex_Number_Lod' | 'Mesh_Materials_Number' | 'Mesh_LOD_Section_Number' | 'Mesh_LOD_Section_Vertex_Number' | 'Mesh_LOD_Section_Triangle_Number' | 'Mesh_LOD_Section_Material_Name' | 'Mesh_LOD_Section_Material_Index' | 'Mesh_LOD_Section_Material_Imported_Name' | 'Mesh_LOD_Vertex_Position' | 'Mesh_LOD_Vertex_Normal' | 'LOD_UV_Channel_Number' | 'Bone_Number' | 'Bone_Position' | 'Animation_Frame_Number' | 'Animation_Length' | 'EFBXExpectedResultPreset_MAX';
declare var EFBXExpectedResultPreset : { Error_Number:'Error_Number',Warning_Number:'Warning_Number',Created_Staticmesh_Number:'Created_Staticmesh_Number',Created_Skeletalmesh_Number:'Created_Skeletalmesh_Number',Materials_Created_Number:'Materials_Created_Number',Material_Slot_Imported_Name:'Material_Slot_Imported_Name',Vertex_Number:'Vertex_Number',Lod_Number:'Lod_Number',Vertex_Number_Lod:'Vertex_Number_Lod',Mesh_Materials_Number:'Mesh_Materials_Number',Mesh_LOD_Section_Number:'Mesh_LOD_Section_Number',Mesh_LOD_Section_Vertex_Number:'Mesh_LOD_Section_Vertex_Number',Mesh_LOD_Section_Triangle_Number:'Mesh_LOD_Section_Triangle_Number',Mesh_LOD_Section_Material_Name:'Mesh_LOD_Section_Material_Name',Mesh_LOD_Section_Material_Index:'Mesh_LOD_Section_Material_Index',Mesh_LOD_Section_Material_Imported_Name:'Mesh_LOD_Section_Material_Imported_Name',Mesh_LOD_Vertex_Position:'Mesh_LOD_Vertex_Position',Mesh_LOD_Vertex_Normal:'Mesh_LOD_Vertex_Normal',LOD_UV_Channel_Number:'LOD_UV_Channel_Number',Bone_Number:'Bone_Number',Bone_Position:'Bone_Position',Animation_Frame_Number:'Animation_Frame_Number',Animation_Length:'Animation_Length',EFBXExpectedResultPreset_MAX:'EFBXExpectedResultPreset_MAX', };
declare class FbxTestPlanExpectedResult { 
	ExpectedPresetsType: EFBXExpectedResultPreset;
	ExpectedPresetsDataInteger: number[];
	ExpectedPresetsDataFloat: number[];
	ExpectedPresetsDataDouble: any[];
	ExpectedPresetsDataString: string[];
	clone() : FbxTestPlanExpectedResult;
	static C(Other: UObject | any): FbxTestPlanExpectedResult;
}

declare type EFBXImportType = 'FBXIT_StaticMesh' | 'FBXIT_SkeletalMesh' | 'FBXIT_Animation' | 'FBXIT_MAX';
declare var EFBXImportType : { FBXIT_StaticMesh:'FBXIT_StaticMesh',FBXIT_SkeletalMesh:'FBXIT_SkeletalMesh',FBXIT_Animation:'FBXIT_Animation',FBXIT_MAX:'FBXIT_MAX', };
declare type EFBXNormalImportMethod = 'FBXNIM_ComputeNormals' | 'FBXNIM_ImportNormals' | 'FBXNIM_ImportNormalsAndTangents' | 'FBXNIM_MAX';
declare var EFBXNormalImportMethod : { FBXNIM_ComputeNormals:'FBXNIM_ComputeNormals',FBXNIM_ImportNormals:'FBXNIM_ImportNormals',FBXNIM_ImportNormalsAndTangents:'FBXNIM_ImportNormalsAndTangents',FBXNIM_MAX:'FBXNIM_MAX', };
declare type EFBXNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace' | 'EFBXNormalGenerationMethod_MAX';
declare var EFBXNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace',EFBXNormalGenerationMethod_MAX:'EFBXNormalGenerationMethod_MAX', };
declare class ImportMeshLodSectionsData { 
	SectionOriginalMaterialName: string[];
	clone() : ImportMeshLodSectionsData;
	static C(Other: UObject | any): ImportMeshLodSectionsData;
}

declare class FbxMeshImportData extends FbxAssetImportData { 
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportMeshLODs: boolean;
	NormalImportMethod: EFBXNormalImportMethod;
	NormalGenerationMethod: EFBXNormalGenerationMethod;
	bComputeWeightedNormals: boolean;
	bReorderMaterialToFbxOrder: boolean;
	ImportMaterialOriginalNameData: string[];
	ImportMeshLodData: ImportMeshLodSectionsData[];
	static Load(ResourceName: string): FbxMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxMeshImportData;
	static GetDefaultObject(): FbxMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxMeshImportData;
	static C(Other: UObject | any): FbxMeshImportData;
}

declare type EVertexColorImportOption = 'Replace' | 'Ignore' | 'Override' | 'EVertexColorImportOption_MAX';
declare var EVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override',EVertexColorImportOption_MAX:'EVertexColorImportOption_MAX', };
declare class FbxStaticMeshImportData extends FbxMeshImportData { 
	StaticMeshLODGroup: string;
	VertexColorImportOption: EVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	bAutoGenerateCollision: boolean;
	bCombineMeshes: boolean;
	static Load(ResourceName: string): FbxStaticMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxStaticMeshImportData;
	static GetDefaultObject(): FbxStaticMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxStaticMeshImportData;
	static C(Other: UObject | any): FbxStaticMeshImportData;
}

declare type EFBXImportContentType = 'FBXICT_All' | 'FBXICT_Geometry' | 'FBXICT_SkinningWeights' | 'FBXICT_MAX';
declare var EFBXImportContentType : { FBXICT_All:'FBXICT_All',FBXICT_Geometry:'FBXICT_Geometry',FBXICT_SkinningWeights:'FBXICT_SkinningWeights',FBXICT_MAX:'FBXICT_MAX', };
declare class FbxSkeletalMeshImportData extends FbxMeshImportData { 
	ImportContentType: EFBXImportContentType;
	LastImportContentType: EFBXImportContentType;
	VertexColorImportOption: EVertexColorImportOption;
	VertexOverrideColor: Color;
	bUpdateSkeletonReferencePose: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	ThresholdPosition: number;
	ThresholdTangentNormal: number;
	ThresholdUV: number;
	MorphThresholdPosition: number;
	static Load(ResourceName: string): FbxSkeletalMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSkeletalMeshImportData;
	static GetDefaultObject(): FbxSkeletalMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSkeletalMeshImportData;
	static C(Other: UObject | any): FbxSkeletalMeshImportData;
}

declare type EMaterialSearchLocation = 'Local' | 'UnderParent' | 'UnderRoot' | 'AllAssets' | 'DoNotSearch' | 'EMaterialSearchLocation_MAX';
declare var EMaterialSearchLocation : { Local:'Local',UnderParent:'UnderParent',UnderRoot:'UnderRoot',AllAssets:'AllAssets',DoNotSearch:'DoNotSearch',EMaterialSearchLocation_MAX:'EMaterialSearchLocation_MAX', };
declare class FbxTextureImportData extends FbxAssetImportData { 
	bInvertNormalMaps: boolean;
	MaterialSearchLocation: EMaterialSearchLocation;
	BaseMaterialName: SoftObjectPath;
	BaseColorName: string;
	BaseDiffuseTextureName: string;
	BaseNormalTextureName: string;
	BaseEmissiveColorName: string;
	BaseEmmisiveTextureName: string;
	BaseSpecularTextureName: string;
	BaseOpacityTextureName: string;
	static Load(ResourceName: string): FbxTextureImportData;
	static Find(Outer: UObject, ResourceName: string): FbxTextureImportData;
	static GetDefaultObject(): FbxTextureImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTextureImportData;
	static C(Other: UObject | any): FbxTextureImportData;
}

declare class FbxImportUI extends UObject { 
	bIsObjImport: boolean;
	OriginalImportType: EFBXImportType;
	MeshTypeToImport: EFBXImportType;
	bOverrideFullName: boolean;
	bImportAsSkeletal: boolean;
	bImportMesh: boolean;
	Skeleton: Skeleton;
	bCreatePhysicsAsset: boolean;
	PhysicsAsset: PhysicsAsset;
	bAutoComputeLodDistances: boolean;
	LodDistance0: number;
	LodDistance1: number;
	LodDistance2: number;
	LodDistance3: number;
	LodDistance4: number;
	LodDistance5: number;
	LodDistance6: number;
	LodDistance7: number;
	MinimumLodNumber: number;
	LodNumber: number;
	bImportAnimations: boolean;
	OverrideAnimationName: string;
	bImportRigidMesh: boolean;
	bImportMaterials: boolean;
	bImportTextures: boolean;
	bResetToFbxOnMaterialConflict: boolean;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	bAutomatedImportShouldDetectType: boolean;
	FileVersion: string;
	FileCreator: string;
	FileCreatorApplication: string;
	FileUnits: string;
	FileAxisDirection: string;
	FileSampleRate: string;
	AnimStartFrame: string;
	AnimEndFrame: string;
	static Load(ResourceName: string): FbxImportUI;
	static Find(Outer: UObject, ResourceName: string): FbxImportUI;
	static GetDefaultObject(): FbxImportUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxImportUI;
	ResetToDefault(): void;
	static C(Other: UObject | any): FbxImportUI;
}

declare class FbxTestPlan extends UObject { 
	TestPlanName: string;
	Action: EFBXTestPlanActionType;
	LODIndex: number;
	bDeleteFolderAssets: boolean;
	ExpectedResult: FbxTestPlanExpectedResult[];
	ImportUI: FbxImportUI;
	static Load(ResourceName: string): FbxTestPlan;
	static Find(Outer: UObject, ResourceName: string): FbxTestPlan;
	static GetDefaultObject(): FbxTestPlan;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTestPlan;
	static C(Other: UObject | any): FbxTestPlan;
}

declare type EFbxExportCompatibility = 'FBX_2011' | 'FBX_2012' | 'FBX_2013' | 'FBX_2014' | 'FBX_2016' | 'FBX_2018' | 'FBX_2019' | 'FBX_2020' | 'FBX_MAX';
declare var EFbxExportCompatibility : { FBX_2011:'FBX_2011',FBX_2012:'FBX_2012',FBX_2013:'FBX_2013',FBX_2014:'FBX_2014',FBX_2016:'FBX_2016',FBX_2018:'FBX_2018',FBX_2019:'FBX_2019',FBX_2020:'FBX_2020',FBX_MAX:'FBX_MAX', };
declare class FbxExportOption extends UObject { 
	FbxExportCompatibility: EFbxExportCompatibility;
	bASCII: boolean;
	bForceFrontXAxis: boolean;
	VertexColor: boolean;
	LevelOfDetail: boolean;
	Collision: boolean;
	bExportMorphTargets: boolean;
	bExportPreviewMesh: boolean;
	MapSkeletalMotionToRoot: boolean;
	bExportLocalTime: boolean;
	static Load(ResourceName: string): FbxExportOption;
	static Find(Outer: UObject, ResourceName: string): FbxExportOption;
	static GetDefaultObject(): FbxExportOption;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxExportOption;
	static C(Other: UObject | any): FbxExportOption;
}

declare class FbxFactory extends Factory { 
	ImportUI: FbxImportUI;
	OriginalImportUI: FbxImportUI;
	static Load(ResourceName: string): FbxFactory;
	static Find(Outer: UObject, ResourceName: string): FbxFactory;
	static GetDefaultObject(): FbxFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxFactory;
	static C(Other: UObject | any): FbxFactory;
}

declare class SceneImportFactory extends Factory { 
	static Load(ResourceName: string): SceneImportFactory;
	static Find(Outer: UObject, ResourceName: string): SceneImportFactory;
	static GetDefaultObject(): SceneImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneImportFactory;
	static C(Other: UObject | any): SceneImportFactory;
}

declare type EFBXSceneOptionsCreateHierarchyType = 'FBXSOCHT_CreateLevelActors' | 'FBXSOCHT_CreateActorComponents' | 'FBXSOCHT_CreateBlueprint' | 'FBXSOCHT_MAX';
declare var EFBXSceneOptionsCreateHierarchyType : { FBXSOCHT_CreateLevelActors:'FBXSOCHT_CreateLevelActors',FBXSOCHT_CreateActorComponents:'FBXSOCHT_CreateActorComponents',FBXSOCHT_CreateBlueprint:'FBXSOCHT_CreateBlueprint',FBXSOCHT_MAX:'FBXSOCHT_MAX', };
declare class FbxSceneImportOptions extends UObject { 
	bCreateContentFolderHierarchy: boolean;
	bImportAsDynamic: boolean;
	HierarchyType: EFBXSceneOptionsCreateHierarchyType;
	bForceFrontXAxis: boolean;
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportStaticMeshLODs: boolean;
	bImportSkeletalMeshLODs: boolean;
	bInvertNormalMaps: boolean;
	static Load(ResourceName: string): FbxSceneImportOptions;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptions;
	static GetDefaultObject(): FbxSceneImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptions;
	static C(Other: UObject | any): FbxSceneImportOptions;
}

declare type EFbxSceneVertexColorImportOption = 'Replace' | 'Ignore' | 'Override' | 'EFbxSceneVertexColorImportOption_MAX';
declare var EFbxSceneVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override',EFbxSceneVertexColorImportOption_MAX:'EFbxSceneVertexColorImportOption_MAX', };
declare type EFBXSceneNormalImportMethod = 'FBXSceneNIM_ComputeNormals' | 'FBXSceneNIM_ImportNormals' | 'FBXSceneNIM_ImportNormalsAndTangents' | 'FBXSceneNIM_MAX';
declare var EFBXSceneNormalImportMethod : { FBXSceneNIM_ComputeNormals:'FBXSceneNIM_ComputeNormals',FBXSceneNIM_ImportNormals:'FBXSceneNIM_ImportNormals',FBXSceneNIM_ImportNormalsAndTangents:'FBXSceneNIM_ImportNormalsAndTangents',FBXSceneNIM_MAX:'FBXSceneNIM_MAX', };
declare type EFBXSceneNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace' | 'EFBXSceneNormalGenerationMethod_MAX';
declare var EFBXSceneNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace',EFBXSceneNormalGenerationMethod_MAX:'EFBXSceneNormalGenerationMethod_MAX', };
declare class FbxSceneImportOptionsStaticMesh extends UObject { 
	StaticMeshLODGroup: string;
	bAutoGenerateCollision: boolean;
	VertexColorImportOption: EFbxSceneVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	NormalImportMethod: EFBXSceneNormalImportMethod;
	NormalGenerationMethod: EFBXSceneNormalGenerationMethod;
	static Load(ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static GetDefaultObject(): FbxSceneImportOptionsStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsStaticMesh;
	static C(Other: UObject | any): FbxSceneImportOptionsStaticMesh;
}

declare class FbxSceneImportOptionsSkeletalMesh extends UObject { 
	bUpdateSkeletonReferencePose: boolean;
	bCreatePhysicsAsset: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	ThresholdPosition: number;
	ThresholdTangentNormal: number;
	ThresholdUV: number;
	MorphThresholdPosition: number;
	bImportAnimations: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	CustomSampleRate: number;
	bImportCustomAttribute: boolean;
	bDeleteExistingCustomAttributeCurves: boolean;
	bDeleteExistingNonCurveCustomAttributes: boolean;
	bPreserveLocalTransform: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	static Load(ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static GetDefaultObject(): FbxSceneImportOptionsSkeletalMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsSkeletalMesh;
	static C(Other: UObject | any): FbxSceneImportOptionsSkeletalMesh;
}

declare class FbxSceneImportFactory extends SceneImportFactory { 
	SceneImportOptions: FbxSceneImportOptions;
	SceneImportOptionsStaticMesh: FbxSceneImportOptionsStaticMesh;
	SceneImportOptionsSkeletalMesh: FbxSceneImportOptionsSkeletalMesh;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	ReimportData: FbxSceneImportData;
	static Load(ResourceName: string): FbxSceneImportFactory;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportFactory;
	static GetDefaultObject(): FbxSceneImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportFactory;
	static C(Other: UObject | any): FbxSceneImportFactory;
}

declare type EReloadPackagesInteractionMode = 'Interactive' | 'AssumePositive' | 'AssumeNegative' | 'EReloadPackagesInteractionMode_MAX';
declare var EReloadPackagesInteractionMode : { Interactive:'Interactive',AssumePositive:'AssumePositive',AssumeNegative:'AssumeNegative',EReloadPackagesInteractionMode_MAX:'EReloadPackagesInteractionMode_MAX', };
declare class EditorLoadingAndSavingUtils extends UObject { 
	static Load(ResourceName: string): EditorLoadingAndSavingUtils;
	static Find(Outer: UObject, ResourceName: string): EditorLoadingAndSavingUtils;
	static GetDefaultObject(): EditorLoadingAndSavingUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLoadingAndSavingUtils;
	static UnloadPackages(PackagesToUnload: Package[],bOutAnyPackagesUnloaded?: boolean,OutErrorMessage?: string): {bOutAnyPackagesUnloaded: boolean, OutErrorMessage: string};
	static SavePackagesWithDialog(PackagesToSave: Package[],bOnlyDirty: boolean): boolean;
	static SavePackages(PackagesToSave: Package[],bOnlyDirty: boolean): boolean;
	static SaveMap(World: World,AssetPath: string): boolean;
	static SaveDirtyPackagesWithDialog(bSaveMapPackages: boolean,bSaveContentPackages: boolean): boolean;
	static SaveDirtyPackages(bSaveMapPackages: boolean,bSaveContentPackages: boolean): boolean;
	static SaveCurrentLevel(): boolean;
	static ReloadPackages(PackagesToReload: Package[],bOutAnyPackagesReloaded?: boolean,OutErrorMessage?: string,InteractionMode?: EReloadPackagesInteractionMode): {bOutAnyPackagesReloaded: boolean, OutErrorMessage: string};
	static NewMapFromTemplate(PathToTemplateLevel: string,bSaveExistingMap: boolean): World;
	static NewBlankMap(bSaveExistingMap: boolean): World;
	static LoadMapWithDialog(): World;
	static LoadMap(Filename: string): World;
	static ImportScene(Filename: string): void;
	static GetDirtyMapPackages(OutDirtyPackages?: Package[]): {OutDirtyPackages: Package[]};
	static GetDirtyContentPackages(OutDirtyPackages?: Package[]): {OutDirtyPackages: Package[]};
	static ExportScene(bExportSelectedActorsOnly: boolean): void;
	static C(Other: UObject | any): EditorLoadingAndSavingUtils;
}

declare class FileServerCommandlet extends Commandlet { 
	static Load(ResourceName: string): FileServerCommandlet;
	static Find(Outer: UObject, ResourceName: string): FileServerCommandlet;
	static GetDefaultObject(): FileServerCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileServerCommandlet;
	static C(Other: UObject | any): FileServerCommandlet;
}

declare class FixConflictingLocalizationKeysCommandlet extends Commandlet { 
	static Load(ResourceName: string): FixConflictingLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixConflictingLocalizationKeysCommandlet;
	static GetDefaultObject(): FixConflictingLocalizationKeysCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixConflictingLocalizationKeysCommandlet;
	static C(Other: UObject | any): FixConflictingLocalizationKeysCommandlet;
}

declare class ResavePackagesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ResavePackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ResavePackagesCommandlet;
	static GetDefaultObject(): ResavePackagesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ResavePackagesCommandlet;
	static C(Other: UObject | any): ResavePackagesCommandlet;
}

declare class FixupNeedsLoadForEditorGameCommandlet extends ResavePackagesCommandlet { 
	static Load(ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static GetDefaultObject(): FixupNeedsLoadForEditorGameCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixupNeedsLoadForEditorGameCommandlet;
	static C(Other: UObject | any): FixupNeedsLoadForEditorGameCommandlet;
}

declare class FontFactory extends Factory { 
	static Load(ResourceName: string): FontFactory;
	static Find(Outer: UObject, ResourceName: string): FontFactory;
	static GetDefaultObject(): FontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFactory;
	static C(Other: UObject | any): FontFactory;
}

declare class FontFileImportFactory extends Factory { 
	static Load(ResourceName: string): FontFileImportFactory;
	static Find(Outer: UObject, ResourceName: string): FontFileImportFactory;
	static GetDefaultObject(): FontFileImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFileImportFactory;
	static C(Other: UObject | any): FontFileImportFactory;
}

declare class TextureThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): TextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureThumbnailRenderer;
	static GetDefaultObject(): TextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureThumbnailRenderer;
	static C(Other: UObject | any): TextureThumbnailRenderer;
}

declare class FontThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): FontThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): FontThumbnailRenderer;
	static GetDefaultObject(): FontThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontThumbnailRenderer;
	static C(Other: UObject | any): FontThumbnailRenderer;
}

declare class ForceFeedbackAttenuationFactory extends Factory { 
	static Load(ResourceName: string): ForceFeedbackAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackAttenuationFactory;
	static GetDefaultObject(): ForceFeedbackAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackAttenuationFactory;
	static C(Other: UObject | any): ForceFeedbackAttenuationFactory;
}

declare class ForceFeedbackEffectFactory extends Factory { 
	static Load(ResourceName: string): ForceFeedbackEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackEffectFactory;
	static GetDefaultObject(): ForceFeedbackEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackEffectFactory;
	static C(Other: UObject | any): ForceFeedbackEffectFactory;
}

declare class GatherTextCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandlet;
	static GetDefaultObject(): GatherTextCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandlet;
	static C(Other: UObject | any): GatherTextCommandlet;
}

declare class GatherTextFromAssetsCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromAssetsCommandlet;
	static GetDefaultObject(): GatherTextFromAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromAssetsCommandlet;
	static C(Other: UObject | any): GatherTextFromAssetsCommandlet;
}

declare class GatherTextFromMetaDataCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromMetaDataCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromMetaDataCommandlet;
	static GetDefaultObject(): GatherTextFromMetaDataCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromMetaDataCommandlet;
	static C(Other: UObject | any): GatherTextFromMetaDataCommandlet;
}

declare class GatherTextFromSourceCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromSourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromSourceCommandlet;
	static GetDefaultObject(): GatherTextFromSourceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromSourceCommandlet;
	static C(Other: UObject | any): GatherTextFromSourceCommandlet;
}

declare class GenerateAssetManifestCommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateAssetManifestCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateAssetManifestCommandlet;
	static GetDefaultObject(): GenerateAssetManifestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateAssetManifestCommandlet;
	static C(Other: UObject | any): GenerateAssetManifestCommandlet;
}

declare class GenerateBlueprintAPICommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateBlueprintAPICommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateBlueprintAPICommandlet;
	static GetDefaultObject(): GenerateBlueprintAPICommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateBlueprintAPICommandlet;
	static C(Other: UObject | any): GenerateBlueprintAPICommandlet;
}

declare class GenerateDistillFileSetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateDistillFileSetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateDistillFileSetsCommandlet;
	static GetDefaultObject(): GenerateDistillFileSetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateDistillFileSetsCommandlet;
	static C(Other: UObject | any): GenerateDistillFileSetsCommandlet;
}

declare class GenerateGatherArchiveCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateGatherArchiveCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherArchiveCommandlet;
	static GetDefaultObject(): GenerateGatherArchiveCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherArchiveCommandlet;
	static C(Other: UObject | any): GenerateGatherArchiveCommandlet;
}

declare class GenerateGatherManifestCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateGatherManifestCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherManifestCommandlet;
	static GetDefaultObject(): GenerateGatherManifestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherManifestCommandlet;
	static C(Other: UObject | any): GenerateGatherManifestCommandlet;
}

declare class GenerateTextLocalizationReportCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static GetDefaultObject(): GenerateTextLocalizationReportCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationReportCommandlet;
	static C(Other: UObject | any): GenerateTextLocalizationReportCommandlet;
}

declare class GenerateTextLocalizationResourceCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static GetDefaultObject(): GenerateTextLocalizationResourceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationResourceCommandlet;
	static C(Other: UObject | any): GenerateTextLocalizationResourceCommandlet;
}

declare class HapticFeedbackEffectBufferFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectBufferFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectBufferFactory;
	static GetDefaultObject(): HapticFeedbackEffectBufferFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectBufferFactory;
	static C(Other: UObject | any): HapticFeedbackEffectBufferFactory;
}

declare class HapticFeedbackEffectCurveFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectCurveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectCurveFactory;
	static GetDefaultObject(): HapticFeedbackEffectCurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectCurveFactory;
	static C(Other: UObject | any): HapticFeedbackEffectCurveFactory;
}

declare class HapticFeedbackEffectSoundWaveFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static GetDefaultObject(): HapticFeedbackEffectSoundWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectSoundWaveFactory;
	static C(Other: UObject | any): HapticFeedbackEffectSoundWaveFactory;
}

declare class HierarchicalLODSettings extends DeveloperSettings { 
	bForceSettingsInAllMaps: boolean;
	bSaveLODActorsToHLODPackages: boolean;
	DefaultSetup: Class;
	DirectoriesForHLODCommandlet: DirectoryPath[];
	MapsToBuild: FilePath[];
	bInvalidateHLODClusters: boolean;
	bDeleteHLODAssets: boolean;
	BaseMaterial: MaterialInterface;
	static Load(ResourceName: string): HierarchicalLODSettings;
	static Find(Outer: UObject, ResourceName: string): HierarchicalLODSettings;
	static GetDefaultObject(): HierarchicalLODSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODSettings;
	static C(Other: UObject | any): HierarchicalLODSettings;
}

declare class HierarchicalLODVolume extends Volume { 
	bIncludeOverlappingActors: boolean;
	static GetDefaultObject(): HierarchicalLODVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODVolume;
	static C(Other: UObject | any): HierarchicalLODVolume;
}

declare class ImportAssetsCommandlet extends Commandlet { 
	GlobalImportData: AutomatedAssetImportData;
	ImportDataList: AutomatedAssetImportData[];
	static Load(ResourceName: string): ImportAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportAssetsCommandlet;
	static GetDefaultObject(): ImportAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportAssetsCommandlet;
	static C(Other: UObject | any): ImportAssetsCommandlet;
}

declare class ImportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ImportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportDialogueScriptCommandlet;
	static GetDefaultObject(): ImportDialogueScriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportDialogueScriptCommandlet;
	static C(Other: UObject | any): ImportDialogueScriptCommandlet;
}

declare class ImportLocalizedDialogueCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ImportLocalizedDialogueCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportLocalizedDialogueCommandlet;
	static GetDefaultObject(): ImportLocalizedDialogueCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportLocalizedDialogueCommandlet;
	static C(Other: UObject | any): ImportLocalizedDialogueCommandlet;
}

declare class ImportSubsystem extends EditorSubsystem { 
	OnAssetPreImport_BP: UnrealEngineMulticastDelegate<(InFactory: Factory, InClass: UnrealEngineClass, InParent: UObject, Name: string, Type: string) => void>;
	OnAssetPostImport_BP: UnrealEngineMulticastDelegate<(InFactory: Factory, InCreatedObject: UObject) => void>;
	OnAssetReimport_BP: UnrealEngineMulticastDelegate<(InCreatedObject: UObject) => void>;
	OnAssetPostLODImport_BP: UnrealEngineMulticastDelegate<(InObject: UObject, InLODIndex: number) => void>;
	static Load(ResourceName: string): ImportSubsystem;
	static Find(Outer: UObject, ResourceName: string): ImportSubsystem;
	static GetDefaultObject(): ImportSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportSubsystem;
	static C(Other: UObject | any): ImportSubsystem;
}

declare class InternationalizationConditioningCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): InternationalizationConditioningCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationConditioningCommandlet;
	static GetDefaultObject(): InternationalizationConditioningCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationConditioningCommandlet;
	static C(Other: UObject | any): InternationalizationConditioningCommandlet;
}

declare class InternationalizationExportCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): InternationalizationExportCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationExportCommandlet;
	static GetDefaultObject(): InternationalizationExportCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationExportCommandlet;
	static C(Other: UObject | any): InternationalizationExportCommandlet;
}

declare class InterpDataFactoryNew extends Factory { 
	static Load(ResourceName: string): InterpDataFactoryNew;
	static Find(Outer: UObject, ResourceName: string): InterpDataFactoryNew;
	static GetDefaultObject(): InterpDataFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpDataFactoryNew;
	static C(Other: UObject | any): InterpDataFactoryNew;
}

declare class IoStoreCommandlet extends Commandlet { 
	static Load(ResourceName: string): IoStoreCommandlet;
	static Find(Outer: UObject, ResourceName: string): IoStoreCommandlet;
	static GetDefaultObject(): IoStoreCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IoStoreCommandlet;
	static C(Other: UObject | any): IoStoreCommandlet;
}

declare class LayersSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): LayersSubsystem;
	static Find(Outer: UObject, ResourceName: string): LayersSubsystem;
	static GetDefaultObject(): LayersSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LayersSubsystem;
	UpdateAllViewVisibility(LayerThatChanged: string): void;
	UpdateAllActorsVisibility(bNotifySelectionChange: boolean,bRedrawViewports: boolean): boolean;
	UpdateActorVisibility(Actor: Actor,bOutSelectionChanged?: boolean,bOutActorModified?: boolean,bNotifySelectionChange?: boolean,bRedrawViewports?: boolean): {bOutSelectionChanged: boolean, bOutActorModified: boolean, $: boolean};
	UpdateActorAllViewsVisibility(Actor: Actor): void;
	TryGetLayer(LayerName: string,OutLayer?: Layer): {OutLayer: Layer, $: boolean};
	ToggleLayerVisibility(LayerName: string): void;
	ToggleLayersVisibility(LayerNames: string[]): void;
	SetLayerVisibility(LayerName: string,bIsVisible: boolean): void;
	SetLayersVisibility(LayerNames: string[],bIsVisible: boolean): void;
	SelectActorsInLayers(LayerNames: string[],bSelect: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): boolean;
	SelectActorsInLayer(LayerName: string,bSelect: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): boolean;
	RenameLayer(OriginalLayerName: string,NewLayerName: string): boolean;
	RemoveSelectedActorsFromLayers(LayerNames: string[]): boolean;
	RemoveSelectedActorsFromLayer(LayerName: string): boolean;
	RemoveLevelLayerInformation(Level: Level): void;
	RemoveActorsFromLayers(Actors: Actor[],LayerNames: string[],bUpdateStats: boolean): boolean;
	RemoveActorsFromLayer(Actors: Actor[],LayerName: string,bUpdateStats: boolean): boolean;
	RemoveActorFromLayers(Actor: Actor,LayerNames: string[],bUpdateStats: boolean): boolean;
	RemoveActorFromLayer(Actor: Actor,LayerToRemove: string,bUpdateStats: boolean): boolean;
	MakeAllLayersVisible(): void;
	IsLayer(LayerName: string): boolean;
	IsActorValidForLayer(Actor: Actor): boolean;
	InitializeNewActorLayers(Actor: Actor): boolean;
	GetWorld(): World;
	GetSelectedActors(): Actor[];
	GetLayer(LayerName: string): Layer;
	GetActorsFromLayers(LayerNames: string[]): Actor[];
	GetActorsFromLayer(LayerName: string): Actor[];
	EditorRefreshLayerBrowser(): void;
	EditorMapChange(): void;
	DisassociateActorFromLayers(Actor: Actor): boolean;
	DeleteLayers(LayersToDelete: string[]): void;
	DeleteLayer(LayerToDelete: string): void;
	CreateLayer(LayerName: string): Layer;
	AppendActorsFromLayers(LayerNames: string[],InOutActors?: Actor[]): {InOutActors: Actor[]};
	AppendActorsFromLayer(LayerName: string,InOutActors?: Actor[]): {InOutActors: Actor[]};
	AddSelectedActorsToLayers(LayerNames: string[]): boolean;
	AddSelectedActorsToLayer(LayerName: string): boolean;
	AddLevelLayerInformation(Level: Level): void;
	AddAllLayersTo(OutLayers?: Layer[]): {OutLayers: Layer[]};
	AddAllLayerNamesTo(OutLayerNames?: string[]): {OutLayerNames: string[]};
	AddActorToLayers(Actor: Actor,LayerNames: string[]): boolean;
	AddActorToLayer(Actor: Actor,LayerName: string): boolean;
	AddActorsToLayers(Actors: Actor[],LayerNames: string[]): boolean;
	AddActorsToLayer(Actors: Actor[],LayerName: string): boolean;
	static C(Other: UObject | any): LayersSubsystem;
}

declare class EdMode extends UObject { 
	ToolsContext: EdModeInteractiveToolsContext;
	SettingsClass: Class;
	SettingsObject: UObject;
	static Load(ResourceName: string): EdMode;
	static Find(Outer: UObject, ResourceName: string): EdMode;
	static GetDefaultObject(): EdMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdMode;
	static C(Other: UObject | any): EdMode;
}

declare class LegacyEdModeWrapper extends EdMode { 
	static Load(ResourceName: string): LegacyEdModeWrapper;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeWrapper;
	static GetDefaultObject(): LegacyEdModeWrapper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeWrapper;
	static C(Other: UObject | any): LegacyEdModeWrapper;
}

declare class LevelEditorMiscSettings extends DeveloperSettings { 
	bAutoApplyLightingEnable: boolean;
	bBSPAutoUpdate: boolean;
	bAutoMoveBSPPivotOffset: boolean;
	bNavigationAutoUpdate: boolean;
	bReplaceRespectsScale: boolean;
	bEnableLegacyMeshPaintMode: boolean;
	bAvoidRelabelOnPasteSelected: boolean;
	bAllowBackgroundAudio: boolean;
	bCreateNewAudioDeviceForPlayInEditor: boolean;
	bEnableRealTimeAudio: boolean;
	EditorVolumeLevel: number;
	bEnableEditorSounds: boolean;
	DefaultLevelStreamingClass: UnrealEngineClass;
	bPromptWhenAddingToLevelBeforeCheckout: boolean;
	bPromptWhenAddingToLevelOutsideBounds: boolean;
	PercentageThresholdForPrompt: number;
	MinimumBoundsForCheckingSize: Vector;
	EditorScreenshotSaveDirectory: DirectoryPath;
	static Load(ResourceName: string): LevelEditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorMiscSettings;
	static GetDefaultObject(): LevelEditorMiscSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorMiscSettings;
	static C(Other: UObject | any): LevelEditorMiscSettings;
}

declare class CommonResolutionMenuContext extends ToolMenuContextBase { 
	static Load(ResourceName: string): CommonResolutionMenuContext;
	static Find(Outer: UObject, ResourceName: string): CommonResolutionMenuContext;
	static GetDefaultObject(): CommonResolutionMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CommonResolutionMenuContext;
	static C(Other: UObject | any): CommonResolutionMenuContext;
}

declare type ELabelAnchorMode = 'LabelAnchorMode_TopLeft' | 'LabelAnchorMode_TopCenter' | 'LabelAnchorMode_TopRight' | 'LabelAnchorMode_CenterLeft' | 'LabelAnchorMode_Centered' | 'LabelAnchorMode_CenterRight' | 'LabelAnchorMode_BottomLeft' | 'LabelAnchorMode_BottomCenter' | 'LabelAnchorMode_BottomRight' | 'LabelAnchorMode_MAX';
declare var ELabelAnchorMode : { LabelAnchorMode_TopLeft:'LabelAnchorMode_TopLeft',LabelAnchorMode_TopCenter:'LabelAnchorMode_TopCenter',LabelAnchorMode_TopRight:'LabelAnchorMode_TopRight',LabelAnchorMode_CenterLeft:'LabelAnchorMode_CenterLeft',LabelAnchorMode_Centered:'LabelAnchorMode_Centered',LabelAnchorMode_CenterRight:'LabelAnchorMode_CenterRight',LabelAnchorMode_BottomLeft:'LabelAnchorMode_BottomLeft',LabelAnchorMode_BottomCenter:'LabelAnchorMode_BottomCenter',LabelAnchorMode_BottomRight:'LabelAnchorMode_BottomRight',LabelAnchorMode_MAX:'LabelAnchorMode_MAX', };
declare type EPlayOnBuildMode = 'PlayOnBuild_Always' | 'PlayOnBuild_Never' | 'PlayOnBuild_Default' | 'PlayOnBuild_IfEditorBuiltLocally' | 'PlayOnBuild_MAX';
declare var EPlayOnBuildMode : { PlayOnBuild_Always:'PlayOnBuild_Always',PlayOnBuild_Never:'PlayOnBuild_Never',PlayOnBuild_Default:'PlayOnBuild_Default',PlayOnBuild_IfEditorBuiltLocally:'PlayOnBuild_IfEditorBuiltLocally',PlayOnBuild_MAX:'PlayOnBuild_MAX', };
declare type EPlayOnLaunchConfiguration = 'LaunchConfig_Default' | 'LaunchConfig_Debug' | 'LaunchConfig_Development' | 'LaunchConfig_Test' | 'LaunchConfig_Shipping' | 'LaunchConfig_MAX';
declare var EPlayOnLaunchConfiguration : { LaunchConfig_Default:'LaunchConfig_Default',LaunchConfig_Debug:'LaunchConfig_Debug',LaunchConfig_Development:'LaunchConfig_Development',LaunchConfig_Test:'LaunchConfig_Test',LaunchConfig_Shipping:'LaunchConfig_Shipping',LaunchConfig_MAX:'LaunchConfig_MAX', };
declare type EPlayNetMode = 'PIE_Standalone' | 'PIE_ListenServer' | 'PIE_Client' | 'PIE_MAX';
declare var EPlayNetMode : { PIE_Standalone:'PIE_Standalone',PIE_ListenServer:'PIE_ListenServer',PIE_Client:'PIE_Client',PIE_MAX:'PIE_MAX', };
declare type NetworkEmulationTarget = 'Server' | 'Client' | 'Any' | 'NetworkEmulationTarget_MAX';
declare var NetworkEmulationTarget : { Server:'Server',Client:'Client',Any:'Any',NetworkEmulationTarget_MAX:'NetworkEmulationTarget_MAX', };
declare class NetworkEmulationPacketSettings { 
	MinLatency: number;
	MaxLatency: number;
	PacketLossPercentage: number;
	clone() : NetworkEmulationPacketSettings;
	static C(Other: UObject | any): NetworkEmulationPacketSettings;
}

declare class LevelEditorPlayNetworkEmulationSettings { 
	bIsNetworkEmulationEnabled: boolean;
	EmulationTarget: NetworkEmulationTarget;
	CurrentProfile: string;
	OutPackets: NetworkEmulationPacketSettings;
	InPackets: NetworkEmulationPacketSettings;
	clone() : LevelEditorPlayNetworkEmulationSettings;
	static C(Other: UObject | any): LevelEditorPlayNetworkEmulationSettings;
}

declare type ELaunchModeType = 'LaunchMode_OnDevice' | 'LaunchMode_MAX';
declare var ELaunchModeType : { LaunchMode_OnDevice:'LaunchMode_OnDevice',LaunchMode_MAX:'LaunchMode_MAX', };
declare type EPlayModeLocations = 'PlayLocation_CurrentCameraLocation' | 'PlayLocation_DefaultPlayerStart' | 'PlayLocation_MAX';
declare var EPlayModeLocations : { PlayLocation_CurrentCameraLocation:'PlayLocation_CurrentCameraLocation',PlayLocation_DefaultPlayerStart:'PlayLocation_DefaultPlayerStart',PlayLocation_MAX:'PlayLocation_MAX', };
declare type EPlayModeType = 'PlayMode_InViewPort' | 'PlayMode_InEditorFloating' | 'PlayMode_InMobilePreview' | 'PlayMode_InTargetedMobilePreview' | 'PlayMode_InVulkanPreview' | 'PlayMode_InNewProcess' | 'PlayMode_InVR' | 'PlayMode_Simulate' | 'PlayMode_Count' | 'PlayMode_MAX';
declare var EPlayModeType : { PlayMode_InViewPort:'PlayMode_InViewPort',PlayMode_InEditorFloating:'PlayMode_InEditorFloating',PlayMode_InMobilePreview:'PlayMode_InMobilePreview',PlayMode_InTargetedMobilePreview:'PlayMode_InTargetedMobilePreview',PlayMode_InVulkanPreview:'PlayMode_InVulkanPreview',PlayMode_InNewProcess:'PlayMode_InNewProcess',PlayMode_InVR:'PlayMode_InVR',PlayMode_Simulate:'PlayMode_Simulate',PlayMode_Count:'PlayMode_Count',PlayMode_MAX:'PlayMode_MAX', };
declare class PlayScreenResolution { 
	Description: string;
	Width: number;
	Height: number;
	AspectRatio: string;
	bCanSwapAspectRatio: boolean;
	ProfileName: string;
	ScaleFactor: number;
	LogicalHeight: number;
	LogicalWidth: number;
	clone() : PlayScreenResolution;
	static C(Other: UObject | any): PlayScreenResolution;
}

declare class LevelEditorPlaySettings extends UObject { 
	PlayFromHerePlayerStartClassName: string;
	GameGetsMouseControl: boolean;
	UseMouseForTouch: boolean;
	ShowMouseControlLabel: boolean;
	MouseControlLabelPosition: ELabelAnchorMode;
	ViewportGetsHMDControl: boolean;
	ShouldMinimizeEditorOnVRPIE: boolean;
	AutoRecompileBlueprints: boolean;
	EnableGameSound: boolean;
	EnablePIEEnterAndExitSounds: boolean;
	PlayInEditorSoundQualityLevel: number;
	bUseNonRealtimeAudioDevice: boolean;
	bOnlyLoadVisibleLevelsInPIE: boolean;
	bPreferToStreamLevelsInPIE: boolean;
	NewWindowWidth: number;
	NewWindowHeight: number;
	NewWindowPosition: IntPoint;
	CenterNewWindow: boolean;
	PIEAlwaysOnTop: boolean;
	DisableStandaloneSound: boolean;
	AdditionalLaunchParameters: string;
	AdditionalLaunchParametersForMobile: string;
	BuildGameBeforeLaunch: EPlayOnBuildMode;
	LaunchConfiguration: EPlayOnLaunchConfiguration;
	bAutoCompileBlueprintsOnLaunch: boolean;
	bLaunchSeparateServer: boolean;
	PlayNetMode: EPlayNetMode;
	RunUnderOneProcess: boolean;
	PlayNetDedicated: boolean;
	PlayNumberOfClients: number;
	ServerPort: any;
	ClientWindowWidth: number;
	AutoConnectToServer: boolean;
	RouteGamepadToSecondWindow: boolean;
	CreateAudioDeviceForEveryPlayer: boolean;
	ClientWindowHeight: number;
	ServerMapNameOverride: string;
	AdditionalServerGameOptions: string;
	AdditionalLaunchOptions: string;
	bShowServerDebugDrawingByDefault: boolean;
	ServerDebugDrawingColorTintStrength: number;
	ServerDebugDrawingColorTint: LinearColor;
	AdditionalServerLaunchParameters: string;
	ServerFixedFPS: number;
	ClientFixedFPS: number[];
	NetworkEmulationSettings: LevelEditorPlayNetworkEmulationSettings;
	LastSize: IntPoint;
	MultipleInstancePositions: IntPoint[];
	LastExecutedLaunchDevice: string;
	LastExecutedLaunchName: string;
	LastExecutedLaunchModeType: ELaunchModeType;
	LastExecutedPlayModeLocation: EPlayModeLocations;
	LastExecutedPlayModeType: EPlayModeType;
	LastExecutedPIEPreviewDevice: string;
	LaptopScreenResolutions: PlayScreenResolution[];
	MonitorScreenResolutions: PlayScreenResolution[];
	PhoneScreenResolutions: PlayScreenResolution[];
	TabletScreenResolutions: PlayScreenResolution[];
	TelevisionScreenResolutions: PlayScreenResolution[];
	DeviceToEmulate: string;
	PIESafeZoneOverride: Margin;
	CustomUnsafeZoneStarts: Vector2D[];
	CustomUnsafeZoneDimensions: Vector2D[];
	static Load(ResourceName: string): LevelEditorPlaySettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorPlaySettings;
	static GetDefaultObject(): LevelEditorPlaySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorPlaySettings;
	static C(Other: UObject | any): LevelEditorPlaySettings;
}

declare type EWASDType = 'WASD_Always' | 'WASD_RMBOnly' | 'WASD_Never' | 'WASD_MAX';
declare var EWASDType : { WASD_Always:'WASD_Always',WASD_RMBOnly:'WASD_RMBOnly',WASD_Never:'WASD_Never',WASD_MAX:'WASD_MAX', };
declare type ELandscapeFoliageEditorControlType = 'IgnoreCtrl' | 'RequireCtrl' | 'RequireNoCtrl' | 'ELandscapeFoliageEditorControlType_MAX';
declare var ELandscapeFoliageEditorControlType : { IgnoreCtrl:'IgnoreCtrl',RequireCtrl:'RequireCtrl',RequireNoCtrl:'RequireNoCtrl',ELandscapeFoliageEditorControlType_MAX:'ELandscapeFoliageEditorControlType_MAX', };
declare type EScrollGestureDirection = 'UseSystemSetting' | 'Standard' | 'Natural' | 'EScrollGestureDirection_MAX';
declare var EScrollGestureDirection : { UseSystemSetting:'UseSystemSetting',Standard:'Standard',Natural:'Natural',EScrollGestureDirection_MAX:'EScrollGestureDirection_MAX', };
declare class SnapToSurfaceSettings { 
	bEnabled: boolean;
	SnapOffsetExtent: number;
	bSnapRotation: boolean;
	clone() : SnapToSurfaceSettings;
	static C(Other: UObject | any): SnapToSurfaceSettings;
}

declare type ERotationGridMode = 'GridMode_DivisionsOf360' | 'GridMode_Common' | 'GridMode_MAX';
declare var ERotationGridMode : { GridMode_DivisionsOf360:'GridMode_DivisionsOf360',GridMode_Common:'GridMode_Common',GridMode_MAX:'GridMode_MAX', };
declare type EMeasuringToolUnits = 'MeasureUnits_Centimeters' | 'MeasureUnits_Meters' | 'MeasureUnits_Kilometers' | 'MeasureUnits_MAX';
declare var EMeasuringToolUnits : { MeasureUnits_Centimeters:'MeasureUnits_Centimeters',MeasureUnits_Meters:'MeasureUnits_Meters',MeasureUnits_Kilometers:'MeasureUnits_Kilometers',MeasureUnits_MAX:'MeasureUnits_MAX', };
declare type ELevelViewportType = 'LVT_OrthoXY' | 'LVT_OrthoXZ' | 'LVT_OrthoYZ' | 'LVT_Perspective' | 'LVT_OrthoFreelook' | 'LVT_OrthoNegativeXY' | 'LVT_OrthoNegativeXZ' | 'LVT_OrthoNegativeYZ' | 'LVT_MAX' | 'LVT_None';
declare var ELevelViewportType : { LVT_OrthoXY:'LVT_OrthoXY',LVT_OrthoXZ:'LVT_OrthoXZ',LVT_OrthoYZ:'LVT_OrthoYZ',LVT_Perspective:'LVT_Perspective',LVT_OrthoFreelook:'LVT_OrthoFreelook',LVT_OrthoNegativeXY:'LVT_OrthoNegativeXY',LVT_OrthoNegativeXZ:'LVT_OrthoNegativeXZ',LVT_OrthoNegativeYZ:'LVT_OrthoNegativeYZ',LVT_MAX:'LVT_MAX',LVT_None:'LVT_None', };
declare type EViewModeIndex = 'VMI_BrushWireframe' | 'VMI_Wireframe' | 'VMI_Unlit' | 'VMI_Lit' | 'VMI_Lit_DetailLighting' | 'VMI_LightingOnly' | 'VMI_LightComplexity' | 'VMI_ShaderComplexity' | 'VMI_LightmapDensity' | 'VMI_LitLightmapDensity' | 'VMI_ReflectionOverride' | 'VMI_VisualizeBuffer' | 'VMI_StationaryLightOverlap' | 'VMI_CollisionPawn' | 'VMI_CollisionVisibility' | 'VMI_LODColoration' | 'VMI_QuadOverdraw' | 'VMI_PrimitiveDistanceAccuracy' | 'VMI_MeshUVDensityAccuracy' | 'VMI_ShaderComplexityWithQuadOverdraw' | 'VMI_HLODColoration' | 'VMI_GroupLODColoration' | 'VMI_MaterialTextureScaleAccuracy' | 'VMI_RequiredTextureResolution' | 'VMI_PathTracing' | 'VMI_RayTracingDebug' | 'VMI_Max' | 'VMI_Unknown';
declare var EViewModeIndex : { VMI_BrushWireframe:'VMI_BrushWireframe',VMI_Wireframe:'VMI_Wireframe',VMI_Unlit:'VMI_Unlit',VMI_Lit:'VMI_Lit',VMI_Lit_DetailLighting:'VMI_Lit_DetailLighting',VMI_LightingOnly:'VMI_LightingOnly',VMI_LightComplexity:'VMI_LightComplexity',VMI_ShaderComplexity:'VMI_ShaderComplexity',VMI_LightmapDensity:'VMI_LightmapDensity',VMI_LitLightmapDensity:'VMI_LitLightmapDensity',VMI_ReflectionOverride:'VMI_ReflectionOverride',VMI_VisualizeBuffer:'VMI_VisualizeBuffer',VMI_StationaryLightOverlap:'VMI_StationaryLightOverlap',VMI_CollisionPawn:'VMI_CollisionPawn',VMI_CollisionVisibility:'VMI_CollisionVisibility',VMI_LODColoration:'VMI_LODColoration',VMI_QuadOverdraw:'VMI_QuadOverdraw',VMI_PrimitiveDistanceAccuracy:'VMI_PrimitiveDistanceAccuracy',VMI_MeshUVDensityAccuracy:'VMI_MeshUVDensityAccuracy',VMI_ShaderComplexityWithQuadOverdraw:'VMI_ShaderComplexityWithQuadOverdraw',VMI_HLODColoration:'VMI_HLODColoration',VMI_GroupLODColoration:'VMI_GroupLODColoration',VMI_MaterialTextureScaleAccuracy:'VMI_MaterialTextureScaleAccuracy',VMI_RequiredTextureResolution:'VMI_RequiredTextureResolution',VMI_PathTracing:'VMI_PathTracing',VMI_RayTracingDebug:'VMI_RayTracingDebug',VMI_Max:'VMI_Max',VMI_Unknown:'VMI_Unknown', };
declare class ExposureSettings { 
	FixedEV100: number;
	bFixed: boolean;
	clone() : ExposureSettings;
	static C(Other: UObject | any): ExposureSettings;
}

declare class LevelEditorViewportInstanceSettings { 
	ViewportType: ELevelViewportType;
	PerspViewModeIndex: EViewModeIndex;
	OrthoViewModeIndex: EViewModeIndex;
	EditorShowFlagsString: string;
	GameShowFlagsString: string;
	BufferVisualizationMode: string;
	RayTracingDebugVisualizationMode: string;
	ExposureSettings: ExposureSettings;
	FOVAngle: number;
	FarViewPlane: number;
	bIsRealtime: boolean;
	bShowFPS: boolean;
	bShowOnScreenStats: boolean;
	EnabledStats: string[];
	bShowFullToolbar: boolean;
	clone() : LevelEditorViewportInstanceSettings;
	static C(Other: UObject | any): LevelEditorViewportInstanceSettings;
}

declare class LevelEditorViewportInstanceSettingsKeyValuePair { 
	ConfigName: string;
	ConfigSettings: LevelEditorViewportInstanceSettings;
	clone() : LevelEditorViewportInstanceSettingsKeyValuePair;
	static C(Other: UObject | any): LevelEditorViewportInstanceSettingsKeyValuePair;
}

declare class LevelEditorViewportSettings extends UObject { 
	FlightCameraControlType: EWASDType;
	FlightCameraControlExperimentalNavigation: boolean;
	LandscapeEditorControlType: ELandscapeFoliageEditorControlType;
	FoliageEditorControlType: ELandscapeFoliageEditorControlType;
	bPanMovesCanvas: boolean;
	bCenterZoomAroundCursor: boolean;
	MinimumOrthographicZoom: number;
	bAllowTranslateRotateZWidget: boolean;
	bAllowArcballRotate: boolean;
	bAllowScreenRotate: boolean;
	bClickBSPSelectsBrush: boolean;
	CameraSpeed: number;
	CameraSpeedScalar: number;
	MouseScrollCameraSpeed: number;
	MouseSensitivty: number;
	bInvertMouseLookYAxis: boolean;
	bInvertOrbitYAxis: boolean;
	bInvertMiddleMousePan: boolean;
	bInvertRightMouseDollyYAxis: boolean;
	bUseAbsoluteTranslation: boolean;
	bLevelStreamingVolumePrevis: boolean;
	bUseUE3OrbitControls: boolean;
	ScrollGestureDirectionFor3DViewports: EScrollGestureDirection;
	ScrollGestureDirectionForOrthoViewports: EScrollGestureDirection;
	bLevelEditorJoystickControls: boolean;
	bUseDistanceScaledCameraSpeed: boolean;
	bOrbitCameraAroundSelection: boolean;
	bUsePowerOf2SnapSize: boolean;
	DecimalGridSizes: number[];
	DecimalGridIntervals: number[];
	Pow2GridSizes: number[];
	Pow2GridIntervals: number[];
	CommonRotGridSizes: number[];
	DivisionsOf360RotGridSizes: number[];
	ScalingGridSizes: number[];
	GridEnabled: boolean;
	RotGridEnabled: boolean;
	SnapScaleEnabled: boolean;
	SnapToSurface: SnapToSurfaceSettings;
	bUsePercentageBasedScaling: boolean;
	bEnableLayerSnap: boolean;
	ActiveSnapLayerIndex: number;
	bEnableActorSnap: boolean;
	ActorSnapScale: number;
	ActorSnapDistance: number;
	bSnapVertices: boolean;
	SnapDistance: number;
	CurrentPosGridSize: number;
	CurrentRotGridSize: number;
	CurrentScalingGridSize: number;
	PreserveNonUniformScale: boolean;
	CurrentRotGridMode: ERotationGridMode;
	bUseLegacyPostEditBehavior: boolean;
	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
	bEnableViewportHoverFeedback: boolean;
	bHighlightWithBrackets: boolean;
	bUseLinkedOrthographicViewports: boolean;
	bStrictBoxSelection: boolean;
	bTransparentBoxSelection: boolean;
	bUseSelectionOutline: boolean;
	SelectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	bEnableViewportCameraToUpdateFromPIV: boolean;
	bPreviewSelectedCameras: boolean;
	CameraPreviewSize: number;
	BackgroundDropDistance: number;
	PreviewMeshes: SoftObjectPath[];
	BillboardScale: number;
	TransformWidgetSizeAdjustment: number;
	bSaveEngineStats: boolean;
	MeasuringToolUnits: EMeasuringToolUnits;
	SelectedSplinePointSizeAdjustment: number;
	SplineLineThicknessAdjustment: number;
	SplineTangentHandleSizeAdjustment: number;
	SplineTangentScale: number;
	PerInstanceSettings: LevelEditorViewportInstanceSettingsKeyValuePair[];
	static Load(ResourceName: string): LevelEditorViewportSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorViewportSettings;
	static GetDefaultObject(): LevelEditorViewportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorViewportSettings;
	static C(Other: UObject | any): LevelEditorViewportSettings;
}

declare class LevelExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): LevelExporterFBX;
	static Find(Outer: UObject, ResourceName: string): LevelExporterFBX;
	static GetDefaultObject(): LevelExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterFBX;
	static C(Other: UObject | any): LevelExporterFBX;
}

declare class LevelExporterLOD extends Exporter { 
	static Load(ResourceName: string): LevelExporterLOD;
	static Find(Outer: UObject, ResourceName: string): LevelExporterLOD;
	static GetDefaultObject(): LevelExporterLOD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterLOD;
	static C(Other: UObject | any): LevelExporterLOD;
}

declare class LevelExporterOBJ extends Exporter { 
	static Load(ResourceName: string): LevelExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): LevelExporterOBJ;
	static GetDefaultObject(): LevelExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterOBJ;
	static C(Other: UObject | any): LevelExporterOBJ;
}

declare class LevelExporterSTL extends Exporter { 
	static Load(ResourceName: string): LevelExporterSTL;
	static Find(Outer: UObject, ResourceName: string): LevelExporterSTL;
	static GetDefaultObject(): LevelExporterSTL;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterSTL;
	static C(Other: UObject | any): LevelExporterSTL;
}

declare class LevelExporterT3D extends Exporter { 
	static Load(ResourceName: string): LevelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): LevelExporterT3D;
	static GetDefaultObject(): LevelExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterT3D;
	static C(Other: UObject | any): LevelExporterT3D;
}

declare class LevelFactory extends Factory { 
	static Load(ResourceName: string): LevelFactory;
	static Find(Outer: UObject, ResourceName: string): LevelFactory;
	static GetDefaultObject(): LevelFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelFactory;
	static C(Other: UObject | any): LevelFactory;
}

declare class LevelThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): LevelThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): LevelThumbnailRenderer;
	static GetDefaultObject(): LevelThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelThumbnailRenderer;
	static C(Other: UObject | any): LevelThumbnailRenderer;
}

declare class LightmassDebugOptions { 
	bDebugMode: boolean;
	bStatsEnabled: boolean;
	bGatherBSPSurfacesAcrossComponents: boolean;
	CoplanarTolerance: number;
	bUseImmediateImport: boolean;
	bImmediateProcessMappings: boolean;
	bSortMappings: boolean;
	bDumpBinaryFiles: boolean;
	bDebugMaterials: boolean;
	bPadMappings: boolean;
	bDebugPaddings: boolean;
	bOnlyCalcDebugTexelMappings: boolean;
	bUseRandomColors: boolean;
	bColorBordersGreen: boolean;
	bColorByExecutionTime: boolean;
	ExecutionTimeDivisor: number;
	clone() : LightmassDebugOptions;
	static C(Other: UObject | any): LightmassDebugOptions;
}

declare class SwarmDebugOptions { 
	bDistributionEnabled: boolean;
	bForceContentExport: boolean;
	bInitialized: boolean;
	clone() : SwarmDebugOptions;
	static C(Other: UObject | any): SwarmDebugOptions;
}

declare class LightmassOptionsObject extends UObject { 
	DebugSettings: LightmassDebugOptions;
	SwarmSettings: SwarmDebugOptions;
	static Load(ResourceName: string): LightmassOptionsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassOptionsObject;
	static GetDefaultObject(): LightmassOptionsObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassOptionsObject;
	static C(Other: UObject | any): LightmassOptionsObject;
}

declare class LinearStairBuilder extends EditorBrushBuilder { 
	StepLength: number;
	StepHeight: number;
	StepWidth: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	static Load(ResourceName: string): LinearStairBuilder;
	static Find(Outer: UObject, ResourceName: string): LinearStairBuilder;
	static GetDefaultObject(): LinearStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinearStairBuilder;
	static C(Other: UObject | any): LinearStairBuilder;
}

declare class ListMaterialsUsedWithMeshEmittersCommandlet extends Commandlet { 
	static Load(ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static GetDefaultObject(): ListMaterialsUsedWithMeshEmittersCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListMaterialsUsedWithMeshEmittersCommandlet;
	static C(Other: UObject | any): ListMaterialsUsedWithMeshEmittersCommandlet;
}

declare class ListStaticMeshesImportedFromSpeedTreesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static GetDefaultObject(): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static C(Other: UObject | any): ListStaticMeshesImportedFromSpeedTreesCommandlet;
}

declare class LoadPackageCommandlet extends Commandlet { 
	static Load(ResourceName: string): LoadPackageCommandlet;
	static Find(Outer: UObject, ResourceName: string): LoadPackageCommandlet;
	static GetDefaultObject(): LoadPackageCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LoadPackageCommandlet;
	static C(Other: UObject | any): LoadPackageCommandlet;
}

declare class EditorParameterGroup { 
	GroupName: string;
	GroupAssociation: EMaterialParameterAssociation;
	Parameters: DEditorParameterValue[];
	GroupSortPriority: number;
	clone() : EditorParameterGroup;
	static C(Other: UObject | any): EditorParameterGroup;
}

declare class MaterialFunctionInstance extends MaterialFunctionInterface { 
	Parent: MaterialFunctionInterface;
	Base: MaterialFunctionInterface;
	ScalarParameterValues: ScalarParameterValue[];
	VectorParameterValues: VectorParameterValue[];
	TextureParameterValues: TextureParameterValue[];
	FontParameterValues: FontParameterValue[];
	StaticSwitchParameterValues: StaticSwitchParameter[];
	StaticComponentMaskParameterValues: StaticComponentMaskParameter[];
	RuntimeVirtualTextureParameterValues: RuntimeVirtualTextureParameterValue[];
	PreviewMaterial: MaterialInstanceConstant;
	static Load(ResourceName: string): MaterialFunctionInstance;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionInstance;
	static GetDefaultObject(): MaterialFunctionInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionInstance;
	static C(Other: UObject | any): MaterialFunctionInstance;
}

declare class LightmassParameterValue { 
	bOverride: boolean;
	clone() : LightmassParameterValue;
	static C(Other: UObject | any): LightmassParameterValue;
}

declare class LightmassBooleanParameterValue extends LightmassParameterValue { 
	ParameterValue: boolean;
	clone() : LightmassBooleanParameterValue;
	static C(Other: UObject | any): LightmassBooleanParameterValue;
}

declare class LightmassScalarParameterValue extends LightmassParameterValue { 
	ParameterValue: number;
	clone() : LightmassScalarParameterValue;
	static C(Other: UObject | any): LightmassScalarParameterValue;
}

declare class LightmassParameterizedMaterialSettings { 
	CastShadowAsMasked: LightmassBooleanParameterValue;
	EmissiveBoost: LightmassScalarParameterValue;
	DiffuseBoost: LightmassScalarParameterValue;
	ExportResolutionScale: LightmassScalarParameterValue;
	clone() : LightmassParameterizedMaterialSettings;
	static C(Other: UObject | any): LightmassParameterizedMaterialSettings;
}

declare class MaterialEditorInstanceConstant extends UObject { 
	PhysMaterial: PhysicalMaterial;
	Parent: MaterialInterface;
	ParameterGroups: EditorParameterGroup[];
	RefractionDepthBias: number;
	SubsurfaceProfile: SubsurfaceProfile;
	bOverrideSubsurfaceProfile: boolean;
	bOverrideBaseProperties: boolean;
	bIsFunctionPreviewMaterial: boolean;
	bIsFunctionInstanceDirty: boolean;
	BasePropertyOverrides: MaterialInstanceBasePropertyOverrides;
	SourceInstance: MaterialInstanceConstant;
	SourceFunction: MaterialFunctionInstance;
	VisibleExpressions: MaterialParameterInfo[];
	LightmassSettings: LightmassParameterizedMaterialSettings;
	bUseOldStyleMICEditorGroups: boolean;
	StoredLayerPreviews: MaterialInstanceConstant[];
	StoredBlendPreviews: MaterialInstanceConstant[];
	static Load(ResourceName: string): MaterialEditorInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorInstanceConstant;
	static GetDefaultObject(): MaterialEditorInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorInstanceConstant;
	static C(Other: UObject | any): MaterialEditorInstanceConstant;
}

declare class MaterialEditorMeshComponent extends StaticMeshComponent { 
	static Load(ResourceName: string): MaterialEditorMeshComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorMeshComponent;
	static GetDefaultObject(): MaterialEditorMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorMeshComponent;
	static C(Other: UObject | any): MaterialEditorMeshComponent;
}

declare class MaterialEditorOptions extends UObject { 
	bShowGrid: boolean;
	bHideUnusedConnectors: boolean;
	bRealtimeMaterialViewport: boolean;
	bRealtimeExpressionViewport: boolean;
	bLivePreviewUpdate: boolean;
	bHideUnrelatedNodes: boolean;
	bAlwaysRefreshAllPreviews: boolean;
	bUseUnsortedMenus: boolean;
	FavoriteExpressions: string[];
	static Load(ResourceName: string): MaterialEditorOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorOptions;
	static GetDefaultObject(): MaterialEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorOptions;
	static C(Other: UObject | any): MaterialEditorOptions;
}

declare class MaterialEditorPreviewParameters extends UObject { 
	ParameterGroups: EditorParameterGroup[];
	PreviewMaterial: Material;
	OriginalFunction: MaterialFunction;
	OriginalMaterial: Material;
	StoredLayerPreviews: MaterialInstanceConstant[];
	StoredBlendPreviews: MaterialInstanceConstant[];
	static Load(ResourceName: string): MaterialEditorPreviewParameters;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorPreviewParameters;
	static GetDefaultObject(): MaterialEditorPreviewParameters;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorPreviewParameters;
	static C(Other: UObject | any): MaterialEditorPreviewParameters;
}

declare class MaterialFactoryNew extends Factory { 
	InitialTexture: Texture;
	static Load(ResourceName: string): MaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFactoryNew;
	static GetDefaultObject(): MaterialFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFactoryNew;
	static C(Other: UObject | any): MaterialFactoryNew;
}

declare class MaterialFunctionFactoryNew extends Factory { 
	static Load(ResourceName: string): MaterialFunctionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionFactoryNew;
	static GetDefaultObject(): MaterialFunctionFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionFactoryNew;
	static C(Other: UObject | any): MaterialFunctionFactoryNew;
}

declare class MaterialFunctionInstanceFactory extends Factory { 
	InitialParent: MaterialFunctionInterface;
	static Load(ResourceName: string): MaterialFunctionInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionInstanceFactory;
	static GetDefaultObject(): MaterialFunctionInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionInstanceFactory;
	static C(Other: UObject | any): MaterialFunctionInstanceFactory;
}

declare class MaterialFunctionMaterialLayerInstanceFactory extends MaterialFunctionInstanceFactory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerInstanceFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerInstanceFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerInstanceFactory;
}

declare class MaterialFunctionMaterialLayerBlendInstanceFactory extends MaterialFunctionInstanceFactory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendInstanceFactory;
}

declare class MaterialFunctionMaterialLayerBlendFactory extends Factory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendFactory;
}

declare class MaterialFunctionMaterialLayerFactory extends Factory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerFactory;
}

declare class MaterialFunctionThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): MaterialFunctionThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionThumbnailRenderer;
	static GetDefaultObject(): MaterialFunctionThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionThumbnailRenderer;
	static C(Other: UObject | any): MaterialFunctionThumbnailRenderer;
}

declare class MaterialGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Base;
	static GetDefaultObject(): MaterialGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Base;
	static C(Other: UObject | any): MaterialGraphNode_Base;
}

declare class MaterialGraphNode_Root extends MaterialGraphNode_Base { 
	Material: Material;
	static Load(ResourceName: string): MaterialGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Root;
	static GetDefaultObject(): MaterialGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Root;
	static C(Other: UObject | any): MaterialGraphNode_Root;
}

declare class MaterialGraph extends EdGraph { 
	Material: Material;
	MaterialFunction: MaterialFunction;
	RootNode: MaterialGraphNode_Root;
	OriginalMaterialFullName: string;
	static Load(ResourceName: string): MaterialGraph;
	static Find(Outer: UObject, ResourceName: string): MaterialGraph;
	static GetDefaultObject(): MaterialGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraph;
	static C(Other: UObject | any): MaterialGraph;
}

declare class MaterialGraphNode extends MaterialGraphNode_Base { 
	MaterialExpression: MaterialExpression;
	static Load(ResourceName: string): MaterialGraphNode;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode;
	static GetDefaultObject(): MaterialGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode;
	static C(Other: UObject | any): MaterialGraphNode;
}

declare class MaterialGraphNode_Comment extends EdGraphNode_Comment { 
	MaterialExpressionComment: MaterialExpressionComment;
	static Load(ResourceName: string): MaterialGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Comment;
	static GetDefaultObject(): MaterialGraphNode_Comment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Comment;
	static C(Other: UObject | any): MaterialGraphNode_Comment;
}

declare class MaterialGraphNode_Knot extends MaterialGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_Knot;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Knot;
	static GetDefaultObject(): MaterialGraphNode_Knot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Knot;
	static C(Other: UObject | any): MaterialGraphNode_Knot;
}

declare class MaterialGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): MaterialGraphSchema;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphSchema;
	static GetDefaultObject(): MaterialGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphSchema;
	static C(Other: UObject | any): MaterialGraphSchema;
}

declare class MaterialImportHelpers extends UObject { 
	static Load(ResourceName: string): MaterialImportHelpers;
	static Find(Outer: UObject, ResourceName: string): MaterialImportHelpers;
	static GetDefaultObject(): MaterialImportHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialImportHelpers;
	static FindExistingMaterialFromSearchLocation(MaterialFullName: string,BasePackagePath: string,SearchLocation: EMaterialSearchLocation,OutError?: string): {OutError: string, $: MaterialInterface};
	static FindExistingMaterial(BasePath: string,MaterialFullName: string,bRecursivePaths: boolean,OutError?: string): {OutError: string, $: MaterialInterface};
	static C(Other: UObject | any): MaterialImportHelpers;
}

declare class MaterialInstanceConstantFactoryNew extends Factory { 
	InitialParent: MaterialInterface;
	static Load(ResourceName: string): MaterialInstanceConstantFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstantFactoryNew;
	static GetDefaultObject(): MaterialInstanceConstantFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstantFactoryNew;
	static C(Other: UObject | any): MaterialInstanceConstantFactoryNew;
}

declare class MaterialInstanceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): MaterialInstanceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceThumbnailRenderer;
	static GetDefaultObject(): MaterialInstanceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceThumbnailRenderer;
	static C(Other: UObject | any): MaterialInstanceThumbnailRenderer;
}

declare class MaterialParameterCollectionFactoryNew extends Factory { 
	static Load(ResourceName: string): MaterialParameterCollectionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollectionFactoryNew;
	static GetDefaultObject(): MaterialParameterCollectionFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollectionFactoryNew;
	static C(Other: UObject | any): MaterialParameterCollectionFactoryNew;
}

declare class MaterialStatsOptions extends UObject { 
	bPlatformUsed: number;
	bMaterialQualityUsed: number;
	static Load(ResourceName: string): MaterialStatsOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialStatsOptions;
	static GetDefaultObject(): MaterialStatsOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialStatsOptions;
	static C(Other: UObject | any): MaterialStatsOptions;
}

declare class MergeShaderPipelineCachesCommandlet extends Commandlet { 
	static Load(ResourceName: string): MergeShaderPipelineCachesCommandlet;
	static Find(Outer: UObject, ResourceName: string): MergeShaderPipelineCachesCommandlet;
	static GetDefaultObject(): MergeShaderPipelineCachesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MergeShaderPipelineCachesCommandlet;
	static C(Other: UObject | any): MergeShaderPipelineCachesCommandlet;
}

declare class ModelExporterT3D extends Exporter { 
	static Load(ResourceName: string): ModelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ModelExporterT3D;
	static GetDefaultObject(): ModelExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelExporterT3D;
	static C(Other: UObject | any): ModelExporterT3D;
}

declare class ModelFactory extends Factory { 
	static Load(ResourceName: string): ModelFactory;
	static Find(Outer: UObject, ResourceName: string): ModelFactory;
	static GetDefaultObject(): ModelFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelFactory;
	static C(Other: UObject | any): ModelFactory;
}

declare class NativeCodeGenCommandlet extends Commandlet { 
	static Load(ResourceName: string): NativeCodeGenCommandlet;
	static Find(Outer: UObject, ResourceName: string): NativeCodeGenCommandlet;
	static GetDefaultObject(): NativeCodeGenCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NativeCodeGenCommandlet;
	static C(Other: UObject | any): NativeCodeGenCommandlet;
}

declare class ObjectExporterT3D extends Exporter { 
	static Load(ResourceName: string): ObjectExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ObjectExporterT3D;
	static GetDefaultObject(): ObjectExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectExporterT3D;
	static C(Other: UObject | any): ObjectExporterT3D;
}

declare class ObjectLibraryFactory extends Factory { 
	static Load(ResourceName: string): ObjectLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): ObjectLibraryFactory;
	static GetDefaultObject(): ObjectLibraryFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibraryFactory;
	static C(Other: UObject | any): ObjectLibraryFactory;
}

declare class PackageFactory extends Factory { 
	static Load(ResourceName: string): PackageFactory;
	static Find(Outer: UObject, ResourceName: string): PackageFactory;
	static GetDefaultObject(): PackageFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageFactory;
	static C(Other: UObject | any): PackageFactory;
}

declare class PackageTools extends UObject { 
	static Load(ResourceName: string): PackageTools;
	static Find(Outer: UObject, ResourceName: string): PackageTools;
	static GetDefaultObject(): PackageTools;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageTools;
	static SanitizePackageName(InPackageName: string): string;
	static C(Other: UObject | any): PackageTools;
}

declare class PackFactory extends Factory { 
	static Load(ResourceName: string): PackFactory;
	static Find(Outer: UObject, ResourceName: string): PackFactory;
	static GetDefaultObject(): PackFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackFactory;
	static C(Other: UObject | any): PackFactory;
}

declare class PanelExtensionSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): PanelExtensionSubsystem;
	static Find(Outer: UObject, ResourceName: string): PanelExtensionSubsystem;
	static GetDefaultObject(): PanelExtensionSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PanelExtensionSubsystem;
	static C(Other: UObject | any): PanelExtensionSubsystem;
}

declare class ParticleSystemAuditCommandlet extends Commandlet { 
	HighSpawnRateOrBurstThreshold: number;
	FarLODDistanceTheshold: number;
	static Load(ResourceName: string): ParticleSystemAuditCommandlet;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemAuditCommandlet;
	static GetDefaultObject(): ParticleSystemAuditCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemAuditCommandlet;
	static C(Other: UObject | any): ParticleSystemAuditCommandlet;
}

declare class ParticleSystemFactoryNew extends Factory { 
	static Load(ResourceName: string): ParticleSystemFactoryNew;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemFactoryNew;
	static GetDefaultObject(): ParticleSystemFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemFactoryNew;
	static C(Other: UObject | any): ParticleSystemFactoryNew;
}

declare class ParticleSystemThumbnailRenderer extends TextureThumbnailRenderer { 
	NoImage: Texture2D;
	OutOfDate: Texture2D;
	static Load(ResourceName: string): ParticleSystemThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemThumbnailRenderer;
	static GetDefaultObject(): ParticleSystemThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemThumbnailRenderer;
	static C(Other: UObject | any): ParticleSystemThumbnailRenderer;
}

declare type EAnimationViewportCameraFollowMode = 'None' | 'Bounds' | 'Bone' | 'EAnimationViewportCameraFollowMode_MAX';
declare var EAnimationViewportCameraFollowMode : { None:'None',Bounds:'Bounds',Bone:'Bone',EAnimationViewportCameraFollowMode_MAX:'EAnimationViewportCameraFollowMode_MAX', };
declare class ViewportConfigOptions { 
	ViewModeIndex: EViewModeIndex;
	ViewFOV: number;
	CameraSpeedSetting: number;
	CameraSpeedScalar: number;
	CameraFollowMode: EAnimationViewportCameraFollowMode;
	CameraFollowBoneName: string;
	clone() : ViewportConfigOptions;
	static C(Other: UObject | any): ViewportConfigOptions;
}

declare class AssetEditorOptions { 
	Context: string;
	ViewportConfigs: ViewportConfigOptions;
	clone() : AssetEditorOptions;
	static C(Other: UObject | any): AssetEditorOptions;
}

declare class PersonaOptions extends UObject { 
	bAutoAlignFloorToMesh: boolean;
	bShowGrid: boolean;
	bHighlightOrigin: boolean;
	bMuteAudio: boolean;
	bUseAudioAttenuation: boolean;
	ShowMeshStats: number;
	DefaultLocalAxesSelection: any;
	DefaultBoneDrawSelection: any;
	SectionTimingNodeColor: LinearColor;
	NotifyTimingNodeColor: LinearColor;
	BranchingPointTimingNodeColor: LinearColor;
	bUseInlineSocketEditor: boolean;
	bFlattenSkeletonHierarchyWhenFiltering: boolean;
	bHideParentsWhenFiltering: boolean;
	bAllowPreviewMeshCollectionsToSelectFromDifferentSkeletons: boolean;
	bAllowPreviewMeshCollectionsToUseCustomAnimBP: boolean;
	bAllowMeshSectionSelection: boolean;
	NumFolderFiltersInAssetBrowser: any;
	AssetEditorOptions: AssetEditorOptions[];
	CurveEditorSnapInterval: number;
	TimelineScrubSnapValue: number;
	TimelineDisplayFormat: EFrameNumberDisplayFormats;
	bTimelineDisplayPercentage: boolean;
	bTimelineDisplayFormatSecondary: boolean;
	bTimelineDisplayCurveKeys: boolean;
	TimelineEnabledSnaps: string[];
	static Load(ResourceName: string): PersonaOptions;
	static Find(Outer: UObject, ResourceName: string): PersonaOptions;
	static GetDefaultObject(): PersonaOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaOptions;
	static C(Other: UObject | any): PersonaOptions;
}

declare class PhysicalMaterialFactoryNew extends Factory { 
	PhysicalMaterialClass: UnrealEngineClass;
	static Load(ResourceName: string): PhysicalMaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialFactoryNew;
	static GetDefaultObject(): PhysicalMaterialFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialFactoryNew;
	static C(Other: UObject | any): PhysicalMaterialFactoryNew;
}

declare class PhysicalMaterialMaskFactory extends Factory { 
	PhysicalMaterialMaskClass: UnrealEngineClass;
	static Load(ResourceName: string): PhysicalMaterialMaskFactory;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialMaskFactory;
	static GetDefaultObject(): PhysicalMaterialMaskFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialMaskFactory;
	static C(Other: UObject | any): PhysicalMaterialMaskFactory;
}

declare class PhysicalMaterialMaskThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): PhysicalMaterialMaskThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialMaskThumbnailRenderer;
	static GetDefaultObject(): PhysicalMaterialMaskThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialMaskThumbnailRenderer;
	static C(Other: UObject | any): PhysicalMaterialMaskThumbnailRenderer;
}

declare type EPhysicsAssetEditorRenderMode = 'Solid' | 'Wireframe' | 'None' | 'EPhysicsAssetEditorRenderMode_MAX';
declare var EPhysicsAssetEditorRenderMode : { Solid:'Solid',Wireframe:'Wireframe',None:'None',EPhysicsAssetEditorRenderMode_MAX:'EPhysicsAssetEditorRenderMode_MAX', };
declare type EPhysicsAssetEditorConstraintViewMode = 'None' | 'AllPositions' | 'AllLimits' | 'EPhysicsAssetEditorConstraintViewMode_MAX';
declare var EPhysicsAssetEditorConstraintViewMode : { None:'None',AllPositions:'AllPositions',AllLimits:'AllLimits',EPhysicsAssetEditorConstraintViewMode_MAX:'EPhysicsAssetEditorConstraintViewMode_MAX', };
declare class PhysicsAssetEditorOptions extends UObject { 
	PhysicsBlend: number;
	bUpdateJointsFromAnimation: boolean;
	PhysicsUpdateMode: EPhysicsTransformUpdateMode;
	PokePauseTime: number;
	PokeBlendTime: number;
	GravScale: number;
	GravityOverrideZ: number;
	bUseGravityOverride: boolean;
	MaxFPS: number;
	HandleLinearDamping: number;
	HandleLinearStiffness: number;
	HandleAngularDamping: number;
	HandleAngularStiffness: number;
	InterpolationSpeed: number;
	PokeStrength: number;
	bShowConstraintsAsPoints: boolean;
	bRenderOnlySelectedConstraints: boolean;
	ConstraintDrawSize: number;
	MeshViewMode: EPhysicsAssetEditorRenderMode;
	CollisionViewMode: EPhysicsAssetEditorRenderMode;
	ConstraintViewMode: EPhysicsAssetEditorConstraintViewMode;
	SimulationMeshViewMode: EPhysicsAssetEditorRenderMode;
	SimulationCollisionViewMode: EPhysicsAssetEditorRenderMode;
	SimulationConstraintViewMode: EPhysicsAssetEditorConstraintViewMode;
	CollisionOpacity: number;
	bSolidRenderingForSelectedOnly: boolean;
	bHideSimulatedBodies: boolean;
	bHideKinematicBodies: boolean;
	bResetClothWhenSimulating: boolean;
	static Load(ResourceName: string): PhysicsAssetEditorOptions;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetEditorOptions;
	static GetDefaultObject(): PhysicsAssetEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetEditorOptions;
	static C(Other: UObject | any): PhysicsAssetEditorOptions;
}

declare class PhysicsAssetFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): PhysicsAssetFactory;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetFactory;
	static GetDefaultObject(): PhysicsAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetFactory;
	static C(Other: UObject | any): PhysicsAssetFactory;
}

declare type EPhysAssetFitGeomType = 'EFG_Box' | 'EFG_Sphyl' | 'EFG_Sphere' | 'EFG_TaperedCapsule' | 'EFG_SingleConvexHull' | 'EFG_MultiConvexHull' | 'EFG_MAX';
declare var EPhysAssetFitGeomType : { EFG_Box:'EFG_Box',EFG_Sphyl:'EFG_Sphyl',EFG_Sphere:'EFG_Sphere',EFG_TaperedCapsule:'EFG_TaperedCapsule',EFG_SingleConvexHull:'EFG_SingleConvexHull',EFG_MultiConvexHull:'EFG_MultiConvexHull',EFG_MAX:'EFG_MAX', };
declare type EPhysAssetFitVertWeight = 'EVW_AnyWeight' | 'EVW_DominantWeight' | 'EVW_MAX';
declare var EPhysAssetFitVertWeight : { EVW_AnyWeight:'EVW_AnyWeight',EVW_DominantWeight:'EVW_DominantWeight',EVW_MAX:'EVW_MAX', };
declare class PhysAssetCreateParams { 
	MinBoneSize: number;
	MinWeldSize: number;
	GeomType: EPhysAssetFitGeomType;
	VertWeight: EPhysAssetFitVertWeight;
	bAutoOrientToBone: boolean;
	bCreateConstraints: boolean;
	bWalkPastSmall: boolean;
	bBodyForAll: boolean;
	bDisableCollisionsByDefault: boolean;
	AngularConstraintMode: EAngularConstraintMotion;
	HullCount: number;
	MaxHullVerts: number;
	clone() : PhysAssetCreateParams;
	static C(Other: UObject | any): PhysAssetCreateParams;
}

declare class PhysicsAssetGenerationSettings extends UObject { 
	CreateParams: PhysAssetCreateParams;
	static Load(ResourceName: string): PhysicsAssetGenerationSettings;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetGenerationSettings;
	static GetDefaultObject(): PhysicsAssetGenerationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetGenerationSettings;
	static C(Other: UObject | any): PhysicsAssetGenerationSettings;
}

declare class PhysicsAssetThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): PhysicsAssetThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetThumbnailRenderer;
	static GetDefaultObject(): PhysicsAssetThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetThumbnailRenderer;
	static C(Other: UObject | any): PhysicsAssetThumbnailRenderer;
}

declare class PkgInfoCommandlet extends Commandlet { 
	static Load(ResourceName: string): PkgInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): PkgInfoCommandlet;
	static GetDefaultObject(): PkgInfoCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PkgInfoCommandlet;
	static C(Other: UObject | any): PkgInfoCommandlet;
}

declare class PolysExporterOBJ extends Exporter { 
	static Load(ResourceName: string): PolysExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): PolysExporterOBJ;
	static GetDefaultObject(): PolysExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterOBJ;
	static C(Other: UObject | any): PolysExporterOBJ;
}

declare class PolysExporterT3D extends Exporter { 
	static Load(ResourceName: string): PolysExporterT3D;
	static Find(Outer: UObject, ResourceName: string): PolysExporterT3D;
	static GetDefaultObject(): PolysExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterT3D;
	static C(Other: UObject | any): PolysExporterT3D;
}

declare class PolysFactory extends Factory { 
	static Load(ResourceName: string): PolysFactory;
	static Find(Outer: UObject, ResourceName: string): PolysFactory;
	static GetDefaultObject(): PolysFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysFactory;
	static C(Other: UObject | any): PolysFactory;
}

declare class PopulateDialogueWaveFromCharacterSheetCommandlet extends Commandlet { 
	static Load(ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static Find(Outer: UObject, ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static GetDefaultObject(): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static C(Other: UObject | any): PopulateDialogueWaveFromCharacterSheetCommandlet;
}

declare class PoseAssetFactory extends Factory { 
	SourceAnimation: AnimSequence;
	PoseNames: string[];
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): PoseAssetFactory;
	static Find(Outer: UObject, ResourceName: string): PoseAssetFactory;
	static GetDefaultObject(): PoseAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseAssetFactory;
	static C(Other: UObject | any): PoseAssetFactory;
}

declare class PreviewMaterial extends Material { 
	static Load(ResourceName: string): PreviewMaterial;
	static Find(Outer: UObject, ResourceName: string): PreviewMaterial;
	static GetDefaultObject(): PreviewMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMaterial;
	static C(Other: UObject | any): PreviewMaterial;
}

declare class PreviewMeshCollectionFactory extends Factory { 
	CurrentSkeleton: any;
	static Load(ResourceName: string): PreviewMeshCollectionFactory;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollectionFactory;
	static GetDefaultObject(): PreviewMeshCollectionFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollectionFactory;
	static C(Other: UObject | any): PreviewMeshCollectionFactory;
}

declare type EProjectPackagingBuild = 'Always' | 'Never' | 'IfProjectHasCode' | 'IfEditorWasBuiltLocally' | 'EProjectPackagingBuild_MAX';
declare var EProjectPackagingBuild : { Always:'Always',Never:'Never',IfProjectHasCode:'IfProjectHasCode',IfEditorWasBuiltLocally:'IfEditorWasBuiltLocally',EProjectPackagingBuild_MAX:'EProjectPackagingBuild_MAX', };
declare type EProjectPackagingBuildConfigurations = 'PPBC_Debug' | 'PPBC_DebugGame' | 'PPBC_Development' | 'PPBC_Test' | 'PPBC_Shipping' | 'PPBC_MAX';
declare var EProjectPackagingBuildConfigurations : { PPBC_Debug:'PPBC_Debug',PPBC_DebugGame:'PPBC_DebugGame',PPBC_Development:'PPBC_Development',PPBC_Test:'PPBC_Test',PPBC_Shipping:'PPBC_Shipping',PPBC_MAX:'PPBC_MAX', };
declare type EProjectPackagingBlueprintNativizationMethod = 'Disabled' | 'Inclusive' | 'Exclusive' | 'EProjectPackagingBlueprintNativizationMethod_MAX';
declare var EProjectPackagingBlueprintNativizationMethod : { Disabled:'Disabled',Inclusive:'Inclusive',Exclusive:'Exclusive',EProjectPackagingBlueprintNativizationMethod_MAX:'EProjectPackagingBlueprintNativizationMethod_MAX', };
declare type EProjectPackagingInternationalizationPresets = 'English' | 'EFIGS' | 'EFIGSCJK' | 'CJK' | 'All' | 'EProjectPackagingInternationalizationPresets_MAX';
declare var EProjectPackagingInternationalizationPresets : { English:'English',EFIGS:'EFIGS',EFIGSCJK:'EFIGSCJK',CJK:'CJK',All:'All',EProjectPackagingInternationalizationPresets_MAX:'EProjectPackagingInternationalizationPresets_MAX', };
declare class ProjectPackagingSettings extends UObject { 
	Build: EProjectPackagingBuild;
	BuildConfiguration: EProjectPackagingBuildConfigurations;
	BuildTarget: string;
	StagingDirectory: DirectoryPath;
	FullRebuild: boolean;
	ForDistribution: boolean;
	IncludeDebugFiles: boolean;
	BlueprintNativizationMethod: EProjectPackagingBlueprintNativizationMethod;
	NativizeBlueprintAssets: FilePath[];
	bIncludeNativizedAssetsInProjectGeneration: boolean;
	bExcludeMonolithicEngineHeadersInNativizedCode: boolean;
	UsePakFile: boolean;
	bUseIoStore: boolean;
	bGenerateChunks: boolean;
	bGenerateNoChunks: boolean;
	bChunkHardReferencesOnly: boolean;
	bForceOneChunkPerFile: boolean;
	MaxChunkSize: any;
	bBuildHttpChunkInstallData: boolean;
	HttpChunkInstallDataDirectory: DirectoryPath;
	PakFileCompressionFormats: string;
	PakFileAdditionalCompressionOptions: string;
	HttpChunkInstallDataVersion: string;
	IncludePrerequisites: boolean;
	IncludeAppLocalPrerequisites: boolean;
	bShareMaterialShaderCode: boolean;
	bDeterministicShaderCodeOrder: boolean;
	bSharedMaterialNativeLibraries: boolean;
	ApplocalPrerequisitesDirectory: DirectoryPath;
	IncludeCrashReporter: boolean;
	InternationalizationPreset: EProjectPackagingInternationalizationPresets;
	CulturesToStage: string[];
	LocalizationTargetsToChunk: string[];
	LocalizationTargetCatchAllChunkId: number;
	bCookAll: boolean;
	bCookMapsOnly: boolean;
	bCompressed: boolean;
	bEncryptIniFiles: boolean;
	bEncryptPakIndex: boolean;
	GenerateEarlyDownloaderPakFile: boolean;
	bSkipEditorContent: boolean;
	bSkipMovies: boolean;
	UFSMovies: string[];
	NonUFSMovies: string[];
	CompressedChunkWildcard: string[];
	IniKeyBlacklist: string[];
	IniSectionBlacklist: string[];
	EarlyDownloaderPakFileFiles: string[];
	MapsToCook: FilePath[];
	DirectoriesToAlwaysCook: DirectoryPath[];
	DirectoriesToNeverCook: DirectoryPath[];
	TestDirectoriesToNotSearch: DirectoryPath[];
	DirectoriesToAlwaysStageAsUFS: DirectoryPath[];
	DirectoriesToAlwaysStageAsNonUFS: DirectoryPath[];
	DirectoriesToAlwaysStageAsUFSServer: DirectoryPath[];
	DirectoriesToAlwaysStageAsNonUFSServer: DirectoryPath[];
	static Load(ResourceName: string): ProjectPackagingSettings;
	static Find(Outer: UObject, ResourceName: string): ProjectPackagingSettings;
	static GetDefaultObject(): ProjectPackagingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectPackagingSettings;
	static C(Other: UObject | any): ProjectPackagingSettings;
}

declare class PropertyEditorTestInstancedObject extends UObject { 
	Number: number;
	static Load(ResourceName: string): PropertyEditorTestInstancedObject;
	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestInstancedObject;
	static GetDefaultObject(): PropertyEditorTestInstancedObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestInstancedObject;
	static C(Other: UObject | any): PropertyEditorTestInstancedObject;
}

declare type PropertyEditorTestEnum = 'PropertyEditorTest_Enum1' | 'PropertyEditorTest_Enum2' | 'PropertyEditorTest_Enum3' | 'PropertyEditorTest_Enum4' | 'PropertyEditorTest_Enum5' | 'PropertyEditorTest_Enum6' | 'PropertyEditorTest_MAX';
declare var PropertyEditorTestEnum : { PropertyEditorTest_Enum1:'PropertyEditorTest_Enum1',PropertyEditorTest_Enum2:'PropertyEditorTest_Enum2',PropertyEditorTest_Enum3:'PropertyEditorTest_Enum3',PropertyEditorTest_Enum4:'PropertyEditorTest_Enum4',PropertyEditorTest_Enum5:'PropertyEditorTest_Enum5',PropertyEditorTest_Enum6:'PropertyEditorTest_Enum6',PropertyEditorTest_MAX:'PropertyEditorTest_MAX', };
declare type EditColor = 'Red' | 'Orange' | 'Yellow' | 'Green' | 'Blue' | 'Indigo' | 'Violet' | 'Pink' | 'Magenta' | 'Cyan' | 'EditColor_MAX';
declare var EditColor : { Red:'Red',Orange:'Orange',Yellow:'Yellow',Green:'Green',Blue:'Blue',Indigo:'Indigo',Violet:'Violet',Pink:'Pink',Magenta:'Magenta',Cyan:'Cyan',EditColor_MAX:'EditColor_MAX', };
declare class PropertyEditorTestSubStruct { 
	FirstProperty: number;
	SecondProperty: number;
	CustomizedStructInsideUncustomizedStruct: LinearColor;
	CustomizedStructInsideUncustomizedStruct2: SoftObjectPath;
	clone() : PropertyEditorTestSubStruct;
	static C(Other: UObject | any): PropertyEditorTestSubStruct;
}

declare class PropertyEditorTestBasicStruct { 
	IntPropertyInsideAStruct: number;
	FloatPropertyInsideAStruct: number;
	ObjectPropertyInsideAStruct: UObject;
	InnerStruct: PropertyEditorTestSubStruct;
	clone() : PropertyEditorTestBasicStruct;
	static C(Other: UObject | any): PropertyEditorTestBasicStruct;
}

declare class PropertyEditorTestInstancedStruct { 
	UObject: PropertyEditorTestInstancedObject;
	clone() : PropertyEditorTestInstancedStruct;
	static C(Other: UObject | any): PropertyEditorTestInstancedStruct;
}

declare class PropertyEditTestTextStruct { 
	NormalProperty: string;
	clone() : PropertyEditTestTextStruct;
	static C(Other: UObject | any): PropertyEditTestTextStruct;
}

declare class DateTime { 
	clone() : DateTime;
	static C(Other: UObject | any): DateTime;
	AsDate_DateTime(): string;
	AsDateTime_DateTime(): string;
	AsTime_DateTime(): string;
	AsTimeZoneDate_DateTime(InTimeZone: string): string;
	AsTimeZoneDateTime_DateTime(InTimeZone: string): string;
	AsTimeZoneTime_DateTime(InTimeZone: string): string;
	Add_DateTimeDateTime(B: DateTime): DateTime;
	Add_DateTimeTimespan(B: Timespan): DateTime;
	BreakDateTime(Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	EqualEqual_DateTimeDateTime(B: DateTime): boolean;
	GetDate(): DateTime;
	GetDay(): number;
	GetDayOfYear(): number;
	GetHour(): number;
	GetHour12(): number;
	GetMillisecond(): number;
	GetMinute(): number;
	GetMonth(): number;
	GetSecond(): number;
	GetTimeOfDay(): Timespan;
	GetYear(): number;
	Greater_DateTimeDateTime(B: DateTime): boolean;
	GreaterEqual_DateTimeDateTime(B: DateTime): boolean;
	IsAfternoon(): boolean;
	IsMorning(): boolean;
	Less_DateTimeDateTime(B: DateTime): boolean;
	LessEqual_DateTimeDateTime(B: DateTime): boolean;
	NotEqual_DateTimeDateTime(B: DateTime): boolean;
	Subtract_DateTimeDateTime(B: DateTime): Timespan;
	Subtract_DateTimeTimespan(B: Timespan): DateTime;
	ScheduleLocalNotificationAtTime(LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
	ScheduleLocalNotificationBadgeAtTime(LocalTime: boolean,ActivationEvent: string): number;
	static AsDate_DateTime(InDateTime: DateTime): string;
	static AsDateTime_DateTime(In: DateTime): string;
	static AsTime_DateTime(In: DateTime): string;
	static AsTimeZoneDate_DateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimeZoneDateTime_DateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimeZoneTime_DateTime(InDateTime: DateTime,InTimeZone: string): string;
	static Add_DateTimeDateTime(A: DateTime,B: DateTime): DateTime;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static EqualEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GetDate(A: DateTime): DateTime;
	static GetDay(A: DateTime): number;
	static GetDayOfYear(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetHour12(A: DateTime): number;
	static GetMillisecond(A: DateTime): number;
	static GetMinute(A: DateTime): number;
	static GetMonth(A: DateTime): number;
	static GetSecond(A: DateTime): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetYear(A: DateTime): number;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static IsMorning(A: DateTime): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static NotEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): number;
	static DateTimeMaxValue(): DateTime;
	static DateTimeMinValue(): DateTime;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static Now(): DateTime;
	static Today(): DateTime;
	static UtcNow(): DateTime;
}

declare class PropertyEditorTestInlineEditCondition { 
	InlineEditCondition: boolean;
	HasInlineEditCondition: number;
	clone() : PropertyEditorTestInlineEditCondition;
	static C(Other: UObject | any): PropertyEditorTestInlineEditCondition;
}

declare class PropertyEditorTestObject extends UObject { 
	Int8Property: any;
	Int16Property: any;
	Int32Property: number;
	Int64Property: any;
	ByteProperty: number;
	UnsignedInt16Property: any;
	UnsignedInt32Property: any;
	UnsignedInt64Property: any;
	FloatProperty: number;
	DoubleProperty: any;
	NameProperty: string;
	BoolProperty: boolean;
	StringProperty: string;
	TextProperty: string;
	IntPointProperty: IntPoint;
	Vector3Property: Vector;
	Vector2Property: Vector2D;
	Vector4Property: Vector4;
	RotatorProperty: Rotator;
	ObjectProperty: UObject;
	LinearColorProperty: LinearColor;
	ColorProperty: Color;
	EnumByteProperty: PropertyEditorTestEnum;
	EnumProperty: EditColor;
	MatrixProperty: Matrix;
	TransformProperty: Transform;
	ClassProperty: UnrealEngineClass;
	ClassPropertyWithAllowed: UnrealEngineClass;
	ClassPropertyWithDisallowed: UnrealEngineClass;
	SubclassOfTexture: UnrealEngineClass;
	SubclassOfWithAllowed: UnrealEngineClass;
	SubclassOfWithDisallowed: UnrealEngineClass;
	AssetPointerWithAllowedAndWhitespace: UObject;
	IntProperty32Array: number[];
	BytePropertyArray: number[];
	FloatPropertyArray: number[];
	NamePropertyArray: string[];
	BoolPropertyArray: boolean[];
	StringPropertyArray: string[];
	TextPropertyArray: string[];
	Vector3PropertyArray: Vector[];
	Vector2PropertyArray: Vector2D[];
	Vector4PropertyArray: Vector4[];
	RotatorPropertyArray: Rotator[];
	ObjectPropertyArray: UObject[];
	ActorPropertyArray: Actor[];
	LinearColorPropertyArray: LinearColor[];
	ColorPropertyArray: Color[];
	EnumPropertyArray: PropertyEditorTestEnum[];
	StructPropertyArray: PropertyEditorTestBasicStruct[];
	StructPropertyArrayWithTitle: PropertyEditorTestBasicStruct[];
	InstancedStructArray: PropertyEditorTestInstancedStruct[];
	InstancedUObjectArray: PropertyEditorTestInstancedObject[];
	FixedArrayOfInts: number[];
	StaticArrayOfInts: number;
	StaticArrayOfIntsWithEnumLabels: number;
	FloatPropertyWithClampedRange: number;
	IntPropertyWithClampedRange: number;
	IntThatCannotBeChanged: number;
	StringThatCannotBeChanged: string;
	ObjectThatCannotBeChanged: PrimitiveComponent;
	EnumBitflags: number;
	StringPasswordProperty: string;
	TextPasswordProperty: string;
	ThisIsBrokenIfItsVisibleInADetailsView: PropertyEditorTestBasicStruct;
	StructWithMultipleInstances1: PropertyEditorTestBasicStruct;
	bEditConditionStructWithMultipleInstances2: boolean;
	StructWithMultipleInstances2: PropertyEditorTestBasicStruct;
	RichCurve: RichCurve;
	AssetReferenceCustomStruct: SoftObjectPath;
	AssetReferenceCustomStructWithThumbnail: SoftObjectPath;
	ExactlyPointLightActorReference: SoftObjectPath;
	LightActorReference: SoftObjectPath;
	ExactPointOrSpotLightActorReference: SoftObjectPath;
	LightOrStaticMeshActorReference: SoftObjectPath;
	NotLightActorReference: SoftObjectPath;
	MaterialOrTextureAssetReference: SoftObjectPath;
	ActorWithMetaClass: SoftObjectPath;
	DisabledByCanEditChange: SoftObjectPath;
	bEditCondition: boolean;
	SimplePropertyWithEditCondition: number;
	bEditConditionAssetReferenceCustomStructWithEditCondition: boolean;
	AssetReferenceCustomStructWithEditCondition: SoftObjectPath;
	ArrayOfStructs: PropertyEditorTestBasicStruct[];
	struct: PropertyEditTestTextStruct;
	EditInlineNewStaticMeshComponent: StaticMeshComponent;
	ArrayOfEditInlineNewSMCs: StaticMeshComponent[];
	TextureProp: Texture;
	StaticMeshProp: StaticMesh;
	AnyMaterialInterface: MaterialInterface;
	OnlyActorsAllowed: Actor;
	Int32Set: any;
	FloatSet: any;
	StringSet: any;
	ObjectSet: any;
	ActorSet: any;
	EditColorSet: any;
	NameSet: any;
	Int32ToStringMap: any;
	StringToColorMap: any;
	Int32ToStructMap: any;
	StringToFloatMap: any;
	StringToObjectMap: any;
	StringToActorMap: any;
	ObjectToInt32Map: any;
	ObjectToColorMap: any;
	IntToEnumMap: any;
	NameToNameMap: any;
	NameToObjectMap: any;
	NameToCustomMap: any;
	NameToColorMap: any;
	IntToCustomMap: any;
	IntToSubStructMap: any;
	LinearColorSet: any;
	VectorSet: any;
	LinearColorToStringMap: any;
	VectorToFloatMap: any;
	LinearColorToVectorMap: any;
	BlendableInterface: any;
	AnimClassInterface: any;
	LightPropagationVolumeBlendable: any;
	TextureOrBlendableInterface: UObject;
	bSubcategory: boolean;
	bSubcategoryAdvanced: boolean;
	bSubcategoryFooSimple: boolean;
	bSubcategoryFooAdvanced: boolean;
	bSubcategoryBarSimple: boolean;
	bSubcategoryBarAdvanced: boolean;
	bSubcategoryLast: boolean;
	bEnablesNext: boolean;
	bEnabledByPrevious: boolean;
	EnumEditCondition: EditColor;
	bEnabledWhenBlue: boolean;
	bEnabledWhenPink: boolean;
	EnumAsByteEditCondition: PropertyEditorTestEnum;
	bEnabledWhenEnumIs2: boolean;
	bEnabledWhenEnumIs4: boolean;
	IntegerEditCondition: number;
	bEnabledWhenIntGreaterOrEqual5: boolean;
	bEnabledWhenIntLessOrEqual10: boolean;
	FloatEditCondition: number;
	bEnabledWhenFloatGreaterThan5: boolean;
	bEnabledWhenFloatLessThan10: boolean;
	bEditConditionForArrays: boolean;
	ArrayWithEditCondition: Texture2D[];
	ArrayOfStructsWithEditCondition: PropertyEditorTestBasicStruct[];
	bEditConditionForFixedArray: boolean;
	FixedArrayWithEditCondition: string;
	EditConditionFlags: any;
	bEnabledWhenFlagsHasTwoOrFour: boolean;
	bDisabledWhenFlagsIsOdd: boolean;
	InlineProperty: EComponentMobility;
	PropertyThatHides: EComponentMobility;
	bVisibleWhenStatic: boolean;
	VisibleWhenStationary: number;
	DateTime: DateTime;
	bInlineEditConditionWithoutMetaToggle: boolean;
	InlineEditConditionWithoutMeta: number;
	bInlineEditConditionWithMetaToggle: boolean;
	InlineEditConditionWithMeta: number;
	bInlineEditConditionNotEditable: boolean;
	HasNonEditableInlineCondition: number;
	bSharedEditCondition: boolean;
	UsesSharedEditCondition1: number;
	UsesSharedEditCondition2: number;
	StructWithInlineCondition: PropertyEditorTestInlineEditCondition;
	ArrayOfStructsWithInlineCondition: PropertyEditorTestInlineEditCondition[];
	static Load(ResourceName: string): PropertyEditorTestObject;
	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestObject;
	static GetDefaultObject(): PropertyEditorTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestObject;
	static C(Other: UObject | any): PropertyEditorTestObject;
}

declare class BlueprintPropertyTestObject extends UObject { 
	ShouldBeHidden: number;
	ShouldBeVisible: number;
	static Load(ResourceName: string): BlueprintPropertyTestObject;
	static Find(Outer: UObject, ResourceName: string): BlueprintPropertyTestObject;
	static GetDefaultObject(): BlueprintPropertyTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPropertyTestObject;
	static C(Other: UObject | any): BlueprintPropertyTestObject;
}

declare class BlueprintPropertyContainerTestObject extends UObject { 
	Array: BlueprintPropertyTestObject[];
	static Load(ResourceName: string): BlueprintPropertyContainerTestObject;
	static Find(Outer: UObject, ResourceName: string): BlueprintPropertyContainerTestObject;
	static GetDefaultObject(): BlueprintPropertyContainerTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPropertyContainerTestObject;
	static C(Other: UObject | any): BlueprintPropertyContainerTestObject;
}

declare class TestSparseClassDataBase extends UObject { 
	static Load(ResourceName: string): TestSparseClassDataBase;
	static Find(Outer: UObject, ResourceName: string): TestSparseClassDataBase;
	static GetDefaultObject(): TestSparseClassDataBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestSparseClassDataBase;
	static C(Other: UObject | any): TestSparseClassDataBase;
}

declare class TestSparseClassData extends TestSparseClassDataBase { 
	static Load(ResourceName: string): TestSparseClassData;
	static Find(Outer: UObject, ResourceName: string): TestSparseClassData;
	static GetDefaultObject(): TestSparseClassData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestSparseClassData;
	static C(Other: UObject | any): TestSparseClassData;
}

declare class ReimportCurveFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportCurveFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveFactory;
	static GetDefaultObject(): ReimportCurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveFactory;
	static C(Other: UObject | any): ReimportCurveFactory;
}

declare class ReimportCurveTableFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportCurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveTableFactory;
	static GetDefaultObject(): ReimportCurveTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveTableFactory;
	static C(Other: UObject | any): ReimportCurveTableFactory;
}

declare class ReimportDataTableFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportDataTableFactory;
	static GetDefaultObject(): ReimportDataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportDataTableFactory;
	static C(Other: UObject | any): ReimportDataTableFactory;
}

declare class ReimportFbxAnimSequenceFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxAnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxAnimSequenceFactory;
	static GetDefaultObject(): ReimportFbxAnimSequenceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxAnimSequenceFactory;
	static C(Other: UObject | any): ReimportFbxAnimSequenceFactory;
}

declare class ReimportFbxSceneFactory extends FbxSceneImportFactory { 
	static Load(ResourceName: string): ReimportFbxSceneFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSceneFactory;
	static GetDefaultObject(): ReimportFbxSceneFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSceneFactory;
	ScriptReimportHelper(Obj: UObject): void;
	static C(Other: UObject | any): ReimportFbxSceneFactory;
}

declare class ReimportFbxSkeletalMeshFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static GetDefaultObject(): ReimportFbxSkeletalMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSkeletalMeshFactory;
	static C(Other: UObject | any): ReimportFbxSkeletalMeshFactory;
}

declare class ReimportFbxStaticMeshFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxStaticMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxStaticMeshFactory;
	static GetDefaultObject(): ReimportFbxStaticMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxStaticMeshFactory;
	static C(Other: UObject | any): ReimportFbxStaticMeshFactory;
}

declare class TextureFactory extends Factory { 
	NoCompression: boolean;
	NoAlpha: boolean;
	bDeferCompression: boolean;
	CompressionSettings: TextureCompressionSettings;
	bCreateMaterial: boolean;
	bRGBToBaseColor: boolean;
	bRGBToEmissive: boolean;
	bAlphaToRoughness: boolean;
	bAlphaToEmissive: boolean;
	bAlphaToOpacity: boolean;
	bAlphaToOpacityMask: boolean;
	bTwoSided: boolean;
	Blending: EBlendMode;
	ShadingModel: EMaterialShadingModel;
	MipGenSettings: TextureMipGenSettings;
	LODGroup: TextureGroup;
	bDitherMipMapAlpha: boolean;
	AlphaCoverageThresholds: Vector4;
	bPreserveBorder: boolean;
	bFlipNormalMapGreenChannel: boolean;
	bUsingExistingSettings: boolean;
	bUseHashAsGuid: boolean;
	UdimRegexPattern: string;
	static Load(ResourceName: string): TextureFactory;
	static Find(Outer: UObject, ResourceName: string): TextureFactory;
	static GetDefaultObject(): TextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureFactory;
	static C(Other: UObject | any): TextureFactory;
}

declare class ReimportTextureFactory extends TextureFactory { 
	pOriginalTex: Texture;
	static Load(ResourceName: string): ReimportTextureFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportTextureFactory;
	static GetDefaultObject(): ReimportTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportTextureFactory;
	static C(Other: UObject | any): ReimportTextureFactory;
}

declare class VectorFieldStaticFactory extends Factory { 
	static Load(ResourceName: string): VectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStaticFactory;
	static GetDefaultObject(): VectorFieldStaticFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStaticFactory;
	static C(Other: UObject | any): VectorFieldStaticFactory;
}

declare class ReimportVectorFieldStaticFactory extends VectorFieldStaticFactory { 
	static Load(ResourceName: string): ReimportVectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportVectorFieldStaticFactory;
	static GetDefaultObject(): ReimportVectorFieldStaticFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportVectorFieldStaticFactory;
	static C(Other: UObject | any): ReimportVectorFieldStaticFactory;
}

declare class RenderTargetExporterHDR extends Exporter { 
	static Load(ResourceName: string): RenderTargetExporterHDR;
	static Find(Outer: UObject, ResourceName: string): RenderTargetExporterHDR;
	static GetDefaultObject(): RenderTargetExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RenderTargetExporterHDR;
	static C(Other: UObject | any): RenderTargetExporterHDR;
}

declare class ReplaceActorCommandlet extends Commandlet { 
	static Load(ResourceName: string): ReplaceActorCommandlet;
	static Find(Outer: UObject, ResourceName: string): ReplaceActorCommandlet;
	static GetDefaultObject(): ReplaceActorCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaceActorCommandlet;
	static C(Other: UObject | any): ReplaceActorCommandlet;
}

declare class ReplaceAssetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ReplaceAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ReplaceAssetsCommandlet;
	static GetDefaultObject(): ReplaceAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaceAssetsCommandlet;
	static C(Other: UObject | any): ReplaceAssetsCommandlet;
}

declare class SavePackageUtilitiesCommandlet extends Commandlet { 
	static Load(ResourceName: string): SavePackageUtilitiesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SavePackageUtilitiesCommandlet;
	static GetDefaultObject(): SavePackageUtilitiesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SavePackageUtilitiesCommandlet;
	static C(Other: UObject | any): SavePackageUtilitiesCommandlet;
}

declare class SceneThumbnailInfo extends ThumbnailInfo { 
	OrbitPitch: number;
	OrbitYaw: number;
	OrbitZoom: number;
	static Load(ResourceName: string): SceneThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfo;
	static GetDefaultObject(): SceneThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfo;
	static C(Other: UObject | any): SceneThumbnailInfo;
}

declare type EThumbnailPrimType = 'TPT_None' | 'TPT_Sphere' | 'TPT_Cube' | 'TPT_Plane' | 'TPT_Cylinder' | 'TPT_MAX';
declare var EThumbnailPrimType : { TPT_None:'TPT_None',TPT_Sphere:'TPT_Sphere',TPT_Cube:'TPT_Cube',TPT_Plane:'TPT_Plane',TPT_Cylinder:'TPT_Cylinder',TPT_MAX:'TPT_MAX', };
declare class SceneThumbnailInfoWithPrimitive extends SceneThumbnailInfo { 
	PrimitiveType: EThumbnailPrimType;
	PreviewMesh: SoftObjectPath;
	bUserModifiedShape: boolean;
	static Load(ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static GetDefaultObject(): SceneThumbnailInfoWithPrimitive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfoWithPrimitive;
	static C(Other: UObject | any): SceneThumbnailInfoWithPrimitive;
}

declare class EditorViewportViewMenuContext extends UObject { 
	static Load(ResourceName: string): EditorViewportViewMenuContext;
	static Find(Outer: UObject, ResourceName: string): EditorViewportViewMenuContext;
	static GetDefaultObject(): EditorViewportViewMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorViewportViewMenuContext;
	static C(Other: UObject | any): EditorViewportViewMenuContext;
}

declare class SequenceExporterT3D extends Exporter { 
	static Load(ResourceName: string): SequenceExporterT3D;
	static Find(Outer: UObject, ResourceName: string): SequenceExporterT3D;
	static GetDefaultObject(): SequenceExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceExporterT3D;
	static C(Other: UObject | any): SequenceExporterT3D;
}

declare class ShaderCodeLibraryToolsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ShaderCodeLibraryToolsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ShaderCodeLibraryToolsCommandlet;
	static GetDefaultObject(): ShaderCodeLibraryToolsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderCodeLibraryToolsCommandlet;
	static C(Other: UObject | any): ShaderCodeLibraryToolsCommandlet;
}

declare class ShaderPipelineCacheToolsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ShaderPipelineCacheToolsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ShaderPipelineCacheToolsCommandlet;
	static GetDefaultObject(): ShaderPipelineCacheToolsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderPipelineCacheToolsCommandlet;
	static C(Other: UObject | any): ShaderPipelineCacheToolsCommandlet;
}

declare type ESheetAxis = 'AX_Horizontal' | 'AX_XAxis' | 'AX_YAxis' | 'AX_MAX';
declare var ESheetAxis : { AX_Horizontal:'AX_Horizontal',AX_XAxis:'AX_XAxis',AX_YAxis:'AX_YAxis',AX_MAX:'AX_MAX', };
declare class SheetBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	XSegments: number;
	YSegments: number;
	Axis: ESheetAxis;
	GroupName: string;
	static Load(ResourceName: string): SheetBuilder;
	static Find(Outer: UObject, ResourceName: string): SheetBuilder;
	static GetDefaultObject(): SheetBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SheetBuilder;
	static C(Other: UObject | any): SheetBuilder;
}

declare class SkeletalMeshEditorSettings extends UObject { 
	AnimPreviewFloorColor: Color;
	AnimPreviewSkyColor: Color;
	AnimPreviewSkyBrightness: number;
	AnimPreviewLightBrightness: number;
	AnimPreviewLightingDirection: Rotator;
	AnimPreviewDirectionalColor: Color;
	static Load(ResourceName: string): SkeletalMeshEditorSettings;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshEditorSettings;
	static GetDefaultObject(): SkeletalMeshEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshEditorSettings;
	static C(Other: UObject | any): SkeletalMeshEditorSettings;
}

declare class SkeletalMeshExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): SkeletalMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshExporterFBX;
	static GetDefaultObject(): SkeletalMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshExporterFBX;
	static C(Other: UObject | any): SkeletalMeshExporterFBX;
}

declare class SkeletalMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SkeletalMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshThumbnailRenderer;
	static GetDefaultObject(): SkeletalMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshThumbnailRenderer;
	static C(Other: UObject | any): SkeletalMeshThumbnailRenderer;
}

declare class SkeletalMeshToolMenuContext extends UObject { 
	static Load(ResourceName: string): SkeletalMeshToolMenuContext;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshToolMenuContext;
	static GetDefaultObject(): SkeletalMeshToolMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshToolMenuContext;
	static C(Other: UObject | any): SkeletalMeshToolMenuContext;
}

declare class SkeletonFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): SkeletonFactory;
	static Find(Outer: UObject, ResourceName: string): SkeletonFactory;
	static GetDefaultObject(): SkeletonFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletonFactory;
	static C(Other: UObject | any): SkeletonFactory;
}

declare class SlateBrushAssetFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SlateBrushAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateBrushAssetFactory;
	static GetDefaultObject(): SlateBrushAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAssetFactory;
	static C(Other: UObject | any): SlateBrushAssetFactory;
}

declare class SlateBrushThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SlateBrushThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SlateBrushThumbnailRenderer;
	static GetDefaultObject(): SlateBrushThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushThumbnailRenderer;
	static C(Other: UObject | any): SlateBrushThumbnailRenderer;
}

declare class SlateWidgetStyleAssetFactory extends Factory { 
	StyleType: UnrealEngineClass;
	static Load(ResourceName: string): SlateWidgetStyleAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAssetFactory;
	static GetDefaultObject(): SlateWidgetStyleAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAssetFactory;
	static C(Other: UObject | any): SlateWidgetStyleAssetFactory;
}

declare class SoundExporterOGG extends Exporter { 
	static Load(ResourceName: string): SoundExporterOGG;
	static Find(Outer: UObject, ResourceName: string): SoundExporterOGG;
	static GetDefaultObject(): SoundExporterOGG;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterOGG;
	static C(Other: UObject | any): SoundExporterOGG;
}

declare class SoundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundExporterWAV;
	static GetDefaultObject(): SoundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterWAV;
	static C(Other: UObject | any): SoundExporterWAV;
}

declare class SoundSurroundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundSurroundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundExporterWAV;
	static GetDefaultObject(): SoundSurroundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundExporterWAV;
	static C(Other: UObject | any): SoundSurroundExporterWAV;
}

declare class SoundWaveThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): SoundWaveThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SoundWaveThumbnailRenderer;
	static GetDefaultObject(): SoundWaveThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveThumbnailRenderer;
	static C(Other: UObject | any): SoundWaveThumbnailRenderer;
}

declare class SpiralStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepWidth: number;
	StepHeight: number;
	StepThickness: number;
	NumStepsPer360: number;
	NumSteps: number;
	GroupName: string;
	SlopedCeiling: boolean;
	SlopedFloor: boolean;
	CounterClockwise: boolean;
	static Load(ResourceName: string): SpiralStairBuilder;
	static Find(Outer: UObject, ResourceName: string): SpiralStairBuilder;
	static GetDefaultObject(): SpiralStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpiralStairBuilder;
	static C(Other: UObject | any): SpiralStairBuilder;
}

declare class StabilizeLocalizationKeysCommandlet extends Commandlet { 
	static Load(ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static GetDefaultObject(): StabilizeLocalizationKeysCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StabilizeLocalizationKeysCommandlet;
	static C(Other: UObject | any): StabilizeLocalizationKeysCommandlet;
}

declare class StaticMeshExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): StaticMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterFBX;
	static GetDefaultObject(): StaticMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterFBX;
	static C(Other: UObject | any): StaticMeshExporterFBX;
}

declare class StaticMeshExporterOBJ extends Exporter { 
	static Load(ResourceName: string): StaticMeshExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterOBJ;
	static GetDefaultObject(): StaticMeshExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterOBJ;
	static C(Other: UObject | any): StaticMeshExporterOBJ;
}

declare class StaticMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): StaticMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): StaticMeshThumbnailRenderer;
	static GetDefaultObject(): StaticMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshThumbnailRenderer;
	static C(Other: UObject | any): StaticMeshThumbnailRenderer;
}

declare class StringTableFactory extends Factory { 
	static Load(ResourceName: string): StringTableFactory;
	static Find(Outer: UObject, ResourceName: string): StringTableFactory;
	static GetDefaultObject(): StringTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StringTableFactory;
	static C(Other: UObject | any): StringTableFactory;
}

declare class StructureFactory extends Factory { 
	static Load(ResourceName: string): StructureFactory;
	static Find(Outer: UObject, ResourceName: string): StructureFactory;
	static GetDefaultObject(): StructureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructureFactory;
	static C(Other: UObject | any): StructureFactory;
}

declare type EStructViewerDeveloperType = 'SVDT_None' | 'SVDT_CurrentUser' | 'SVDT_All' | 'SVDT_Max';
declare var EStructViewerDeveloperType : { SVDT_None:'SVDT_None',SVDT_CurrentUser:'SVDT_CurrentUser',SVDT_All:'SVDT_All',SVDT_Max:'SVDT_Max', };
declare class StructViewerSettings extends UObject { 
	DisplayInternalStructs: boolean;
	DeveloperFolderType: EStructViewerDeveloperType;
	static Load(ResourceName: string): StructViewerSettings;
	static Find(Outer: UObject, ResourceName: string): StructViewerSettings;
	static GetDefaultObject(): StructViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructViewerSettings;
	static C(Other: UObject | any): StructViewerSettings;
}

declare class SubsurfaceProfileFactory extends Factory { 
	static Load(ResourceName: string): SubsurfaceProfileFactory;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileFactory;
	static GetDefaultObject(): SubsurfaceProfileFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileFactory;
	static C(Other: UObject | any): SubsurfaceProfileFactory;
}

declare class SubsurfaceProfileRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): SubsurfaceProfileRenderer;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileRenderer;
	static GetDefaultObject(): SubsurfaceProfileRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileRenderer;
	static C(Other: UObject | any): SubsurfaceProfileRenderer;
}

declare class SubUVAnimationFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SubUVAnimationFactory;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimationFactory;
	static GetDefaultObject(): SubUVAnimationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimationFactory;
	static C(Other: UObject | any): SubUVAnimationFactory;
}

declare class SwapSoundForDialogueInCuesCommandlet extends Commandlet { 
	static Load(ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static GetDefaultObject(): SwapSoundForDialogueInCuesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SwapSoundForDialogueInCuesCommandlet;
	static C(Other: UObject | any): SwapSoundForDialogueInCuesCommandlet;
}

declare class TemplateMapMetadata extends UObject { 
	static Load(ResourceName: string): TemplateMapMetadata;
	static Find(Outer: UObject, ResourceName: string): TemplateMapMetadata;
	static GetDefaultObject(): TemplateMapMetadata;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateMapMetadata;
	static C(Other: UObject | any): TemplateMapMetadata;
}

declare class TetrahedronBuilder extends EditorBrushBuilder { 
	Radius: number;
	SphereExtrapolation: number;
	GroupName: string;
	static Load(ResourceName: string): TetrahedronBuilder;
	static Find(Outer: UObject, ResourceName: string): TetrahedronBuilder;
	static GetDefaultObject(): TetrahedronBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TetrahedronBuilder;
	static C(Other: UObject | any): TetrahedronBuilder;
}

declare type ETexAlign = 'TEXALIGN_None' | 'TEXALIGN_Default' | 'TEXALIGN_Box' | 'TEXALIGN_Planar' | 'TEXALIGN_Fit' | 'TEXALIGN_PlanarAuto' | 'TEXALIGN_PlanarWall' | 'TEXALIGN_PlanarFloor' | 'TEXALIGN_MAX';
declare var ETexAlign : { TEXALIGN_None:'TEXALIGN_None',TEXALIGN_Default:'TEXALIGN_Default',TEXALIGN_Box:'TEXALIGN_Box',TEXALIGN_Planar:'TEXALIGN_Planar',TEXALIGN_Fit:'TEXALIGN_Fit',TEXALIGN_PlanarAuto:'TEXALIGN_PlanarAuto',TEXALIGN_PlanarWall:'TEXALIGN_PlanarWall',TEXALIGN_PlanarFloor:'TEXALIGN_PlanarFloor',TEXALIGN_MAX:'TEXALIGN_MAX', };
declare class TexAligner extends UObject { 
	DefTexAlign: ETexAlign;
	TAxis: number;
	UTile: number;
	VTile: number;
	Desc: string;
	static Load(ResourceName: string): TexAligner;
	static Find(Outer: UObject, ResourceName: string): TexAligner;
	static GetDefaultObject(): TexAligner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAligner;
	static C(Other: UObject | any): TexAligner;
}

declare class TexAlignerBox extends TexAligner { 
	static Load(ResourceName: string): TexAlignerBox;
	static Find(Outer: UObject, ResourceName: string): TexAlignerBox;
	static GetDefaultObject(): TexAlignerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerBox;
	static C(Other: UObject | any): TexAlignerBox;
}

declare class TexAlignerDefault extends TexAligner { 
	static Load(ResourceName: string): TexAlignerDefault;
	static Find(Outer: UObject, ResourceName: string): TexAlignerDefault;
	static GetDefaultObject(): TexAlignerDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerDefault;
	static C(Other: UObject | any): TexAlignerDefault;
}

declare class TexAlignerFit extends TexAligner { 
	static Load(ResourceName: string): TexAlignerFit;
	static Find(Outer: UObject, ResourceName: string): TexAlignerFit;
	static GetDefaultObject(): TexAlignerFit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerFit;
	static C(Other: UObject | any): TexAlignerFit;
}

declare class TexAlignerPlanar extends TexAligner { 
	static Load(ResourceName: string): TexAlignerPlanar;
	static Find(Outer: UObject, ResourceName: string): TexAlignerPlanar;
	static GetDefaultObject(): TexAlignerPlanar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerPlanar;
	static C(Other: UObject | any): TexAlignerPlanar;
}

declare class TextAssetCommandlet extends Commandlet { 
	static Load(ResourceName: string): TextAssetCommandlet;
	static Find(Outer: UObject, ResourceName: string): TextAssetCommandlet;
	static GetDefaultObject(): TextAssetCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextAssetCommandlet;
	static C(Other: UObject | any): TextAssetCommandlet;
}

declare class TextBufferExporterTXT extends Exporter { 
	static Load(ResourceName: string): TextBufferExporterTXT;
	static Find(Outer: UObject, ResourceName: string): TextBufferExporterTXT;
	static GetDefaultObject(): TextBufferExporterTXT;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBufferExporterTXT;
	static C(Other: UObject | any): TextBufferExporterTXT;
}

declare class Texture2DArrayFactory extends Factory { 
	InitialTextures: Texture2D[];
	static Load(ResourceName: string): Texture2DArrayFactory;
	static Find(Outer: UObject, ResourceName: string): Texture2DArrayFactory;
	static GetDefaultObject(): Texture2DArrayFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DArrayFactory;
	static C(Other: UObject | any): Texture2DArrayFactory;
}

declare class Texture2DArrayThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): Texture2DArrayThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): Texture2DArrayThumbnailRenderer;
	static GetDefaultObject(): Texture2DArrayThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DArrayThumbnailRenderer;
	static C(Other: UObject | any): Texture2DArrayThumbnailRenderer;
}

declare class Texture2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	static Load(ResourceName: string): Texture2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): Texture2DFactoryNew;
	static GetDefaultObject(): Texture2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DFactoryNew;
	static C(Other: UObject | any): Texture2DFactoryNew;
}

declare class TextureCubeExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureCubeExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureCubeExporterHDR;
	static GetDefaultObject(): TextureCubeExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeExporterHDR;
	static C(Other: UObject | any): TextureCubeExporterHDR;
}

declare class TextureCubeThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): TextureCubeThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureCubeThumbnailRenderer;
	static GetDefaultObject(): TextureCubeThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeThumbnailRenderer;
	static C(Other: UObject | any): TextureCubeThumbnailRenderer;
}

declare class TextureExporterBMP extends Exporter { 
	static Load(ResourceName: string): TextureExporterBMP;
	static Find(Outer: UObject, ResourceName: string): TextureExporterBMP;
	static GetDefaultObject(): TextureExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterBMP;
	static C(Other: UObject | any): TextureExporterBMP;
}

declare class VirtualTextureBuilderExporterBMP extends TextureExporterBMP { 
	static Load(ResourceName: string): VirtualTextureBuilderExporterBMP;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureBuilderExporterBMP;
	static GetDefaultObject(): VirtualTextureBuilderExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureBuilderExporterBMP;
	static C(Other: UObject | any): VirtualTextureBuilderExporterBMP;
}

declare class TextureExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureExporterHDR;
	static GetDefaultObject(): TextureExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterHDR;
	static C(Other: UObject | any): TextureExporterHDR;
}

declare class TextureExporterPCX extends Exporter { 
	static Load(ResourceName: string): TextureExporterPCX;
	static Find(Outer: UObject, ResourceName: string): TextureExporterPCX;
	static GetDefaultObject(): TextureExporterPCX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterPCX;
	static C(Other: UObject | any): TextureExporterPCX;
}

declare class TextureExporterTGA extends Exporter { 
	static Load(ResourceName: string): TextureExporterTGA;
	static Find(Outer: UObject, ResourceName: string): TextureExporterTGA;
	static GetDefaultObject(): TextureExporterTGA;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterTGA;
	static C(Other: UObject | any): TextureExporterTGA;
}

declare class TextureImportSettings extends DeveloperSettings { 
	AutoVTSize: number;
	static Load(ResourceName: string): TextureImportSettings;
	static Find(Outer: UObject, ResourceName: string): TextureImportSettings;
	static GetDefaultObject(): TextureImportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureImportSettings;
	static C(Other: UObject | any): TextureImportSettings;
}

declare class TextureRenderTarget2DArrayFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Slices: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTarget2DArrayFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget2DArrayFactoryNew;
	static GetDefaultObject(): TextureRenderTarget2DArrayFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget2DArrayFactoryNew;
	static C(Other: UObject | any): TextureRenderTarget2DArrayFactoryNew;
}

declare class TextureRenderTargetCubeFactoryNew extends Factory { 
	Width: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetCubeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCubeFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetCubeFactoryNew;
}

declare class TextureRenderTargetFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetFactoryNew;
	static GetDefaultObject(): TextureRenderTargetFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetFactoryNew;
}

declare class TextureRenderTargetVolumeFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Depth: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetVolumeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetVolumeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetVolumeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetVolumeFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetVolumeFactoryNew;
}

declare class SkeletalMeshActor extends Actor { 
	bShouldDoAnimNotifies: boolean;
	bWakeOnLevelStart: boolean;
	SkeletalMeshComponent: SkeletalMeshComponent;
	ReplicatedMesh: SkeletalMesh;
	ReplicatedPhysAsset: PhysicsAsset;
	ReplicatedMaterial0: MaterialInterface;
	ReplicatedMaterial1: MaterialInterface;
	static GetDefaultObject(): SkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshActor;
	OnRep_ReplicatedPhysAsset(): void;
	OnRep_ReplicatedMesh(): void;
	OnRep_ReplicatedMaterial1(): void;
	OnRep_ReplicatedMaterial0(): void;
	static C(Other: UObject | any): SkeletalMeshActor;
}

declare class AnimationThumbnailSkeletalMeshActor extends SkeletalMeshActor { 
	static GetDefaultObject(): AnimationThumbnailSkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationThumbnailSkeletalMeshActor;
	static C(Other: UObject | any): AnimationThumbnailSkeletalMeshActor;
}

declare class ThumbnailRenderingInfo { 
	ClassNeedingThumbnailName: string;
	ClassNeedingThumbnail: UnrealEngineClass;
	RendererClassName: string;
	Renderer: ThumbnailRenderer;
	clone() : ThumbnailRenderingInfo;
	static C(Other: UObject | any): ThumbnailRenderingInfo;
}

declare class ThumbnailManager extends UObject { 
	RenderableThumbnailTypes: ThumbnailRenderingInfo[];
	NotSupported: ThumbnailRenderingInfo;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorCylinder: StaticMesh;
	EditorPlane: StaticMesh;
	EditorSkySphere: StaticMesh;
	FloorPlaneMaterial: Material;
	AmbientCubemap: TextureCube;
	CheckerboardTexture: Texture2D;
	ThumbnailManagerClassName: string;
	static Load(ResourceName: string): ThumbnailManager;
	static Find(Outer: UObject, ResourceName: string): ThumbnailManager;
	static GetDefaultObject(): ThumbnailManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailManager;
	static C(Other: UObject | any): ThumbnailManager;
}

declare class TouchInterfaceFactory extends Factory { 
	static Load(ResourceName: string): TouchInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): TouchInterfaceFactory;
	static GetDefaultObject(): TouchInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterfaceFactory;
	static C(Other: UObject | any): TouchInterfaceFactory;
}

declare class TransBuffer extends Transactor { 
	static Load(ResourceName: string): TransBuffer;
	static Find(Outer: UObject, ResourceName: string): TransBuffer;
	static GetDefaultObject(): TransBuffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransBuffer;
	static C(Other: UObject | any): TransBuffer;
}

declare class FontImportOptions extends UObject { 
	Data: FontImportOptionsData;
	static Load(ResourceName: string): FontImportOptions;
	static Find(Outer: UObject, ResourceName: string): FontImportOptions;
	static GetDefaultObject(): FontImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontImportOptions;
	static C(Other: UObject | any): FontImportOptions;
}

declare class TrueTypeFontFactory extends TextureFactory { 
	ImportOptions: FontImportOptions;
	bPropertiesConfigured: boolean;
	bFontSelected: boolean;
	static Load(ResourceName: string): TrueTypeFontFactory;
	static Find(Outer: UObject, ResourceName: string): TrueTypeFontFactory;
	static GetDefaultObject(): TrueTypeFontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TrueTypeFontFactory;
	static C(Other: UObject | any): TrueTypeFontFactory;
}

declare class EditorCommandCategory { 
	Parent: string;
	Name: string;
	clone() : EditorCommandCategory;
	static C(Other: UObject | any): EditorCommandCategory;
}

declare class EditorCommand { 
	Parent: string;
	CommandName: string;
	ExecCommand: string;
	Description: string;
	clone() : EditorCommand;
	static C(Other: UObject | any): EditorCommand;
}

declare class EditorKeyBinding { 
	bCtrlDown: boolean;
	bAltDown: boolean;
	bShiftDown: boolean;
	Key: Key;
	CommandName: string;
	clone() : EditorKeyBinding;
	static C(Other: UObject | any): EditorKeyBinding;
}

declare class UnrealEdKeyBindings extends UObject { 
	KeyBindings: EditorKeyBinding[];
	static Load(ResourceName: string): UnrealEdKeyBindings;
	static Find(Outer: UObject, ResourceName: string): UnrealEdKeyBindings;
	static GetDefaultObject(): UnrealEdKeyBindings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdKeyBindings;
	static C(Other: UObject | any): UnrealEdKeyBindings;
}

declare class ClassPickerDefaults { 
	ClassName: string;
	AssetClass: string;
	clone() : ClassPickerDefaults;
	static C(Other: UObject | any): ClassPickerDefaults;
}

declare class UnrealEdOptions extends UObject { 
	EditorCategories: EditorCommandCategory[];
	EditorCommands: EditorCommand[];
	EditorKeyBindings: UnrealEdKeyBindings;
	bExpandClassPickerClassList: boolean;
	NewAssetDefaultClasses: ClassPickerDefaults[];
	static Load(ResourceName: string): UnrealEdOptions;
	static Find(Outer: UObject, ResourceName: string): UnrealEdOptions;
	static GetDefaultObject(): UnrealEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdOptions;
	static C(Other: UObject | any): UnrealEdOptions;
}

declare type AnimationCompressionFormat = 'ACF_None' | 'ACF_Float96NoW' | 'ACF_Fixed48NoW' | 'ACF_IntervalFixed32NoW' | 'ACF_Fixed32NoW' | 'ACF_Float32NoW' | 'ACF_Identity' | 'ACF_MAX';
declare var AnimationCompressionFormat : { ACF_None:'ACF_None',ACF_Float96NoW:'ACF_Float96NoW',ACF_Fixed48NoW:'ACF_Fixed48NoW',ACF_IntervalFixed32NoW:'ACF_IntervalFixed32NoW',ACF_Fixed32NoW:'ACF_Fixed32NoW',ACF_Float32NoW:'ACF_Float32NoW',ACF_Identity:'ACF_Identity',ACF_MAX:'ACF_MAX', };
declare class AnimCompress extends AnimBoneCompressionCodec { 
	bNeedsSkeleton: boolean;
	TranslationCompressionFormat: AnimationCompressionFormat;
	RotationCompressionFormat: AnimationCompressionFormat;
	ScaleCompressionFormat: AnimationCompressionFormat;
	static Load(ResourceName: string): AnimCompress;
	static Find(Outer: UObject, ResourceName: string): AnimCompress;
	static GetDefaultObject(): AnimCompress;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress;
	static C(Other: UObject | any): AnimCompress;
}

declare class TemplateMapInfo { 
	ThumbnailTexture: Texture2D;
	Map: string;
	clone() : TemplateMapInfo;
	static C(Other: UObject | any): TemplateMapInfo;
}

declare class UnrealEdEngine extends EditorEngine { 
	EditorOptionsInst: UnrealEdOptions;
	AutoReimportManager: AutoReimportManager;
	MaterialCopyPasteBuffer: Material;
	MatineeCopyPasteBuffer: UObject[];
	SoundCueCopyPasteBuffer: SoundCue;
	AnimationCompressionAlgorithms: AnimCompress[];
	PackagesToBeFullyLoadedAtStartup: string[];
	CurrentLODParentActor: Actor;
	bNeedWarningForPkgEngineVer: boolean;
	SortedSpriteCategories: string[];
	TemplateMapInfos: TemplateMapInfo[];
	CookServer: CookOnTheFlyServer;
	static Load(ResourceName: string): UnrealEdEngine;
	static Find(Outer: UObject, ResourceName: string): UnrealEdEngine;
	static GetDefaultObject(): UnrealEdEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdEngine;
	static C(Other: UObject | any): UnrealEdEngine;
}

declare class UnrealEdTypes extends UObject { 
	static Load(ResourceName: string): UnrealEdTypes;
	static Find(Outer: UObject, ResourceName: string): UnrealEdTypes;
	static GetDefaultObject(): UnrealEdTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdTypes;
	static C(Other: UObject | any): UnrealEdTypes;
}

declare class UnrealPakCommandlet extends Commandlet { 
	static Load(ResourceName: string): UnrealPakCommandlet;
	static Find(Outer: UObject, ResourceName: string): UnrealPakCommandlet;
	static GetDefaultObject(): UnrealPakCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealPakCommandlet;
	static C(Other: UObject | any): UnrealPakCommandlet;
}

declare class UpdateGameProjectCommandlet extends Commandlet { 
	static Load(ResourceName: string): UpdateGameProjectCommandlet;
	static Find(Outer: UObject, ResourceName: string): UpdateGameProjectCommandlet;
	static GetDefaultObject(): UpdateGameProjectCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UpdateGameProjectCommandlet;
	static C(Other: UObject | any): UpdateGameProjectCommandlet;
}

declare class StructVariableDescription { 
	VarName: string;
	VarGuid: Guid;
	FriendlyName: string;
	DefaultValue: string;
	Category: string;
	SubCategory: string;
	SubCategoryObject: UObject;
	PinValueType: EdGraphTerminalType;
	ContainerType: EPinContainerType;
	bIsArray: boolean;
	bIsSet: boolean;
	bIsMap: boolean;
	bInvalidMember: boolean;
	bDontEditOnInstance: boolean;
	bEnableSaveGame: boolean;
	bEnableMultiLineText: boolean;
	bEnable3dWidget: boolean;
	CurrentDefaultValue: string;
	Tooltip: string;
	clone() : StructVariableDescription;
	static C(Other: UObject | any): StructVariableDescription;
}

declare class UserDefinedStructEditorData extends UObject { 
	UniqueNameId: any;
	VariablesDescriptions: StructVariableDescription[];
	Tooltip: string;
	static Load(ResourceName: string): UserDefinedStructEditorData;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStructEditorData;
	static GetDefaultObject(): UserDefinedStructEditorData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStructEditorData;
	static C(Other: UObject | any): UserDefinedStructEditorData;
}

declare class VectorFieldExporter extends Exporter { 
	static Load(ResourceName: string): VectorFieldExporter;
	static Find(Outer: UObject, ResourceName: string): VectorFieldExporter;
	static GetDefaultObject(): VectorFieldExporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldExporter;
	static C(Other: UObject | any): VectorFieldExporter;
}

declare class VolumeTextureFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): VolumeTextureFactory;
	static Find(Outer: UObject, ResourceName: string): VolumeTextureFactory;
	static GetDefaultObject(): VolumeTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTextureFactory;
	static C(Other: UObject | any): VolumeTextureFactory;
}

declare class VolumeTextureThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	MaterialInstance: MaterialInstanceConstant;
	static Load(ResourceName: string): VolumeTextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): VolumeTextureThumbnailRenderer;
	static GetDefaultObject(): VolumeTextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTextureThumbnailRenderer;
	static C(Other: UObject | any): VolumeTextureThumbnailRenderer;
}

declare class VolumetricBuilder extends EditorBrushBuilder { 
	Z: number;
	Radius: number;
	NumSheets: number;
	GroupName: string;
	static Load(ResourceName: string): VolumetricBuilder;
	static Find(Outer: UObject, ResourceName: string): VolumetricBuilder;
	static GetDefaultObject(): VolumetricBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricBuilder;
	static C(Other: UObject | any): VolumetricBuilder;
}

declare class WorldFactory extends Factory { 
	static Load(ResourceName: string): WorldFactory;
	static Find(Outer: UObject, ResourceName: string): WorldFactory;
	static GetDefaultObject(): WorldFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldFactory;
	static C(Other: UObject | any): WorldFactory;
}

declare type EOrthoThumbnailDirection = 'Top' | 'Bottom' | 'Left' | 'Right' | 'Front' | 'Back' | 'EOrthoThumbnailDirection_MAX';
declare var EOrthoThumbnailDirection : { Top:'Top',Bottom:'Bottom',Left:'Left',Right:'Right',Front:'Front',Back:'Back',EOrthoThumbnailDirection_MAX:'EOrthoThumbnailDirection_MAX', };
declare class WorldThumbnailInfo extends SceneThumbnailInfo { 
	CameraMode: ECameraProjectionMode;
	OrthoDirection: EOrthoThumbnailDirection;
	static Load(ResourceName: string): WorldThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailInfo;
	static GetDefaultObject(): WorldThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailInfo;
	static C(Other: UObject | any): WorldThumbnailInfo;
}

declare class WorldThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	GlobalOrbitPitchOffset: number;
	GlobalOrbitYawOffset: number;
	bUseUnlitScene: boolean;
	bAllowWorldThumbnails: boolean;
	static Load(ResourceName: string): WorldThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailRenderer;
	static GetDefaultObject(): WorldThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailRenderer;
	static C(Other: UObject | any): WorldThumbnailRenderer;
}

declare class WrangleContentCommandlet extends Commandlet { 
	static Load(ResourceName: string): WrangleContentCommandlet;
	static Find(Outer: UObject, ResourceName: string): WrangleContentCommandlet;
	static GetDefaultObject(): WrangleContentCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrangleContentCommandlet;
	static C(Other: UObject | any): WrangleContentCommandlet;
}

declare class InstancedStaticMeshInstanceData { 
	Transform: Matrix;
	clone() : InstancedStaticMeshInstanceData;
	static C(Other: UObject | any): InstancedStaticMeshInstanceData;
}

declare class InstancedStaticMeshMappingInfo { 
	clone() : InstancedStaticMeshMappingInfo;
	static C(Other: UObject | any): InstancedStaticMeshMappingInfo;
}

declare class InstancedStaticMeshComponent extends StaticMeshComponent { 
	PerInstanceSMData: InstancedStaticMeshInstanceData[];
	NumCustomDataFloats: number;
	PerInstanceSMCustomData: number[];
	InstancingRandomSeed: number;
	InstanceStartCullDistance: number;
	InstanceEndCullDistance: number;
	InstanceReorderTable: number[];
	NumPendingLightmaps: number;
	CachedMappings: InstancedStaticMeshMappingInfo[];
	static Load(ResourceName: string): InstancedStaticMeshComponent;
	static Find(Outer: UObject, ResourceName: string): InstancedStaticMeshComponent;
	static GetDefaultObject(): InstancedStaticMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InstancedStaticMeshComponent;
	UpdateInstanceTransform(InstanceIndex: number,NewInstanceTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	SetCustomDataValue(InstanceIndex: number,CustomDataIndex: number,CustomDataValue: number,bMarkRenderStateDirty: boolean): boolean;
	SetCullDistances(StartCullDistance: number,EndCullDistance: number): void;
	RemoveInstance(InstanceIndex: number): boolean;
	GetInstanceTransform(InstanceIndex: number,OutInstanceTransform?: Transform,bWorldSpace?: boolean): {OutInstanceTransform: Transform, $: boolean};
	GetInstancesOverlappingSphere(Center: Vector,Radius: number,bSphereInWorldSpace: boolean): number[];
	GetInstancesOverlappingBox(Box: Box,bBoxInWorldSpace: boolean): number[];
	GetInstanceCount(): number;
	ClearInstances(): void;
	BatchUpdateInstancesTransforms(StartInstanceIndex: number,NewInstancesTransforms: Transform[],bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	BatchUpdateInstancesTransform(StartInstanceIndex: number,NumInstances: number,NewInstancesTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	AddInstanceWorldSpace(WorldTransform: Transform): number;
	AddInstances(InstanceTransforms: Transform[],bShouldReturnIndices: boolean): number[];
	AddInstance(InstanceTransform: Transform): number;
	static C(Other: UObject | any): InstancedStaticMeshComponent;
}

declare class HierarchicalInstancedStaticMeshComponent extends InstancedStaticMeshComponent { 
	SortedInstances: number[];
	NumBuiltInstances: number;
	BuiltInstanceBounds: Box;
	UnbuiltInstanceBounds: Box;
	UnbuiltInstanceBoundsList: Box[];
	bEnableDensityScaling: boolean;
	OcclusionLayerNumNodes: number;
	CacheMeshExtendedBounds: BoxSphereBounds;
	bDisableCollision: boolean;
	InstanceCountToRender: number;
	static Load(ResourceName: string): HierarchicalInstancedStaticMeshComponent;
	static Find(Outer: UObject, ResourceName: string): HierarchicalInstancedStaticMeshComponent;
	static GetDefaultObject(): HierarchicalInstancedStaticMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalInstancedStaticMeshComponent;
	RemoveInstances(InstancesToRemove: number[]): boolean;
	static C(Other: UObject | any): HierarchicalInstancedStaticMeshComponent;
}

declare class FoliageInstancedStaticMeshComponent extends HierarchicalInstancedStaticMeshComponent { 
	OnInstanceTakePointDamage: UnrealEngineMulticastDelegate<(InstanceIndex: number, Damage: number, InstigatedBy: Controller, HitLocation: Vector, ShotFromDirection: Vector, DamageType: DamageType, DamageCauser: Actor) => void>;
	OnInstanceTakeRadialDamage: UnrealEngineMulticastDelegate<(Instances: number[], Damages: number[], InstigatedBy: Controller, Origin: Vector, MaxRadius: number, DamageType: DamageType, DamageCauser: Actor) => void>;
	FoliageHiddenEditorViews: any;
	GenerationGuid: Guid;
	static Load(ResourceName: string): FoliageInstancedStaticMeshComponent;
	static Find(Outer: UObject, ResourceName: string): FoliageInstancedStaticMeshComponent;
	static GetDefaultObject(): FoliageInstancedStaticMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageInstancedStaticMeshComponent;
	static C(Other: UObject | any): FoliageInstancedStaticMeshComponent;
}

declare class FoliageStatistics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): FoliageStatistics;
	static Find(Outer: UObject, ResourceName: string): FoliageStatistics;
	static GetDefaultObject(): FoliageStatistics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageStatistics;
	static FoliageOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
	static FoliageOverlappingBoxCount(WorldContextObject: UObject,StaticMesh: StaticMesh,Box: Box): number;
	static C(Other: UObject | any): FoliageStatistics;
}

declare type EFoliageScaling = 'Uniform' | 'Free' | 'LockXY' | 'LockXZ' | 'LockYZ' | 'EFoliageScaling_MAX';
declare var EFoliageScaling : { Uniform:'Uniform',Free:'Free',LockXY:'LockXY',LockXZ:'LockXZ',LockYZ:'LockYZ',EFoliageScaling_MAX:'EFoliageScaling_MAX', };
declare class FoliageVertexColorChannelMask { 
	UseMask: boolean;
	MaskThreshold: number;
	InvertMask: boolean;
	clone() : FoliageVertexColorChannelMask;
	static C(Other: UObject | any): FoliageVertexColorChannelMask;
}

declare type FoliageVertexColorMask = 'FOLIAGEVERTEXCOLORMASK_Disabled' | 'FOLIAGEVERTEXCOLORMASK_Red' | 'FOLIAGEVERTEXCOLORMASK_Green' | 'FOLIAGEVERTEXCOLORMASK_Blue' | 'FOLIAGEVERTEXCOLORMASK_Alpha' | 'FOLIAGEVERTEXCOLORMASK_MAX';
declare var FoliageVertexColorMask : { FOLIAGEVERTEXCOLORMASK_Disabled:'FOLIAGEVERTEXCOLORMASK_Disabled',FOLIAGEVERTEXCOLORMASK_Red:'FOLIAGEVERTEXCOLORMASK_Red',FOLIAGEVERTEXCOLORMASK_Green:'FOLIAGEVERTEXCOLORMASK_Green',FOLIAGEVERTEXCOLORMASK_Blue:'FOLIAGEVERTEXCOLORMASK_Blue',FOLIAGEVERTEXCOLORMASK_Alpha:'FOLIAGEVERTEXCOLORMASK_Alpha',FOLIAGEVERTEXCOLORMASK_MAX:'FOLIAGEVERTEXCOLORMASK_MAX', };
declare class FoliageType extends UObject { 
	UpdateGuid: Guid;
	Density: number;
	DensityAdjustmentFactor: number;
	Radius: number;
	bSingleInstanceModeOverrideRadius: boolean;
	SingleInstanceModeRadius: number;
	Scaling: EFoliageScaling;
	ScaleX: FloatInterval;
	ScaleY: FloatInterval;
	ScaleZ: FloatInterval;
	VertexColorMaskByChannel: FoliageVertexColorChannelMask;
	VertexColorMask: FoliageVertexColorMask;
	VertexColorMaskThreshold: number;
	VertexColorMaskInvert: boolean;
	ZOffset: FloatInterval;
	AlignToNormal: boolean;
	AlignMaxAngle: number;
	RandomYaw: boolean;
	RandomPitchAngle: number;
	GroundSlopeAngle: FloatInterval;
	Height: FloatInterval;
	LandscapeLayers: string[];
	MinimumLayerWeight: number;
	ExclusionLandscapeLayers: string[];
	MinimumExclusionLayerWeight: number;
	LandscapeLayer: string;
	CollisionWithWorld: boolean;
	CollisionScale: Vector;
	MeshBounds: BoxSphereBounds;
	LowBoundOriginRadius: Vector;
	Mobility: EComponentMobility;
	CullDistance: Int32Interval;
	bEnableStaticLighting: boolean;
	CastShadow: boolean;
	bAffectDynamicIndirectLighting: boolean;
	bAffectDistanceFieldLighting: boolean;
	bCastDynamicShadow: boolean;
	bCastStaticShadow: boolean;
	bCastShadowAsTwoSided: boolean;
	bReceivesDecals: boolean;
	bOverrideLightMapRes: boolean;
	OverriddenLightMapRes: number;
	LightmapType: ELightmapType;
	bUseAsOccluder: boolean;
	BodyInstance: BodyInstance;
	CustomNavigableGeometry: EHasCustomNavigableGeometry;
	LightingChannels: LightingChannels;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	TranslucencySortPriority: number;
	HiddenEditorViews: any;
	IsSelected: boolean;
	CollisionRadius: number;
	ShadeRadius: number;
	NumSteps: number;
	InitialSeedDensity: number;
	AverageSpreadDistance: number;
	SpreadVariance: number;
	SeedsPerStep: number;
	DistributionSeed: number;
	MaxInitialSeedOffset: number;
	bCanGrowInShade: boolean;
	bSpawnsInShade: boolean;
	MaxInitialAge: number;
	MaxAge: number;
	OverlapPriority: number;
	ProceduralScale: FloatInterval;
	ScaleCurve: RuntimeFloatCurve;
	ChangeCount: number;
	ReapplyDensity: boolean;
	ReapplyRadius: boolean;
	ReapplyAlignToNormal: boolean;
	ReapplyRandomYaw: boolean;
	ReapplyScaling: boolean;
	ReapplyScaleX: boolean;
	ReapplyScaleY: boolean;
	ReapplyScaleZ: boolean;
	ReapplyRandomPitchAngle: boolean;
	ReapplyGroundSlope: boolean;
	ReapplyHeight: boolean;
	ReapplyLandscapeLayers: boolean;
	ReapplyZOffset: boolean;
	ReapplyCollisionWithWorld: boolean;
	ReapplyVertexColorMask: boolean;
	bEnableDensityScaling: boolean;
	bEnableDiscardOnLoad: boolean;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureCullMips: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	ScaleMinX: number;
	ScaleMinY: number;
	ScaleMinZ: number;
	ScaleMaxX: number;
	ScaleMaxY: number;
	ScaleMaxZ: number;
	HeightMin: number;
	HeightMax: number;
	ZOffsetMin: number;
	ZOffsetMax: number;
	StartCullDistance: number;
	EndCullDistance: number;
	UniformScale: boolean;
	LockScaleX: boolean;
	LockScaleY: boolean;
	LockScaleZ: boolean;
	GroundSlope: number;
	MinGroundSlope: number;
	MinScale: number;
	MaxScale: number;
	static Load(ResourceName: string): FoliageType;
	static Find(Outer: UObject, ResourceName: string): FoliageType;
	static GetDefaultObject(): FoliageType;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType;
	static C(Other: UObject | any): FoliageType;
}

declare class FoliageType_Actor extends FoliageType { 
	ActorClass: UnrealEngineClass;
	bShouldAttachToBaseComponent: boolean;
	static Load(ResourceName: string): FoliageType_Actor;
	static Find(Outer: UObject, ResourceName: string): FoliageType_Actor;
	static GetDefaultObject(): FoliageType_Actor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_Actor;
	static C(Other: UObject | any): FoliageType_Actor;
}

declare class FoliageType_InstancedStaticMesh extends FoliageType { 
	Mesh: StaticMesh;
	OverrideMaterials: MaterialInterface[];
	ComponentClass: UnrealEngineClass;
	static Load(ResourceName: string): FoliageType_InstancedStaticMesh;
	static Find(Outer: UObject, ResourceName: string): FoliageType_InstancedStaticMesh;
	static GetDefaultObject(): FoliageType_InstancedStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_InstancedStaticMesh;
	static C(Other: UObject | any): FoliageType_InstancedStaticMesh;
}

declare class InstancedFoliageActor extends Actor { 
	static GetDefaultObject(): InstancedFoliageActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InstancedFoliageActor;
	static C(Other: UObject | any): InstancedFoliageActor;
}

declare type ENavDataGatheringMode = 'Default' | 'Instant' | 'Lazy' | 'ENavDataGatheringMode_MAX';
declare var ENavDataGatheringMode : { Default:'Default',Instant:'Instant',Lazy:'Lazy',ENavDataGatheringMode_MAX:'ENavDataGatheringMode_MAX', };
declare class StaticMeshActor extends Actor { 
	StaticMeshComponent: StaticMeshComponent;
	bStaticMeshReplicateMovement: boolean;
	NavigationGeometryGatheringMode: ENavDataGatheringMode;
	static GetDefaultObject(): StaticMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshActor;
	SetMobility(InMobility: EComponentMobility): void;
	static C(Other: UObject | any): StaticMeshActor;
}

declare class InteractiveFoliageActor extends StaticMeshActor { 
	CapsuleComponent: CapsuleComponent;
	TouchingActorEntryPosition: Vector;
	FoliageVelocity: Vector;
	FoliageForce: Vector;
	FoliagePosition: Vector;
	FoliageDamageImpulseScale: number;
	FoliageTouchImpulseScale: number;
	FoliageStiffness: number;
	FoliageStiffnessQuadratic: number;
	FoliageDamping: number;
	MaxDamageImpulse: number;
	MaxTouchImpulse: number;
	MaxForce: number;
	Mass: number;
	static GetDefaultObject(): InteractiveFoliageActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveFoliageActor;
	CapsuleTouched(OverlappedComp: PrimitiveComponent,Other: Actor,OtherComp: PrimitiveComponent,OtherBodyIndex: number,bFromSweep: boolean,OverlapInfo: HitResult): void;
	static C(Other: UObject | any): InteractiveFoliageActor;
}

declare class InteractiveFoliageComponent extends StaticMeshComponent { 
	static Load(ResourceName: string): InteractiveFoliageComponent;
	static Find(Outer: UObject, ResourceName: string): InteractiveFoliageComponent;
	static GetDefaultObject(): InteractiveFoliageComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InteractiveFoliageComponent;
	static C(Other: UObject | any): InteractiveFoliageComponent;
}

declare class FoliageTypeObject { 
	FoliageTypeObject: UObject;
	TypeInstance: FoliageType;
	bIsAsset: boolean;
	Type: UnrealEngineClass;
	clone() : FoliageTypeObject;
	static C(Other: UObject | any): FoliageTypeObject;
}

declare class ProceduralFoliageSpawner extends UObject { 
	RandomSeed: number;
	TileSize: number;
	NumUniqueTiles: number;
	MinimumQuadTreeSize: number;
	FoliageTypes: FoliageTypeObject[];
	static Load(ResourceName: string): ProceduralFoliageSpawner;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageSpawner;
	static GetDefaultObject(): ProceduralFoliageSpawner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageSpawner;
	Simulate(NumSteps: number): void;
	static C(Other: UObject | any): ProceduralFoliageSpawner;
}

declare class ProceduralFoliageComponent extends ActorComponent { 
	FoliageSpawner: ProceduralFoliageSpawner;
	TileOverlap: number;
	bAllowLandscape: boolean;
	bAllowBSP: boolean;
	bAllowStaticMesh: boolean;
	bAllowTranslucent: boolean;
	bAllowFoliage: boolean;
	bShowDebugTiles: boolean;
	SpawningVolume: Volume;
	ProceduralGuid: Guid;
	static Load(ResourceName: string): ProceduralFoliageComponent;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageComponent;
	static GetDefaultObject(): ProceduralFoliageComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageComponent;
	static C(Other: UObject | any): ProceduralFoliageComponent;
}

declare class ProceduralFoliageVolume extends Volume { 
	ProceduralComponent: ProceduralFoliageComponent;
	static GetDefaultObject(): ProceduralFoliageVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageVolume;
	static C(Other: UObject | any): ProceduralFoliageVolume;
}

declare class ProceduralFoliageBlockingVolume extends Volume { 
	ProceduralFoliageVolume: ProceduralFoliageVolume;
	static GetDefaultObject(): ProceduralFoliageBlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageBlockingVolume;
	static C(Other: UObject | any): ProceduralFoliageBlockingVolume;
}

declare class ProceduralFoliageInstance { 
	Rotation: Quat;
	Location: Vector;
	Age: number;
	Normal: Vector;
	Scale: number;
	Type: FoliageType;
	clone() : ProceduralFoliageInstance;
	static C(Other: UObject | any): ProceduralFoliageInstance;
}

declare class ProceduralFoliageTile extends UObject { 
	FoliageSpawner: ProceduralFoliageSpawner;
	InstancesArray: ProceduralFoliageInstance[];
	static Load(ResourceName: string): ProceduralFoliageTile;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageTile;
	static GetDefaultObject(): ProceduralFoliageTile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageTile;
	static C(Other: UObject | any): ProceduralFoliageTile;
}

declare class ImageWriteBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ImageWriteBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): ImageWriteBlueprintLibrary;
	static GetDefaultObject(): ImageWriteBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageWriteBlueprintLibrary;
	static ExportToDisk(Texture: Texture,Filename: string,Options: ImageWriteOptions): void;
	static C(Other: UObject | any): ImageWriteBlueprintLibrary;
}

declare class ControlPointMeshComponent extends StaticMeshComponent { 
	bSelected: boolean;
	VirtualTextureMainPassMaxDrawDistance: number;
	static Load(ResourceName: string): ControlPointMeshComponent;
	static Find(Outer: UObject, ResourceName: string): ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshComponent;
	static C(Other: UObject | any): ControlPointMeshComponent;
}

declare class ControlPointMeshActor extends Actor { 
	ControlPointMeshComponent: ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshActor;
	static C(Other: UObject | any): ControlPointMeshActor;
}

declare class LandscapeSplineSegmentConnection { 
	ControlPoint: LandscapeSplineControlPoint;
	TangentLen: number;
	SocketName: string;
	clone() : LandscapeSplineSegmentConnection;
	static C(Other: UObject | any): LandscapeSplineSegmentConnection;
}

declare type LandscapeSplineMeshOrientation = 'LSMO_XUp' | 'LSMO_YUp' | 'LSMO_MAX';
declare var LandscapeSplineMeshOrientation : { LSMO_XUp:'LSMO_XUp',LSMO_YUp:'LSMO_YUp',LSMO_MAX:'LSMO_MAX', };
declare class LandscapeSplineMeshEntry { 
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	bCenterH: boolean;
	CenterAdjust: Vector2D;
	bScaleToWidth: boolean;
	Scale: Vector;
	Orientation: LandscapeSplineMeshOrientation;
	ForwardAxis: ESplineMeshAxis;
	UpAxis: ESplineMeshAxis;
	clone() : LandscapeSplineMeshEntry;
	static C(Other: UObject | any): LandscapeSplineMeshEntry;
}

declare class LandscapeSplineInterpPoint { 
	Center: Vector;
	Left: Vector;
	Right: Vector;
	FalloffLeft: Vector;
	FalloffRight: Vector;
	LayerLeft: Vector;
	LayerRight: Vector;
	LayerFalloffLeft: Vector;
	LayerFalloffRight: Vector;
	StartEndFalloff: number;
	clone() : LandscapeSplineInterpPoint;
	static C(Other: UObject | any): LandscapeSplineInterpPoint;
}

declare class LandscapeSplineSegment extends UObject { 
	Connections: LandscapeSplineSegmentConnection;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	SplineMeshes: LandscapeSplineMeshEntry[];
	bEnableCollision: boolean;
	CollisionProfileName: string;
	bCastShadow: boolean;
	bHiddenInGame: boolean;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	RandomSeed: number;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureLodBias: number;
	VirtualTextureCullMips: number;
	VirtualTextureMainPassMaxDrawDistance: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	BodyInstance: BodyInstance;
	bSelected: boolean;
	bNavDirty: boolean;
	SplineInfo: InterpCurveVector;
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponents: SplineMeshComponent[];
	ForeignWorlds: World[];
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineSegment;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineSegment;
	static GetDefaultObject(): LandscapeSplineSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineSegment;
	static C(Other: UObject | any): LandscapeSplineSegment;
}

