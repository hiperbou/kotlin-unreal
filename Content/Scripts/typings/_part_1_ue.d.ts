declare class BTDecorator_Blackboard extends BTDecorator_BlackboardBase { 
	IntValue: number;
	FloatValue: number;
	StringValue: string;
	CachedDescription: string;
	OperationType: number;
	NotifyObserver: EBTBlackboardRestart;
	BasicOperation: EBasicKeyOperation;
	ArithmeticOperation: EArithmeticKeyOperation;
	TextOperation: ETextKeyOperation;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_Blackboard;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Blackboard;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_Blackboard;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Blackboard;
	static C(Other: UObject): BTDecorator_Blackboard;
}

declare class BTDecorator_ConditionalLoop extends BTDecorator_Blackboard { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_ConditionalLoop;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConditionalLoop;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_ConditionalLoop;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConditionalLoop;
	static C(Other: UObject): BTDecorator_ConditionalLoop;
}

declare class BTDecorator_IsAtLocation extends BTDecorator_BlackboardBase { 
	AcceptableRadius: number;
	ParametrizedAcceptableRadius: AIDataProviderFloatValue;
	bUseParametrizedRadius: boolean;
	bUseNavAgentGoalLocation: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_IsAtLocation;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsAtLocation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_IsAtLocation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsAtLocation;
	static C(Other: UObject): BTDecorator_IsAtLocation;
}

declare class BTDecorator_IsBBEntryOfClass extends BTDecorator_BlackboardBase { 
	TestClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_IsBBEntryOfClass;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsBBEntryOfClass;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_IsBBEntryOfClass;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsBBEntryOfClass;
	static C(Other: UObject): BTDecorator_IsBBEntryOfClass;
}

declare type EBTNodeResult = 'Succeeded' | 'Failed' | 'Aborted' | 'InProgress';
declare var EBTNodeResult : { Succeeded:'Succeeded',Failed:'Failed',Aborted:'Aborted',InProgress:'InProgress', };
declare class BTDecorator_BlueprintBase extends BTDecorator { 
	AIOwner: AIController;
	ActorOwner: Actor;
	ObservedKeyNames: string[];
	bShowPropertyDetails: boolean;
	bCheckConditionOnlyBlackBoardChanges: boolean;
	bIsObservingBB: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlueprintBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_BlueprintBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlueprintBase;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveObserverDeactivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveObserverDeactivated(OwnerActor: Actor): void;
	ReceiveObserverActivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveObserverActivated(OwnerActor: Actor): void;
	ReceiveExecutionStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveExecutionStart(OwnerActor: Actor): void;
	ReceiveExecutionFinishAI(OwnerController: AIController,ControlledPawn: Pawn,NodeResult: EBTNodeResult): void;
	ReceiveExecutionFinish(OwnerActor: Actor,NodeResult: EBTNodeResult): void;
	ReceiveConditionCheck(OwnerActor: Actor): void;
	PerformConditionCheckAI(OwnerController: AIController,ControlledPawn: Pawn): boolean;
	PerformConditionCheck(OwnerActor: Actor): boolean;
	IsDecoratorObserverActive(): boolean;
	IsDecoratorExecutionActive(): boolean;
	FinishConditionCheck(bAllowExecution: boolean): void;
	static C(Other: UObject): BTDecorator_BlueprintBase;
}

declare type EGameplayContainerMatchType = 'Any' | 'All';
declare var EGameplayContainerMatchType : { Any:'Any',All:'All', };
declare class BTDecorator_CheckGameplayTagsOnActor extends BTDecorator { 
	ActorToCheck: BlackboardKeySelector;
	TagsToMatch: EGameplayContainerMatchType;
	GameplayTags: GameplayTagContainer;
	CachedDescription: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_CheckGameplayTagsOnActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CheckGameplayTagsOnActor;
	static C(Other: UObject): BTDecorator_CheckGameplayTagsOnActor;
}

declare type EBlackBoardEntryComparison = 'Equal' | 'NotEqual';
declare var EBlackBoardEntryComparison : { Equal:'Equal',NotEqual:'NotEqual', };
declare class BTDecorator_CompareBBEntries extends BTDecorator { 
	Operator: EBlackBoardEntryComparison;
	BlackboardKeyA: BlackboardKeySelector;
	BlackboardKeyB: BlackboardKeySelector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_CompareBBEntries;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_CompareBBEntries;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_CompareBBEntries;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CompareBBEntries;
	static C(Other: UObject): BTDecorator_CompareBBEntries;
}

declare class BTDecorator_ConeCheck extends BTDecorator { 
	ConeHalfAngle: number;
	ConeOrigin: BlackboardKeySelector;
	ConeDirection: BlackboardKeySelector;
	Observed: BlackboardKeySelector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_ConeCheck;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConeCheck;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_ConeCheck;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConeCheck;
	static C(Other: UObject): BTDecorator_ConeCheck;
}

declare class BTDecorator_Cooldown extends BTDecorator { 
	CoolDownTime: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_Cooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Cooldown;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_Cooldown;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Cooldown;
	static C(Other: UObject): BTDecorator_Cooldown;
}

declare type EPathExistanceQueryType = 'NavmeshRaycast2D' | 'HierarchicalQuery' | 'RegularPathFinding';
declare var EPathExistanceQueryType : { NavmeshRaycast2D:'NavmeshRaycast2D',HierarchicalQuery:'HierarchicalQuery',RegularPathFinding:'RegularPathFinding', };
declare class BTDecorator_DoesPathExist extends BTDecorator { 
	BlackboardKeyA: BlackboardKeySelector;
	BlackboardKeyB: BlackboardKeySelector;
	bUseSelf: boolean;
	PathQueryType: EPathExistanceQueryType;
	FilterClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_DoesPathExist;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_DoesPathExist;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_DoesPathExist;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_DoesPathExist;
	static C(Other: UObject): BTDecorator_DoesPathExist;
}

declare class BTDecorator_ForceSuccess extends BTDecorator { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_ForceSuccess;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ForceSuccess;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_ForceSuccess;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ForceSuccess;
	static C(Other: UObject): BTDecorator_ForceSuccess;
}

declare class BTDecorator_KeepInCone extends BTDecorator { 
	ConeHalfAngle: number;
	ConeOrigin: BlackboardKeySelector;
	Observed: BlackboardKeySelector;
	bUseSelfAsOrigin: boolean;
	bUseSelfAsObserved: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_KeepInCone;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_KeepInCone;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_KeepInCone;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_KeepInCone;
	static C(Other: UObject): BTDecorator_KeepInCone;
}

declare class BTDecorator_Loop extends BTDecorator { 
	NumLoops: number;
	bInfiniteLoop: boolean;
	InfiniteLoopTimeoutTime: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_Loop;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Loop;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_Loop;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Loop;
	static C(Other: UObject): BTDecorator_Loop;
}

declare class BTDecorator_ReachedMoveGoal extends BTDecorator { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_ReachedMoveGoal;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ReachedMoveGoal;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_ReachedMoveGoal;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ReachedMoveGoal;
	static C(Other: UObject): BTDecorator_ReachedMoveGoal;
}

declare class BTDecorator_SetTagCooldown extends BTDecorator { 
	CooldownTag: GameplayTag;
	CooldownDuration: number;
	bAddToExistingDuration: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_SetTagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_SetTagCooldown;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_SetTagCooldown;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_SetTagCooldown;
	static C(Other: UObject): BTDecorator_SetTagCooldown;
}

declare class BTDecorator_TagCooldown extends BTDecorator { 
	CooldownTag: GameplayTag;
	CooldownDuration: number;
	bAddToExistingDuration: boolean;
	bActivatesCooldown: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_TagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_TagCooldown;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_TagCooldown;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TagCooldown;
	static C(Other: UObject): BTDecorator_TagCooldown;
}

declare class BTDecorator_TimeLimit extends BTDecorator { 
	TimeLimit: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTDecorator_TimeLimit;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_TimeLimit;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTDecorator_TimeLimit;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TimeLimit;
	static C(Other: UObject): BTDecorator_TimeLimit;
}

declare class BTService_BlackboardBase extends BTService { 
	BlackboardKey: BlackboardKeySelector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTService_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTService_BlackboardBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTService_BlackboardBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlackboardBase;
	static C(Other: UObject): BTService_BlackboardBase;
}

declare class BTService_DefaultFocus extends BTService_BlackboardBase { 
	FocusPriority: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTService_DefaultFocus;
	static Find(Outer: UObject, ResourceName: string): BTService_DefaultFocus;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTService_DefaultFocus;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_DefaultFocus;
	static C(Other: UObject): BTService_DefaultFocus;
}

declare class EnvQueryTypes extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTypes;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTypes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTypes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTypes;
	static C(Other: UObject): EnvQueryTypes;
}

declare type EAIParamType = 'Float' | 'Int' | 'Bool';
declare var EAIParamType : { Float:'Float',Int:'Int',Bool:'Bool', };
declare class AIDynamicParam { 
	ParamName: string;
	ParamType: EAIParamType;
	Value: number;
	BBKey: BlackboardKeySelector;
	clone() : AIDynamicParam;
	static C(Other: UObject): AIDynamicParam;
}

declare class EQSParametrizedQueryExecutionRequest { 
	QueryTemplate: EnvQuery;
	QueryConfig: AIDynamicParam[];
	EQSQueryBlackboardKey: BlackboardKeySelector;
	RunMode: EEnvQueryRunMode;
	bUseBBKeyForQueryTemplate: boolean;
	clone() : EQSParametrizedQueryExecutionRequest;
	static C(Other: UObject): EQSParametrizedQueryExecutionRequest;
}

declare class BTService_RunEQS extends BTService_BlackboardBase { 
	EQSRequest: EQSParametrizedQueryExecutionRequest;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTService_RunEQS;
	static Find(Outer: UObject, ResourceName: string): BTService_RunEQS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTService_RunEQS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_RunEQS;
	static C(Other: UObject): BTService_RunEQS;
}

declare class BTService_BlueprintBase extends BTService { 
	AIOwner: AIController;
	ActorOwner: Actor;
	bShowPropertyDetails: boolean;
	bShowEventDetails: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTService_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTService_BlueprintBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTService_BlueprintBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlueprintBase;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveSearchStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveSearchStart(OwnerActor: Actor): void;
	ReceiveDeactivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveDeactivation(OwnerActor: Actor): void;
	ReceiveActivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveActivation(OwnerActor: Actor): void;
	IsServiceActive(): boolean;
	static C(Other: UObject): BTService_BlueprintBase;
}

declare class BTComposite_Selector extends BTCompositeNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTComposite_Selector;
	static Find(Outer: UObject, ResourceName: string): BTComposite_Selector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTComposite_Selector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Selector;
	static C(Other: UObject): BTComposite_Selector;
}

declare class BTComposite_Sequence extends BTCompositeNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTComposite_Sequence;
	static Find(Outer: UObject, ResourceName: string): BTComposite_Sequence;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTComposite_Sequence;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Sequence;
	static C(Other: UObject): BTComposite_Sequence;
}

declare type EBTParallelMode = 'AbortBackground' | 'WaitForBackground';
declare var EBTParallelMode : { AbortBackground:'AbortBackground',WaitForBackground:'WaitForBackground', };
declare class BTComposite_SimpleParallel extends BTCompositeNode { 
	FinishMode: EBTParallelMode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTComposite_SimpleParallel;
	static Find(Outer: UObject, ResourceName: string): BTComposite_SimpleParallel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTComposite_SimpleParallel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_SimpleParallel;
	static C(Other: UObject): BTComposite_SimpleParallel;
}

declare class BTTask_BlackboardBase extends BTTaskNode { 
	BlackboardKey: BlackboardKeySelector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_BlackboardBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_BlackboardBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlackboardBase;
	static C(Other: UObject): BTTask_BlackboardBase;
}

declare class BTTask_MoveTo extends BTTask_BlackboardBase { 
	AcceptableRadius: number;
	FilterClass: UnrealEngineClass;
	ObservedBlackboardValueTolerance: number;
	bObserveBlackboardValue: boolean;
	bAllowStrafe: boolean;
	bAllowPartialPath: boolean;
	bTrackMovingGoal: boolean;
	bProjectGoalLocation: boolean;
	bStopOnOverlap: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_MoveTo;
	static Find(Outer: UObject, ResourceName: string): BTTask_MoveTo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_MoveTo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveTo;
	static C(Other: UObject): BTTask_MoveTo;
}

declare class BTTask_MoveDirectlyToward extends BTTask_MoveTo { 
	bDisablePathUpdateOnGoalLocationChange: boolean;
	bProjectVectorGoalToNavigation: boolean;
	bUpdatedDeprecatedProperties: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_MoveDirectlyToward;
	static Find(Outer: UObject, ResourceName: string): BTTask_MoveDirectlyToward;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_MoveDirectlyToward;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveDirectlyToward;
	static C(Other: UObject): BTTask_MoveDirectlyToward;
}

declare class BTTask_RotateToFaceBBEntry extends BTTask_BlackboardBase { 
	Precision: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_RotateToFaceBBEntry;
	static Find(Outer: UObject, ResourceName: string): BTTask_RotateToFaceBBEntry;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_RotateToFaceBBEntry;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RotateToFaceBBEntry;
	static C(Other: UObject): BTTask_RotateToFaceBBEntry;
}

declare class EnvNamedValue { 
	ParamName: string;
	ParamType: EAIParamType;
	Value: number;
	clone() : EnvNamedValue;
	static C(Other: UObject): EnvNamedValue;
}

declare class BTTask_RunEQSQuery extends BTTask_BlackboardBase { 
	QueryTemplate: EnvQuery;
	QueryParams: EnvNamedValue[];
	QueryConfig: AIDynamicParam[];
	RunMode: EEnvQueryRunMode;
	EQSQueryBlackboardKey: BlackboardKeySelector;
	bUseBBKey: boolean;
	EQSRequest: EQSParametrizedQueryExecutionRequest;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_RunEQSQuery;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunEQSQuery;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_RunEQSQuery;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunEQSQuery;
	static C(Other: UObject): BTTask_RunEQSQuery;
}

declare class BTTask_BlueprintBase extends BTTaskNode { 
	AIOwner: AIController;
	ActorOwner: Actor;
	bShowPropertyDetails: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_BlueprintBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_BlueprintBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlueprintBase;
	SetFinishOnMessageWithId(MessageName: string,RequestID: number): void;
	SetFinishOnMessage(MessageName: string): void;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveExecuteAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveExecute(OwnerActor: Actor): void;
	ReceiveAbortAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveAbort(OwnerActor: Actor): void;
	IsTaskExecuting(): boolean;
	IsTaskAborting(): boolean;
	FinishExecute(bSuccess: boolean): void;
	FinishAbort(): void;
	static C(Other: UObject): BTTask_BlueprintBase;
}

declare class BTTask_GameplayTaskBase extends BTTaskNode { 
	bWaitForGameplayTask: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_GameplayTaskBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_GameplayTaskBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_GameplayTaskBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_GameplayTaskBase;
	static C(Other: UObject): BTTask_GameplayTaskBase;
}

declare class BTTask_MakeNoise extends BTTaskNode { 
	Loudnes: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_MakeNoise;
	static Find(Outer: UObject, ResourceName: string): BTTask_MakeNoise;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_MakeNoise;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MakeNoise;
	static C(Other: UObject): BTTask_MakeNoise;
}

declare class BTTask_PawnActionBase extends BTTaskNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_PawnActionBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_PawnActionBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_PawnActionBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PawnActionBase;
	static C(Other: UObject): BTTask_PawnActionBase;
}

declare class BTTask_PushPawnAction extends BTTask_PawnActionBase { 
	Action: PawnAction;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_PushPawnAction;
	static Find(Outer: UObject, ResourceName: string): BTTask_PushPawnAction;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_PushPawnAction;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PushPawnAction;
	static C(Other: UObject): BTTask_PushPawnAction;
}

declare class BTTask_PlayAnimation extends BTTaskNode { 
	AnimationToPlay: AnimationAsset;
	bLooping: boolean;
	bNonBlocking: boolean;
	MyOwnerComp: BehaviorTreeComponent;
	CachedSkelMesh: SkeletalMeshComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_PlayAnimation;
	static Find(Outer: UObject, ResourceName: string): BTTask_PlayAnimation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_PlayAnimation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlayAnimation;
	static C(Other: UObject): BTTask_PlayAnimation;
}

declare class SoundNode extends UObject { 
	ChildNodes: SoundNode[];
	GraphNode: EdGraphNode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundNode;
	static Find(Outer: UObject, ResourceName: string): SoundNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNode;
	static C(Other: UObject): SoundNode;
}

declare class SoundCue extends SoundBase { 
	bOverrideAttenuation: boolean;
	FirstNode: SoundNode;
	VolumeMultiplier: number;
	PitchMultiplier: number;
	AttenuationOverrides: AttenuationSettings;
	AllNodes: SoundNode[];
	SoundCueGraph: EdGraph;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCue;
	static Find(Outer: UObject, ResourceName: string): SoundCue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCue;
	static C(Other: UObject): SoundCue;
}

declare class BTTask_PlaySound extends BTTaskNode { 
	SoundToPlay: SoundCue;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_PlaySound;
	static Find(Outer: UObject, ResourceName: string): BTTask_PlaySound;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_PlaySound;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlaySound;
	static C(Other: UObject): BTTask_PlaySound;
}

declare class BTTask_RunBehavior extends BTTaskNode { 
	BehaviorAsset: BehaviorTree;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_RunBehavior;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehavior;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_RunBehavior;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehavior;
	static C(Other: UObject): BTTask_RunBehavior;
}

declare class BTTask_RunBehaviorDynamic extends BTTaskNode { 
	InjectionTag: GameplayTag;
	DefaultBehaviorAsset: BehaviorTree;
	BehaviorAsset: BehaviorTree;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_RunBehaviorDynamic;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehaviorDynamic;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_RunBehaviorDynamic;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehaviorDynamic;
	static C(Other: UObject): BTTask_RunBehaviorDynamic;
}

declare class BTTask_SetTagCooldown extends BTTaskNode { 
	CooldownTag: GameplayTag;
	bAddToExistingDuration: boolean;
	CooldownDuration: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_SetTagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTTask_SetTagCooldown;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_SetTagCooldown;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_SetTagCooldown;
	static C(Other: UObject): BTTask_SetTagCooldown;
}

declare class BTTask_Wait extends BTTaskNode { 
	WaitTime: number;
	RandomDeviation: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_Wait;
	static Find(Outer: UObject, ResourceName: string): BTTask_Wait;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_Wait;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_Wait;
	static C(Other: UObject): BTTask_Wait;
}

declare class BTTask_WaitBlackboardTime extends BTTask_Wait { 
	BlackboardKey: BlackboardKeySelector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BTTask_WaitBlackboardTime;
	static Find(Outer: UObject, ResourceName: string): BTTask_WaitBlackboardTime;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BTTask_WaitBlackboardTime;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_WaitBlackboardTime;
	static C(Other: UObject): BTTask_WaitBlackboardTime;
}

declare class CrowdAgentInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CrowdAgentInterface;
	static Find(Outer: UObject, ResourceName: string): CrowdAgentInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CrowdAgentInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdAgentInterface;
	static C(Other: UObject): CrowdAgentInterface;
}

declare class CrowdAvoidanceConfig { 
	VelocityBias: number;
	DesiredVelocityWeight: number;
	CurrentVelocityWeight: number;
	SideBiasWeight: number;
	ImpactTimeWeight: number;
	ImpactTimeRange: number;
	CustomPatternIdx: number;
	AdaptiveDivisions: number;
	AdaptiveRings: number;
	AdaptiveDepth: number;
	clone() : CrowdAvoidanceConfig;
	static C(Other: UObject): CrowdAvoidanceConfig;
}

declare class CrowdAvoidanceSamplingPattern { 
	Angles: number[];
	Radii: number[];
	clone() : CrowdAvoidanceSamplingPattern;
	static C(Other: UObject): CrowdAvoidanceSamplingPattern;
}

declare class CrowdManager extends UObject { 
	MyNavData: NavigationData;
	AvoidanceConfig: CrowdAvoidanceConfig[];
	SamplingPatterns: CrowdAvoidanceSamplingPattern[];
	MaxAgents: number;
	MaxAgentRadius: number;
	MaxAvoidedAgents: number;
	MaxAvoidedWalls: number;
	NavmeshCheckInterval: number;
	PathOptimizationInterval: number;
	bResolveCollisions: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CrowdManager;
	static Find(Outer: UObject, ResourceName: string): CrowdManager;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CrowdManager;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManager;
	static C(Other: UObject): CrowdManager;
}

declare class EnvQueryContext_BlueprintBase extends EnvQueryContext { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryContext_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_BlueprintBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryContext_BlueprintBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_BlueprintBase;
	ProvideSingleLocation(QuerierObject: UObject,QuerierActor: Actor,ResultingLocation?: Vector): {ResultingLocation: Vector};
	ProvideSingleActor(QuerierObject: UObject,QuerierActor: Actor,ResultingActor?: Actor): {ResultingActor: Actor};
	ProvideLocationsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingLocationSet?: Vector[]): {ResultingLocationSet: Vector[]};
	ProvideActorsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingActorsSet?: Actor[]): {ResultingActorsSet: Actor[]};
	static C(Other: UObject): EnvQueryContext_BlueprintBase;
}

declare class EnvQueryContext_Item extends EnvQueryContext { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryContext_Item;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Item;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryContext_Item;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Item;
	static C(Other: UObject): EnvQueryContext_Item;
}

declare class EnvQueryContext_Querier extends EnvQueryContext { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryContext_Querier;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Querier;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryContext_Querier;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Querier;
	static C(Other: UObject): EnvQueryContext_Querier;
}

declare class VisualLoggerExtension extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VisualLoggerExtension;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerExtension;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VisualLoggerExtension;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerExtension;
	static C(Other: UObject): VisualLoggerExtension;
}

declare class EnvQueryDebugHelpers extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryDebugHelpers;
	static Find(Outer: UObject, ResourceName: string): EnvQueryDebugHelpers;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryDebugHelpers;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryDebugHelpers;
	static C(Other: UObject): EnvQueryDebugHelpers;
}

declare class EQSQueryResultSourceInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EQSQueryResultSourceInterface;
	static Find(Outer: UObject, ResourceName: string): EQSQueryResultSourceInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EQSQueryResultSourceInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSQueryResultSourceInterface;
	static C(Other: UObject): EQSQueryResultSourceInterface;
}

declare class EnvQueryItemType_VectorBase extends EnvQueryItemType { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryItemType_VectorBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_VectorBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryItemType_VectorBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_VectorBase;
	static C(Other: UObject): EnvQueryItemType_VectorBase;
}

declare class EnvQueryItemType_ActorBase extends EnvQueryItemType_VectorBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryItemType_ActorBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_ActorBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryItemType_ActorBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_ActorBase;
	static C(Other: UObject): EnvQueryItemType_ActorBase;
}

declare class EnvQueryItemType_Actor extends EnvQueryItemType_ActorBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryItemType_Actor;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Actor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryItemType_Actor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Actor;
	static C(Other: UObject): EnvQueryItemType_Actor;
}

declare class EnvQueryItemType_Direction extends EnvQueryItemType_VectorBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryItemType_Direction;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Direction;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryItemType_Direction;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Direction;
	static C(Other: UObject): EnvQueryItemType_Direction;
}

declare class EnvQueryItemType_Point extends EnvQueryItemType_VectorBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryItemType_Point;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Point;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryItemType_Point;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Point;
	static C(Other: UObject): EnvQueryItemType_Point;
}

declare class EnvQueryGenerator_ActorsOfClass extends EnvQueryGenerator { 
	SearchRadius: AIDataProviderFloatValue;
	SearchedActorClass: UnrealEngineClass;
	SearchCenter: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_ActorsOfClass;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ActorsOfClass;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_ActorsOfClass;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ActorsOfClass;
	static C(Other: UObject): EnvQueryGenerator_ActorsOfClass;
}

declare class EnvQueryGenerator_BlueprintBase extends EnvQueryGenerator { 
	GeneratorsActionDescription: string;
	Context: UnrealEngineClass;
	GeneratedItemType: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_BlueprintBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_BlueprintBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_BlueprintBase;
	GetQuerier(): UObject;
	DoItemGeneration(ContextLocations: Vector[]): void;
	AddGeneratedVector(GeneratedVector: Vector): void;
	AddGeneratedActor(GeneratedActor: Actor): void;
	static C(Other: UObject): EnvQueryGenerator_BlueprintBase;
}

declare class EnvQueryGenerator_Composite extends EnvQueryGenerator { 
	Generators: EnvQueryGenerator[];
	bHasMatchingItemType: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_Composite;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Composite;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_Composite;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Composite;
	static C(Other: UObject): EnvQueryGenerator_Composite;
}

declare class EnvQueryGenerator_CurrentLocation extends EnvQueryGenerator { 
	QueryContext: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_CurrentLocation;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_CurrentLocation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_CurrentLocation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_CurrentLocation;
	static C(Other: UObject): EnvQueryGenerator_CurrentLocation;
}

declare type EEnvTraceShape = 'Line' | 'Box' | 'Sphere' | 'Capsule';
declare var EEnvTraceShape : { Line:'Line',Box:'Box',Sphere:'Sphere',Capsule:'Capsule', };
declare type EEnvQueryTrace = 'None' | 'Navigation' | 'Geometry' | 'NavigationOverLedges';
declare var EEnvQueryTrace : { None:'None',Navigation:'Navigation',Geometry:'Geometry',NavigationOverLedges:'NavigationOverLedges', };
declare class EnvTraceData { 
	VersionNum: number;
	NavigationFilter: UnrealEngineClass;
	ProjectDown: number;
	ProjectUp: number;
	ExtentX: number;
	ExtentY: number;
	ExtentZ: number;
	PostProjectionVerticalOffset: number;
	TraceChannel: ETraceTypeQuery;
	SerializedChannel: ECollisionChannel;
	TraceShape: EEnvTraceShape;
	TraceMode: EEnvQueryTrace;
	bTraceComplex: boolean;
	bOnlyBlockingHits: boolean;
	bCanTraceOnNavMesh: boolean;
	bCanTraceOnGeometry: boolean;
	bCanDisableTrace: boolean;
	bCanProjectDown: boolean;
	clone() : EnvTraceData;
	static C(Other: UObject): EnvTraceData;
}

declare class EnvQueryGenerator_ProjectedPoints extends EnvQueryGenerator { 
	ProjectionData: EnvTraceData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_ProjectedPoints;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ProjectedPoints;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_ProjectedPoints;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ProjectedPoints;
	static C(Other: UObject): EnvQueryGenerator_ProjectedPoints;
}

declare class AIDataProviderIntValue extends AIDataProviderTypedValue { 
	DefaultValue: number;
	clone() : AIDataProviderIntValue;
	static C(Other: UObject): AIDataProviderIntValue;
}

declare type EEnvDirection = 'TwoPoints' | 'Rotation';
declare var EEnvDirection : { TwoPoints:'TwoPoints',Rotation:'Rotation', };
declare class EnvDirection { 
	LineFrom: UnrealEngineClass;
	LineTo: UnrealEngineClass;
	Rotation: UnrealEngineClass;
	DirMode: EEnvDirection;
	clone() : EnvDirection;
	static C(Other: UObject): EnvDirection;
}

declare class EnvQueryGenerator_Donut extends EnvQueryGenerator_ProjectedPoints { 
	InnerRadius: AIDataProviderFloatValue;
	OuterRadius: AIDataProviderFloatValue;
	NumberOfRings: AIDataProviderIntValue;
	PointsPerRing: AIDataProviderIntValue;
	ArcDirection: EnvDirection;
	ArcAngle: AIDataProviderFloatValue;
	bUseSpiralPattern: boolean;
	Center: UnrealEngineClass;
	bDefineArc: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_Donut;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Donut;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_Donut;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Donut;
	static C(Other: UObject): EnvQueryGenerator_Donut;
}

declare type EPointOnCircleSpacingMethod = 'BySpaceBetween' | 'ByNumberOfPoints';
declare var EPointOnCircleSpacingMethod : { BySpaceBetween:'BySpaceBetween',ByNumberOfPoints:'ByNumberOfPoints', };
declare class EnvQueryGenerator_OnCircle extends EnvQueryGenerator_ProjectedPoints { 
	CircleRadius: AIDataProviderFloatValue;
	SpaceBetween: AIDataProviderFloatValue;
	NumberOfPoints: AIDataProviderIntValue;
	PointOnCircleSpacingMethod: EPointOnCircleSpacingMethod;
	ArcDirection: EnvDirection;
	ArcAngle: AIDataProviderFloatValue;
	AngleRadians: number;
	CircleCenter: UnrealEngineClass;
	bIgnoreAnyContextActorsWhenGeneratingCircle: boolean;
	CircleCenterZOffset: AIDataProviderFloatValue;
	TraceData: EnvTraceData;
	bDefineArc: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_OnCircle;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_OnCircle;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_OnCircle;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_OnCircle;
	static C(Other: UObject): EnvQueryGenerator_OnCircle;
}

declare class EnvQueryGenerator_SimpleGrid extends EnvQueryGenerator_ProjectedPoints { 
	GridSize: AIDataProviderFloatValue;
	SpaceBetween: AIDataProviderFloatValue;
	GenerateAround: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_SimpleGrid;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_SimpleGrid;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_SimpleGrid;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_SimpleGrid;
	static C(Other: UObject): EnvQueryGenerator_SimpleGrid;
}

declare class EnvQueryGenerator_PathingGrid extends EnvQueryGenerator_SimpleGrid { 
	PathToItem: AIDataProviderBoolValue;
	NavigationFilter: UnrealEngineClass;
	ScanRangeMultiplier: AIDataProviderFloatValue;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryGenerator_PathingGrid;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_PathingGrid;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryGenerator_PathingGrid;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_PathingGrid;
	static C(Other: UObject): EnvQueryGenerator_PathingGrid;
}

declare type EEnvTestDistance = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'DistanceAbsoluteZ';
declare var EEnvTestDistance : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',DistanceAbsoluteZ:'DistanceAbsoluteZ', };
declare class EnvQueryTest_Distance extends EnvQueryTest { 
	TestMode: EEnvTestDistance;
	DistanceTo: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Distance;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Distance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Distance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Distance;
	static C(Other: UObject): EnvQueryTest_Distance;
}

declare type EEnvTestDot = 'Dot3D' | 'Dot2D';
declare var EEnvTestDot : { Dot3D:'Dot3D',Dot2D:'Dot2D', };
declare class EnvQueryTest_Dot extends EnvQueryTest { 
	LineA: EnvDirection;
	LineB: EnvDirection;
	TestMode: EEnvTestDot;
	bAbsoluteValue: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Dot;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Dot;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Dot;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Dot;
	static C(Other: UObject): EnvQueryTest_Dot;
}

declare class EnvQueryTest_GameplayTags extends EnvQueryTest { 
	TagsToMatch: EGameplayContainerMatchType;
	GameplayTags: GameplayTagContainer;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_GameplayTags;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_GameplayTags;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_GameplayTags;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_GameplayTags;
	static C(Other: UObject): EnvQueryTest_GameplayTags;
}

declare type EEnvOverlapShape = 'Box' | 'Sphere' | 'Capsule';
declare var EEnvOverlapShape : { Box:'Box',Sphere:'Sphere',Capsule:'Capsule', };
declare class EnvOverlapData { 
	ExtentX: number;
	ExtentY: number;
	ExtentZ: number;
	ShapeOffset: Vector;
	OverlapChannel: ECollisionChannel;
	OverlapShape: EEnvOverlapShape;
	bOnlyBlockingHits: boolean;
	bOverlapComplex: boolean;
	clone() : EnvOverlapData;
	static C(Other: UObject): EnvOverlapData;
}

declare class EnvQueryTest_Overlap extends EnvQueryTest { 
	OverlapData: EnvOverlapData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Overlap;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Overlap;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Overlap;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Overlap;
	static C(Other: UObject): EnvQueryTest_Overlap;
}

declare type EEnvTestPathfinding = 'PathExist' | 'PathCost' | 'PathLength';
declare var EEnvTestPathfinding : { PathExist:'PathExist',PathCost:'PathCost',PathLength:'PathLength', };
declare class EnvQueryTest_Pathfinding extends EnvQueryTest { 
	TestMode: EEnvTestPathfinding;
	Context: UnrealEngineClass;
	PathFromContext: AIDataProviderBoolValue;
	SkipUnreachable: AIDataProviderBoolValue;
	FilterClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Pathfinding;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Pathfinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Pathfinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Pathfinding;
	static C(Other: UObject): EnvQueryTest_Pathfinding;
}

declare class EnvQueryTest_PathfindingBatch extends EnvQueryTest_Pathfinding { 
	ScanRangeMultiplier: AIDataProviderFloatValue;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_PathfindingBatch;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_PathfindingBatch;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_PathfindingBatch;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_PathfindingBatch;
	static C(Other: UObject): EnvQueryTest_PathfindingBatch;
}

declare class EnvQueryTest_Project extends EnvQueryTest { 
	ProjectionData: EnvTraceData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Project;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Project;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Project;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Project;
	static C(Other: UObject): EnvQueryTest_Project;
}

declare class EnvQueryTest_Random extends EnvQueryTest { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Random;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Random;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Random;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Random;
	static C(Other: UObject): EnvQueryTest_Random;
}

declare class EnvQueryTest_Trace extends EnvQueryTest { 
	TraceData: EnvTraceData;
	TraceFromContext: AIDataProviderBoolValue;
	ItemHeightOffset: AIDataProviderFloatValue;
	ContextHeightOffset: AIDataProviderFloatValue;
	Context: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnvQueryTest_Trace;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Trace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnvQueryTest_Trace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Trace;
	static C(Other: UObject): EnvQueryTest_Trace;
}

declare class EQSRenderingComponent extends PrimitiveComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EQSRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): EQSRenderingComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EQSRenderingComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSRenderingComponent;
	static C(Other: UObject): EQSRenderingComponent;
}

declare type EEnvQueryHightlightMode = 'All' | 'Best5Pct' | 'Best25Pct';
declare var EEnvQueryHightlightMode : { All:'All',Best5Pct:'Best5Pct',Best25Pct:'Best25Pct', };
declare class EQSTestingPawn extends Character { 
	QueryTemplate: EnvQuery;
	QueryParams: EnvNamedValue[];
	QueryConfig: AIDynamicParam[];
	TimeLimitPerStep: number;
	StepToDebugDraw: number;
	HighlightMode: EEnvQueryHightlightMode;
	bDrawLabels: boolean;
	bDrawFailedItems: boolean;
	bReRunQueryOnlyOnFinishedMove: boolean;
	bShouldBeVisibleInGame: boolean;
	bTickDuringGame: boolean;
	QueryingMode: EEnvQueryRunMode;
	EdRenderComp: EQSRenderingComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EQSTestingPawn;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSTestingPawn;
	static C(Other: UObject): EQSTestingPawn;
}

declare class NavFilter_AIControllerDefault extends NavigationQueryFilter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavFilter_AIControllerDefault;
	static Find(Outer: UObject, ResourceName: string): NavFilter_AIControllerDefault;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavFilter_AIControllerDefault;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavFilter_AIControllerDefault;
	static C(Other: UObject): NavFilter_AIControllerDefault;
}

declare class CrowdFollowingComponent extends PathFollowingComponent { 
	CrowdAgentMoveDirection: Vector;
	CharacterMovement: CharacterMovementComponent;
	AvoidanceGroup: NavAvoidanceMask;
	GroupsToAvoid: NavAvoidanceMask;
	GroupsToIgnore: NavAvoidanceMask;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CrowdFollowingComponent;
	static Find(Outer: UObject, ResourceName: string): CrowdFollowingComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CrowdFollowingComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdFollowingComponent;
	SuspendCrowdSteering(bSuspend: boolean): void;
	static C(Other: UObject): CrowdFollowingComponent;
}

declare class PawnAction_BlueprintBase extends PawnAction { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnAction_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): PawnAction_BlueprintBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnAction_BlueprintBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_BlueprintBase;
	ActionTick(ControlledPawn: Pawn,DeltaSeconds: number): void;
	ActionStart(ControlledPawn: Pawn): void;
	ActionResume(ControlledPawn: Pawn): void;
	ActionPause(ControlledPawn: Pawn): void;
	ActionFinished(ControlledPawn: Pawn,WithResult: EPawnActionResult): void;
	static C(Other: UObject): PawnAction_BlueprintBase;
}

declare class PawnAction_Move extends PawnAction { 
	GoalActor: Actor;
	GoalLocation: Vector;
	AcceptableRadius: number;
	FilterClass: UnrealEngineClass;
	bAllowStrafe: boolean;
	bFinishOnOverlap: boolean;
	bUsePathfinding: boolean;
	bAllowPartialPath: boolean;
	bProjectGoalToNavigation: boolean;
	bUpdatePathToGoal: boolean;
	bAbortChildActionOnPathChange: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnAction_Move;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Move;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnAction_Move;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Move;
	static C(Other: UObject): PawnAction_Move;
}

declare type EPawnActionFailHandling = 'RequireSuccess' | 'IgnoreFailure';
declare var EPawnActionFailHandling : { RequireSuccess:'RequireSuccess',IgnoreFailure:'IgnoreFailure', };
declare class PawnAction_Repeat extends PawnAction { 
	ActionToRepeat: PawnAction;
	RecentActionCopy: PawnAction;
	ChildFailureHandlingMode: EPawnActionFailHandling;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnAction_Repeat;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Repeat;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnAction_Repeat;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Repeat;
	static C(Other: UObject): PawnAction_Repeat;
}

declare class PawnAction_Sequence extends PawnAction { 
	ActionSequence: PawnAction[];
	ChildFailureHandlingMode: EPawnActionFailHandling;
	RecentActionCopy: PawnAction;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnAction_Sequence;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Sequence;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnAction_Sequence;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Sequence;
	static C(Other: UObject): PawnAction_Sequence;
}

declare class PawnAction_Wait extends PawnAction { 
	TimeToWait: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnAction_Wait;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Wait;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnAction_Wait;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Wait;
	static C(Other: UObject): PawnAction_Wait;
}

declare class PawnSensingComponent extends ActorComponent { 
	HearingThreshold: number;
	LOSHearingThreshold: number;
	SightRadius: number;
	SensingInterval: number;
	HearingMaxSoundAge: number;
	bEnableSensingUpdates: boolean;
	bOnlySensePlayers: boolean;
	bSeePawns: boolean;
	bHearNoises: boolean;
	OnSeePawn: UnrealEngineMulticastDelegate<(Pawn: Pawn) => void>;
	OnHearNoise: UnrealEngineMulticastDelegate<(Instigator: Pawn, Location: Vector, Volume: number) => void>;
	PeripheralVisionAngle: number;
	PeripheralVisionCosine: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnSensingComponent;
	static Find(Outer: UObject, ResourceName: string): PawnSensingComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnSensingComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnSensingComponent;
	SetSensingUpdatesEnabled(bEnabled: boolean): void;
	SetSensingInterval(NewSensingInterval: number): void;
	SetPeripheralVisionAngle(NewPeripheralVisionAngle: number): void;
	GetPeripheralVisionCosine(): number;
	GetPeripheralVisionAngle(): number;
	static C(Other: UObject): PawnSensingComponent;
}

declare class PropertyConfigFileDisplayRow extends UObject { 
	ConfigFileName: string;
	ExternalProperty: Property;
	bIsFileWritable: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PropertyConfigFileDisplayRow;
	static Find(Outer: UObject, ResourceName: string): PropertyConfigFileDisplayRow;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PropertyConfigFileDisplayRow;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyConfigFileDisplayRow;
	static C(Other: UObject): PropertyConfigFileDisplayRow;
}

declare class ConfigHierarchyPropertyView extends UObject { 
	EditProperty: any;
	ConfigFilePropertyObjects: PropertyConfigFileDisplayRow[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ConfigHierarchyPropertyView;
	static Find(Outer: UObject, ResourceName: string): ConfigHierarchyPropertyView;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ConfigHierarchyPropertyView;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConfigHierarchyPropertyView;
	static C(Other: UObject): ConfigHierarchyPropertyView;
}

declare class K2Node_CreateDragDropOperation extends K2Node_ConstructObjectFromClass { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): K2Node_CreateDragDropOperation;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateDragDropOperation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): K2Node_CreateDragDropOperation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateDragDropOperation;
	static C(Other: UObject): K2Node_CreateDragDropOperation;
}

declare class K2Node_CreateWidget extends K2Node_ConstructObjectFromClass { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): K2Node_CreateWidget;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateWidget;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): K2Node_CreateWidget;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateWidget;
	static C(Other: UObject): K2Node_CreateWidget;
}

declare class AutomatedAssetImportData extends UObject { 
	GroupName: string;
	Filenames: string[];
	DestinationPath: string;
	FactoryName: string;
	bReplaceExisting: boolean;
	bSkipReadOnly: boolean;
	Factory: Factory;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AutomatedAssetImportData;
	static Find(Outer: UObject, ResourceName: string): AutomatedAssetImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AutomatedAssetImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedAssetImportData;
	static C(Other: UObject): AutomatedAssetImportData;
}

declare class Factory extends UObject { 
	bCreateNew: boolean;
	SupportedClass: UnrealEngineClass;
	ContextClass: UnrealEngineClass;
	Formats: string[];
	bEditAfterNew: boolean;
	bEditorImport: boolean;
	bText: boolean;
	ImportPriority: number;
	AutomatedImportData: AutomatedAssetImportData;
	OverwriteYesOrNoToAllState: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Factory;
	static Find(Outer: UObject, ResourceName: string): Factory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Factory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Factory;
	static C(Other: UObject): Factory;
}

declare class SlateVectorArtDataFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SlateVectorArtDataFactory;
	static Find(Outer: UObject, ResourceName: string): SlateVectorArtDataFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SlateVectorArtDataFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateVectorArtDataFactory;
	static C(Other: UObject): SlateVectorArtDataFactory;
}

declare class UMGEditorProjectSettings extends UObject { 
	bShowWidgetsFromEngineContent: boolean;
	bShowWidgetsFromDeveloperContent: boolean;
	CategoriesToHide: string[];
	WidgetClassesToHide: StringClassReference[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UMGEditorProjectSettings;
	static Find(Outer: UObject, ResourceName: string): UMGEditorProjectSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UMGEditorProjectSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGEditorProjectSettings;
	static C(Other: UObject): UMGEditorProjectSettings;
}

declare class EditorPropertyPathSegment { 
	Struct: Struct;
	MemberName: string;
	MemberGuid: Guid;
	IsProperty: boolean;
	clone() : EditorPropertyPathSegment;
	static C(Other: UObject): EditorPropertyPathSegment;
}

declare class EditorPropertyPath { 
	Segments: EditorPropertyPathSegment[];
	clone() : EditorPropertyPath;
	static C(Other: UObject): EditorPropertyPath;
}

declare class DelegateEditorBinding { 
	ObjectName: string;
	PropertyName: string;
	FunctionName: string;
	SourceProperty: string;
	SourcePath: EditorPropertyPath;
	MemberGuid: Guid;
	Kind: EBindingKind;
	clone() : DelegateEditorBinding;
	static C(Other: UObject): DelegateEditorBinding;
}

declare class WidgetAnimation_DEPRECATED { 
	MovieScene: MovieScene;
	AnimationBindings: WidgetAnimationBinding[];
	clone() : WidgetAnimation_DEPRECATED;
	static C(Other: UObject): WidgetAnimation_DEPRECATED;
}

declare class WidgetBlueprint extends Blueprint { 
	WidgetTree: WidgetTree;
	Bindings: DelegateEditorBinding[];
	AnimationData: WidgetAnimation_DEPRECATED[];
	Animations: WidgetAnimation[];
	PaletteCategory: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WidgetBlueprint;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprint;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WidgetBlueprint;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprint;
	static C(Other: UObject): WidgetBlueprint;
}

declare class WidgetBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WidgetBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WidgetBlueprintFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintFactory;
	static C(Other: UObject): WidgetBlueprintFactory;
}

declare class WidgetDesignerSettings extends UObject { 
	GridSnapEnabled: boolean;
	GridSnapSize: number;
	bLockToPanelOnDragByDefault: boolean;
	bShowOutlines: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WidgetDesignerSettings;
	static Find(Outer: UObject, ResourceName: string): WidgetDesignerSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WidgetDesignerSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetDesignerSettings;
	static C(Other: UObject): WidgetDesignerSettings;
}

declare class WidgetGraphSchema extends EdGraphSchema_K2 { 
	NAME_NeverAsPin: string;
	NAME_PinHiddenByDefault: string;
	NAME_PinShownByDefault: string;
	NAME_AlwaysAsPin: string;
	NAME_OnEvaluate: string;
	DefaultEvaluationHandlerName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WidgetGraphSchema;
	static Find(Outer: UObject, ResourceName: string): WidgetGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WidgetGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetGraphSchema;
	static C(Other: UObject): WidgetGraphSchema;
}

declare class WidgetSlotPair extends UObject { 
	WidgetName: string;
	SlotPropertyNames: string[];
	SlotPropertyValues: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WidgetSlotPair;
	static Find(Outer: UObject, ResourceName: string): WidgetSlotPair;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WidgetSlotPair;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetSlotPair;
	static C(Other: UObject): WidgetSlotPair;
}

declare class FavoritedBlueprintPaletteItem { 
	clone() : FavoritedBlueprintPaletteItem;
	static C(Other: UObject): FavoritedBlueprintPaletteItem;
}

declare class BlueprintPaletteFavorites extends UObject { 
	CustomFavorites: string[];
	CurrentFavorites: FavoritedBlueprintPaletteItem[];
	CurrentProfile: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintPaletteFavorites;
	static Find(Outer: UObject, ResourceName: string): BlueprintPaletteFavorites;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintPaletteFavorites;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPaletteFavorites;
	static C(Other: UObject): BlueprintPaletteFavorites;
}

declare type EBlueprintProfilerHeatMapDisplayMode = 'None' | 'Inclusive' | 'Average' | 'MaxTiming' | 'Total' | 'HottestPath' | 'PinToPin';
declare var EBlueprintProfilerHeatMapDisplayMode : { None:'None',Inclusive:'Inclusive',Average:'Average',MaxTiming:'MaxTiming',Total:'Total',HottestPath:'HottestPath',PinToPin:'PinToPin', };
declare type EBlueprintProfilerHeatLevelMetricsType = 'ClassRelative' | 'FrameRelative' | 'CustomThresholds';
declare var EBlueprintProfilerHeatLevelMetricsType : { ClassRelative:'ClassRelative',FrameRelative:'FrameRelative',CustomThresholds:'CustomThresholds', };
declare class BlueprintProfilerSettings extends UObject { 
	bDisplayByInstance: boolean;
	bScopeToDebugInstance: boolean;
	bGraphFilter: boolean;
	bDisplayPure: boolean;
	bDisplayInheritedEvents: boolean;
	GraphNodeHeatMapDisplayMode: EBlueprintProfilerHeatMapDisplayMode;
	WireHeatMapDisplayMode: EBlueprintProfilerHeatMapDisplayMode;
	HeatLevelMetricsType: EBlueprintProfilerHeatLevelMetricsType;
	CustomEventPerformanceThreshold: number;
	CustomAveragePerformanceThreshold: number;
	CustomInclusivePerformanceThreshold: number;
	CustomMaxPerformanceThreshold: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintProfilerSettings;
	static Find(Outer: UObject, ResourceName: string): BlueprintProfilerSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintProfilerSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintProfilerSettings;
	static C(Other: UObject): BlueprintProfilerSettings;
}

declare class K2Node_AsyncAction extends K2Node_BaseAsyncTask { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): K2Node_AsyncAction;
	static Find(Outer: UObject, ResourceName: string): K2Node_AsyncAction;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): K2Node_AsyncAction;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AsyncAction;
	static C(Other: UObject): K2Node_AsyncAction;
}

declare type EBlueprintPinStyleType = 'BPST_Original' | 'BPST_VariantA';
declare var EBlueprintPinStyleType : { BPST_Original:'BPST_Original',BPST_VariantA:'BPST_VariantA', };
declare class GraphEditorSettings extends UObject { 
	DataPinStyle: EBlueprintPinStyleType;
	PaddingAbovePin: number;
	PaddingBelowPin: number;
	PaddingRightOfInput: number;
	PaddingLeftOfOutput: number;
	PaddingTowardsNodeEdge: number;
	bTreatSplinesLikePins: boolean;
	SplineHoverTolerance: number;
	ForwardSplineHorizontalDeltaRange: number;
	ForwardSplineVerticalDeltaRange: number;
	ForwardSplineTangentFromHorizontalDelta: Vector2D;
	ForwardSplineTangentFromVerticalDelta: Vector2D;
	BackwardSplineHorizontalDeltaRange: number;
	BackwardSplineVerticalDeltaRange: number;
	BackwardSplineTangentFromHorizontalDelta: Vector2D;
	BackwardSplineTangentFromVerticalDelta: Vector2D;
	DefaultPinTypeColor: LinearColor;
	ExecutionPinTypeColor: LinearColor;
	BooleanPinTypeColor: LinearColor;
	BytePinTypeColor: LinearColor;
	ClassPinTypeColor: LinearColor;
	IntPinTypeColor: LinearColor;
	FloatPinTypeColor: LinearColor;
	NamePinTypeColor: LinearColor;
	AssetPinTypeColor: LinearColor;
	AssetClassPinTypeColor: LinearColor;
	DelegatePinTypeColor: LinearColor;
	ObjectPinTypeColor: LinearColor;
	InterfacePinTypeColor: LinearColor;
	StringPinTypeColor: LinearColor;
	TextPinTypeColor: LinearColor;
	StructPinTypeColor: LinearColor;
	WildcardPinTypeColor: LinearColor;
	VectorPinTypeColor: LinearColor;
	RotatorPinTypeColor: LinearColor;
	TransformPinTypeColor: LinearColor;
	IndexPinTypeColor: LinearColor;
	EventNodeTitleColor: LinearColor;
	FunctionCallNodeTitleColor: LinearColor;
	PureFunctionCallNodeTitleColor: LinearColor;
	ParentFunctionCallNodeTitleColor: LinearColor;
	FunctionTerminatorNodeTitleColor: LinearColor;
	ExecBranchNodeTitleColor: LinearColor;
	ExecSequenceNodeTitleColor: LinearColor;
	ResultNodeTitleColor: LinearColor;
	DefaultCommentNodeTitleColor: LinearColor;
	TraceAttackColor: LinearColor;
	TraceAttackWireThickness: number;
	TraceAttackHoldPeriod: number;
	TraceDecayPeriod: number;
	TraceDecayExponent: number;
	TraceSustainColor: LinearColor;
	TraceSustainWireThickness: number;
	TraceSustainHoldPeriod: number;
	TraceReleaseColor: LinearColor;
	TraceReleaseWireThickness: number;
	TraceReleasePeriod: number;
	TraceReleaseExponent: number;
	TracePositionBonusPeriod: number;
	TracePositionExponent: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GraphEditorSettings;
	static Find(Outer: UObject, ResourceName: string): GraphEditorSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GraphEditorSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GraphEditorSettings;
	static C(Other: UObject): GraphEditorSettings;
}

declare class AnimationConduitGraphSchema extends EdGraphSchema_K2 { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationConduitGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationConduitGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationConduitGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationConduitGraphSchema;
	static C(Other: UObject): AnimationConduitGraphSchema;
}

declare class AnimationGraph extends EdGraph { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationGraph;
	static C(Other: UObject): AnimationGraph;
}

declare type EBlueprintUsage = 'NoProperties' | 'DoesNotUseBlueprint' | 'UsesBlueprint';
declare var EBlueprintUsage : { NoProperties:'NoProperties',DoesNotUseBlueprint:'DoesNotUseBlueprint',UsesBlueprint:'UsesBlueprint', };
declare class AnimGraphNode_Base extends K2Node { 
	ShowPinForProperties: OptionalPinFromProperty[];
	BlueprintUsage: EBlueprintUsage;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Base;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_Base;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Base;
	static C(Other: UObject): AnimGraphNode_Base;
}

declare type EPostCopyOperation = 'None' | 'LogicalNegateBool';
declare var EPostCopyOperation : { None:'None',LogicalNegateBool:'LogicalNegateBool', };
declare class ExposedValueCopyRecord { 
	SourceProperty: Property;
	SourcePropertyName: string;
	SourceSubPropertyName: string;
	SourceArrayIndex: number;
	DestProperty: Property;
	DestArrayIndex: number;
	Size: number;
	bInstanceIsTarget: boolean;
	PostCopyOperation: EPostCopyOperation;
	CachedBoolSourceProperty: BoolProperty;
	CachedBoolDestProperty: BoolProperty;
	CachedStructDestProperty: StructProperty;
	clone() : ExposedValueCopyRecord;
	static C(Other: UObject): ExposedValueCopyRecord;
}

declare class ExposedValueHandler { 
	BoundFunction: string;
	CopyRecords: ExposedValueCopyRecord[];
	clone() : ExposedValueHandler;
	static C(Other: UObject): ExposedValueHandler;
}

declare class AnimNode_Base { 
	EvaluateGraphExposedInputs: ExposedValueHandler;
	clone() : AnimNode_Base;
	static C(Other: UObject): AnimNode_Base;
}

declare class PoseLinkBase { 
	LinkID: number;
	SourceLinkID: number;
	clone() : PoseLinkBase;
	static C(Other: UObject): PoseLinkBase;
}

declare class PoseLink extends PoseLinkBase { 
	clone() : PoseLink;
	static C(Other: UObject): PoseLink;
}

declare class AnimNode_Root extends AnimNode_Base { 
	Result: PoseLink;
	clone() : AnimNode_Root;
	static C(Other: UObject): AnimNode_Root;
}

declare class AnimGraphNode_Root extends AnimGraphNode_Base { 
	UNode: AnimNode_Root;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Root;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_Root;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Root;
	static C(Other: UObject): AnimGraphNode_Root;
}

declare class AnimGraphNode_CustomTransitionResult extends AnimGraphNode_Root { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_CustomTransitionResult;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CustomTransitionResult;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_CustomTransitionResult;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CustomTransitionResult;
	static C(Other: UObject): AnimGraphNode_CustomTransitionResult;
}

declare class AnimationCustomTransitionGraph extends AnimationGraph { 
	MyResultNode: AnimGraphNode_CustomTransitionResult;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationCustomTransitionGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationCustomTransitionGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationCustomTransitionGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationCustomTransitionGraph;
	static C(Other: UObject): AnimationCustomTransitionGraph;
}

declare class AnimGraphNode_StateResult extends AnimGraphNode_Root { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_StateResult;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_StateResult;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_StateResult;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_StateResult;
	static C(Other: UObject): AnimGraphNode_StateResult;
}

declare class AnimationStateGraph extends AnimationGraph { 
	MyResultNode: AnimGraphNode_StateResult;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationStateGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationStateGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationStateGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateGraph;
	static C(Other: UObject): AnimationStateGraph;
}

declare class AnimNode_TransitionResult extends AnimNode_Base { 
	bCanEnterTransition: boolean;
	clone() : AnimNode_TransitionResult;
	static C(Other: UObject): AnimNode_TransitionResult;
}

declare class AnimGraphNode_TransitionResult extends AnimGraphNode_Base { 
	UNode: AnimNode_TransitionResult;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_TransitionResult;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TransitionResult;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_TransitionResult;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TransitionResult;
	static C(Other: UObject): AnimGraphNode_TransitionResult;
}

declare class AnimationTransitionGraph extends AnimationGraph { 
	MyResultNode: AnimGraphNode_TransitionResult;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationTransitionGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationTransitionGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationTransitionGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationTransitionGraph;
	static C(Other: UObject): AnimationTransitionGraph;
}

declare class AnimationGraphSchema extends EdGraphSchema_K2 { 
	PN_SequenceName: string;
	NAME_NeverAsPin: string;
	NAME_PinHiddenByDefault: string;
	NAME_PinShownByDefault: string;
	NAME_AlwaysAsPin: string;
	NAME_CustomizeProperty: string;
	NAME_OnEvaluate: string;
	DefaultEvaluationHandlerName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationGraphSchema;
	static C(Other: UObject): AnimationGraphSchema;
}

declare class AnimationCustomTransitionSchema extends AnimationGraphSchema { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationCustomTransitionSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationCustomTransitionSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationCustomTransitionSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationCustomTransitionSchema;
	static C(Other: UObject): AnimationCustomTransitionSchema;
}

declare class AnimationStateGraphSchema extends AnimationGraphSchema { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationStateGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationStateGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationStateGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateGraphSchema;
	static C(Other: UObject): AnimationStateGraphSchema;
}

declare class AnimStateEntryNode extends EdGraphNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimStateEntryNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateEntryNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimStateEntryNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateEntryNode;
	static C(Other: UObject): AnimStateEntryNode;
}

declare class AnimGraphNode_StateMachineBase extends AnimGraphNode_Base { 
	EditorStateMachineGraph: AnimationStateMachineGraph;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_StateMachineBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_StateMachineBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_StateMachineBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_StateMachineBase;
	static C(Other: UObject): AnimGraphNode_StateMachineBase;
}

declare class AnimationStateMachineGraph extends EdGraph { 
	EntryNode: AnimStateEntryNode;
	OwnerAnimGraphNode: AnimGraphNode_StateMachineBase;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationStateMachineGraph;
	static Find(Outer: UObject, ResourceName: string): AnimationStateMachineGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationStateMachineGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateMachineGraph;
	static C(Other: UObject): AnimationStateMachineGraph;
}

declare class AnimationStateMachineSchema extends EdGraphSchema { 
	PC_Exec: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationStateMachineSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationStateMachineSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationStateMachineSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationStateMachineSchema;
	static C(Other: UObject): AnimationStateMachineSchema;
}

declare class AnimationTransitionSchema extends EdGraphSchema_K2 { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationTransitionSchema;
	static Find(Outer: UObject, ResourceName: string): AnimationTransitionSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationTransitionSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationTransitionSchema;
	static C(Other: UObject): AnimationTransitionSchema;
}

declare class InputScaleBias { 
	Scale: number;
	Bias: number;
	clone() : InputScaleBias;
	static C(Other: UObject): InputScaleBias;
}

declare class AnimNode_ApplyAdditive extends AnimNode_Base { 
	Base: PoseLink;
	Additive: PoseLink;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	LODThreshold: number;
	ActualAlpha: number;
	clone() : AnimNode_ApplyAdditive;
	static C(Other: UObject): AnimNode_ApplyAdditive;
}

declare class AnimGraphNode_ApplyAdditive extends AnimGraphNode_Base { 
	UNode: AnimNode_ApplyAdditive;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_ApplyAdditive;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ApplyAdditive;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_ApplyAdditive;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ApplyAdditive;
	static C(Other: UObject): AnimGraphNode_ApplyAdditive;
}

declare class AnimNode_ApplyMeshSpaceAdditive extends AnimNode_Base { 
	Base: PoseLink;
	Additive: PoseLink;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	LODThreshold: number;
	ActualAlpha: number;
	clone() : AnimNode_ApplyMeshSpaceAdditive;
	static C(Other: UObject): AnimNode_ApplyMeshSpaceAdditive;
}

declare class AnimGraphNode_ApplyMeshSpaceAdditive extends AnimGraphNode_Base { 
	UNode: AnimNode_ApplyMeshSpaceAdditive;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_ApplyMeshSpaceAdditive;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ApplyMeshSpaceAdditive;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_ApplyMeshSpaceAdditive;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ApplyMeshSpaceAdditive;
	static C(Other: UObject): AnimGraphNode_ApplyMeshSpaceAdditive;
}

declare type EAnimGroupRole = 'CanBeLeader' | 'AlwaysFollower' | 'AlwaysLeader' | 'TransitionLeader';
declare var EAnimGroupRole : { CanBeLeader:'CanBeLeader',AlwaysFollower:'AlwaysFollower',AlwaysLeader:'AlwaysLeader',TransitionLeader:'TransitionLeader', };
declare class AnimationGroupReference { 
	GroupName: string;
	GroupRole: EAnimGroupRole;
	clone() : AnimationGroupReference;
	static C(Other: UObject): AnimationGroupReference;
}

declare class AnimGraphNode_AssetPlayerBase extends AnimGraphNode_Base { 
	SyncGroup: AnimationGroupReference;
	AssetReferenceForPinRestoration: StringAssetReference;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_AssetPlayerBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_AssetPlayerBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_AssetPlayerBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_AssetPlayerBase;
	static C(Other: UObject): AnimGraphNode_AssetPlayerBase;
}

declare class AnimGraphNode_BlendSpaceBase extends AnimGraphNode_AssetPlayerBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendSpaceBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendSpaceBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendSpaceBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendSpaceBase;
	static C(Other: UObject): AnimGraphNode_BlendSpaceBase;
}

declare class AnimNode_AssetPlayerBase extends AnimNode_Base { 
	bIgnoreForRelevancyTest: boolean;
	GroupIndex: number;
	GroupRole: EAnimGroupRole;
	BlendWeight: number;
	InternalTimeAccumulator: number;
	clone() : AnimNode_AssetPlayerBase;
	static C(Other: UObject): AnimNode_AssetPlayerBase;
}

declare class BlendParameter { 
	DisplayName: string;
	Min: number;
	Max: number;
	GridNum: number;
	clone() : BlendParameter;
	static C(Other: UObject): BlendParameter;
}

declare type EFilterInterpolationType = 'BSIT_Average' | 'BSIT_Linear' | 'BSIT_Cubic';
declare var EFilterInterpolationType : { BSIT_Average:'BSIT_Average',BSIT_Linear:'BSIT_Linear',BSIT_Cubic:'BSIT_Cubic', };
declare class InterpolationParameter { 
	InterpolationTime: number;
	InterpolationType: EFilterInterpolationType;
	clone() : InterpolationParameter;
	static C(Other: UObject): InterpolationParameter;
}

declare type ENotifyTriggerMode = 'AllAnimations' | 'HighestWeightedAnimation' | 'None';
declare var ENotifyTriggerMode : { AllAnimations:'AllAnimations',HighestWeightedAnimation:'HighestWeightedAnimation',None:'None', };
declare class PerBoneInterpolation { 
	BoneReference: BoneReference;
	InterpolationSpeedPerSec: number;
	clone() : PerBoneInterpolation;
	static C(Other: UObject): PerBoneInterpolation;
}

declare class BlendSample { 
	Animation: AnimSequence;
	SampleValue: Vector;
	clone() : BlendSample;
	static C(Other: UObject): BlendSample;
}

declare class EditorElement { 
	Indices: number;
	Weights: number;
	clone() : EditorElement;
	static C(Other: UObject): EditorElement;
}

declare class BlendSpaceBase extends AnimationAsset { 
	BlendParameters: BlendParameter;
	InterpolationParam: InterpolationParameter;
	TargetWeightInterpolationSpeedPerSec: number;
	NotifyTriggerMode: ENotifyTriggerMode;
	bRotationBlendInMeshSpace: boolean;
	NumOfDimension: number;
	PreviewBasePose: AnimSequence;
	AnimLength: number;
	PerBoneBlend: PerBoneInterpolation[];
	SampleData: BlendSample[];
	GridSamples: EditorElement[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendSpaceBase;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendSpaceBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceBase;
	static C(Other: UObject): BlendSpaceBase;
}

declare class BlendFilter { 
	clone() : BlendFilter;
	static C(Other: UObject): BlendFilter;
}

declare class BlendSampleData { 
	SampleDataIndex: number;
	Animation: AnimSequence;
	TotalWeight: number;
	Time: number;
	PreviousTime: number;
	clone() : BlendSampleData;
	static C(Other: UObject): BlendSampleData;
}

declare class AnimNode_BlendSpacePlayer extends AnimNode_AssetPlayerBase { 
	X: number;
	Y: number;
	Z: number;
	PlayRate: number;
	bLoop: boolean;
	StartPosition: number;
	BlendSpace: BlendSpaceBase;
	BlendFilter: BlendFilter;
	BlendSampleDataCache: BlendSampleData[];
	PreviousBlendSpace: BlendSpaceBase;
	clone() : AnimNode_BlendSpacePlayer;
	static C(Other: UObject): AnimNode_BlendSpacePlayer;
}

declare class AnimNode_AimOffsetLookAt extends AnimNode_BlendSpacePlayer { 
	BasePose: PoseLink;
	LODThreshold: number;
	bIsLODEnabled: boolean;
	LookAtLocation: Vector;
	SourceSocketName: string;
	Alpha: number;
	clone() : AnimNode_AimOffsetLookAt;
	static C(Other: UObject): AnimNode_AimOffsetLookAt;
}

declare class AnimGraphNode_AimOffsetLookAt extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_AimOffsetLookAt;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_AimOffsetLookAt;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_AimOffsetLookAt;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_AimOffsetLookAt;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_AimOffsetLookAt;
	static C(Other: UObject): AnimGraphNode_AimOffsetLookAt;
}

declare class AnimNode_BlendSpaceEvaluator extends AnimNode_BlendSpacePlayer { 
	NormalizedTime: number;
	clone() : AnimNode_BlendSpaceEvaluator;
	static C(Other: UObject): AnimNode_BlendSpaceEvaluator;
}

declare class AnimGraphNode_BlendSpaceEvaluator extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_BlendSpaceEvaluator;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendSpaceEvaluator;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendSpaceEvaluator;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendSpaceEvaluator;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendSpaceEvaluator;
	static C(Other: UObject): AnimGraphNode_BlendSpaceEvaluator;
}

declare class AnimGraphNode_BlendSpacePlayer extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_BlendSpacePlayer;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendSpacePlayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendSpacePlayer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendSpacePlayer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendSpacePlayer;
	static C(Other: UObject): AnimGraphNode_BlendSpacePlayer;
}

declare class AnimNode_RotationOffsetBlendSpace extends AnimNode_BlendSpacePlayer { 
	BasePose: PoseLink;
	LODThreshold: number;
	bIsLODEnabled: boolean;
	clone() : AnimNode_RotationOffsetBlendSpace;
	static C(Other: UObject): AnimNode_RotationOffsetBlendSpace;
}

declare class AnimGraphNode_RotationOffsetBlendSpace extends AnimGraphNode_BlendSpaceBase { 
	UNode: AnimNode_RotationOffsetBlendSpace;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_RotationOffsetBlendSpace;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RotationOffsetBlendSpace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_RotationOffsetBlendSpace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RotationOffsetBlendSpace;
	static C(Other: UObject): AnimGraphNode_RotationOffsetBlendSpace;
}

declare class AnimNode_PoseHandler extends AnimNode_AssetPlayerBase { 
	PoseAsset: PoseAsset;
	clone() : AnimNode_PoseHandler;
	static C(Other: UObject): AnimNode_PoseHandler;
}

declare class AnimNode_PoseByName extends AnimNode_PoseHandler { 
	PoseName: string;
	PoseWeight: number;
	clone() : AnimNode_PoseByName;
	static C(Other: UObject): AnimNode_PoseByName;
}

declare class AnimGraphNode_PoseByName extends AnimGraphNode_AssetPlayerBase { 
	UNode: AnimNode_PoseByName;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_PoseByName;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseByName;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_PoseByName;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseByName;
	static C(Other: UObject): AnimGraphNode_PoseByName;
}

declare class AnimGraphNode_PoseHandler extends AnimGraphNode_AssetPlayerBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_PoseHandler;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseHandler;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_PoseHandler;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseHandler;
	static C(Other: UObject): AnimGraphNode_PoseHandler;
}

declare class AnimNode_PoseBlendNode extends AnimNode_PoseHandler { 
	SourcePose: PoseLink;
	clone() : AnimNode_PoseBlendNode;
	static C(Other: UObject): AnimNode_PoseBlendNode;
}

declare class AnimGraphNode_PoseBlendNode extends AnimGraphNode_PoseHandler { 
	UNode: AnimNode_PoseBlendNode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_PoseBlendNode;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseBlendNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_PoseBlendNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseBlendNode;
	static C(Other: UObject): AnimGraphNode_PoseBlendNode;
}

declare type EPoseDriverType = 'SwingAndTwist' | 'SwingOnly' | 'Translation';
declare var EPoseDriverType : { SwingAndTwist:'SwingAndTwist',SwingOnly:'SwingOnly',Translation:'Translation', };
declare type EBoneAxis = 'BA_X' | 'BA_Y' | 'BA_Z';
declare var EBoneAxis : { BA_X:'BA_X',BA_Y:'BA_Y',BA_Z:'BA_Z', };
declare class AnimNode_PoseDriver extends AnimNode_PoseHandler { 
	SourcePose: PoseLink;
	SourceBone: BoneReference;
	RadialScaling: number;
	bIncludeRefPoseAsNeutralPose: boolean;
	Type: EPoseDriverType;
	TwistAxis: EBoneAxis;
	clone() : AnimNode_PoseDriver;
	static C(Other: UObject): AnimNode_PoseDriver;
}

declare class AnimGraphNode_PoseDriver extends AnimGraphNode_PoseHandler { 
	UNode: AnimNode_PoseDriver;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_PoseDriver;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseDriver;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_PoseDriver;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_PoseDriver;
	static C(Other: UObject): AnimGraphNode_PoseDriver;
}

declare type ESequenceEvalReinit = 'NoReset' | 'StartPosition' | 'ExplicitTime';
declare var ESequenceEvalReinit : { NoReset:'NoReset',StartPosition:'StartPosition',ExplicitTime:'ExplicitTime', };
declare class AnimNode_SequenceEvaluator extends AnimNode_AssetPlayerBase { 
	Sequence: AnimSequenceBase;
	ExplicitTime: number;
	bShouldLoopWhenInSyncGroup: boolean;
	bTeleportToExplicitTime: boolean;
	StartPosition: number;
	ReinitializationBehavior: ESequenceEvalReinit;
	bReinitialized: boolean;
	clone() : AnimNode_SequenceEvaluator;
	static C(Other: UObject): AnimNode_SequenceEvaluator;
}

declare class AnimGraphNode_SequenceEvaluator extends AnimGraphNode_AssetPlayerBase { 
	UNode: AnimNode_SequenceEvaluator;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SequenceEvaluator;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SequenceEvaluator;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SequenceEvaluator;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SequenceEvaluator;
	static C(Other: UObject): AnimGraphNode_SequenceEvaluator;
}

declare class AnimNode_SequencePlayer extends AnimNode_AssetPlayerBase { 
	Sequence: AnimSequenceBase;
	bLoopAnimation: boolean;
	PlayRate: number;
	StartPosition: number;
	clone() : AnimNode_SequencePlayer;
	static C(Other: UObject): AnimNode_SequencePlayer;
}

declare class AnimGraphNode_SequencePlayer extends AnimGraphNode_AssetPlayerBase { 
	UNode: AnimNode_SequencePlayer;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SequencePlayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SequencePlayer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SequencePlayer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SequencePlayer;
	static C(Other: UObject): AnimGraphNode_SequencePlayer;
}

declare class AnimGraphNode_BlendListBase extends AnimGraphNode_Base { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendListBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendListBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListBase;
	static C(Other: UObject): AnimGraphNode_BlendListBase;
}

declare class AnimNode_BlendListBase extends AnimNode_Base { 
	BlendPose: PoseLink[];
	BlendTime: number[];
	BlendType: EAlphaBlendOption;
	CustomBlendCurve: CurveFloat;
	BlendProfile: BlendProfile;
	Blends: AlphaBlend[];
	BlendWeights: number[];
	RemainingBlendTimes: number[];
	LastActiveChildIndex: number;
	PerBoneSampleData: BlendSampleData[];
	bResetChildOnActivation: boolean;
	clone() : AnimNode_BlendListBase;
	static C(Other: UObject): AnimNode_BlendListBase;
}

declare class AnimNode_BlendListByBool extends AnimNode_BlendListBase { 
	bActiveValue: boolean;
	clone() : AnimNode_BlendListByBool;
	static C(Other: UObject): AnimNode_BlendListByBool;
}

declare class AnimGraphNode_BlendListByBool extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_BlendListByBool;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendListByBool;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListByBool;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendListByBool;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListByBool;
	static C(Other: UObject): AnimGraphNode_BlendListByBool;
}

declare class AnimNode_BlendListByEnum extends AnimNode_BlendListBase { 
	EnumToPoseIndex: number[];
	ActiveEnumValue: number;
	clone() : AnimNode_BlendListByEnum;
	static C(Other: UObject): AnimNode_BlendListByEnum;
}

declare class AnimGraphNode_BlendListByEnum extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_BlendListByEnum;
	BoundEnum: Enum;
	VisibleEnumEntries: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendListByEnum;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListByEnum;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendListByEnum;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListByEnum;
	static C(Other: UObject): AnimGraphNode_BlendListByEnum;
}

declare class AnimNode_BlendListByInt extends AnimNode_BlendListBase { 
	ActiveChildIndex: number;
	clone() : AnimNode_BlendListByInt;
	static C(Other: UObject): AnimNode_BlendListByInt;
}

declare class AnimGraphNode_BlendListByInt extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_BlendListByInt;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BlendListByInt;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BlendListByInt;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BlendListByInt;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BlendListByInt;
	static C(Other: UObject): AnimGraphNode_BlendListByInt;
}

declare class BranchFilter { 
	BoneName: string;
	BlendDepth: number;
	clone() : BranchFilter;
	static C(Other: UObject): BranchFilter;
}

declare class InputBlendPose { 
	BranchFilters: BranchFilter[];
	clone() : InputBlendPose;
	static C(Other: UObject): InputBlendPose;
}

declare type ECurveBlendOption = 'MaxWeight' | 'NormalizeByWeight' | 'BlendByWeight';
declare var ECurveBlendOption : { MaxWeight:'MaxWeight',NormalizeByWeight:'NormalizeByWeight',BlendByWeight:'BlendByWeight', };
declare class AnimNode_LayeredBoneBlend extends AnimNode_Base { 
	BasePose: PoseLink;
	BlendPoses: PoseLink[];
	LayerSetup: InputBlendPose[];
	BlendWeights: number[];
	bMeshSpaceRotationBlend: boolean;
	CurveBlendOption: ECurveBlendOption;
	bBlendRootMotionBasedOnRootBone: boolean;
	bHasRelevantPoses: boolean;
	clone() : AnimNode_LayeredBoneBlend;
	static C(Other: UObject): AnimNode_LayeredBoneBlend;
}

declare class AnimGraphNode_LayeredBoneBlend extends AnimGraphNode_BlendListBase { 
	UNode: AnimNode_LayeredBoneBlend;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_LayeredBoneBlend;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LayeredBoneBlend;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_LayeredBoneBlend;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LayeredBoneBlend;
	static C(Other: UObject): AnimGraphNode_LayeredBoneBlend;
}

declare class ComponentSpacePoseLink extends PoseLinkBase { 
	clone() : ComponentSpacePoseLink;
	static C(Other: UObject): ComponentSpacePoseLink;
}

declare class AnimNode_ConvertComponentToLocalSpace extends AnimNode_Base { 
	ComponentPose: ComponentSpacePoseLink;
	clone() : AnimNode_ConvertComponentToLocalSpace;
	static C(Other: UObject): AnimNode_ConvertComponentToLocalSpace;
}

declare class AnimGraphNode_ComponentToLocalSpace extends AnimGraphNode_Base { 
	UNode: AnimNode_ConvertComponentToLocalSpace;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_ComponentToLocalSpace;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ComponentToLocalSpace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_ComponentToLocalSpace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ComponentToLocalSpace;
	static C(Other: UObject): AnimGraphNode_ComponentToLocalSpace;
}

declare class AnimGraphNode_SkeletalControlBase extends AnimGraphNode_Base { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SkeletalControlBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SkeletalControlBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SkeletalControlBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SkeletalControlBase;
	static C(Other: UObject): AnimGraphNode_SkeletalControlBase;
}

declare class AnimNode_CopyPoseFromMesh extends AnimNode_Base { 
	SourceMeshComponent: SkeletalMeshComponent;
	clone() : AnimNode_CopyPoseFromMesh;
	static C(Other: UObject): AnimNode_CopyPoseFromMesh;
}

declare class AnimGraphNode_CopyPoseFromMesh extends AnimGraphNode_Base { 
	UNode: AnimNode_CopyPoseFromMesh;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_CopyPoseFromMesh;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CopyPoseFromMesh;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_CopyPoseFromMesh;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CopyPoseFromMesh;
	static C(Other: UObject): AnimGraphNode_CopyPoseFromMesh;
}

declare class AnimNode_ConvertLocalToComponentSpace extends AnimNode_Base { 
	LocalPose: PoseLink;
	clone() : AnimNode_ConvertLocalToComponentSpace;
	static C(Other: UObject): AnimNode_ConvertLocalToComponentSpace;
}

declare class AnimGraphNode_LocalToComponentSpace extends AnimGraphNode_Base { 
	UNode: AnimNode_ConvertLocalToComponentSpace;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_LocalToComponentSpace;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LocalToComponentSpace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_LocalToComponentSpace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LocalToComponentSpace;
	static C(Other: UObject): AnimGraphNode_LocalToComponentSpace;
}

declare class AnimNode_MeshSpaceRefPose extends AnimNode_Base { 
	clone() : AnimNode_MeshSpaceRefPose;
	static C(Other: UObject): AnimNode_MeshSpaceRefPose;
}

declare class AnimGraphNode_MeshRefPose extends AnimGraphNode_Base { 
	UNode: AnimNode_MeshSpaceRefPose;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_MeshRefPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_MeshRefPose;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_MeshRefPose;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_MeshRefPose;
	static C(Other: UObject): AnimGraphNode_MeshRefPose;
}

declare class RandomPlayerSequenceEntry { 
	Sequence: AnimSequence;
	ChanceToPlay: number;
	MinLoopCount: number;
	MaxLoopCount: number;
	MinPlayRate: number;
	MaxPlayRate: number;
	BlendIn: AlphaBlend;
	clone() : RandomPlayerSequenceEntry;
	static C(Other: UObject): RandomPlayerSequenceEntry;
}

declare class AnimNode_RandomPlayer extends AnimNode_Base { 
	bShuffleMode: boolean;
	Entries: RandomPlayerSequenceEntry[];
	clone() : AnimNode_RandomPlayer;
	static C(Other: UObject): AnimNode_RandomPlayer;
}

declare class AnimGraphNode_RandomPlayer extends AnimGraphNode_Base { 
	UNode: AnimNode_RandomPlayer;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_RandomPlayer;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RandomPlayer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_RandomPlayer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RandomPlayer;
	static C(Other: UObject): AnimGraphNode_RandomPlayer;
}

declare type ERefPoseType = 'EIT_LocalSpace' | 'EIT_Additive';
declare var ERefPoseType : { EIT_LocalSpace:'EIT_LocalSpace',EIT_Additive:'EIT_Additive', };
declare class AnimNode_RefPose extends AnimNode_Base { 
	RefPoseType: ERefPoseType;
	clone() : AnimNode_RefPose;
	static C(Other: UObject): AnimNode_RefPose;
}

declare class AnimGraphNode_RefPoseBase extends AnimGraphNode_Base { 
	UNode: AnimNode_RefPose;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_RefPoseBase;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RefPoseBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_RefPoseBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RefPoseBase;
	static C(Other: UObject): AnimGraphNode_RefPoseBase;
}

declare class AnimGraphNode_IdentityPose extends AnimGraphNode_RefPoseBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_IdentityPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_IdentityPose;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_IdentityPose;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_IdentityPose;
	static C(Other: UObject): AnimGraphNode_IdentityPose;
}

declare class AnimGraphNode_LocalRefPose extends AnimGraphNode_RefPoseBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_LocalRefPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LocalRefPose;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_LocalRefPose;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LocalRefPose;
	static C(Other: UObject): AnimGraphNode_LocalRefPose;
}

declare class AnimNode_RotateRootBone extends AnimNode_Base { 
	BasePose: PoseLink;
	Pitch: number;
	Yaw: number;
	MeshToComponent: Rotator;
	clone() : AnimNode_RotateRootBone;
	static C(Other: UObject): AnimNode_RotateRootBone;
}

declare class AnimGraphNode_RotateRootBone extends AnimGraphNode_Base { 
	UNode: AnimNode_RotateRootBone;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_RotateRootBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RotateRootBone;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_RotateRootBone;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RotateRootBone;
	static C(Other: UObject): AnimGraphNode_RotateRootBone;
}

declare class AnimNode_SaveCachedPose extends AnimNode_Base { 
	Pose: PoseLink;
	CachePoseName: string;
	GlobalWeight: number;
	clone() : AnimNode_SaveCachedPose;
	static C(Other: UObject): AnimNode_SaveCachedPose;
}

declare class AnimGraphNode_SaveCachedPose extends AnimGraphNode_Base { 
	UNode: AnimNode_SaveCachedPose;
	CacheName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SaveCachedPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SaveCachedPose;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SaveCachedPose;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SaveCachedPose;
	static C(Other: UObject): AnimGraphNode_SaveCachedPose;
}

declare class AnimNode_SkeletalControlBase extends AnimNode_Base { 
	ComponentPose: ComponentSpacePoseLink;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	LODThreshold: number;
	ActualAlpha: number;
	clone() : AnimNode_SkeletalControlBase;
	static C(Other: UObject): AnimNode_SkeletalControlBase;
}

declare type AnimPhysSimSpaceType = 'Component' | 'Actor' | 'World' | 'RootRelative' | 'BoneRelative';
declare var AnimPhysSimSpaceType : { Component:'Component',Actor:'Actor',World:'World',RootRelative:'RootRelative',BoneRelative:'BoneRelative', };
declare type AnimPhysLinearConstraintType = 'Free' | 'Limited';
declare var AnimPhysLinearConstraintType : { Free:'Free',Limited:'Limited', };
declare type AnimPhysAngularConstraintType = 'Angular' | 'Cone';
declare var AnimPhysAngularConstraintType : { Angular:'Angular',Cone:'Cone', };
declare type AnimPhysTwistAxis = 'AxisX' | 'AxisY' | 'AxisZ';
declare var AnimPhysTwistAxis : { AxisX:'AxisX',AxisY:'AxisY',AxisZ:'AxisZ', };
declare class AnimPhysConstraintSetup { 
	LinearXLimitType: AnimPhysLinearConstraintType;
	LinearYLimitType: AnimPhysLinearConstraintType;
	LinearZLimitType: AnimPhysLinearConstraintType;
	LinearAxesMin: Vector;
	LinearAxesMax: Vector;
	AngularConstraintType: AnimPhysAngularConstraintType;
	TwistAxis: AnimPhysTwistAxis;
	ConeAngle: number;
	AngularXAngle: number;
	AngularYAngle: number;
	AngularZAngle: number;
	AngularLimitsMin: Vector;
	AngularLimitsMax: Vector;
	AngularTargetAxis: AnimPhysTwistAxis;
	AngularTarget: Vector;
	bLinearFullyLocked: boolean;
	clone() : AnimPhysConstraintSetup;
	static C(Other: UObject): AnimPhysConstraintSetup;
}

declare class AnimPhysPlanarLimit { 
	DrivingBone: BoneReference;
	PlaneTransform: Transform;
	clone() : AnimPhysPlanarLimit;
	static C(Other: UObject): AnimPhysPlanarLimit;
}

declare type ESphericalLimitType = 'Inner' | 'Outer';
declare var ESphericalLimitType : { Inner:'Inner',Outer:'Outer', };
declare class AnimPhysSphericalLimit { 
	DrivingBone: BoneReference;
	SphereLocalOffset: Vector;
	LimitRadius: number;
	LimitType: ESphericalLimitType;
	clone() : AnimPhysSphericalLimit;
	static C(Other: UObject): AnimPhysSphericalLimit;
}

declare type AnimPhysCollisionType = 'CoM' | 'CustomSphere' | 'InnerSphere' | 'OuterSphere';
declare var AnimPhysCollisionType : { CoM:'CoM',CustomSphere:'CustomSphere',InnerSphere:'InnerSphere',OuterSphere:'OuterSphere', };
declare class AnimNode_AnimDynamics extends AnimNode_SkeletalControlBase { 
	SimulationSpace: AnimPhysSimSpaceType;
	RelativeSpaceBone: BoneReference;
	bChain: boolean;
	BoundBone: BoneReference;
	ChainEnd: BoneReference;
	BoxExtents: Vector;
	LocalJointOffset: Vector;
	GravityScale: number;
	bLinearSpring: boolean;
	bAngularSpring: boolean;
	LinearSpringConstant: number;
	AngularSpringConstant: number;
	bEnableWind: boolean;
	WindScale: number;
	bOverrideLinearDamping: boolean;
	LinearDampingOverride: number;
	bOverrideAngularDamping: boolean;
	AngularDampingOverride: number;
	bOverrideAngularBias: boolean;
	AngularBiasOverride: number;
	bDoUpdate: boolean;
	bDoEval: boolean;
	NumSolverIterationsPreUpdate: number;
	NumSolverIterationsPostUpdate: number;
	ConstraintSetup: AnimPhysConstraintSetup;
	bUsePlanarLimit: boolean;
	PlanarLimits: AnimPhysPlanarLimit[];
	bUseSphericalLimits: boolean;
	SphericalLimits: AnimPhysSphericalLimit[];
	CollisionType: AnimPhysCollisionType;
	SphereCollisionRadius: number;
	ExternalForce: Vector;
	clone() : AnimNode_AnimDynamics;
	static C(Other: UObject): AnimNode_AnimDynamics;
}

declare class AnimGraphNode_AnimDynamics extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_AnimDynamics;
	bPreviewLive: boolean;
	bShowLinearLimits: boolean;
	bShowAngularLimits: boolean;
	bShowPlanarLimit: boolean;
	bShowSphericalLimit: boolean;
	bShowCollisionSpheres: boolean;
	LastPreviewComponent: SkeletalMeshComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_AnimDynamics;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_AnimDynamics;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_AnimDynamics;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_AnimDynamics;
	static C(Other: UObject): AnimGraphNode_AnimDynamics;
}

declare type EComponentType = 'None' | 'TranslationX' | 'TranslationY' | 'TranslationZ' | 'RotationX' | 'RotationY' | 'RotationZ' | 'Scale' | 'ScaleX' | 'ScaleY' | 'ScaleZ';
declare var EComponentType : { None:'None',TranslationX:'TranslationX',TranslationY:'TranslationY',TranslationZ:'TranslationZ',RotationX:'RotationX',RotationY:'RotationY',RotationZ:'RotationZ',Scale:'Scale',ScaleX:'ScaleX',ScaleY:'ScaleY',ScaleZ:'ScaleZ', };
declare type EDrivenDestinationMode = 'Bone' | 'MorphTarget' | 'MaterialParameter';
declare var EDrivenDestinationMode : { Bone:'Bone',MorphTarget:'MorphTarget',MaterialParameter:'MaterialParameter', };
declare type EDrivenBoneModificationMode = 'AddToInput' | 'ReplaceComponent' | 'AddToRefPose';
declare var EDrivenBoneModificationMode : { AddToInput:'AddToInput',ReplaceComponent:'ReplaceComponent',AddToRefPose:'AddToRefPose', };
declare class AnimNode_BoneDrivenController extends AnimNode_SkeletalControlBase { 
	SourceBone: BoneReference;
	SourceComponent: EComponentType;
	DrivingCurve: CurveFloat;
	Multiplier: number;
	bUseRange: boolean;
	RangeMin: number;
	RangeMax: number;
	RemappedMin: number;
	RemappedMax: number;
	DestinationMode: EDrivenDestinationMode;
	ParameterName: string;
	TargetBone: BoneReference;
	TargetComponent: EComponentType;
	bAffectTargetTranslationX: boolean;
	bAffectTargetTranslationY: boolean;
	bAffectTargetTranslationZ: boolean;
	bAffectTargetRotationX: boolean;
	bAffectTargetRotationY: boolean;
	bAffectTargetRotationZ: boolean;
	bAffectTargetScaleX: boolean;
	bAffectTargetScaleY: boolean;
	bAffectTargetScaleZ: boolean;
	ModificationMode: EDrivenBoneModificationMode;
	clone() : AnimNode_BoneDrivenController;
	static C(Other: UObject): AnimNode_BoneDrivenController;
}

declare class AnimGraphNode_BoneDrivenController extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_BoneDrivenController;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_BoneDrivenController;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_BoneDrivenController;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_BoneDrivenController;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_BoneDrivenController;
	static C(Other: UObject): AnimGraphNode_BoneDrivenController;
}

declare type EBoneControlSpace = 'BCS_WorldSpace' | 'BCS_ComponentSpace' | 'BCS_ParentBoneSpace' | 'BCS_BoneSpace';
declare var EBoneControlSpace : { BCS_WorldSpace:'BCS_WorldSpace',BCS_ComponentSpace:'BCS_ComponentSpace',BCS_ParentBoneSpace:'BCS_ParentBoneSpace',BCS_BoneSpace:'BCS_BoneSpace', };
declare class AnimNode_CopyBone extends AnimNode_SkeletalControlBase { 
	SourceBone: BoneReference;
	TargetBone: BoneReference;
	bCopyTranslation: boolean;
	bCopyRotation: boolean;
	bCopyScale: boolean;
	ControlSpace: EBoneControlSpace;
	clone() : AnimNode_CopyBone;
	static C(Other: UObject): AnimNode_CopyBone;
}

declare class AnimGraphNode_CopyBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_CopyBone;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_CopyBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CopyBone;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_CopyBone;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CopyBone;
	static C(Other: UObject): AnimGraphNode_CopyBone;
}

declare type CopyBoneDeltaMode = 'Accumulate' | 'Copy';
declare var CopyBoneDeltaMode : { Accumulate:'Accumulate',Copy:'Copy', };
declare class AnimNode_CopyBoneDelta extends AnimNode_SkeletalControlBase { 
	SourceBone: BoneReference;
	TargetBone: BoneReference;
	bCopyTranslation: boolean;
	bCopyRotation: boolean;
	bCopyScale: boolean;
	CopyMode: CopyBoneDeltaMode;
	TranslationMultiplier: number;
	RotationMultiplier: number;
	ScaleMultiplier: number;
	clone() : AnimNode_CopyBoneDelta;
	static C(Other: UObject): AnimNode_CopyBoneDelta;
}

declare class AnimGraphNode_CopyBoneDelta extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_CopyBoneDelta;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_CopyBoneDelta;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CopyBoneDelta;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_CopyBoneDelta;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CopyBoneDelta;
	static C(Other: UObject): AnimGraphNode_CopyBoneDelta;
}

declare type EBoneRotationSource = 'BRS_KeepComponentSpaceRotation' | 'BRS_KeepLocalSpaceRotation' | 'BRS_CopyFromTarget';
declare var EBoneRotationSource : { BRS_KeepComponentSpaceRotation:'BRS_KeepComponentSpaceRotation',BRS_KeepLocalSpaceRotation:'BRS_KeepLocalSpaceRotation',BRS_CopyFromTarget:'BRS_CopyFromTarget', };
declare class AnimNode_Fabrik extends AnimNode_SkeletalControlBase { 
	EffectorTransform: Transform;
	EffectorTransformSpace: EBoneControlSpace;
	EffectorTransformBone: BoneReference;
	EffectorRotationSource: EBoneRotationSource;
	TipBone: BoneReference;
	RootBone: BoneReference;
	Precision: number;
	MaxIterations: number;
	bEnableDebugDraw: boolean;
	clone() : AnimNode_Fabrik;
	static C(Other: UObject): AnimNode_Fabrik;
}

declare class AnimGraphNode_Fabrik extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_Fabrik;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_Fabrik;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Fabrik;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_Fabrik;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Fabrik;
	static C(Other: UObject): AnimGraphNode_Fabrik;
}

declare class AnimNode_HandIKRetargeting extends AnimNode_SkeletalControlBase { 
	RightHandFK: BoneReference;
	LeftHandFK: BoneReference;
	RightHandIK: BoneReference;
	LeftHandIK: BoneReference;
	IKBonesToMove: BoneReference[];
	HandFKWeight: number;
	clone() : AnimNode_HandIKRetargeting;
	static C(Other: UObject): AnimNode_HandIKRetargeting;
}

declare class AnimGraphNode_HandIKRetargeting extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_HandIKRetargeting;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_HandIKRetargeting;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_HandIKRetargeting;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_HandIKRetargeting;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_HandIKRetargeting;
	static C(Other: UObject): AnimGraphNode_HandIKRetargeting;
}

declare class AnimLegIKDefinition { 
	IKFootBone: BoneReference;
	FKFootBone: BoneReference;
	NumBonesInLimb: number;
	FootBoneForwardAxis: EAxis;
	bEnableRotationLimit: boolean;
	MinRotationAngle: number;
	bEnableKneeTwistCorrection: boolean;
	clone() : AnimLegIKDefinition;
	static C(Other: UObject): AnimLegIKDefinition;
}

declare class AnimLegIKData { 
	clone() : AnimLegIKData;
	static C(Other: UObject): AnimLegIKData;
}

declare class AnimNode_LegIK extends AnimNode_SkeletalControlBase { 
	ReachPrecision: number;
	MaxIterations: number;
	LegsDefinition: AnimLegIKDefinition[];
	LegsData: AnimLegIKData[];
	clone() : AnimNode_LegIK;
	static C(Other: UObject): AnimNode_LegIK;
}

declare class AnimGraphNode_LegIK extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_LegIK;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_LegIK;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LegIK;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_LegIK;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LegIK;
	static C(Other: UObject): AnimGraphNode_LegIK;
}

declare type EAxisOption = 'X' | 'Y' | 'Z' | 'X_Neg' | 'Y_Neg' | 'Z_Neg';
declare var EAxisOption : { X:'X',Y:'Y',Z:'Z',X_Neg:'X_Neg',Y_Neg:'Y_Neg',Z_Neg:'Z_Neg', };
declare type EInterpolationBlend = 'Linear' | 'Cubic' | 'Sinusoidal' | 'EaseInOutExponent2' | 'EaseInOutExponent3' | 'EaseInOutExponent4' | 'EaseInOutExponent5' | 'MAX';
declare var EInterpolationBlend : { Linear:'Linear',Cubic:'Cubic',Sinusoidal:'Sinusoidal',EaseInOutExponent2:'EaseInOutExponent2',EaseInOutExponent3:'EaseInOutExponent3',EaseInOutExponent4:'EaseInOutExponent4',EaseInOutExponent5:'EaseInOutExponent5',MAX:'MAX', };
declare class AnimNode_LookAt extends AnimNode_SkeletalControlBase { 
	BoneToModify: BoneReference;
	LookAtBone: BoneReference;
	LookAtSocket: string;
	LookAtLocation: Vector;
	LookAtAxis: EAxisOption;
	bUseLookUpAxis: boolean;
	LookUpAxis: EAxisOption;
	LookAtClamp: number;
	InterpolationType: EInterpolationBlend;
	InterpolationTime: number;
	InterpolationTriggerThreashold: number;
	bEnableDebug: boolean;
	clone() : AnimNode_LookAt;
	static C(Other: UObject): AnimNode_LookAt;
}

declare class AnimGraphNode_LookAt extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_LookAt;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_LookAt;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LookAt;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_LookAt;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LookAt;
	static C(Other: UObject): AnimGraphNode_LookAt;
}

declare type EBoneModificationMode = 'BMM_Ignore' | 'BMM_Replace' | 'BMM_Additive';
declare var EBoneModificationMode : { BMM_Ignore:'BMM_Ignore',BMM_Replace:'BMM_Replace',BMM_Additive:'BMM_Additive', };
declare class AnimNode_ModifyBone extends AnimNode_SkeletalControlBase { 
	BoneToModify: BoneReference;
	Translation: Vector;
	Rotation: Rotator;
	Scale: Vector;
	TranslationMode: EBoneModificationMode;
	RotationMode: EBoneModificationMode;
	ScaleMode: EBoneModificationMode;
	TranslationSpace: EBoneControlSpace;
	RotationSpace: EBoneControlSpace;
	ScaleSpace: EBoneControlSpace;
	clone() : AnimNode_ModifyBone;
	static C(Other: UObject): AnimNode_ModifyBone;
}

declare class AnimGraphNode_ModifyBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_ModifyBone;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_ModifyBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ModifyBone;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_ModifyBone;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ModifyBone;
	static C(Other: UObject): AnimGraphNode_ModifyBone;
}

declare class AnimNode_ObserveBone extends AnimNode_SkeletalControlBase { 
	BoneToObserve: BoneReference;
	DisplaySpace: EBoneControlSpace;
	bRelativeToRefPose: boolean;
	Translation: Vector;
	Rotation: Rotator;
	Scale: Vector;
	clone() : AnimNode_ObserveBone;
	static C(Other: UObject): AnimNode_ObserveBone;
}

declare class AnimGraphNode_ObserveBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_ObserveBone;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_ObserveBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_ObserveBone;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_ObserveBone;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_ObserveBone;
	static C(Other: UObject): AnimGraphNode_ObserveBone;
}

declare class AnimNode_RotationMultiplier extends AnimNode_SkeletalControlBase { 
	TargetBone: BoneReference;
	SourceBone: BoneReference;
	Multiplier: number;
	RotationAxisToRefer: EBoneAxis;
	bIsAdditive: boolean;
	clone() : AnimNode_RotationMultiplier;
	static C(Other: UObject): AnimNode_RotationMultiplier;
}

declare class AnimGraphNode_RotationMultiplier extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_RotationMultiplier;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_RotationMultiplier;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RotationMultiplier;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_RotationMultiplier;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RotationMultiplier;
	static C(Other: UObject): AnimGraphNode_RotationMultiplier;
}

declare class AnimNode_SpringBone extends AnimNode_SkeletalControlBase { 
	SpringBone: BoneReference;
	bLimitDisplacement: boolean;
	MaxDisplacement: number;
	SpringStiffness: number;
	SpringDamping: number;
	ErrorResetThresh: number;
	bNoZSpring: boolean;
	bTranslateX: boolean;
	bTranslateY: boolean;
	bTranslateZ: boolean;
	bRotateX: boolean;
	bRotateY: boolean;
	bRotateZ: boolean;
	clone() : AnimNode_SpringBone;
	static C(Other: UObject): AnimNode_SpringBone;
}

declare class AnimGraphNode_SpringBone extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_SpringBone;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SpringBone;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SpringBone;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SpringBone;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SpringBone;
	static C(Other: UObject): AnimGraphNode_SpringBone;
}

declare class AnimNode_Trail extends AnimNode_SkeletalControlBase { 
	TrailBone: BoneReference;
	ChainLength: number;
	ChainBoneAxis: EAxis;
	bInvertChainBoneAxis: boolean;
	TrailRelaxation: number;
	TrailRelaxationSpeed: RuntimeFloatCurve;
	bLimitStretch: boolean;
	StretchLimit: number;
	FakeVelocity: Vector;
	bActorSpaceFakeVel: boolean;
	BaseJoint: BoneReference;
	clone() : AnimNode_Trail;
	static C(Other: UObject): AnimNode_Trail;
}

declare class AnimGraphNode_Trail extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_Trail;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_Trail;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Trail;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_Trail;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Trail;
	static C(Other: UObject): AnimGraphNode_Trail;
}

declare class Axis { 
	Axis: Vector;
	bInLocalSpace: boolean;
	clone() : Axis;
	static C(Other: UObject): Axis;
}

declare class ReferenceBoneFrame { 
	Bone: BoneReference;
	Axis: Axis;
	clone() : ReferenceBoneFrame;
	static C(Other: UObject): ReferenceBoneFrame;
}

declare class AnimCurveParam { 
	Name: string;
	clone() : AnimCurveParam;
	static C(Other: UObject): AnimCurveParam;
}

declare class AnimNode_TwistCorrectiveNode extends AnimNode_SkeletalControlBase { 
	BaseFrame: ReferenceBoneFrame;
	TwistFrame: ReferenceBoneFrame;
	TwistPlaneNormalAxis: Axis;
	RangeMax: number;
	RemappedMin: number;
	RemappedMax: number;
	Curve: AnimCurveParam;
	clone() : AnimNode_TwistCorrectiveNode;
	static C(Other: UObject): AnimNode_TwistCorrectiveNode;
}

declare class AnimGraphNode_TwistCorrectiveNode extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_TwistCorrectiveNode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_TwistCorrectiveNode;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TwistCorrectiveNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_TwistCorrectiveNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TwistCorrectiveNode;
	static C(Other: UObject): AnimGraphNode_TwistCorrectiveNode;
}

declare class AnimNode_TwoBoneIK extends AnimNode_SkeletalControlBase { 
	IKBone: BoneReference;
	EffectorLocation: Vector;
	JointTargetLocation: Vector;
	StretchLimits: Vector2D;
	EffectorSpaceBoneName: string;
	bTakeRotationFromEffectorSpace: boolean;
	bMaintainEffectorRelRot: boolean;
	bAllowStretching: boolean;
	EffectorLocationSpace: EBoneControlSpace;
	JointTargetLocationSpace: EBoneControlSpace;
	JointTargetSpaceBoneName: string;
	clone() : AnimNode_TwoBoneIK;
	static C(Other: UObject): AnimNode_TwoBoneIK;
}

declare class AnimGraphNode_TwoBoneIK extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_TwoBoneIK;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_TwoBoneIK;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TwoBoneIK;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_TwoBoneIK;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TwoBoneIK;
	static C(Other: UObject): AnimGraphNode_TwoBoneIK;
}

declare class AnimNode_WheelHandler extends AnimNode_SkeletalControlBase { 
	clone() : AnimNode_WheelHandler;
	static C(Other: UObject): AnimNode_WheelHandler;
}

declare class AnimGraphNode_WheelHandler extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_WheelHandler;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_WheelHandler;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_WheelHandler;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_WheelHandler;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_WheelHandler;
	static C(Other: UObject): AnimGraphNode_WheelHandler;
}

declare class AnimNode_Slot extends AnimNode_Base { 
	Source: PoseLink;
	SlotName: string;
	clone() : AnimNode_Slot;
	static C(Other: UObject): AnimNode_Slot;
}

declare class AnimGraphNode_Slot extends AnimGraphNode_Base { 
	UNode: AnimNode_Slot;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_Slot;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Slot;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_Slot;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Slot;
	static C(Other: UObject): AnimGraphNode_Slot;
}

declare class AnimNode_StateMachine extends AnimNode_Base { 
	StateMachineIndexInClass: number;
	MaxTransitionsPerFrame: number;
	bSkipFirstUpdateTransition: boolean;
	CurrentState: number;
	ElapsedTime: number;
	clone() : AnimNode_StateMachine;
	static C(Other: UObject): AnimNode_StateMachine;
}

declare class AnimGraphNode_StateMachine extends AnimGraphNode_StateMachineBase { 
	UNode: AnimNode_StateMachine;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_StateMachine;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_StateMachine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_StateMachine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_StateMachine;
	static C(Other: UObject): AnimGraphNode_StateMachine;
}

declare class AnimNode_SubInput extends AnimNode_Base { 
	clone() : AnimNode_SubInput;
	static C(Other: UObject): AnimNode_SubInput;
}

declare class AnimGraphNode_SubInput extends AnimGraphNode_Base { 
	UNode: AnimNode_SubInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SubInput;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SubInput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SubInput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SubInput;
	static C(Other: UObject): AnimGraphNode_SubInput;
}

declare class AnimNode_SubInstance extends AnimNode_Base { 
	InPose: PoseLink;
	InstanceClass: UnrealEngineClass;
	InstanceToRun: AnimInstance;
	InstanceProperties: Property[];
	SubInstanceProperties: Property[];
	SourcePropertyNames: string[];
	DestPropertyNames: string[];
	clone() : AnimNode_SubInstance;
	static C(Other: UObject): AnimNode_SubInstance;
}

declare class AnimGraphNode_SubInstance extends AnimGraphNode_Base { 
	UNode: AnimNode_SubInstance;
	KnownExposableProperties: string[];
	ExposedPropertyNames: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_SubInstance;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SubInstance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_SubInstance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SubInstance;
	static C(Other: UObject): AnimGraphNode_SubInstance;
}

declare type EEvaluatorDataSource = 'EDS_SourcePose' | 'EDS_DestinationPose';
declare var EEvaluatorDataSource : { EDS_SourcePose:'EDS_SourcePose',EDS_DestinationPose:'EDS_DestinationPose', };
declare type EEvaluatorMode = 'EM_Standard' | 'EM_Freeze' | 'EM_DelayedFreeze';
declare var EEvaluatorMode : { EM_Standard:'EM_Standard',EM_Freeze:'EM_Freeze',EM_DelayedFreeze:'EM_DelayedFreeze', };
declare class AnimNode_TransitionPoseEvaluator extends AnimNode_Base { 
	DataSource: EEvaluatorDataSource;
	EvaluatorMode: EEvaluatorMode;
	FramesToCachePose: number;
	CacheFramesRemaining: number;
	clone() : AnimNode_TransitionPoseEvaluator;
	static C(Other: UObject): AnimNode_TransitionPoseEvaluator;
}

declare class AnimGraphNode_TransitionPoseEvaluator extends AnimGraphNode_Base { 
	UNode: AnimNode_TransitionPoseEvaluator;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_TransitionPoseEvaluator;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TransitionPoseEvaluator;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_TransitionPoseEvaluator;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TransitionPoseEvaluator;
	static C(Other: UObject): AnimGraphNode_TransitionPoseEvaluator;
}

declare class AnimationNode_TwoWayBlend extends AnimNode_Base { 
	A: PoseLink;
	B: PoseLink;
	Alpha: number;
	AlphaScaleBias: InputScaleBias;
	clone() : AnimationNode_TwoWayBlend;
	static C(Other: UObject): AnimationNode_TwoWayBlend;
}

declare class AnimGraphNode_TwoWayBlend extends AnimGraphNode_Base { 
	BlendNode: AnimationNode_TwoWayBlend;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_TwoWayBlend;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_TwoWayBlend;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_TwoWayBlend;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_TwoWayBlend;
	static C(Other: UObject): AnimGraphNode_TwoWayBlend;
}

declare class AnimNode_UseCachedPose extends AnimNode_Base { 
	LinkToCachingNode: PoseLink;
	CachePoseName: string;
	clone() : AnimNode_UseCachedPose;
	static C(Other: UObject): AnimNode_UseCachedPose;
}

declare class AnimGraphNode_UseCachedPose extends AnimGraphNode_Base { 
	UNode: AnimNode_UseCachedPose;
	SaveCachedPoseNode: any;
	NameOfCache: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimGraphNode_UseCachedPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_UseCachedPose;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimGraphNode_UseCachedPose;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_UseCachedPose;
	static C(Other: UObject): AnimGraphNode_UseCachedPose;
}

declare class AnimSingleNodeInstance extends AnimInstance { 
	CurrentAsset: AnimationAsset;
	PostEvaluateAnimEvent: UnrealEngineDelegate<() => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimSingleNodeInstance;
	static Find(Outer: UObject, ResourceName: string): AnimSingleNodeInstance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimSingleNodeInstance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSingleNodeInstance;
	StopAnim(): void;
	SetReverse(bInReverse: boolean): void;
	SetPreviewCurveOverride(PoseName: string,Value: number,bRemoveIfZero: boolean): void;
	SetPositionWithPreviousTime(InPosition: number,InPreviousTime: number,bFireNotifies: boolean): void;
	SetPosition(InPosition: number,bFireNotifies: boolean): void;
	SetPlayRate(InPlayRate: number): void;
	SetPlaying(bIsPlaying: boolean): void;
	SetLooping(bIsLooping: boolean): void;
	SetBlendSpaceInput(InBlendInput: Vector): void;
	SetAnimationAsset(NewAsset: AnimationAsset,bIsLooping: boolean,InPlayRate: number): void;
	PlayAnim(bIsLooping: boolean,InPlayRate: number,InStartPosition: number): void;
	GetLength(): number;
	static C(Other: UObject): AnimSingleNodeInstance;
}

declare type EMontagePreviewType = 'EMPT_Normal' | 'EMPT_AllSections';
declare var EMontagePreviewType : { EMPT_Normal:'EMPT_Normal',EMPT_AllSections:'EMPT_AllSections', };
declare class AnimPreviewInstance extends AnimSingleNodeInstance { 
	MontagePreviewType: EMontagePreviewType;
	MontagePreviewStartSectionIdx: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimPreviewInstance;
	static Find(Outer: UObject, ResourceName: string): AnimPreviewInstance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimPreviewInstance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimPreviewInstance;
	static C(Other: UObject): AnimPreviewInstance;
}

declare class AnimStateNodeBase extends EdGraphNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimStateNodeBase;
	static Find(Outer: UObject, ResourceName: string): AnimStateNodeBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimStateNodeBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateNodeBase;
	static C(Other: UObject): AnimStateNodeBase;
}

declare class AnimStateConduitNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimStateConduitNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateConduitNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimStateConduitNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateConduitNode;
	static C(Other: UObject): AnimStateConduitNode;
}

declare type EAnimStateType = 'AST_SingleAnimation' | 'AST_BlendGraph';
declare var EAnimStateType : { AST_SingleAnimation:'AST_SingleAnimation',AST_BlendGraph:'AST_BlendGraph', };
declare class AnimStateNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	StateType: EAnimStateType;
	StateEntered: AnimNotifyEvent;
	StateLeft: AnimNotifyEvent;
	StateFullyBlended: AnimNotifyEvent;
	bAlwaysResetOnEntry: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimStateNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimStateNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateNode;
	static C(Other: UObject): AnimStateNode;
}

declare type ETransitionBlendMode = 'TBM_Linear' | 'TBM_Cubic';
declare var ETransitionBlendMode : { TBM_Linear:'TBM_Linear',TBM_Cubic:'TBM_Cubic', };
declare type ETransitionLogicType = 'TLT_StandardBlend' | 'TLT_Custom';
declare var ETransitionLogicType : { TLT_StandardBlend:'TLT_StandardBlend',TLT_Custom:'TLT_Custom', };
declare class AnimStateTransitionNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	CustomTransitionGraph: EdGraph;
	PriorityOrder: number;
	CrossfadeDuration: number;
	CrossfadeMode: ETransitionBlendMode;
	BlendMode: EAlphaBlendOption;
	CustomBlendCurve: CurveFloat;
	BlendProfile: BlendProfile;
	bAutomaticRuleBasedOnSequencePlayerInState: boolean;
	LogicType: ETransitionLogicType;
	TransitionStart: AnimNotifyEvent;
	TransitionEnd: AnimNotifyEvent;
	TransitionInterrupt: AnimNotifyEvent;
	Bidirectional: boolean;
	bSharedRules: boolean;
	bSharedCrossfade: boolean;
	SharedRulesName: string;
	SharedRulesGuid: Guid;
	SharedColor: LinearColor;
	SharedCrossfadeName: string;
	SharedCrossfadeGuid: Guid;
	SharedCrossfadeIdx: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimStateTransitionNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateTransitionNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimStateTransitionNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateTransitionNode;
	static C(Other: UObject): AnimStateTransitionNode;
}

declare class K2Node_AnimGetter extends K2Node_CallFunction { 
	SourceNode: AnimGraphNode_Base;
	SourceStateNode: AnimStateNodeBase;
	GetterClass: UnrealEngineClass;
	SourceAnimBlueprint: AnimBlueprint;
	CachedTitle: string;
	Contexts: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): K2Node_AnimGetter;
	static Find(Outer: UObject, ResourceName: string): K2Node_AnimGetter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): K2Node_AnimGetter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AnimGetter;
	static C(Other: UObject): K2Node_AnimGetter;
}

declare type ETransitionGetter = 'AnimationAsset_GetCurrentTime' | 'AnimationAsset_GetLength' | 'AnimationAsset_GetCurrentTimeFraction' | 'AnimationAsset_GetTimeFromEnd' | 'AnimationAsset_GetTimeFromEndFraction' | 'CurrentState_ElapsedTime' | 'CurrentState_GetBlendWeight' | 'CurrentTransitionDuration' | 'ArbitraryState_GetBlendWeight';
declare var ETransitionGetter : { AnimationAsset_GetCurrentTime:'AnimationAsset_GetCurrentTime',AnimationAsset_GetLength:'AnimationAsset_GetLength',AnimationAsset_GetCurrentTimeFraction:'AnimationAsset_GetCurrentTimeFraction',AnimationAsset_GetTimeFromEnd:'AnimationAsset_GetTimeFromEnd',AnimationAsset_GetTimeFromEndFraction:'AnimationAsset_GetTimeFromEndFraction',CurrentState_ElapsedTime:'CurrentState_ElapsedTime',CurrentState_GetBlendWeight:'CurrentState_GetBlendWeight',CurrentTransitionDuration:'CurrentTransitionDuration',ArbitraryState_GetBlendWeight:'ArbitraryState_GetBlendWeight', };
declare class K2Node_TransitionRuleGetter extends K2Node { 
	GetterType: ETransitionGetter;
	AssociatedAnimAssetPlayerNode: AnimGraphNode_Base;
	AssociatedStateNode: AnimStateNode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): K2Node_TransitionRuleGetter;
	static Find(Outer: UObject, ResourceName: string): K2Node_TransitionRuleGetter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): K2Node_TransitionRuleGetter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_TransitionRuleGetter;
	static C(Other: UObject): K2Node_TransitionRuleGetter;
}

declare class CookerStats extends UObject { 
	Assets: any[];
	SizeBefore: number;
	SizeAfter: number;
	Path: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CookerStats;
	static Find(Outer: UObject, ResourceName: string): CookerStats;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CookerStats;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerStats;
	static C(Other: UObject): CookerStats;
}

declare class LightingBuildInfo extends UObject { 
	UObject: any;
	LightingTime: number;
	UnmappedTexelsPercentage: number;
	UnmappedTexelsMemory: number;
	TotalTexelMemory: number;
	LevelName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightingBuildInfo;
	static Find(Outer: UObject, ResourceName: string): LightingBuildInfo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightingBuildInfo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightingBuildInfo;
	static C(Other: UObject): LightingBuildInfo;
}

declare class PrimitiveStats extends UObject { 
	UObject: any;
	Actors: any[];
	Type: string;
	Count: number;
	Sections: number;
	InstSections: number;
	Triangles: number;
	InstTriangles: number;
	ResourceSize: number;
	VertexColorMem: number;
	InstVertexColorMem: number;
	LightsLM: number;
	LightsOther: number;
	LightsTotal: number;
	ObjLightCost: number;
	LightMapData: number;
	LMSMResolution: number;
	RadiusMin: number;
	RadiusMax: number;
	RadiusAvg: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PrimitiveStats;
	static Find(Outer: UObject, ResourceName: string): PrimitiveStats;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PrimitiveStats;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveStats;
	static C(Other: UObject): PrimitiveStats;
}

declare class StaticMeshLightingInfo extends UObject { 
	StaticMeshActor: any;
	StaticMesh: any;
	LevelName: string;
	TextureMapping: string;
	bTextureMapping: boolean;
	bHasLightmapTexCoords: boolean;
	StaticLightingResolution: number;
	TextureLightMapMemoryUsage: number;
	VertexLightMapMemoryUsage: number;
	LightMapLightCount: number;
	TextureShadowMapMemoryUsage: number;
	VertexShadowMapMemoryUsage: number;
	ShadowMapLightCount: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StaticMeshLightingInfo;
	static Find(Outer: UObject, ResourceName: string): StaticMeshLightingInfo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StaticMeshLightingInfo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshLightingInfo;
	static C(Other: UObject): StaticMeshLightingInfo;
}

declare class TextureStats extends UObject { 
	Texture: any;
	Actors: any[];
	Type: string;
	MaxDim: Vector2D;
	CurrentDim: Vector2D;
	Format: EPixelFormat;
	Group: TextureGroup;
	LODBias: number;
	CurrentKB: number;
	FullyLoadedKB: number;
	NumUses: number;
	LastTimeRendered: number;
	Path: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureStats;
	static Find(Outer: UObject, ResourceName: string): TextureStats;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureStats;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureStats;
	static C(Other: UObject): TextureStats;
}

declare class GizmoHandle { 
	clone() : GizmoHandle;
	static C(Other: UObject): GizmoHandle;
}

declare class GizmoHandleGroup extends SceneComponent { 
	GizmoMaterial: MaterialInterface;
	TranslucentGizmoMaterial: MaterialInterface;
	Handles: GizmoHandle[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): GizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleGroup;
	static C(Other: UObject): GizmoHandleGroup;
}

declare class ViewportWorldInteraction extends UObject { 
	TransformGizmoActor: BaseTransformGizmo;
	SnapGridActor: Actor;
	SnapGridMeshComponent: StaticMeshComponent;
	SnapGridMID: MaterialInstanceDynamic;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ViewportWorldInteraction;
	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteraction;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ViewportWorldInteraction;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteraction;
	static C(Other: UObject): ViewportWorldInteraction;
}

declare class BaseTransformGizmo extends Actor { 
	SceneComponent: SceneComponent;
	GizmoMaterial: MaterialInterface;
	TranslucentGizmoMaterial: MaterialInterface;
	AllHandleGroups: GizmoHandleGroup[];
	WorldInteraction: ViewportWorldInteraction;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BaseTransformGizmo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseTransformGizmo;
	static C(Other: UObject): BaseTransformGizmo;
}

declare class AxisGizmoHandleGroup extends GizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AxisGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): AxisGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AxisGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisGizmoHandleGroup;
	static C(Other: UObject): AxisGizmoHandleGroup;
}

declare class UniformScaleGizmoHandleGroup extends GizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UniformScaleGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): UniformScaleGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UniformScaleGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleGizmoHandleGroup;
	static C(Other: UObject): UniformScaleGizmoHandleGroup;
}

declare class PivotTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PivotTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotTranslationGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PivotTranslationGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTranslationGizmoHandleGroup;
	static C(Other: UObject): PivotTranslationGizmoHandleGroup;
}

declare class PivotScaleGizmoHandleGroup extends AxisGizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PivotScaleGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotScaleGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PivotScaleGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotScaleGizmoHandleGroup;
	static C(Other: UObject): PivotScaleGizmoHandleGroup;
}

declare class PivotPlaneTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PivotPlaneTranslationGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotPlaneTranslationGizmoHandleGroup;
	static C(Other: UObject): PivotPlaneTranslationGizmoHandleGroup;
}

declare class PivotRotationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PivotRotationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotRotationGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PivotRotationGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotRotationGizmoHandleGroup;
	static C(Other: UObject): PivotRotationGizmoHandleGroup;
}

declare class StretchGizmoHandleGroup extends GizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StretchGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StretchGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleGroup;
	static C(Other: UObject): StretchGizmoHandleGroup;
}

declare class PivotTransformGizmo extends BaseTransformGizmo { 
	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
	TranslationGizmoHandleGroup: PivotTranslationGizmoHandleGroup;
	ScaleGizmoHandleGroup: PivotScaleGizmoHandleGroup;
	PlaneTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup;
	RotationGizmoHandleGroup: PivotRotationGizmoHandleGroup;
	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PivotTransformGizmo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTransformGizmo;
	static C(Other: UObject): PivotTransformGizmo;
}

declare class ViewportDragOperation extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ViewportDragOperation;
	static Find(Outer: UObject, ResourceName: string): ViewportDragOperation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ViewportDragOperation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperation;
	static C(Other: UObject): ViewportDragOperation;
}

declare class ViewportDragOperationComponent extends ActorComponent { 
	DragOperation: ViewportDragOperation;
	DragOperationSubclass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ViewportDragOperationComponent;
	static Find(Outer: UObject, ResourceName: string): ViewportDragOperationComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ViewportDragOperationComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperationComponent;
	static C(Other: UObject): ViewportDragOperationComponent;
}

declare class ViewportInteractableInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ViewportInteractableInterface;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractableInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ViewportInteractableInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractableInterface;
	static C(Other: UObject): ViewportInteractableInterface;
}

declare class ViewportInteractor extends UObject { 
	WorldInteraction: ViewportWorldInteraction;
	OtherInteractor: ViewportInteractor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ViewportInteractor;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ViewportInteractor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractor;
	static C(Other: UObject): ViewportInteractor;
}

declare class MouseCursorInteractor extends ViewportInteractor { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MouseCursorInteractor;
	static Find(Outer: UObject, ResourceName: string): MouseCursorInteractor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MouseCursorInteractor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseCursorInteractor;
	static C(Other: UObject): MouseCursorInteractor;
}

declare class ViewportWorldInteractionInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ViewportWorldInteractionInterface;
	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteractionInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ViewportWorldInteractionInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteractionInterface;
	static C(Other: UObject): ViewportWorldInteractionInterface;
}

declare type ETrackingStatus = 'NotTracked' | 'InertialOnly' | 'Tracked';
declare var ETrackingStatus : { NotTracked:'NotTracked',InertialOnly:'InertialOnly',Tracked:'Tracked', };
declare class MotionControllerComponent extends PrimitiveComponent { 
	PlayerIndex: number;
	Hand: EControllerHand;
	bDisableLowLatencyUpdate: boolean;
	CurrentTrackingStatus: ETrackingStatus;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MotionControllerComponent;
	static Find(Outer: UObject, ResourceName: string): MotionControllerComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MotionControllerComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionControllerComponent;
	IsTracked(): boolean;
	static C(Other: UObject): MotionControllerComponent;
}

declare class VRNotificationsComponent extends ActorComponent { 
	HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDLostDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VRNotificationsComponent;
	static Find(Outer: UObject, ResourceName: string): VRNotificationsComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VRNotificationsComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRNotificationsComponent;
	static C(Other: UObject): VRNotificationsComponent;
}

declare class VREditorBaseUserWidget extends UserWidget { 
	Owner: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorBaseUserWidget;
	static Find(Outer: UObject, ResourceName: string): VREditorBaseUserWidget;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorBaseUserWidget;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseUserWidget;
	static C(Other: UObject): VREditorBaseUserWidget;
}

declare type EVREditorWidgetDrawingPolicy = 'Always' | 'Hovering';
declare var EVREditorWidgetDrawingPolicy : { Always:'Always',Hovering:'Hovering', };
declare class VREditorWidgetComponent extends WidgetComponent { 
	DrawingPolicy: EVREditorWidgetDrawingPolicy;
	bIsHovering: boolean;
	bHasEverDrawn: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorWidgetComponent;
	static Find(Outer: UObject, ResourceName: string): VREditorWidgetComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorWidgetComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWidgetComponent;
	static C(Other: UObject): VREditorWidgetComponent;
}

declare class VREditorFloatingUI extends VREditorBaseActor { 
	UserWidget: VREditorBaseUserWidget;
	WidgetComponent: VREditorWidgetComponent;
	UserWidgetClass: UnrealEngineClass;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorFloatingUI;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingUI;
	static C(Other: UObject): VREditorFloatingUI;
}

declare class VREditorDockableWindow extends VREditorFloatingUI { 
	WindowMeshComponent: StaticMeshComponent;
	SelectionBarMeshComponent: StaticMeshComponent;
	CloseButtonMeshComponent: StaticMeshComponent;
	SelectionBarMID: MaterialInstanceDynamic;
	SelectionBarTranslucentMID: MaterialInstanceDynamic;
	CloseButtonMID: MaterialInstanceDynamic;
	CloseButtonTranslucentMID: MaterialInstanceDynamic;
	DragOperationComponent: ViewportDragOperationComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorDockableWindow;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableWindow;
	static C(Other: UObject): VREditorDockableWindow;
}

declare class VREditorUISystem extends UObject { 
	VRMode: VREditorMode;
	FloatingUIs: VREditorFloatingUI[];
	QuickMenuUI: VREditorFloatingUI;
	EditorUIPanels: VREditorFloatingUI[];
	QuickRadialMenu: VREditorFloatingUI;
	DraggingUI: VREditorDockableWindow;
	ColorPickerUI: VREditorDockableWindow;
	StartDragUISound: SoundCue;
	StopDragUISound: SoundCue;
	HideUISound: SoundCue;
	ShowUISound: SoundCue;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorUISystem;
	static Find(Outer: UObject, ResourceName: string): VREditorUISystem;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorUISystem;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorUISystem;
	static C(Other: UObject): VREditorUISystem;
}

declare class VREditorTeleporter extends UObject { 
	VRMode: VREditorMode;
	TeleportSound: SoundCue;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorTeleporter;
	static Find(Outer: UObject, ResourceName: string): VREditorTeleporter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorTeleporter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTeleporter;
	static C(Other: UObject): VREditorTeleporter;
}

declare class VREditorAutoScaler extends UObject { 
	VRMode: VREditorMode;
	ScaleSound: SoundCue;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorAutoScaler;
	static Find(Outer: UObject, ResourceName: string): VREditorAutoScaler;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorAutoScaler;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAutoScaler;
	static C(Other: UObject): VREditorAutoScaler;
}

declare class VREditorWorldInteraction extends UObject { 
	Owner: VREditorMode;
	ViewportWorldInteraction: ViewportWorldInteraction;
	DropMaterialOrMaterialSound: SoundCue;
	FloatingUIAssetDraggedFrom: WidgetComponent;
	PlacingMaterialOrTextureAsset: UObject;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorWorldInteraction;
	static Find(Outer: UObject, ResourceName: string): VREditorWorldInteraction;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorWorldInteraction;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWorldInteraction;
	static C(Other: UObject): VREditorWorldInteraction;
}

declare class VREditorInteractor extends ViewportInteractor { 
	VRMode: VREditorMode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorInteractor;
	static Find(Outer: UObject, ResourceName: string): VREditorInteractor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorInteractor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorInteractor;
	static C(Other: UObject): VREditorInteractor;
}

declare class LightComponentBase extends SceneComponent { 
	LightGuid: Guid;
	Brightness: number;
	Intensity: number;
	LightColor: Color;
	bAffectsWorld: boolean;
	CastShadows: boolean;
	CastStaticShadows: boolean;
	CastDynamicShadows: boolean;
	bAffectTranslucentLighting: boolean;
	IndirectLightingIntensity: number;
	StaticEditorTexture: Texture2D;
	StaticEditorTextureScale: number;
	DynamicEditorTexture: Texture2D;
	DynamicEditorTextureScale: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightComponentBase;
	static Find(Outer: UObject, ResourceName: string): LightComponentBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightComponentBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponentBase;
	SetCastShadows(bNewValue: boolean): void;
	GetLightColor(): LinearColor;
	static C(Other: UObject): LightComponentBase;
}

declare class TextureLightProfile extends Texture2D { 
	Brightness: number;
	TextureMultiplier: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureLightProfile;
	static Find(Outer: UObject, ResourceName: string): TextureLightProfile;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureLightProfile;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLightProfile;
	static C(Other: UObject): TextureLightProfile;
}

declare class LightComponent extends LightComponentBase { 
	Temperature: number;
	MaxDrawDistance: number;
	MaxDistanceFadeRange: number;
	bUseTemperature: boolean;
	ShadowMapChannel: number;
	MinRoughness: number;
	ShadowBias: number;
	ShadowSharpen: number;
	ContactShadowLength: number;
	InverseSquaredFalloff: boolean;
	CastTranslucentShadows: boolean;
	bCastShadowsFromCinematicObjectsOnly: boolean;
	bAffectDynamicIndirectLighting: boolean;
	LightingChannels: LightingChannels;
	LightFunctionMaterial: MaterialInterface;
	LightFunctionScale: Vector;
	IESTexture: TextureLightProfile;
	bUseIESBrightness: boolean;
	IESBrightnessScale: number;
	LightFunctionFadeDistance: number;
	DisabledBrightness: number;
	bEnableLightShaftBloom: boolean;
	BloomScale: number;
	BloomThreshold: number;
	BloomTint: Color;
	bUseRayTracedDistanceFieldShadows: boolean;
	RayStartOffsetDepthScale: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightComponent;
	static Find(Outer: UObject, ResourceName: string): LightComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponent;
	SetTemperature(NewTemperature: number): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightFunctionDisabledBrightness(NewValue: number): void;
	SetLightColor(NewLightColor: LinearColor,bSRGB: boolean): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetIESTexture(NewValue: TextureLightProfile): void;
	SetEnableLightShaftBloom(bNewValue: boolean): void;
	SetBloomTint(NewValue: Color): void;
	SetBloomThreshold(NewValue: number): void;
	SetBloomScale(NewValue: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	SetAffectDynamicIndirectLighting(bNewValue: boolean): void;
	static C(Other: UObject): LightComponent;
}

declare class LightmassLightSettings { 
	IndirectLightingSaturation: number;
	ShadowExponent: number;
	bUseAreaShadowsForStationaryLight: boolean;
	clone() : LightmassLightSettings;
	static C(Other: UObject): LightmassLightSettings;
}

declare class LightmassPointLightSettings extends LightmassLightSettings { 
	clone() : LightmassPointLightSettings;
	static C(Other: UObject): LightmassPointLightSettings;
}

declare class PointLightComponent extends LightComponent { 
	Radius: number;
	AttenuationRadius: number;
	bUseInverseSquaredFalloff: boolean;
	LightFalloffExponent: number;
	SourceRadius: number;
	SourceLength: number;
	LightmassSettings: LightmassPointLightSettings;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PointLightComponent;
	static Find(Outer: UObject, ResourceName: string): PointLightComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PointLightComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLightComponent;
	SetSourceRadius(bNewValue: number): void;
	SetSourceLength(NewValue: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	SetAttenuationRadius(NewRadius: number): void;
	static C(Other: UObject): PointLightComponent;
}

declare class VREditorMotionControllerInteractor extends VREditorInteractor { 
	MotionControllerComponent: MotionControllerComponent;
	HandMeshComponent: StaticMeshComponent;
	LaserPointerMeshComponent: StaticMeshComponent;
	LaserPointerMID: MaterialInstanceDynamic;
	TranslucentLaserPointerMID: MaterialInstanceDynamic;
	HoverMeshComponent: StaticMeshComponent;
	HoverPointLightComponent: PointLightComponent;
	HandMeshMID: MaterialInstanceDynamic;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorMotionControllerInteractor;
	static Find(Outer: UObject, ResourceName: string): VREditorMotionControllerInteractor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorMotionControllerInteractor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMotionControllerInteractor;
	static C(Other: UObject): VREditorMotionControllerInteractor;
}

declare class VREditorMode extends UObject { 
	UISystem: VREditorUISystem;
	TeleporterSystem: VREditorTeleporter;
	AutoScalerSystem: VREditorAutoScaler;
	WorldInteraction: ViewportWorldInteraction;
	VRWorldInteractionExtension: VREditorWorldInteraction;
	MouseCursorInteractor: MouseCursorInteractor;
	LeftHandInteractor: VREditorMotionControllerInteractor;
	RightHandInteractor: VREditorMotionControllerInteractor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorMode;
	static Find(Outer: UObject, ResourceName: string): VREditorMode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorMode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMode;
	static C(Other: UObject): VREditorMode;
}

declare class VREditorBaseActor extends Actor { 
	VRMode: VREditorMode;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorBaseActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseActor;
	static C(Other: UObject): VREditorBaseActor;
}

declare class DockableWindowDragOperation extends ViewportDragOperation { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DockableWindowDragOperation;
	static Find(Outer: UObject, ResourceName: string): DockableWindowDragOperation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DockableWindowDragOperation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DockableWindowDragOperation;
	static C(Other: UObject): DockableWindowDragOperation;
}

declare type EHorizTextAligment = 'EHTA_Left' | 'EHTA_Center' | 'EHTA_Right';
declare var EHorizTextAligment : { EHTA_Left:'EHTA_Left',EHTA_Center:'EHTA_Center',EHTA_Right:'EHTA_Right', };
declare type EVerticalTextAligment = 'EVRTA_TextTop' | 'EVRTA_TextCenter' | 'EVRTA_TextBottom' | 'EVRTA_QuadTop';
declare var EVerticalTextAligment : { EVRTA_TextTop:'EVRTA_TextTop',EVRTA_TextCenter:'EVRTA_TextCenter',EVRTA_TextBottom:'EVRTA_TextBottom',EVRTA_QuadTop:'EVRTA_QuadTop', };
declare class TextRenderComponent extends PrimitiveComponent { 
	Text: string;
	TextMaterial: MaterialInterface;
	Font: Font;
	HorizontalAlignment: EHorizTextAligment;
	VerticalAlignment: EVerticalTextAligment;
	TextRenderColor: Color;
	XScale: number;
	YScale: number;
	WorldSize: number;
	InvDefaultSize: number;
	HorizSpacingAdjust: number;
	VertSpacingAdjust: number;
	bAlwaysRenderAsText: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextRenderComponent;
	static Find(Outer: UObject, ResourceName: string): TextRenderComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextRenderComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderComponent;
	SetYScale(Value: number): void;
	SetXScale(Value: number): void;
	SetWorldSize(Value: number): void;
	SetVertSpacingAdjust(Value: number): void;
	SetVerticalAlignment(Value: EVerticalTextAligment): void;
	SetTextRenderColor(Value: Color): void;
	SetTextMaterial(Material: MaterialInterface): void;
	SetText(Value: string): void;
	SetHorizSpacingAdjust(Value: number): void;
	SetHorizontalAlignment(Value: EHorizTextAligment): void;
	SetFont(Value: Font): void;
	SetText(Value: string): void;
	GetTextWorldSize(): Vector;
	GetTextLocalSize(): Vector;
	static C(Other: UObject): TextRenderComponent;
}

declare class FloatingText extends Actor { 
	SceneComponent: SceneComponent;
	FirstLineComponent: StaticMeshComponent;
	JointSphereComponent: StaticMeshComponent;
	SecondLineComponent: StaticMeshComponent;
	TextComponent: TextRenderComponent;
	MaskedTextMaterial: MaterialInterface;
	TranslucentTextMaterial: MaterialInterface;
	LineMaterial: MaterialInterface;
	LineMaterialMID: MaterialInstanceDynamic;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FloatingText;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingText;
	static C(Other: UObject): FloatingText;
}

declare class TransformGizmoMeasurement { 
	MeasurementText: TextRenderComponent;
	clone() : TransformGizmoMeasurement;
	static C(Other: UObject): TransformGizmoMeasurement;
}

declare class VREditorTranslationGizmoHandleGroup extends GizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): VREditorTranslationGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorTranslationGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTranslationGizmoHandleGroup;
	static C(Other: UObject): VREditorTranslationGizmoHandleGroup;
}

declare class VREditorPlaneTranslationGizmoHandleGroup extends GizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorPlaneTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): VREditorPlaneTranslationGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorPlaneTranslationGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorPlaneTranslationGizmoHandleGroup;
	static C(Other: UObject): VREditorPlaneTranslationGizmoHandleGroup;
}

declare class VREditorRotationGizmoHandleGroup extends GizmoHandleGroup { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorRotationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): VREditorRotationGizmoHandleGroup;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorRotationGizmoHandleGroup;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRotationGizmoHandleGroup;
	static C(Other: UObject): VREditorRotationGizmoHandleGroup;
}

declare class TransformGizmo extends BaseTransformGizmo { 
	Measurements: TransformGizmoMeasurement;
	TranslationGizmoHandleGroup: VREditorTranslationGizmoHandleGroup;
	PlaneTranslationGizmoHandleGroup: VREditorPlaneTranslationGizmoHandleGroup;
	RotationGizmoHandleGroup: VREditorRotationGizmoHandleGroup;
	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TransformGizmo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransformGizmo;
	static C(Other: UObject): TransformGizmo;
}

declare class PostProcessComponent extends SceneComponent { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PostProcessComponent;
	static Find(Outer: UObject, ResourceName: string): PostProcessComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PostProcessComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessComponent;
	static C(Other: UObject): PostProcessComponent;
}

declare class VREditorAvatarActor extends Actor { 
	HeadMeshComponent: StaticMeshComponent;
	WorldMovementGridMeshComponent: StaticMeshComponent;
	WorldMovementGridMID: MaterialInstanceDynamic;
	WorldMovementGridOpacity: number;
	bIsDrawingWorldMovementPostProcess: boolean;
	WorldMovementPostProcessMaterial: MaterialInstanceDynamic;
	ScaleProgressMeshComponent: StaticMeshComponent;
	CurrentScaleProgressMeshComponent: StaticMeshComponent;
	UserScaleIndicatorText: TextRenderComponent;
	FixedUserScaleMID: MaterialInstanceDynamic;
	TranslucentFixedUserScaleMID: MaterialInstanceDynamic;
	CurrentUserScaleMID: MaterialInstanceDynamic;
	TranslucentCurrentUserScaleMID: MaterialInstanceDynamic;
	PostProcessComponent: PostProcessComponent;
	VRMode: VREditorMode;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorAvatarActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAvatarActor;
	static C(Other: UObject): VREditorAvatarActor;
}

declare class VREditorButton extends VREditorBaseActor { 
	ButtonMeshComponent: StaticMeshComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorButton;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorButton;
	static C(Other: UObject): VREditorButton;
}

declare class VREditorQuickMenu extends VREditorBaseUserWidget { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorQuickMenu;
	static Find(Outer: UObject, ResourceName: string): VREditorQuickMenu;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorQuickMenu;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorQuickMenu;
	Refresh(): void;
	OnWorldSettingsButtonClicked(bIsChecked: boolean): boolean;
	OnWorldOutlinerButtonClicked(bIsChecked: boolean): boolean;
	OnUndoButtonClicked(): void;
	OnTutorialButtonClicked(bIsChecked: boolean): boolean;
	OnTranslationSnapSizeButtonClicked(): string;
	OnTranslationSnapButtonClicked(bIsChecked: boolean): boolean;
	OnSimulateButtonClicked(bIsChecked: boolean): boolean;
	OnScreenshotButtonClicked(): void;
	OnScaleSnapSizeButtonClicked(): string;
	OnScaleSnapButtonClicked(bIsChecked: boolean): boolean;
	OnRotationSnapSizeButtonClicked(): string;
	OnRotationSnapButtonClicked(bIsChecked: boolean): boolean;
	OnRedoButtonClicked(): void;
	OnPlayButtonClicked(): void;
	OnPasteButtonClicked(): void;
	OnModesButtonClicked(bIsChecked: boolean): boolean;
	OnLightButtonClicked(bIsChecked: boolean): boolean;
	OnGizmoModeButtonClicked(): string;
	OnGizmoCoordinateSystemButtonClicked(): string;
	OnGameModeButtonClicked(bIsChecked: boolean): boolean;
	OnExitVRButtonClicked(): void;
	OnDeleteButtonClicked(): void;
	OnCopyButtonClicked(): void;
	OnContentBrowserButtonClicked(bIsChecked: boolean): boolean;
	OnAssetEditorButtonClicked(bIsChecked: boolean): boolean;
	OnActorDetailsButtonClicked(bIsChecked: boolean): boolean;
	IsWorldSettingsVisible(): boolean;
	IsWorldOutlinerVisible(): boolean;
	IsTutorialVisible(): boolean;
	IsTranslationSnapEnabled(): boolean;
	IsSimulatingEnabled(): boolean;
	IsScaleSnapEnabled(): boolean;
	IsRotationSnapEnabled(): boolean;
	IsModesVisible(): boolean;
	IsLightVisible(): boolean;
	IsGameModeEnabled(): boolean;
	IsContentBrowserVisible(): boolean;
	IsAssetEditorVisible(): boolean;
	IsActorDetailsVisible(): boolean;
	GetTranslationSnapSizeText(): string;
	GetScaleSnapSizeText(): string;
	GetRotationSnapSizeText(): string;
	GetGizmoModeText(): string;
	GetGizmoCoordinateSystemText(): string;
	static C(Other: UObject): VREditorQuickMenu;
}

declare class VREditorRadialMenuItem extends VREditorBaseUserWidget { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorRadialMenuItem;
	static Find(Outer: UObject, ResourceName: string): VREditorRadialMenuItem;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorRadialMenuItem;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRadialMenuItem;
	SetLabel(Text: string): void;
	OnPressed(): void;
	OnLeaveHover(): void;
	OnEnterHover(): void;
	GetAngle(): number;
	static C(Other: UObject): VREditorRadialMenuItem;
}

declare class VREditorRadialMenu extends VREditorBaseUserWidget { 
	TrackpadPosition: Vector2D;
	TrackpadAngle: number;
	MenuItems: VREditorRadialMenuItem[];
	CurrentItem: VREditorRadialMenuItem;
	PreviousItem: VREditorRadialMenuItem;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VREditorRadialMenu;
	static Find(Outer: UObject, ResourceName: string): VREditorRadialMenu;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VREditorRadialMenu;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRadialMenu;
	SetButtons(InitTopItem: VREditorRadialMenuItem,InitTopRightItem: VREditorRadialMenuItem,InitRightItem: VREditorRadialMenuItem,InitBottomRightItem: VREditorRadialMenuItem,InitBottomItem: VREditorRadialMenuItem,InitLeftBottomItem: VREditorRadialMenuItem,InitLeftItem: VREditorRadialMenuItem,InitTopLeftItem: VREditorRadialMenuItem): void;
	static C(Other: UObject): VREditorRadialMenu;
}

declare class ActorFactory extends UObject { 
	DisplayName: string;
	MenuPriority: number;
	NewActorClassName: string;
	NewActorClass: UnrealEngineClass;
	bShowInEditorQuickMenu: boolean;
	bUseSurfaceOrientation: boolean;
	SpawnPositionOffset: Vector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactory;
	static Find(Outer: UObject, ResourceName: string): ActorFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactory;
	static C(Other: UObject): ActorFactory;
}

declare class ActorFactoryAmbientSound extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryAmbientSound;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAmbientSound;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryAmbientSound;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAmbientSound;
	static C(Other: UObject): ActorFactoryAmbientSound;
}

declare class ActorFactoryAtmosphericFog extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryAtmosphericFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAtmosphericFog;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryAtmosphericFog;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAtmosphericFog;
	static C(Other: UObject): ActorFactoryAtmosphericFog;
}

declare class ActorFactoryBlueprint extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryBlueprint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBlueprint;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryBlueprint;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBlueprint;
	static C(Other: UObject): ActorFactoryBlueprint;
}

declare class ActorFactoryBoxReflectionCapture extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryBoxReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxReflectionCapture;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryBoxReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxReflectionCapture;
	static C(Other: UObject): ActorFactoryBoxReflectionCapture;
}

declare class ActorFactoryBoxVolume extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryBoxVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxVolume;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryBoxVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxVolume;
	static C(Other: UObject): ActorFactoryBoxVolume;
}

declare class ActorFactoryCameraActor extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryCameraActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCameraActor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryCameraActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCameraActor;
	static C(Other: UObject): ActorFactoryCameraActor;
}

declare class ActorFactoryCharacter extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryCharacter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCharacter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryCharacter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCharacter;
	static C(Other: UObject): ActorFactoryCharacter;
}

declare class ActorFactoryClass extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryClass;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryClass;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryClass;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryClass;
	static C(Other: UObject): ActorFactoryClass;
}

declare class ActorFactoryCylinderVolume extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryCylinderVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCylinderVolume;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryCylinderVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCylinderVolume;
	static C(Other: UObject): ActorFactoryCylinderVolume;
}

declare class ActorFactoryDeferredDecal extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryDeferredDecal;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDeferredDecal;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryDeferredDecal;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDeferredDecal;
	static C(Other: UObject): ActorFactoryDeferredDecal;
}

declare class ActorFactoryDestructible extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryDestructible;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDestructible;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryDestructible;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDestructible;
	static C(Other: UObject): ActorFactoryDestructible;
}

declare class ActorFactoryDirectionalLight extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryDirectionalLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDirectionalLight;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryDirectionalLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDirectionalLight;
	static C(Other: UObject): ActorFactoryDirectionalLight;
}

declare class ActorFactoryEmitter extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryEmitter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmitter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryEmitter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmitter;
	static C(Other: UObject): ActorFactoryEmitter;
}

declare class ActorFactoryEmptyActor extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryEmptyActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmptyActor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryEmptyActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmptyActor;
	static C(Other: UObject): ActorFactoryEmptyActor;
}

declare class ActorFactoryPawn extends ActorFactoryEmptyActor { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryPawn;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPawn;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryPawn;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPawn;
	static C(Other: UObject): ActorFactoryPawn;
}

declare class ActorFactoryExponentialHeightFog extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryExponentialHeightFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryExponentialHeightFog;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryExponentialHeightFog;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryExponentialHeightFog;
	static C(Other: UObject): ActorFactoryExponentialHeightFog;
}

declare class ActorFactoryMatineeActor extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryMatineeActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryMatineeActor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryMatineeActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryMatineeActor;
	static C(Other: UObject): ActorFactoryMatineeActor;
}

declare class ActorFactoryMovieScene extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryMovieScene;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryMovieScene;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryMovieScene;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryMovieScene;
	static C(Other: UObject): ActorFactoryMovieScene;
}

declare class ActorFactoryNote extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryNote;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryNote;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryNote;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryNote;
	static C(Other: UObject): ActorFactoryNote;
}

declare class ActorFactoryPhysicsAsset extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryPhysicsAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPhysicsAsset;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryPhysicsAsset;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPhysicsAsset;
	static C(Other: UObject): ActorFactoryPhysicsAsset;
}

declare class ActorFactoryPlanarReflection extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryPlanarReflection;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlanarReflection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryPlanarReflection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlanarReflection;
	static C(Other: UObject): ActorFactoryPlanarReflection;
}

declare class ActorFactoryPlaneReflectionCapture extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryPlaneReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlaneReflectionCapture;
	static C(Other: UObject): ActorFactoryPlaneReflectionCapture;
}

declare class ActorFactoryPlayerStart extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryPlayerStart;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlayerStart;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryPlayerStart;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlayerStart;
	static C(Other: UObject): ActorFactoryPlayerStart;
}

declare class ActorFactoryPointLight extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryPointLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPointLight;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryPointLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPointLight;
	static C(Other: UObject): ActorFactoryPointLight;
}

declare class ActorFactorySkeletalMesh extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactorySkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkeletalMesh;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactorySkeletalMesh;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkeletalMesh;
	static C(Other: UObject): ActorFactorySkeletalMesh;
}

declare class ActorFactoryAnimationAsset extends ActorFactorySkeletalMesh { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryAnimationAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAnimationAsset;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryAnimationAsset;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAnimationAsset;
	static C(Other: UObject): ActorFactoryAnimationAsset;
}

declare class ActorFactorySkyLight extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactorySkyLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyLight;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactorySkyLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkyLight;
	static C(Other: UObject): ActorFactorySkyLight;
}

declare class ActorFactorySphereReflectionCapture extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactorySphereReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereReflectionCapture;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactorySphereReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereReflectionCapture;
	static C(Other: UObject): ActorFactorySphereReflectionCapture;
}

declare class ActorFactorySphereVolume extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactorySphereVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereVolume;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactorySphereVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereVolume;
	static C(Other: UObject): ActorFactorySphereVolume;
}

declare class ActorFactorySpotLight extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactorySpotLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySpotLight;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactorySpotLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySpotLight;
	static C(Other: UObject): ActorFactorySpotLight;
}

declare class ActorFactoryStaticMesh extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryStaticMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryStaticMesh;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryStaticMesh;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryStaticMesh;
	static C(Other: UObject): ActorFactoryStaticMesh;
}

declare class ActorFactoryBasicShape extends ActorFactoryStaticMesh { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryBasicShape;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBasicShape;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryBasicShape;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBasicShape;
	static C(Other: UObject): ActorFactoryBasicShape;
}

declare class ActorFactoryInteractiveFoliage extends ActorFactoryStaticMesh { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryInteractiveFoliage;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryInteractiveFoliage;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryInteractiveFoliage;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryInteractiveFoliage;
	static C(Other: UObject): ActorFactoryInteractiveFoliage;
}

declare class ActorFactorySubDSurface extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactorySubDSurface;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySubDSurface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactorySubDSurface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySubDSurface;
	static C(Other: UObject): ActorFactorySubDSurface;
}

declare class ActorFactoryTargetPoint extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryTargetPoint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTargetPoint;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryTargetPoint;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTargetPoint;
	static C(Other: UObject): ActorFactoryTargetPoint;
}

declare class ActorFactoryTextRender extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryTextRender;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTextRender;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryTextRender;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTextRender;
	static C(Other: UObject): ActorFactoryTextRender;
}

declare class ActorFactoryTriggerBox extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryTriggerBox;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerBox;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryTriggerBox;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerBox;
	static C(Other: UObject): ActorFactoryTriggerBox;
}

declare class ActorFactoryTriggerCapsule extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryTriggerCapsule;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerCapsule;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryTriggerCapsule;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerCapsule;
	static C(Other: UObject): ActorFactoryTriggerCapsule;
}

declare class ActorFactoryTriggerSphere extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryTriggerSphere;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerSphere;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryTriggerSphere;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerSphere;
	static C(Other: UObject): ActorFactoryTriggerSphere;
}

declare class ActorFactoryVectorFieldVolume extends ActorFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorFactoryVectorFieldVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVectorFieldVolume;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorFactoryVectorFieldVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVectorFieldVolume;
	static C(Other: UObject): ActorFactoryVectorFieldVolume;
}

declare class AnalyticsPrivacySettings extends UObject { 
	bSendUsageData: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnalyticsPrivacySettings;
	static Find(Outer: UObject, ResourceName: string): AnalyticsPrivacySettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnalyticsPrivacySettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnalyticsPrivacySettings;
	static C(Other: UObject): AnalyticsPrivacySettings;
}

declare class SkeletalMeshActor extends Actor { 
	bShouldDoAnimNotifies: boolean;
	bWakeOnLevelStart: boolean;
	SkeletalMeshComponent: SkeletalMeshComponent;
	ReplicatedMesh: SkeletalMesh;
	ReplicatedPhysAsset: PhysicsAsset;
	ReplicatedMaterial0: MaterialInterface;
	ReplicatedMaterial1: MaterialInterface;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SkeletalMeshActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshActor;
	OnRep_ReplicatedPhysAsset(): void;
	OnRep_ReplicatedMesh(): void;
	OnRep_ReplicatedMaterial1(): void;
	OnRep_ReplicatedMaterial0(): void;
	static C(Other: UObject): SkeletalMeshActor;
}

declare class AnimationThumbnailSkeletalMeshActor extends SkeletalMeshActor { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationThumbnailSkeletalMeshActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationThumbnailSkeletalMeshActor;
	static C(Other: UObject): AnimationThumbnailSkeletalMeshActor;
}

declare class Exporter extends UObject { 
	SupportedClass: UnrealEngineClass;
	ExportRootScope: UObject;
	FormatExtension: string[];
	FormatDescription: string[];
	PreferredFormatIndex: number;
	TextIndent: number;
	bText: boolean;
	bSelectedOnly: boolean;
	bForceFileOperations: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Exporter;
	static Find(Outer: UObject, ResourceName: string): Exporter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Exporter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Exporter;
	static C(Other: UObject): Exporter;
}

declare class AnimSequenceExporterFBX extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimSequenceExporterFBX;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceExporterFBX;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimSequenceExporterFBX;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceExporterFBX;
	static C(Other: UObject): AnimSequenceExporterFBX;
}

declare class PreviewSceneProfile { 
	ProfileName: string;
	DirectionalLightIntensity: number;
	DirectionalLightColor: LinearColor;
	SkyLightIntensity: number;
	bRotateLightingRig: boolean;
	bShowEnvironment: boolean;
	bShowFloor: boolean;
	EnvironmentCubeMap: any;
	EnvironmentCubeMapPath: string;
	PostProcessingSettings: PostProcessSettings;
	bPostProcessingEnabled: boolean;
	LightingRigRotation: number;
	RotationSpeed: number;
	DirectionalLightRotation: Rotator;
	clone() : PreviewSceneProfile;
	static C(Other: UObject): PreviewSceneProfile;
}

declare class AssetViewerSettings extends UObject { 
	Profiles: PreviewSceneProfile[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AssetViewerSettings;
	static Find(Outer: UObject, ResourceName: string): AssetViewerSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AssetViewerSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetViewerSettings;
	static C(Other: UObject): AssetViewerSettings;
}

declare class Commandlet extends UObject { 
	HelpDescription: string;
	HelpUsage: string;
	HelpWebLink: string;
	HelpParamNames: string[];
	HelpParamDescriptions: string[];
	IsServer: boolean;
	IsClient: boolean;
	IsEditor: boolean;
	LogToConsole: boolean;
	ShowErrorCount: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Commandlet;
	static Find(Outer: UObject, ResourceName: string): Commandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Commandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Commandlet;
	static C(Other: UObject): Commandlet;
}

declare class AudioMixerCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AudioMixerCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioMixerCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AudioMixerCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioMixerCommandlet;
	static C(Other: UObject): AudioMixerCommandlet;
}

declare class AudioTestCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AudioTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioTestCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AudioTestCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioTestCommandlet;
	static C(Other: UObject): AudioTestCommandlet;
}

declare class AutoReimportManager extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AutoReimportManager;
	static Find(Outer: UObject, ResourceName: string): AutoReimportManager;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AutoReimportManager;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutoReimportManager;
	static C(Other: UObject): AutoReimportManager;
}

declare class CascadeOptions extends UObject { 
	bShowModuleDump: boolean;
	BackgroundColor: Color;
	bUseSubMenus: boolean;
	bUseSpaceBarReset: boolean;
	bUseSpaceBarResetInLevel: boolean;
	Empty_Background: Color;
	Emitter_Background: Color;
	Emitter_Unselected: Color;
	Emitter_Selected: Color;
	ModuleColor_General_Unselected: Color;
	ModuleColor_General_Selected: Color;
	ModuleColor_TypeData_Unselected: Color;
	ModuleColor_TypeData_Selected: Color;
	ModuleColor_Beam_Unselected: Color;
	ModuleColor_Beam_Selected: Color;
	ModuleColor_Trail_Unselected: Color;
	ModuleColor_Trail_Selected: Color;
	ModuleColor_Spawn_Unselected: Color;
	ModuleColor_Spawn_Selected: Color;
	ModuleColor_Light_Unselected: Color;
	ModuleColor_Light_Selected: Color;
	ModuleColor_SubUV_Unselected: Color;
	ModuleColor_SubUV_Selected: Color;
	ModuleColor_Required_Unselected: Color;
	ModuleColor_Required_Selected: Color;
	ModuleColor_Event_Unselected: Color;
	ModuleColor_Event_Selected: Color;
	bShowGrid: boolean;
	GridColor_Hi: Color;
	GridColor_Low: Color;
	GridPerspectiveSize: number;
	bShowParticleCounts: boolean;
	bShowParticleEvents: boolean;
	bShowParticleTimes: boolean;
	bShowParticleDistance: boolean;
	bShowParticleMemory: boolean;
	ParticleMemoryUpdateTime: number;
	bShowFloor: boolean;
	FloorMesh: string;
	FloorPosition: Vector;
	FloorRotation: Rotator;
	FloorScale: number;
	FloorScale3D: Vector;
	ShowPPFlags: number;
	bUseSlimCascadeDraw: boolean;
	SlimCascadeDrawHeight: number;
	bCenterCascadeModuleText: boolean;
	Cascade_MouseMoveThreshold: number;
	MotionModeRadius: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CascadeOptions;
	static Find(Outer: UObject, ResourceName: string): CascadeOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CascadeOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CascadeOptions;
	static C(Other: UObject): CascadeOptions;
}

declare class ChunkDependency { 
	ChunkID: number;
	ParentChunkID: number;
	clone() : ChunkDependency;
	static C(Other: UObject): ChunkDependency;
}

declare class ChunkDependencyInfo extends UObject { 
	DependencyArray: ChunkDependency[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ChunkDependencyInfo;
	static Find(Outer: UObject, ResourceName: string): ChunkDependencyInfo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ChunkDependencyInfo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChunkDependencyInfo;
	static C(Other: UObject): ChunkDependencyInfo;
}

declare class CompressAnimationsCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CompressAnimationsCommandlet;
	static Find(Outer: UObject, ResourceName: string): CompressAnimationsCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CompressAnimationsCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressAnimationsCommandlet;
	static C(Other: UObject): CompressAnimationsCommandlet;
}

declare class CompressionHolder extends UObject { 
	Compression: AnimCompress;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CompressionHolder;
	static Find(Outer: UObject, ResourceName: string): CompressionHolder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CompressionHolder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressionHolder;
	static C(Other: UObject): CompressionHolder;
}

declare class ContentBrowserSettings extends UObject { 
	NumObjectsToLoadBeforeWarning: number;
	RealTimeThumbnails: boolean;
	DisplayFolders: boolean;
	DisplayEngineFolder: boolean;
	DisplayDevelopersFolder: boolean;
	DisplayL10NFolder: boolean;
	DisplayPluginFolders: boolean;
	DisplayCollections: boolean;
	DisplayCppFolders: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ContentBrowserSettings;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ContentBrowserSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserSettings;
	static C(Other: UObject): ContentBrowserSettings;
}

declare class CookCommandlet extends Commandlet { 
	FullGCAssetClassNames: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CookCommandlet;
	static Find(Outer: UObject, ResourceName: string): CookCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CookCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookCommandlet;
	static C(Other: UObject): CookCommandlet;
}

declare class DeveloperSettings extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DeveloperSettings;
	static Find(Outer: UObject, ResourceName: string): DeveloperSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DeveloperSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeveloperSettings;
	static C(Other: UObject): DeveloperSettings;
}

declare class CookerSettings extends DeveloperSettings { 
	bEnableCookOnTheSide: boolean;
	bEnableBuildDDCInBackground: boolean;
	bIterativeCookingForLaunchOn: boolean;
	bCompileBlueprintsInDevelopmentMode: boolean;
	bCookBlueprintComponentTemplateData: boolean;
	ClassesExcludedOnDedicatedServer: string[];
	ClassesExcludedOnDedicatedClient: string[];
	DefaultPVRTCQuality: number;
	DefaultASTCQualityBySpeed: number;
	DefaultASTCQualityBySize: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CookerSettings;
	static Find(Outer: UObject, ResourceName: string): CookerSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CookerSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerSettings;
	static C(Other: UObject): CookerSettings;
}

declare class CookOnTheFlyServer extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CookOnTheFlyServer;
	static Find(Outer: UObject, ResourceName: string): CookOnTheFlyServer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CookOnTheFlyServer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookOnTheFlyServer;
	static C(Other: UObject): CookOnTheFlyServer;
}

declare class CrashReporterSettings extends UObject { 
	UploadSymbolsPath: string;
	DownstreamStorage: string;
	RemoteStorage: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CrashReporterSettings;
	static Find(Outer: UObject, ResourceName: string): CrashReporterSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CrashReporterSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReporterSettings;
	static C(Other: UObject): CrashReporterSettings;
}

declare type ECurveEditorCurveVisibility = 'AllCurves' | 'SelectedCurves' | 'AnimatedCurves';
declare var ECurveEditorCurveVisibility : { AllCurves:'AllCurves',SelectedCurves:'SelectedCurves',AnimatedCurves:'AnimatedCurves', };
declare type ECurveEditorTangentVisibility = 'AllTangents' | 'SelectedKeys' | 'NoTangents';
declare var ECurveEditorTangentVisibility : { AllTangents:'AllTangents',SelectedKeys:'SelectedKeys',NoTangents:'NoTangents', };
declare class CurveEditorSettings extends UObject { 
	bAutoFrameCurveEditor: boolean;
	bShowCurveEditorCurveToolTips: boolean;
	CurveVisibility: ECurveEditorCurveVisibility;
	TangentVisibility: ECurveEditorTangentVisibility;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveEditorSettings;
	static Find(Outer: UObject, ResourceName: string): CurveEditorSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveEditorSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorSettings;
	static C(Other: UObject): CurveEditorSettings;
}

declare class CurveEdOptions extends UObject { 
	MinViewRange: number;
	MaxViewRange: number;
	BackgroundColor: LinearColor;
	LabelColor: LinearColor;
	SelectedLabelColor: LinearColor;
	GridColor: LinearColor;
	GridTextColor: LinearColor;
	LabelBlockBkgColor: LinearColor;
	SelectedKeyColor: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveEdOptions;
	static Find(Outer: UObject, ResourceName: string): CurveEdOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveEdOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdOptions;
	static C(Other: UObject): CurveEdOptions;
}

declare class DebugSkelMeshComponent extends SkeletalMeshComponent { 
	bRenderRawSkeleton: boolean;
	bDrawMesh: boolean;
	bShowBoneNames: boolean;
	bDrawBoneInfluences: boolean;
	bDrawMorphTargetVerts: boolean;
	bDrawNormals: boolean;
	bDrawTangents: boolean;
	bDrawBinormals: boolean;
	bDrawSockets: boolean;
	bSkeletonSocketsVisible: boolean;
	bMeshSocketsVisible: boolean;
	bDisplayRawAnimation: boolean;
	bDisplayNonRetargetedPose: boolean;
	bDisplayAdditiveBasePose: boolean;
	bDisplayBakedAnimation: boolean;
	bDisplaySourceAnimation: boolean;
	bDisplayBound: boolean;
	bPreviewRootMotion: boolean;
	BonesOfInterest: number[];
	MorphTargetOfInterests: MorphTarget[];
	SkelMaterials: MaterialInterface[];
	PreviewInstance: AnimPreviewInstance;
	SavedAnimScriptInstance: AnimInstance;
	bIsUsingInGameBounds: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DebugSkelMeshComponent;
	static Find(Outer: UObject, ResourceName: string): DebugSkelMeshComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DebugSkelMeshComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugSkelMeshComponent;
	static C(Other: UObject): DebugSkelMeshComponent;
}

declare class UnrealEdTypes extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UnrealEdTypes;
	static Find(Outer: UObject, ResourceName: string): UnrealEdTypes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UnrealEdTypes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdTypes;
	static C(Other: UObject): UnrealEdTypes;
}

declare class DEditorParameterValue extends UObject { 
	bOverride: boolean;
	ParameterName: string;
	ExpressionId: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorParameterValue;
	static C(Other: UObject): DEditorParameterValue;
}

declare class DFontParameters { 
	FontValue: Font;
	FontPage: number;
	clone() : DFontParameters;
	static C(Other: UObject): DFontParameters;
}

declare class DEditorFontParameterValue extends DEditorParameterValue { 
	ParameterValue: DFontParameters;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorFontParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorFontParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorFontParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorFontParameterValue;
	static C(Other: UObject): DEditorFontParameterValue;
}

declare class DEditorScalarParameterValue extends DEditorParameterValue { 
	ParameterValue: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorScalarParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorScalarParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorScalarParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorScalarParameterValue;
	static C(Other: UObject): DEditorScalarParameterValue;
}

declare class DComponentMaskParameter { 
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	clone() : DComponentMaskParameter;
	static C(Other: UObject): DComponentMaskParameter;
}

declare class DEditorStaticComponentMaskParameterValue extends DEditorParameterValue { 
	ParameterValue: DComponentMaskParameter;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorStaticComponentMaskParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticComponentMaskParameterValue;
	static C(Other: UObject): DEditorStaticComponentMaskParameterValue;
}

declare class DEditorStaticSwitchParameterValue extends DEditorParameterValue { 
	ParameterValue: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorStaticSwitchParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticSwitchParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorStaticSwitchParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticSwitchParameterValue;
	static C(Other: UObject): DEditorStaticSwitchParameterValue;
}

declare class DEditorTextureParameterValue extends DEditorParameterValue { 
	ParameterValue: Texture;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorTextureParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorTextureParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorTextureParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorTextureParameterValue;
	static C(Other: UObject): DEditorTextureParameterValue;
}

declare class DEditorVectorParameterValue extends DEditorParameterValue { 
	ParameterValue: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DEditorVectorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorVectorParameterValue;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DEditorVectorParameterValue;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorVectorParameterValue;
	static C(Other: UObject): DEditorVectorParameterValue;
}

declare class DerivedDataCacheCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DerivedDataCacheCommandlet;
	static Find(Outer: UObject, ResourceName: string): DerivedDataCacheCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DerivedDataCacheCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DerivedDataCacheCommandlet;
	static C(Other: UObject): DerivedDataCacheCommandlet;
}

declare class DestructableMeshEditorSettings extends UObject { 
	AnimPreviewFloorColor: Color;
	AnimPreviewSkyColor: Color;
	AnimPreviewSkyBrightness: number;
	AnimPreviewLightBrightness: number;
	AnimPreviewLightingDirection: Rotator;
	AnimPreviewDirectionalColor: Color;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DestructableMeshEditorSettings;
	static Find(Outer: UObject, ResourceName: string): DestructableMeshEditorSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructableMeshEditorSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructableMeshEditorSettings;
	static C(Other: UObject): DestructableMeshEditorSettings;
}

declare class DiffAssetsCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DiffAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffAssetsCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DiffAssetsCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffAssetsCommandlet;
	static C(Other: UObject): DiffAssetsCommandlet;
}

declare class DiffFilesCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DiffFilesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffFilesCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DiffFilesCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffFilesCommandlet;
	static C(Other: UObject): DiffFilesCommandlet;
}

declare class DiffPackagesCommandlet extends Commandlet { 
	Packages: Package;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DiffPackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffPackagesCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DiffPackagesCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffPackagesCommandlet;
	static C(Other: UObject): DiffPackagesCommandlet;
}

declare class DumpBlueprintsInfoCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DumpBlueprintsInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpBlueprintsInfoCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DumpBlueprintsInfoCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpBlueprintsInfoCommandlet;
	static C(Other: UObject): DumpBlueprintsInfoCommandlet;
}

declare class DumpHiddenCategoriesCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DumpHiddenCategoriesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpHiddenCategoriesCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DumpHiddenCategoriesCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpHiddenCategoriesCommandlet;
	static C(Other: UObject): DumpHiddenCategoriesCommandlet;
}

declare type ECommentBoxMode = 'GroupMovement' | 'NoGroupMovement';
declare var ECommentBoxMode : { GroupMovement:'GroupMovement',NoGroupMovement:'NoGroupMovement', };
declare class EdGraphNode_Comment extends EdGraphNode { 
	CommentColor: LinearColor;
	bColorCommentBubble: boolean;
	MoveMode: ECommentBoxMode;
	CommentDepth: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EdGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Comment;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EdGraphNode_Comment;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Comment;
	static C(Other: UObject): EdGraphNode_Comment;
}

declare class MaterialGraphNode_Base extends EdGraphNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Base;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialGraphNode_Base;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Base;
	static C(Other: UObject): MaterialGraphNode_Base;
}

declare class MaterialGraphNode_Root extends MaterialGraphNode_Base { 
	Material: Material;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Root;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialGraphNode_Root;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Root;
	static C(Other: UObject): MaterialGraphNode_Root;
}

declare class MaterialGraph extends EdGraph { 
	Material: Material;
	MaterialFunction: MaterialFunction;
	RootNode: MaterialGraphNode_Root;
	OriginalMaterialFullName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialGraph;
	static Find(Outer: UObject, ResourceName: string): MaterialGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraph;
	static C(Other: UObject): MaterialGraph;
}

declare class MaterialGraphNode_Comment extends EdGraphNode_Comment { 
	MaterialExpressionComment: MaterialExpressionComment;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Comment;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialGraphNode_Comment;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Comment;
	static C(Other: UObject): MaterialGraphNode_Comment;
}

declare class EditorActorFolders extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorActorFolders;
	static Find(Outer: UObject, ResourceName: string): EditorActorFolders;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorActorFolders;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorActorFolders;
	static C(Other: UObject): EditorActorFolders;
}

declare class EditorAnimBaseObj extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorAnimBaseObj;
	static Find(Outer: UObject, ResourceName: string): EditorAnimBaseObj;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorAnimBaseObj;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimBaseObj;
	static C(Other: UObject): EditorAnimBaseObj;
}

declare class EditorAnimCompositeSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorAnimCompositeSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCompositeSegment;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorAnimCompositeSegment;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCompositeSegment;
	static C(Other: UObject): EditorAnimCompositeSegment;
}

declare class EditorAnimSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorAnimSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimSegment;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorAnimSegment;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimSegment;
	static C(Other: UObject): EditorAnimSegment;
}

declare class EditorCompositeSection extends EditorAnimBaseObj { 
	CompositeSection: CompositeSection;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorCompositeSection;
	static Find(Outer: UObject, ResourceName: string): EditorCompositeSection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorCompositeSection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorCompositeSection;
	static C(Other: UObject): EditorCompositeSection;
}

declare class EditorNotifyObject extends EditorAnimBaseObj { 
	Event: AnimNotifyEvent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorNotifyObject;
	static Find(Outer: UObject, ResourceName: string): EditorNotifyObject;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorNotifyObject;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorNotifyObject;
	static C(Other: UObject): EditorNotifyObject;
}

declare class EditorBrushBuilder extends BrushBuilder { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorBrushBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorBrushBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorBrushBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorBrushBuilder;
	static C(Other: UObject): EditorBrushBuilder;
}

declare class ConeBuilder extends EditorBrushBuilder { 
	Z: number;
	CapZ: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ConeBuilder;
	static Find(Outer: UObject, ResourceName: string): ConeBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ConeBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConeBuilder;
	static C(Other: UObject): ConeBuilder;
}

declare class CubeBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	Z: number;
	WallThickness: number;
	GroupName: string;
	Hollow: boolean;
	Tessellated: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CubeBuilder;
	static Find(Outer: UObject, ResourceName: string): CubeBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CubeBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CubeBuilder;
	static C(Other: UObject): CubeBuilder;
}

declare class CurvedStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepHeight: number;
	StepWidth: number;
	AngleOfCurve: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	CounterClockwise: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurvedStairBuilder;
	static Find(Outer: UObject, ResourceName: string): CurvedStairBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurvedStairBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurvedStairBuilder;
	static C(Other: UObject): CurvedStairBuilder;
}

declare class CylinderBuilder extends EditorBrushBuilder { 
	Z: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CylinderBuilder;
	static Find(Outer: UObject, ResourceName: string): CylinderBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CylinderBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CylinderBuilder;
	static C(Other: UObject): CylinderBuilder;
}

declare class LinearStairBuilder extends EditorBrushBuilder { 
	StepLength: number;
	StepHeight: number;
	StepWidth: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LinearStairBuilder;
	static Find(Outer: UObject, ResourceName: string): LinearStairBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LinearStairBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinearStairBuilder;
	static C(Other: UObject): LinearStairBuilder;
}

declare type ESheetAxis = 'AX_Horizontal' | 'AX_XAxis' | 'AX_YAxis';
declare var ESheetAxis : { AX_Horizontal:'AX_Horizontal',AX_XAxis:'AX_XAxis',AX_YAxis:'AX_YAxis', };
declare class SheetBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	XSegments: number;
	YSegments: number;
	Axis: ESheetAxis;
	GroupName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SheetBuilder;
	static Find(Outer: UObject, ResourceName: string): SheetBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SheetBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SheetBuilder;
	static C(Other: UObject): SheetBuilder;
}

declare class SpiralStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepWidth: number;
	StepHeight: number;
	StepThickness: number;
	NumStepsPer360: number;
	NumSteps: number;
	GroupName: string;
	SlopedCeiling: boolean;
	SlopedFloor: boolean;
	CounterClockwise: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SpiralStairBuilder;
	static Find(Outer: UObject, ResourceName: string): SpiralStairBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SpiralStairBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpiralStairBuilder;
	static C(Other: UObject): SpiralStairBuilder;
}

declare class TetrahedronBuilder extends EditorBrushBuilder { 
	Radius: number;
	SphereExtrapolation: number;
	GroupName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TetrahedronBuilder;
	static Find(Outer: UObject, ResourceName: string): TetrahedronBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TetrahedronBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TetrahedronBuilder;
	static C(Other: UObject): TetrahedronBuilder;
}

declare class VolumetricBuilder extends EditorBrushBuilder { 
	Z: number;
	Radius: number;
	NumSheets: number;
	GroupName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VolumetricBuilder;
	static Find(Outer: UObject, ResourceName: string): VolumetricBuilder;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VolumetricBuilder;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricBuilder;
	static C(Other: UObject): VolumetricBuilder;
}

declare type EFbxExportCompatibility = 'FBX_2010' | 'FBX_2011' | 'FBX_2012' | 'FBX_2013' | 'FBX_2014' | 'FBX_2016';
declare var EFbxExportCompatibility : { FBX_2010:'FBX_2010',FBX_2011:'FBX_2011',FBX_2012:'FBX_2012',FBX_2013:'FBX_2013',FBX_2014:'FBX_2014',FBX_2016:'FBX_2016', };
declare class EditorPerProjectUserSettings extends UObject { 
	bDisplayUIExtensionPoints: boolean;
	bDisplayDocumentationLink: boolean;
	bDisplayActionListItemRefIds: boolean;
	bAlwaysGatherBehaviorTreeDebuggerData: boolean;
	bDisplayEngineVersionInBadge: boolean;
	bUseSimplygonSwarm: boolean;
	SimplygonServerIP: string;
	bEnableSwarmDebugging: boolean;
	SimplygonSwarmDelay: any;
	SwarmNumOfConcurrentJobs: any;
	SwarmMaxUploadChunkSizeInMB: any;
	SwarmIntermediateFolder: string;
	bShowFrameRateAndMemory: boolean;
	bThrottleCPUWhenNotForeground: boolean;
	bMonitorEditorPerformance: boolean;
	bAutomaticallyHotReloadNewClasses: boolean;
	bShowCompilerLogOnCompileError: boolean;
	bKeepAttachHierarchy: boolean;
	bMapSkeletalMotionToRoot: boolean;
	FbxExportCompatibility: EFbxExportCompatibility;
	bFbxExportCollisionMesh: boolean;
	bUseCurvesForDistributions: boolean;
	PropertyMatrix_NumberOfPasteOperationsBeforeWarning: number;
	bSCSEditorShowGrid: boolean;
	bSCSEditorShowFloor: boolean;
	SCSViewportCameraSpeed: number;
	bAutoloadCheckedOutPackages: boolean;
	bSuppressFullyLoadPrompt: boolean;
	bAllowSelectTranslucent: boolean;
	BlueprintFavorites: BlueprintPaletteFavorites;
	AssetViewerProfileIndex: number;
	MaterialQualityLevel: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorPerProjectUserSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerProjectUserSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorPerProjectUserSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerProjectUserSettings;
	static C(Other: UObject): EditorPerProjectUserSettings;
}

declare class JavascriptTransaction { 
	clone() : JavascriptTransaction;
	static C(Other: UObject): JavascriptTransaction;
	GetContext(): string;
	GetPrimaryObject(): UObject;
	GetTitle(): string;
	static GetContext(Transaction: JavascriptTransaction): string;
	static GetPrimaryObject(Transaction: JavascriptTransaction): UObject;
	static GetTitle(Transaction: JavascriptTransaction): string;
}

declare class Transactor extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Transactor;
	static Find(Outer: UObject, ResourceName: string): Transactor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Transactor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Transactor;
	static C(Other: UObject): Transactor;
	GetQueueLength(): number;
	GetTransaction(QueueIndex: number): JavascriptTransaction;
	IsActive(): boolean;
	static GetQueueLength(Transactor: Transactor): number;
	static GetTransaction(Transactor: Transactor,QueueIndex: number): JavascriptTransaction;
	static IsActive(Transactor: Transactor): boolean;
}

declare type ELabelAnchorMode = 'LabelAnchorMode_TopLeft' | 'LabelAnchorMode_TopCenter' | 'LabelAnchorMode_TopRight' | 'LabelAnchorMode_CenterLeft' | 'LabelAnchorMode_Centered' | 'LabelAnchorMode_CenterRight' | 'LabelAnchorMode_BottomLeft' | 'LabelAnchorMode_BottomCenter' | 'LabelAnchorMode_BottomRight';
declare var ELabelAnchorMode : { LabelAnchorMode_TopLeft:'LabelAnchorMode_TopLeft',LabelAnchorMode_TopCenter:'LabelAnchorMode_TopCenter',LabelAnchorMode_TopRight:'LabelAnchorMode_TopRight',LabelAnchorMode_CenterLeft:'LabelAnchorMode_CenterLeft',LabelAnchorMode_Centered:'LabelAnchorMode_Centered',LabelAnchorMode_CenterRight:'LabelAnchorMode_CenterRight',LabelAnchorMode_BottomLeft:'LabelAnchorMode_BottomLeft',LabelAnchorMode_BottomCenter:'LabelAnchorMode_BottomCenter',LabelAnchorMode_BottomRight:'LabelAnchorMode_BottomRight', };
declare type EPlayOnBuildMode = 'PlayOnBuild_Always' | 'PlayOnBuild_Never' | 'PlayOnBuild_Default';
declare var EPlayOnBuildMode : { PlayOnBuild_Always:'PlayOnBuild_Always',PlayOnBuild_Never:'PlayOnBuild_Never',PlayOnBuild_Default:'PlayOnBuild_Default', };
declare type EPlayOnLaunchConfiguration = 'LaunchConfig_Default' | 'LaunchConfig_Debug' | 'LaunchConfig_Development' | 'LaunchConfig_Test' | 'LaunchConfig_Shipping';
declare var EPlayOnLaunchConfiguration : { LaunchConfig_Default:'LaunchConfig_Default',LaunchConfig_Debug:'LaunchConfig_Debug',LaunchConfig_Development:'LaunchConfig_Development',LaunchConfig_Test:'LaunchConfig_Test',LaunchConfig_Shipping:'LaunchConfig_Shipping', };
declare type EPlayNetMode = 'PIE_Standalone' | 'PIE_ListenServer' | 'PIE_Client';
declare var EPlayNetMode : { PIE_Standalone:'PIE_Standalone',PIE_ListenServer:'PIE_ListenServer',PIE_Client:'PIE_Client', };
declare type ELaunchModeType = 'LaunchMode_OnDevice';
declare var ELaunchModeType : { LaunchMode_OnDevice:'LaunchMode_OnDevice', };
declare type EPlayModeLocations = 'PlayLocation_CurrentCameraLocation' | 'PlayLocation_DefaultPlayerStart';
declare var EPlayModeLocations : { PlayLocation_CurrentCameraLocation:'PlayLocation_CurrentCameraLocation',PlayLocation_DefaultPlayerStart:'PlayLocation_DefaultPlayerStart', };
declare type EPlayModeType = 'PlayMode_InViewPort' | 'PlayMode_InEditorFloating' | 'PlayMode_InMobilePreview' | 'PlayMode_InVulkanPreview' | 'PlayMode_InNewProcess' | 'PlayMode_InVR' | 'PlayMode_Simulate' | 'PlayMode_Count';
declare var EPlayModeType : { PlayMode_InViewPort:'PlayMode_InViewPort',PlayMode_InEditorFloating:'PlayMode_InEditorFloating',PlayMode_InMobilePreview:'PlayMode_InMobilePreview',PlayMode_InVulkanPreview:'PlayMode_InVulkanPreview',PlayMode_InNewProcess:'PlayMode_InNewProcess',PlayMode_InVR:'PlayMode_InVR',PlayMode_Simulate:'PlayMode_Simulate',PlayMode_Count:'PlayMode_Count', };
declare class PlayScreenResolution { 
	Description: string;
	Width: number;
	Height: number;
	AspectRatio: string;
	clone() : PlayScreenResolution;
	static C(Other: UObject): PlayScreenResolution;
}

declare class LevelEditorPlaySettings extends UObject { 
	PlayFromHerePlayerStartClassName: string;
	GameGetsMouseControl: boolean;
	ShowMouseControlLabel: boolean;
	MouseControlLabelPosition: ELabelAnchorMode;
	ViewportGetsHMDControl: boolean;
	AutoRecompileBlueprints: boolean;
	EnableSound: boolean;
	PlayInEditorSoundQualityLevel: number;
	bOnlyLoadVisibleLevelsInPIE: boolean;
	bPreferToStreamLevelsInPIE: boolean;
	PIEAlwaysOnTop: boolean;
	NewWindowWidth: number;
	NewWindowHeight: number;
	NewWindowPosition: IntPoint;
	CenterNewWindow: boolean;
	StandaloneWindowWidth: number;
	StandaloneWindowHeight: number;
	StandaloneWindowPosition: IntPoint;
	CenterStandaloneWindow: boolean;
	DisableStandaloneSound: boolean;
	AdditionalLaunchParameters: string;
	BuildGameBeforeLaunch: EPlayOnBuildMode;
	LaunchConfiguration: EPlayOnLaunchConfiguration;
	bAutoCompileBlueprintsOnLaunch: boolean;
	PlayNetMode: EPlayNetMode;
	RunUnderOneProcess: boolean;
	PlayNetDedicated: boolean;
	PlayNumberOfClients: number;
	ClientWindowWidth: number;
	AutoConnectToServer: boolean;
	RouteGamepadToSecondWindow: boolean;
	CreateAudioDeviceForEveryPlayer: boolean;
	ClientWindowHeight: number;
	AdditionalServerGameOptions: string;
	AdditionalLaunchOptions: string;
	MultipleInstanceLastHeight: number;
	MultipleInstanceLastWidth: number;
	MultipleInstancePositions: IntPoint[];
	LastExecutedLaunchDevice: string;
	LastExecutedLaunchName: string;
	LastExecutedLaunchModeType: ELaunchModeType;
	LastExecutedPlayModeLocation: EPlayModeLocations;
	LastExecutedPlayModeType: EPlayModeType;
	LaptopScreenResolutions: PlayScreenResolution[];
	MonitorScreenResolutions: PlayScreenResolution[];
	PhoneScreenResolutions: PlayScreenResolution[];
	TabletScreenResolutions: PlayScreenResolution[];
	TelevisionScreenResolutions: PlayScreenResolution[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelEditorPlaySettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorPlaySettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelEditorPlaySettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorPlaySettings;
	static C(Other: UObject): LevelEditorPlaySettings;
}

declare type EWASDType = 'WASD_Always' | 'WASD_RMBOnly' | 'WASD_Never';
declare var EWASDType : { WASD_Always:'WASD_Always',WASD_RMBOnly:'WASD_RMBOnly',WASD_Never:'WASD_Never', };
declare type ELandscapeFoliageEditorControlType = 'IgnoreCtrl' | 'RequireCtrl' | 'RequireNoCtrl';
declare var ELandscapeFoliageEditorControlType : { IgnoreCtrl:'IgnoreCtrl',RequireCtrl:'RequireCtrl',RequireNoCtrl:'RequireNoCtrl', };
declare type EScrollGestureDirection = 'UseSystemSetting' | 'Standard' | 'Natural';
declare var EScrollGestureDirection : { UseSystemSetting:'UseSystemSetting',Standard:'Standard',Natural:'Natural', };
declare class SnapToSurfaceSettings { 
	bEnabled: boolean;
	SnapOffsetExtent: number;
	bSnapRotation: boolean;
	clone() : SnapToSurfaceSettings;
	static C(Other: UObject): SnapToSurfaceSettings;
}

declare type ERotationGridMode = 'GridMode_DivisionsOf360' | 'GridMode_Common';
declare var ERotationGridMode : { GridMode_DivisionsOf360:'GridMode_DivisionsOf360',GridMode_Common:'GridMode_Common', };
declare type EMeasuringToolUnits = 'MeasureUnits_Centimeters' | 'MeasureUnits_Meters' | 'MeasureUnits_Kilometers';
declare var EMeasuringToolUnits : { MeasureUnits_Centimeters:'MeasureUnits_Centimeters',MeasureUnits_Meters:'MeasureUnits_Meters',MeasureUnits_Kilometers:'MeasureUnits_Kilometers', };
declare type ELevelViewportType = 'LVT_OrthoXY' | 'LVT_OrthoXZ' | 'LVT_OrthoYZ' | 'LVT_Perspective' | 'LVT_OrthoFreelook' | 'LVT_OrthoNegativeXY' | 'LVT_OrthoNegativeXZ' | 'LVT_OrthoNegativeYZ' | 'LVT_MAX' | 'LVT_None' | 'None';
declare var ELevelViewportType : { LVT_OrthoXY:'LVT_OrthoXY',LVT_OrthoXZ:'LVT_OrthoXZ',LVT_OrthoYZ:'LVT_OrthoYZ',LVT_Perspective:'LVT_Perspective',LVT_OrthoFreelook:'LVT_OrthoFreelook',LVT_OrthoNegativeXY:'LVT_OrthoNegativeXY',LVT_OrthoNegativeXZ:'LVT_OrthoNegativeXZ',LVT_OrthoNegativeYZ:'LVT_OrthoNegativeYZ',LVT_MAX:'LVT_MAX',LVT_None:'LVT_None',None:'None', };
declare type EViewModeIndex = 'VMI_BrushWireframe' | 'VMI_Wireframe' | 'VMI_Unlit' | 'VMI_Lit' | 'VMI_Lit_DetailLighting' | 'VMI_LightingOnly' | 'VMI_LightComplexity' | 'VMI_ShaderComplexity' | 'VMI_LightmapDensity' | 'VMI_LitLightmapDensity' | 'VMI_ReflectionOverride' | 'VMI_VisualizeBuffer' | 'VMI_StationaryLightOverlap' | 'VMI_CollisionPawn' | 'VMI_CollisionVisibility' | 'VMI_LODColoration' | 'VMI_QuadOverdraw' | 'VMI_PrimitiveDistanceAccuracy' | 'VMI_MeshUVDensityAccuracy' | 'VMI_ShaderComplexityWithQuadOverdraw' | 'VMI_HLODColoration' | 'VMI_GroupLODColoration' | 'VMI_MaterialTextureScaleAccuracy' | 'VMI_Max' | 'VMI_Unknown' | 'None';
declare var EViewModeIndex : { VMI_BrushWireframe:'VMI_BrushWireframe',VMI_Wireframe:'VMI_Wireframe',VMI_Unlit:'VMI_Unlit',VMI_Lit:'VMI_Lit',VMI_Lit_DetailLighting:'VMI_Lit_DetailLighting',VMI_LightingOnly:'VMI_LightingOnly',VMI_LightComplexity:'VMI_LightComplexity',VMI_ShaderComplexity:'VMI_ShaderComplexity',VMI_LightmapDensity:'VMI_LightmapDensity',VMI_LitLightmapDensity:'VMI_LitLightmapDensity',VMI_ReflectionOverride:'VMI_ReflectionOverride',VMI_VisualizeBuffer:'VMI_VisualizeBuffer',VMI_StationaryLightOverlap:'VMI_StationaryLightOverlap',VMI_CollisionPawn:'VMI_CollisionPawn',VMI_CollisionVisibility:'VMI_CollisionVisibility',VMI_LODColoration:'VMI_LODColoration',VMI_QuadOverdraw:'VMI_QuadOverdraw',VMI_PrimitiveDistanceAccuracy:'VMI_PrimitiveDistanceAccuracy',VMI_MeshUVDensityAccuracy:'VMI_MeshUVDensityAccuracy',VMI_ShaderComplexityWithQuadOverdraw:'VMI_ShaderComplexityWithQuadOverdraw',VMI_HLODColoration:'VMI_HLODColoration',VMI_GroupLODColoration:'VMI_GroupLODColoration',VMI_MaterialTextureScaleAccuracy:'VMI_MaterialTextureScaleAccuracy',VMI_Max:'VMI_Max',VMI_Unknown:'VMI_Unknown',None:'None', };
declare class ExposureSettings { 
	LogOffset: number;
	bFixed: boolean;
	clone() : ExposureSettings;
	static C(Other: UObject): ExposureSettings;
}

declare class LevelEditorViewportInstanceSettings { 
	ViewportType: ELevelViewportType;
	PerspViewModeIndex: EViewModeIndex;
	OrthoViewModeIndex: EViewModeIndex;
	EditorShowFlagsString: string;
	GameShowFlagsString: string;
	BufferVisualizationMode: string;
	ExposureSettings: ExposureSettings;
	FOVAngle: number;
	FarViewPlane: number;
	bIsRealtime: boolean;
	bShowFPS: boolean;
	bShowStats: boolean;
	EnabledStats: string[];
	bShowFullToolbar: boolean;
	clone() : LevelEditorViewportInstanceSettings;
	static C(Other: UObject): LevelEditorViewportInstanceSettings;
}

declare class LevelEditorViewportInstanceSettingsKeyValuePair { 
	ConfigName: string;
	ConfigSettings: LevelEditorViewportInstanceSettings;
	clone() : LevelEditorViewportInstanceSettingsKeyValuePair;
	static C(Other: UObject): LevelEditorViewportInstanceSettingsKeyValuePair;
}

declare class LevelEditorViewportSettings extends UObject { 
	FlightCameraControlType: EWASDType;
	LandscapeEditorControlType: ELandscapeFoliageEditorControlType;
	FoliageEditorControlType: ELandscapeFoliageEditorControlType;
	bPanMovesCanvas: boolean;
	bCenterZoomAroundCursor: boolean;
	bAllowTranslateRotateZWidget: boolean;
	bClickBSPSelectsBrush: boolean;
	CameraSpeed: number;
	MouseScrollCameraSpeed: number;
	MouseSensitivty: number;
	bInvertMouseLookYAxis: boolean;
	bInvertOrbitYAxis: boolean;
	bInvertMiddleMousePan: boolean;
	bUseAbsoluteTranslation: boolean;
	bLevelStreamingVolumePrevis: boolean;
	bUseUE3OrbitControls: boolean;
	ScrollGestureDirectionFor3DViewports: EScrollGestureDirection;
	ScrollGestureDirectionForOrthoViewports: EScrollGestureDirection;
	bLevelEditorJoystickControls: boolean;
	bUsePowerOf2SnapSize: boolean;
	DecimalGridSizes: number[];
	DecimalGridIntervals: number[];
	Pow2GridSizes: number[];
	Pow2GridIntervals: number[];
	CommonRotGridSizes: number[];
	DivisionsOf360RotGridSizes: number[];
	ScalingGridSizes: number[];
	GridEnabled: boolean;
	RotGridEnabled: boolean;
	SnapScaleEnabled: boolean;
	SnapToSurface: SnapToSurfaceSettings;
	bUsePercentageBasedScaling: boolean;
	bEnableLayerSnap: boolean;
	ActiveSnapLayerIndex: number;
	bEnableActorSnap: boolean;
	ActorSnapScale: number;
	ActorSnapDistance: number;
	bSnapVertices: boolean;
	SnapDistance: number;
	CurrentPosGridSize: number;
	CurrentRotGridSize: number;
	CurrentScalingGridSize: number;
	PreserveNonUniformScale: boolean;
	CurrentRotGridMode: ERotationGridMode;
	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
	bEnableViewportHoverFeedback: boolean;
	bHighlightWithBrackets: boolean;
	bUseLinkedOrthographicViewports: boolean;
	bStrictBoxSelection: boolean;
	bTransparentBoxSelection: boolean;
	bUseSelectionOutline: boolean;
	SelectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	HoverHighlightIntensity: number;
	bEnableViewportCameraToUpdateFromPIV: boolean;
	bPreviewSelectedCameras: boolean;
	CameraPreviewSize: number;
	BackgroundDropDistance: number;
	PreviewMeshes: StringAssetReference[];
	BillboardScale: number;
	TransformWidgetSizeAdjustment: number;
	bSaveEngineStats: boolean;
	MeasuringToolUnits: EMeasuringToolUnits;
	PerInstanceSettings: LevelEditorViewportInstanceSettingsKeyValuePair[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelEditorViewportSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorViewportSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelEditorViewportSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorViewportSettings;
	static C(Other: UObject): LevelEditorViewportSettings;
}

declare type EWindowMode = 'Fullscreen' | 'WindowedFullscreen' | 'Windowed';
declare var EWindowMode : { Fullscreen:'Fullscreen',WindowedFullscreen:'WindowedFullscreen',Windowed:'Windowed', };
declare class GameUserSettings extends UObject { 
	bUseVSync: boolean;
	ResolutionSizeX: any;
	ResolutionSizeY: any;
	LastUserConfirmedResolutionSizeX: any;
	LastUserConfirmedResolutionSizeY: any;
	WindowPosX: number;
	WindowPosY: number;
	FullscreenMode: number;
	LastConfirmedFullscreenMode: number;
	PreferredFullscreenMode: number;
	Version: any;
	AudioQualityLevel: number;
	FrameRateLimit: number;
	DesiredScreenWidth: number;
	bUseDesiredScreenHeight: boolean;
	DesiredScreenHeight: number;
	LastRecommendedScreenWidth: number;
	LastRecommendedScreenHeight: number;
	LastCPUBenchmarkResult: number;
	LastGPUBenchmarkResult: number;
	LastCPUBenchmarkSteps: number[];
	LastGPUBenchmarkSteps: number[];
	LastGPUBenchmarkMultiplier: number;
	OnGameUserSettingsUINeedsUpdate: UnrealEngineMulticastDelegate<() => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GameUserSettings;
	static Find(Outer: UObject, ResourceName: string): GameUserSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GameUserSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameUserSettings;
	ValidateSettings(): void;
	SetVSyncEnabled(bEnable: boolean): void;
	SetVisualEffectQuality(Value: number): void;
	SetViewDistanceQuality(Value: number): void;
	SetToDefaults(): void;
	SetTextureQuality(Value: number): void;
	SetShadowQuality(Value: number): void;
	SetScreenResolution(Resolution: IntPoint): void;
	SetResolutionScaleValue(NewScaleValue: number): void;
	SetResolutionScaleValue_Deprecated(NewScaleValue: number): void;
	SetResolutionScaleNormalized(NewScaleNormalized: number): void;
	SetPostProcessingQuality(Value: number): void;
	SetOverallScalabilityLevel(Value: number): void;
	SetFullscreenMode(InFullscreenMode: EWindowMode): void;
	SetFrameRateLimit(NewLimit: number): void;
	SetFoliageQuality(Value: number): void;
	SetBenchmarkFallbackValues(): void;
	SetAudioQualityLevel(QualityLevel: number): void;
	SetAntiAliasingQuality(Value: number): void;
	SaveSettings(): void;
	RunHardwareBenchmark(WorkScale: number,CPUMultiplier: number,GPUMultiplier: number): void;
	RevertVideoMode(): void;
	ResetToCurrentSettings(): void;
	LoadSettings(bForceReload: boolean): void;
	IsVSyncEnabled(): boolean;
	IsVSyncDirty(): boolean;
	IsScreenResolutionDirty(): boolean;
	IsFullscreenModeDirty(): boolean;
	IsDirty(): boolean;
	GetVisualEffectQuality(): number;
	GetViewDistanceQuality(): number;
	GetTextureQuality(): number;
	GetShadowQuality(): number;
	GetScreenResolution(): IntPoint;
	GetResolutionScaleInformation(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetResolutionScaleInformation_Deprecated(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetPreferredFullscreenMode(): EWindowMode;
	GetPostProcessingQuality(): number;
	GetOverallScalabilityLevel(): number;
	GetLastConfirmedScreenResolution(): IntPoint;
	GetLastConfirmedFullscreenMode(): EWindowMode;
	static GetGameUserSettings(): GameUserSettings;
	GetFullscreenMode(): EWindowMode;
	GetFrameRateLimit(): number;
	GetFoliageQuality(): number;
	GetDesktopResolution(): IntPoint;
	static GetDefaultWindowPosition(): IntPoint;
	static GetDefaultWindowMode(): EWindowMode;
	GetDefaultResolutionScale(): number;
	static GetDefaultResolution(): IntPoint;
	GetAudioQualityLevel(): number;
	GetAntiAliasingQuality(): number;
	ConfirmVideoMode(): void;
	ApplySettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyResolutionSettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyNonResolutionSettings(): void;
	ApplyHardwareBenchmarkResults(): void;
	static C(Other: UObject): GameUserSettings;
}

declare class StatColorMapEntry { 
	In: number;
	Out: Color;
	clone() : StatColorMapEntry;
	static C(Other: UObject): StatColorMapEntry;
}

declare class StatColorMapping { 
	StatName: string;
	ColorMap: StatColorMapEntry[];
	DisableBlend: boolean;
	clone() : StatColorMapping;
	static C(Other: UObject): StatColorMapping;
}

declare class GameNameRedirect { 
	OldGameName: string;
	NewGameName: string;
	clone() : GameNameRedirect;
	static C(Other: UObject): GameNameRedirect;
}

declare class ClassRedirect { 
	ObjectName: string;
	OldClassName: string;
	NewClassName: string;
	OldSubobjName: string;
	NewSubobjName: string;
	NewClassClass: string;
	NewClassPackage: string;
	InstanceOnly: boolean;
	clone() : ClassRedirect;
	static C(Other: UObject): ClassRedirect;
}

declare class PluginRedirect { 
	OldPluginName: string;
	NewPluginName: string;
	clone() : PluginRedirect;
	static C(Other: UObject): PluginRedirect;
}

declare class StructRedirect { 
	OldStructName: string;
	NewStructName: string;
	clone() : StructRedirect;
	static C(Other: UObject): StructRedirect;
}

declare type ETransitionType = 'TT_None' | 'TT_Paused' | 'TT_Loading' | 'TT_Saving' | 'TT_Connecting' | 'TT_Precaching' | 'TT_WaitingToConnect';
declare var ETransitionType : { TT_None:'TT_None',TT_Paused:'TT_Paused',TT_Loading:'TT_Loading',TT_Saving:'TT_Saving',TT_Connecting:'TT_Connecting',TT_Precaching:'TT_Precaching',TT_WaitingToConnect:'TT_WaitingToConnect', };
declare class DropNoteInfo { 
	Location: Vector;
	Rotation: Rotator;
	Comment: string;
	clone() : DropNoteInfo;
	static C(Other: UObject): DropNoteInfo;
}

declare class RigidBodyErrorCorrection { 
	LinearDeltaThresholdSq: number;
	LinearInterpAlpha: number;
	LinearRecipFixTime: number;
	AngularDeltaThreshold: number;
	AngularInterpAlpha: number;
	AngularRecipFixTime: number;
	BodySpeedThresholdSq: number;
	clone() : RigidBodyErrorCorrection;
	static C(Other: UObject): RigidBodyErrorCorrection;
}

declare class NetDriverDefinition { 
	DefName: string;
	DriverClassName: string;
	DriverClassNameFallback: string;
	clone() : NetDriverDefinition;
	static C(Other: UObject): NetDriverDefinition;
}

declare class Engine extends UObject { 
	TinyFont: Font;
	TinyFontName: StringAssetReference;
	SmallFont: Font;
	SmallFontName: StringAssetReference;
	MediumFont: Font;
	MediumFontName: StringAssetReference;
	LargeFont: Font;
	LargeFontName: StringAssetReference;
	SubtitleFont: Font;
	SubtitleFontName: StringAssetReference;
	AdditionalFonts: Font[];
	AdditionalFontNames: string[];
	ConsoleClass: UnrealEngineClass;
	ConsoleClassName: StringClassReference;
	GameViewportClientClass: UnrealEngineClass;
	GameViewportClientClassName: StringClassReference;
	LocalPlayerClass: UnrealEngineClass;
	LocalPlayerClassName: StringClassReference;
	WorldSettingsClass: UnrealEngineClass;
	WorldSettingsClassName: StringClassReference;
	NavigationSystemClassName: StringClassReference;
	NavigationSystemClass: UnrealEngineClass;
	AvoidanceManagerClassName: StringClassReference;
	AvoidanceManagerClass: UnrealEngineClass;
	PhysicsCollisionHandlerClass: UnrealEngineClass;
	PhysicsCollisionHandlerClassName: StringClassReference;
	GameUserSettingsClassName: StringClassReference;
	GameUserSettingsClass: UnrealEngineClass;
	AIControllerClassName: StringClassReference;
	GameUserSettings: GameUserSettings;
	LevelScriptActorClass: UnrealEngineClass;
	LevelScriptActorClassName: StringClassReference;
	DefaultBlueprintBaseClassName: StringClassReference;
	GameSingletonClassName: StringClassReference;
	GameSingleton: UObject;
	DefaultTireType: TireType;
	DefaultTireTypeName: StringAssetReference;
	PlayOnConsoleSaveDir: string;
	DefaultTexture: Texture2D;
	DefaultTextureName: StringAssetReference;
	DefaultDiffuseTexture: Texture;
	DefaultDiffuseTextureName: StringAssetReference;
	DefaultBSPVertexTexture: Texture2D;
	DefaultBSPVertexTextureName: StringAssetReference;
	HighFrequencyNoiseTexture: Texture2D;
	HighFrequencyNoiseTextureName: StringAssetReference;
	DefaultBokehTexture: Texture2D;
	DefaultBokehTextureName: StringAssetReference;
	WireframeMaterial: Material;
	WireframeMaterialName: string;
	GeomMaterial: Material;
	GeomMaterialName: StringAssetReference;
	DebugMeshMaterial: Material;
	DebugMeshMaterialName: StringAssetReference;
	LevelColorationLitMaterial: Material;
	LevelColorationLitMaterialName: string;
	LevelColorationUnlitMaterial: Material;
	LevelColorationUnlitMaterialName: string;
	LightingTexelDensityMaterial: Material;
	LightingTexelDensityName: string;
	ShadedLevelColorationLitMaterial: Material;
	ShadedLevelColorationLitMaterialName: string;
	ShadedLevelColorationUnlitMaterial: Material;
	ShadedLevelColorationUnlitMaterialName: string;
	RemoveSurfaceMaterial: Material;
	RemoveSurfaceMaterialName: StringAssetReference;
	VertexColorMaterial: Material;
	VertexColorMaterialName: string;
	VertexColorViewModeMaterial_ColorOnly: Material;
	VertexColorViewModeMaterialName_ColorOnly: string;
	VertexColorViewModeMaterial_AlphaAsColor: Material;
	VertexColorViewModeMaterialName_AlphaAsColor: string;
	VertexColorViewModeMaterial_RedOnly: Material;
	VertexColorViewModeMaterialName_RedOnly: string;
	VertexColorViewModeMaterial_GreenOnly: Material;
	VertexColorViewModeMaterialName_GreenOnly: string;
	VertexColorViewModeMaterial_BlueOnly: Material;
	VertexColorViewModeMaterialName_BlueOnly: string;
	BoneWeightMaterial: Material;
	BoneWeightMaterialName: StringAssetReference;
	ConstraintLimitMaterial: Material;
	ConstraintLimitMaterialX: MaterialInstanceDynamic;
	ConstraintLimitMaterialXAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialY: MaterialInstanceDynamic;
	ConstraintLimitMaterialYAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialZ: MaterialInstanceDynamic;
	ConstraintLimitMaterialZAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialPrismatic: MaterialInstanceDynamic;
	InvalidLightmapSettingsMaterial: Material;
	InvalidLightmapSettingsMaterialName: StringAssetReference;
	PreviewShadowsIndicatorMaterial: Material;
	PreviewShadowsIndicatorMaterialName: StringAssetReference;
	ArrowMaterial: Material;
	ArrowMaterialName: StringAssetReference;
	LightingOnlyBrightness: LinearColor;
	ShaderComplexityColors: LinearColor[];
	QuadComplexityColors: LinearColor[];
	LightComplexityColors: LinearColor[];
	StationaryLightOverlapColors: LinearColor[];
	LODColorationColors: LinearColor[];
	HLODColorationColors: LinearColor[];
	StreamingAccuracyColors: LinearColor[];
	MaxPixelShaderAdditiveComplexityCount: number;
	MaxES2PixelShaderAdditiveComplexityCount: number;
	MinLightMapDensity: number;
	IdealLightMapDensity: number;
	MaxLightMapDensity: number;
	bRenderLightMapDensityGrayscale: boolean;
	RenderLightMapDensityGrayscaleScale: number;
	RenderLightMapDensityColorScale: number;
	LightMapDensityVertexMappedColor: LinearColor;
	LightMapDensitySelectedColor: LinearColor;
	StatColorMappings: StatColorMapping[];
	EditorBrushMaterial: Material;
	EditorBrushMaterialName: StringAssetReference;
	DefaultPhysMaterial: PhysicalMaterial;
	DefaultPhysMaterialName: StringAssetReference;
	ActiveGameNameRedirects: GameNameRedirect[];
	ActiveClassRedirects: ClassRedirect[];
	ActivePluginRedirects: PluginRedirect[];
	ActiveStructRedirects: StructRedirect[];
	PreIntegratedSkinBRDFTexture: Texture2D;
	PreIntegratedSkinBRDFTextureName: StringAssetReference;
	MiniFontTexture: Texture2D;
	MiniFontTextureName: StringAssetReference;
	WeightMapPlaceholderTexture: Texture;
	WeightMapPlaceholderTextureName: StringAssetReference;
	LightMapDensityTexture: Texture2D;
	LightMapDensityTextureName: StringAssetReference;
	GameViewport: GameViewportClient;
	DeferredCommands: string[];
	TickCycles: number;
	GameCycles: number;
	ClientCycles: number;
	NearClipPlane: number;
	bHardwareSurveyEnabled: boolean;
	bSubtitlesEnabled: boolean;
	bSubtitlesForcedOff: boolean;
	MaximumLoopIterationCount: number;
	bCanBlueprintsTickByDefault: boolean;
	bOptimizeAnimBlueprintMemberVariableAccess: boolean;
	bEnableEditorPSysRealtimeLOD: boolean;
	bSmoothFrameRate: boolean;
	bUseFixedFrameRate: boolean;
	FixedFrameRate: number;
	SmoothedFrameRateRange: FloatRange;
	bCheckForMultiplePawnsSpawnedInAFrame: boolean;
	NumPawnsAllowedToBeSpawnedInAFrame: number;
	bShouldGenerateLowQualityLightmaps: boolean;
	C_WorldBox: Color;
	C_BrushWire: Color;
	C_AddWire: Color;
	C_SubtractWire: Color;
	C_SemiSolidWire: Color;
	C_NonSolidWire: Color;
	C_WireBackground: Color;
	C_ScaleBoxHi: Color;
	C_VolumeCollision: Color;
	C_BSPCollision: Color;
	C_OrthoBackground: Color;
	C_Volume: Color;
	C_BrushShape: Color;
	StreamingDistanceFactor: number;
	TransitionType: ETransitionType;
	TransitionDescription: string;
	TransitionGameMode: string;
	MeshLODRange: number;
	bAllowMatureLanguage: boolean;
	CameraRotationThreshold: number;
	CameraTranslationThreshold: number;
	PrimitiveProbablyVisibleTime: number;
	MaxOcclusionPixelsFraction: number;
	bPauseOnLossOfFocus: boolean;
	MaxParticleResize: number;
	MaxParticleResizeWarn: number;
	PendingDroppedNotes: DropNoteInfo[];
	PhysicErrorCorrection: RigidBodyErrorCorrection;
	NetClientTicksPerSecond: number;
	DisplayGamma: number;
	MinDesiredFrameRate: number;
	DefaultSelectedMaterialColor: LinearColor;
	SelectedMaterialColor: LinearColor;
	SelectionOutlineColor: LinearColor;
	SubduedSelectionOutlineColor: LinearColor;
	SelectedMaterialColorOverride: LinearColor;
	bIsOverridingSelectedColor: boolean;
	bEnableOnScreenDebugMessages: boolean;
	bEnableOnScreenDebugMessagesDisplay: boolean;
	bSuppressMapWarnings: boolean;
	bDisableAILogging: boolean;
	bEnableVisualLogRecordingOnStart: any;
	ScreenSaverInhibitorSemaphore: number;
	bLockReadOnlyLevels: boolean;
	ParticleEventManagerClassPath: string;
	SelectionHighlightIntensity: number;
	SelectionMeshSectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	HoverHighlightIntensity: number;
	SelectionHighlightIntensityBillboards: number;
	NetDriverDefinitions: NetDriverDefinition[];
	ServerActors: string[];
	RuntimeServerActors: string[];
	bStartedLoadMapMovie: boolean;
	NextWorldContextHandle: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Engine;
	static Find(Outer: UObject, ResourceName: string): Engine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Engine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Engine;
	static C(Other: UObject): Engine;
	GetEditorWorld(): World;
	GetPIEWorld(): World;
	HasUndo(): boolean;
	SetClientTravel(InWorld: World,NextURL: string,InTravelType: ETravelType): void;
	static GetEditorWorld(Engine: Engine): World;
	static GetPIEWorld(Engine: Engine): World;
	static HasUndo(Engine: Engine): boolean;
	static SetClientTravel(Engine: Engine,InWorld: World,NextURL: string,InTravelType: ETravelType): void;
}

declare type ECsgOper = 'CSG_Active' | 'CSG_Add' | 'CSG_Subtract' | 'CSG_Intersect' | 'CSG_Deintersect' | 'CSG_None';
declare var ECsgOper : { CSG_Active:'CSG_Active',CSG_Add:'CSG_Add',CSG_Subtract:'CSG_Subtract',CSG_Intersect:'CSG_Intersect',CSG_Deintersect:'CSG_Deintersect',CSG_None:'CSG_None', };
declare class USelection extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): USelection;
	static Find(Outer: UObject, ResourceName: string): USelection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): USelection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): USelection;
	static C(Other: UObject): USelection;
	Deselect(InObject: UObject): void;
	DeselectAll(InClass: UnrealEngineClass): void;
	GetSelectedObjects(Out?: UObject[]): {Out: UObject[], $: number};
	Select(InObject: UObject): void;
	ToggleSelect(InObject: UObject): void;
	static Deselect(USelection: USelection,InObject: UObject): void;
	static DeselectAll(USelection: USelection,InClass: UnrealEngineClass): void;
	static GetSelectedObjects(USelection: USelection,Out?: UObject[]): {Out: UObject[], $: number};
	static Select(USelection: USelection,InObject: UObject): void;
	static ToggleSelect(USelection: USelection,InObject: UObject): void;
}

declare class GroupActor extends Actor { 
	bLocked: boolean;
	GroupActors: Actor[];
	SubGroups: GroupActor[];
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GroupActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GroupActor;
	static C(Other: UObject): GroupActor;
}

declare class EditorEngine extends Engine { 
	TempModel: Model;
	ConversionTempModel: Model;
	Trans: Transactor;
	Bad: Texture2D;
	EditorFont: Font;
	PreviewSoundCue: SoundCue;
	PreviewAudioComponent: AudioComponent;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorPlane: StaticMesh;
	EditorCylinder: StaticMesh;
	bFastRebuild: boolean;
	IsImportingT3D: boolean;
	ClickFlags: any;
	ParentContext: Package;
	UnsnappedClickLocation: Vector;
	ClickLocation: Vector;
	ClickPlane: Plane;
	MouseMovement: Vector;
	DetailMode: EDetailMode;
	UseSizingBox: boolean;
	UseAxisIndicator: boolean;
	GodMode: boolean;
	GameCommandLine: string;
	bShowBrushMarkerPolys: boolean;
	bEnableSocketSnapping: boolean;
	bEnableLODLocking: boolean;
	bGroupingActive: boolean;
	HeightMapExportClassName: string;
	ActorFactories: ActorFactory[];
	UserOpenedFile: string;
	InEditorGameURLOptions: string;
	PlayWorld: World;
	PlayWorldLocation: Vector;
	PlayWorldRotation: Rotator;
	bIsPlayWorldQueued: boolean;
	bIsToggleBetweenPIEandSIEQueued: boolean;
	bIsSimulateInEditorQueued: boolean;
	bAllowMultiplePIEWorlds: boolean;
	bRequestEndPlayMapQueued: boolean;
	bHasPlayWorldPlacement: boolean;
	bUseMobilePreviewForPlayWorld: boolean;
	bUseVRPreviewForPlayWorld: boolean;
	bIsSimulatingInEditor: boolean;
	bSquelchTransactionNotification: boolean;
	PlayFromHerePlayerStartClass: UnrealEngineClass;
	EditorWorld: World;
	ActorsThatWereSelected: any[];
	PlayWorldDestination: number;
	CurrentPlayWorldDestination: number;
	bMobilePreviewPortrait: boolean;
	BuildPlayDevice: number;
	PlayInEditorViewportIndex: number;
	UserEditedPlayWorldURL: string;
	ScratchRenderTarget2048: TextureRenderTarget2D;
	ScratchRenderTarget1024: TextureRenderTarget2D;
	ScratchRenderTarget512: TextureRenderTarget2D;
	ScratchRenderTarget256: TextureRenderTarget2D;
	PreviewMeshComp: StaticMeshComponent;
	PreviewMeshIndex: number;
	bShowPreviewMesh: boolean;
	bCustomCameraAlignEmitter: boolean;
	CustomCameraAlignEmitterDistance: number;
	bDrawSocketsInGMode: boolean;
	bDrawParticleHelpers: boolean;
	BrushBuilders: BrushBuilder[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorEngine;
	static Find(Outer: UObject, ResourceName: string): EditorEngine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorEngine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorEngine;
	static C(Other: UObject): EditorEngine;
	bspBrushCSG(Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	CanSelectActor(Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	Exec(InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	FindBrushBuilder(BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	GetSelectedComponents(): USelection;
	GetSelectedObjects(): USelection;
	GetSelectedSet(Class: UnrealEngineClass): USelection;
	RebuildLevel(Level: Level): void;
	RebuildStaticNavigableGeometry(Level: Level): void;
	RedrawAllViewports(bInvalidateHitProxies: boolean): void;
	SelectActor(Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	SelectComponent(Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	SelectGroup(InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	SelectNone(bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	SetMaterial(InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
	static bspBrushCSG(Engine: EditorEngine,Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	static CanSelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	static Exec(Engine: EditorEngine,InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	static FindBrushBuilder(Engine: EditorEngine,BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	static GetSelectedComponents(Engine: EditorEngine): USelection;
	static GetSelectedObjects(Engine: EditorEngine): USelection;
	static GetSelectedSet(Engine: EditorEngine,Class: UnrealEngineClass): USelection;
	static RebuildLevel(Engine: EditorEngine,Level: Level): void;
	static RebuildStaticNavigableGeometry(Engine: EditorEngine,Level: Level): void;
	static RedrawAllViewports(Engine: EditorEngine,bInvalidateHitProxies: boolean): void;
	static SelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	static SelectComponent(Engine: EditorEngine,Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	static SelectGroup(Engine: EditorEngine,InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	static SelectNone(Engine: EditorEngine,bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	static SetMaterial(Engine: EditorEngine,InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
}

declare class EditorCommandCategory { 
	Parent: string;
	Name: string;
	clone() : EditorCommandCategory;
	static C(Other: UObject): EditorCommandCategory;
}

declare class EditorCommand { 
	Parent: string;
	CommandName: string;
	ExecCommand: string;
	Description: string;
	clone() : EditorCommand;
	static C(Other: UObject): EditorCommand;
}

declare class EditorKeyBinding { 
	bCtrlDown: boolean;
	bAltDown: boolean;
	bShiftDown: boolean;
	Key: Key;
	CommandName: string;
	clone() : EditorKeyBinding;
	static C(Other: UObject): EditorKeyBinding;
}

declare class UnrealEdKeyBindings extends UObject { 
	KeyBindings: EditorKeyBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UnrealEdKeyBindings;
	static Find(Outer: UObject, ResourceName: string): UnrealEdKeyBindings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UnrealEdKeyBindings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdKeyBindings;
	static C(Other: UObject): UnrealEdKeyBindings;
}

declare class ClassPickerDefaults { 
	ClassName: string;
	AssetClass: string;
	clone() : ClassPickerDefaults;
	static C(Other: UObject): ClassPickerDefaults;
}

declare class UnrealEdOptions extends UObject { 
	EditorCategories: EditorCommandCategory[];
	EditorCommands: EditorCommand[];
	EditorKeyBindings: UnrealEdKeyBindings;
	bExpandClassPickerClassList: boolean;
	NewAssetDefaultClasses: ClassPickerDefaults[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UnrealEdOptions;
	static Find(Outer: UObject, ResourceName: string): UnrealEdOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UnrealEdOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdOptions;
	static C(Other: UObject): UnrealEdOptions;
}

declare class TemplateMapInfo { 
	ThumbnailTexture: Texture2D;
	Map: string;
	clone() : TemplateMapInfo;
	static C(Other: UObject): TemplateMapInfo;
}

declare class UnrealEdEngine extends EditorEngine { 
	EditorOptionsInst: UnrealEdOptions;
	AutoReimportManager: AutoReimportManager;
	MaterialCopyPasteBuffer: Material;
	MatineeCopyPasteBuffer: UObject[];
	SoundCueCopyPasteBuffer: SoundCue;
	AnimationCompressionAlgorithms: AnimCompress[];
	PackagesToBeFullyLoadedAtStartup: string[];
	CurrentLODParentActor: Actor;
	bNeedWarningForPkgEngineVer: boolean;
	bNeedWarningForWritePermission: boolean;
	SortedSpriteCategories: string[];
	TemplateMapInfos: TemplateMapInfo[];
	CookServer: CookOnTheFlyServer;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UnrealEdEngine;
	static Find(Outer: UObject, ResourceName: string): UnrealEdEngine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UnrealEdEngine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdEngine;
	static C(Other: UObject): UnrealEdEngine;
}

declare type EConsoleForGamepadLabels = 'None' | 'XBoxOne' | 'PS4';
declare var EConsoleForGamepadLabels : { None:'None',XBoxOne:'XBoxOne',PS4:'PS4', };
declare class EditorExperimentalSettings extends UObject { 
	bProceduralFoliage: boolean;
	bEnableLocalizationDashboard: boolean;
	bEnableTranslationPicker: boolean;
	bEnableEditorUtilityBlueprints: boolean;
	bEnableFavoriteSystem: boolean;
	bBlueprintableComponents: boolean;
	bDeviceOutputLog: boolean;
	ConsoleForGamepadLabels: EConsoleForGamepadLabels;
	bToolbarCustomization: boolean;
	bBreakOnExceptions: boolean;
	bBlueprintPerformanceAnalysisTools: boolean;
	bEnableFindAndReplaceReferences: boolean;
	bDrawMidpointArrowsInBlueprints: boolean;
	bShowAudioStreamingOptions: boolean;
	bShowAudioMixerData: boolean;
	bContextMenuChunkAssignments: boolean;
	bDisableCookInEditor: boolean;
	MultiProcessCooking: number;
	bEQSEditor: boolean;
	bLiveStreamingFromEditor: boolean;
	bFeatureLevelES31Preview: boolean;
	bAllowLateJoinInPIE: boolean;
	bAllowVulkanPreview: boolean;
	bEnableMultithreadedLightmapEncoding: boolean;
	bEnableMultithreadedShadowmapEncoding: boolean;
	bUseOpenCLForConvexHullDecomp: boolean;
	bEnableVREditing: boolean;
	bEnableAutoVREditMode: boolean;
	bAlwaysShowVRTutorial: boolean;
	bAllowPotentiallyUnsafePropertyEditing: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorExperimentalSettings;
	static Find(Outer: UObject, ResourceName: string): EditorExperimentalSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorExperimentalSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorExperimentalSettings;
	static C(Other: UObject): EditorExperimentalSettings;
}

declare type ELoadLevelAtStartup = 'None' | 'ProjectDefault' | 'LastOpened';
declare var ELoadLevelAtStartup : { None:'None',ProjectDefault:'ProjectDefault',LastOpened:'LastOpened', };
declare class AutoReimportWildcard { 
	Wildcard: string;
	bInclude: boolean;
	clone() : AutoReimportWildcard;
	static C(Other: UObject): AutoReimportWildcard;
}

declare class AutoReimportDirectoryConfig { 
	SourceDirectory: string;
	MountPoint: string;
	Wildcards: AutoReimportWildcard[];
	clone() : AutoReimportDirectoryConfig;
	static C(Other: UObject): AutoReimportDirectoryConfig;
}

declare class EditorLoadingSavingSettings extends UObject { 
	LoadLevelAtStartup: ELoadLevelAtStartup;
	bForceCompilationAtStartup: boolean;
	bRestoreOpenAssetTabsOnRestart: boolean;
	bEnableSourceControlCompatabilityCheck: boolean;
	bMonitorContentDirectories: boolean;
	AutoReimportDirectories: string[];
	AutoReimportDirectorySettings: AutoReimportDirectoryConfig[];
	AutoReimportThreshold: number;
	bAutoCreateAssets: boolean;
	bAutoDeleteAssets: boolean;
	bDetectChangesOnStartup: boolean;
	bPromptBeforeAutoImporting: boolean;
	bDeleteSourceFilesWithAssets: boolean;
	bAutoReimportTextures: boolean;
	bAutoReimportCSV: boolean;
	bDirtyMigratedBlueprints: boolean;
	bAutoSaveEnable: boolean;
	bAutoSaveMaps: boolean;
	bAutoSaveContent: boolean;
	AutoSaveTimeMinutes: number;
	AutoSaveWarningInSeconds: number;
	bAutomaticallyCheckoutOnAssetModification: boolean;
	bPromptForCheckoutOnAssetModification: boolean;
	bSCCAutoAddNewFiles: boolean;
	bSCCUseGlobalSettings: boolean;
	TextDiffToolPath: FilePath;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorLoadingSavingSettings;
	static Find(Outer: UObject, ResourceName: string): EditorLoadingSavingSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorLoadingSavingSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLoadingSavingSettings;
	static C(Other: UObject): EditorLoadingSavingSettings;
}

declare class EditorMiscSettings extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): EditorMiscSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorMiscSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorMiscSettings;
	static C(Other: UObject): EditorMiscSettings;
}

declare class EditorParentPlayerListObj extends UObject { 
	Overrides: AnimParentNodeAssetOverride[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorParentPlayerListObj;
	static Find(Outer: UObject, ResourceName: string): EditorParentPlayerListObj;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorParentPlayerListObj;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorParentPlayerListObj;
	static C(Other: UObject): EditorParentPlayerListObj;
}

declare type EUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Lightyears' | 'Degrees' | 'Radians' | 'MetersPerSecond' | 'KilometersPerHour' | 'MilesPerHour' | 'Celsius' | 'Farenheit' | 'Kelvin' | 'Micrograms' | 'Milligrams' | 'Grams' | 'Kilograms' | 'MetricTons' | 'Ounces' | 'Pounds' | 'Stones' | 'Newtons' | 'PoundsForce' | 'KilogramsForce' | 'Hertz' | 'Kilohertz' | 'Megahertz' | 'Gigahertz' | 'RevolutionsPerMinute' | 'Bytes' | 'Kilobytes' | 'Megabytes' | 'Gigabytes' | 'Terabytes' | 'Lumens' | 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days' | 'Months' | 'Years' | 'Multiplier' | 'Unspecified';
declare var EUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Lightyears:'Lightyears',Degrees:'Degrees',Radians:'Radians',MetersPerSecond:'MetersPerSecond',KilometersPerHour:'KilometersPerHour',MilesPerHour:'MilesPerHour',Celsius:'Celsius',Farenheit:'Farenheit',Kelvin:'Kelvin',Micrograms:'Micrograms',Milligrams:'Milligrams',Grams:'Grams',Kilograms:'Kilograms',MetricTons:'MetricTons',Ounces:'Ounces',Pounds:'Pounds',Stones:'Stones',Newtons:'Newtons',PoundsForce:'PoundsForce',KilogramsForce:'KilogramsForce',Hertz:'Hertz',Kilohertz:'Kilohertz',Megahertz:'Megahertz',Gigahertz:'Gigahertz',RevolutionsPerMinute:'RevolutionsPerMinute',Bytes:'Bytes',Kilobytes:'Kilobytes',Megabytes:'Megabytes',Gigabytes:'Gigabytes',Terabytes:'Terabytes',Lumens:'Lumens',Milliseconds:'Milliseconds',Seconds:'Seconds',Minutes:'Minutes',Hours:'Hours',Days:'Days',Months:'Months',Years:'Years',Multiplier:'Multiplier',Unspecified:'Unspecified', };
declare type EUnitDisplay = 'None' | 'Metric' | 'Imperial' | 'Invalid';
declare var EUnitDisplay : { None:'None',Metric:'Metric',Imperial:'Imperial',Invalid:'Invalid', };
declare type EDefaultLocationUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Invalid';
declare var EDefaultLocationUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Invalid:'Invalid', };
declare class EditorProjectAppearanceSettings extends DeveloperSettings { 
	bDisplayUnits: boolean;
	DistanceUnits: EUnit[];
	MassUnits: EUnit[];
	TimeUnits: EUnit[];
	AngleUnits: EUnit;
	SpeedUnits: EUnit;
	TemperatureUnits: EUnit;
	ForceUnits: EUnit;
	UnitDisplay: EUnitDisplay;
	DefaultInputUnits: EDefaultLocationUnit;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorProjectAppearanceSettings;
	static Find(Outer: UObject, ResourceName: string): EditorProjectAppearanceSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorProjectAppearanceSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorProjectAppearanceSettings;
	static C(Other: UObject): EditorProjectAppearanceSettings;
}

declare type ELevelEditor2DAxis = 'X' | 'Y' | 'Z';
declare var ELevelEditor2DAxis : { X:'X',Y:'Y',Z:'Z', };
declare class Mode2DLayer { 
	Name: string;
	Depth: number;
	clone() : Mode2DLayer;
	static C(Other: UObject): Mode2DLayer;
}

declare class LevelEditor2DSettings extends DeveloperSettings { 
	bEnable2DWidget: boolean;
	bEnableSnapLayers: boolean;
	SnapAxis: ELevelEditor2DAxis;
	SnapLayers: Mode2DLayer[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelEditor2DSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditor2DSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelEditor2DSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditor2DSettings;
	static C(Other: UObject): LevelEditor2DSettings;
}

declare class EditorSettings extends UObject { 
	bLoadTheMostRecentlyLoadedProjectAtStartup: boolean;
	bEditorAnalyticsEnabled: boolean;
	RecentlyOpenedProjectFiles: string[];
	CreatedProjectPaths: string[];
	bCopyStarterContentPreference: boolean;
	CompletedSurveys: Guid[];
	InProgressSurveys: Guid[];
	AutoScalabilityWorkScaleAmount: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorSettings;
	static Find(Outer: UObject, ResourceName: string): EditorSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSettings;
	static C(Other: UObject): EditorSettings;
}

declare class EditorSkeletonNotifyObj extends UObject { 
	Name: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EditorSkeletonNotifyObj;
	static Find(Outer: UObject, ResourceName: string): EditorSkeletonNotifyObj;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EditorSkeletonNotifyObj;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSkeletonNotifyObj;
	static C(Other: UObject): EditorSkeletonNotifyObj;
}

declare class ExportTextContainer extends UObject { 
	ExportText: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ExportTextContainer;
	static Find(Outer: UObject, ResourceName: string): ExportTextContainer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ExportTextContainer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportTextContainer;
	static C(Other: UObject): ExportTextContainer;
}

declare class AnimBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	TargetSkeleton: Skeleton;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimBlueprintFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintFactory;
	static C(Other: UObject): AnimBlueprintFactory;
}

declare class AnimCompositeFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompositeFactory;
	static Find(Outer: UObject, ResourceName: string): AnimCompositeFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompositeFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompositeFactory;
	static C(Other: UObject): AnimCompositeFactory;
}

declare class AnimMontageFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimMontageFactory;
	static Find(Outer: UObject, ResourceName: string): AnimMontageFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimMontageFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimMontageFactory;
	static C(Other: UObject): AnimMontageFactory;
}

declare class AnimSequenceFactory extends Factory { 
	TargetSkeleton: Skeleton;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimSequenceFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceFactory;
	static C(Other: UObject): AnimSequenceFactory;
}

declare class BlendSpaceFactory1D extends Factory { 
	TargetSkeleton: Skeleton;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactory1D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendSpaceFactory1D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactory1D;
	static C(Other: UObject): BlendSpaceFactory1D;
}

declare class AimOffsetBlendSpaceFactory1D extends BlendSpaceFactory1D { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AimOffsetBlendSpaceFactory1D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactory1D;
	static C(Other: UObject): AimOffsetBlendSpaceFactory1D;
}

declare class BlendSpaceFactoryNew extends Factory { 
	TargetSkeleton: Skeleton;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendSpaceFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactoryNew;
	static C(Other: UObject): BlendSpaceFactoryNew;
}

declare class AimOffsetBlendSpaceFactoryNew extends BlendSpaceFactoryNew { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AimOffsetBlendSpaceFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactoryNew;
	static C(Other: UObject): AimOffsetBlendSpaceFactoryNew;
}

declare class BlueprintFactory extends Factory { 
	ParentClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFactory;
	static C(Other: UObject): BlueprintFactory;
}

declare class BlueprintFunctionLibraryFactory extends BlueprintFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintFunctionLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibraryFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintFunctionLibraryFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibraryFactory;
	static C(Other: UObject): BlueprintFunctionLibraryFactory;
}

declare class BlueprintMacroFactory extends BlueprintFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintMacroFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintMacroFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintMacroFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMacroFactory;
	static C(Other: UObject): BlueprintMacroFactory;
}

declare class BlueprintInterfaceFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintInterfaceFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintInterfaceFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintInterfaceFactory;
	static C(Other: UObject): BlueprintInterfaceFactory;
}

declare class CameraAnimFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CameraAnimFactory;
	static Find(Outer: UObject, ResourceName: string): CameraAnimFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CameraAnimFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnimFactory;
	static C(Other: UObject): CameraAnimFactory;
}

declare class CanvasRenderTarget2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CanvasRenderTarget2DFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2DFactoryNew;
	static C(Other: UObject): CanvasRenderTarget2DFactoryNew;
}

declare type ECSVImportType = 'ECSV_DataTable' | 'ECSV_CurveTable' | 'ECSV_CurveFloat' | 'ECSV_CurveVector' | 'ECSV_CurveLinearColor';
declare var ECSVImportType : { ECSV_DataTable:'ECSV_DataTable',ECSV_CurveTable:'ECSV_CurveTable',ECSV_CurveFloat:'ECSV_CurveFloat',ECSV_CurveVector:'ECSV_CurveVector',ECSV_CurveLinearColor:'ECSV_CurveLinearColor', };
declare class CSVImportSettings { 
	ImportRowStruct: ScriptStruct;
	ImportType: ECSVImportType;
	ImportCurveInterpMode: ERichCurveInterpMode;
	clone() : CSVImportSettings;
	static C(Other: UObject): CSVImportSettings;
}

declare class CSVImportFactory extends Factory { 
	AutomatedImportSettings: CSVImportSettings;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CSVImportFactory;
	static Find(Outer: UObject, ResourceName: string): CSVImportFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CSVImportFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CSVImportFactory;
	static C(Other: UObject): CSVImportFactory;
}

declare class ReimportCurveFactory extends CSVImportFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportCurveFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportCurveFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveFactory;
	static C(Other: UObject): ReimportCurveFactory;
}

declare class ReimportCurveTableFactory extends CSVImportFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportCurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveTableFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportCurveTableFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveTableFactory;
	static C(Other: UObject): ReimportCurveTableFactory;
}

declare class ReimportDataTableFactory extends CSVImportFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportDataTableFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportDataTableFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportDataTableFactory;
	static C(Other: UObject): ReimportDataTableFactory;
}

declare class CurveFactory extends Factory { 
	CurveClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFactory;
	static C(Other: UObject): CurveFactory;
}

declare class CurveFloatFactory extends CurveFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveFloatFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFloatFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveFloatFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFloatFactory;
	static C(Other: UObject): CurveFloatFactory;
}

declare class CurveLinearColorFactory extends CurveFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveLinearColorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveLinearColorFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorFactory;
	static C(Other: UObject): CurveLinearColorFactory;
}

declare class CurveVectorFactory extends CurveFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveVectorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveVectorFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveVectorFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveVectorFactory;
	static C(Other: UObject): CurveVectorFactory;
}

declare class CurveImportFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveImportFactory;
	static Find(Outer: UObject, ResourceName: string): CurveImportFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveImportFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveImportFactory;
	static C(Other: UObject): CurveImportFactory;
}

declare class DataAssetFactory extends Factory { 
	DataAssetClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DataAssetFactory;
	static Find(Outer: UObject, ResourceName: string): DataAssetFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DataAssetFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataAssetFactory;
	static C(Other: UObject): DataAssetFactory;
}

declare class DataTableFactory extends Factory { 
	Struct: ScriptStruct;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DataTableFactory;
	static Find(Outer: UObject, ResourceName: string): DataTableFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DataTableFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFactory;
	static C(Other: UObject): DataTableFactory;
}

declare class DestructibleMeshFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DestructibleMeshFactory;
	static Find(Outer: UObject, ResourceName: string): DestructibleMeshFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructibleMeshFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleMeshFactory;
	static C(Other: UObject): DestructibleMeshFactory;
}

declare class ReimportDestructibleMeshFactory extends DestructibleMeshFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportDestructibleMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportDestructibleMeshFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportDestructibleMeshFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportDestructibleMeshFactory;
	static C(Other: UObject): ReimportDestructibleMeshFactory;
}

declare class DialogueVoiceFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DialogueVoiceFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueVoiceFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DialogueVoiceFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoiceFactory;
	static C(Other: UObject): DialogueVoiceFactory;
}

declare class DialogueWaveFactory extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSpeakerVoice: DialogueVoice;
	HasSetInitialTargetVoice: boolean;
	InitialTargetVoices: DialogueVoice[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DialogueWaveFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueWaveFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DialogueWaveFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWaveFactory;
	static C(Other: UObject): DialogueWaveFactory;
}

declare class EnumFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EnumFactory;
	static Find(Outer: UObject, ResourceName: string): EnumFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EnumFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnumFactory;
	static C(Other: UObject): EnumFactory;
}

declare type EFBXImportType = 'FBXIT_StaticMesh' | 'FBXIT_SkeletalMesh' | 'FBXIT_Animation' | 'FBXIT_SubDSurface';
declare var EFBXImportType : { FBXIT_StaticMesh:'FBXIT_StaticMesh',FBXIT_SkeletalMesh:'FBXIT_SkeletalMesh',FBXIT_Animation:'FBXIT_Animation',FBXIT_SubDSurface:'FBXIT_SubDSurface', };
declare class FbxSceneImportData extends UObject { 
	SourceFbxFile: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxSceneImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxSceneImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportData;
	static C(Other: UObject): FbxSceneImportData;
}

declare class FbxAssetImportData extends AssetImportData { 
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bImportAsScene: boolean;
	FbxSceneImportDataReference: FbxSceneImportData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxAssetImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAssetImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxAssetImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAssetImportData;
	static C(Other: UObject): FbxAssetImportData;
}

declare type EFBXNormalImportMethod = 'FBXNIM_ComputeNormals' | 'FBXNIM_ImportNormals' | 'FBXNIM_ImportNormalsAndTangents';
declare var EFBXNormalImportMethod : { FBXNIM_ComputeNormals:'FBXNIM_ComputeNormals',FBXNIM_ImportNormals:'FBXNIM_ImportNormals',FBXNIM_ImportNormalsAndTangents:'FBXNIM_ImportNormalsAndTangents', };
declare type EFBXNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace';
declare var EFBXNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace', };
declare class FbxMeshImportData extends FbxAssetImportData { 
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportMeshLODs: boolean;
	NormalImportMethod: EFBXNormalImportMethod;
	NormalGenerationMethod: EFBXNormalGenerationMethod;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxMeshImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxMeshImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxMeshImportData;
	static C(Other: UObject): FbxMeshImportData;
}

declare type EVertexColorImportOption = 'Replace' | 'Ignore' | 'Override';
declare var EVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override', };
declare class FbxStaticMeshImportData extends FbxMeshImportData { 
	StaticMeshLODGroup: string;
	VertexColorImportOption: EVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	bAutoGenerateCollision: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxStaticMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxStaticMeshImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxStaticMeshImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxStaticMeshImportData;
	static C(Other: UObject): FbxStaticMeshImportData;
}

declare class FbxSkeletalMeshImportData extends FbxMeshImportData { 
	bUpdateSkeletonReferencePose: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	bKeepOverlappingVertices: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxSkeletalMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSkeletalMeshImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxSkeletalMeshImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSkeletalMeshImportData;
	static C(Other: UObject): FbxSkeletalMeshImportData;
}

declare type EFBXAnimationLengthImportType = 'FBXALIT_ExportedTime' | 'FBXALIT_AnimatedKey' | 'FBXALIT_SetRange';
declare var EFBXAnimationLengthImportType : { FBXALIT_ExportedTime:'FBXALIT_ExportedTime',FBXALIT_AnimatedKey:'FBXALIT_AnimatedKey',FBXALIT_SetRange:'FBXALIT_SetRange', };
declare class FbxAnimSequenceImportData extends FbxAssetImportData { 
	bImportMeshesInBoneHierarchy: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	StartFrame: number;
	EndFrame: number;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	SourceAnimationName: string;
	bImportCustomAttribute: boolean;
	bSetMaterialDriveParameterOnCustomAttribute: boolean;
	MaterialCurveSuffixes: string[];
	bRemoveRedundantKeys: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	bDoNotImportCurveWithZero: boolean;
	bPreserveLocalTransform: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxAnimSequenceImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAnimSequenceImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxAnimSequenceImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAnimSequenceImportData;
	static C(Other: UObject): FbxAnimSequenceImportData;
}

declare class FbxTextureImportData extends FbxAssetImportData { 
	bInvertNormalMaps: boolean;
	BaseMaterialName: StringAssetReference;
	BaseColorName: string;
	BaseDiffuseTextureName: string;
	BaseNormalTextureName: string;
	BaseEmissiveColorName: string;
	BaseEmmisiveTextureName: string;
	BaseSpecularTextureName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxTextureImportData;
	static Find(Outer: UObject, ResourceName: string): FbxTextureImportData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxTextureImportData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTextureImportData;
	static C(Other: UObject): FbxTextureImportData;
}

declare class FbxImportUI extends UObject { 
	bIsObjImport: boolean;
	OriginalImportType: EFBXImportType;
	MeshTypeToImport: EFBXImportType;
	bOverrideFullName: boolean;
	bConvertScene: boolean;
	bConvertSceneUnit: boolean;
	bImportAsSkeletal: boolean;
	bImportAsSubDSurface: boolean;
	bImportMesh: boolean;
	bCombineMeshes: boolean;
	Skeleton: Skeleton;
	bCreatePhysicsAsset: boolean;
	PhysicsAsset: PhysicsAsset;
	bImportAnimations: boolean;
	OverrideAnimationName: string;
	bImportRigidMesh: boolean;
	bImportMaterials: boolean;
	bImportTextures: boolean;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxImportUI;
	static Find(Outer: UObject, ResourceName: string): FbxImportUI;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxImportUI;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxImportUI;
	static C(Other: UObject): FbxImportUI;
}

declare class FbxFactory extends Factory { 
	ImportUI: FbxImportUI;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxFactory;
	static Find(Outer: UObject, ResourceName: string): FbxFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxFactory;
	static C(Other: UObject): FbxFactory;
}

declare class ReimportFbxAnimSequenceFactory extends FbxFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportFbxAnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxAnimSequenceFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportFbxAnimSequenceFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxAnimSequenceFactory;
	static C(Other: UObject): ReimportFbxAnimSequenceFactory;
}

declare class ReimportFbxSkeletalMeshFactory extends FbxFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportFbxSkeletalMeshFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSkeletalMeshFactory;
	static C(Other: UObject): ReimportFbxSkeletalMeshFactory;
}

declare class ReimportFbxStaticMeshFactory extends FbxFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportFbxStaticMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxStaticMeshFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportFbxStaticMeshFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxStaticMeshFactory;
	static C(Other: UObject): ReimportFbxStaticMeshFactory;
}

declare type EFBXSceneOptionsCreateHierarchyType = 'FBXSOCHT_CreateLevelActors' | 'FBXSOCHT_CreateActorComponents' | 'FBXSOCHT_CreateBlueprint';
declare var EFBXSceneOptionsCreateHierarchyType : { FBXSOCHT_CreateLevelActors:'FBXSOCHT_CreateLevelActors',FBXSOCHT_CreateActorComponents:'FBXSOCHT_CreateActorComponents',FBXSOCHT_CreateBlueprint:'FBXSOCHT_CreateBlueprint', };
declare class FbxSceneImportOptions extends UObject { 
	bCreateContentFolderHierarchy: boolean;
	bImportAsDynamic: boolean;
	HierarchyType: EFBXSceneOptionsCreateHierarchyType;
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportStaticMeshLODs: boolean;
	bImportSkeletalMeshLODs: boolean;
	bInvertNormalMaps: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxSceneImportOptions;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxSceneImportOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptions;
	static C(Other: UObject): FbxSceneImportOptions;
}

declare type EFbxSceneVertexColorImportOption = 'Replace' | 'Ignore' | 'Override';
declare var EFbxSceneVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override', };
declare type EFBXSceneNormalImportMethod = 'FBXSceneNIM_ComputeNormals' | 'FBXSceneNIM_ImportNormals' | 'FBXSceneNIM_ImportNormalsAndTangents';
declare var EFBXSceneNormalImportMethod : { FBXSceneNIM_ComputeNormals:'FBXSceneNIM_ComputeNormals',FBXSceneNIM_ImportNormals:'FBXSceneNIM_ImportNormals',FBXSceneNIM_ImportNormalsAndTangents:'FBXSceneNIM_ImportNormalsAndTangents', };
declare type EFBXSceneNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace';
declare var EFBXSceneNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace', };
declare class FbxSceneImportOptionsStaticMesh extends UObject { 
	StaticMeshLODGroup: string;
	bAutoGenerateCollision: boolean;
	VertexColorImportOption: EFbxSceneVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	NormalImportMethod: EFBXSceneNormalImportMethod;
	NormalGenerationMethod: EFBXSceneNormalGenerationMethod;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxSceneImportOptionsStaticMesh;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsStaticMesh;
	static C(Other: UObject): FbxSceneImportOptionsStaticMesh;
}

declare class FbxSceneImportOptionsSkeletalMesh extends UObject { 
	bUpdateSkeletonReferencePose: boolean;
	bCreatePhysicsAsset: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	bKeepOverlappingVertices: boolean;
	bImportAnimations: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	bImportCustomAttribute: boolean;
	bPreserveLocalTransform: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxSceneImportOptionsSkeletalMesh;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsSkeletalMesh;
	static C(Other: UObject): FbxSceneImportOptionsSkeletalMesh;
}

declare class FbxSceneImportFactory extends Factory { 
	SceneImportOptions: FbxSceneImportOptions;
	SceneImportOptionsStaticMesh: FbxSceneImportOptionsStaticMesh;
	SceneImportOptionsSkeletalMesh: FbxSceneImportOptionsSkeletalMesh;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	ReimportData: FbxSceneImportData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxSceneImportFactory;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxSceneImportFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportFactory;
	static C(Other: UObject): FbxSceneImportFactory;
}

declare class ReimportFbxSceneFactory extends FbxSceneImportFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportFbxSceneFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSceneFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportFbxSceneFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSceneFactory;
	static C(Other: UObject): ReimportFbxSceneFactory;
}

declare class FontFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FontFactory;
	static Find(Outer: UObject, ResourceName: string): FontFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FontFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFactory;
	static C(Other: UObject): FontFactory;
}

declare class FontFileImportFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FontFileImportFactory;
	static Find(Outer: UObject, ResourceName: string): FontFileImportFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FontFileImportFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFileImportFactory;
	static C(Other: UObject): FontFileImportFactory;
}

declare class ForceFeedbackEffectFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ForceFeedbackEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackEffectFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ForceFeedbackEffectFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackEffectFactory;
	static C(Other: UObject): ForceFeedbackEffectFactory;
}

declare class HapticFeedbackEffectBufferFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HapticFeedbackEffectBufferFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectBufferFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HapticFeedbackEffectBufferFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectBufferFactory;
	static C(Other: UObject): HapticFeedbackEffectBufferFactory;
}

declare class HapticFeedbackEffectCurveFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HapticFeedbackEffectCurveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectCurveFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HapticFeedbackEffectCurveFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectCurveFactory;
	static C(Other: UObject): HapticFeedbackEffectCurveFactory;
}

declare class HapticFeedbackEffectSoundWaveFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HapticFeedbackEffectSoundWaveFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectSoundWaveFactory;
	static C(Other: UObject): HapticFeedbackEffectSoundWaveFactory;
}

declare class InterpDataFactoryNew extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpDataFactoryNew;
	static Find(Outer: UObject, ResourceName: string): InterpDataFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpDataFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpDataFactoryNew;
	static C(Other: UObject): InterpDataFactoryNew;
}

declare class LevelFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelFactory;
	static Find(Outer: UObject, ResourceName: string): LevelFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelFactory;
	static C(Other: UObject): LevelFactory;
}

declare class MaterialFactoryNew extends Factory { 
	InitialTexture: Texture;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFactoryNew;
	static C(Other: UObject): MaterialFactoryNew;
}

declare class MaterialFunctionFactoryNew extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialFunctionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialFunctionFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionFactoryNew;
	static C(Other: UObject): MaterialFunctionFactoryNew;
}

declare class MaterialInstanceConstantFactoryNew extends Factory { 
	InitialParent: MaterialInterface;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialInstanceConstantFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstantFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialInstanceConstantFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstantFactoryNew;
	static C(Other: UObject): MaterialInstanceConstantFactoryNew;
}

declare class MaterialParameterCollectionFactoryNew extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialParameterCollectionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollectionFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialParameterCollectionFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollectionFactoryNew;
	static C(Other: UObject): MaterialParameterCollectionFactoryNew;
}

declare class ModelFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ModelFactory;
	static Find(Outer: UObject, ResourceName: string): ModelFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ModelFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelFactory;
	static C(Other: UObject): ModelFactory;
}

declare class ObjectLibraryFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ObjectLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): ObjectLibraryFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ObjectLibraryFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibraryFactory;
	static C(Other: UObject): ObjectLibraryFactory;
}

declare class PackageFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PackageFactory;
	static Find(Outer: UObject, ResourceName: string): PackageFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PackageFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageFactory;
	static C(Other: UObject): PackageFactory;
}

declare class PackFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PackFactory;
	static Find(Outer: UObject, ResourceName: string): PackFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PackFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackFactory;
	static C(Other: UObject): PackFactory;
}

declare class ParticleSystemFactoryNew extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleSystemFactoryNew;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleSystemFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemFactoryNew;
	static C(Other: UObject): ParticleSystemFactoryNew;
}

declare class PhysicalMaterialFactoryNew extends Factory { 
	PhysicalMaterialClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicalMaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicalMaterialFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialFactoryNew;
	static C(Other: UObject): PhysicalMaterialFactoryNew;
}

declare class PolysFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PolysFactory;
	static Find(Outer: UObject, ResourceName: string): PolysFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PolysFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysFactory;
	static C(Other: UObject): PolysFactory;
}

declare class PoseAssetFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PoseAssetFactory;
	static Find(Outer: UObject, ResourceName: string): PoseAssetFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PoseAssetFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseAssetFactory;
	static C(Other: UObject): PoseAssetFactory;
}

declare class PreviewMeshCollectionFactory extends Factory { 
	CurrentSkeleton: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PreviewMeshCollectionFactory;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollectionFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PreviewMeshCollectionFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollectionFactory;
	static C(Other: UObject): PreviewMeshCollectionFactory;
}

declare class ReverbEffectFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReverbEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ReverbEffectFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReverbEffectFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffectFactory;
	static C(Other: UObject): ReverbEffectFactory;
}

declare class SkeletonFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SkeletonFactory;
	static Find(Outer: UObject, ResourceName: string): SkeletonFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SkeletonFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletonFactory;
	static C(Other: UObject): SkeletonFactory;
}

declare class SlateBrushAssetFactory extends Factory { 
	InitialTexture: Texture2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SlateBrushAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateBrushAssetFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SlateBrushAssetFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAssetFactory;
	static C(Other: UObject): SlateBrushAssetFactory;
}

declare class SlateWidgetStyleAssetFactory extends Factory { 
	StyleType: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SlateWidgetStyleAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAssetFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SlateWidgetStyleAssetFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAssetFactory;
	static C(Other: UObject): SlateWidgetStyleAssetFactory;
}

declare class SoundAttenuationFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): SoundAttenuationFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundAttenuationFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuationFactory;
	static C(Other: UObject): SoundAttenuationFactory;
}

declare class SoundClassFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundClassFactory;
	static Find(Outer: UObject, ResourceName: string): SoundClassFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundClassFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassFactory;
	static C(Other: UObject): SoundClassFactory;
}

declare class SoundConcurrencyFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundConcurrencyFactory;
	static Find(Outer: UObject, ResourceName: string): SoundConcurrencyFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundConcurrencyFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrencyFactory;
	static C(Other: UObject): SoundConcurrencyFactory;
}

declare class SoundCueFactoryNew extends Factory { 
	InitialSoundWave: SoundWave;
	InitialDialogueWave: DialogueWave;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCueFactoryNew;
	static Find(Outer: UObject, ResourceName: string): SoundCueFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCueFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueFactoryNew;
	static C(Other: UObject): SoundCueFactoryNew;
}

declare class SoundFactory extends Factory { 
	bAutoCreateCue: boolean;
	bIncludeAttenuationNode: boolean;
	bIncludeLoopingNode: boolean;
	bIncludeModulatorNode: boolean;
	CueVolume: number;
	CuePackageSuffix: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundFactory;
	static C(Other: UObject): SoundFactory;
}

declare class ReimportSoundFactory extends SoundFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportSoundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportSoundFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundFactory;
	static C(Other: UObject): ReimportSoundFactory;
}

declare class SoundMixFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundMixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundMixFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundMixFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMixFactory;
	static C(Other: UObject): SoundMixFactory;
}

declare class SoundSurroundFactory extends Factory { 
	CueVolume: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundSurroundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundSurroundFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundFactory;
	static C(Other: UObject): SoundSurroundFactory;
}

declare class ReimportSoundSurroundFactory extends SoundSurroundFactory { 
	ReimportPaths: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportSoundSurroundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundSurroundFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportSoundSurroundFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundSurroundFactory;
	static C(Other: UObject): ReimportSoundSurroundFactory;
}

declare class StructureFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StructureFactory;
	static Find(Outer: UObject, ResourceName: string): StructureFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StructureFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructureFactory;
	static C(Other: UObject): StructureFactory;
}

declare class SubDSurfaceFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SubDSurfaceFactory;
	static Find(Outer: UObject, ResourceName: string): SubDSurfaceFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubDSurfaceFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurfaceFactory;
	static C(Other: UObject): SubDSurfaceFactory;
}

declare class SubsurfaceProfileFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SubsurfaceProfileFactory;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubsurfaceProfileFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileFactory;
	static C(Other: UObject): SubsurfaceProfileFactory;
}

declare class SubUVAnimationFactory extends Factory { 
	InitialTexture: Texture2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SubUVAnimationFactory;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimationFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubUVAnimationFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimationFactory;
	static C(Other: UObject): SubUVAnimationFactory;
}

declare class Texture2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Texture2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): Texture2DFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Texture2DFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DFactoryNew;
	static C(Other: UObject): Texture2DFactoryNew;
}

declare class TextureFactory extends Factory { 
	NoCompression: boolean;
	NoAlpha: boolean;
	bDeferCompression: boolean;
	CompressionSettings: TextureCompressionSettings;
	bCreateMaterial: boolean;
	bRGBToBaseColor: boolean;
	bRGBToEmissive: boolean;
	bAlphaToRoughness: boolean;
	bAlphaToEmissive: boolean;
	bAlphaToOpacity: boolean;
	bAlphaToOpacityMask: boolean;
	bTwoSided: boolean;
	Blending: EBlendMode;
	ShadingModel: EMaterialShadingModel;
	MipGenSettings: TextureMipGenSettings;
	LODGroup: TextureGroup;
	bDitherMipMapAlpha: boolean;
	AlphaCoverageThresholds: Vector4;
	bPreserveBorder: boolean;
	bFlipNormalMapGreenChannel: boolean;
	bUsingExistingSettings: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureFactory;
	static Find(Outer: UObject, ResourceName: string): TextureFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureFactory;
	static C(Other: UObject): TextureFactory;
}

declare class ReimportTextureFactory extends TextureFactory { 
	pOriginalTex: Texture;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportTextureFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportTextureFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportTextureFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportTextureFactory;
	static C(Other: UObject): ReimportTextureFactory;
}

declare class FontImportOptions extends UObject { 
	Data: FontImportOptionsData;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FontImportOptions;
	static Find(Outer: UObject, ResourceName: string): FontImportOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FontImportOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontImportOptions;
	static C(Other: UObject): FontImportOptions;
}

declare class TrueTypeFontFactory extends TextureFactory { 
	ImportOptions: FontImportOptions;
	bPropertiesConfigured: boolean;
	bFontSelected: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TrueTypeFontFactory;
	static Find(Outer: UObject, ResourceName: string): TrueTypeFontFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TrueTypeFontFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TrueTypeFontFactory;
	static C(Other: UObject): TrueTypeFontFactory;
}

declare class TextureRenderTargetCubeFactoryNew extends Factory { 
	Width: number;
	Format: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureRenderTargetCubeFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCubeFactoryNew;
	static C(Other: UObject): TextureRenderTargetCubeFactoryNew;
}

declare class TextureRenderTargetFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureRenderTargetFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetFactoryNew;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureRenderTargetFactoryNew;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetFactoryNew;
	static C(Other: UObject): TextureRenderTargetFactoryNew;
}

declare class TouchInterfaceFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TouchInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): TouchInterfaceFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TouchInterfaceFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterfaceFactory;
	static C(Other: UObject): TouchInterfaceFactory;
}

declare class VectorFieldStaticFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStaticFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VectorFieldStaticFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStaticFactory;
	static C(Other: UObject): VectorFieldStaticFactory;
}

declare class ReimportVectorFieldStaticFactory extends VectorFieldStaticFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReimportVectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportVectorFieldStaticFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReimportVectorFieldStaticFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportVectorFieldStaticFactory;
	static C(Other: UObject): ReimportVectorFieldStaticFactory;
}

declare class WorldFactory extends Factory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WorldFactory;
	static Find(Outer: UObject, ResourceName: string): WorldFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WorldFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldFactory;
	static C(Other: UObject): WorldFactory;
}

declare type EFBXTestPlanActionType = 'Import' | 'Reimport' | 'AddLOD' | 'ReimportLOD';
declare var EFBXTestPlanActionType : { Import:'Import',Reimport:'Reimport',AddLOD:'AddLOD',ReimportLOD:'ReimportLOD', };
declare type EFBXExpectedResultPreset = 'Error_Number' | 'Warning_Number' | 'Created_Staticmesh_Number' | 'Created_Skeletalmesh_Number' | 'Materials_Created_Number' | 'Vertex_Number' | 'Lod_Number' | 'Vertex_Number_Lod' | 'Mesh_Materials_Number' | 'Mesh_LOD_Section_Number' | 'Mesh_LOD_Section_Vertex_Number' | 'Mesh_LOD_Section_Triangle_Number' | 'Mesh_LOD_Section_Material_Name' | 'Mesh_LOD_Section_Material_Index' | 'LOD_UV_Channel_Number' | 'Bone_Number' | 'Bone_Position';
declare var EFBXExpectedResultPreset : { Error_Number:'Error_Number',Warning_Number:'Warning_Number',Created_Staticmesh_Number:'Created_Staticmesh_Number',Created_Skeletalmesh_Number:'Created_Skeletalmesh_Number',Materials_Created_Number:'Materials_Created_Number',Vertex_Number:'Vertex_Number',Lod_Number:'Lod_Number',Vertex_Number_Lod:'Vertex_Number_Lod',Mesh_Materials_Number:'Mesh_Materials_Number',Mesh_LOD_Section_Number:'Mesh_LOD_Section_Number',Mesh_LOD_Section_Vertex_Number:'Mesh_LOD_Section_Vertex_Number',Mesh_LOD_Section_Triangle_Number:'Mesh_LOD_Section_Triangle_Number',Mesh_LOD_Section_Material_Name:'Mesh_LOD_Section_Material_Name',Mesh_LOD_Section_Material_Index:'Mesh_LOD_Section_Material_Index',LOD_UV_Channel_Number:'LOD_UV_Channel_Number',Bone_Number:'Bone_Number',Bone_Position:'Bone_Position', };
declare class FbxTestPlanExpectedResult { 
	ExpectedPresetsType: EFBXExpectedResultPreset;
	ExpectedPresetsDataInteger: number[];
	ExpectedPresetsDataFloat: number[];
	ExpectedPresetsDataDouble: any[];
	ExpectedPresetsDataString: string[];
	clone() : FbxTestPlanExpectedResult;
	static C(Other: UObject): FbxTestPlanExpectedResult;
}

declare class FbxTestPlan extends UObject { 
	TestPlanName: string;
	Action: EFBXTestPlanActionType;
	LodIndex: number;
	bDeleteFolderAssets: boolean;
	ExpectedResult: FbxTestPlanExpectedResult[];
	ImportUI: FbxImportUI;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FbxTestPlan;
	static Find(Outer: UObject, ResourceName: string): FbxTestPlan;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FbxTestPlan;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTestPlan;
	static C(Other: UObject): FbxTestPlan;
}

declare class FileServerCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FileServerCommandlet;
	static Find(Outer: UObject, ResourceName: string): FileServerCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FileServerCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileServerCommandlet;
	static C(Other: UObject): FileServerCommandlet;
}

declare class FixupRedirectsCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FixupRedirectsCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixupRedirectsCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FixupRedirectsCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixupRedirectsCommandlet;
	static C(Other: UObject): FixupRedirectsCommandlet;
}

declare class GatherTextCommandletBase extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GatherTextCommandletBase;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandletBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GatherTextCommandletBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandletBase;
	static C(Other: UObject): GatherTextCommandletBase;
}

declare class ExportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ExportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExportDialogueScriptCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ExportDialogueScriptCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportDialogueScriptCommandlet;
	static C(Other: UObject): ExportDialogueScriptCommandlet;
}

declare class GatherTextCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GatherTextCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GatherTextCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandlet;
	static C(Other: UObject): GatherTextCommandlet;
}

declare class GatherTextFromAssetsCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GatherTextFromAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromAssetsCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GatherTextFromAssetsCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromAssetsCommandlet;
	static C(Other: UObject): GatherTextFromAssetsCommandlet;
}

declare class GatherTextFromMetaDataCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GatherTextFromMetaDataCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromMetaDataCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GatherTextFromMetaDataCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromMetaDataCommandlet;
	static C(Other: UObject): GatherTextFromMetaDataCommandlet;
}

declare class GatherTextFromSourceCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GatherTextFromSourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromSourceCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GatherTextFromSourceCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromSourceCommandlet;
	static C(Other: UObject): GatherTextFromSourceCommandlet;
}

declare class GenerateGatherArchiveCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GenerateGatherArchiveCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherArchiveCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GenerateGatherArchiveCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherArchiveCommandlet;
	static C(Other: UObject): GenerateGatherArchiveCommandlet;
}

declare class GenerateGatherManifestCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GenerateGatherManifestCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherManifestCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GenerateGatherManifestCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherManifestCommandlet;
	static C(Other: UObject): GenerateGatherManifestCommandlet;
}

declare class GenerateTextLocalizationReportCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GenerateTextLocalizationReportCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationReportCommandlet;
	static C(Other: UObject): GenerateTextLocalizationReportCommandlet;
}

declare class GenerateTextLocalizationResourceCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GenerateTextLocalizationResourceCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationResourceCommandlet;
	static C(Other: UObject): GenerateTextLocalizationResourceCommandlet;
}

declare class ImportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ImportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportDialogueScriptCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ImportDialogueScriptCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportDialogueScriptCommandlet;
	static C(Other: UObject): ImportDialogueScriptCommandlet;
}

declare class ImportLocalizedDialogueCommandlet extends GatherTextCommandletBase { 
	SoundWaveFactory: SoundFactory;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ImportLocalizedDialogueCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportLocalizedDialogueCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ImportLocalizedDialogueCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportLocalizedDialogueCommandlet;
	static C(Other: UObject): ImportLocalizedDialogueCommandlet;
}

declare class InternationalizationConditioningCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InternationalizationConditioningCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationConditioningCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InternationalizationConditioningCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationConditioningCommandlet;
	static C(Other: UObject): InternationalizationConditioningCommandlet;
}

declare class InternationalizationExportCommandlet extends GatherTextCommandletBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InternationalizationExportCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationExportCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InternationalizationExportCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationExportCommandlet;
	static C(Other: UObject): InternationalizationExportCommandlet;
}

declare class GenerateBlueprintAPICommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GenerateBlueprintAPICommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateBlueprintAPICommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GenerateBlueprintAPICommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateBlueprintAPICommandlet;
	static C(Other: UObject): GenerateBlueprintAPICommandlet;
}

declare class GenerateDistillFileSetsCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GenerateDistillFileSetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateDistillFileSetsCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GenerateDistillFileSetsCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateDistillFileSetsCommandlet;
	static C(Other: UObject): GenerateDistillFileSetsCommandlet;
}

declare class HierarchicalLODVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HierarchicalLODVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODVolume;
	static C(Other: UObject): HierarchicalLODVolume;
}

declare class ImportAssetsCommandlet extends Commandlet { 
	GlobalImportData: AutomatedAssetImportData;
	ImportDataList: AutomatedAssetImportData[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ImportAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportAssetsCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ImportAssetsCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportAssetsCommandlet;
	static C(Other: UObject): ImportAssetsCommandlet;
}

declare class LevelEditorMiscSettings extends DeveloperSettings { 
	bAutoApplyLightingEnable: boolean;
	bBSPAutoUpdate: boolean;
	bAutoMoveBSPPivotOffset: boolean;
	bNavigationAutoUpdate: boolean;
	bReplaceRespectsScale: boolean;
	bAllowBackgroundAudio: boolean;
	bEnableRealTimeAudio: boolean;
	EditorVolumeLevel: number;
	bEnableEditorSounds: boolean;
	DefaultLevelStreamingClass: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelEditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorMiscSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelEditorMiscSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorMiscSettings;
	static C(Other: UObject): LevelEditorMiscSettings;
}

declare class LevelExporterFBX extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelExporterFBX;
	static Find(Outer: UObject, ResourceName: string): LevelExporterFBX;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelExporterFBX;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterFBX;
	static C(Other: UObject): LevelExporterFBX;
}

declare class LevelExporterLOD extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelExporterLOD;
	static Find(Outer: UObject, ResourceName: string): LevelExporterLOD;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelExporterLOD;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterLOD;
	static C(Other: UObject): LevelExporterLOD;
}

declare class LevelExporterOBJ extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): LevelExporterOBJ;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelExporterOBJ;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterOBJ;
	static C(Other: UObject): LevelExporterOBJ;
}

declare class LevelExporterSTL extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelExporterSTL;
	static Find(Outer: UObject, ResourceName: string): LevelExporterSTL;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelExporterSTL;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterSTL;
	static C(Other: UObject): LevelExporterSTL;
}

declare class LevelExporterT3D extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): LevelExporterT3D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelExporterT3D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterT3D;
	static C(Other: UObject): LevelExporterT3D;
}

declare class LightmassDebugOptions { 
	bDebugMode: boolean;
	bStatsEnabled: boolean;
	bGatherBSPSurfacesAcrossComponents: boolean;
	CoplanarTolerance: number;
	bUseImmediateImport: boolean;
	bImmediateProcessMappings: boolean;
	bSortMappings: boolean;
	bDumpBinaryFiles: boolean;
	bDebugMaterials: boolean;
	bPadMappings: boolean;
	bDebugPaddings: boolean;
	bOnlyCalcDebugTexelMappings: boolean;
	bUseRandomColors: boolean;
	bColorBordersGreen: boolean;
	bColorByExecutionTime: boolean;
	ExecutionTimeDivisor: number;
	clone() : LightmassDebugOptions;
	static C(Other: UObject): LightmassDebugOptions;
}

declare class SwarmDebugOptions { 
	bDistributionEnabled: boolean;
	bForceContentExport: boolean;
	bInitialized: boolean;
	clone() : SwarmDebugOptions;
	static C(Other: UObject): SwarmDebugOptions;
}

declare class LightmassOptionsObject extends UObject { 
	DebugSettings: LightmassDebugOptions;
	SwarmSettings: SwarmDebugOptions;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightmassOptionsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassOptionsObject;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmassOptionsObject;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassOptionsObject;
	static C(Other: UObject): LightmassOptionsObject;
}

declare class ListMaterialsUsedWithMeshEmittersCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ListMaterialsUsedWithMeshEmittersCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListMaterialsUsedWithMeshEmittersCommandlet;
	static C(Other: UObject): ListMaterialsUsedWithMeshEmittersCommandlet;
}

declare class ListStaticMeshesImportedFromSpeedTreesCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static C(Other: UObject): ListStaticMeshesImportedFromSpeedTreesCommandlet;
}

declare class LoadPackageCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LoadPackageCommandlet;
	static Find(Outer: UObject, ResourceName: string): LoadPackageCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LoadPackageCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LoadPackageCommandlet;
	static C(Other: UObject): LoadPackageCommandlet;
}

declare class EditorParameterGroup { 
	GroupName: string;
	Parameters: DEditorParameterValue[];
	clone() : EditorParameterGroup;
	static C(Other: UObject): EditorParameterGroup;
}

declare class MaterialInstanceConstant extends MaterialInstance { 
	ParameterStateId: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialInstanceConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstant;
	static C(Other: UObject): MaterialInstanceConstant;
}

declare class LightmassParameterValue { 
	bOverride: boolean;
	clone() : LightmassParameterValue;
	static C(Other: UObject): LightmassParameterValue;
}

declare class LightmassBooleanParameterValue extends LightmassParameterValue { 
	ParameterValue: boolean;
	clone() : LightmassBooleanParameterValue;
	static C(Other: UObject): LightmassBooleanParameterValue;
}

declare class LightmassScalarParameterValue extends LightmassParameterValue { 
	ParameterValue: number;
	clone() : LightmassScalarParameterValue;
	static C(Other: UObject): LightmassScalarParameterValue;
}

declare class LightmassParameterizedMaterialSettings { 
	CastShadowAsMasked: LightmassBooleanParameterValue;
	EmissiveBoost: LightmassScalarParameterValue;
	DiffuseBoost: LightmassScalarParameterValue;
	ExportResolutionScale: LightmassScalarParameterValue;
	clone() : LightmassParameterizedMaterialSettings;
	static C(Other: UObject): LightmassParameterizedMaterialSettings;
}

declare class MaterialEditorInstanceConstant extends UObject { 
	PhysMaterial: PhysicalMaterial;
	Parent: MaterialInterface;
	ParameterGroups: EditorParameterGroup[];
	RefractionDepthBias: number;
	SubsurfaceProfile: SubsurfaceProfile;
	bOverrideSubsurfaceProfile: boolean;
	bOverrideBaseProperties: boolean;
	BasePropertyOverrides: MaterialInstanceBasePropertyOverrides;
	SourceInstance: MaterialInstanceConstant;
	VisibleExpressions: Guid[];
	LightmassSettings: LightmassParameterizedMaterialSettings;
	bUseOldStyleMICEditorGroups: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialEditorInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorInstanceConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialEditorInstanceConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorInstanceConstant;
	static C(Other: UObject): MaterialEditorInstanceConstant;
}

declare class MaterialEditorMeshComponent extends StaticMeshComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialEditorMeshComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorMeshComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialEditorMeshComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorMeshComponent;
	static C(Other: UObject): MaterialEditorMeshComponent;
}

declare class MaterialEditorOptions extends UObject { 
	bShowGrid: boolean;
	bShowBackground: boolean;
	bHideUnusedConnectors: boolean;
	bRealtimeMaterialViewport: boolean;
	bRealtimeExpressionViewport: boolean;
	bLivePreviewUpdate: boolean;
	bAlwaysRefreshAllPreviews: boolean;
	bUseUnsortedMenus: boolean;
	bShowMobileStats: boolean;
	FavoriteExpressions: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialEditorOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialEditorOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorOptions;
	static C(Other: UObject): MaterialEditorOptions;
}

declare class MaterialGraphNode extends MaterialGraphNode_Base { 
	MaterialExpression: MaterialExpression;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialGraphNode;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialGraphNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode;
	static C(Other: UObject): MaterialGraphNode;
}

declare class MaterialGraphSchema extends EdGraphSchema { 
	PC_Mask: string;
	PC_Required: string;
	PC_Optional: string;
	PC_MaterialInput: string;
	PSC_Red: string;
	PSC_Green: string;
	PSC_Blue: string;
	PSC_Alpha: string;
	ActivePinColor: LinearColor;
	InactivePinColor: LinearColor;
	AlphaPinColor: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialGraphSchema;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphSchema;
	static C(Other: UObject): MaterialGraphSchema;
}

declare class ModelExporterT3D extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ModelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ModelExporterT3D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ModelExporterT3D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelExporterT3D;
	static C(Other: UObject): ModelExporterT3D;
}

declare class NativeCodeGenCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NativeCodeGenCommandlet;
	static Find(Outer: UObject, ResourceName: string): NativeCodeGenCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NativeCodeGenCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NativeCodeGenCommandlet;
	static C(Other: UObject): NativeCodeGenCommandlet;
}

declare class ObjectExporterT3D extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ObjectExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ObjectExporterT3D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ObjectExporterT3D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectExporterT3D;
	static C(Other: UObject): ObjectExporterT3D;
}

declare class ParticleSystemAuditCommandlet extends Commandlet { 
	HighSpawnRateOrBurstThreshold: number;
	FarLODDistanceTheshold: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleSystemAuditCommandlet;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemAuditCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleSystemAuditCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemAuditCommandlet;
	static C(Other: UObject): ParticleSystemAuditCommandlet;
}

declare class PersonaOptions extends UObject { 
	bShowFloor: boolean;
	bShowSky: boolean;
	bAutoAlignFloorToMesh: boolean;
	bShowGrid: boolean;
	bHighlightOrigin: boolean;
	bMuteAudio: boolean;
	ShowMeshStats: number;
	GridSize: number;
	ViewModeIndex: EViewModeIndex;
	ViewportBackgroundColor: LinearColor;
	ViewFOV: number;
	DefaultLocalAxesSelection: any;
	DefaultBoneDrawSelection: any;
	SectionTimingNodeColor: LinearColor;
	NotifyTimingNodeColor: LinearColor;
	BranchingPointTimingNodeColor: LinearColor;
	bUseStandaloneAnimationEditors: boolean;
	bUseInlineSocketEditor: boolean;
	bAllowPreviewMeshCollectionsToSelectFromDifferentSkeletons: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PersonaOptions;
	static Find(Outer: UObject, ResourceName: string): PersonaOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PersonaOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaOptions;
	static C(Other: UObject): PersonaOptions;
}

declare class PhATSimOptions extends UObject { 
	PhysicsBlend: number;
	bUpdateJointsFromAnimation: boolean;
	PhysicsUpdateMode: EPhysicsTransformUpdateMode;
	PokePauseTime: number;
	PokeBlendTime: number;
	FloorGap: number;
	GravScale: number;
	MaxFPS: number;
	TimeDilation: number;
	HandleLinearDamping: number;
	HandleLinearStiffness: number;
	HandleAngularDamping: number;
	HandleAngularStiffness: number;
	InterpolationSpeed: number;
	PokeStrength: number;
	bShowConstraintsAsPoints: boolean;
	bShowNamesInHierarchy: boolean;
	ConstraintDrawSize: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhATSimOptions;
	static Find(Outer: UObject, ResourceName: string): PhATSimOptions;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhATSimOptions;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhATSimOptions;
	static C(Other: UObject): PhATSimOptions;
}

declare class PkgInfoCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PkgInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): PkgInfoCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PkgInfoCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PkgInfoCommandlet;
	static C(Other: UObject): PkgInfoCommandlet;
}

declare class PolysExporterOBJ extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PolysExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): PolysExporterOBJ;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PolysExporterOBJ;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterOBJ;
	static C(Other: UObject): PolysExporterOBJ;
}

declare class PolysExporterT3D extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PolysExporterT3D;
	static Find(Outer: UObject, ResourceName: string): PolysExporterT3D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PolysExporterT3D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterT3D;
	static C(Other: UObject): PolysExporterT3D;
}

declare class PopulateDialogueWaveFromCharacterSheetCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static Find(Outer: UObject, ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static C(Other: UObject): PopulateDialogueWaveFromCharacterSheetCommandlet;
}

declare class PreviewMaterial extends Material { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PreviewMaterial;
	static Find(Outer: UObject, ResourceName: string): PreviewMaterial;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PreviewMaterial;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMaterial;
	static C(Other: UObject): PreviewMaterial;
}

declare type EProjectPackagingBuildConfigurations = 'PPBC_DebugGame' | 'PPBC_Development' | 'PPBC_Shipping';
declare var EProjectPackagingBuildConfigurations : { PPBC_DebugGame:'PPBC_DebugGame',PPBC_Development:'PPBC_Development',PPBC_Shipping:'PPBC_Shipping', };
declare type EProjectPackagingInternationalizationPresets = 'English' | 'EFIGS' | 'EFIGSCJK' | 'CJK' | 'All';
declare var EProjectPackagingInternationalizationPresets : { English:'English',EFIGS:'EFIGS',EFIGSCJK:'EFIGSCJK',CJK:'CJK',All:'All', };
declare class ProjectPackagingSettings extends UObject { 
	BuildConfiguration: EProjectPackagingBuildConfigurations;
	StagingDirectory: DirectoryPath;
	FullRebuild: boolean;
	ForDistribution: boolean;
	IncludeDebugFiles: boolean;
	bNativizeBlueprintAssets: boolean;
	UsePakFile: boolean;
	bGenerateChunks: boolean;
	bChunkHardReferencesOnly: boolean;
	bBuildHttpChunkInstallData: boolean;
	HttpChunkInstallDataDirectory: DirectoryPath;
	HttpChunkInstallDataVersion: string;
	IncludePrerequisites: boolean;
	ApplocalPrerequisitesDirectory: DirectoryPath;
	IncludeCrashReporter: boolean;
	InternationalizationPreset: EProjectPackagingInternationalizationPresets;
	CulturesToStage: string[];
	DefaultCulture: string;
	bCookAll: boolean;
	bCookMapsOnly: boolean;
	bCompressed: boolean;
	bEncryptIniFiles: boolean;
	bSkipEditorContent: boolean;
	MapsToCook: FilePath[];
	DirectoriesToAlwaysCook: DirectoryPath[];
	DirectoriesToNeverCook: DirectoryPath[];
	DirectoriesToAlwaysStageAsUFS: DirectoryPath[];
	DirectoriesToAlwaysStageAsNonUFS: DirectoryPath[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ProjectPackagingSettings;
	static Find(Outer: UObject, ResourceName: string): ProjectPackagingSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ProjectPackagingSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectPackagingSettings;
	static C(Other: UObject): ProjectPackagingSettings;
}

declare type PropertEditorTestEnum = 'PropertyEditorTest_Enum1' | 'PropertyEditorTest_Enum2' | 'PropertyEditorTest_Enum3' | 'PropertyEditorTest_Enum4' | 'PropertyEditorTest_Enum5' | 'PropertyEditorTest_Enum6';
declare var PropertEditorTestEnum : { PropertyEditorTest_Enum1:'PropertyEditorTest_Enum1',PropertyEditorTest_Enum2:'PropertyEditorTest_Enum2',PropertyEditorTest_Enum3:'PropertyEditorTest_Enum3',PropertyEditorTest_Enum4:'PropertyEditorTest_Enum4',PropertyEditorTest_Enum5:'PropertyEditorTest_Enum5',PropertyEditorTest_Enum6:'PropertyEditorTest_Enum6', };
declare class PropertyEditorTestSubStruct { 
	FirstProperty: number;
	SecondProperty: number;
	CustomizedStructInsideUncustomizedStruct: LinearColor;
	CustomizedStructInsideUncustomizedStruct2: StringAssetReference;
	clone() : PropertyEditorTestSubStruct;
	static C(Other: UObject): PropertyEditorTestSubStruct;
}

declare class PropertyEditorTestBasicStruct { 
	IntPropertyInsideAStruct: number;
	FloatPropertyInsideAStruct: number;
	ObjectPropertyInsideAStruct: UObject;
	InnerStruct: PropertyEditorTestSubStruct;
	clone() : PropertyEditorTestBasicStruct;
	static C(Other: UObject): PropertyEditorTestBasicStruct;
}

declare class PropertyEditorTestObject extends UObject { 
	Int8Property: any;
	Int16roperty: any;
	Int32Property: number;
	Int64Property: any;
	ByteProperty: number;
	UnsignedInt16Property: any;
	UnsignedInt32Property: any;
	UnsignedInt64Property: any;
	FloatProperty: number;
	NameProperty: string;
	BoolProperty: boolean;
	StringProperty: string;
	TextProperty: string;
	Vector3Property: Vector;
	Vector2Property: Vector2D;
	Vector4Property: Vector4;
	RotatorProperty: Rotator;
	ObjectProperty: UObject;
	ClassProperty: UnrealEngineClass;
	LinearColorProperty: LinearColor;
	ColorProperty: Color;
	EnumProperty: PropertEditorTestEnum;
	IntProperty32Array: number[];
	BytePropertyArray: number[];
	FloatPropertyArray: number[];
	NamePropertyArray: string[];
	BoolPropertyArray: boolean[];
	StringPropertyArray: string[];
	TextPropertyArray: string[];
	Vector3PropertyArray: Vector[];
	Vector2PropertyArray: Vector2D[];
	Vector4PropertyArray: Vector4[];
	RotatorPropertyArray: Rotator[];
	ObjectPropertyArray: UObject[];
	ActorPropertyArray: Actor[];
	LinearColorPropertyArray: LinearColor[];
	ColorPropertyArray: Color[];
	EnumPropertyArray: PropertEditorTestEnum[];
	StructPropertyArray: PropertyEditorTestBasicStruct[];
	FixedArrayOfInts: number[];
	StaticArrayOfInts: number;
	StaticArrayOfIntsWithEnumLabels: number;
	FloatPropertyWithClampedRange: number;
	IntPropertyWithClampedRange: number;
	IntThatCannotBeChanged: number;
	StringThatCannotBeChanged: string;
	ObjectThatCannotBeChanged: PrimitiveComponent;
	StringPasswordProperty: string;
	TextPasswordProperty: string;
	ThisIsBrokenIfItsVisibleInADetailsView: PropertyEditorTestBasicStruct;
	StructWithMultipleInstances1: PropertyEditorTestBasicStruct;
	StructWithMultipleInstances2: PropertyEditorTestBasicStruct;
	AssetReferenceCustomStruct: StringAssetReference;
	AssetReferenceCustomStructWithThumbnail: StringAssetReference;
	bEditCondition: boolean;
	SimplePropertyWithEditCondition: number;
	AssetReferenceCustomStructWithEditCondition: StringAssetReference;
	ArrayOfStructs: PropertyEditorTestBasicStruct[];
	EditInlineNewStaticMeshComponent: StaticMeshComponent;
	ArrayOfEditInlineNewSMCs: StaticMeshComponent[];
	TextureProp: Texture;
	StaticMeshProp: StaticMesh;
	AnyMaterialInterface: MaterialInterface;
	OnlyActorsAllowed: Actor;
	Int32Set: any;
	FloatSet: any;
	StringSet: any;
	ObjectSet: any;
	ActorSet: any;
	Int32ToStringMap: any;
	StringToColorMap: any;
	Int32ToStructMap: any;
	StringToFloatMap: any;
	StringToObjectMap: any;
	StringToActorMap: any;
	ObjectToInt32Map: any;
	ObjectToColorMap: any;
	BlendableInterface: any;
	AnimClassInterface: any;
	LightPropagationVolumeBlendable: any;
	TextureOrBlendableInterface: UObject;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PropertyEditorTestObject;
	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestObject;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PropertyEditorTestObject;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestObject;
	static C(Other: UObject): PropertyEditorTestObject;
}

declare class RenderTargetExporterHDR extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RenderTargetExporterHDR;
	static Find(Outer: UObject, ResourceName: string): RenderTargetExporterHDR;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RenderTargetExporterHDR;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RenderTargetExporterHDR;
	static C(Other: UObject): RenderTargetExporterHDR;
}

declare class ReplaceActorCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReplaceActorCommandlet;
	static Find(Outer: UObject, ResourceName: string): ReplaceActorCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReplaceActorCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaceActorCommandlet;
	static C(Other: UObject): ReplaceActorCommandlet;
}

declare class ResavePackagesCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ResavePackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ResavePackagesCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ResavePackagesCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ResavePackagesCommandlet;
	static C(Other: UObject): ResavePackagesCommandlet;
}

declare class FixupNeedsLoadForEditorGameCommandlet extends ResavePackagesCommandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FixupNeedsLoadForEditorGameCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixupNeedsLoadForEditorGameCommandlet;
	static C(Other: UObject): FixupNeedsLoadForEditorGameCommandlet;
}

declare class SceneThumbnailInfo extends ThumbnailInfo { 
	OrbitPitch: number;
	OrbitYaw: number;
	OrbitZoom: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SceneThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneThumbnailInfo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfo;
	static C(Other: UObject): SceneThumbnailInfo;
}

declare class ThumbnailRenderer extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailRenderer;
	static C(Other: UObject): ThumbnailRenderer;
}

declare class ThumbnailRenderingInfo { 
	ClassNeedingThumbnailName: string;
	ClassNeedingThumbnail: UnrealEngineClass;
	RendererClassName: string;
	Renderer: ThumbnailRenderer;
	clone() : ThumbnailRenderingInfo;
	static C(Other: UObject): ThumbnailRenderingInfo;
}

declare class ThumbnailManager extends UObject { 
	RenderableThumbnailTypes: ThumbnailRenderingInfo[];
	NotSupported: ThumbnailRenderingInfo;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorCylinder: StaticMesh;
	EditorPlane: StaticMesh;
	EditorSkySphere: StaticMesh;
	FloorPlaneMaterial: Material;
	AmbientCubemap: TextureCube;
	CheckerboardTexture: Texture2D;
	ThumbnailManagerClassName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ThumbnailManager;
	static Find(Outer: UObject, ResourceName: string): ThumbnailManager;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ThumbnailManager;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailManager;
	static C(Other: UObject): ThumbnailManager;
}

declare type EThumbnailPrimType = 'TPT_None' | 'TPT_Sphere' | 'TPT_Cube' | 'TPT_Plane' | 'TPT_Cylinder';
declare var EThumbnailPrimType : { TPT_None:'TPT_None',TPT_Sphere:'TPT_Sphere',TPT_Cube:'TPT_Cube',TPT_Plane:'TPT_Plane',TPT_Cylinder:'TPT_Cylinder', };
declare class SceneThumbnailInfoWithPrimitive extends SceneThumbnailInfo { 
	PrimitiveType: EThumbnailPrimType;
	PreviewMesh: StringAssetReference;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneThumbnailInfoWithPrimitive;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfoWithPrimitive;
	static C(Other: UObject): SceneThumbnailInfoWithPrimitive;
}

declare type EOrthoThumbnailDirection = 'Top' | 'Bottom' | 'Left' | 'Right' | 'Front' | 'Back';
declare var EOrthoThumbnailDirection : { Top:'Top',Bottom:'Bottom',Left:'Left',Right:'Right',Front:'Front',Back:'Back', };
declare class WorldThumbnailInfo extends SceneThumbnailInfo { 
	CameraMode: ECameraProjectionMode;
	OrthoDirection: EOrthoThumbnailDirection;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WorldThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailInfo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WorldThumbnailInfo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailInfo;
	static C(Other: UObject): WorldThumbnailInfo;
}

declare class SequenceExporterT3D extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SequenceExporterT3D;
	static Find(Outer: UObject, ResourceName: string): SequenceExporterT3D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SequenceExporterT3D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceExporterT3D;
	static C(Other: UObject): SequenceExporterT3D;
}

declare class SkeletalMeshExporterFBX extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SkeletalMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshExporterFBX;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SkeletalMeshExporterFBX;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshExporterFBX;
	static C(Other: UObject): SkeletalMeshExporterFBX;
}

declare class SoundClassGraph extends EdGraph { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundClassGraph;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundClassGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraph;
	static C(Other: UObject): SoundClassGraph;
}

declare class SoundClassGraphNode extends EdGraphNode { 
	SoundClass: SoundClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundClassGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundClassGraphNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphNode;
	static C(Other: UObject): SoundClassGraphNode;
}

declare class SoundClassGraphSchema extends EdGraphSchema { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundClassGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundClassGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphSchema;
	static C(Other: UObject): SoundClassGraphSchema;
}

declare class SoundCueGraph extends EdGraph { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCueGraph;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraph;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCueGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraph;
	static C(Other: UObject): SoundCueGraph;
}

declare class SoundCueGraphNode_Base extends EdGraphNode { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCueGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Base;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCueGraphNode_Base;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Base;
	static C(Other: UObject): SoundCueGraphNode_Base;
}

declare class SoundCueGraphNode extends SoundCueGraphNode_Base { 
	SoundNode: SoundNode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCueGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCueGraphNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode;
	static C(Other: UObject): SoundCueGraphNode;
}

declare class SoundCueGraphNode_Root extends SoundCueGraphNode_Base { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCueGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Root;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCueGraphNode_Root;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Root;
	static C(Other: UObject): SoundCueGraphNode_Root;
}

declare class SoundCueGraphSchema extends EdGraphSchema { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundCueGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphSchema;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundCueGraphSchema;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphSchema;
	static C(Other: UObject): SoundCueGraphSchema;
}

declare class SoundExporterOGG extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundExporterOGG;
	static Find(Outer: UObject, ResourceName: string): SoundExporterOGG;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundExporterOGG;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterOGG;
	static C(Other: UObject): SoundExporterOGG;
}

declare class SoundExporterWAV extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundExporterWAV;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundExporterWAV;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterWAV;
	static C(Other: UObject): SoundExporterWAV;
}

declare class SoundSurroundExporterWAV extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundSurroundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundExporterWAV;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundSurroundExporterWAV;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundExporterWAV;
	static C(Other: UObject): SoundSurroundExporterWAV;
}

declare class StabilizeLocalizationKeysCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StabilizeLocalizationKeysCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StabilizeLocalizationKeysCommandlet;
	static C(Other: UObject): StabilizeLocalizationKeysCommandlet;
}

declare class StaticMeshExporterFBX extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StaticMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterFBX;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StaticMeshExporterFBX;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterFBX;
	static C(Other: UObject): StaticMeshExporterFBX;
}

declare class StaticMeshExporterOBJ extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StaticMeshExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterOBJ;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StaticMeshExporterOBJ;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterOBJ;
	static C(Other: UObject): StaticMeshExporterOBJ;
}

declare class SwapSoundForDialogueInCuesCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SwapSoundForDialogueInCuesCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SwapSoundForDialogueInCuesCommandlet;
	static C(Other: UObject): SwapSoundForDialogueInCuesCommandlet;
}

declare class TemplateMapMetadata extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TemplateMapMetadata;
	static Find(Outer: UObject, ResourceName: string): TemplateMapMetadata;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TemplateMapMetadata;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateMapMetadata;
	static C(Other: UObject): TemplateMapMetadata;
}

declare type ETexAlign = 'TEXALIGN_None' | 'TEXALIGN_Default' | 'TEXALIGN_Box' | 'TEXALIGN_Planar' | 'TEXALIGN_Fit' | 'TEXALIGN_PlanarAuto' | 'TEXALIGN_PlanarWall' | 'TEXALIGN_PlanarFloor';
declare var ETexAlign : { TEXALIGN_None:'TEXALIGN_None',TEXALIGN_Default:'TEXALIGN_Default',TEXALIGN_Box:'TEXALIGN_Box',TEXALIGN_Planar:'TEXALIGN_Planar',TEXALIGN_Fit:'TEXALIGN_Fit',TEXALIGN_PlanarAuto:'TEXALIGN_PlanarAuto',TEXALIGN_PlanarWall:'TEXALIGN_PlanarWall',TEXALIGN_PlanarFloor:'TEXALIGN_PlanarFloor', };
declare class TexAligner extends UObject { 
	DefTexAlign: ETexAlign;
	TAxis: number;
	UTile: number;
	VTile: number;
	Desc: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TexAligner;
	static Find(Outer: UObject, ResourceName: string): TexAligner;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TexAligner;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAligner;
	static C(Other: UObject): TexAligner;
}

declare class TexAlignerBox extends TexAligner { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TexAlignerBox;
	static Find(Outer: UObject, ResourceName: string): TexAlignerBox;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TexAlignerBox;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerBox;
	static C(Other: UObject): TexAlignerBox;
}

declare class TexAlignerDefault extends TexAligner { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TexAlignerDefault;
	static Find(Outer: UObject, ResourceName: string): TexAlignerDefault;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TexAlignerDefault;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerDefault;
	static C(Other: UObject): TexAlignerDefault;
}

declare class TexAlignerFit extends TexAligner { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TexAlignerFit;
	static Find(Outer: UObject, ResourceName: string): TexAlignerFit;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TexAlignerFit;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerFit;
	static C(Other: UObject): TexAlignerFit;
}

declare class TexAlignerPlanar extends TexAligner { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TexAlignerPlanar;
	static Find(Outer: UObject, ResourceName: string): TexAlignerPlanar;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TexAlignerPlanar;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerPlanar;
	static C(Other: UObject): TexAlignerPlanar;
}

declare class TextBufferExporterTXT extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextBufferExporterTXT;
	static Find(Outer: UObject, ResourceName: string): TextBufferExporterTXT;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextBufferExporterTXT;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBufferExporterTXT;
	static C(Other: UObject): TextBufferExporterTXT;
}

declare class TextureCubeExporterHDR extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureCubeExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureCubeExporterHDR;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureCubeExporterHDR;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeExporterHDR;
	static C(Other: UObject): TextureCubeExporterHDR;
}

declare class TextureExporterBMP extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureExporterBMP;
	static Find(Outer: UObject, ResourceName: string): TextureExporterBMP;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureExporterBMP;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterBMP;
	static C(Other: UObject): TextureExporterBMP;
}

declare class TextureExporterHDR extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureExporterHDR;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureExporterHDR;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterHDR;
	static C(Other: UObject): TextureExporterHDR;
}

declare class TextureExporterPCX extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureExporterPCX;
	static Find(Outer: UObject, ResourceName: string): TextureExporterPCX;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureExporterPCX;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterPCX;
	static C(Other: UObject): TextureExporterPCX;
}

declare class TextureExporterTGA extends Exporter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureExporterTGA;
	static Find(Outer: UObject, ResourceName: string): TextureExporterTGA;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureExporterTGA;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterTGA;
	static C(Other: UObject): TextureExporterTGA;
}

declare class DefaultSizedThumbnailRenderer extends ThumbnailRenderer { 
	DefaultSizeX: number;
	DefaultSizeY: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DefaultSizedThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): DefaultSizedThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DefaultSizedThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultSizedThumbnailRenderer;
	static C(Other: UObject): DefaultSizedThumbnailRenderer;
}

declare class AnimBlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimBlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimBlueprintThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintThumbnailRenderer;
	static C(Other: UObject): AnimBlueprintThumbnailRenderer;
}

declare class AnimSequenceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimSequenceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimSequenceThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceThumbnailRenderer;
	static C(Other: UObject): AnimSequenceThumbnailRenderer;
}

declare class BlendSpaceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendSpaceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendSpaceThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceThumbnailRenderer;
	static C(Other: UObject): BlendSpaceThumbnailRenderer;
}

declare class BlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlueprintThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintThumbnailRenderer;
	static C(Other: UObject): BlueprintThumbnailRenderer;
}

declare class ClassThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ClassThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ClassThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ClassThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassThumbnailRenderer;
	static C(Other: UObject): ClassThumbnailRenderer;
}

declare class DestructibleMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DestructibleMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): DestructibleMeshThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructibleMeshThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleMeshThumbnailRenderer;
	static C(Other: UObject): DestructibleMeshThumbnailRenderer;
}

declare class LevelThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): LevelThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelThumbnailRenderer;
	static C(Other: UObject): LevelThumbnailRenderer;
}

declare class MaterialFunctionThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialFunctionThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialFunctionThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionThumbnailRenderer;
	static C(Other: UObject): MaterialFunctionThumbnailRenderer;
}

declare class MaterialInstanceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialInstanceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialInstanceThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceThumbnailRenderer;
	static C(Other: UObject): MaterialInstanceThumbnailRenderer;
}

declare class SkeletalMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SkeletalMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SkeletalMeshThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshThumbnailRenderer;
	static C(Other: UObject): SkeletalMeshThumbnailRenderer;
}

declare class SlateBrushThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SlateBrushThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SlateBrushThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SlateBrushThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushThumbnailRenderer;
	static C(Other: UObject): SlateBrushThumbnailRenderer;
}

declare class StaticMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StaticMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): StaticMeshThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StaticMeshThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshThumbnailRenderer;
	static C(Other: UObject): StaticMeshThumbnailRenderer;
}

declare class WorldThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	GlobalOrbitPitchOffset: number;
	GlobalOrbitYawOffset: number;
	bUseUnlitScene: boolean;
	bAllowWorldThumbnails: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WorldThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WorldThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailRenderer;
	static C(Other: UObject): WorldThumbnailRenderer;
}

declare class SoundWaveThumbnailRenderer extends ThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundWaveThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SoundWaveThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundWaveThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveThumbnailRenderer;
	static C(Other: UObject): SoundWaveThumbnailRenderer;
}

declare class TextureThumbnailRenderer extends ThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureThumbnailRenderer;
	static C(Other: UObject): TextureThumbnailRenderer;
}

declare class FontThumbnailRenderer extends TextureThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FontThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): FontThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FontThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontThumbnailRenderer;
	static C(Other: UObject): FontThumbnailRenderer;
}

declare class ParticleSystemThumbnailRenderer extends TextureThumbnailRenderer { 
	NoImage: Texture2D;
	OutOfDate: Texture2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleSystemThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleSystemThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemThumbnailRenderer;
	static C(Other: UObject): ParticleSystemThumbnailRenderer;
}

declare class SubsurfaceProfileRenderer extends TextureThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SubsurfaceProfileRenderer;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubsurfaceProfileRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileRenderer;
	static C(Other: UObject): SubsurfaceProfileRenderer;
}

declare class TextureCubeThumbnailRenderer extends TextureThumbnailRenderer { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureCubeThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureCubeThumbnailRenderer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureCubeThumbnailRenderer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeThumbnailRenderer;
	static C(Other: UObject): TextureCubeThumbnailRenderer;
}

declare class TransBuffer extends Transactor { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TransBuffer;
	static Find(Outer: UObject, ResourceName: string): TransBuffer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TransBuffer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransBuffer;
	static C(Other: UObject): TransBuffer;
}

declare class UpdateGameProjectCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UpdateGameProjectCommandlet;
	static Find(Outer: UObject, ResourceName: string): UpdateGameProjectCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UpdateGameProjectCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UpdateGameProjectCommandlet;
	static C(Other: UObject): UpdateGameProjectCommandlet;
}

declare class StructVariableDescription { 
	VarName: string;
	VarGuid: Guid;
	FriendlyName: string;
	DefaultValue: string;
	Category: string;
	SubCategory: string;
	SubCategoryObject: any;
	bIsArray: boolean;
	bInvalidMember: boolean;
	CurrentDefaultValue: string;
	ToolTip: string;
	bDontEditoOnInstance: boolean;
	bEnableMultiLineText: boolean;
	bEnable3dWidget: boolean;
	clone() : StructVariableDescription;
	static C(Other: UObject): StructVariableDescription;
}

declare class UserDefinedStructEditorData extends UObject { 
	UniqueNameId: any;
	VariablesDescriptions: StructVariableDescription[];
	ToolTip: string;
	NativeBase: ScriptStruct;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UserDefinedStructEditorData;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStructEditorData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UserDefinedStructEditorData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStructEditorData;
	static C(Other: UObject): UserDefinedStructEditorData;
}

declare class WrangleContentCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WrangleContentCommandlet;
	static Find(Outer: UObject, ResourceName: string): WrangleContentCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WrangleContentCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrangleContentCommandlet;
	static C(Other: UObject): WrangleContentCommandlet;
}

declare class ControlPointMeshComponent extends StaticMeshComponent { 
	bSelected: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ControlPointMeshComponent;
	static Find(Outer: UObject, ResourceName: string): ControlPointMeshComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ControlPointMeshComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshComponent;
	static C(Other: UObject): ControlPointMeshComponent;
}

declare class LandscapeLayerInfoObject extends UObject { 
	LayerName: string;
	PhysMaterial: PhysicalMaterial;
	Hardness: number;
	bNoWeightBlend: boolean;
	LayerUsageDebugColor: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeLayerInfoObject;
	static Find(Outer: UObject, ResourceName: string): LandscapeLayerInfoObject;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeLayerInfoObject;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeLayerInfoObject;
	static C(Other: UObject): LandscapeLayerInfoObject;
}

declare class WeightmapLayerAllocationInfo { 
	LayerInfo: LandscapeLayerInfoObject;
	WeightmapTextureIndex: number;
	WeightmapTextureChannel: number;
	clone() : WeightmapLayerAllocationInfo;
	static C(Other: UObject): WeightmapLayerAllocationInfo;
}

declare class LandscapeComponent extends PrimitiveComponent { 
	SectionBaseX: number;
	SectionBaseY: number;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	OverrideMaterial: MaterialInterface;
	OverrideHoleMaterial: MaterialInterface;
	MaterialInstance: MaterialInstanceConstant;
	MaterialInstances: MaterialInstanceConstant[];
	WeightmapLayerAllocations: WeightmapLayerAllocationInfo[];
	WeightmapTextures: Texture2D[];
	XYOffsetmapTexture: Texture2D;
	WeightmapScaleBias: Vector4;
	WeightmapSubsectionOffset: number;
	HeightmapScaleBias: Vector4;
	HeightmapTexture: Texture2D;
	CachedLocalBox: Box;
	CollisionComponent: any;
	LightingGuid: Guid;
	MapBuildDataId: Guid;
	IrrelevantLights: Guid[];
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	StaticLightingResolution: number;
	ForcedLOD: number;
	LODBias: number;
	StateId: Guid;
	BakedTextureMaterialGuid: Guid;
	GIBakedBaseColorTexture: Texture2D;
	LightingLODBias: number;
	LayerWhitelist: LandscapeLayerInfoObject[];
	SelectDataTexture: Texture2D;
	MobileDataSourceHash: Guid;
	MobileBlendableLayerMask: number;
	MobileMaterialInterface: MaterialInterface;
	MobileWeightNormalmapTexture: Texture2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeComponent;
	static C(Other: UObject): LandscapeComponent;
}

declare class LandscapeSplineSegmentConnection { 
	ControlPoint: LandscapeSplineControlPoint;
	TangentLen: number;
	SocketName: string;
	clone() : LandscapeSplineSegmentConnection;
	static C(Other: UObject): LandscapeSplineSegmentConnection;
}

declare type LandscapeSplineMeshOrientation = 'LSMO_XUp' | 'LSMO_YUp';
declare var LandscapeSplineMeshOrientation : { LSMO_XUp:'LSMO_XUp',LSMO_YUp:'LSMO_YUp', };
declare class LandscapeSplineMeshEntry { 
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	bCenterH: boolean;
	CenterAdjust: Vector2D;
	bScaleToWidth: boolean;
	Scale: Vector;
	Orientation: LandscapeSplineMeshOrientation;
	ForwardAxis: ESplineMeshAxis;
	UpAxis: ESplineMeshAxis;
	clone() : LandscapeSplineMeshEntry;
	static C(Other: UObject): LandscapeSplineMeshEntry;
}

declare class LandscapeSplineInterpPoint { 
	Center: Vector;
	Left: Vector;
	Right: Vector;
	FalloffLeft: Vector;
	FalloffRight: Vector;
	StartEndFalloff: number;
	clone() : LandscapeSplineInterpPoint;
	static C(Other: UObject): LandscapeSplineInterpPoint;
}

declare class LandscapeSplineSegment extends UObject { 
	Connections: LandscapeSplineSegmentConnection;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	SplineMeshes: LandscapeSplineMeshEntry[];
	bEnableCollision: boolean;
	bCastShadow: boolean;
	RandomSeed: number;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	bSelected: boolean;
	bNavDirty: boolean;
	SplineInfo: InterpCurveVector;
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponents: SplineMeshComponent[];
	ForeignWorlds: any[];
	ModificationKey: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeSplineSegment;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineSegment;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeSplineSegment;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineSegment;
	static C(Other: UObject): LandscapeSplineSegment;
}

declare class LandscapeSplineConnection { 
	Segment: LandscapeSplineSegment;
	End: boolean;
	clone() : LandscapeSplineConnection;
	static C(Other: UObject): LandscapeSplineConnection;
}

declare class LandscapeSplineControlPoint extends UObject { 
	Location: Vector;
	Rotation: Rotator;
	Width: number;
	SideFalloff: number;
	EndFalloff: number;
	SegmentMeshOffset: number;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	MeshScale: Vector;
	bEnableCollision: boolean;
	bCastShadow: boolean;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	bSelected: boolean;
	bNavDirty: boolean;
	ConnectedSegments: LandscapeSplineConnection[];
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponent: ControlPointMeshComponent;
	ForeignWorld: any;
	ModificationKey: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeSplineControlPoint;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineControlPoint;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeSplineControlPoint;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineControlPoint;
	static C(Other: UObject): LandscapeSplineControlPoint;
}

declare class LandscapeSplinesComponent extends PrimitiveComponent { 
	SplineResolution: number;
	SplineColor: Color;
	ControlPointSprite: Texture2D;
	SplineEditorMesh: StaticMesh;
	bShowSplineEditorMesh: boolean;
	ControlPoints: LandscapeSplineControlPoint[];
	Segments: LandscapeSplineSegment[];
	ForeignWorldSplineDataMap: any;
	CookedForeignMeshComponents: MeshComponent[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeSplinesComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplinesComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeSplinesComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplinesComponent;
	static C(Other: UObject): LandscapeSplinesComponent;
}

declare type ELandscapeLODFalloff = 'Linear' | 'SquareRoot';
declare var ELandscapeLODFalloff : { Linear:'Linear',SquareRoot:'SquareRoot', };
declare class LandscapeHeightfieldCollisionComponent extends PrimitiveComponent { 
	ComponentLayerInfos: LandscapeLayerInfoObject[];
	SectionBaseX: number;
	SectionBaseY: number;
	CollisionSizeQuads: number;
	CollisionScale: number;
	SimpleCollisionSizeQuads: number;
	CollisionQuadFlags: number[];
	HeightfieldGuid: Guid;
	CachedLocalBox: Box;
	RenderComponent: any;
	CookedPhysicalMaterials: PhysicalMaterial[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeHeightfieldCollisionComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeHeightfieldCollisionComponent;
	static C(Other: UObject): LandscapeHeightfieldCollisionComponent;
}

declare class LandscapeEditorLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	ReimportLayerFilePath: string;
	clone() : LandscapeEditorLayerSettings;
	static C(Other: UObject): LandscapeEditorLayerSettings;
}

declare class LandscapeProxy extends Actor { 
	SplineComponent: LandscapeSplinesComponent;
	LandscapeGuid: Guid;
	LandscapeSectionOffset: IntPoint;
	MaxLODLevel: number;
	LODDistanceFactor: number;
	LODFalloff: ELandscapeLODFalloff;
	ExportLOD: number;
	StaticLightingLOD: number;
	DefaultPhysMaterial: PhysicalMaterial;
	StreamingDistanceMultiplier: number;
	LandscapeMaterial: MaterialInterface;
	LandscapeHoleMaterial: MaterialInterface;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	LandscapeComponents: LandscapeComponent[];
	CollisionComponents: LandscapeHeightfieldCollisionComponent[];
	FoliageComponents: HierarchicalInstancedStaticMeshComponent[];
	bHasLandscapeGrass: boolean;
	StaticLightingResolution: number;
	bCastStaticShadow: boolean;
	bCastShadowAsTwoSided: boolean;
	bCastFarShadow: boolean;
	bUseMaterialPositionOffsetInStaticLighting: boolean;
	bIsMovingToLevel: boolean;
	LightmassSettings: LightmassPrimitiveSettings;
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	CollisionThickness: number;
	BodyInstance: BodyInstance;
	bGenerateOverlapEvents: boolean;
	bBakeMaterialPositionOffsetIntoCollision: boolean;
	EditorCachedLayerInfos: LandscapeLayerInfoObject[];
	ReimportHeightmapFilePath: string;
	EditorLayerSettings: LandscapeEditorLayerSettings[];
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	bUsedForNavigation: boolean;
	NavigationGeometryGatheringMode: ENavDataGatheringMode;
	MaxPaintedLayersPerComponent: number;
	bUseLandscapeForCullingInvisibleHLODVertices: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeProxy;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeProxy;
	EditorApplySpline(InSplineComponent: SplineComponent,StartWidth: number,EndWidth: number,StartSideFalloff: number,EndSideFalloff: number,StartRoll: number,EndRoll: number,NumSubdivisions: number,bRaiseHeights: boolean,bLowerHeights: boolean,PaintLayer: LandscapeLayerInfoObject): void;
	ChangeLODDistanceFactor(InLODDistanceFactor: number): void;
	static C(Other: UObject): LandscapeProxy;
}

declare class LandscapeInfoLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	LayerName: string;
	ThumbnailMIC: MaterialInstanceConstant;
	Owner: LandscapeProxy;
	DebugColorChannel: number;
	bValid: boolean;
	clone() : LandscapeInfoLayerSettings;
	static C(Other: UObject): LandscapeInfoLayerSettings;
}

declare type ELandscapeLayerPaintingRestriction = 'None' | 'UseMaxLayers' | 'ExistingOnly' | 'UseComponentWhitelist';
declare var ELandscapeLayerPaintingRestriction : { None:'None',UseMaxLayers:'UseMaxLayers',ExistingOnly:'ExistingOnly',UseComponentWhitelist:'UseComponentWhitelist', };
declare class LandscapeInfo extends UObject { 
	LandscapeActor: any;
	LandscapeGuid: Guid;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	ComponentNumSubsections: number;
	DrawScale: Vector;
	Layers: LandscapeInfoLayerSettings[];
	Proxies: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeInfo;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeInfo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfo;
	static C(Other: UObject): LandscapeInfo;
	GetAlphamapDataToMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetHeightmapDataToMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetLandscapeExtent(MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	GetLayerInfoByName(LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	SetAlphamapDataFromMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
	SetHeightmapDataFromMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetAlphamapDataToMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetHeightmapDataToMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetLandscapeExtent(LandscapeInfo: LandscapeInfo,MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	static GetLayerInfoByName(LandscapeInfo: LandscapeInfo,LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	static SetAlphamapDataFromMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
	static SetHeightmapDataFromMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
}

declare class LandscapeGizmoActor extends Actor { 
	Width: number;
	Height: number;
	LengthZ: number;
	MarginZ: number;
	MinRelativeZ: number;
	RelativeScaleZ: number;
	TargetLandscapeInfo: LandscapeInfo;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeGizmoActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActor;
	static C(Other: UObject): LandscapeGizmoActor;
}

declare type ELandscapeGizmoType = 'LGT_None' | 'LGT_Height' | 'LGT_Weight';
declare var ELandscapeGizmoType : { LGT_None:'LGT_None',LGT_Height:'LGT_Height',LGT_Weight:'LGT_Weight', };
declare class LandscapeGizmoActiveActor extends LandscapeGizmoActor { 
	DataType: ELandscapeGizmoType;
	GizmoTexture: Texture2D;
	TextureScale: Vector2D;
	SampledHeight: Vector[];
	SampledNormal: Vector[];
	SampleSizeX: number;
	SampleSizeY: number;
	CachedWidth: number;
	CachedHeight: number;
	CachedScaleXY: number;
	FrustumVerts: Vector;
	GizmoMaterial: Material;
	GizmoDataMaterial: MaterialInstance;
	GizmoMeshMaterial: Material;
	LayerInfos: LandscapeLayerInfoObject[];
	bSnapToLandscapeGrid: boolean;
	UnsnappedRotation: Rotator;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeGizmoActiveActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActiveActor;
	static C(Other: UObject): LandscapeGizmoActiveActor;
}

declare class LandscapeGizmoRenderComponent extends PrimitiveComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeGizmoRenderComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeGizmoRenderComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeGizmoRenderComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoRenderComponent;
	static C(Other: UObject): LandscapeGizmoRenderComponent;
}

declare type EGrassScaling = 'Uniform' | 'Free' | 'LockXY';
declare var EGrassScaling : { Uniform:'Uniform',Free:'Free',LockXY:'LockXY', };
declare class GrassVariety { 
	GrassMesh: StaticMesh;
	GrassDensity: number;
	bUseGrid: boolean;
	PlacementJitter: number;
	StartCullDistance: number;
	EndCullDistance: number;
	MinLOD: number;
	Scaling: EGrassScaling;
	ScaleX: FloatInterval;
	ScaleY: FloatInterval;
	ScaleZ: FloatInterval;
	RandomRotation: boolean;
	AlignToSurface: boolean;
	bUseLandscapeLightmap: boolean;
	LightingChannels: LightingChannels;
	bReceivesDecals: boolean;
	clone() : GrassVariety;
	static C(Other: UObject): GrassVariety;
}

declare class LandscapeGrassType extends UObject { 
	GrassVarieties: GrassVariety[];
	GrassMesh: StaticMesh;
	GrassDensity: number;
	PlacementJitter: number;
	StartCullDistance: number;
	EndCullDistance: number;
	RandomRotation: boolean;
	AlignToSurface: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeGrassType;
	static Find(Outer: UObject, ResourceName: string): LandscapeGrassType;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeGrassType;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGrassType;
	static C(Other: UObject): LandscapeGrassType;
}

declare class LandscapeMeshCollisionComponent extends LandscapeHeightfieldCollisionComponent { 
	MeshGuid: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeMeshCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshCollisionComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeMeshCollisionComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshCollisionComponent;
	static C(Other: UObject): LandscapeMeshCollisionComponent;
}

declare class LandscapeInfoMap extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeInfoMap;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfoMap;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeInfoMap;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfoMap;
	static C(Other: UObject): LandscapeInfoMap;
}

declare class LandscapeMaterialInstanceConstant extends MaterialInstanceConstant { 
	bIsLayerThumbnail: boolean;
	bDisableTessellation: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeMaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): LandscapeMaterialInstanceConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeMaterialInstanceConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMaterialInstanceConstant;
	static C(Other: UObject): LandscapeMaterialInstanceConstant;
}

declare class LandscapeMeshProxyComponent extends StaticMeshComponent { 
	LandscapeGuid: Guid;
	ProxyComponentBases: IntPoint[];
	ProxyLOD: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LandscapeMeshProxyComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshProxyComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeMeshProxyComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyComponent;
	static C(Other: UObject): LandscapeMeshProxyComponent;
}

declare class LandscapeMeshProxyActor extends Actor { 
	LandscapeMeshProxyComponent: LandscapeMeshProxyComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeMeshProxyActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyActor;
	static C(Other: UObject): LandscapeMeshProxyActor;
}

declare class Landscape extends LandscapeProxy { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Landscape;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Landscape;
	static C(Other: UObject): Landscape;
	GetLandscapeInfo(bSpawnNewActor: boolean): LandscapeInfo;
	static GetLandscapeInfo(Landscape: Landscape,bSpawnNewActor: boolean): LandscapeInfo;
}

declare class LandscapeStreamingProxy extends LandscapeProxy { 
	LandscapeActor: any;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LandscapeStreamingProxy;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeStreamingProxy;
	static C(Other: UObject): LandscapeStreamingProxy;
}

declare class MaterialExpressionCustomOutput extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustomOutput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCustomOutput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustomOutput;
	static C(Other: UObject): MaterialExpressionCustomOutput;
}

declare class GrassInput { 
	Name: string;
	GrassType: LandscapeGrassType;
	Input: ExpressionInput;
	clone() : GrassInput;
	static C(Other: UObject): GrassInput;
}

declare class MaterialExpressionLandscapeGrassOutput extends MaterialExpressionCustomOutput { 
	GrassTypes: GrassInput[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeGrassOutput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeGrassOutput;
	static C(Other: UObject): MaterialExpressionLandscapeGrassOutput;
}

declare type ELandscapeLayerBlendType = 'LB_WeightBlend' | 'LB_AlphaBlend' | 'LB_HeightBlend';
declare var ELandscapeLayerBlendType : { LB_WeightBlend:'LB_WeightBlend',LB_AlphaBlend:'LB_AlphaBlend',LB_HeightBlend:'LB_HeightBlend', };
declare class LayerBlendInput { 
	LayerName: string;
	BlendType: ELandscapeLayerBlendType;
	LayerInput: ExpressionInput;
	HeightInput: ExpressionInput;
	PreviewWeight: number;
	ConstLayerInput: Vector;
	ConstHeightInput: number;
	clone() : LayerBlendInput;
	static C(Other: UObject): LayerBlendInput;
}

declare class MaterialExpressionLandscapeLayerBlend extends MaterialExpression { 
	Layers: LayerBlendInput[];
	ExpressionGUID: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerBlend;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerBlend;
	static C(Other: UObject): MaterialExpressionLandscapeLayerBlend;
}

declare type ETerrainCoordMappingType = 'TCMT_Auto' | 'TCMT_XY' | 'TCMT_XZ' | 'TCMT_YZ';
declare var ETerrainCoordMappingType : { TCMT_Auto:'TCMT_Auto',TCMT_XY:'TCMT_XY',TCMT_XZ:'TCMT_XZ',TCMT_YZ:'TCMT_YZ', };
declare type ELandscapeCustomizedCoordType = 'LCCT_None' | 'LCCT_CustomUV0' | 'LCCT_CustomUV1' | 'LCCT_CustomUV2' | 'LCCT_WeightMapUV';
declare var ELandscapeCustomizedCoordType : { LCCT_None:'LCCT_None',LCCT_CustomUV0:'LCCT_CustomUV0',LCCT_CustomUV1:'LCCT_CustomUV1',LCCT_CustomUV2:'LCCT_CustomUV2',LCCT_WeightMapUV:'LCCT_WeightMapUV', };
declare class MaterialExpressionLandscapeLayerCoords extends MaterialExpression { 
	MappingType: ETerrainCoordMappingType;
	CustomUVType: ELandscapeCustomizedCoordType;
	MappingScale: number;
	MappingRotation: number;
	MappingPanU: number;
	MappingPanV: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerCoords;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerCoords;
	static C(Other: UObject): MaterialExpressionLandscapeLayerCoords;
}

declare class MaterialExpressionLandscapeLayerSample extends MaterialExpression { 
	ParameterName: string;
	PreviewWeight: number;
	ExpressionGUID: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSample;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSample;
	static C(Other: UObject): MaterialExpressionLandscapeLayerSample;
}

declare class MaterialExpressionLandscapeLayerSwitch extends MaterialExpression { 
	LayerUsed: ExpressionInput;
	LayerNotUsed: ExpressionInput;
	ParameterName: string;
	PreviewUsed: boolean;
	ExpressionGUID: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSwitch;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSwitch;
	static C(Other: UObject): MaterialExpressionLandscapeLayerSwitch;
}

declare class MaterialExpressionLandscapeLayerWeight extends MaterialExpression { 
	Base: ExpressionInput;
	Layer: ExpressionInput;
	ParameterName: string;
	PreviewWeight: number;
	ConstBase: Vector;
	ExpressionGUID: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerWeight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerWeight;
	static C(Other: UObject): MaterialExpressionLandscapeLayerWeight;
}

declare class MaterialExpressionLandscapeVisibilityMask extends MaterialExpression { 
	ExpressionGUID: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLandscapeVisibilityMask;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeVisibilityMask;
	static C(Other: UObject): MaterialExpressionLandscapeVisibilityMask;
}

declare class HandlerComponentFactory extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): HandlerComponentFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HandlerComponentFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HandlerComponentFactory;
	static C(Other: UObject): HandlerComponentFactory;
}

declare class EngineBaseTypes extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EngineBaseTypes;
	static Find(Outer: UObject, ResourceName: string): EngineBaseTypes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EngineBaseTypes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineBaseTypes;
	static C(Other: UObject): EngineBaseTypes;
}

declare class EngineTypes extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EngineTypes;
	static Find(Outer: UObject, ResourceName: string): EngineTypes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EngineTypes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineTypes;
	static C(Other: UObject): EngineTypes;
}

declare class Interface_AssetUserData extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Interface_AssetUserData;
	static Find(Outer: UObject, ResourceName: string): Interface_AssetUserData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Interface_AssetUserData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_AssetUserData;
	static C(Other: UObject): Interface_AssetUserData;
}

declare class AmbientSound extends Actor { 
	AudioComponent: AudioComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AmbientSound;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AmbientSound;
	Stop(): void;
	Play(StartTime: number): void;
	FadeOut(FadeOutDuration: number,FadeVolumeLevel: number): void;
	FadeIn(FadeInDuration: number,FadeVolumeLevel: number): void;
	AdjustVolume(AdjustVolumeDuration: number,AdjustVolumeLevel: number): void;
	static C(Other: UObject): AmbientSound;
}

declare class BrushShape extends Brush { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BrushShape;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushShape;
	static C(Other: UObject): BrushShape;
}

declare class AudioVolume extends Volume { 
	Priority: number;
	bEnabled: boolean;
	Settings: ReverbSettings;
	AmbientZoneSettings: InteriorSettings;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AudioVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioVolume;
	SetReverbSettings(NewReverbSettings: ReverbSettings): void;
	SetPriority(NewPriority: number): void;
	SetInteriorSettings(NewInteriorSettings: InteriorSettings): void;
	SetEnabled(bNewEnabled: boolean): void;
	OnRep_bEnabled(): void;
	static C(Other: UObject): AudioVolume;
}

declare class BlockingVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlockingVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlockingVolume;
	static C(Other: UObject): BlockingVolume;
}

declare class CameraBlockingVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CameraBlockingVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraBlockingVolume;
	static C(Other: UObject): CameraBlockingVolume;
}

declare class CullDistanceSizePair { 
	Size: number;
	CullDistance: number;
	clone() : CullDistanceSizePair;
	static C(Other: UObject): CullDistanceSizePair;
}

declare class CullDistanceVolume extends Volume { 
	CullDistances: CullDistanceSizePair[];
	bEnabled: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CullDistanceVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CullDistanceVolume;
	static C(Other: UObject): CullDistanceVolume;
}

declare class LightmassCharacterIndirectDetailVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmassCharacterIndirectDetailVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassCharacterIndirectDetailVolume;
	static C(Other: UObject): LightmassCharacterIndirectDetailVolume;
}

declare class LightmassImportanceVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmassImportanceVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassImportanceVolume;
	static C(Other: UObject): LightmassImportanceVolume;
}

declare class MeshMergeCullingVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MeshMergeCullingVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshMergeCullingVolume;
	static C(Other: UObject): MeshMergeCullingVolume;
}

declare class NavigationTypes extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavigationTypes;
	static Find(Outer: UObject, ResourceName: string): NavigationTypes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationTypes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTypes;
	static C(Other: UObject): NavigationTypes;
}

declare class NavRelevantInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavRelevantInterface;
	static Find(Outer: UObject, ResourceName: string): NavRelevantInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavRelevantInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantInterface;
	static C(Other: UObject): NavRelevantInterface;
}

declare class NavModifierVolume extends Volume { 
	AreaClass: UnrealEngineClass;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavModifierVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierVolume;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject): NavModifierVolume;
}

declare class KillZVolume extends PhysicsVolume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KillZVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KillZVolume;
	static C(Other: UObject): KillZVolume;
}

declare class PainCausingVolume extends PhysicsVolume { 
	bPainCausing: boolean;
	DamagePerSec: number;
	DamageType: UnrealEngineClass;
	PainInterval: number;
	bEntryPain: boolean;
	BACKUP_bPainCausing: boolean;
	DamageInstigator: Controller;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PainCausingVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PainCausingVolume;
	static C(Other: UObject): PainCausingVolume;
}

declare class BlendableInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendableInterface;
	static Find(Outer: UObject, ResourceName: string): BlendableInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendableInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendableInterface;
	static C(Other: UObject): BlendableInterface;
}

declare class Scene extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Scene;
	static Find(Outer: UObject, ResourceName: string): Scene;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Scene;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Scene;
	static C(Other: UObject): Scene;
}

declare class Interface_PostProcessVolume extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Interface_PostProcessVolume;
	static Find(Outer: UObject, ResourceName: string): Interface_PostProcessVolume;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Interface_PostProcessVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_PostProcessVolume;
	static C(Other: UObject): Interface_PostProcessVolume;
}

declare class PostProcessVolume extends Volume { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PostProcessVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessVolume;
	static C(Other: UObject): PostProcessVolume;
}

declare class PrecomputedVisibilityOverrideVolume extends Volume { 
	OverrideVisibleActors: Actor[];
	OverrideInvisibleActors: Actor[];
	OverrideInvisibleLevels: string[];
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PrecomputedVisibilityOverrideVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityOverrideVolume;
	static C(Other: UObject): PrecomputedVisibilityOverrideVolume;
}

declare class PrecomputedVisibilityVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PrecomputedVisibilityVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityVolume;
	static C(Other: UObject): PrecomputedVisibilityVolume;
}

declare class PreCullTrianglesVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PreCullTrianglesVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreCullTrianglesVolume;
	static C(Other: UObject): PreCullTrianglesVolume;
}

declare class TriggerVolume extends Volume { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TriggerVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerVolume;
	static C(Other: UObject): TriggerVolume;
}

declare class NavAgentInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavAgentInterface;
	static Find(Outer: UObject, ResourceName: string): NavAgentInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavAgentInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAgentInterface;
	static C(Other: UObject): NavAgentInterface;
}

declare class BoxComponent extends ShapeComponent { 
	BoxExtent: Vector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BoxComponent;
	static Find(Outer: UObject, ResourceName: string): BoxComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BoxComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxComponent;
	SetBoxExtent(InBoxExtent: Vector,bUpdateOverlaps: boolean): void;
	GetUnscaledBoxExtent(): Vector;
	GetScaledBoxExtent(): Vector;
	static C(Other: UObject): BoxComponent;
}

declare class DecalActor extends Actor { 
	Decal: DecalComponent;
	ArrowComponent: ArrowComponent;
	SpriteComponent: BillboardComponent;
	BoxComponent: BoxComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DecalActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DecalActor;
	SetDecalMaterial(NewDecalMaterial: MaterialInterface): void;
	GetDecalMaterial(): MaterialInterface;
	CreateDynamicMaterialInstance(): MaterialInstanceDynamic;
	static C(Other: UObject): DecalActor;
}

declare class FractureEffect { 
	ParticleSystem: ParticleSystem;
	Sound: SoundBase;
	clone() : FractureEffect;
	static C(Other: UObject): FractureEffect;
}

declare class DestructibleDamageParameters { 
	DamageThreshold: number;
	DamageSpread: number;
	bEnableImpactDamage: boolean;
	ImpactDamage: number;
	DefaultImpactDamageDepth: number;
	bCustomImpactResistance: boolean;
	ImpactResistance: number;
	clone() : DestructibleDamageParameters;
	static C(Other: UObject): DestructibleDamageParameters;
}

declare class DestructibleDebrisParameters { 
	DebrisLifetimeMin: number;
	DebrisLifetimeMax: number;
	DebrisMaxSeparationMin: number;
	DebrisMaxSeparationMax: number;
	ValidBounds: Box;
	clone() : DestructibleDebrisParameters;
	static C(Other: UObject): DestructibleDebrisParameters;
}

declare class DestructibleAdvancedParameters { 
	DamageCap: number;
	ImpactVelocityThreshold: number;
	MaxChunkSpeed: number;
	FractureImpulseScale: number;
	clone() : DestructibleAdvancedParameters;
	static C(Other: UObject): DestructibleAdvancedParameters;
}

declare class DestructibleSpecialHierarchyDepths { 
	SupportDepth: number;
	MinimumFractureDepth: number;
	bEnableDebris: boolean;
	DebrisDepth: number;
	EssentialDepth: number;
	clone() : DestructibleSpecialHierarchyDepths;
	static C(Other: UObject): DestructibleSpecialHierarchyDepths;
}

declare type EImpactDamageOverride = 'IDO_None' | 'IDO_On' | 'IDO_Off';
declare var EImpactDamageOverride : { IDO_None:'IDO_None',IDO_On:'IDO_On',IDO_Off:'IDO_Off', };
declare class DestructibleDepthParameters { 
	ImpactDamageOverride: EImpactDamageOverride;
	clone() : DestructibleDepthParameters;
	static C(Other: UObject): DestructibleDepthParameters;
}

declare class DestructibleParametersFlag { 
	bAccumulateDamage: boolean;
	bAssetDefinedSupport: boolean;
	bWorldSupport: boolean;
	bDebrisTimeout: boolean;
	bDebrisMaxSeparation: boolean;
	bCrumbleSmallestChunks: boolean;
	bAccurateRaycasts: boolean;
	bUseValidBounds: boolean;
	bFormExtendedStructures: boolean;
	clone() : DestructibleParametersFlag;
	static C(Other: UObject): DestructibleParametersFlag;
}

declare class DestructibleParameters { 
	DamageParameters: DestructibleDamageParameters;
	DebrisParameters: DestructibleDebrisParameters;
	AdvancedParameters: DestructibleAdvancedParameters;
	SpecialHierarchyDepths: DestructibleSpecialHierarchyDepths;
	DepthParameters: DestructibleDepthParameters[];
	Flags: DestructibleParametersFlag;
	clone() : DestructibleParameters;
	static C(Other: UObject): DestructibleParameters;
}

declare class FractureMaterial { 
	UVScale: Vector2D;
	UVOffset: Vector2D;
	Tangent: Vector;
	UAngle: number;
	InteriorElementIndex: number;
	clone() : FractureMaterial;
	static C(Other: UObject): FractureMaterial;
}

declare class DestructibleChunkParameters { 
	bIsSupportChunk: boolean;
	bDoNotFracture: boolean;
	bDoNotDamage: boolean;
	bDoNotCrumble: boolean;
	clone() : DestructibleChunkParameters;
	static C(Other: UObject): DestructibleChunkParameters;
}

declare class DestructibleFractureSettings extends UObject { 
	CellSiteCount: number;
	FractureMaterialDesc: FractureMaterial;
	RandomSeed: number;
	VoronoiSites: Vector[];
	OriginalSubmeshCount: number;
	Materials: MaterialInterface[];
	ChunkParameters: DestructibleChunkParameters[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DestructibleFractureSettings;
	static Find(Outer: UObject, ResourceName: string): DestructibleFractureSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructibleFractureSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleFractureSettings;
	static C(Other: UObject): DestructibleFractureSettings;
}

declare class Timespan { 
	clone() : Timespan;
	static C(Other: UObject): Timespan;
	AsTimespan(): string;
	Add_TimespanTimespan(B: Timespan): Timespan;
	BreakTimespan(Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	Equal(B: Timespan): boolean;
	GetDays(): number;
	GetDuration(): Timespan;
	GetHours(): number;
	GetMilliseconds(): number;
	GetMinutes(): number;
	GetSeconds(): number;
	GetTotalDays(): number;
	GetTotalHours(): number;
	GetTotalMilliseconds(): number;
	GetTotalMinutes(): number;
	GetTotalSeconds(): number;
	Greater_TimespanTimespan(B: Timespan): boolean;
	GreaterEqual_TimespanTimespan(B: Timespan): boolean;
	Less_TimespanTimespan(B: Timespan): boolean;
	LessEqual_TimespanTimespan(B: Timespan): boolean;
	Multiply_TimespanFloat(Scalar: number): Timespan;
	NotEqual(B: Timespan): boolean;
	Subtract_TimespanTimespan(B: Timespan): Timespan;
	TimespanRatio(B: Timespan): number;
	static AsTimespan(InTimespan: Timespan): string;
	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static BreakTimespan(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	static Equal(A: Timespan,B: Timespan): boolean;
	static GetDays(A: Timespan): number;
	static GetDuration(A: Timespan): Timespan;
	static GetHours(A: Timespan): number;
	static GetMilliseconds(A: Timespan): number;
	static GetMinutes(A: Timespan): number;
	static GetSeconds(A: Timespan): number;
	static GetTotalDays(A: Timespan): number;
	static GetTotalHours(A: Timespan): number;
	static GetTotalMilliseconds(A: Timespan): number;
	static GetTotalMinutes(A: Timespan): number;
	static GetTotalSeconds(A: Timespan): number;
	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static NotEqual(A: Timespan,B: Timespan): boolean;
	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static TimespanRatio(A: Timespan,B: Timespan): number;
	static FromDays(Days: number): Timespan;
	static FromHours(Hours: number): Timespan;
	static FromMilliseconds(Milliseconds: number): Timespan;
	static FromMinutes(Minutes: number): Timespan;
	static FromSeconds(Seconds: number): Timespan;
	static MakeTimespan(Days: number,Hours: number,Minutes: number,Seconds: number,Milliseconds: number): Timespan;
	static MaxValue(): Timespan;
	static MinValue(): Timespan;
	static ZeroValue(): Timespan;
}

declare class DateTime { 
	clone() : DateTime;
	static C(Other: UObject): DateTime;
	AsDate(): string;
	AsDateTime(): string;
	AsTime(): string;
	AsDate(InTimeZone: string): string;
	AsDateTime(InTimeZone: string): string;
	AsTime(InTimeZone: string): string;
	Add_DateTimeTimespan(B: Timespan): DateTime;
	BreakDateTime(Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	Equal(B: DateTime): boolean;
	GetDate(): DateTime;
	GetDay(): number;
	GetDayOfYear(): number;
	GetHour(): number;
	GetHour12(): number;
	GetMillisecond(): number;
	GetMinute(): number;
	GetMonth(): number;
	GetSecond(): number;
	GetTimeOfDay(): Timespan;
	GetYear(): number;
	Greater_DateTimeDateTime(B: DateTime): boolean;
	GreaterEqual_DateTimeDateTime(B: DateTime): boolean;
	IsAfternoon(): boolean;
	IsMorning(): boolean;
	Less_DateTimeDateTime(B: DateTime): boolean;
	LessEqual_DateTimeDateTime(B: DateTime): boolean;
	NotEqual(B: DateTime): boolean;
	Subtract_DateTimeDateTime(B: DateTime): Timespan;
	Subtract_DateTimeTimespan(B: Timespan): DateTime;
	ScheduleLocalNotificationAtTime(LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static AsDate(InDateTime: DateTime): string;
	static AsDateTime(In: DateTime): string;
	static AsTime(In: DateTime): string;
	static AsDate(InDateTime: DateTime,InTimeZone: string): string;
	static AsDateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTime(InDateTime: DateTime,InTimeZone: string): string;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static Equal(A: DateTime,B: DateTime): boolean;
	static GetDate(A: DateTime): DateTime;
	static GetDay(A: DateTime): number;
	static GetDayOfYear(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetHour12(A: DateTime): number;
	static GetMillisecond(A: DateTime): number;
	static GetMinute(A: DateTime): number;
	static GetMonth(A: DateTime): number;
	static GetSecond(A: DateTime): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetYear(A: DateTime): number;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static IsMorning(A: DateTime): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static NotEqual(A: DateTime,B: DateTime): boolean;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static MaxValue(): DateTime;
	static MinValue(): DateTime;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static Now(): DateTime;
	static Today(): DateTime;
	static UtcNow(): DateTime;
}

declare class DestructibleMesh extends SkeletalMesh { 
	DefaultDestructibleParameters: DestructibleParameters;
	FractureEffects: FractureEffect[];
	FractureSettings: DestructibleFractureSettings;
	SourceStaticMesh: StaticMesh;
	SourceSMImportTimestamp: DateTime;
	FractureChunkMeshes: StaticMesh[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DestructibleMesh;
	static Find(Outer: UObject, ResourceName: string): DestructibleMesh;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructibleMesh;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleMesh;
	static C(Other: UObject): DestructibleMesh;
}

declare class DestructibleComponent extends SkinnedMeshComponent { 
	bFractureEffectOverride: boolean;
	FractureEffects: FractureEffect[];
	bEnableHardSleeping: boolean;
	LargeChunkThreshold: number;
	DestructibleMesh: DestructibleMesh;
	OnComponentFracture: UnrealEngineMulticastDelegate<(HitPoint: Vector, HitDirection: Vector) => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DestructibleComponent;
	static Find(Outer: UObject, ResourceName: string): DestructibleComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructibleComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleComponent;
	SetDestructibleMesh(NewMesh: DestructibleMesh): void;
	GetDestructibleMesh(): DestructibleMesh;
	ApplyRadiusDamage(BaseDamage: number,HurtOrigin: Vector,DamageRadius: number,ImpulseStrength: number,bFullDamage: boolean): void;
	ApplyDamage(DamageAmount: number,HitLocation: Vector,ImpulseDir: Vector,ImpulseStrength: number): void;
	static C(Other: UObject): DestructibleComponent;
}

declare class DestructibleActor extends Actor { 
	DestructibleComponent: DestructibleComponent;
	bAffectNavigation: boolean;
	OnActorFracture: UnrealEngineMulticastDelegate<(HitPoint: Vector, HitDirection: Vector) => void>;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DestructibleActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleActor;
	static C(Other: UObject): DestructibleActor;
}

declare class MaterialSpriteElement { 
	Material: MaterialInterface;
	DistanceToOpacityCurve: CurveFloat;
	bSizeIsInScreenSpace: boolean;
	BaseSizeX: number;
	BaseSizeY: number;
	DistanceToSizeCurve: CurveFloat;
	clone() : MaterialSpriteElement;
	static C(Other: UObject): MaterialSpriteElement;
}

declare class MaterialBillboardComponent extends PrimitiveComponent { 
	Elements: MaterialSpriteElement[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialBillboardComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialBillboardComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialBillboardComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialBillboardComponent;
	SetElements(NewElements: MaterialSpriteElement[]): void;
	AddElement(Material: MaterialInterface,DistanceToOpacityCurve: CurveFloat,bSizeIsInScreenSpace: boolean,BaseSizeX: number,BaseSizeY: number,DistanceToSizeCurve: CurveFloat): void;
	static C(Other: UObject): MaterialBillboardComponent;
}

declare class DocumentationActor extends Actor { 
	DocumentLink: string;
	Billboard: MaterialBillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DocumentationActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DocumentationActor;
	static C(Other: UObject): DocumentationActor;
}

declare class DebugCameraHUD extends HUD { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DebugCameraHUD;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraHUD;
	static C(Other: UObject): DebugCameraHUD;
}

declare class AtmospherePrecomputeParameters { 
	DensityHeight: number;
	DecayHeight: number;
	MaxScatteringOrder: number;
	TransmittanceTexWidth: number;
	TransmittanceTexHeight: number;
	IrradianceTexWidth: number;
	IrradianceTexHeight: number;
	InscatterAltitudeSampleNum: number;
	InscatterMuNum: number;
	InscatterMuSNum: number;
	InscatterNuNum: number;
	clone() : AtmospherePrecomputeParameters;
	static C(Other: UObject): AtmospherePrecomputeParameters;
}

declare class AtmosphericFogComponent extends SceneComponent { 
	SunMultiplier: number;
	FogMultiplier: number;
	DensityMultiplier: number;
	DensityOffset: number;
	DistanceScale: number;
	AltitudeScale: number;
	DistanceOffset: number;
	GroundOffset: number;
	StartDistance: number;
	SunDiscScale: number;
	DefaultBrightness: number;
	DefaultLightColor: Color;
	bDisableSunDisk: boolean;
	bDisableGroundScattering: boolean;
	PrecomputeParams: AtmospherePrecomputeParameters;
	TransmittanceTexture: Texture2D;
	IrradianceTexture: Texture2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AtmosphericFogComponent;
	static Find(Outer: UObject, ResourceName: string): AtmosphericFogComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AtmosphericFogComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFogComponent;
	StartPrecompute(): void;
	SetSunMultiplier(NewSunMultiplier: number): void;
	SetStartDistance(NewStartDistance: number): void;
	SetPrecomputeParams(DensityHeight: number,MaxScatteringOrder: number,InscatterAltitudeSampleNum: number): void;
	SetFogMultiplier(NewFogMultiplier: number): void;
	SetDistanceScale(NewDistanceScale: number): void;
	SetDistanceOffset(NewDistanceOffset: number): void;
	SetDensityOffset(NewDensityOffset: number): void;
	SetDensityMultiplier(NewDensityMultiplier: number): void;
	SetDefaultLightColor(NewLightColor: LinearColor): void;
	SetDefaultBrightness(NewBrightness: number): void;
	SetAltitudeScale(NewAltitudeScale: number): void;
	DisableSunDisk(NewSunDisk: boolean): void;
	DisableGroundScattering(NewGroundScattering: boolean): void;
	static C(Other: UObject): AtmosphericFogComponent;
}

declare class AtmosphericFog extends Info { 
	AtmosphericFogComponent: AtmosphericFogComponent;
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AtmosphericFog;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFog;
	static C(Other: UObject): AtmosphericFog;
}

declare class ExponentialHeightFogComponent extends SceneComponent { 
	FogDensity: number;
	FogInscatteringColor: LinearColor;
	DirectionalInscatteringExponent: number;
	DirectionalInscatteringStartDistance: number;
	DirectionalInscatteringColor: LinearColor;
	FogHeightFalloff: number;
	FogMaxOpacity: number;
	StartDistance: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ExponentialHeightFogComponent;
	static Find(Outer: UObject, ResourceName: string): ExponentialHeightFogComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ExponentialHeightFogComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFogComponent;
	SetStartDistance(Value: number): void;
	SetFogMaxOpacity(Value: number): void;
	SetFogInscatteringColor(Value: LinearColor): void;
	SetFogHeightFalloff(Value: number): void;
	SetFogDensity(Value: number): void;
	SetDirectionalInscatteringStartDistance(Value: number): void;
	SetDirectionalInscatteringExponent(Value: number): void;
	SetDirectionalInscatteringColor(Value: LinearColor): void;
	static C(Other: UObject): ExponentialHeightFogComponent;
}

declare class ExponentialHeightFog extends Info { 
	Component: ExponentialHeightFogComponent;
	bEnabled: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ExponentialHeightFog;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFog;
	OnRep_bEnabled(): void;
	static C(Other: UObject): ExponentialHeightFog;
}

declare class PlayerStart extends NavigationObjectBase { 
	PlayerStartTag: string;
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlayerStart;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStart;
	static C(Other: UObject): PlayerStart;
}

declare class GameMode extends GameModeBase { 
	MatchState: string;
	bDelayedStart: boolean;
	NumSpectators: number;
	NumPlayers: number;
	NumBots: number;
	MinRespawnDelay: number;
	NumTravellingPlayers: number;
	EngineMessageClass: UnrealEngineClass;
	InactivePlayerArray: PlayerState[];
	InactivePlayerStateLifeSpan: number;
	bHandleDedicatedServerReplays: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GameMode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMode;
	StartMatch(): void;
	SetBandwidthLimit(AsyncIOBandwidthLimit: number): void;
	Say(Msg: string): void;
	RestartGame(): void;
	ReadyToStartMatch(): boolean;
	ReadyToEndMatch(): boolean;
	OnSetMatchState(NewState: string): void;
	IsMatchInProgress(): boolean;
	HasMatchEnded(): boolean;
	GetMatchState(): string;
	EndMatch(): void;
	AbortMatch(): void;
	static C(Other: UObject): GameMode;
	HandleSeamlessTravelPlayer(C?: Controller): {C: Controller};
	static HandleSeamlessTravelPlayer(GameMode: GameMode,C?: Controller): {C: Controller};
}

declare class GameState extends GameStateBase { 
	MatchState: string;
	PreviousMatchState: string;
	ElapsedTime: number;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GameState;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameState;
	OnRep_MatchState(): void;
	OnRep_ElapsedTime(): void;
	static C(Other: UObject): GameState;
}

declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap';
declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap', };
declare class SkyLightComponent extends LightComponentBase { 
	SourceType: ESkyLightSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	CubemapResolution: number;
	SkyDistanceThreshold: number;
	bLowerHemisphereIsBlack: boolean;
	LowerHemisphereColor: LinearColor;
	OcclusionMaxDistance: number;
	Contrast: number;
	MinOcclusion: number;
	OcclusionTint: Color;
	BlendDestinationCubemap: TextureCube;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SkyLightComponent;
	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SkyLightComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
	SetOcclusionTint(InTint: Color): void;
	SetMinOcclusion(InMinOcclusion: number): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
	SetCubemap(NewCubemap: TextureCube): void;
	RecaptureSky(): void;
	static C(Other: UObject): SkyLightComponent;
}

declare class SkyLight extends Info { 
	LightComponent: SkyLightComponent;
	bEnabled: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SkyLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
	OnRep_bEnabled(): void;
	static C(Other: UObject): SkyLight;
}

declare class WindDirectionalSourceComponent extends SceneComponent { 
	Strength: number;
	Speed: number;
	MinGustAmount: number;
	MaxGustAmount: number;
	Radius: number;
	bPointWind: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WindDirectionalSourceComponent;
	static Find(Outer: UObject, ResourceName: string): WindDirectionalSourceComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WindDirectionalSourceComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSourceComponent;
	static C(Other: UObject): WindDirectionalSourceComponent;
}

declare class WindDirectionalSource extends Info { 
	Component: WindDirectionalSourceComponent;
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WindDirectionalSource;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSource;
	static C(Other: UObject): WindDirectionalSource;
}

declare class LevelBounds extends Actor { 
	bAutoUpdateBounds: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelBounds;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelBounds;
	static C(Other: UObject): LevelBounds;
}

declare class Light extends Actor { 
	LightComponent: LightComponent;
	bEnabled: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Light;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Light;
	ToggleEnabled(): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetEnabled(bSetEnabled: boolean): void;
	SetCastShadows(bNewValue: boolean): void;
	SetBrightness(NewBrightness: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	OnRep_bEnabled(): void;
	IsEnabled(): boolean;
	GetLightColor(): LinearColor;
	GetBrightness(): number;
	static C(Other: UObject): Light;
}

declare class DirectionalLight extends Light { 
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DirectionalLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLight;
	static C(Other: UObject): DirectionalLight;
}

declare class PointLight extends Light { 
	PointLightComponent: PointLightComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PointLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLight;
	SetRadius(NewRadius: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	static C(Other: UObject): PointLight;
}

declare class SpotLightComponent extends PointLightComponent { 
	InnerConeAngle: number;
	OuterConeAngle: number;
	LightShaftConeAngle: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SpotLightComponent;
	static Find(Outer: UObject, ResourceName: string): SpotLightComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SpotLightComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLightComponent;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject): SpotLightComponent;
}

declare class SpotLight extends Light { 
	SpotLightComponent: SpotLightComponent;
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SpotLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLight;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject): SpotLight;
}

declare class GeneratedMeshAreaLight extends SpotLight { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GeneratedMeshAreaLight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneratedMeshAreaLight;
	static C(Other: UObject): GeneratedMeshAreaLight;
}

declare class LightmassPortalComponent extends SceneComponent { 
	PreviewBox: BoxComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightmassPortalComponent;
	static Find(Outer: UObject, ResourceName: string): LightmassPortalComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmassPortalComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPortalComponent;
	static C(Other: UObject): LightmassPortalComponent;
}

declare class LightmassPortal extends Actor { 
	PortalComponent: LightmassPortalComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmassPortal;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPortal;
	static C(Other: UObject): LightmassPortal;
}

declare class LODActor extends Actor { 
	StaticMeshComponent: StaticMeshComponent;
	SubActors: Actor[];
	LODDrawDistance: number;
	LODLevel: number;
	SubObjects: UObject[];
	bDirty: boolean;
	NumTrianglesInSubActors: any;
	NumTrianglesInMergedMesh: any;
	bOverrideMaterialMergeSettings: boolean;
	MaterialSettings: MaterialProxySettings;
	bOverrideTransitionScreenSize: boolean;
	TransitionScreenSize: number;
	bOverrideScreenSize: boolean;
	ScreenSize: number;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LODActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LODActor;
	static C(Other: UObject): LODActor;
}

declare class MaterialInstanceActor extends Actor { 
	TargetActors: Actor[];
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialInstanceActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceActor;
	static C(Other: UObject): MaterialInstanceActor;
}

declare class MatineeActorCameraAnim extends MatineeActor { 
	CameraAnim: CameraAnim;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MatineeActorCameraAnim;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActorCameraAnim;
	static C(Other: UObject): MatineeActorCameraAnim;
}

declare class AbstractNavData extends NavigationData { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AbstractNavData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbstractNavData;
	static C(Other: UObject): AbstractNavData;
}

declare class NavigationGraph extends NavigationData { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationGraph;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraph;
	static C(Other: UObject): NavigationGraph;
}

declare class NavigationGraphNode extends Actor { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationGraphNode;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNode;
	static C(Other: UObject): NavigationGraphNode;
}

declare class PlayerStartPIE extends PlayerStart { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlayerStartPIE;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStartPIE;
	static C(Other: UObject): PlayerStartPIE;
}

declare class NavPathObserverInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavPathObserverInterface;
	static Find(Outer: UObject, ResourceName: string): NavPathObserverInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavPathObserverInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavPathObserverInterface;
	static C(Other: UObject): NavPathObserverInterface;
}

declare class NavTestRenderingComponent extends PrimitiveComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavTestRenderingComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavTestRenderingComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavTestRenderingComponent;
	static C(Other: UObject): NavTestRenderingComponent;
}

declare class NavigationInvokerComponent extends ActorComponent { 
	TileGenerationRadius: number;
	TileRemovalRadius: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavigationInvokerComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationInvokerComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationInvokerComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationInvokerComponent;
	static C(Other: UObject): NavigationInvokerComponent;
}

declare type ENavCostDisplay = 'TotalCost' | 'HeuristicOnly' | 'RealCostOnly';
declare var ENavCostDisplay : { TotalCost:'TotalCost',HeuristicOnly:'HeuristicOnly',RealCostOnly:'RealCostOnly', };
declare class NavigationTestingActor extends Actor { 
	CapsuleComponent: CapsuleComponent;
	EdRenderComp: NavTestRenderingComponent;
	InvokerComponent: NavigationInvokerComponent;
	bActAsNavigationInvoker: boolean;
	NavAgentProps: NavAgentProperties;
	QueryingExtent: Vector;
	MyNavData: NavigationData;
	ProjectedLocation: Vector;
	bProjectedLocationValid: boolean;
	bSearchStart: boolean;
	bUseHierarchicalPathfinding: boolean;
	bGatherDetailedInfo: boolean;
	bDrawDistanceToWall: boolean;
	bShowNodePool: boolean;
	bShowBestPath: boolean;
	bShowDiffWithPreviousStep: boolean;
	bShouldBeVisibleInGame: boolean;
	CostDisplayMode: ENavCostDisplay;
	TextCanvasOffset: Vector2D;
	bPathExist: boolean;
	bPathIsPartial: boolean;
	bPathSearchOutOfNodes: boolean;
	PathfindingTime: number;
	PathCost: number;
	PathfindingSteps: number;
	OtherActor: NavigationTestingActor;
	FilterClass: UnrealEngineClass;
	ShowStepIndex: number;
	OffsetFromCornersDistance: number;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationTestingActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTestingActor;
	static C(Other: UObject): NavigationTestingActor;
}

declare type ENavLinkDirection = 'BothWays' | 'LeftToRight' | 'RightToLeft';
declare var ENavLinkDirection : { BothWays:'BothWays',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft', };
declare class NavigationLinkBase { 
	LeftProjectHeight: number;
	MaxFallDownLength: number;
	Direction: ENavLinkDirection;
	SnapRadius: number;
	SnapHeight: number;
	SupportedAgents: NavAgentSelector;
	bSupportsAgent0: boolean;
	bSupportsAgent1: boolean;
	bSupportsAgent2: boolean;
	bSupportsAgent3: boolean;
	bSupportsAgent4: boolean;
	bSupportsAgent5: boolean;
	bSupportsAgent6: boolean;
	bSupportsAgent7: boolean;
	bSupportsAgent8: boolean;
	bSupportsAgent9: boolean;
	bSupportsAgent10: boolean;
	bSupportsAgent11: boolean;
	bSupportsAgent12: boolean;
	bSupportsAgent13: boolean;
	bSupportsAgent14: boolean;
	bSupportsAgent15: boolean;
	Description: string;
	bUseSnapHeight: boolean;
	bSnapToCheapestArea: boolean;
	bCustomFlag0: boolean;
	bCustomFlag1: boolean;
	bCustomFlag2: boolean;
	bCustomFlag3: boolean;
	bCustomFlag4: boolean;
	bCustomFlag5: boolean;
	bCustomFlag6: boolean;
	bCustomFlag7: boolean;
	AreaClass: UnrealEngineClass;
	clone() : NavigationLinkBase;
	static C(Other: UObject): NavigationLinkBase;
}

declare class NavigationLink extends NavigationLinkBase { 
	Left: Vector;
	Right: Vector;
	clone() : NavigationLink;
	static C(Other: UObject): NavigationLink;
}

declare class NavigationSegmentLink extends NavigationLinkBase { 
	LeftStart: Vector;
	LeftEnd: Vector;
	RightStart: Vector;
	RightEnd: Vector;
	clone() : NavigationSegmentLink;
	static C(Other: UObject): NavigationSegmentLink;
}

declare class NavLinkDefinition extends UObject { 
	Links: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavLinkDefinition;
	static Find(Outer: UObject, ResourceName: string): NavLinkDefinition;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkDefinition;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkDefinition;
	static C(Other: UObject): NavLinkDefinition;
}

declare class NavLinkHostInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavLinkHostInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkHostInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkHostInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkHostInterface;
	static C(Other: UObject): NavLinkHostInterface;
}

declare class NavRelevantComponent extends ActorComponent { 
	bAttachToOwnersRoot: boolean;
	CachedNavParent: UObject;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavRelevantComponent;
	static Find(Outer: UObject, ResourceName: string): NavRelevantComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavRelevantComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantComponent;
	SetNavigationRelevancy(bRelevant: boolean): void;
	static C(Other: UObject): NavRelevantComponent;
}

declare class NavLinkCustomComponent extends NavRelevantComponent { 
	NavLinkUserId: any;
	EnabledAreaClass: UnrealEngineClass;
	DisabledAreaClass: UnrealEngineClass;
	LinkRelativeStart: Vector;
	LinkRelativeEnd: Vector;
	LinkDirection: ENavLinkDirection;
	bLinkEnabled: boolean;
	bNotifyWhenEnabled: boolean;
	bNotifyWhenDisabled: boolean;
	bCreateBoxObstacle: boolean;
	ObstacleOffset: Vector;
	ObstacleExtent: Vector;
	ObstacleAreaClass: UnrealEngineClass;
	BroadcastRadius: number;
	BroadcastInterval: number;
	BroadcastChannel: ECollisionChannel;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavLinkCustomComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkCustomComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomComponent;
	static C(Other: UObject): NavLinkCustomComponent;
}

declare class NavLinkRenderingComponent extends PrimitiveComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavLinkRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkRenderingComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkRenderingComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkRenderingComponent;
	static C(Other: UObject): NavLinkRenderingComponent;
}

declare class NavLinkProxy extends Actor { 
	PointLinks: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	SmartLinkComp: NavLinkCustomComponent;
	bSmartLinkIsRelevant: boolean;
	EdRenderComp: NavLinkRenderingComponent;
	SpriteComponent: BillboardComponent;
	OnSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor, DestinationPoint: Vector) => void>;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkProxy;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkProxy;
	SetSmartLinkEnabled(bEnabled: boolean): void;
	ResumePathFollowing(Agent: Actor): void;
	ReceiveSmartLinkReached(Agent: Actor,Destination: Vector): void;
	IsSmartLinkEnabled(): boolean;
	HasMovingAgents(): boolean;
	static C(Other: UObject): NavLinkProxy;
}

declare class Note extends Actor { 
	Text: string;
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Note;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Note;
	static C(Other: UObject): Note;
}

declare class Interface_CollisionDataProvider extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): Interface_CollisionDataProvider;
	static Find(Outer: UObject, ResourceName: string): Interface_CollisionDataProvider;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): Interface_CollisionDataProvider;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_CollisionDataProvider;
	static C(Other: UObject): Interface_CollisionDataProvider;
}

declare class VehicleWheel extends UObject { 
	CollisionMesh: StaticMesh;
	bDontCreateShape: boolean;
	bAutoAdjustCollisionSize: boolean;
	Offset: Vector;
	ShapeRadius: number;
	ShapeWidth: number;
	Mass: number;
	DampingRate: number;
	SteerAngle: number;
	bAffectedByHandbrake: boolean;
	TireType: TireType;
	LatStiffMaxLoad: number;
	LatStiffValue: number;
	LongStiffValue: number;
	SuspensionForceOffset: number;
	SuspensionMaxRaise: number;
	SuspensionMaxDrop: number;
	SuspensionNaturalFrequency: number;
	SuspensionDampingRatio: number;
	MaxBrakeTorque: number;
	MaxHandBrakeTorque: number;
	VehicleSim: WheeledVehicleMovementComponent;
	WheelIndex: number;
	DebugLongSlip: number;
	DebugLatSlip: number;
	DebugNormalizedTireLoad: number;
	DebugWheelTorque: number;
	DebugLongForce: number;
	DebugLatForce: number;
	Location: Vector;
	OldLocation: Vector;
	Velocity: Vector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VehicleWheel;
	static Find(Outer: UObject, ResourceName: string): VehicleWheel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VehicleWheel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleWheel;
	GetSuspensionOffset(): number;
	GetSteerAngle(): number;
	GetRotationAngle(): number;
	static C(Other: UObject): VehicleWheel;
}

declare class WheelSetup { 
	WheelClass: UnrealEngineClass;
	BoneName: string;
	AdditionalOffset: Vector;
	clone() : WheelSetup;
	static C(Other: UObject): WheelSetup;
}

declare class ReplicatedVehicleState { 
	SteeringInput: number;
	ThrottleInput: number;
	BrakeInput: number;
	HandbrakeInput: number;
	CurrentGear: number;
	clone() : ReplicatedVehicleState;
	static C(Other: UObject): ReplicatedVehicleState;
}

declare class VehicleInputRate { 
	RiseRate: number;
	FallRate: number;
	clone() : VehicleInputRate;
	static C(Other: UObject): VehicleInputRate;
}

declare class WheeledVehicleMovementComponent extends MovementComponent { 
	bDeprecatedSpringOffsetMode: boolean;
	WheelSetups: WheelSetup[];
	Mass: number;
	DragCoefficient: number;
	ChassisWidth: number;
	ChassisHeight: number;
	bReverseAsBrake: boolean;
	DragArea: number;
	EstimatedMaxEngineSpeed: number;
	MaxEngineRPM: number;
	DebugDragMagnitude: number;
	InertiaTensorScale: Vector;
	MinNormalizedTireLoad: number;
	MinNormalizedTireLoadFiltered: number;
	MaxNormalizedTireLoad: number;
	MaxNormalizedTireLoadFiltered: number;
	ThresholdLongitudinalSpeed: number;
	LowForwardSpeedSubStepCount: number;
	HighForwardSpeedSubStepCount: number;
	Wheels: VehicleWheel[];
	bUseRVOAvoidance: boolean;
	RVOAvoidanceRadius: number;
	RVOAvoidanceHeight: number;
	AvoidanceConsiderationRadius: number;
	RVOSteeringStep: number;
	RVOThrottleStep: number;
	AvoidanceUID: number;
	AvoidanceGroup: NavAvoidanceMask;
	GroupsToAvoid: NavAvoidanceMask;
	GroupsToIgnore: NavAvoidanceMask;
	AvoidanceWeight: number;
	PendingLaunchVelocity: Vector;
	ReplicatedState: ReplicatedVehicleState;
	RawSteeringInput: number;
	RawThrottleInput: number;
	RawBrakeInput: number;
	bRawHandbrakeInput: boolean;
	bRawGearUpInput: boolean;
	bRawGearDownInput: boolean;
	SteeringInput: number;
	ThrottleInput: number;
	BrakeInput: number;
	HandbrakeInput: number;
	IdleBrakeInput: number;
	StopThreshold: number;
	WrongDirectionThreshold: number;
	ThrottleInputRate: VehicleInputRate;
	BrakeInputRate: VehicleInputRate;
	HandbrakeInputRate: VehicleInputRate;
	SteeringInputRate: VehicleInputRate;
	bWasAvoidanceUpdated: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WheeledVehicleMovementComponent;
	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WheeledVehicleMovementComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent;
	SetUseAutoGears(bUseAuto: boolean): void;
	SetThrottleInput(Throttle: number): void;
	SetTargetGear(GearNum: number,bImmediate: boolean): void;
	SetSteeringInput(Steering: number): void;
	SetHandbrakeInput(bNewHandbrake: boolean): void;
	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
	SetGroupsToIgnore(GroupFlags: number): void;
	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
	SetGroupsToAvoid(GroupFlags: number): void;
	SetGearUp(bNewGearUp: boolean): void;
	SetGearDown(bNewGearDown: boolean): void;
	SetBrakeInput(Brake: number): void;
	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
	SetAvoidanceGroup(GroupFlags: number): void;
	SetAvoidanceEnabled(bEnable: boolean): void;
	ServerUpdateState(InSteeringInput: number,InThrottleInput: number,InBrakeInput: number,InHandbrakeInput: number,CurrentGear: number): void;
	GetUseAutoGears(): boolean;
	GetTargetGear(): number;
	GetForwardSpeed(): number;
	GetEngineRotationSpeed(): number;
	GetEngineMaxRotationSpeed(): number;
	GetCurrentGear(): number;
	static C(Other: UObject): WheeledVehicleMovementComponent;
}

declare class WheeledVehicle extends Pawn { 
	Mesh: SkeletalMeshComponent;
	VehicleMovement: WheeledVehicleMovementComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WheeledVehicle;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicle;
	static C(Other: UObject): WheeledVehicle;
}

declare type EReflectionSourceType = 'CapturedScene' | 'SpecifiedCubemap';
declare var EReflectionSourceType : { CapturedScene:'CapturedScene',SpecifiedCubemap:'SpecifiedCubemap', };
declare class ReflectionCaptureComponent extends SceneComponent { 
	CaptureOffsetComponent: BillboardComponent;
	ReflectionSourceType: EReflectionSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	Brightness: number;
	CaptureOffset: Vector;
	StateId: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): ReflectionCaptureComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReflectionCaptureComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCaptureComponent;
	static C(Other: UObject): ReflectionCaptureComponent;
}

declare class ReflectionCapture extends Actor { 
	CaptureComponent: ReflectionCaptureComponent;
	SpriteComponent: BillboardComponent;
	CaptureOffsetComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCapture;
	static C(Other: UObject): ReflectionCapture;
}

declare class BoxReflectionCapture extends ReflectionCapture { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BoxReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCapture;
	static C(Other: UObject): BoxReflectionCapture;
}

declare class PlaneReflectionCapture extends ReflectionCapture { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlaneReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCapture;
	static C(Other: UObject): PlaneReflectionCapture;
}

declare class DrawSphereComponent extends SphereComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DrawSphereComponent;
	static Find(Outer: UObject, ResourceName: string): DrawSphereComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DrawSphereComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DrawSphereComponent;
	static C(Other: UObject): DrawSphereComponent;
}

declare class SphereReflectionCapture extends ReflectionCapture { 
	DrawCaptureRadius: DrawSphereComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SphereReflectionCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCapture;
	static C(Other: UObject): SphereReflectionCapture;
}

declare class RigidBodyBase extends Actor { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RigidBodyBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RigidBodyBase;
	static C(Other: UObject): RigidBodyBase;
}

declare class ConstrainComponentPropName { 
	ComponentName: string;
	clone() : ConstrainComponentPropName;
	static C(Other: UObject): ConstrainComponentPropName;
}

declare type EConstraintFrame = 'Frame1' | 'Frame2';
declare var EConstraintFrame : { Frame1:'Frame1',Frame2:'Frame2', };
declare class PhysicsConstraintComponent extends SceneComponent { 
	ConstraintActor1: Actor;
	ComponentName1: ConstrainComponentPropName;
	ConstraintActor2: Actor;
	ComponentName2: ConstrainComponentPropName;
	ConstraintSetup: PhysicsConstraintTemplate;
	OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: number) => void>;
	ConstraintInstance: ConstraintInstance;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicsConstraintComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsConstraintComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsConstraintComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintComponent;
	SetLinearZLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearYLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearXLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearVelocityTarget(InVelTarget: Vector): void;
	SetLinearVelocityDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearPositionTarget(InPosTarget: Vector): void;
	SetLinearPositionDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearDriveParams(InSpring: number,InDamping: number,InForceLimit: number): void;
	SetDisableCollision(bDisableCollision: boolean): void;
	SetConstraintReferencePosition(Frame: EConstraintFrame,RefPosition: Vector): void;
	SetConstraintReferenceOrientation(Frame: EConstraintFrame,PriAxis: Vector,SecAxis: Vector): void;
	SetConstraintReferenceFrame(Frame: EConstraintFrame,RefFrame: Transform): void;
	SetConstrainedComponents(Component1: PrimitiveComponent,BoneName1: string,Component2: PrimitiveComponent,BoneName2: string): void;
	SetAngularVelocityTarget(InVelTarget: Vector): void;
	SetAngularVelocityDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularTwistLimit(ConstraintType: EAngularConstraintMotion,TwistLimitAngle: number): void;
	SetAngularSwing2Limit(MotionType: EAngularConstraintMotion,Swing2LimitAngle: number): void;
	SetAngularSwing1Limit(MotionType: EAngularConstraintMotion,Swing1LimitAngle: number): void;
	SetAngularOrientationTarget(InPosTarget: Rotator): void;
	SetAngularOrientationDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularDriveParams(InSpring: number,InDamping: number,InForceLimit: number): void;
	GetCurrentTwist(): number;
	GetCurrentSwing2(): number;
	GetCurrentSwing1(): number;
	GetConstraintForce(OutLinearForce?: Vector,OutAngularForce?: Vector): {OutLinearForce: Vector, OutAngularForce: Vector};
	BreakConstraint(): void;
	static C(Other: UObject): PhysicsConstraintComponent;
}

declare class PhysicsConstraintActor extends RigidBodyBase { 
	ConstraintComp: PhysicsConstraintComponent;
	ConstraintActor1: Actor;
	ConstraintActor2: Actor;
	bDisableCollision: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsConstraintActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintActor;
	static C(Other: UObject): PhysicsConstraintActor;
}

declare class PhysicsThrusterComponent extends SceneComponent { 
	ThrustStrength: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicsThrusterComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsThrusterComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsThrusterComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThrusterComponent;
	static C(Other: UObject): PhysicsThrusterComponent;
}

declare class PhysicsThruster extends RigidBodyBase { 
	ThrusterComponent: PhysicsThrusterComponent;
	ArrowComponent: ArrowComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsThruster;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThruster;
	static C(Other: UObject): PhysicsThruster;
}

declare class RadialForceComponent extends SceneComponent { 
	Radius: number;
	Falloff: ERadialImpulseFalloff;
	ImpulseStrength: number;
	bImpulseVelChange: boolean;
	bIgnoreOwningActor: boolean;
	ForceStrength: number;
	DestructibleDamage: number;
	ObjectTypesToAffect: EObjectTypeQuery[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RadialForceComponent;
	static Find(Outer: UObject, ResourceName: string): RadialForceComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RadialForceComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceComponent;
	RemoveObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	FireImpulse(): void;
	AddObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	static C(Other: UObject): RadialForceComponent;
}

declare class RadialForceActor extends RigidBodyBase { 
	ForceComponent: RadialForceComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RadialForceActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceActor;
	ToggleForce(): void;
	FireImpulse(): void;
	EnableForce(): void;
	DisableForce(): void;
	static C(Other: UObject): RadialForceActor;
}

declare class SceneCapture extends Actor { 
	MeshComp: StaticMeshComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneCapture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture;
	static C(Other: UObject): SceneCapture;
}

declare class EngineShowFlagsSetting { 
	ShowFlagName: string;
	Enabled: boolean;
	clone() : EngineShowFlagsSetting;
	static C(Other: UObject): EngineShowFlagsSetting;
}

declare class SceneCaptureComponent extends SceneComponent { 
	HiddenComponents: any[];
	HiddenActors: Actor[];
	ShowOnlyComponents: any[];
	ShowOnlyActors: Actor[];
	bCaptureEveryFrame: boolean;
	bCaptureOnMovement: boolean;
	MaxViewDistanceOverride: number;
	ShowFlagSettings: EngineShowFlagsSetting[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SceneCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneCaptureComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent;
	ShowOnlyComponent(InComponent: PrimitiveComponent): void;
	ShowOnlyActorComponents(InActor: Actor): void;
	HideComponent(InComponent: PrimitiveComponent): void;
	HideActorComponents(InActor: Actor): void;
	static C(Other: UObject): SceneCaptureComponent;
}

declare class PlanarReflectionComponent extends SceneCaptureComponent { 
	PreviewBox: BoxComponent;
	NormalDistortionStrength: number;
	PrefilterRoughness: number;
	PrefilterRoughnessDistance: number;
	ScreenPercentage: number;
	ExtraFOV: number;
	DistanceFromPlaneFadeStart: number;
	DistanceFromPlaneFadeEnd: number;
	DistanceFromPlaneFadeoutStart: number;
	DistanceFromPlaneFadeoutEnd: number;
	AngleFromPlaneFadeStart: number;
	AngleFromPlaneFadeEnd: number;
	bRenderSceneTwoSided: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PlanarReflectionComponent;
	static Find(Outer: UObject, ResourceName: string): PlanarReflectionComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlanarReflectionComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflectionComponent;
	static C(Other: UObject): PlanarReflectionComponent;
}

declare class PlanarReflection extends SceneCapture { 
	PlanarReflectionComponent: PlanarReflectionComponent;
	SpriteComponent: BillboardComponent;
	bShowPreviewPlane: boolean;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlanarReflection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflection;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject): PlanarReflection;
}

declare type ESceneCaptureSource = 'SCS_SceneColorHDR' | 'SCS_SceneColorHDRNoAlpha' | 'SCS_FinalColorLDR' | 'SCS_SceneColorSceneDepth' | 'SCS_SceneDepth' | 'SCS_Normal' | 'SCS_BaseColor';
declare var ESceneCaptureSource : { SCS_SceneColorHDR:'SCS_SceneColorHDR',SCS_SceneColorHDRNoAlpha:'SCS_SceneColorHDRNoAlpha',SCS_FinalColorLDR:'SCS_FinalColorLDR',SCS_SceneColorSceneDepth:'SCS_SceneColorSceneDepth',SCS_SceneDepth:'SCS_SceneDepth',SCS_Normal:'SCS_Normal',SCS_BaseColor:'SCS_BaseColor', };
declare type ESceneCaptureCompositeMode = 'SCCM_Overwrite' | 'SCCM_Additive' | 'SCCM_Composite';
declare var ESceneCaptureCompositeMode : { SCCM_Overwrite:'SCCM_Overwrite',SCCM_Additive:'SCCM_Additive',SCCM_Composite:'SCCM_Composite', };
declare class SceneCaptureComponent2D extends SceneCaptureComponent { 
	ProjectionType: ECameraProjectionMode;
	FOVAngle: number;
	OrthoWidth: number;
	TextureTarget: TextureRenderTarget2D;
	CaptureSource: ESceneCaptureSource;
	CompositeMode: ESceneCaptureCompositeMode;
	PostProcessSettings: PostProcessSettings;
	PostProcessBlendWeight: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SceneCaptureComponent2D;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent2D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneCaptureComponent2D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent2D;
	CaptureScene(): void;
	static C(Other: UObject): SceneCaptureComponent2D;
}

declare class SceneCapture2D extends SceneCapture { 
	CaptureComponent2D: SceneCaptureComponent2D;
	DrawFrustum: DrawFrustumComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneCapture2D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture2D;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject): SceneCapture2D;
}

declare class TextureRenderTargetCube extends TextureRenderTarget { 
	SizeX: number;
	ClearColor: LinearColor;
	OverrideFormat: EPixelFormat;
	bHDR: boolean;
	bForceLinearGamma: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureRenderTargetCube;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCube;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureRenderTargetCube;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCube;
	static C(Other: UObject): TextureRenderTargetCube;
}

declare class SceneCaptureComponentCube extends SceneCaptureComponent { 
	TextureTarget: TextureRenderTargetCube;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SceneCaptureComponentCube;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponentCube;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneCaptureComponentCube;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponentCube;
	CaptureScene(): void;
	static C(Other: UObject): SceneCaptureComponentCube;
}

declare class SceneCaptureCube extends SceneCapture { 
	CaptureComponentCube: SceneCaptureComponentCube;
	DrawFrustum: DrawFrustumComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SceneCaptureCube;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureCube;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject): SceneCaptureCube;
}

declare class MatineeAnimInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MatineeAnimInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeAnimInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MatineeAnimInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeAnimInterface;
	static C(Other: UObject): MatineeAnimInterface;
}

declare class SplineMeshActor extends Actor { 
	SplineMeshComponent: SplineMeshComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SplineMeshActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshActor;
	static C(Other: UObject): SplineMeshActor;
}

declare type EVertexAttributeStreamType = 'VAST_unknown' | 'VAST_float' | 'VAST_float2' | 'VAST_float3' | 'VAST_float4';
declare var EVertexAttributeStreamType : { VAST_unknown:'VAST_unknown',VAST_float:'VAST_float',VAST_float2:'VAST_float2',VAST_float3:'VAST_float3',VAST_float4:'VAST_float4', };
declare class VertexAttributeStream extends UObject { 
	Usage: string;
	AttributeType: EVertexAttributeStreamType;
	Data: number[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VertexAttributeStream;
	static Find(Outer: UObject, ResourceName: string): VertexAttributeStream;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VertexAttributeStream;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VertexAttributeStream;
	static C(Other: UObject): VertexAttributeStream;
}

declare class SubDSurface extends UObject { 
	VertexCountPerFace: any[];
	IndicesPerFace: any[];
	VertexAttributeStreams: VertexAttributeStream[];
	Materials: MaterialInterface[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SubDSurface;
	static Find(Outer: UObject, ResourceName: string): SubDSurface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubDSurface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurface;
	static C(Other: UObject): SubDSurface;
}

declare class SubDSurfaceComponent extends PrimitiveComponent { 
	Mesh: SubDSurface;
	DebugLevel: number;
	DisplayMeshComponent: StaticMeshComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SubDSurfaceComponent;
	static Find(Outer: UObject, ResourceName: string): SubDSurfaceComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubDSurfaceComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurfaceComponent;
	SetMesh(NewMesh: SubDSurface): boolean;
	static C(Other: UObject): SubDSurfaceComponent;
}

declare class SubDSurfaceActor extends Actor { 
	SubDSurface: SubDSurfaceComponent;
	DisplayMeshComponent: StaticMeshComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SubDSurfaceActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurfaceActor;
	static C(Other: UObject): SubDSurfaceActor;
}

declare class TargetPoint extends Actor { 
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TargetPoint;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TargetPoint;
	static C(Other: UObject): TargetPoint;
}

declare class TextRenderActor extends Actor { 
	TextRender: TextRenderComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextRenderActor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderActor;
	static C(Other: UObject): TextRenderActor;
}

declare class TriggerBase extends Actor { 
	CollisionComponent: ShapeComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TriggerBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBase;
	static C(Other: UObject): TriggerBase;
}

declare class TriggerBox extends TriggerBase { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TriggerBox;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBox;
	static C(Other: UObject): TriggerBox;
}

declare class TriggerCapsule extends TriggerBase { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TriggerCapsule;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerCapsule;
	static C(Other: UObject): TriggerCapsule;
}

declare class TriggerSphere extends TriggerBase { 
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TriggerSphere;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerSphere;
	static C(Other: UObject): TriggerSphere;
}

declare class VectorField extends UObject { 
	Bounds: Box;
	Intensity: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VectorField;
	static Find(Outer: UObject, ResourceName: string): VectorField;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VectorField;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorField;
	static C(Other: UObject): VectorField;
}

declare class VectorFieldComponent extends PrimitiveComponent { 
	VectorField: VectorField;
	Intensity: number;
	Tightness: number;
	bPreviewVectorField: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VectorFieldComponent;
	static Find(Outer: UObject, ResourceName: string): VectorFieldComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VectorFieldComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldComponent;
	SetIntensity(NewIntensity: number): void;
	static C(Other: UObject): VectorFieldComponent;
}

declare class VectorFieldVolume extends Actor { 
	VectorFieldComponent: VectorFieldComponent;
	SpriteComponent: BillboardComponent;
	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VectorFieldVolume;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldVolume;
	static C(Other: UObject): VectorFieldVolume;
}

declare class ApplicationLifecycleComponent extends ActorComponent { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ApplicationLifecycleComponent;
	static Find(Outer: UObject, ResourceName: string): ApplicationLifecycleComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ApplicationLifecycleComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ApplicationLifecycleComponent;
	static C(Other: UObject): ApplicationLifecycleComponent;
}

declare type EInterpToBehaviourType = 'OneShot' | 'OneShot_Reverse' | 'Loop_Reset' | 'PingPong';
declare var EInterpToBehaviourType : { OneShot:'OneShot',OneShot_Reverse:'OneShot_Reverse',Loop_Reset:'Loop_Reset',PingPong:'PingPong', };
declare class InterpControlPoint { 
	PositionControlPoint: Vector;
	bPositionIsRelative: boolean;
	clone() : InterpControlPoint;
	static C(Other: UObject): InterpControlPoint;
}

declare class InterpToMovementComponent extends MovementComponent { 
	Duration: number;
	bPauseOnImpact: boolean;
	BehaviourType: EInterpToBehaviourType;
	bForceSubStepping: boolean;
	OnInterpToReverse: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnInterpToStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitBeginDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitEndDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnResetDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	ControlPoints: InterpControlPoint[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpToMovementComponent;
	static Find(Outer: UObject, ResourceName: string): InterpToMovementComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpToMovementComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpToMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	RestartMovement(InitialDirection: number): void;
	FinaliseControlPoints(): void;
	static C(Other: UObject): InterpToMovementComponent;
}

declare class RVOAvoidanceInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RVOAvoidanceInterface;
	static Find(Outer: UObject, ResourceName: string): RVOAvoidanceInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RVOAvoidanceInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RVOAvoidanceInterface;
	static C(Other: UObject): RVOAvoidanceInterface;
}

declare class NetworkPredictionInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NetworkPredictionInterface;
	static Find(Outer: UObject, ResourceName: string): NetworkPredictionInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NetworkPredictionInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkPredictionInterface;
	static C(Other: UObject): NetworkPredictionInterface;
}

declare class FloatingPawnMovement extends PawnMovementComponent { 
	MaxSpeed: number;
	Acceleration: number;
	Deceleration: number;
	TurningBoost: number;
	bPositionCorrected: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): FloatingPawnMovement;
	static Find(Outer: UObject, ResourceName: string): FloatingPawnMovement;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): FloatingPawnMovement;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingPawnMovement;
	static C(Other: UObject): FloatingPawnMovement;
}

declare class SpectatorPawnMovement extends FloatingPawnMovement { 
	bIgnoreTimeDilation: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SpectatorPawnMovement;
	static Find(Outer: UObject, ResourceName: string): SpectatorPawnMovement;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SpectatorPawnMovement;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorPawnMovement;
	static C(Other: UObject): SpectatorPawnMovement;
}

declare class ProjectileMovementComponent extends MovementComponent { 
	InitialSpeed: number;
	MaxSpeed: number;
	bRotationFollowsVelocity: boolean;
	bShouldBounce: boolean;
	bInitialVelocityInLocalSpace: boolean;
	bForceSubStepping: boolean;
	bIsHomingProjectile: boolean;
	bBounceAngleAffectsFriction: boolean;
	bIsSliding: boolean;
	PreviousHitTime: number;
	PreviousHitNormal: Vector;
	ProjectileGravityScale: number;
	Buoyancy: number;
	Bounciness: number;
	Friction: number;
	BounceVelocityStopSimulatingThreshold: number;
	OnProjectileBounce: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, ImpactVelocity: Vector) => void>;
	OnProjectileStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult) => void>;
	HomingAccelerationMagnitude: number;
	HomingTargetComponent: any;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ProjectileMovementComponent;
	static Find(Outer: UObject, ResourceName: string): ProjectileMovementComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ProjectileMovementComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectileMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	SetVelocityInLocalSpace(NewVelocity: Vector): void;
	LimitVelocity(NewVelocity: Vector): Vector;
	static C(Other: UObject): ProjectileMovementComponent;
}

declare class RotatingMovementComponent extends MovementComponent { 
	RotationRate: Rotator;
	PivotTranslation: Vector;
	bRotationInLocalSpace: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RotatingMovementComponent;
	static Find(Outer: UObject, ResourceName: string): RotatingMovementComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RotatingMovementComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotatingMovementComponent;
	static C(Other: UObject): RotatingMovementComponent;
}

declare class SimpleWheeledVehicleMovementComponent extends WheeledVehicleMovementComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SimpleWheeledVehicleMovementComponent;
	static Find(Outer: UObject, ResourceName: string): SimpleWheeledVehicleMovementComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SimpleWheeledVehicleMovementComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleWheeledVehicleMovementComponent;
	SetSteerAngle(SteerAngle: number,WheelIndex: number): void;
	SetDriveTorque(DriveTorque: number,WheelIndex: number): void;
	SetBrakeTorque(BrakeTorque: number,WheelIndex: number): void;
	static C(Other: UObject): SimpleWheeledVehicleMovementComponent;
}

declare class VehicleEngineData { 
	TorqueCurve: RuntimeFloatCurve;
	MaxRPM: number;
	MOI: number;
	DampingRateFullThrottle: number;
	DampingRateZeroThrottleClutchEngaged: number;
	DampingRateZeroThrottleClutchDisengaged: number;
	clone() : VehicleEngineData;
	static C(Other: UObject): VehicleEngineData;
}

declare type EVehicleDifferential4W = 'LimitedSlip_4W' | 'LimitedSlip_FrontDrive' | 'LimitedSlip_RearDrive' | 'Open_4W' | 'Open_FrontDrive' | 'Open_RearDrive';
declare var EVehicleDifferential4W : { LimitedSlip_4W:'LimitedSlip_4W',LimitedSlip_FrontDrive:'LimitedSlip_FrontDrive',LimitedSlip_RearDrive:'LimitedSlip_RearDrive',Open_4W:'Open_4W',Open_FrontDrive:'Open_FrontDrive',Open_RearDrive:'Open_RearDrive', };
declare class VehicleDifferential4WData { 
	DifferentialType: EVehicleDifferential4W;
	FrontRearSplit: number;
	FrontLeftRightSplit: number;
	RearLeftRightSplit: number;
	CentreBias: number;
	FrontBias: number;
	RearBias: number;
	clone() : VehicleDifferential4WData;
	static C(Other: UObject): VehicleDifferential4WData;
}

declare class VehicleGearData { 
	Ratio: number;
	DownRatio: number;
	UpRatio: number;
	clone() : VehicleGearData;
	static C(Other: UObject): VehicleGearData;
}

declare class VehicleTransmissionData { 
	bUseGearAutoBox: boolean;
	GearSwitchTime: number;
	GearAutoBoxLatency: number;
	FinalRatio: number;
	ForwardGears: VehicleGearData[];
	ReverseGearRatio: number;
	NeutralGearUpRatio: number;
	ClutchStrength: number;
	clone() : VehicleTransmissionData;
	static C(Other: UObject): VehicleTransmissionData;
}

declare class WheeledVehicleMovementComponent4W extends WheeledVehicleMovementComponent { 
	EngineSetup: VehicleEngineData;
	DifferentialSetup: VehicleDifferential4WData;
	TransmissionSetup: VehicleTransmissionData;
	SteeringCurve: RuntimeFloatCurve;
	AckermannAccuracy: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): WheeledVehicleMovementComponent4W;
	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent4W;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): WheeledVehicleMovementComponent4W;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent4W;
	static C(Other: UObject): WheeledVehicleMovementComponent4W;
}

declare class NavLinkCustomInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavLinkCustomInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkCustomInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomInterface;
	static C(Other: UObject): NavLinkCustomInterface;
}

declare class NavModifierComponent extends NavRelevantComponent { 
	AreaClass: UnrealEngineClass;
	FailsafeExtent: Vector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavModifierComponent;
	static Find(Outer: UObject, ResourceName: string): NavModifierComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavModifierComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierComponent;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject): NavModifierComponent;
}

declare class PawnNoiseEmitterComponent extends ActorComponent { 
	bAIPerceptionSystemCompatibilityMode: boolean;
	LastRemoteNoisePosition: Vector;
	NoiseLifetime: number;
	LastRemoteNoiseVolume: number;
	LastRemoteNoiseTime: number;
	LastLocalNoiseVolume: number;
	LastLocalNoiseTime: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PawnNoiseEmitterComponent;
	static Find(Outer: UObject, ResourceName: string): PawnNoiseEmitterComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PawnNoiseEmitterComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnNoiseEmitterComponent;
	MakeNoise(NoiseMaker: Actor,Loudness: number,NoiseLocation: Vector): void;
	static C(Other: UObject): PawnNoiseEmitterComponent;
}

declare class PhysicalAnimationComponent extends ActorComponent { 
	StrengthMultiplyer: number;
	SkeletalMeshComponent: SkeletalMeshComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicalAnimationComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicalAnimationComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicalAnimationComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalAnimationComponent;
	SetStrengthMultiplyer(InStrengthMultiplyer: number): void;
	SetSkeletalMeshComponent(InSkeletalMeshComponent: SkeletalMeshComponent): void;
	ApplyPhysicalAnimationSettingsBelow(BodyName: string,PhysicalAnimationData: PhysicalAnimationData,bIncludeSelf: boolean): void;
	ApplyPhysicalAnimationSettings(BodyName: string,PhysicalAnimationData: PhysicalAnimationData): void;
	ApplyPhysicalAnimationProfileBelow(BodyName: string,ProfileName: string,bIncludeSelf: boolean,bClearNotFound: boolean): void;
	static C(Other: UObject): PhysicalAnimationComponent;
}

declare class PhysicsHandleComponent extends ActorComponent { 
	GrabbedComponent: PrimitiveComponent;
	bSoftAngularConstraint: boolean;
	bSoftLinearConstraint: boolean;
	bInterpolateTarget: boolean;
	LinearDamping: number;
	LinearStiffness: number;
	AngularDamping: number;
	AngularStiffness: number;
	InterpolationSpeed: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicsHandleComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsHandleComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsHandleComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsHandleComponent;
	SetTargetRotation(NewRotation: Rotator): void;
	SetTargetLocationAndRotation(NewLocation: Vector,NewRotation: Rotator): void;
	SetTargetLocation(NewLocation: Vector): void;
	SetLinearStiffness(NewLinearStiffness: number): void;
	SetLinearDamping(NewLinearDamping: number): void;
	SetInterpolationSpeed(NewInterpolationSpeed: number): void;
	SetAngularStiffness(NewAngularStiffness: number): void;
	SetAngularDamping(NewAngularDamping: number): void;
	ReleaseComponent(): void;
	GrabComponentAtLocationWithRotation(Component: PrimitiveComponent,InBoneName: string,Location: Vector,Rotation: Rotator): void;
	GrabComponentAtLocation(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector): void;
	GrabComponent(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector,bConstrainRotation: boolean): void;
	GetTargetLocationAndRotation(TargetLocation?: Vector,TargetRotation?: Rotator): {TargetLocation: Vector, TargetRotation: Rotator};
	static C(Other: UObject): PhysicsHandleComponent;
}

declare class PlatformEventsComponent extends ActorComponent { 
	PlatformChangedToLaptopModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	PlatformChangedToTabletModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PlatformEventsComponent;
	static Find(Outer: UObject, ResourceName: string): PlatformEventsComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlatformEventsComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformEventsComponent;
	SupportsConvertibleLaptops(): boolean;
	IsInTabletMode(): boolean;
	IsInLaptopMode(): boolean;
	static C(Other: UObject): PlatformEventsComponent;
}

declare class LightmassDirectionalLightSettings extends LightmassLightSettings { 
	LightSourceAngle: number;
	clone() : LightmassDirectionalLightSettings;
	static C(Other: UObject): LightmassDirectionalLightSettings;
}

declare class DirectionalLightComponent extends LightComponent { 
	bEnableLightShaftOcclusion: boolean;
	OcclusionMaskDarkness: number;
	OcclusionDepthRange: number;
	LightShaftOverrideDirection: Vector;
	WholeSceneDynamicShadowRadius: number;
	DynamicShadowDistanceMovableLight: number;
	DynamicShadowDistanceStationaryLight: number;
	DynamicShadowCascades: number;
	CascadeDistributionExponent: number;
	CascadeTransitionFraction: number;
	ShadowDistanceFadeoutFraction: number;
	bUseInsetShadowsForMovableObjects: boolean;
	FarShadowCascadeCount: number;
	FarShadowDistance: number;
	DistanceFieldShadowDistance: number;
	LightSourceAngle: number;
	TraceDistance: number;
	LightmassSettings: LightmassDirectionalLightSettings;
	bCastModulatedShadows: boolean;
	ModulatedShadowColor: Color;
	bUsedAsAtmosphereSunLight: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DirectionalLightComponent;
	static Find(Outer: UObject, ResourceName: string): DirectionalLightComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DirectionalLightComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLightComponent;
	SetShadowDistanceFadeoutFraction(NewValue: number): void;
	SetOcclusionMaskDarkness(NewValue: number): void;
	SetLightShaftOverrideDirection(NewValue: Vector): void;
	SetEnableLightShaftOcclusion(bNewValue: boolean): void;
	SetDynamicShadowDistanceStationaryLight(NewValue: number): void;
	SetDynamicShadowDistanceMovableLight(NewValue: number): void;
	SetDynamicShadowCascades(NewValue: number): void;
	SetCascadeTransitionFraction(NewValue: number): void;
	SetCascadeDistributionExponent(NewValue: number): void;
	static C(Other: UObject): DirectionalLightComponent;
}

declare class NavGraphNode { 
	Owner: UObject;
	clone() : NavGraphNode;
	static C(Other: UObject): NavGraphNode;
}

declare class NavigationGraphNodeComponent extends SceneComponent { 
	UNode: NavGraphNode;
	NextNodeComponent: NavigationGraphNodeComponent;
	PrevNodeComponent: NavigationGraphNodeComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavigationGraphNodeComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationGraphNodeComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationGraphNodeComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNodeComponent;
	static C(Other: UObject): NavigationGraphNodeComponent;
}

declare class PhysicsSpringComponent extends SceneComponent { 
	SpringStiffness: number;
	SpringDamping: number;
	SpringLengthAtRest: number;
	SpringRadius: number;
	SpringChannel: ECollisionChannel;
	bIgnoreSelf: boolean;
	SpringCompression: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicsSpringComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsSpringComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsSpringComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSpringComponent;
	GetSpringRestingPoint(): Vector;
	GetSpringDirection(): Vector;
	GetSpringCurrentEndPoint(): Vector;
	GetNormalizedCompressionScalar(): number;
	static C(Other: UObject): PhysicsSpringComponent;
}

declare type EBoneSpaces = 'WorldSpace' | 'ComponentSpace';
declare var EBoneSpaces : { WorldSpace:'WorldSpace',ComponentSpace:'ComponentSpace', };
declare class PoseableMeshComponent extends SkinnedMeshComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PoseableMeshComponent;
	static Find(Outer: UObject, ResourceName: string): PoseableMeshComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PoseableMeshComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseableMeshComponent;
	SetBoneTransformByName(BoneName: string,InTransform: Transform,BoneSpace: EBoneSpaces): void;
	SetBoneScaleByName(BoneName: string,InScale3D: Vector,BoneSpace: EBoneSpaces): void;
	SetBoneRotationByName(BoneName: string,InRotation: Rotator,BoneSpace: EBoneSpaces): void;
	SetBoneLocationByName(BoneName: string,InLocation: Vector,BoneSpace: EBoneSpaces): void;
	ResetBoneTransformByName(BoneName: string): void;
	GetBoneTransformByName(BoneName: string,BoneSpace: EBoneSpaces): Transform;
	GetBoneScaleByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	GetBoneRotationByName(BoneName: string,BoneSpace: EBoneSpaces): Rotator;
	GetBoneLocationByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	CopyPoseFromSkeletalComponent(InComponentToCopy: SkeletalMeshComponent): void;
	static C(Other: UObject): PoseableMeshComponent;
}

declare class NavMeshRenderingComponent extends PrimitiveComponent { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavMeshRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavMeshRenderingComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavMeshRenderingComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshRenderingComponent;
	static C(Other: UObject): NavMeshRenderingComponent;
}

declare class BoxReflectionCaptureComponent extends ReflectionCaptureComponent { 
	BoxTransitionDistance: number;
	PreviewInfluenceBox: BoxComponent;
	PreviewCaptureBox: BoxComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BoxReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): BoxReflectionCaptureComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BoxReflectionCaptureComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCaptureComponent;
	static C(Other: UObject): BoxReflectionCaptureComponent;
}

declare class PlaneReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadiusScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	PreviewCaptureBox: BoxComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PlaneReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): PlaneReflectionCaptureComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlaneReflectionCaptureComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCaptureComponent;
	static C(Other: UObject): PlaneReflectionCaptureComponent;
}

declare class SphereReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadius: number;
	CaptureDistanceScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SphereReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SphereReflectionCaptureComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SphereReflectionCaptureComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCaptureComponent;
	static C(Other: UObject): SphereReflectionCaptureComponent;
}

declare class SpringArmComponent extends SceneComponent { 
	TargetArmLength: number;
	SocketOffset: Vector;
	TargetOffset: Vector;
	ProbeSize: number;
	ProbeChannel: ECollisionChannel;
	bDoCollisionTest: boolean;
	bUsePawnControlRotation: boolean;
	bInheritPitch: boolean;
	bInheritYaw: boolean;
	bInheritRoll: boolean;
	bEnableCameraLag: boolean;
	bEnableCameraRotationLag: boolean;
	bUseCameraLagSubstepping: boolean;
	bDrawDebugLagMarkers: boolean;
	CameraLagSpeed: number;
	CameraRotationLagSpeed: number;
	CameraLagMaxTimeStep: number;
	CameraLagMaxDistance: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SpringArmComponent;
	static Find(Outer: UObject, ResourceName: string): SpringArmComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SpringArmComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpringArmComponent;
	static C(Other: UObject): SpringArmComponent;
}

declare type EStereoLayerType = 'SLT_WorldLocked' | 'SLT_TrackerLocked' | 'SLT_FaceLocked';
declare var EStereoLayerType : { SLT_WorldLocked:'SLT_WorldLocked',SLT_TrackerLocked:'SLT_TrackerLocked',SLT_FaceLocked:'SLT_FaceLocked', };
declare type EStereoLayerShape = 'SLSH_QuadLayer' | 'SLSH_CylinderLayer' | 'SLSH_CubemapLayer';
declare var EStereoLayerShape : { SLSH_QuadLayer:'SLSH_QuadLayer',SLSH_CylinderLayer:'SLSH_CylinderLayer',SLSH_CubemapLayer:'SLSH_CubemapLayer', };
declare class StereoLayerComponent extends SceneComponent { 
	bLiveTexture: boolean;
	bSupportsDepth: boolean;
	bNoAlphaChannel: boolean;
	Texture: Texture;
	LeftTexture: Texture;
	bQuadPreserveTextureRatio: boolean;
	QuadSize: Vector2D;
	UVRect: Box2D;
	CylinderRadius: number;
	CylinderOverlayArc: number;
	CylinderHeight: number;
	StereoLayerType: EStereoLayerType;
	StereoLayerShape: EStereoLayerShape;
	Priority: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StereoLayerComponent;
	static Find(Outer: UObject, ResourceName: string): StereoLayerComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StereoLayerComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerComponent;
	SetUVRect(InUVRect: Box2D): void;
	SetTexture(InTexture: Texture): void;
	SetQuadSize(InQuadSize: Vector2D): void;
	SetPriority(InPriority: number): void;
	MarkTextureForUpdate(): void;
	GetUVRect(): Box2D;
	GetTexture(): Texture;
	GetQuadSize(): Vector2D;
	GetPriority(): number;
	static C(Other: UObject): StereoLayerComponent;
}

declare class TimelineEventEntry { 
	Time: number;
	EventFunc: UnrealEngineDelegate<() => void>;
	clone() : TimelineEventEntry;
	static C(Other: UObject): TimelineEventEntry;
}

declare class TimelineVectorTrack { 
	VectorCurve: CurveVector;
	InterpFunc: UnrealEngineDelegate<(Output: Vector) => void>;
	TrackName: string;
	VectorPropertyName: string;
	VectorProperty: StructProperty;
	clone() : TimelineVectorTrack;
	static C(Other: UObject): TimelineVectorTrack;
}

declare class TimelineFloatTrack { 
	FloatCurve: CurveFloat;
	InterpFunc: UnrealEngineDelegate<(Output: number) => void>;
	TrackName: string;
	FloatPropertyName: string;
	FloatProperty: FloatProperty;
	clone() : TimelineFloatTrack;
	static C(Other: UObject): TimelineFloatTrack;
}

declare class TimelineLinearColorTrack { 
	LinearColorCurve: CurveLinearColor;
	InterpFunc: UnrealEngineDelegate<(Output: LinearColor) => void>;
	TrackName: string;
	LinearColorPropertyName: string;
	LinearColorProperty: StructProperty;
	clone() : TimelineLinearColorTrack;
	static C(Other: UObject): TimelineLinearColorTrack;
}

declare class Timeline { 
	LengthMode: ETimelineLengthMode;
	Length: number;
	bLooping: boolean;
	bReversePlayback: boolean;
	bPlaying: boolean;
	PlayRate: number;
	Position: number;
	Events: TimelineEventEntry[];
	InterpVectors: TimelineVectorTrack[];
	InterpFloats: TimelineFloatTrack[];
	InterpLinearColors: TimelineLinearColorTrack[];
	TimelinePostUpdateFunc: UnrealEngineDelegate<() => void>;
	TimelineFinishedFunc: UnrealEngineDelegate<() => void>;
	PropertySetObject: any;
	DirectionPropertyName: string;
	DirectionProperty: ByteProperty;
	clone() : Timeline;
	static C(Other: UObject): Timeline;
}

declare class TimelineComponent extends ActorComponent { 
	TheTimeline: Timeline;
	bIgnoreTimeDilation: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TimelineComponent;
	static Find(Outer: UObject, ResourceName: string): TimelineComponent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TimelineComponent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimelineComponent;
	Stop(): void;
	SetVectorCurve(NewVectorCurve: CurveVector,VectorTrackName: string): void;
	SetTimelineLengthMode(NewLengthMode: ETimelineLengthMode): void;
	SetTimelineLength(NewLength: number): void;
	SetPlayRate(NewRate: number): void;
	SetPlaybackPosition(NewPosition: number,bFireEvents: boolean,bFireUpdate: boolean): void;
	SetNewTime(NewTime: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetLinearColorCurve(NewLinearColorCurve: CurveLinearColor,LinearColorTrackName: string): void;
	SetIgnoreTimeDilation(bNewIgnoreTimeDilation: boolean): void;
	SetFloatCurve(NewFloatCurve: CurveFloat,FloatTrackName: string): void;
	ReverseFromEnd(): void;
	Reverse(): void;
	PlayFromStart(): void;
	Play(): void;
	OnRep_Timeline(): void;
	IsReversing(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetTimelineLength(): number;
	GetPlayRate(): number;
	GetPlaybackPosition(): number;
	GetIgnoreTimeDilation(): boolean;
	static C(Other: UObject): TimelineComponent;
}

declare class AnimComposite extends AnimCompositeBase { 
	AnimationTrack: AnimTrack;
	PreviewBasePose: AnimSequence;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimComposite;
	static Find(Outer: UObject, ResourceName: string): AnimComposite;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimComposite;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimComposite;
	static C(Other: UObject): AnimComposite;
}

declare type EBlendSpaceAxis = 'BSA_None' | 'BSA_X' | 'BSA_Y';
declare var EBlendSpaceAxis : { BSA_None:'BSA_None',BSA_X:'BSA_X',BSA_Y:'BSA_Y', };
declare class BlendSpace extends BlendSpaceBase { 
	AxisToScaleAnimation: EBlendSpaceAxis;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendSpace;
	static Find(Outer: UObject, ResourceName: string): BlendSpace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendSpace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace;
	static C(Other: UObject): BlendSpace;
}

declare class AimOffsetBlendSpace extends BlendSpace { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AimOffsetBlendSpace;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AimOffsetBlendSpace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace;
	static C(Other: UObject): AimOffsetBlendSpace;
}

declare class BlendSpace1D extends BlendSpaceBase { 
	bDisplayEditorVertically: boolean;
	bScaleAnimation: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpace1D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlendSpace1D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace1D;
	static C(Other: UObject): BlendSpace1D;
}

declare class AimOffsetBlendSpace1D extends BlendSpace1D { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AimOffsetBlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace1D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AimOffsetBlendSpace1D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace1D;
	static C(Other: UObject): AimOffsetBlendSpace1D;
}

declare class AnimStateMachineTypes extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimStateMachineTypes;
	static Find(Outer: UObject, ResourceName: string): AnimStateMachineTypes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimStateMachineTypes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateMachineTypes;
	static C(Other: UObject): AnimStateMachineTypes;
}

declare class AnimClassInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimClassInterface;
	static Find(Outer: UObject, ResourceName: string): AnimClassInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimClassInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassInterface;
	static C(Other: UObject): AnimClassInterface;
}

declare class BakedStateExitTransition { 
	CanTakeDelegateIndex: number;
	CustomResultNodeIndex: number;
	TransitionIndex: number;
	bDesiredTransitionReturnValue: boolean;
	bAutomaticRemainingTimeRule: boolean;
	PoseEvaluatorLinks: number[];
	clone() : BakedStateExitTransition;
	static C(Other: UObject): BakedStateExitTransition;
}

declare class BakedAnimationState { 
	StateName: string;
	Transitions: BakedStateExitTransition[];
	StateRootNodeIndex: number;
	StartNotify: number;
	EndNotify: number;
	FullyBlendedNotify: number;
	bIsAConduit: boolean;
	EntryRuleNodeIndex: number;
	PlayerNodeIndices: number[];
	bAlwaysResetOnEntry: boolean;
	clone() : BakedAnimationState;
	static C(Other: UObject): BakedAnimationState;
}

declare class AnimationStateBase { 
	StateName: string;
	clone() : AnimationStateBase;
	static C(Other: UObject): AnimationStateBase;
}

declare class AnimationTransitionBetweenStates extends AnimationStateBase { 
	PreviousState: number;
	NextState: number;
	CrossfadeDuration: number;
	StartNotify: number;
	EndNotify: number;
	InterruptNotify: number;
	BlendMode: EAlphaBlendOption;
	CustomCurve: CurveFloat;
	BlendProfile: BlendProfile;
	LogicType: ETransitionLogicType;
	clone() : AnimationTransitionBetweenStates;
	static C(Other: UObject): AnimationTransitionBetweenStates;
}

declare class BakedAnimationStateMachine { 
	MachineName: string;
	InitialState: number;
	States: BakedAnimationState[];
	Transitions: AnimationTransitionBetweenStates[];
	clone() : BakedAnimationStateMachine;
	static C(Other: UObject): BakedAnimationStateMachine;
}

declare class AnimClassData extends UObject { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	RootAnimNodeIndex: number;
	OrderedSavedPoseIndices: number[];
	RootAnimNodeProperty: StructProperty;
	AnimNodeProperties: StructProperty[];
	SyncGroupNames: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimClassData;
	static Find(Outer: UObject, ResourceName: string): AnimClassData;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimClassData;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassData;
	static C(Other: UObject): AnimClassData;
}

declare class AnimCompress_Automatic extends AnimCompress { 
	MaxEndEffectorError: number;
	bTryFixedBitwiseCompression: boolean;
	bTryPerTrackBitwiseCompression: boolean;
	bTryLinearKeyRemovalCompression: boolean;
	bTryIntervalKeyRemoval: boolean;
	bRunCurrentDefaultCompressor: boolean;
	bAutoReplaceIfExistingErrorTooGreat: boolean;
	bRaiseMaxErrorToExisting: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_Automatic;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_Automatic;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_Automatic;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_Automatic;
	static C(Other: UObject): AnimCompress_Automatic;
}

declare class AnimCompress_BitwiseCompressOnly extends AnimCompress { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_BitwiseCompressOnly;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_BitwiseCompressOnly;
	static C(Other: UObject): AnimCompress_BitwiseCompressOnly;
}

declare class AnimCompress_LeastDestructive extends AnimCompress { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_LeastDestructive;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_LeastDestructive;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_LeastDestructive;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_LeastDestructive;
	static C(Other: UObject): AnimCompress_LeastDestructive;
}

declare class AnimCompress_RemoveEverySecondKey extends AnimCompress { 
	MinKeys: number;
	bStartAtSecondKey: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_RemoveEverySecondKey;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveEverySecondKey;
	static C(Other: UObject): AnimCompress_RemoveEverySecondKey;
}

declare class AnimCompress_RemoveLinearKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	MaxEffectorDiff: number;
	MinEffectorDiff: number;
	EffectorDiffSocket: number;
	ParentKeyScale: number;
	bRetarget: boolean;
	bActuallyFilterLinearKeys: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_RemoveLinearKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveLinearKeys;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_RemoveLinearKeys;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveLinearKeys;
	static C(Other: UObject): AnimCompress_RemoveLinearKeys;
}

declare class AnimCompress_PerTrackCompression extends AnimCompress_RemoveLinearKeys { 
	MaxZeroingThreshold: number;
	MaxPosDiffBitwise: number;
	MaxAngleDiffBitwise: number;
	MaxScaleDiffBitwise: number;
	AllowedRotationFormats: AnimationCompressionFormat[];
	AllowedTranslationFormats: AnimationCompressionFormat[];
	AllowedScaleFormats: AnimationCompressionFormat[];
	bResampleAnimation: boolean;
	ResampledFramerate: number;
	MinKeysForResampling: number;
	bUseAdaptiveError: boolean;
	bUseOverrideForEndEffectors: boolean;
	TrackHeightBias: number;
	ParentingDivisor: number;
	ParentingDivisorExponent: number;
	bUseAdaptiveError2: boolean;
	RotationErrorSourceRatio: number;
	TranslationErrorSourceRatio: number;
	ScaleErrorSourceRatio: number;
	MaxErrorPerTrackRatio: number;
	PerturbationProbeSize: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_PerTrackCompression;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_PerTrackCompression;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_PerTrackCompression;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_PerTrackCompression;
	static C(Other: UObject): AnimCompress_PerTrackCompression;
}

declare class AnimCompress_RemoveTrivialKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimCompress_RemoveTrivialKeys;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveTrivialKeys;
	static C(Other: UObject): AnimCompress_RemoveTrivialKeys;
}

declare class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	RootAnimNodeIndex: number;
	OrderedSavedPoseIndices: number[];
	SyncGroupNames: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimBlueprintGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintGeneratedClass;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimBlueprintGeneratedClass;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintGeneratedClass;
	static C(Other: UObject): AnimBlueprintGeneratedClass;
}

declare class VehicleAnimInstance extends AnimInstance { 
	WheeledVehicleMovementComponent: WheeledVehicleMovementComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VehicleAnimInstance;
	static Find(Outer: UObject, ResourceName: string): VehicleAnimInstance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VehicleAnimInstance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleAnimInstance;
	GetVehicle(): WheeledVehicle;
	static C(Other: UObject): VehicleAnimInstance;
}

declare class AnimNotify_PlayParticleEffect extends AnimNotify { 
	PSTemplate: ParticleSystem;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	Attached: boolean;
	SocketName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimNotify_PlayParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlayParticleEffect;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimNotify_PlayParticleEffect;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlayParticleEffect;
	static C(Other: UObject): AnimNotify_PlayParticleEffect;
}

declare class AnimNotify_PlaySound extends AnimNotify { 
	Sound: SoundBase;
	VolumeMultiplier: number;
	PitchMultiplier: number;
	bFollow: boolean;
	AttachName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimNotify_PlaySound;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlaySound;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimNotify_PlaySound;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlaySound;
	static C(Other: UObject): AnimNotify_PlaySound;
}

declare class AnimNotifyState_TimedParticleEffect extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	SocketName: string;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	bDestroyAtEnd: boolean;
	PreviousPSTemplates: ParticleSystem[];
	PreviousSocketNames: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimNotifyState_TimedParticleEffect;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_TimedParticleEffect;
	static C(Other: UObject): AnimNotifyState_TimedParticleEffect;
}

declare class AnimNotifyState_Trail extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	FirstSocketName: string;
	SecondSocketName: string;
	WidthScaleMode: ETrailWidthMode;
	WidthScaleCurve: string;
	bRecycleSpawnedSystems: boolean;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimNotifyState_Trail;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_Trail;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimNotifyState_Trail;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_Trail;
	OverridePSTemplate(MeshComp: SkeletalMeshComponent,Animation: AnimSequenceBase): ParticleSystem;
	static C(Other: UObject): AnimNotifyState_Trail;
}

declare class AnimSetMeshLinkup { 
	BoneToTrackTable: number[];
	clone() : AnimSetMeshLinkup;
	static C(Other: UObject): AnimSetMeshLinkup;
}

declare class AnimSet extends UObject { 
	bAnimRotationOnly: boolean;
	TrackBoneNames: string[];
	Sequences: AnimSequence[];
	LinkupCache: AnimSetMeshLinkup[];
	BoneUseAnimTranslation: number[];
	ForceUseMeshTranslation: number[];
	UseTranslationBoneNames: string[];
	ForceMeshTranslationBoneNames: string[];
	PreviewSkelMeshName: string;
	BestRatioSkelMeshName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimSet;
	static Find(Outer: UObject, ResourceName: string): AnimSet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimSet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSet;
	static C(Other: UObject): AnimSet;
}

declare class EditorMapPerformanceTestDefinition { 
	PerformanceTestmap: FilePath;
	TestTimer: number;
	clone() : EditorMapPerformanceTestDefinition;
	static C(Other: UObject): EditorMapPerformanceTestDefinition;
}

declare class ImportFactorySettingValues { 
	SettingName: string;
	Value: string;
	clone() : ImportFactorySettingValues;
	static C(Other: UObject): ImportFactorySettingValues;
}

declare class EditorImportWorkflowDefinition { 
	ImportFilePath: FilePath;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportWorkflowDefinition;
	static C(Other: UObject): EditorImportWorkflowDefinition;
}

declare class BuildPromotionImportWorkflowSettings { 
	Diffuse: EditorImportWorkflowDefinition;
	Normal: EditorImportWorkflowDefinition;
	StaticMesh: EditorImportWorkflowDefinition;
	ReimportStaticMesh: EditorImportWorkflowDefinition;
	BlendShapeMesh: EditorImportWorkflowDefinition;
	MorphMesh: EditorImportWorkflowDefinition;
	SkeletalMesh: EditorImportWorkflowDefinition;
	Animation: EditorImportWorkflowDefinition;
	Sound: EditorImportWorkflowDefinition;
	SurroundSound: EditorImportWorkflowDefinition;
	OtherAssetsToImport: EditorImportWorkflowDefinition[];
	clone() : BuildPromotionImportWorkflowSettings;
	static C(Other: UObject): BuildPromotionImportWorkflowSettings;
}

declare class BuildPromotionOpenAssetSettings { 
	BlueprintAsset: FilePath;
	MaterialAsset: FilePath;
	ParticleSystemAsset: FilePath;
	SkeletalMeshAsset: FilePath;
	StaticMeshAsset: FilePath;
	TextureAsset: FilePath;
	clone() : BuildPromotionOpenAssetSettings;
	static C(Other: UObject): BuildPromotionOpenAssetSettings;
}

declare class BuildPromotionNewProjectSettings { 
	NewProjectFolderOverride: DirectoryPath;
	NewProjectNameOverride: string;
	clone() : BuildPromotionNewProjectSettings;
	static C(Other: UObject): BuildPromotionNewProjectSettings;
}

declare class BuildPromotionTestSettings { 
	DefaultStaticMeshAsset: FilePath;
	ImportWorkflow: BuildPromotionImportWorkflowSettings;
	OpenAssets: BuildPromotionOpenAssetSettings;
	NewProjectSettings: BuildPromotionNewProjectSettings;
	SourceControlMaterial: FilePath;
	clone() : BuildPromotionTestSettings;
	static C(Other: UObject): BuildPromotionTestSettings;
}

declare class MaterialEditorPromotionSettings { 
	DefaultMaterialAsset: FilePath;
	DefaultDiffuseTexture: FilePath;
	DefaultNormalTexture: FilePath;
	clone() : MaterialEditorPromotionSettings;
	static C(Other: UObject): MaterialEditorPromotionSettings;
}

declare class ParticleEditorPromotionSettings { 
	DefaultParticleAsset: FilePath;
	clone() : ParticleEditorPromotionSettings;
	static C(Other: UObject): ParticleEditorPromotionSettings;
}

declare class BlueprintEditorPromotionSettings { 
	FirstMeshPath: FilePath;
	SecondMeshPath: FilePath;
	DefaultParticleAsset: FilePath;
	clone() : BlueprintEditorPromotionSettings;
	static C(Other: UObject): BlueprintEditorPromotionSettings;
}

declare class OpenTestAsset { 
	AssetToOpen: FilePath;
	bSkipTestWhenUnAttended: boolean;
	clone() : OpenTestAsset;
	static C(Other: UObject): OpenTestAsset;
}

declare class ExternalToolDefinition { 
	ToolName: string;
	ExecutablePath: FilePath;
	CommandLineOptions: string;
	WorkingDirectory: DirectoryPath;
	ScriptExtension: string;
	ScriptDirectory: DirectoryPath;
	clone() : ExternalToolDefinition;
	static C(Other: UObject): ExternalToolDefinition;
}

declare class EditorImportExportTestDefinition { 
	ImportFilePath: FilePath;
	ExportFileExtension: string;
	bSkipExport: boolean;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportExportTestDefinition;
	static C(Other: UObject): EditorImportExportTestDefinition;
}

declare class LaunchOnTestSettings { 
	LaunchOnTestmap: FilePath;
	DeviceID: string;
	clone() : LaunchOnTestSettings;
	static C(Other: UObject): LaunchOnTestSettings;
}

declare class AutomationTestSettings extends UObject { 
	AutomationTestmap: FilePath;
	EditorPerformanceTestMaps: EditorMapPerformanceTestDefinition[];
	BuildPromotionTest: BuildPromotionTestSettings;
	MaterialEditorPromotionTest: MaterialEditorPromotionSettings;
	ParticleEditorPromotionTest: ParticleEditorPromotionSettings;
	BlueprintEditorPromotionTest: BlueprintEditorPromotionSettings;
	EngineTestModules: string[];
	EditorTestModules: string[];
	TestLevelFolders: string[];
	TestAssetsToOpen: OpenTestAsset[];
	ExternalTools: ExternalToolDefinition[];
	ImportExportTestDefinitions: EditorImportExportTestDefinition[];
	LaunchOnSettings: LaunchOnTestSettings[];
	DefaultScreenshotResolution: IntPoint;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AutomationTestSettings;
	static Find(Outer: UObject, ResourceName: string): AutomationTestSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AutomationTestSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationTestSettings;
	static C(Other: UObject): AutomationTestSettings;
}

declare class NavEdgeProviderInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavEdgeProviderInterface;
	static Find(Outer: UObject, ResourceName: string): NavEdgeProviderInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavEdgeProviderInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavEdgeProviderInterface;
	static C(Other: UObject): NavEdgeProviderInterface;
}

declare type EScreenOrientation = 'Unknown' | 'Portrait' | 'PortraitUpsideDown' | 'LandscapeLeft' | 'LandscapeRight' | 'FaceUp' | 'FaceDown';
declare var EScreenOrientation : { Unknown:'Unknown',Portrait:'Portrait',PortraitUpsideDown:'PortraitUpsideDown',LandscapeLeft:'LandscapeLeft',LandscapeRight:'LandscapeRight',FaceUp:'FaceUp',FaceDown:'FaceDown', };
declare class PlatformGameInstance extends GameInstance { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationRegisteredForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inArray: number[]) => void>;
	ApplicationRegisteredForUserNotificationsDelegate: UnrealEngineMulticastDelegate<(inInt: number) => void>;
	ApplicationFailedToRegisterForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inString: string) => void>;
	ApplicationReceivedRemoteNotificationDelegate: UnrealEngineMulticastDelegate<(inString: string) => void>;
	ApplicationReceivedLocalNotificationDelegate: UnrealEngineMulticastDelegate<(inString: string, inInt: number) => void>;
	ApplicationReceivedScreenOrientationChangedNotificationDelegate: UnrealEngineMulticastDelegate<(inScreenOrientation: EScreenOrientation) => void>;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PlatformGameInstance;
	static Find(Outer: UObject, ResourceName: string): PlatformGameInstance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PlatformGameInstance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformGameInstance;
	static C(Other: UObject): PlatformGameInstance;
}

declare class BlueprintPlatformLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintPlatformLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintPlatformLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintPlatformLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPlatformLibrary;
	static ScheduleLocalNotificationFromNow(inSecondsFromNow: number,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static GetLaunchNotification(NotificationLaunchedApp?: boolean,ActivationEvent?: string,FireDate?: number): {NotificationLaunchedApp: boolean, ActivationEvent: string, FireDate: number};
	static ClearAllLocalNotifications(): void;
	static CancelLocalNotification(ActivationEvent: string): void;
	static C(Other: UObject): BlueprintPlatformLibrary;
}

declare class BlueprintSetLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BlueprintSetLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintSetLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BlueprintSetLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintSetLibrary;
	static Union(A: any,B: any,Result?: any): {Result: any};
	static ToArray(A: any,Result?: number[]): {Result: number[]};
	static RemoveItems(TargetSet: any,Items: number[]): void;
	static Remove(TargetSet: any,Item: number): boolean;
	static Length(TargetSet: any): number;
	static Intersection(A: any,B: any,Result?: any): {Result: any};
	static Difference(A: any,B: any,Result?: any): {Result: any};
	static ContainsItem(TargetSet: any,ItemToFind: number): boolean;
	static Clear(TargetSet: any): void;
	static AddItems(TargetSet: any,NewItems: number[]): void;
	static Add(TargetSet: any,NewItem: number): void;
	static C(Other: UObject): BlueprintSetLibrary;
}

declare type EEvaluateCurveTableResult = 'RowFound' | 'RowNotFound';
declare var EEvaluateCurveTableResult : { RowFound:'RowFound',RowNotFound:'RowNotFound', };
declare class CurveTable extends UObject { 
	AssetImportData: AssetImportData;
	ImportPath: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveTable;
	static Find(Outer: UObject, ResourceName: string): CurveTable;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveTable;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveTable;
	static C(Other: UObject): CurveTable;
	EvaluateCurveTableRow(RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
}

declare class DataTableFunctionLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DataTableFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): DataTableFunctionLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DataTableFunctionLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFunctionLibrary;
	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
	static C(Other: UObject): DataTableFunctionLibrary;
}

declare class DebugDrawService extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DebugDrawService;
	static Find(Outer: UObject, ResourceName: string): DebugDrawService;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DebugDrawService;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugDrawService;
	static C(Other: UObject): DebugDrawService;
}

declare class CollisionResponseTemplate { 
	Name: string;
	CollisionEnabled: ECollisionEnabled;
	ObjectTypeName: string;
	CustomResponses: ResponseChannel[];
	HelpMessage: string;
	bCanModify: boolean;
	clone() : CollisionResponseTemplate;
	static C(Other: UObject): CollisionResponseTemplate;
}

declare class CustomChannelSetup { 
	Channel: ECollisionChannel;
	Name: string;
	DefaultResponse: ECollisionResponse;
	bTraceType: boolean;
	bStaticObject: boolean;
	clone() : CustomChannelSetup;
	static C(Other: UObject): CustomChannelSetup;
}

declare class CustomProfile { 
	Name: string;
	CustomResponses: ResponseChannel[];
	clone() : CustomProfile;
	static C(Other: UObject): CustomProfile;
}

declare class Redirector { 
	OldName: string;
	NewName: string;
	clone() : Redirector;
	static C(Other: UObject): Redirector;
}

declare class CollisionProfile extends DeveloperSettings { 
	Profiles: CollisionResponseTemplate[];
	DefaultChannelResponses: CustomChannelSetup[];
	EditProfiles: CustomProfile[];
	ProfileRedirects: Redirector[];
	CollisionChannelRedirects: Redirector[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CollisionProfile;
	static Find(Outer: UObject, ResourceName: string): CollisionProfile;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CollisionProfile;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CollisionProfile;
	static C(Other: UObject): CollisionProfile;
}

declare class UserActivity { 
	ActionName: string;
	clone() : UserActivity;
	static C(Other: UObject): UserActivity;
	SetUserActivity(): void;
	static SetUserActivity(UserActivity: UserActivity): void;
}

declare class KismetSystemLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetSystemLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetSystemLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetSystemLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetSystemLibrary;
	static StackTrace(): void;
	static SphereTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static SingleSphereTraceByObjectDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectsToTrace: ECollisionChannel[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static SphereTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static SingleSphereTraceByChannelDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ECollisionChannel,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static MultiSphereTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiSphereTraceByObjectDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectsToTrace: ECollisionChannel[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiSphereTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiSphereTraceByChannelDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ECollisionChannel,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static SphereOverlapComponents(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static SphereOverlapComponents_DEPRECATED(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,Filter: EOverlapFilterOption,ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static SphereOverlapActors(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static SphereOverlapActors_DEPRECATED(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,Filter: EOverlapFilterOption,ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static ShowPlatformSpecificLeaderboardScreen(CategoryName: string): void;
	static ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController): void;
	static ShowInterstitialAd(): void;
	static ShowAdBanner(AdIdIndex: number,bShowOnBottomOfScreen: boolean): void;
	static SetWindowTitle(Title: string): void;
	static SetVolumeButtonsHandledBySystem(bEnabled: boolean): void;
	static SetVectorPropertyByName(UObject: UObject,PropertyName: string,Value: Vector): void;
	static SetUserActivity(UserActivity: UserActivity): void;
	static SetTransformPropertyByName(UObject: UObject,PropertyName: string,Value: Transform): void;
	static SetTextPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetSuppressViewportTransitionMessage(WorldContextObject: UObject,bState: boolean): void;
	static SetStructurePropertyByName(UObject: UObject,PropertyName: string,Value: GenericStruct): void;
	static SetStringPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetRotatorPropertyByName(UObject: UObject,PropertyName: string,Value: Rotator): void;
	static SetObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
	static SetNamePropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetLinearColorPropertyByName(UObject: UObject,PropertyName: string,Value: LinearColor): void;
	static SetIntPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetFloatPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetCollisionProfileNameProperty(UObject: UObject,PropertyName: string,Value: CollisionProfileName): void;
	static SetClassPropertyByName(UObject: UObject,PropertyName: string,Value: UnrealEngineClass): void;
	static SetBytePropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetBoolPropertyByName(UObject: UObject,PropertyName: string,Value: boolean): void;
	static SetAssetPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static SetAssetClassPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static RetriggerableDelay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
	static ResetGamepadAssignmentToController(ControllerId: number): void;
	static ResetGamepadAssignments(): void;
	static RegisterForRemoteNotifications(): void;
	static QuitGame(WorldContextObject: UObject,SpecificPlayer: PlayerController,QuitPreference: EQuitPreference): void;
	static PrintWarning(InString: string): void;
	static PrintText(WorldContextObject: UObject,InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
	static PrintString(WorldContextObject: UObject,InString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
	static MoveComponentTo(Component: SceneComponent,TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
	static MakeLiteralText(Value: string): string;
	static MakeLiteralString(Value: string): string;
	static MakeLiteralName(Value: string): string;
	static MakeLiteralInt(Value: number): number;
	static MakeLiteralFloat(Value: number): number;
	static MakeLiteralByte(Value: number): number;
	static MakeLiteralBool(Value: boolean): boolean;
	static LoadInterstitialAd(AdIdIndex: number): void;
	static LineTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static SingleLineTraceByObjectDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectsToTrace: ECollisionChannel[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static LineTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static SingleLineTraceByChannelDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ECollisionChannel,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static MultiLineTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiLineTraceByObjectDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectsToTrace: ECollisionChannel[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiLineTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiLineTraceByChannelDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ECollisionChannel,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static LaunchURL(URL: string): void;
	static UnpauseTimerbyHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static UnpauseTimerbyFunctionName(UObject: UObject,FunctionName: string): void;
	static DoesTimerExistbyHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static DoesTimerExistbyFunctionName(UObject: UObject,FunctionName: string): boolean;
	static SetTimerbyFunctionName(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean): TimerHandle;
	static PauseTimerbyHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static PauseTimerbyFunctionName(UObject: UObject,FunctionName: string): void;
	static IsValid(Handle: TimerHandle): boolean;
	static IsTimerPausedbyHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static IsTimerPausedbyFunctionName(UObject: UObject,FunctionName: string): boolean;
	static IsTimerActivebyHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static IsTimerActivebyFunctionName(UObject: UObject,FunctionName: string): boolean;
	static Invalidate(Handle?: TimerHandle): {Handle: TimerHandle, $: TimerHandle};
	static GetTimerRemainingTimebyHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
	static GetTimerRemainingTimebyFunctionName(UObject: UObject,FunctionName: string): number;
	static GetTimerElapsedTimebyHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
	static GetTimerElapsedTimebyFunctionName(UObject: UObject,FunctionName: string): number;
	static ClearTimerbyHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static ClearTimerbyFunctionName(UObject: UObject,FunctionName: string): void;
	static ClearandInvalidateTimerbyHandle(WorldContextObject: UObject,Handle?: TimerHandle): {Handle: TimerHandle};
	static IsValidClass(Class: UnrealEngineClass): boolean;
	static IsValid(UObject: UObject): boolean;
	static IsStandalone(WorldContextObject: UObject): boolean;
	static IsServer(WorldContextObject: UObject): boolean;
	static IsPackagedForDistribution(): boolean;
	static IsLoggedIn(SpecificPlayer: PlayerController): boolean;
	static IsInterstitialAdRequested(): boolean;
	static IsInterstitialAdAvailable(): boolean;
	static IsDedicatedServer(WorldContextObject: UObject): boolean;
	static IsControllerAssignedToGamepad(ControllerId: number): boolean;
	static HideAdBanner(): void;
	static GetVolumeButtonsHandledBySystem(): boolean;
	static GetUniqueDeviceId(): string;
	static GetSupportedFullscreenResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
	static GetRenderingMaterialQualityLevel(): number;
	static GetRenderingDetailMode(): number;
	static GetPreferredLanguages(): string[];
	static GetPlatformUserName(): string;
	static GetPathName(UObject: UObject): string;
	static GetObjectName(UObject: UObject): string;
	static GetMinYResolutionForUI(): number;
	static GetMinYResolutionFor3DView(): number;
	static GetLocalCurrencySymbol(): string;
	static GetLocalCurrencyCode(): string;
	static GetGameTimeInSeconds(WorldContextObject: UObject): number;
	static GetGameName(): string;
	static GetGameBundleId(): string;
	static GetEngineVersion(): string;
	static GetDisplayName(UObject: UObject): string;
	static GetConvenientWindowedResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
	static GetComponentBounds(Component: SceneComponent,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
	static GetDisplayName(Class: UnrealEngineClass): string;
	static GetAdIDCount(): number;
	static GetActorListFromComponentList(ComponentList: PrimitiveComponent[],ActorClassFilter: UnrealEngineClass,OutActorList?: Actor[]): {OutActorList: Actor[]};
	static GetActorBounds(Actor: Actor,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
	static ForceCloseAdBanner(): void;
	static FlushPersistentDebugLines(WorldContextObject: UObject): void;
	static FlushDebugStrings(WorldContextObject: UObject): void;
	static ExecuteConsoleCommand(WorldContextObject: UObject,Command: string,SpecificPlayer: PlayerController): void;
	static DrawDebugString(WorldContextObject: UObject,TextLocation: Vector,Text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
	static DrawDebugSphere(WorldContextObject: UObject,Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugPoint(WorldContextObject: UObject,Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
	static DrawDebugPlane(WorldContextObject: UObject,PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
	static DrawDebugLine(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugFrustum(WorldContextObject: UObject,FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugFloatHistoryTransform(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
	static DrawDebugFloatHistoryLocation(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
	static DrawDebugCylinder(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCoordinateSystem(WorldContextObject: UObject,AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCircle(WorldContextObject: UObject,Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
	static DrawDebugCapsule(WorldContextObject: UObject,Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCamera(CameraActor: CameraActor,CameraColor: LinearColor,Duration: number): void;
	static DrawDebugBox(WorldContextObject: UObject,Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
	static DrawDebugArrow(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DoesImplementInterface(TestObject: UObject,Interface: UnrealEngineClass): boolean;
	static Delay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
	static CreateCopyForUndoBuffer(ObjectToModify: UObject): void;
	static Conv_AssetToObject(Asset: any): UObject;
	static Conv_AssetClassToClass(AssetClass: any): UnrealEngineClass;
	static ControlScreensaver(bAllowScreenSaver: boolean): void;
	static ComponentOverlapComponents(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static ComponentOverlapComponents_DEPRECATED(Component: PrimitiveComponent,ComponentTransform: Transform,Filter: EOverlapFilterOption,ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static ComponentOverlapActors(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static ComponentOverlapActors_DEPRECATED(Component: PrimitiveComponent,ComponentTransform: Transform,Filter: EOverlapFilterOption,ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CollectGarbage(): void;
	static CapsuleTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static SingleCapsuleTraceByObjectDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectsToTrace: ECollisionChannel[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static CapsuleTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static SingleCapsuleTraceByChannelDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ECollisionChannel,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static MultiCapsuleTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiCapsuleTraceByObjectDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectsToTrace: ECollisionChannel[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiCapsuleTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiCapsuleTraceByChannelDeprecated(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ECollisionChannel,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static CapsuleOverlapComponents(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static CapsuleOverlapComponents_DEPRECATED(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,Filter: EOverlapFilterOption,ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static CapsuleOverlapActors(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CapsuleOverlapActors_DEPRECATED(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,Filter: EOverlapFilterOption,ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CanLaunchURL(URL: string): boolean;
	static BoxTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static BoxTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean): {OutHit: HitResult, $: boolean};
	static MultiBoxTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static MultiBoxTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean): {OutHits: HitResult[], $: boolean};
	static BoxOverlapComponents(WorldContextObject: UObject,BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static BoxOverlapComponents_DEPRECATED(WorldContextObject: UObject,BoxPos: Vector,Extent: Vector,Filter: EOverlapFilterOption,ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static BoxOverlapActors(WorldContextObject: UObject,BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static BoxOverlapActors_DEPRECATED(WorldContextObject: UObject,BoxPos: Vector,BoxExtent: Vector,Filter: EOverlapFilterOption,ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static AddFloatHistorySample(Value: number,FloatHistory: DebugFloatHistory): DebugFloatHistory;
	static C(Other: UObject): KismetSystemLibrary;
}

declare class GameplayStatics extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GameplayStatics;
	static Find(Outer: UObject, ResourceName: string): GameplayStatics;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GameplayStatics;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayStatics;
	static UnloadStreamLevel(WorldContextObject: UObject,LevelName: string,LatentInfo: LatentActionInfo): void;
	static SuggestProjectileVelocityCustomArc(WorldContextObject: UObject,OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
	static SpawnSoundAttached(Sound: SoundBase,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency): AudioComponent;
	static SpawnSoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency): AudioComponent;
	static SpawnSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean): AudioComponent;
	static SpawnObject(ObjectClass: UnrealEngineClass,Outer: UObject): UObject;
	static SpawnEmitterAttached(EmitterTemplate: ParticleSystem,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bAutoDestroy: boolean): ParticleSystemComponent;
	static SpawnEmitterAtLocation(WorldContextObject: UObject,EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,bAutoDestroy: boolean): ParticleSystemComponent;
	static SpawnDialogueAttached(Dialogue: DialogueWave,Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): AudioComponent;
	static SpawnDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): AudioComponent;
	static SpawnDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): AudioComponent;
	static SpawnDecalAttached(DecalMaterial: MaterialInterface,DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
	static SetSubtitlesEnabled(bEnabled: boolean): void;
	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
	static SetGamePaused(WorldContextObject: UObject,bPaused: boolean): boolean;
	static SetBaseSoundMix(WorldContextObject: UObject,InSoundMix: SoundMix): void;
	static SaveGameToSlot(SaveGameObject: SaveGame,SlotName: string,UserIndex: number): boolean;
	static RemovePlayer(Player: PlayerController,bDestroyPawn: boolean): void;
	static RebaseZeroOriginOntoLocal(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static RebaseLocalOriginOntoZero(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static PushSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static ProjectWorldToScreen(Player: PlayerController,WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
	static PredictProjectilePath(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static PopSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static PlayWorldCameraShake(WorldContextObject: UObject,Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
	static PlaySoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency): void;
	static PlaySound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency): void;
	static PlayDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
	static PlayDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
	static ParseOption(Options: string,Key: string): string;
	static OpenLevel(WorldContextObject: UObject,LevelName: string,bAbsolute: boolean,Options: string): void;
	static MakeHitResult(bBlockingHit: boolean,bInitialOverlap: boolean,Time: number,Location: Vector,ImpactPoint: Vector,Normal: Vector,ImpactNormal: Vector,PhysMat: PhysicalMaterial,HitActor: Actor,HitComponent: PrimitiveComponent,HitBoneName: string,HitItem: number,FaceIndex: number,TraceStart: Vector,TraceEnd: Vector): HitResult;
	static LoadStreamLevel(WorldContextObject: UObject,LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
	static LoadGameFromSlot(SlotName: string,UserIndex: number): SaveGame;
	static IsGamePaused(WorldContextObject: UObject): boolean;
	static HasOption(Options: string,InKey: string): boolean;
	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
	static GetTimeSeconds(WorldContextObject: UObject): number;
	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
	static GetStreamingLevel(WorldContextObject: UObject,PackageName: string): LevelStreaming;
	static GetRealTimeSeconds(WorldContextObject: UObject): number;
	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
	static GetPlayerControllerID(Player: PlayerController): number;
	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
	static GetPlatformName(): string;
	static GetClass(UObject: UObject): UnrealEngineClass;
	static GetKeyValue(Pair: string,Key?: string,Value?: string): {Key: string, Value: string};
	static GetIntOption(Options: string,Key: string,DefaultValue: number): number;
	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
	static GetGameState(WorldContextObject: UObject): GameStateBase;
	static GetGameMode(WorldContextObject: UObject): GameModeBase;
	static GetGameInstance(WorldContextObject: UObject): GameInstance;
	static GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect;
	static GetCurrentLevelName(WorldContextObject: UObject,bRemovePrefixString: boolean): string;
	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetActorArrayBounds(Actors: Actor[],bOnlyCollidingComponents: boolean,Center?: Vector,BoxExtent?: Vector): {Center: Vector, BoxExtent: Vector};
	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
	static GetAccurateRealTime(WorldContextObject: UObject,Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
	static FlushLevelStreaming(WorldContextObject: UObject): void;
	static FinishSpawningActor(Actor: Actor,SpawnTransform: Transform): Actor;
	static FindCollisionUV(Hit: HitResult,UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
	static EnableLiveStreaming(Enable: boolean): void;
	static DoesSaveGameExist(SlotName: string,UserIndex: number): boolean;
	static DeprojectScreenToWorld(Player: PlayerController,ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
	static DeleteGameInSlot(SlotName: string,UserIndex: number): boolean;
	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean): AudioComponent;
	static CreateSaveGameObjectFromBlueprint(SaveGameBlueprint: Blueprint): SaveGame;
	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPawn: boolean): PlayerController;
	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
	static CancelAsyncLoading(): void;
	static BreakHitResult(Hit: HitResult,bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
	static SuggestProjectileVelocity(WorldContextObject: UObject,TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
	static BeginSpawningActorFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
	static BeginSpawningActorFromBlueprint(WorldContextObject: UObject,Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
	static BeginDeferredActorSpawnFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
	static AreSubtitlesEnabled(): boolean;
	static AreAnyListenersWithinRange(WorldContextObject: UObject,Location: Vector,MaximumRange: number): boolean;
	static ApplyRadialDamageWithFalloff(WorldContextObject: UObject,BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyRadialDamage(WorldContextObject: UObject,BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyPointDamage(DamagedActor: Actor,BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): void;
	static ApplyDamage(DamagedActor: Actor,BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): void;
	static ActivateReverbEffect(WorldContextObject: UObject,ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
	static C(Other: UObject): GameplayStatics;
}

declare type EHMDTrackingOrigin = 'Floor' | 'Eye';
declare var EHMDTrackingOrigin : { Floor:'Floor',Eye:'Eye', };
declare type EOrientPositionSelector = 'Orientation' | 'Position' | 'OrientationAndPosition';
declare var EOrientPositionSelector : { Orientation:'Orientation',Position:'Position',OrientationAndPosition:'OrientationAndPosition', };
declare class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HeadMountedDisplayFunctionLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HeadMountedDisplayFunctionLibrary;
	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
	static SetTrackingOrigin(Origin: EHMDTrackingOrigin): void;
	static SetClippingPlanes(Near: number,Far: number): void;
	static ResetOrientationAndPosition(Yaw: number,Options: EOrientPositionSelector): void;
	static IsInLowPersistenceMode(): boolean;
	static IsHeadMountedDisplayEnabled(): boolean;
	static HasValidTrackingPosition(): boolean;
	static GetWorldToMetersScale(WorldContext: UObject): number;
	static GetVRFocusState(bUseFocus?: boolean,bHasFocus?: boolean): {bUseFocus: boolean, bHasFocus: boolean};
	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,Index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
	static GetTrackingOrigin(): EHMDTrackingOrigin;
	static GetScreenPercentage(): number;
	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
	static GetNumOfTrackingSensors(): number;
	static GetHMDDeviceName(): string;
	static EnableLowPersistenceMode(bEnable: boolean): void;
	static EnableHMD(bEnable: boolean): boolean;
	static C(Other: UObject): HeadMountedDisplayFunctionLibrary;
}

declare class KismetArrayLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetArrayLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetArrayLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetArrayLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetArrayLibrary;
	static SetArrayPropertyByName(UObject: UObject,PropertyName: string,Value: number[]): void;
	static FilterArray(TargetArray: Actor[],FilterClass: UnrealEngineClass,FilteredArray?: Actor[]): {FilteredArray: Actor[]};
	static Shuffle(TargetArray: number[]): void;
	static SetArrayElem(TargetArray: number[],Index: number,Item: number,bSizeToFit: boolean): void;
	static Resize(TargetArray: number[],Size: number): void;
	static RemoveItem(TargetArray: number[],Item: number): boolean;
	static RemoveIndex(TargetArray: number[],IndexToRemove: number): void;
	static Length(TargetArray: number[]): number;
	static LastIndex(TargetArray: number[]): number;
	static IsValidIndex(TargetArray: number[],IndexToTest: number): boolean;
	static Insert(TargetArray: number[],NewItem: number,Index: number): void;
	static Get(TargetArray: number[],Index: number,Item?: number): {Item: number};
	static FindItem(TargetArray: number[],ItemToFind: number): number;
	static ContainsItem(TargetArray: number[],ItemToFind: number): boolean;
	static Clear(TargetArray: number[]): void;
	static AppendArray(TargetArray: number[],SourceArray: number[]): void;
	static AddUnique(TargetArray: number[],NewItem: number): number;
	static Add(TargetArray: number[],NewItem: number): number;
	static C(Other: UObject): KismetArrayLibrary;
}

declare class KismetGuidLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetGuidLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetGuidLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetGuidLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetGuidLibrary;
	static ParseStringtoGuid(GuidString: string,OutGuid?: Guid,Success?: boolean): {OutGuid: Guid, Success: boolean};
	static NotEqual(A: Guid,B: Guid): boolean;
	static NewGuid(): Guid;
	static IsValid(InGuid: Guid): boolean;
	static Invalidate_Guid(InGuid?: Guid): {InGuid: Guid};
	static Equal(A: Guid,B: Guid): boolean;
	static ToString(InGuid: Guid): string;
	static C(Other: UObject): KismetGuidLibrary;
}

declare class KismetInputLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetInputLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetInputLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetInputLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetInputLibrary;
	static IsTouchEvent(Input: UPointerEvent): boolean;
	static IsMouseButtonDown(Input: UPointerEvent,MouseButton: Key): boolean;
	static GetWheelDelta(Input: UPointerEvent): number;
	static GetUserIndex(Input: UPointerEvent): number;
	static GetTouchpadIndex(Input: UPointerEvent): number;
	static GetScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static GetPointerIndex(Input: UPointerEvent): number;
	static GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static GetGestureDelta(Input: UPointerEvent): Vector2D;
	static GetEffectingButton(Input: UPointerEvent): Key;
	static GetCursorDelta(Input: UPointerEvent): Vector2D;
	static Key_IsVectorAxis(Key: Key): boolean;
	static Key_IsMouseButton(Key: Key): boolean;
	static Key_IsModifierKey(Key: Key): boolean;
	static Key_IsKeyboardKey(Key: Key): boolean;
	static Key_IsGamepadKey(Key: Key): boolean;
	static Key_IsFloatAxis(Key: Key): boolean;
	static Key_GetDisplayName(Key: Key): string;
	static IsShiftDown(Input: InputEvent): boolean;
	static IsRightShiftDown(Input: InputEvent): boolean;
	static IsRightControlDown(Input: InputEvent): boolean;
	static IsRightCommandDown(Input: InputEvent): boolean;
	static IsRightAltDown(Input: InputEvent): boolean;
	static IsRepeat(Input: InputEvent): boolean;
	static IsLeftShiftDown(Input: InputEvent): boolean;
	static IsLeftControlDown(Input: InputEvent): boolean;
	static IsLeftCommandDown(Input: InputEvent): boolean;
	static IsLeftAltDown(Input: InputEvent): boolean;
	static IsControlDown(Input: InputEvent): boolean;
	static IsCommandDown(Input: InputEvent): boolean;
	static IsAltDown(Input: InputEvent): boolean;
	static GetUserIndex(Input: KeyEvent): number;
	static GetKey(Input: KeyEvent): Key;
	static GetAnalogValue(Input: AnalogInputEvent): number;
	static Equal(A: Key,B: Key): boolean;
	static Equal(A: InputChord,B: InputChord): boolean;
	static ControllerEvent_GetUserIndex(Input: ControllerEvent): number;
	static GetEffectingButton(Input: ControllerEvent): Key;
	static ControllerEvent_GetAnalogValue(Input: ControllerEvent): number;
	static CalibrateTilt(): void;
	static C(Other: UObject): KismetInputLibrary;
}

declare class KismetMaterialLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetMaterialLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMaterialLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetMaterialLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMaterialLibrary;
	static SetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
	static SetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
	static GetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
	static GetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): number;
	static CreateDynamicMaterialInstance(WorldContextObject: UObject,Parent: MaterialInterface): MaterialInstanceDynamic;
	static C(Other: UObject): KismetMaterialLibrary;
}

declare class FloatSpringState { 
	clone() : FloatSpringState;
	static C(Other: UObject): FloatSpringState;
	ResetFloatSpringState(): {SpringState: FloatSpringState};
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
}

declare class KismetMathLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetMathLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMathLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetMathLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMathLibrary;
	static BitwiseXOR(A: number,B: number): number;
	static VectorLengthSquared(A: Vector): number;
	static Vector2dLengthSquared(A: Vector2D): number;
	static Vector2dLength(A: Vector2D): number;
	static VectorLength(A: Vector): number;
	static Lerp(A: Vector,B: Vector,Alpha: number): Vector;
	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Ease(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
	static UtcNow(): DateTime;
	static TransformLocation(T: Transform,Location: Vector): Vector;
	static TransformDirection(T: Transform,Direction: Vector): Vector;
	static Today(): DateTime;
	static Lerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
	static ZeroValue(): Timespan;
	static TimespanRatio(A: Timespan,B: Timespan): number;
	static MinValue(): Timespan;
	static MaxValue(): Timespan;
	static TimespanFromString(TimespanString: string,Result?: Timespan): {Result: Timespan, $: boolean};
	static Ease(A: Transform,B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
	static Tan(A: number): number;
	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
	static Subtract_VectorInt(A: Vector,B: number): Vector;
	static Subtract_VectorFloat(A: Vector,B: number): Vector;
	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Subtract_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Subtract_IntInt(A: number,B: number): number;
	static Subtract_FloatFloat(A: number,B: number): number;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_ByteByte(A: number,B: number): number;
	static Square(A: number): number;
	static Sqrt(A: number): number;
	static Sin(A: number): number;
	static Sign(A: number): number;
	static Sign(A: number): number;
	static SetRandomStreamSeed(Stream?: RandomStream,NewSeed?: number): {Stream: RandomStream};
	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
	static SelectString(A: string,B: string,bPickA: boolean): string;
	static SelectRotator(A: Rotator,B: Rotator,bPickA: boolean): Rotator;
	static SelectObject(A: UObject,B: UObject,bSelectA: boolean): UObject;
	static SelectInt(A: number,B: number,bPickA: boolean): number;
	static SelectFloat(A: number,B: number,bPickA: boolean): number;
	static SelectColor(A: LinearColor,B: LinearColor,bPickA: boolean): LinearColor;
	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
	static SeedRandomStream(Stream?: RandomStream): {Stream: RandomStream};
	static Round(A: number): number;
	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
	static RotateVectorAroundAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
	static Lerp(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean): Rotator;
	static RInterpTo_Constant(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RInterpTo(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RGBtoHSV(RGB: LinearColor,HSV?: LinearColor): {HSV: LinearColor};
	static RGBToHSV(InColor: LinearColor,H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
	static ResetRandomStream(Stream: RandomStream): void;
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
	static Ease(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Rotator;
	static RandomUnitVectorInConeWithYawAndPitch(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
	static RandomUnitVectorInCone(ConeDir: Vector,ConeHalfAngle: number): Vector;
	static RandomUnitVectorFromStream(Stream: RandomStream): Vector;
	static RandomUnitVector(): Vector;
	static RandomRotatorFromStream(bRoll: boolean,Stream: RandomStream): Rotator;
	static RandomRotator(bRoll: boolean): Rotator;
	static RandomPointInBoundingBox(Origin: Vector,BoxExtent: Vector): Vector;
	static RandomIntegerInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomIntegerInRange(Min: number,Max: number): number;
	static RandomIntegerFromStream(Max: number,Stream: RandomStream): number;
	static RandomInteger(Max: number): number;
	static RandomFloatInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomFloatInRange(Min: number,Max: number): number;
	static RandomFloatFromStream(Stream: RandomStream): number;
	static RandomFloat(): number;
	static RandomBoolWithWeightFromStream(Weight: number,RandomStream: RandomStream): boolean;
	static RandomBoolWithWeight(Weight: number): boolean;
	static RandomBoolFromStream(Stream: RandomStream): boolean;
	static RandomBool(): boolean;
	static RadiansToDegrees(A: number): number;
	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
	static PointsAreCoplanar(Points: Vector[],Tolerance: number): boolean;
	static Percent_IntInt(A: number,B: number): number;
	static Percent_FloatFloat(A: number,B: number): number;
	static Percent_ByteByte(A: number,B: number): number;
	static BitwiseOR(A: number,B: number): number;
	static Now(): DateTime;
	static NotEqual(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static NotEqual(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static NotEqual(A: Timespan,B: Timespan): boolean;
	static NotEqual(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static NotEqual(A: UObject,B: UObject): boolean;
	static NotEqual(A: string,B: string): boolean;
	static NotEqual(A: number,B: number): boolean;
	static NotEqual(A: number,B: number): boolean;
	static NotEqual(A: DateTime,B: DateTime): boolean;
	static NotEqual(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static NotEqual(A: number,B: number): boolean;
	static NotEqualBoolean(A: boolean,B: boolean): boolean;
	static NOTBoolean(A: boolean): boolean;
	static BitwiseNOT(A: number): number;
	static NormalizeToRange(Value: number,RangeMin: number,RangeMax: number): number;
	static Delta(A: Rotator,B: Rotator): Rotator;
	static NormalizeAxis(Angle: number): number;
	static Normalize2D(A: Vector2D): Vector2D;
	static Normalize(A: Vector): Vector;
	static NegateVector(A: Vector): Vector;
	static InvertRotator(A: Rotator): Rotator;
	static NearlyEqual(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
	static NearlyEqual(A: number,B: number,ErrorTolerance: number): boolean;
	static Power(Base: number,Exp: number): number;
	static MultiplyByPi(Value: number): number;
	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
	static Multiply_VectorInt(A: Vector,B: number): Vector;
	static Multiply_VectorFloat(A: Vector,B: number): Vector;
	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Multiply_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static ScaleRotator(A: Rotator,B: number): Rotator;
	static ScaleRotator(A: Rotator,B: number): Rotator;
	static Multiply_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Multiply_LinearColorFloat(A: LinearColor,B: number): LinearColor;
	static Multiply_IntInt(A: number,B: number): number;
	static Multiply_IntFloat(A: number,B: number): number;
	static Multiply_FloatFloat(A: number,B: number): number;
	static Multiply_ByteByte(A: number,B: number): number;
	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
	static MinOfIntArray(IntArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfFloatArray(FloatArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfByteArray(ByteArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
	static Min(A: number,B: number): number;
	static MaxOfIntArray(IntArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfFloatArray(FloatArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfByteArray(ByteArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static Max(A: number,B: number): number;
	static MapRangeUnclamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
	static MapRangeClamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
	static MakeVector2D(X: number,Y: number): Vector2D;
	static MakeVector(X: number,Y: number,Z: number): Vector;
	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
	static MakeTimespan(Days: number,Hours: number,Minutes: number,Seconds: number,Milliseconds: number): Timespan;
	static MakeRotFromZY(Z: Vector,Y: Vector): Rotator;
	static MakeRotFromZX(Z: Vector,X: Vector): Rotator;
	static MakeRotFromZ(Z: Vector): Rotator;
	static MakeRotFromYZ(Y: Vector,Z: Vector): Rotator;
	static MakeRotFromYX(Y: Vector,X: Vector): Rotator;
	static MakeRotFromY(Y: Vector): Rotator;
	static MakeRotFromXZ(X: Vector,Z: Vector): Rotator;
	static MakeRotFromXY(X: Vector,Y: Vector): Rotator;
	static MakeRotFromX(X: Vector): Rotator;
	static MakeRotator(Roll: number,Pitch: number,Yaw: number): Rotator;
	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
	static MakeRandomStream(InitialSeed: number): RandomStream;
	static MakePulsatingValue(InCurrentTime: number,InPulsesPerSecond: number,InPhase: number): number;
	static MakePlaneFromPointAndNormal(Point: Vector,Normal: Vector): Plane;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static MakeColor(R: number,G: number,B: number,A: number): LinearColor;
	static Loge(A: number): number;
	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LerpUsingHSV(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static Lerp(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static UnrotateVector(A: Vector,B: Rotator): Vector;
	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static LessEqual_IntInt(A: number,B: number): boolean;
	static LessEqual_FloatFloat(A: number,B: number): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_ByteByte(A: number,B: number): boolean;
	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Less_IntInt(A: number,B: number): boolean;
	static Less_FloatFloat(A: number,B: number): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Less_ByteByte(A: number,B: number): boolean;
	static Lerp(A: number,B: number,Alpha: number): number;
	static IsMorning(A: DateTime): boolean;
	static IsLeapYear(Year: number): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static InvertTransform(T: Transform): Transform;
	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
	static InverseLerp(A: number,B: number,Value: number): number;
	static InRange(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static Hypotenuse(Width: number,Height: number): number;
	static HSVtoRGB(HSV: LinearColor,RGB?: LinearColor): {RGB: LinearColor};
	static HSVToRGB(H: number,S: number,V: number,A: number): LinearColor;
	static Snaptogrid(Location: number,GridSize: number): number;
	static RotateVector(A: Vector,B: Rotator): Vector;
	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static GreaterEqual_IntInt(A: number,B: number): boolean;
	static GreaterEqual_FloatFloat(A: number,B: number): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_ByteByte(A: number,B: number): boolean;
	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Greater_IntInt(A: number,B: number): boolean;
	static Greater_FloatFloat(A: number,B: number): boolean;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Greater_ByteByte(A: number,B: number): boolean;
	static GetYear(A: DateTime): number;
	static GetYawPitchFromVector(InVec: Vector,Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
	static GetVectorArrayAverage(Vectors: Vector[]): Vector;
	static GetUpVector(InRot: Rotator): Vector;
	static GetTotalSeconds(A: Timespan): number;
	static GetTotalMinutes(A: Timespan): number;
	static GetTotalMilliseconds(A: Timespan): number;
	static GetTotalHours(A: Timespan): number;
	static GetTotalDays(A: Timespan): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetTAU(): number;
	static GetSeconds(A: Timespan): number;
	static GetSecond(A: DateTime): number;
	static GetRightVector(InRot: Rotator): Vector;
	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
	static GetPointDistanceToLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): number;
	static GetPI(): number;
	static GetMonth(A: DateTime): number;
	static GetMinutes(A: Timespan): number;
	static GetMinute(A: DateTime): number;
	static GetMinElement(A: Vector): number;
	static GetMilliseconds(A: Timespan): number;
	static GetMillisecond(A: DateTime): number;
	static GetMaxElement(A: Vector): number;
	static GetHours(A: Timespan): number;
	static GetHour12(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetForwardVector(InRot: Rotator): Vector;
	static GetDuration(A: Timespan): Timespan;
	static GetUnitDirectionVector(From: Vector,To: Vector): Vector;
	static GetDays(A: Timespan): number;
	static GetDayOfYear(A: DateTime): number;
	static GetDay(A: DateTime): number;
	static GetDate(A: DateTime): DateTime;
	static GetAxes(A: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static Truncate(A: number): number;
	static FromSeconds(Seconds: number): Timespan;
	static FromMinutes(Minutes: number): Timespan;
	static FromMilliseconds(Milliseconds: number): Timespan;
	static FromHours(Hours: number): Timespan;
	static FromDays(Days: number): Timespan;
	static Fraction(A: number): number;
	static Division(Dividend: number,Divisor: number,Remainder?: number): {Remainder: number, $: number};
	static Min(A: number,B: number): number;
	static Max(A: number,B: number): number;
	static FloatSpringInterp(Current: number,Target: number,SpringState?: FloatSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: FloatSpringState, $: number};
	static FixedTurn(InCurrent: number,InDesired: number,InDeltaRate: number): number;
	static FInterpTo_Constant(Current: number,Target: number,DeltaTime: number,InterpSpeed: number): number;
	static FInterpTo(Current: number,Target: number,DeltaTime: number,InterpSpeed: number): number;
	static FInterpEaseInOut(A: number,B: number,Alpha: number,Exponent: number): number;
	static FindNearestPointsOnLineSegments(Segment1Start: Vector,Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
	static Floor(A: number): number;
	static Clamp(Value: number,Min: number,Max: number): number;
	static FCeil(A: number): number;
	static Exp(A: number): number;
	static Equal(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static Equal(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static EqualTransform(A: Transform,B: Transform): boolean;
	static Equal(A: Timespan,B: Timespan): boolean;
	static Equal(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static Equal(A: UObject,B: UObject): boolean;
	static Equal(A: string,B: string): boolean;
	static Equal(A: number,B: number): boolean;
	static Equal(A: number,B: number): boolean;
	static Equal(A: DateTime,B: DateTime): boolean;
	static Equal(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static Equal(A: number,B: number): boolean;
	static EqualBoolean(A: boolean,B: boolean): boolean;
	static Ease(A: number,B: number,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): number;
	static DotProduct(A: Vector2D,B: Vector2D): number;
	static DotProduct(A: Vector,B: Vector): number;
	static Divide_VectorVector(A: Vector,B: Vector): Vector;
	static Divide_VectorInt(A: Vector,B: number): Vector;
	static Divide_VectorFloat(A: Vector,B: number): Vector;
	static Divide_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Divide_IntInt(A: number,B: number): number;
	static Divide_FloatFloat(A: number,B: number): number;
	static Divide_ByteByte(A: number,B: number): number;
	static Tan(A: number): number;
	static Sin(A: number): number;
	static DegreesToRadians(A: number): number;
	static Cos(A: number): number;
	static Atan2(A: number,B: number): number;
	static Atan(A: number): number;
	static Asin(A: number): number;
	static Acos(A: number): number;
	static DaysInYear(Year: number): number;
	static DaysInMonth(Year: number,Month: number): number;
	static MinValue(): DateTime;
	static MaxValue(): DateTime;
	static DateTimeFromString(DateTimeString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static DateTimeFromIsoString(IsoString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static CrossProduct(A: Vector2D,B: Vector2D): number;
	static CrossProduct(A: Vector,B: Vector): Vector;
	static CreateVectorFromYawPitch(Yaw: number,Pitch: number,Length: number): Vector;
	static Cos(A: number): number;
	static ConvertTransformToRelative(Transform: Transform,ParentTransform: Transform): Transform;
	static ToVector2D(InVector: Vector): Vector2D;
	static ToTransform(InLocation: Vector): Transform;
	static RotationFromXVector(InVec: Vector): Rotator;
	static ToLinearColor(InVec: Vector): LinearColor;
	static ToVector(InVector2D: Vector2D,Z: number): Vector;
	static GetRotationXVector(InRot: Rotator): Vector;
	static ToVector(InLinearColor: LinearColor): Vector;
	static ToColor(InLinearColor: LinearColor): Color;
	static ToFloat(InInt: number): number;
	static ToByte(InInt: number): number;
	static ToBool(InInt: number): boolean;
	static ToVector(InFloat: number): Vector;
	static ToLinearColor(InFloat: number): LinearColor;
	static ToLinearColor(InColor: Color): LinearColor;
	static ToInt(InByte: number): number;
	static ToFloat(InByte: number): number;
	static ToInt(InBool: boolean): number;
	static ToFloat(InBool: boolean): number;
	static ToByte(InBool: boolean): number;
	static ComposeTransforms(A: Transform,B: Transform): Transform;
	static CombineRotators(A: Rotator,B: Rotator): Rotator;
	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
	static ClampVectorSize(A: Vector,Min: number,Max: number): Vector;
	static ClampAxis(Angle: number): number;
	static ClampAngle(AngleDegrees: number,MinAngleDegrees: number,MaxAngleDegrees: number): number;
	static Clamp(Value: number,Min: number,Max: number): number;
	static CInterpTo(Current: LinearColor,Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
	static BreakVector2D(InVec: Vector2D,X?: number,Y?: number): {X: number, Y: number};
	static BreakVector(InVec: Vector,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
	static BreakTimespan(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	static BreakRotIntoAxes(InRot: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static BreakRotator(InRot: Rotator,Roll?: number,Pitch?: number,Yaw?: number): {Roll: number, Pitch: number, Yaw: number};
	static BreakRandomStream(InRandomStream: RandomStream,InitialSeed?: number): {InitialSeed: number};
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static BreakColor(InColor: LinearColor,R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
	static XORBoolean(A: boolean,B: boolean): boolean;
	static ORBoolean(A: boolean,B: boolean): boolean;
	static NORBoolean(A: boolean,B: boolean): boolean;
	static NANDBoolean(A: boolean,B: boolean): boolean;
	static ANDBoolean(A: boolean,B: boolean): boolean;
	static Min(A: number,B: number): number;
	static Max(A: number,B: number): number;
	static Atan2(A: number,B: number): number;
	static Atan(A: number): number;
	static Asin(A: number): number;
	static BitwiseAND(A: number,B: number): number;
	static Add_VectorVector(A: Vector,B: Vector): Vector;
	static Add_VectorInt(A: Vector,B: number): Vector;
	static Add_VectorFloat(A: Vector,B: number): Vector;
	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Add_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Add_IntInt(A: number,B: number): number;
	static Add_FloatFloat(A: number,B: number): number;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Add_ByteByte(A: number,B: number): number;
	static Acos(A: number): number;
	static Absolute(A: number): number;
	static Absolute(A: number): number;
	static C(Other: UObject): KismetMathLibrary;
}

declare class KismetNodeHelperLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetNodeHelperLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetNodeHelperLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetNodeHelperLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetNodeHelperLibrary;
	static MarkBit(Data?: number,Index?: number): {Data: number};
	static HasUnmarkedBit(Data: number,NumBits: number): boolean;
	static HasMarkedBit(Data: number,NumBits: number): boolean;
	static GetValidValue(Enum: Enum,EnumeratorValue: number): number;
	static GetUnmarkedBit(Data: number,StartIdx: number,NumBits: number,bRandom: boolean): number;
	static GetRandomUnmarkedBit(Data: number,StartIdx: number,NumBits: number): number;
	static GetFirstUnmarkedBit(Data: number,StartIdx: number,NumBits: number): number;
	static GetEnumeratorValueFromIndex(Enum: Enum,EnumeratorIndex: number): number;
	static GetEnumeratorUserFriendlyName(Enum: Enum,EnumeratorValue: number): string;
	static GetEnumeratorName(Enum: Enum,EnumeratorValue: number): string;
	static ClearBit(Data?: number,Index?: number): {Data: number};
	static ClearAllBits(Data?: number): {Data: number};
	static BitIsMarked(Data: number,Index: number): boolean;
	static C(Other: UObject): KismetNodeHelperLibrary;
}

declare class KismetRenderingLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetRenderingLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetRenderingLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetRenderingLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetRenderingLibrary;
	static ExportTexture2D(WorldContextObject: UObject,Texture: Texture2D,FilePath: string,FileName: string): void;
	static ExportRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,FilePath: string,FileName: string): void;
	static EndDrawCanvasToRenderTarget(WorldContextObject: UObject,Context: DrawToRenderTargetContext): void;
	static DrawMaterialToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number): TextureRenderTarget2D;
	static ClearRenderTarget2D(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
	static BeginDrawCanvasToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
	static C(Other: UObject): KismetRenderingLibrary;
}

declare type ESearchCase = 'CaseSensitive' | 'IgnoreCase';
declare var ESearchCase : { CaseSensitive:'CaseSensitive',IgnoreCase:'IgnoreCase', };
declare type ESearchDir = 'FromStart' | 'FromEnd';
declare var ESearchDir : { FromStart:'FromStart',FromEnd:'FromEnd', };
declare class KismetStringLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetStringLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetStringLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetStringLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetStringLibrary;
	static TrimTrailing(SourceString: string): string;
	static Trim(SourceString: string): string;
	static ToUpper(SourceString: string): string;
	static ToLower(SourceString: string): string;
	static TimeSecondsToString(InSeconds: number): string;
	static StartsWith(SourceString: string,InPrefix: string,SearchCase: ESearchCase): boolean;
	static Split(SourceString: string,InStr: string,LeftS?: string,RightS?: string,SearchCase?: ESearchCase,SearchDir?: ESearchDir): {LeftS: string, RightS: string, $: boolean};
	static RightPad(SourceString: string,ChCount: number): string;
	static RightChop(SourceString: string,Count: number): string;
	static Right(SourceString: string,Count: number): string;
	static Reverse(SourceString: string): string;
	static ReplaceInline(SourceString?: string,SearchText?: string,ReplacementText?: string,SearchCase?: ESearchCase): {SourceString: string, $: number};
	static Replace(SourceString: string,From: string,To: string,SearchCase: ESearchCase): string;
	static ParseIntoArray(SourceString: string,Delimiter: string,CullEmptyStrings: boolean): string[];
	static NotEqual(A: string,B: string): boolean;
	static NotEqual_StriStri(A: string,B: string): boolean;
	static Mid(SourceString: string,Start: number,Count: number): string;
	static MatchesWildcard(SourceString: string,Wildcard: string,SearchCase: ESearchCase): boolean;
	static Len(S: string): number;
	static LeftPad(SourceString: string,ChCount: number): string;
	static LeftChop(SourceString: string,Count: number): string;
	static Left(SourceString: string,Count: number): string;
	static JoinStringArray(SourceArray: string[],Separator: string): string;
	static IsNumeric(SourceString: string): boolean;
	static GetSubstring(SourceString: string,StartIndex: number,Length: number): string;
	static GetCharacterAsNumber(SourceString: string,Index: number): number;
	static GetCharacterArrayFromString(SourceString: string): string[];
	static FindSubstring(SearchIn: string,Substring: string,bUseCase: boolean,bSearchFromEnd: boolean,StartPosition: number): number;
	static Equal(A: string,B: string): boolean;
	static EqualEqual_StriStri(A: string,B: string): boolean;
	static EndsWith(SourceString: string,InSuffix: string,SearchCase: ESearchCase): boolean;
	static CullArray(SourceString: string,InArray?: string[]): {InArray: string[], $: number};
	static ToString(InVec: Vector): string;
	static ToString(InVec: Vector2D): string;
	static ToString(InTrans: Transform): string;
	static StringtoVector2D(InString: string,OutConvertedVector2D?: Vector2D,OutIsValid?: boolean): {OutConvertedVector2D: Vector2D, OutIsValid: boolean};
	static StringtoVector(InString: string,OutConvertedVector?: Vector,OutIsValid?: boolean): {OutConvertedVector: Vector, OutIsValid: boolean};
	static StringtoRotator(InString: string,OutConvertedRotator?: Rotator,OutIsValid?: boolean): {OutConvertedRotator: Rotator, OutIsValid: boolean};
	static StringToName(InString: string): string;
	static StringToInt(InString: string): number;
	static StringToFloat(InString: string): number;
	static StringtoColor(InString: string,OutConvertedColor?: LinearColor,OutIsValid?: boolean): {OutConvertedColor: LinearColor, OutIsValid: boolean};
	static ToString(InRot: Rotator): string;
	static ToString(InObj: UObject): string;
	static ToString(InName: string): string;
	static ToString(InInt: number): string;
	static ToString(InFloat: number): string;
	static ToString(InColor: LinearColor): string;
	static ToString(InByte: number): string;
	static ToString(InBool: boolean): string;
	static Contains(SearchIn: string,Substring: string,bUseCase: boolean,bSearchFromEnd: boolean): boolean;
	static Append(A: string,B: string): string;
	static BuildString(AppendTo: string,Prefix: string,InVector2d: Vector2D,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InVector: Vector,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InRot: Rotator,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InObj: UObject,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InName: string,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InInt: number,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InFloat: number,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InColor: LinearColor,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InBool: boolean,Suffix: string): string;
	static C(Other: UObject): KismetStringLibrary;
}

declare type EFormatArgumentType = 'Int' | 'UInt' | 'Float' | 'Double' | 'Text' | 'Gender';
declare var EFormatArgumentType : { Int:'Int',UInt:'UInt',Float:'Float',Double:'Double',Text:'Text',Gender:'Gender', };
declare type ETextGender = 'Masculine' | 'Feminine' | 'Neuter';
declare var ETextGender : { Masculine:'Masculine',Feminine:'Feminine',Neuter:'Neuter', };
declare class FormatArgumentData { 
	ArgumentName: string;
	ArgumentValueType: EFormatArgumentType;
	ArgumentValue: string;
	ArgumentValueInt: number;
	ArgumentValueFloat: number;
	ArgumentValueGender: ETextGender;
	clone() : FormatArgumentData;
	static C(Other: UObject): FormatArgumentData;
}

declare type ERoundingMode = 'HalfToEven' | 'HalfFromZero' | 'HalfToZero' | 'FromZero' | 'ToZero' | 'ToNegativeInfinity' | 'ToPositiveInfinity';
declare var ERoundingMode : { HalfToEven:'HalfToEven',HalfFromZero:'HalfFromZero',HalfToZero:'HalfToZero',FromZero:'FromZero',ToZero:'ToZero',ToNegativeInfinity:'ToNegativeInfinity',ToPositiveInfinity:'ToPositiveInfinity', };
declare class KismetTextLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): KismetTextLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetTextLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): KismetTextLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetTextLibrary;
	static TextTrimTrailing(InText: string): string;
	static TextTrimPrecedingAndTrailing(InText: string): string;
	static TextTrimPreceding(InText: string): string;
	static TextIsTransient(InText: string): boolean;
	static TextIsEmpty(InText: string): boolean;
	static TextIsCultureInvariant(InText: string): boolean;
	static NotEqual(A: string,B: string): boolean;
	static NotEqual_IgnoreCase_TextText(A: string,B: string): boolean;
	static GetEmptyText(): string;
	static Format(InPattern: string,InArgs: FormatArgumentData[]): string;
	static FindTextInLocalizationTable(Namespace: string,Key: string,OutText?: string): {OutText: string, $: boolean};
	static Equal(A: string,B: string): boolean;
	static EqualEqual_IgnoreCase_TextText(A: string,B: string): boolean;
	static ToText(InVec: Vector): string;
	static ToText(InVec: Vector2D): string;
	static ToText(InTrans: Transform): string;
	static ToString(InText: string): string;
	static ToText(InString: string): string;
	static ToText(InRot: Rotator): string;
	static ToText(InObj: UObject): string;
	static ToText(InName: string): string;
	static ToText(Value: number,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number): string;
	static ToText(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
	static ToText(InColor: LinearColor): string;
	static ToText(Value: number): string;
	static ToText(InBool: boolean): string;
	static AsTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsDateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsDate(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimespan(InTimespan: Timespan): string;
	static AsTime(In: DateTime): string;
	static AsPercent(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
	static AsDateTime(In: DateTime): string;
	static AsDate(InDateTime: DateTime): string;
	static AsCurrency(BaseValue: number,CurrencyCode: string): string;
	static AsCurrency(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number,CurrencyCode: string): string;
	static AsCurrency(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number,CurrencyCode: string): string;
	static C(Other: UObject): KismetTextLibrary;
}

declare class MeshVertexPainterKismetLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MeshVertexPainterKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): MeshVertexPainterKismetLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MeshVertexPainterKismetLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshVertexPainterKismetLibrary;
	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
	static C(Other: UObject): MeshVertexPainterKismetLibrary;
}

declare class PendingNetGame extends UObject { 
	NetDriver: NetDriver;
	DemoNetDriver: DemoNetDriver;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PendingNetGame;
	static Find(Outer: UObject, ResourceName: string): PendingNetGame;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PendingNetGame;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PendingNetGame;
	static C(Other: UObject): PendingNetGame;
}

declare class StereoLayerFunctionLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StereoLayerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): StereoLayerFunctionLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StereoLayerFunctionLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerFunctionLibrary;
	static ShowSplashScreen(): void;
	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector2D,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
	static HideSplashScreen(): void;
	static EnableAutoLoadingSplashScreen(InAutoShowEnabled: boolean): void;
	static C(Other: UObject): StereoLayerFunctionLibrary;
}

declare class VisualLoggerKismetLibrary extends BlueprintFunctionLibrary { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VisualLoggerKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerKismetLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VisualLoggerKismetLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerKismetLibrary;
	static LogText(WorldContextObject: UObject,Text: string,LogCategory: string): void;
	static LogLocation(WorldContextObject: UObject,Location: Vector,Text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string): void;
	static LogBoxShape(WorldContextObject: UObject,BoxShape: Box,Text: string,ObjectColor: LinearColor,LogCategory: string): void;
	static C(Other: UObject): VisualLoggerKismetLibrary;
}

declare class CircleElement2D { 
	Center: Vector2D;
	Radius: number;
	clone() : CircleElement2D;
	static C(Other: UObject): CircleElement2D;
}

declare class BoxElement2D { 
	Center: Vector2D;
	Width: number;
	Height: number;
	Angle: number;
	clone() : BoxElement2D;
	static C(Other: UObject): BoxElement2D;
}

declare class ConvexElement2D { 
	VertexData: Vector2D[];
	clone() : ConvexElement2D;
	static C(Other: UObject): ConvexElement2D;
}

declare class AggregateGeometry2D { 
	CircleElements: CircleElement2D[];
	BoxElements: BoxElement2D[];
	ConvexElements: ConvexElement2D[];
	clone() : AggregateGeometry2D;
	static C(Other: UObject): AggregateGeometry2D;
}

declare class BodySetup2D extends BodySetup { 
	AggGeom2D: AggregateGeometry2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BodySetup2D;
	static Find(Outer: UObject, ResourceName: string): BodySetup2D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BodySetup2D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BodySetup2D;
	static C(Other: UObject): BodySetup2D;
}

declare class BoneMaskFilter extends UObject { 
	BlendPoses: InputBlendPose[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BoneMaskFilter;
	static Find(Outer: UObject, ResourceName: string): BoneMaskFilter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BoneMaskFilter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneMaskFilter;
	static C(Other: UObject): BoneMaskFilter;
}

declare class BookMark2D extends UObject { 
	Zoom2D: number;
	Location: IntPoint;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): BookMark2D;
	static Find(Outer: UObject, ResourceName: string): BookMark2D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): BookMark2D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookMark2D;
	static C(Other: UObject): BookMark2D;
}

declare class ButtonStyleAsset extends UObject { 
	ButtonStyle: ButtonStyle;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ButtonStyleAsset;
	static Find(Outer: UObject, ResourceName: string): ButtonStyleAsset;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ButtonStyleAsset;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonStyleAsset;
	static C(Other: UObject): ButtonStyleAsset;
}

declare class ActorChannel extends Channel { 
	Actor: Actor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ActorChannel;
	static Find(Outer: UObject, ResourceName: string): ActorChannel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ActorChannel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorChannel;
	static C(Other: UObject): ActorChannel;
}

declare class ControlChannel extends Channel { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ControlChannel;
	static Find(Outer: UObject, ResourceName: string): ControlChannel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ControlChannel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlChannel;
	static C(Other: UObject): ControlChannel;
}

declare class VoiceChannel extends Channel { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): VoiceChannel;
	static Find(Outer: UObject, ResourceName: string): VoiceChannel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): VoiceChannel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VoiceChannel;
	static C(Other: UObject): VoiceChannel;
}

declare class CheckBoxStyleAsset extends UObject { 
	CheckBoxStyle: CheckBoxStyle;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CheckBoxStyleAsset;
	static Find(Outer: UObject, ResourceName: string): CheckBoxStyleAsset;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CheckBoxStyleAsset;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBoxStyleAsset;
	static C(Other: UObject): CheckBoxStyleAsset;
}

declare class PluginCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PluginCommandlet;
	static Find(Outer: UObject, ResourceName: string): PluginCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PluginCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginCommandlet;
	static C(Other: UObject): PluginCommandlet;
}

declare class SmokeTestCommandlet extends Commandlet { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SmokeTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): SmokeTestCommandlet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SmokeTestCommandlet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SmokeTestCommandlet;
	static C(Other: UObject): SmokeTestCommandlet;
}

declare class CurveEdPresetCurve extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): CurveEdPresetCurve;
	static Find(Outer: UObject, ResourceName: string): CurveEdPresetCurve;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): CurveEdPresetCurve;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdPresetCurve;
	static C(Other: UObject): CurveEdPresetCurve;
}

declare class PreviewMeshCollectionEntry { 
	SkeletalMesh: any;
	clone() : PreviewMeshCollectionEntry;
	static C(Other: UObject): PreviewMeshCollectionEntry;
}

declare class PreviewMeshCollection extends DataAsset { 
	Skeleton: Skeleton;
	SkeletalMeshes: PreviewMeshCollectionEntry[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PreviewMeshCollection;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PreviewMeshCollection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollection;
	static C(Other: UObject): PreviewMeshCollection;
}

declare class AnimationSettings extends DeveloperSettings { 
	CompressCommandletVersion: number;
	KeyEndEffectorsMatchNameArray: string[];
	DefaultCompressionAlgorithm: UnrealEngineClass;
	RotationCompressionFormat: AnimationCompressionFormat;
	TranslationCompressionFormat: AnimationCompressionFormat;
	AlternativeCompressionThreshold: number;
	ForceRecompression: boolean;
	bOnlyCheckForMissingSkeletalMeshes: boolean;
	bForceBelowThreshold: boolean;
	bFirstRecompressUsingCurrentOrDefault: boolean;
	bRaiseMaxErrorToExisting: boolean;
	bTryFixedBitwiseCompression: boolean;
	bTryPerTrackBitwiseCompression: boolean;
	bTryLinearKeyRemovalCompression: boolean;
	bTryIntervalKeyRemoval: boolean;
	bEnablePerformanceLog: boolean;
	bStripAnimationDataOnDedicatedServer: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AnimationSettings;
	static Find(Outer: UObject, ResourceName: string): AnimationSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AnimationSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSettings;
	static C(Other: UObject): AnimationSettings;
}

declare class AudioQualitySettings { 
	DisplayName: string;
	MaxChannels: number;
	clone() : AudioQualitySettings;
	static C(Other: UObject): AudioQualitySettings;
}

declare class AudioSettings extends DeveloperSettings { 
	DefaultSoundClassName: StringAssetReference;
	DefaultSoundConcurrencyName: StringAssetReference;
	DefaultSoundSubmixName: StringAssetReference;
	DefaultBaseSoundMix: StringAssetReference;
	VoiPSoundClass: StringAssetReference;
	LowPassFilterResonance: number;
	MaximumConcurrentStreams: number;
	QualityLevels: AudioQualitySettings[];
	bAllowVirtualizedSounds: boolean;
	DialogueFilenameFormat: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): AudioSettings;
	static Find(Outer: UObject, ResourceName: string): AudioSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): AudioSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioSettings;
	static C(Other: UObject): AudioSettings;
}

declare type ERenderFocusRule = 'Always' | 'NonPointer' | 'NavigationOnly' | 'Never';
declare var ERenderFocusRule : { Always:'Always',NonPointer:'NonPointer',NavigationOnly:'NavigationOnly',Never:'Never', };
declare type EUIScalingRule = 'ShortestSide' | 'LongestSide' | 'Horizontal' | 'Vertical' | 'Custom';
declare var EUIScalingRule : { ShortestSide:'ShortestSide',LongestSide:'LongestSide',Horizontal:'Horizontal',Vertical:'Vertical',Custom:'Custom', };
declare class DPICustomScalingRule extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DPICustomScalingRule;
	static Find(Outer: UObject, ResourceName: string): DPICustomScalingRule;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DPICustomScalingRule;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DPICustomScalingRule;
	static C(Other: UObject): DPICustomScalingRule;
}

declare class UserInterfaceSettings extends DeveloperSettings { 
	RenderFocusRule: ERenderFocusRule;
	DefaultCursor: StringClassReference;
	TextEditBeamCursor: StringClassReference;
	CrosshairsCursor: StringClassReference;
	HandCursor: StringClassReference;
	GrabHandCursor: StringClassReference;
	GrabHandClosedCursor: StringClassReference;
	SlashedCircleCursor: StringClassReference;
	ApplicationScale: number;
	UIScaleRule: EUIScalingRule;
	CustomScalingRuleClass: StringClassReference;
	UIScaleCurve: RuntimeFloatCurve;
	CursorClasses: UObject[];
	CustomScalingRuleClassInstance: UnrealEngineClass;
	CustomScalingRule: DPICustomScalingRule;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): UserInterfaceSettings;
	static Find(Outer: UObject, ResourceName: string): UserInterfaceSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): UserInterfaceSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserInterfaceSettings;
	static C(Other: UObject): UserInterfaceSettings;
}

declare class StreamingSettings extends DeveloperSettings { 
	AsyncLoadingThreadEnabled: boolean;
	WarnIfTimeLimitExceeded: boolean;
	TimeLimitExceededMultiplier: number;
	TimeLimitExceededMinTime: number;
	MinBulkDataSizeForAsyncLoading: number;
	AsyncIOBandwidthLimit: number;
	UseBackgroundLevelStreaming: boolean;
	AsyncLoadingUseFullTimeLimit: boolean;
	AsyncLoadingTimeLimit: number;
	PriorityAsyncLoadingExtraTime: number;
	LevelStreamingActorsUpdateTimeLimit: number;
	LevelStreamingComponentsRegistrationGranularity: number;
	EventDrivenLoaderEnabled: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): StreamingSettings;
	static Find(Outer: UObject, ResourceName: string): StreamingSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): StreamingSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamingSettings;
	static C(Other: UObject): StreamingSettings;
}

declare class GarbageCollectionSettings extends DeveloperSettings { 
	TimeBetweenPurgingPendingKillObjects: number;
	FlushStreamingOnGC: boolean;
	AllowParallelGC: boolean;
	CreateGCClusters: boolean;
	MergeGCClusters: boolean;
	NumRetriesBeforeForcingGC: number;
	MaxObjectsNotConsideredByGC: number;
	SizeOfPermanentObjectPool: number;
	MaxObjectsInGame: number;
	MaxObjectsInEditor: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GarbageCollectionSettings;
	static Find(Outer: UObject, ResourceName: string): GarbageCollectionSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GarbageCollectionSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GarbageCollectionSettings;
	static C(Other: UObject): GarbageCollectionSettings;
}

declare class MeshSimplificationSettings extends DeveloperSettings { 
	MeshReductionModuleName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): MeshSimplificationSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MeshSimplificationSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSimplificationSettings;
	static C(Other: UObject): MeshSimplificationSettings;
}

declare class NetworkSettings extends DeveloperSettings { 
	bVerifyPeer: boolean;
	bEnableMultiplayerWorldOriginRebasing: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NetworkSettings;
	static Find(Outer: UObject, ResourceName: string): NetworkSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NetworkSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkSettings;
	static C(Other: UObject): NetworkSettings;
}

declare type ESettingsLockedAxis = 'None' | 'X' | 'Y' | 'Z' | 'Invalid';
declare var ESettingsLockedAxis : { None:'None',X:'X',Y:'Y',Z:'Z',Invalid:'Invalid', };
declare type ESettingsDOF = 'Full3D' | 'YZPlane' | 'XZPlane' | 'XYPlane';
declare var ESettingsDOF : { Full3D:'Full3D',YZPlane:'YZPlane',XZPlane:'XZPlane',XYPlane:'XYPlane', };
declare class PhysicalSurfaceName { 
	Type: EPhysicalSurface;
	Name: string;
	clone() : PhysicalSurfaceName;
	static C(Other: UObject): PhysicalSurfaceName;
}

declare class PhysicsSettings extends DeveloperSettings { 
	DefaultGravityZ: number;
	DefaultTerminalVelocity: number;
	DefaultFluidFriction: number;
	SimulateScratchMemorySize: number;
	RagdollAggregateThreshold: number;
	TriangleMeshTriangleMinAreaThreshold: number;
	bEnableAsyncScene: boolean;
	bEnableShapeSharing: boolean;
	bEnablePCM: boolean;
	bWarnMissingLocks: boolean;
	bEnable2DPhysics: boolean;
	LockedAxis: ESettingsLockedAxis;
	DefaultDegreesOfFreedom: ESettingsDOF;
	BounceThresholdVelocity: number;
	FrictionCombineMode: EFrictionCombineMode;
	RestitutionCombineMode: EFrictionCombineMode;
	MaxAngularVelocity: number;
	MaxDepenetrationVelocity: number;
	ContactOffsetMultiplier: number;
	MinContactOffset: number;
	MaxContactOffset: number;
	bSimulateSkeletalMeshOnDedicatedServer: boolean;
	DefaultShapeComplexity: ECollisionTraceFlag;
	bDefaultHasComplexCollision: boolean;
	bSuppressFaceRemapTable: boolean;
	bSupportUVFromHitResults: boolean;
	bDisableActiveActors: boolean;
	bDisableCCD: boolean;
	MaxPhysicsDeltaTime: number;
	bSubstepping: boolean;
	bSubsteppingAsync: boolean;
	MaxSubstepDeltaTime: number;
	MaxSubsteps: number;
	SyncSceneSmoothingFactor: number;
	AsyncSceneSmoothingFactor: number;
	InitialAverageFrameRate: number;
	PhysicalSurfaces: PhysicalSurfaceName[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PhysicsSettings;
	static Find(Outer: UObject, ResourceName: string): PhysicsSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PhysicsSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSettings;
	static C(Other: UObject): PhysicsSettings;
}

declare type ETranslucentSortPolicy = 'SortByDistance' | 'SortByProjectedZ' | 'SortAlongAxis';
declare var ETranslucentSortPolicy : { SortByDistance:'SortByDistance',SortByProjectedZ:'SortByProjectedZ',SortAlongAxis:'SortAlongAxis', };
declare type ECustomDepthStencil = 'Disabled' | 'Enabled' | 'EnabledOnDemand' | 'EnabledWithStencil';
declare var ECustomDepthStencil : { Disabled:'Disabled',Enabled:'Enabled',EnabledOnDemand:'EnabledOnDemand',EnabledWithStencil:'EnabledWithStencil', };
declare type EAutoExposureMethodUI = 'AEM_Histogram' | 'AEM_Basic';
declare var EAutoExposureMethodUI : { AEM_Histogram:'AEM_Histogram',AEM_Basic:'AEM_Basic', };
declare type EAntiAliasingMethod = 'AAM_None' | 'AAM_FXAA' | 'AAM_TemporalAA' | 'AAM_MSAA';
declare var EAntiAliasingMethod : { AAM_None:'AAM_None',AAM_FXAA:'AAM_FXAA',AAM_TemporalAA:'AAM_TemporalAA',AAM_MSAA:'AAM_MSAA', };
declare type EEarlyZPass = 'None' | 'OpaqueOnly' | 'OpaqueAndMasked' | 'Auto';
declare var EEarlyZPass : { None:'None',OpaqueOnly:'OpaqueOnly',OpaqueAndMasked:'OpaqueAndMasked',Auto:'Auto', };
declare type EClearSceneOptions = 'NoClear' | 'HardwareClear' | 'QuadAtMaxZ';
declare var EClearSceneOptions : { NoClear:'NoClear',HardwareClear:'HardwareClear',QuadAtMaxZ:'QuadAtMaxZ', };
declare type EGBufferFormat = 'Force8BitsPerChannel' | 'Default' | 'HighPrecisionNormals' | 'Force16BitsPerChannel' | 'EGBufferFormat_MAX' | 'None';
declare var EGBufferFormat : { Force8BitsPerChannel:'Force8BitsPerChannel',Default:'Default',HighPrecisionNormals:'HighPrecisionNormals',Force16BitsPerChannel:'Force16BitsPerChannel',EGBufferFormat_MAX:'EGBufferFormat_MAX',None:'None', };
declare class RendererSettings extends DeveloperSettings { 
	bMobileHDR: boolean;
	MobileNumDynamicPointLights: any;
	bMobileDynamicPointLightsUseStaticBranch: boolean;
	bMobileEnableStaticAndCSMShadowReceivers: boolean;
	bMobileDisableVertexFog: boolean;
	bDiscardUnusedQualityLevels: boolean;
	bOcclusionCulling: boolean;
	MinScreenRadiusForLights: number;
	MinScreenRadiusForEarlyZPass: number;
	MinScreenRadiusForCSMdepth: number;
	bPrecomputedVisibilityWarning: boolean;
	bTextureStreaming: boolean;
	bUseDXT5NormalMaps: boolean;
	bClearCoatEnableSecondNormal: boolean;
	ReflectionCaptureResolution: number;
	ReflectionEnvironmentLightmapMixBasedOnRoughness: boolean;
	bForwardShading: boolean;
	bVertexFoggingForOpaque: boolean;
	bAllowStaticLighting: boolean;
	bUseNormalMapsForStaticLighting: boolean;
	bGenerateMeshDistanceFields: boolean;
	bGenerateLandscapeGIData: boolean;
	TessellationAdaptivePixelsPerTriangle: number;
	bSeparateTranslucency: boolean;
	TranslucentSortPolicy: ETranslucentSortPolicy;
	TranslucentSortAxis: Vector;
	CustomDepthStencil: ECustomDepthStencil;
	bDefaultFeatureBloom: boolean;
	bDefaultFeatureAmbientOcclusion: boolean;
	bDefaultFeatureAmbientOcclusionStaticFraction: boolean;
	bDefaultFeatureAutoExposure: boolean;
	DefaultFeatureAutoExposure: EAutoExposureMethodUI;
	bDefaultFeatureMotionBlur: boolean;
	bDefaultFeatureLensFlare: boolean;
	DefaultFeatureAntiAliasing: EAntiAliasingMethod;
	bStencilForLODDither: boolean;
	EarlyZPass: EEarlyZPass;
	bEarlyZPassMovable: boolean;
	bDBuffer: boolean;
	ClearSceneMethod: EClearSceneOptions;
	bBasePassOutputsVelocity: boolean;
	bSelectiveBasePassOutputs: boolean;
	bDefaultParticleCutouts: boolean;
	bGlobalClipPlane: boolean;
	GBufferFormat: EGBufferFormat;
	bUseGPUMorphTargets: boolean;
	bInstancedStereo: boolean;
	bMultiView: boolean;
	bMobileMultiView: boolean;
	WireframeCullThreshold: number;
	bSupportStationarySkylight: boolean;
	bSupportLowQualityLightmaps: boolean;
	bSupportPointLightWholeSceneShadows: boolean;
	bSupportAtmosphericFog: boolean;
	bSupportSkinCacheShaders: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RendererSettings;
	static Find(Outer: UObject, ResourceName: string): RendererSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RendererSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererSettings;
	static C(Other: UObject): RendererSettings;
}

declare class RendererOverrideSettings extends DeveloperSettings { 
	bSupportAllShaderPermutations: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RendererOverrideSettings;
	static Find(Outer: UObject, ResourceName: string): RendererOverrideSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RendererOverrideSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererOverrideSettings;
	static C(Other: UObject): RendererOverrideSettings;
}

declare class TextureLODGroup { 
	Group: TextureGroup;
	LODBias: number;
	NumStreamedMips: number;
	MipGenSettings: TextureMipGenSettings;
	MinLODSize: number;
	MaxLODSize: number;
	MinMagFilter: string;
	MipFilter: string;
	clone() : TextureLODGroup;
	static C(Other: UObject): TextureLODGroup;
}

declare class TextureLODSettings extends UObject { 
	TextureLODGroups: TextureLODGroup[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): TextureLODSettings;
	static Find(Outer: UObject, ResourceName: string): TextureLODSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): TextureLODSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLODSettings;
	static C(Other: UObject): TextureLODSettings;
}

declare class DeviceProfile extends TextureLODSettings { 
	DeviceType: string;
	BaseProfileName: string;
	Parent: UObject;
	CVars: string[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DeviceProfile;
	static Find(Outer: UObject, ResourceName: string): DeviceProfile;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DeviceProfile;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfile;
	static C(Other: UObject): DeviceProfile;
}

declare class DeviceProfileManager extends UObject { 
	Profiles: UObject[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DeviceProfileManager;
	static Find(Outer: UObject, ResourceName: string): DeviceProfileManager;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DeviceProfileManager;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfileManager;
	static C(Other: UObject): DeviceProfileManager;
}

declare class DistributionFloatConstant extends DistributionFloat { 
	Constant: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionFloatConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionFloatConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstant;
	static C(Other: UObject): DistributionFloatConstant;
}

declare type DistributionParamMode = 'DPM_Normal' | 'DPM_Abs' | 'DPM_Direct';
declare var DistributionParamMode : { DPM_Normal:'DPM_Normal',DPM_Abs:'DPM_Abs',DPM_Direct:'DPM_Direct', };
declare class DistributionFloatParameterBase extends DistributionFloatConstant { 
	ParameterName: string;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: DistributionParamMode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionFloatParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParameterBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionFloatParameterBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParameterBase;
	static C(Other: UObject): DistributionFloatParameterBase;
}

declare class DistributionFloatParticleParameter extends DistributionFloatParameterBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionFloatParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParticleParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionFloatParticleParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParticleParameter;
	static C(Other: UObject): DistributionFloatParticleParameter;
}

declare class DistributionFloatConstantCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionFloatConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstantCurve;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionFloatConstantCurve;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstantCurve;
	static C(Other: UObject): DistributionFloatConstantCurve;
}

declare class DistributionFloatUniform extends DistributionFloat { 
	Min: number;
	Max: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionFloatUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniform;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionFloatUniform;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniform;
	static C(Other: UObject): DistributionFloatUniform;
}

declare class InterpCurvePointVector2D { 
	InVal: number;
	OutVal: Vector2D;
	ArriveTangent: Vector2D;
	LeaveTangent: Vector2D;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointVector2D;
	static C(Other: UObject): InterpCurvePointVector2D;
}

declare class InterpCurveVector2D { 
	Points: InterpCurvePointVector2D[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveVector2D;
	static C(Other: UObject): InterpCurveVector2D;
}

declare class DistributionFloatUniformCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveVector2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionFloatUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniformCurve;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionFloatUniformCurve;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniformCurve;
	static C(Other: UObject): DistributionFloatUniformCurve;
}

declare type EDistributionVectorLockFlags = 'EDVLF_None' | 'EDVLF_XY' | 'EDVLF_XZ' | 'EDVLF_YZ' | 'EDVLF_XYZ';
declare var EDistributionVectorLockFlags : { EDVLF_None:'EDVLF_None',EDVLF_XY:'EDVLF_XY',EDVLF_XZ:'EDVLF_XZ',EDVLF_YZ:'EDVLF_YZ',EDVLF_XYZ:'EDVLF_XYZ', };
declare class DistributionVectorConstant extends DistributionVector { 
	Constant: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionVectorConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionVectorConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstant;
	static C(Other: UObject): DistributionVectorConstant;
}

declare class DistributionVectorParameterBase extends DistributionVectorConstant { 
	ParameterName: string;
	MinInput: Vector;
	MaxInput: Vector;
	MinOutput: Vector;
	MaxOutput: Vector;
	ParamModes: DistributionParamMode;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionVectorParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParameterBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionVectorParameterBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParameterBase;
	static C(Other: UObject): DistributionVectorParameterBase;
}

declare class DistributionVectorParticleParameter extends DistributionVectorParameterBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionVectorParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParticleParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionVectorParticleParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParticleParameter;
	static C(Other: UObject): DistributionVectorParticleParameter;
}

declare class DistributionVectorConstantCurve extends DistributionVector { 
	ConstantCurve: InterpCurveVector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionVectorConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstantCurve;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionVectorConstantCurve;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstantCurve;
	static C(Other: UObject): DistributionVectorConstantCurve;
}

declare type EDistributionVectorMirrorFlags = 'EDVMF_Same' | 'EDVMF_Different' | 'EDVMF_Mirror';
declare var EDistributionVectorMirrorFlags : { EDVMF_Same:'EDVMF_Same',EDVMF_Different:'EDVMF_Different',EDVMF_Mirror:'EDVMF_Mirror', };
declare class DistributionVectorUniform extends DistributionVector { 
	Max: Vector;
	Min: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionVectorUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniform;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionVectorUniform;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniform;
	static C(Other: UObject): DistributionVectorUniform;
}

declare class TwoVectors { 
	v1: Vector;
	v2: Vector;
	clone() : TwoVectors;
	static C(Other: UObject): TwoVectors;
}

declare class InterpCurvePointTwoVectors { 
	InVal: number;
	OutVal: TwoVectors;
	ArriveTangent: TwoVectors;
	LeaveTangent: TwoVectors;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointTwoVectors;
	static C(Other: UObject): InterpCurvePointTwoVectors;
}

declare class InterpCurveTwoVectors { 
	Points: InterpCurvePointTwoVectors[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveTwoVectors;
	static C(Other: UObject): InterpCurveTwoVectors;
}

declare class DistributionVectorUniformCurve extends DistributionVector { 
	ConstantCurve: InterpCurveTwoVectors;
	bLockAxes1: boolean;
	bLockAxes2: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DistributionVectorUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniformCurve;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DistributionVectorUniformCurve;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniformCurve;
	static C(Other: UObject): DistributionVectorUniformCurve;
}

declare class BlueprintComponentDelegateBinding { 
	ComponentPropertyName: string;
	DelegatePropertyName: string;
	FunctionNameToBind: string;
	clone() : BlueprintComponentDelegateBinding;
	static C(Other: UObject): BlueprintComponentDelegateBinding;
}

declare class ComponentDelegateBinding extends DynamicBlueprintBinding { 
	ComponentDelegateBindings: BlueprintComponentDelegateBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ComponentDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): ComponentDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ComponentDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentDelegateBinding;
	static C(Other: UObject): ComponentDelegateBinding;
}

declare class InputDelegateBinding extends DynamicBlueprintBinding { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputDelegateBinding;
	static C(Other: UObject): InputDelegateBinding;
}

declare class BlueprintInputDelegateBinding { 
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	clone() : BlueprintInputDelegateBinding;
	static C(Other: UObject): BlueprintInputDelegateBinding;
}

declare class BlueprintInputActionDelegateBinding extends BlueprintInputDelegateBinding { 
	InputActionName: string;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputActionDelegateBinding;
	static C(Other: UObject): BlueprintInputActionDelegateBinding;
}

declare class InputActionDelegateBinding extends InputDelegateBinding { 
	InputActionDelegateBindings: BlueprintInputActionDelegateBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputActionDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputActionDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputActionDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputActionDelegateBinding;
	static C(Other: UObject): InputActionDelegateBinding;
}

declare class BlueprintInputAxisDelegateBinding extends BlueprintInputDelegateBinding { 
	InputAxisName: string;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisDelegateBinding;
	static C(Other: UObject): BlueprintInputAxisDelegateBinding;
}

declare class InputAxisDelegateBinding extends InputDelegateBinding { 
	InputAxisDelegateBindings: BlueprintInputAxisDelegateBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputAxisDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisDelegateBinding;
	static C(Other: UObject): InputAxisDelegateBinding;
}

declare class BlueprintInputAxisKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	AxisKey: Key;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisKeyDelegateBinding;
	static C(Other: UObject): BlueprintInputAxisKeyDelegateBinding;
}

declare class InputAxisKeyDelegateBinding extends InputDelegateBinding { 
	InputAxisKeyDelegateBindings: BlueprintInputAxisKeyDelegateBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputAxisKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisKeyDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputAxisKeyDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisKeyDelegateBinding;
	static C(Other: UObject): InputAxisKeyDelegateBinding;
}

declare class InputVectorAxisDelegateBinding extends InputAxisKeyDelegateBinding { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputVectorAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputVectorAxisDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputVectorAxisDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputVectorAxisDelegateBinding;
	static C(Other: UObject): InputVectorAxisDelegateBinding;
}

declare class BlueprintInputKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	InputChord: InputChord;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputKeyDelegateBinding;
	static C(Other: UObject): BlueprintInputKeyDelegateBinding;
}

declare class InputKeyDelegateBinding extends InputDelegateBinding { 
	InputKeyDelegateBindings: BlueprintInputKeyDelegateBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputKeyDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputKeyDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputKeyDelegateBinding;
	static C(Other: UObject): InputKeyDelegateBinding;
}

declare class BlueprintInputTouchDelegateBinding extends BlueprintInputDelegateBinding { 
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputTouchDelegateBinding;
	static C(Other: UObject): BlueprintInputTouchDelegateBinding;
}

declare class InputTouchDelegateBinding extends InputDelegateBinding { 
	InputTouchDelegateBindings: BlueprintInputTouchDelegateBinding[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputTouchDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputTouchDelegateBinding;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputTouchDelegateBinding;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputTouchDelegateBinding;
	static C(Other: UObject): InputTouchDelegateBinding;
}

declare class EdGraphNode_Documentation extends EdGraphNode { 
	Link: string;
	Excerpt: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EdGraphNode_Documentation;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Documentation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EdGraphNode_Documentation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Documentation;
	static C(Other: UObject): EdGraphNode_Documentation;
}

declare class ImportantToggleSettingInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ImportantToggleSettingInterface;
	static Find(Outer: UObject, ResourceName: string): ImportantToggleSettingInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ImportantToggleSettingInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportantToggleSettingInterface;
	static C(Other: UObject): ImportantToggleSettingInterface;
}

declare class EndUserSettings extends UObject { 
	bSendAnonymousUsageDataToEpic: boolean;
	bSendMeanTimeBetweenFailureDataToEpic: boolean;
	bAllowUserIdInUsageData: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EndUserSettings;
	static Find(Outer: UObject, ResourceName: string): EndUserSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EndUserSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndUserSettings;
	static C(Other: UObject): EndUserSettings;
}

declare class GameEngine extends Engine { 
	MaxDeltaTime: number;
	ServerFlushLogInterval: number;
	GameInstance: GameInstance;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): GameEngine;
	static Find(Outer: UObject, ResourceName: string): GameEngine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): GameEngine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameEngine;
	static C(Other: UObject): GameEngine;
}

declare class EngineHandlerComponentFactory extends HandlerComponentFactory { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EngineHandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): EngineHandlerComponentFactory;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EngineHandlerComponentFactory;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineHandlerComponentFactory;
	static C(Other: UObject): EngineHandlerComponentFactory;
}

declare class HapticFeedbackEffect_Buffer extends HapticFeedbackEffect_Base { 
	Amplitudes: number[];
	SampleRate: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HapticFeedbackEffect_Buffer;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Buffer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HapticFeedbackEffect_Buffer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Buffer;
	static C(Other: UObject): HapticFeedbackEffect_Buffer;
}

declare class HapticFeedbackDetails_Curve { 
	Frequency: RuntimeFloatCurve;
	Amplitude: RuntimeFloatCurve;
	clone() : HapticFeedbackDetails_Curve;
	static C(Other: UObject): HapticFeedbackDetails_Curve;
}

declare class HapticFeedbackEffect_Curve extends HapticFeedbackEffect_Base { 
	HapticDetails: HapticFeedbackDetails_Curve;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HapticFeedbackEffect_Curve;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Curve;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HapticFeedbackEffect_Curve;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Curve;
	static C(Other: UObject): HapticFeedbackEffect_Curve;
}

declare class SoundEffectBase extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundEffectBase;
	static Find(Outer: UObject, ResourceName: string): SoundEffectBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundEffectBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectBase;
	static C(Other: UObject): SoundEffectBase;
}

declare class SoundEffectSource extends SoundEffectBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundEffectSource;
	static Find(Outer: UObject, ResourceName: string): SoundEffectSource;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundEffectSource;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSource;
	static C(Other: UObject): SoundEffectSource;
}

declare class SoundEffectSubmix extends SoundEffectBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundEffectSubmix;
	static Find(Outer: UObject, ResourceName: string): SoundEffectSubmix;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundEffectSubmix;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSubmix;
	static C(Other: UObject): SoundEffectSubmix;
}

declare class SoundGroup { 
	SoundGroup: ESoundGroup;
	DisplayName: string;
	bAlwaysDecompressOnLoad: boolean;
	DecompressedDuration: number;
	clone() : SoundGroup;
	static C(Other: UObject): SoundGroup;
}

declare class SoundGroups extends UObject { 
	SoundGroupProfiles: SoundGroup[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): SoundGroups;
	static Find(Outer: UObject, ResourceName: string): SoundGroups;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): SoundGroups;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundGroups;
	static C(Other: UObject): SoundGroups;
}

declare class HapticFeedbackEffect_SoundWave extends HapticFeedbackEffect_Base { 
	SoundWave: SoundWave;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): HapticFeedbackEffect_SoundWave;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_SoundWave;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): HapticFeedbackEffect_SoundWave;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_SoundWave;
	static C(Other: UObject): HapticFeedbackEffect_SoundWave;
}

declare class InputAxisProperties { 
	DeadZone: number;
	Sensitivity: number;
	Exponent: number;
	bInvert: boolean;
	clone() : InputAxisProperties;
	static C(Other: UObject): InputAxisProperties;
}

declare class InputAxisConfigEntry { 
	AxisKeyName: string;
	AxisProperties: InputAxisProperties;
	clone() : InputAxisConfigEntry;
	static C(Other: UObject): InputAxisConfigEntry;
}

declare type EMouseCaptureMode = 'NoCapture' | 'CapturePermanently' | 'CapturePermanently_IncludingInitialMouseDown' | 'CaptureDuringMouseDown' | 'CaptureDuringRightMouseDown';
declare var EMouseCaptureMode : { NoCapture:'NoCapture',CapturePermanently:'CapturePermanently',CapturePermanently_IncludingInitialMouseDown:'CapturePermanently_IncludingInitialMouseDown',CaptureDuringMouseDown:'CaptureDuringMouseDown',CaptureDuringRightMouseDown:'CaptureDuringRightMouseDown', };
declare class InputActionKeyMapping { 
	ActionName: string;
	Key: Key;
	bShift: boolean;
	bCtrl: boolean;
	bAlt: boolean;
	bCmd: boolean;
	clone() : InputActionKeyMapping;
	static C(Other: UObject): InputActionKeyMapping;
}

declare class InputAxisKeyMapping { 
	AxisName: string;
	Key: Key;
	Scale: number;
	clone() : InputAxisKeyMapping;
	static C(Other: UObject): InputAxisKeyMapping;
}

declare class InputSettings extends UObject { 
	AxisConfig: InputAxisConfigEntry[];
	bAltEnterTogglesFullscreen: boolean;
	bF11TogglesFullscreen: boolean;
	bUseMouseForTouch: boolean;
	bEnableMouseSmoothing: boolean;
	bEnableFOVScaling: boolean;
	FOVScale: number;
	DoubleClickTime: number;
	bCaptureMouseOnLaunch: boolean;
	DefaultViewportMouseCaptureMode: EMouseCaptureMode;
	bDefaultViewportMouseLock: boolean;
	DefaultViewportMouseLockMode: EMouseLockMode;
	ActionMappings: InputActionKeyMapping[];
	AxisMappings: InputAxisKeyMapping[];
	bAlwaysShowTouchInterface: boolean;
	bShowConsoleOnFourFingerTap: boolean;
	DefaultTouchInterface: StringAssetReference;
	ConsoleKey: Key;
	ConsoleKeys: Key[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InputSettings;
	static Find(Outer: UObject, ResourceName: string): InputSettings;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InputSettings;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputSettings;
	static C(Other: UObject): InputSettings;
}

declare class InterpFilter_Classes extends InterpFilter { 
	ClassToFilterBy: UnrealEngineClass;
	TrackClasses: UnrealEngineClass[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpFilter_Classes;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Classes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpFilter_Classes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Classes;
	static C(Other: UObject): InterpFilter_Classes;
}

declare class InterpFilter_Custom extends InterpFilter { 
	GroupsToInclude: InterpGroup[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpFilter_Custom;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Custom;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpFilter_Custom;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Custom;
	static C(Other: UObject): InterpFilter_Custom;
}

declare class CameraPreviewInfo { 
	PawnClass: UnrealEngineClass;
	AnimSeq: AnimSequence;
	Location: Vector;
	Rotation: Rotator;
	PawnInst: Pawn;
	clone() : CameraPreviewInfo;
	static C(Other: UObject): CameraPreviewInfo;
}

declare class InterpGroupCamera extends InterpGroup { 
	CameraAnimInst: CameraAnim;
	Target: CameraPreviewInfo;
	CompressTolerance: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpGroupCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupCamera;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpGroupCamera;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupCamera;
	static C(Other: UObject): InterpGroupCamera;
}

declare class InterpGroupInstCamera extends InterpGroupInst { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpGroupInstCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstCamera;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpGroupInstCamera;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstCamera;
	static C(Other: UObject): InterpGroupInstCamera;
}

declare class InterpGroupInstDirector extends InterpGroupInst { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpGroupInstDirector;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstDirector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpGroupInstDirector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstDirector;
	static C(Other: UObject): InterpGroupInstDirector;
}

declare class BoolTrackKey { 
	Time: number;
	Value: boolean;
	clone() : BoolTrackKey;
	static C(Other: UObject): BoolTrackKey;
}

declare class InterpTrackBoolProp extends InterpTrack { 
	BoolTrack: BoolTrackKey[];
	PropertyName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackBoolProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackBoolProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackBoolProp;
	static C(Other: UObject): InterpTrackBoolProp;
}

declare class DirectorTrackCut { 
	Time: number;
	TransitionTime: number;
	TargetCamGroup: string;
	ShotNumber: number;
	clone() : DirectorTrackCut;
	static C(Other: UObject): DirectorTrackCut;
}

declare class InterpTrackDirector extends InterpTrack { 
	CutTrack: DirectorTrackCut[];
	bSimulateCameraCutsOnClients: boolean;
	PreviewCamera: CameraActor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackDirector;
	static Find(Outer: UObject, ResourceName: string): InterpTrackDirector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackDirector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackDirector;
	static C(Other: UObject): InterpTrackDirector;
}

declare class EventTrackKey { 
	Time: number;
	EventName: string;
	clone() : EventTrackKey;
	static C(Other: UObject): EventTrackKey;
}

declare class InterpTrackEvent extends InterpTrack { 
	EventTrack: EventTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	bUseCustomEventName: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackEvent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackEvent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackEvent;
	static C(Other: UObject): InterpTrackEvent;
}

declare class InterpTrackFloatBase extends InterpTrack { 
	FloatTrack: InterpCurveFloat;
	CurveTension: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackFloatBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackFloatBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatBase;
	static C(Other: UObject): InterpTrackFloatBase;
}

declare class AnimControlTrackKey { 
	StartTime: number;
	AnimSeq: AnimSequence;
	AnimStartOffset: number;
	AnimEndOffset: number;
	AnimPlayRate: number;
	bLooping: boolean;
	bReverse: boolean;
	clone() : AnimControlTrackKey;
	static C(Other: UObject): AnimControlTrackKey;
}

declare class InterpTrackAnimControl extends InterpTrackFloatBase { 
	SlotName: string;
	AnimSeqs: AnimControlTrackKey[];
	bSkipAnimNotifiers: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAnimControl;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackAnimControl;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAnimControl;
	static C(Other: UObject): InterpTrackAnimControl;
}

declare class InterpTrackFade extends InterpTrackFloatBase { 
	bPersistFade: boolean;
	bFadeAudio: boolean;
	FadeColor: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFade;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackFade;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFade;
	static C(Other: UObject): InterpTrackFade;
}

declare class InterpTrackFloatAnimBPParam extends InterpTrackFloatBase { 
	AnimBlueprintClass: UnrealEngineClass;
	AnimClass: UnrealEngineClass;
	ParamName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatAnimBPParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackFloatAnimBPParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatAnimBPParam;
	static C(Other: UObject): InterpTrackFloatAnimBPParam;
}

declare class InterpTrackFloatMaterialParam extends InterpTrackFloatBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatMaterialParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackFloatMaterialParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatMaterialParam;
	static C(Other: UObject): InterpTrackFloatMaterialParam;
}

declare class InterpTrackFloatParticleParam extends InterpTrackFloatBase { 
	ParamName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatParticleParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackFloatParticleParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatParticleParam;
	static C(Other: UObject): InterpTrackFloatParticleParam;
}

declare class InterpTrackFloatProp extends InterpTrackFloatBase { 
	PropertyName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackFloatProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatProp;
	static C(Other: UObject): InterpTrackFloatProp;
}

declare type EInterpMoveAxis = 'AXIS_TranslationX' | 'AXIS_TranslationY' | 'AXIS_TranslationZ' | 'AXIS_RotationX' | 'AXIS_RotationY' | 'AXIS_RotationZ';
declare var EInterpMoveAxis : { AXIS_TranslationX:'AXIS_TranslationX',AXIS_TranslationY:'AXIS_TranslationY',AXIS_TranslationZ:'AXIS_TranslationZ',AXIS_RotationX:'AXIS_RotationX',AXIS_RotationY:'AXIS_RotationY',AXIS_RotationZ:'AXIS_RotationZ', };
declare class InterpTrackMoveAxis extends InterpTrackFloatBase { 
	MoveAxis: EInterpMoveAxis;
	LookupTrack: InterpLookupTrack;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackMoveAxis;
	static Find(Outer: UObject, ResourceName: string): InterpTrackMoveAxis;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackMoveAxis;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackMoveAxis;
	static C(Other: UObject): InterpTrackMoveAxis;
}

declare class InterpTrackSlomo extends InterpTrackFloatBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSlomo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackSlomo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSlomo;
	static C(Other: UObject): InterpTrackSlomo;
}

declare class InterpCurvePointLinearColor { 
	InVal: number;
	OutVal: LinearColor;
	ArriveTangent: LinearColor;
	LeaveTangent: LinearColor;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointLinearColor;
	static C(Other: UObject): InterpCurvePointLinearColor;
}

declare class InterpCurveLinearColor { 
	Points: InterpCurvePointLinearColor[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveLinearColor;
	static C(Other: UObject): InterpCurveLinearColor;
}

declare class InterpTrackLinearColorBase extends InterpTrack { 
	LinearColorTrack: InterpCurveLinearColor;
	CurveTension: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackLinearColorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackLinearColorBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorBase;
	static C(Other: UObject): InterpTrackLinearColorBase;
}

declare class InterpTrackLinearColorProp extends InterpTrackLinearColorBase { 
	PropertyName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackLinearColorProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorProp;
	static C(Other: UObject): InterpTrackLinearColorProp;
}

declare class ParticleReplayTrackKey { 
	Time: number;
	Duration: number;
	ClipIDNumber: number;
	clone() : ParticleReplayTrackKey;
	static C(Other: UObject): ParticleReplayTrackKey;
}

declare class InterpTrackParticleReplay extends InterpTrack { 
	TrackKeys: ParticleReplayTrackKey[];
	bIsCapturingReplay: boolean;
	FixedTimeStep: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackParticleReplay;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackParticleReplay;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackParticleReplay;
	static C(Other: UObject): InterpTrackParticleReplay;
}

declare type ETrackToggleAction = 'ETTA_Off' | 'ETTA_On' | 'ETTA_Toggle' | 'ETTA_Trigger';
declare var ETrackToggleAction : { ETTA_Off:'ETTA_Off',ETTA_On:'ETTA_On',ETTA_Toggle:'ETTA_Toggle',ETTA_Trigger:'ETTA_Trigger', };
declare class ToggleTrackKey { 
	Time: number;
	ToggleAction: ETrackToggleAction;
	clone() : ToggleTrackKey;
	static C(Other: UObject): ToggleTrackKey;
}

declare class InterpTrackToggle extends InterpTrack { 
	ToggleTrack: ToggleTrackKey[];
	bActivateSystemEachUpdate: boolean;
	bActivateWithJustAttachedFlag: boolean;
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackToggle;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackToggle;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackToggle;
	static C(Other: UObject): InterpTrackToggle;
}

declare class InterpTrackVectorBase extends InterpTrack { 
	VectorTrack: InterpCurveVector;
	CurveTension: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackVectorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackVectorBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorBase;
	static C(Other: UObject): InterpTrackVectorBase;
}

declare class InterpTrackAudioMaster extends InterpTrackVectorBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAudioMaster;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackAudioMaster;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAudioMaster;
	static C(Other: UObject): InterpTrackAudioMaster;
}

declare class InterpTrackColorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackColorProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorProp;
	static C(Other: UObject): InterpTrackColorProp;
}

declare class InterpTrackColorScale extends InterpTrackVectorBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorScale;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackColorScale;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorScale;
	static C(Other: UObject): InterpTrackColorScale;
}

declare class SoundTrackKey { 
	Time: number;
	Volume: number;
	Pitch: number;
	Sound: SoundBase;
	clone() : SoundTrackKey;
	static C(Other: UObject): SoundTrackKey;
}

declare class InterpTrackSound extends InterpTrackVectorBase { 
	Sounds: SoundTrackKey[];
	bPlayOnReverse: boolean;
	bContinueSoundOnMatineeEnd: boolean;
	bSuppressSubtitles: boolean;
	bTreatAsDialogue: boolean;
	bAttach: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSound;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackSound;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSound;
	static C(Other: UObject): InterpTrackSound;
}

declare class InterpTrackVectorMaterialParam extends InterpTrackVectorBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorMaterialParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackVectorMaterialParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorMaterialParam;
	static C(Other: UObject): InterpTrackVectorMaterialParam;
}

declare class InterpTrackVectorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackVectorProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorProp;
	static C(Other: UObject): InterpTrackVectorProp;
}

declare type EVisibilityTrackAction = 'EVTA_Hide' | 'EVTA_Show' | 'EVTA_Toggle';
declare var EVisibilityTrackAction : { EVTA_Hide:'EVTA_Hide',EVTA_Show:'EVTA_Show',EVTA_Toggle:'EVTA_Toggle', };
declare type EVisibilityTrackCondition = 'EVTC_Always' | 'EVTC_GoreEnabled' | 'EVTC_GoreDisabled';
declare var EVisibilityTrackCondition : { EVTC_Always:'EVTC_Always',EVTC_GoreEnabled:'EVTC_GoreEnabled',EVTC_GoreDisabled:'EVTC_GoreDisabled', };
declare class VisibilityTrackKey { 
	Time: number;
	Action: EVisibilityTrackAction;
	ActiveCondition: EVisibilityTrackCondition;
	clone() : VisibilityTrackKey;
	static C(Other: UObject): VisibilityTrackKey;
}

declare class InterpTrackVisibility extends InterpTrack { 
	VisibilityTrack: VisibilityTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVisibility;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackVisibility;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVisibility;
	static C(Other: UObject): InterpTrackVisibility;
}

declare class InterpTrackInstAnimControl extends InterpTrackInst { 
	LastUpdatePosition: number;
	InitPosition: Vector;
	InitRotation: Rotator;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAnimControl;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstAnimControl;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAnimControl;
	static C(Other: UObject): InterpTrackInstAnimControl;
}

declare class InterpTrackInstAudioMaster extends InterpTrackInst { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAudioMaster;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstAudioMaster;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAudioMaster;
	static C(Other: UObject): InterpTrackInstAudioMaster;
}

declare class InterpTrackInstColorScale extends InterpTrackInst { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorScale;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstColorScale;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorScale;
	static C(Other: UObject): InterpTrackInstColorScale;
}

declare class InterpTrackInstEvent extends InterpTrackInst { 
	LastUpdatePosition: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstEvent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstEvent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstEvent;
	static C(Other: UObject): InterpTrackInstEvent;
}

declare class InterpTrackInstFade extends InterpTrackInst { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFade;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstFade;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFade;
	static C(Other: UObject): InterpTrackInstFade;
}

declare class InterpTrackInstFloatAnimBPParam extends InterpTrackInst { 
	AnimScriptInstance: AnimInstance;
	ResetFloat: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstFloatAnimBPParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatAnimBPParam;
	static C(Other: UObject): InterpTrackInstFloatAnimBPParam;
}

declare class PrimitiveMaterialRef { 
	Primitive: PrimitiveComponent;
	Decal: DecalComponent;
	ElementIndex: number;
	clone() : PrimitiveMaterialRef;
	static C(Other: UObject): PrimitiveMaterialRef;
}

declare class InterpTrackInstFloatMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetFloats: number[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackFloatMaterialParam;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatMaterialParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstFloatMaterialParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatMaterialParam;
	static C(Other: UObject): InterpTrackInstFloatMaterialParam;
}

declare class InterpTrackInstFloatParticleParam extends InterpTrackInst { 
	ResetFloat: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatParticleParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstFloatParticleParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatParticleParam;
	static C(Other: UObject): InterpTrackInstFloatParticleParam;
}

declare class InterpTrackInstParticleReplay extends InterpTrackInst { 
	LastUpdatePosition: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstParticleReplay;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstParticleReplay;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstParticleReplay;
	static C(Other: UObject): InterpTrackInstParticleReplay;
}

declare class InterpTrackInstProperty extends InterpTrackInst { 
	InterpProperty: Property;
	PropertyOuterObjectInst: UObject;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstProperty;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstProperty;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstProperty;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstProperty;
	static C(Other: UObject): InterpTrackInstProperty;
}

declare class InterpTrackInstBoolProp extends InterpTrackInstProperty { 
	BoolProperty: BoolProperty;
	ResetBool: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstBoolProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstBoolProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstBoolProp;
	static C(Other: UObject): InterpTrackInstBoolProp;
}

declare class InterpTrackInstColorProp extends InterpTrackInstProperty { 
	ResetColor: Color;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstColorProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorProp;
	static C(Other: UObject): InterpTrackInstColorProp;
}

declare class InterpTrackInstFloatProp extends InterpTrackInstProperty { 
	ResetFloat: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstFloatProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatProp;
	static C(Other: UObject): InterpTrackInstFloatProp;
}

declare class InterpTrackInstLinearColorProp extends InterpTrackInstProperty { 
	ResetColor: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstLinearColorProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstLinearColorProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstLinearColorProp;
	static C(Other: UObject): InterpTrackInstLinearColorProp;
}

declare class InterpTrackInstVectorProp extends InterpTrackInstProperty { 
	ResetVector: Vector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorProp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstVectorProp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorProp;
	static C(Other: UObject): InterpTrackInstVectorProp;
}

declare class InterpTrackInstSlomo extends InterpTrackInst { 
	OldTimeDilation: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSlomo;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstSlomo;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSlomo;
	static C(Other: UObject): InterpTrackInstSlomo;
}

declare class InterpTrackInstSound extends InterpTrackInst { 
	LastUpdatePosition: number;
	PlayAudioComp: AudioComponent;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSound;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstSound;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSound;
	static C(Other: UObject): InterpTrackInstSound;
}

declare class InterpTrackInstToggle extends InterpTrackInst { 
	Action: ETrackToggleAction;
	LastUpdatePosition: number;
	bSavedActiveState: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstToggle;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstToggle;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstToggle;
	static C(Other: UObject): InterpTrackInstToggle;
}

declare class InterpTrackInstVectorMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetVectors: Vector[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackVectorMaterialParam;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorMaterialParam;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstVectorMaterialParam;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorMaterialParam;
	static C(Other: UObject): InterpTrackInstVectorMaterialParam;
}

declare class InterpTrackInstVisibility extends InterpTrackInst { 
	Action: EVisibilityTrackAction;
	LastUpdatePosition: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): InterpTrackInstVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVisibility;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): InterpTrackInstVisibility;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVisibility;
	static C(Other: UObject): InterpTrackInstVisibility;
}

declare class IntSerialization extends UObject { 
	UnsignedInt16Variable: any;
	UnsignedInt32Variable: any;
	UnsignedInt64Variable: any;
	SignedInt8Variable: any;
	SignedInt16Variable: any;
	SignedInt64Variable: any;
	UnsignedInt8Variable: number;
	SignedInt32Variable: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): IntSerialization;
	static Find(Outer: UObject, ResourceName: string): IntSerialization;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): IntSerialization;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntSerialization;
	static C(Other: UObject): IntSerialization;
}

declare class LevelStreamingAlwaysLoaded extends LevelStreaming { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelStreamingAlwaysLoaded;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingAlwaysLoaded;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelStreamingAlwaysLoaded;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingAlwaysLoaded;
	static C(Other: UObject): LevelStreamingAlwaysLoaded;
}

declare class LevelStreamingKismet extends LevelStreaming { 
	bInitiallyLoaded: boolean;
	bInitiallyVisible: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelStreamingKismet;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingKismet;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelStreamingKismet;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingKismet;
	static LoadLevelInstance(WorldContextObject: UObject,LevelName: string,Location: Vector,Rotation: Rotator,bOutSuccess?: boolean): {bOutSuccess: boolean, $: LevelStreamingKismet};
	static C(Other: UObject): LevelStreamingKismet;
}

declare class LevelStreamingPersistent extends LevelStreaming { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LevelStreamingPersistent;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingPersistent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LevelStreamingPersistent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingPersistent;
	static C(Other: UObject): LevelStreamingPersistent;
}

declare class LightmappedSurfaceCollection extends UObject { 
	SourceModel: Model;
	Surfaces: number[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightmappedSurfaceCollection;
	static Find(Outer: UObject, ResourceName: string): LightmappedSurfaceCollection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmappedSurfaceCollection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmappedSurfaceCollection;
	static C(Other: UObject): LightmappedSurfaceCollection;
}

declare class LightmassPrimitiveSettingsObject extends UObject { 
	LightmassSettings: LightmassPrimitiveSettings;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): LightmassPrimitiveSettingsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassPrimitiveSettingsObject;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): LightmassPrimitiveSettingsObject;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPrimitiveSettingsObject;
	static C(Other: UObject): LightmassPrimitiveSettingsObject;
}

declare class EngineMessage extends LocalMessage { 
	FailedPlaceMessage: string;
	MaxedOutMessage: string;
	EnteredMessage: string;
	LeftMessage: string;
	GlobalNameChange: string;
	SpecEnteredMessage: string;
	NewPlayerMessage: string;
	NewSpecMessage: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): EngineMessage;
	static Find(Outer: UObject, ResourceName: string): EngineMessage;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): EngineMessage;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineMessage;
	static C(Other: UObject): EngineMessage;
}

declare class MaterialExpressionAbs extends MaterialExpression { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAbs;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAbs;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAbs;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAbs;
	static C(Other: UObject): MaterialExpressionAbs;
}

declare class MaterialExpressionActorPositionWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionActorPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionActorPositionWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionActorPositionWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionActorPositionWS;
	static C(Other: UObject): MaterialExpressionActorPositionWS;
}

declare class MaterialExpressionAdd extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAdd;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAdd;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAdd;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAdd;
	static C(Other: UObject): MaterialExpressionAdd;
}

declare class MaterialExpressionAppendVector extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAppendVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAppendVector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAppendVector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAppendVector;
	static C(Other: UObject): MaterialExpressionAppendVector;
}

declare class MaterialExpressionAtmosphericFogColor extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAtmosphericFogColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericFogColor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAtmosphericFogColor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericFogColor;
	static C(Other: UObject): MaterialExpressionAtmosphericFogColor;
}

declare class MaterialExpressionAtmosphericLightColor extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAtmosphericLightColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericLightColor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAtmosphericLightColor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericLightColor;
	static C(Other: UObject): MaterialExpressionAtmosphericLightColor;
}

declare class MaterialExpressionAtmosphericLightVector extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAtmosphericLightVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericLightVector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAtmosphericLightVector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericLightVector;
	static C(Other: UObject): MaterialExpressionAtmosphericLightVector;
}

declare class MaterialExpressionBlackBody extends MaterialExpression { 
	Temp: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionBlackBody;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBlackBody;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionBlackBody;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBlackBody;
	static C(Other: UObject): MaterialExpressionBlackBody;
}

declare type EMaterialAttributeBlend = 'Blend' | 'UseA' | 'UseB';
declare var EMaterialAttributeBlend : { Blend:'Blend',UseA:'UseA',UseB:'UseB', };
declare class MaterialExpressionBlendMaterialAttributes extends MaterialExpression { 
	A: MaterialAttributesInput;
	B: MaterialAttributesInput;
	Alpha: ExpressionInput;
	PixelAttributeBlendType: EMaterialAttributeBlend;
	VertexAttributeBlendType: EMaterialAttributeBlend;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionBlendMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBlendMaterialAttributes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionBlendMaterialAttributes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBlendMaterialAttributes;
	static C(Other: UObject): MaterialExpressionBlendMaterialAttributes;
}

declare class MaterialExpressionBreakMaterialAttributes extends MaterialExpression { 
	MaterialAttributes: MaterialAttributesInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionBreakMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBreakMaterialAttributes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionBreakMaterialAttributes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBreakMaterialAttributes;
	static C(Other: UObject): MaterialExpressionBreakMaterialAttributes;
}

declare class MaterialExpressionBumpOffset extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Height: ExpressionInput;
	HeightRatioInput: ExpressionInput;
	HeightRatio: number;
	ReferencePlane: number;
	ConstCoordinate: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionBumpOffset;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBumpOffset;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionBumpOffset;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBumpOffset;
	static C(Other: UObject): MaterialExpressionBumpOffset;
}

declare class MaterialExpressionCameraPositionWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCameraPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCameraPositionWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCameraPositionWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCameraPositionWS;
	static C(Other: UObject): MaterialExpressionCameraPositionWS;
}

declare class MaterialExpressionCameraVectorWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCameraVectorWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCameraVectorWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCameraVectorWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCameraVectorWS;
	static C(Other: UObject): MaterialExpressionCameraVectorWS;
}

declare class MaterialExpressionCeil extends MaterialExpression { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCeil;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCeil;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCeil;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCeil;
	static C(Other: UObject): MaterialExpressionCeil;
}

declare type EClampMode = 'CMODE_Clamp' | 'CMODE_ClampMin' | 'CMODE_ClampMax';
declare var EClampMode : { CMODE_Clamp:'CMODE_Clamp',CMODE_ClampMin:'CMODE_ClampMin',CMODE_ClampMax:'CMODE_ClampMax', };
declare class MaterialExpressionClamp extends MaterialExpression { 
	Input: ExpressionInput;
	Min: ExpressionInput;
	Max: ExpressionInput;
	ClampMode: EClampMode;
	MinDefault: number;
	MaxDefault: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionClamp;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionClamp;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionClamp;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionClamp;
	static C(Other: UObject): MaterialExpressionClamp;
}

declare class MaterialExpressionCollectionParameter extends MaterialExpression { 
	Collection: MaterialParameterCollection;
	ParameterName: string;
	ParameterId: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCollectionParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCollectionParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCollectionParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCollectionParameter;
	static C(Other: UObject): MaterialExpressionCollectionParameter;
}

declare class MaterialExpressionComponentMask extends MaterialExpression { 
	Input: ExpressionInput;
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionComponentMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionComponentMask;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionComponentMask;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionComponentMask;
	static C(Other: UObject): MaterialExpressionComponentMask;
}

declare class MaterialExpressionConstant extends MaterialExpression { 
	R: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant;
	static C(Other: UObject): MaterialExpressionConstant;
}

declare class MaterialExpressionConstant2Vector extends MaterialExpression { 
	R: number;
	G: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionConstant2Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant2Vector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionConstant2Vector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant2Vector;
	static C(Other: UObject): MaterialExpressionConstant2Vector;
}

declare class MaterialExpressionConstant3Vector extends MaterialExpression { 
	Constant: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionConstant3Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant3Vector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionConstant3Vector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant3Vector;
	static C(Other: UObject): MaterialExpressionConstant3Vector;
}

declare class MaterialExpressionConstant4Vector extends MaterialExpression { 
	Constant: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionConstant4Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant4Vector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionConstant4Vector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant4Vector;
	static C(Other: UObject): MaterialExpressionConstant4Vector;
}

declare class MaterialExpressionConstantBiasScale extends MaterialExpression { 
	Input: ExpressionInput;
	Bias: number;
	Scale: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionConstantBiasScale;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstantBiasScale;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionConstantBiasScale;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstantBiasScale;
	static C(Other: UObject): MaterialExpressionConstantBiasScale;
}

declare class MaterialExpressionCosine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCosine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCosine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCosine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCosine;
	static C(Other: UObject): MaterialExpressionCosine;
}

declare class MaterialExpressionCrossProduct extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCrossProduct;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCrossProduct;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCrossProduct;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCrossProduct;
	static C(Other: UObject): MaterialExpressionCrossProduct;
}

declare type ECustomMaterialOutputType = 'CMOT_Float1' | 'CMOT_Float2' | 'CMOT_Float3' | 'CMOT_Float4';
declare var ECustomMaterialOutputType : { CMOT_Float1:'CMOT_Float1',CMOT_Float2:'CMOT_Float2',CMOT_Float3:'CMOT_Float3',CMOT_Float4:'CMOT_Float4', };
declare class CustomInput { 
	InputName: string;
	Input: ExpressionInput;
	clone() : CustomInput;
	static C(Other: UObject): CustomInput;
}

declare class MaterialExpressionCustom extends MaterialExpression { 
	Code: string;
	OutputType: ECustomMaterialOutputType;
	Description: string;
	Inputs: CustomInput[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionCustom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustom;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionCustom;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustom;
	static C(Other: UObject): MaterialExpressionCustom;
}

declare class MaterialExpressionClearCoatNormalCustomOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionClearCoatNormalCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionClearCoatNormalCustomOutput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionClearCoatNormalCustomOutput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionClearCoatNormalCustomOutput;
	static C(Other: UObject): MaterialExpressionClearCoatNormalCustomOutput;
}

declare class MaterialExpressionTangentOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTangentOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangentOutput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTangentOutput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangentOutput;
	static C(Other: UObject): MaterialExpressionTangentOutput;
}

declare class MaterialExpressionDDX extends MaterialExpression { 
	Value: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDDX;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDDX;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDDX;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDDX;
	static C(Other: UObject): MaterialExpressionDDX;
}

declare class MaterialExpressionDDY extends MaterialExpression { 
	Value: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDDY;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDDY;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDDY;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDDY;
	static C(Other: UObject): MaterialExpressionDDY;
}

declare class MaterialExpressionDecalDerivative extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDecalDerivative;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalDerivative;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDecalDerivative;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalDerivative;
	static C(Other: UObject): MaterialExpressionDecalDerivative;
}

declare class MaterialExpressionDecalLifetimeOpacity extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDecalLifetimeOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalLifetimeOpacity;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDecalLifetimeOpacity;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalLifetimeOpacity;
	static C(Other: UObject): MaterialExpressionDecalLifetimeOpacity;
}

declare class MaterialExpressionDecalMipmapLevel extends MaterialExpression { 
	TextureSize: ExpressionInput;
	ConstWidth: number;
	ConstHeight: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDecalMipmapLevel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalMipmapLevel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDecalMipmapLevel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalMipmapLevel;
	static C(Other: UObject): MaterialExpressionDecalMipmapLevel;
}

declare class MaterialExpressionDepthFade extends MaterialExpression { 
	InOpacity: ExpressionInput;
	FadeDistance: ExpressionInput;
	OpacityDefault: number;
	FadeDistanceDefault: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDepthFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDepthFade;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDepthFade;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDepthFade;
	static C(Other: UObject): MaterialExpressionDepthFade;
}

declare type EDepthOfFieldFunctionValue = 'TDOF_NearAndFarMask' | 'TDOF_NearMask' | 'TDOF_FarMask' | 'TDOF_CircleOfConfusionRadius';
declare var EDepthOfFieldFunctionValue : { TDOF_NearAndFarMask:'TDOF_NearAndFarMask',TDOF_NearMask:'TDOF_NearMask',TDOF_FarMask:'TDOF_FarMask',TDOF_CircleOfConfusionRadius:'TDOF_CircleOfConfusionRadius', };
declare class MaterialExpressionDepthOfFieldFunction extends MaterialExpression { 
	FunctionValue: EDepthOfFieldFunctionValue;
	Depth: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDepthOfFieldFunction;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDepthOfFieldFunction;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDepthOfFieldFunction;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDepthOfFieldFunction;
	static C(Other: UObject): MaterialExpressionDepthOfFieldFunction;
}

declare class MaterialExpressionDeriveNormalZ extends MaterialExpression { 
	InXY: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDeriveNormalZ;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDeriveNormalZ;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDeriveNormalZ;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDeriveNormalZ;
	static C(Other: UObject): MaterialExpressionDeriveNormalZ;
}

declare class MaterialExpressionDesaturation extends MaterialExpression { 
	Input: ExpressionInput;
	Fraction: ExpressionInput;
	LuminanceFactors: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDesaturation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDesaturation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDesaturation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDesaturation;
	static C(Other: UObject): MaterialExpressionDesaturation;
}

declare class MaterialExpressionDistance extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDistance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistance;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDistance;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistance;
	static C(Other: UObject): MaterialExpressionDistance;
}

declare class MaterialExpressionDistanceCullFade extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDistanceCullFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceCullFade;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDistanceCullFade;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceCullFade;
	static C(Other: UObject): MaterialExpressionDistanceCullFade;
}

declare class MaterialExpressionDistanceFieldGradient extends MaterialExpression { 
	Position: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDistanceFieldGradient;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceFieldGradient;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDistanceFieldGradient;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceFieldGradient;
	static C(Other: UObject): MaterialExpressionDistanceFieldGradient;
}

declare class MaterialExpressionDistanceToNearestSurface extends MaterialExpression { 
	Position: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDistanceToNearestSurface;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceToNearestSurface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDistanceToNearestSurface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceToNearestSurface;
	static C(Other: UObject): MaterialExpressionDistanceToNearestSurface;
}

declare class MaterialExpressionDivide extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDivide;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDivide;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDivide;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDivide;
	static C(Other: UObject): MaterialExpressionDivide;
}

declare class MaterialExpressionDotProduct extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDotProduct;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDotProduct;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDotProduct;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDotProduct;
	static C(Other: UObject): MaterialExpressionDotProduct;
}

declare class MaterialExpressionDynamicParameter extends MaterialExpression { 
	ParamNames: string[];
	DefaultValue: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionDynamicParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDynamicParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionDynamicParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDynamicParameter;
	static C(Other: UObject): MaterialExpressionDynamicParameter;
}

declare class MaterialExpressionEyeAdaptation extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionEyeAdaptation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionEyeAdaptation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionEyeAdaptation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionEyeAdaptation;
	static C(Other: UObject): MaterialExpressionEyeAdaptation;
}

declare class MaterialExpressionFeatureLevelSwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFeatureLevelSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFeatureLevelSwitch;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFeatureLevelSwitch;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFeatureLevelSwitch;
	static C(Other: UObject): MaterialExpressionFeatureLevelSwitch;
}

declare class MaterialExpressionFloor extends MaterialExpression { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFloor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFloor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFloor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFloor;
	static C(Other: UObject): MaterialExpressionFloor;
}

declare class MaterialExpressionFmod extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFmod;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFmod;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFmod;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFmod;
	static C(Other: UObject): MaterialExpressionFmod;
}

declare class MaterialExpressionFontSample extends MaterialExpression { 
	Font: Font;
	FontTexturePage: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFontSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFontSample;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFontSample;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFontSample;
	static C(Other: UObject): MaterialExpressionFontSample;
}

declare class MaterialExpressionFontSampleParameter extends MaterialExpressionFontSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFontSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFontSampleParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFontSampleParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFontSampleParameter;
	static C(Other: UObject): MaterialExpressionFontSampleParameter;
}

declare class MaterialExpressionFrac extends MaterialExpression { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFrac;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFrac;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFrac;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFrac;
	static C(Other: UObject): MaterialExpressionFrac;
}

declare class MaterialExpressionFresnel extends MaterialExpression { 
	ExponentIn: ExpressionInput;
	Exponent: number;
	BaseReflectFractionIn: ExpressionInput;
	BaseReflectFraction: number;
	Normal: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFresnel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFresnel;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFresnel;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFresnel;
	static C(Other: UObject): MaterialExpressionFresnel;
}

declare type EFunctionInputType = 'FunctionInput_Scalar' | 'FunctionInput_Vector2' | 'FunctionInput_Vector3' | 'FunctionInput_Vector4' | 'FunctionInput_Texture2D' | 'FunctionInput_TextureCube' | 'FunctionInput_StaticBool' | 'FunctionInput_MaterialAttributes';
declare var EFunctionInputType : { FunctionInput_Scalar:'FunctionInput_Scalar',FunctionInput_Vector2:'FunctionInput_Vector2',FunctionInput_Vector3:'FunctionInput_Vector3',FunctionInput_Vector4:'FunctionInput_Vector4',FunctionInput_Texture2D:'FunctionInput_Texture2D',FunctionInput_TextureCube:'FunctionInput_TextureCube',FunctionInput_StaticBool:'FunctionInput_StaticBool',FunctionInput_MaterialAttributes:'FunctionInput_MaterialAttributes', };
declare class MaterialExpressionFunctionInput extends MaterialExpression { 
	Preview: ExpressionInput;
	InputName: string;
	Description: string;
	Id: Guid;
	InputType: EFunctionInputType;
	PreviewValue: Vector4;
	bUsePreviewValueAsDefault: boolean;
	SortPriority: number;
	bCompilingFunctionPreview: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFunctionInput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFunctionInput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFunctionInput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFunctionInput;
	static C(Other: UObject): MaterialExpressionFunctionInput;
}

declare class MaterialExpressionFunctionOutput extends MaterialExpression { 
	OutputName: string;
	Description: string;
	SortPriority: number;
	A: ExpressionInput;
	bLastPreviewed: boolean;
	Id: Guid;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionFunctionOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFunctionOutput;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionFunctionOutput;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFunctionOutput;
	static C(Other: UObject): MaterialExpressionFunctionOutput;
}

declare class MaterialExpressionGetMaterialAttributes extends MaterialExpression { 
	MaterialAttributes: MaterialAttributesInput;
	AttributeGetTypes: Guid[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionGetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionGetMaterialAttributes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionGetMaterialAttributes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionGetMaterialAttributes;
	static C(Other: UObject): MaterialExpressionGetMaterialAttributes;
}

declare class MaterialExpressionGIReplace extends MaterialExpression { 
	Default: ExpressionInput;
	StaticIndirect: ExpressionInput;
	DynamicIndirect: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionGIReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionGIReplace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionGIReplace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionGIReplace;
	static C(Other: UObject): MaterialExpressionGIReplace;
}

declare class MaterialExpressionIf extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	AGreaterThanB: ExpressionInput;
	AEqualsB: ExpressionInput;
	ALessThanB: ExpressionInput;
	EqualsThreshold: number;
	ConstB: number;
	ConstAEqualsB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionIf;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionIf;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionIf;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionIf;
	static C(Other: UObject): MaterialExpressionIf;
}

declare class MaterialExpressionLightmapUVs extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLightmapUVs;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightmapUVs;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLightmapUVs;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightmapUVs;
	static C(Other: UObject): MaterialExpressionLightmapUVs;
}

declare class MaterialExpressionLightmassReplace extends MaterialExpression { 
	Realtime: ExpressionInput;
	Lightmass: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLightmassReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightmassReplace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLightmassReplace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightmassReplace;
	static C(Other: UObject): MaterialExpressionLightmassReplace;
}

declare class MaterialExpressionLightVector extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLightVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightVector;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLightVector;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightVector;
	static C(Other: UObject): MaterialExpressionLightVector;
}

declare class MaterialExpressionLinearInterpolate extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Alpha: ExpressionInput;
	ConstA: number;
	ConstB: number;
	ConstAlpha: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLinearInterpolate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLinearInterpolate;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLinearInterpolate;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLinearInterpolate;
	static C(Other: UObject): MaterialExpressionLinearInterpolate;
}

declare class MaterialExpressionLogarithm2 extends MaterialExpression { 
	X: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionLogarithm2;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLogarithm2;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionLogarithm2;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLogarithm2;
	static C(Other: UObject): MaterialExpressionLogarithm2;
}

declare class MaterialExpressionMakeMaterialAttributes extends MaterialExpression { 
	BaseColor: ExpressionInput;
	Metallic: ExpressionInput;
	Specular: ExpressionInput;
	Roughness: ExpressionInput;
	EmissiveColor: ExpressionInput;
	Opacity: ExpressionInput;
	OpacityMask: ExpressionInput;
	Normal: ExpressionInput;
	WorldPositionOffset: ExpressionInput;
	WorldDisplacement: ExpressionInput;
	TessellationMultiplier: ExpressionInput;
	SubsurfaceColor: ExpressionInput;
	ClearCoat: ExpressionInput;
	ClearCoatRoughness: ExpressionInput;
	AmbientOcclusion: ExpressionInput;
	Refraction: ExpressionInput;
	CustomizedUVs: ExpressionInput;
	PixelDepthOffset: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionMakeMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMakeMaterialAttributes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionMakeMaterialAttributes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMakeMaterialAttributes;
	static C(Other: UObject): MaterialExpressionMakeMaterialAttributes;
}

declare class FunctionExpressionInput { 
	ExpressionInput: MaterialExpressionFunctionInput;
	ExpressionInputId: Guid;
	Input: ExpressionInput;
	clone() : FunctionExpressionInput;
	static C(Other: UObject): FunctionExpressionInput;
}

declare class FunctionExpressionOutput { 
	ExpressionOutput: MaterialExpressionFunctionOutput;
	ExpressionOutputId: Guid;
	Output: ExpressionOutput;
	clone() : FunctionExpressionOutput;
	static C(Other: UObject): FunctionExpressionOutput;
}

declare class MaterialExpressionMaterialFunctionCall extends MaterialExpression { 
	MaterialFunction: MaterialFunction;
	FunctionInputs: FunctionExpressionInput[];
	FunctionOutputs: FunctionExpressionOutput[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionMaterialFunctionCall;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialFunctionCall;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionMaterialFunctionCall;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialFunctionCall;
	static C(Other: UObject): MaterialExpressionMaterialFunctionCall;
}

declare class MaterialExpressionMaterialProxyReplace extends MaterialExpression { 
	Realtime: ExpressionInput;
	MaterialProxy: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionMaterialProxyReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialProxyReplace;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionMaterialProxyReplace;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialProxyReplace;
	static C(Other: UObject): MaterialExpressionMaterialProxyReplace;
}

declare class MaterialExpressionMax extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionMax;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMax;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionMax;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMax;
	static C(Other: UObject): MaterialExpressionMax;
}

declare class MaterialExpressionMin extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionMin;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMin;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionMin;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMin;
	static C(Other: UObject): MaterialExpressionMin;
}

declare class MaterialExpressionMultiply extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionMultiply;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMultiply;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionMultiply;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMultiply;
	static C(Other: UObject): MaterialExpressionMultiply;
}

declare type ENoiseFunction = 'NOISEFUNCTION_SimplexTex' | 'NOISEFUNCTION_GradientTex' | 'NOISEFUNCTION_GradientTex3D' | 'NOISEFUNCTION_GradientALU' | 'NOISEFUNCTION_ValueALU' | 'NOISEFUNCTION_VoronoiALU';
declare var ENoiseFunction : { NOISEFUNCTION_SimplexTex:'NOISEFUNCTION_SimplexTex',NOISEFUNCTION_GradientTex:'NOISEFUNCTION_GradientTex',NOISEFUNCTION_GradientTex3D:'NOISEFUNCTION_GradientTex3D',NOISEFUNCTION_GradientALU:'NOISEFUNCTION_GradientALU',NOISEFUNCTION_ValueALU:'NOISEFUNCTION_ValueALU',NOISEFUNCTION_VoronoiALU:'NOISEFUNCTION_VoronoiALU', };
declare class MaterialExpressionNoise extends MaterialExpression { 
	Position: ExpressionInput;
	FilterWidth: ExpressionInput;
	Scale: number;
	Quality: number;
	NoiseFunction: ENoiseFunction;
	bTurbulence: boolean;
	Levels: number;
	OutputMin: number;
	OutputMax: number;
	LevelScale: number;
	bTiling: boolean;
	RepeatSize: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNoise;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionNoise;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNoise;
	static C(Other: UObject): MaterialExpressionNoise;
}

declare class MaterialExpressionNormalize extends MaterialExpression { 
	VectorInput: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionNormalize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNormalize;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionNormalize;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNormalize;
	static C(Other: UObject): MaterialExpressionNormalize;
}

declare class MaterialExpressionObjectBounds extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionObjectBounds;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectBounds;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionObjectBounds;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectBounds;
	static C(Other: UObject): MaterialExpressionObjectBounds;
}

declare class MaterialExpressionObjectOrientation extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionObjectOrientation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectOrientation;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionObjectOrientation;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectOrientation;
	static C(Other: UObject): MaterialExpressionObjectOrientation;
}

declare class MaterialExpressionObjectPositionWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionObjectPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectPositionWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionObjectPositionWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectPositionWS;
	static C(Other: UObject): MaterialExpressionObjectPositionWS;
}

declare class MaterialExpressionObjectRadius extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionObjectRadius;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectRadius;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionObjectRadius;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectRadius;
	static C(Other: UObject): MaterialExpressionObjectRadius;
}

declare class MaterialExpressionOneMinus extends MaterialExpression { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionOneMinus;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionOneMinus;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionOneMinus;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionOneMinus;
	static C(Other: UObject): MaterialExpressionOneMinus;
}

declare class MaterialExpressionPanner extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Time: ExpressionInput;
	Speed: ExpressionInput;
	SpeedX: number;
	SpeedY: number;
	ConstCoordinate: any;
	bFractionalPart: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPanner;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPanner;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPanner;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPanner;
	static C(Other: UObject): MaterialExpressionPanner;
}

declare class MaterialExpressionParameter extends MaterialExpression { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParameter;
	static C(Other: UObject): MaterialExpressionParameter;
}

declare class MaterialExpressionScalarParameter extends MaterialExpressionParameter { 
	DefaultValue: number;
	SliderMin: number;
	SliderMax: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionScalarParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScalarParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionScalarParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScalarParameter;
	static C(Other: UObject): MaterialExpressionScalarParameter;
}

declare class MaterialExpressionStaticBoolParameter extends MaterialExpressionParameter { 
	DefaultValue: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionStaticBoolParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBoolParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionStaticBoolParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBoolParameter;
	static C(Other: UObject): MaterialExpressionStaticBoolParameter;
}

declare class MaterialExpressionStaticSwitchParameter extends MaterialExpressionStaticBoolParameter { 
	A: ExpressionInput;
	B: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionStaticSwitchParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitchParameter;
	static C(Other: UObject): MaterialExpressionStaticSwitchParameter;
}

declare class MaterialExpressionStaticComponentMaskParameter extends MaterialExpressionParameter { 
	Input: ExpressionInput;
	DefaultR: boolean;
	DefaultG: boolean;
	DefaultB: boolean;
	DefaultA: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionStaticComponentMaskParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticComponentMaskParameter;
	static C(Other: UObject): MaterialExpressionStaticComponentMaskParameter;
}

declare class MaterialExpressionVectorParameter extends MaterialExpressionParameter { 
	DefaultValue: LinearColor;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionVectorParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionVectorParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorParameter;
	static C(Other: UObject): MaterialExpressionVectorParameter;
}

declare class MaterialExpressionParticleColor extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleColor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleColor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleColor;
	static C(Other: UObject): MaterialExpressionParticleColor;
}

declare class MaterialExpressionParticleDirection extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleDirection;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleDirection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleDirection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleDirection;
	static C(Other: UObject): MaterialExpressionParticleDirection;
}

declare class MaterialExpressionParticleMacroUV extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleMacroUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleMacroUV;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleMacroUV;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleMacroUV;
	static C(Other: UObject): MaterialExpressionParticleMacroUV;
}

declare class MaterialExpressionParticleMotionBlurFade extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleMotionBlurFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleMotionBlurFade;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleMotionBlurFade;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleMotionBlurFade;
	static C(Other: UObject): MaterialExpressionParticleMotionBlurFade;
}

declare class MaterialExpressionParticlePositionWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticlePositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticlePositionWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticlePositionWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticlePositionWS;
	static C(Other: UObject): MaterialExpressionParticlePositionWS;
}

declare class MaterialExpressionParticleRadius extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleRadius;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRadius;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleRadius;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRadius;
	static C(Other: UObject): MaterialExpressionParticleRadius;
}

declare class MaterialExpressionParticleRandom extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleRandom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRandom;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleRandom;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRandom;
	static C(Other: UObject): MaterialExpressionParticleRandom;
}

declare class MaterialExpressionParticleRelativeTime extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleRelativeTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRelativeTime;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleRelativeTime;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRelativeTime;
	static C(Other: UObject): MaterialExpressionParticleRelativeTime;
}

declare class MaterialExpressionParticleSize extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSize;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleSize;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSize;
	static C(Other: UObject): MaterialExpressionParticleSize;
}

declare class MaterialExpressionParticleSpeed extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleSpeed;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSpeed;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleSpeed;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSpeed;
	static C(Other: UObject): MaterialExpressionParticleSpeed;
}

declare class MaterialExpressionPerInstanceFadeAmount extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPerInstanceFadeAmount;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceFadeAmount;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPerInstanceFadeAmount;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceFadeAmount;
	static C(Other: UObject): MaterialExpressionPerInstanceFadeAmount;
}

declare class MaterialExpressionPerInstanceRandom extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPerInstanceRandom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceRandom;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPerInstanceRandom;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceRandom;
	static C(Other: UObject): MaterialExpressionPerInstanceRandom;
}

declare class MaterialExpressionPixelDepth extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPixelDepth;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPixelDepth;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPixelDepth;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPixelDepth;
	static C(Other: UObject): MaterialExpressionPixelDepth;
}

declare class MaterialExpressionPixelNormalWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPixelNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPixelNormalWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPixelNormalWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPixelNormalWS;
	static C(Other: UObject): MaterialExpressionPixelNormalWS;
}

declare class MaterialExpressionPower extends MaterialExpression { 
	Base: ExpressionInput;
	Exponent: ExpressionInput;
	ConstExponent: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPower;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPower;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPower;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPower;
	static C(Other: UObject): MaterialExpressionPower;
}

declare class MaterialExpressionPrecomputedAOMask extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPrecomputedAOMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPrecomputedAOMask;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPrecomputedAOMask;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPrecomputedAOMask;
	static C(Other: UObject): MaterialExpressionPrecomputedAOMask;
}

declare class MaterialExpressionPreSkinnedPosition extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionPreSkinnedPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedPosition;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionPreSkinnedPosition;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedPosition;
	static C(Other: UObject): MaterialExpressionPreSkinnedPosition;
}

declare class MaterialExpressionQualitySwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionQualitySwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionQualitySwitch;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionQualitySwitch;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionQualitySwitch;
	static C(Other: UObject): MaterialExpressionQualitySwitch;
}

declare class MaterialExpressionReflectionVectorWS extends MaterialExpression { 
	CustomWorldNormal: ExpressionInput;
	bNormalizeCustomWorldNormal: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionReflectionVectorWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionReflectionVectorWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionReflectionVectorWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionReflectionVectorWS;
	static C(Other: UObject): MaterialExpressionReflectionVectorWS;
}

declare class MaterialExpressionRotateAboutAxis extends MaterialExpression { 
	NormalizedRotationAxis: ExpressionInput;
	RotationAngle: ExpressionInput;
	PivotPoint: ExpressionInput;
	Position: ExpressionInput;
	Period: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionRotateAboutAxis;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRotateAboutAxis;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionRotateAboutAxis;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRotateAboutAxis;
	static C(Other: UObject): MaterialExpressionRotateAboutAxis;
}

declare class MaterialExpressionRotator extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Time: ExpressionInput;
	CenterX: number;
	CenterY: number;
	Speed: number;
	ConstCoordinate: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionRotator;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRotator;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionRotator;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRotator;
	static C(Other: UObject): MaterialExpressionRotator;
}

declare type EMaterialSceneAttributeInputMode = 'Coordinates' | 'OffsetFraction';
declare var EMaterialSceneAttributeInputMode : { Coordinates:'Coordinates',OffsetFraction:'OffsetFraction', };
declare class MaterialExpressionSceneColor extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	OffsetFraction: ExpressionInput;
	ConstInput: Vector2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSceneColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneColor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSceneColor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneColor;
	static C(Other: UObject): MaterialExpressionSceneColor;
}

declare class MaterialExpressionSceneDepth extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	Coordinates: ExpressionInput;
	ConstInput: Vector2D;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSceneDepth;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneDepth;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSceneDepth;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneDepth;
	static C(Other: UObject): MaterialExpressionSceneDepth;
}

declare class MaterialExpressionSceneTexelSize extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSceneTexelSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexelSize;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSceneTexelSize;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexelSize;
	static C(Other: UObject): MaterialExpressionSceneTexelSize;
}

declare type ESceneTextureId = 'PPI_SceneColor' | 'PPI_SceneDepth' | 'PPI_DiffuseColor' | 'PPI_SpecularColor' | 'PPI_SubsurfaceColor' | 'PPI_BaseColor' | 'PPI_Specular' | 'PPI_Metallic' | 'PPI_WorldNormal' | 'PPI_SeparateTranslucency' | 'PPI_Opacity' | 'PPI_Roughness' | 'PPI_MaterialAO' | 'PPI_CustomDepth' | 'PPI_PostProcessInput0' | 'PPI_PostProcessInput1' | 'PPI_PostProcessInput2' | 'PPI_PostProcessInput3' | 'PPI_PostProcessInput4' | 'PPI_PostProcessInput5' | 'PPI_PostProcessInput6' | 'PPI_DecalMask' | 'PPI_ShadingModel' | 'PPI_AmbientOcclusion' | 'PPI_CustomStencil' | 'PPI_StoredBaseColor' | 'PPI_StoredSpecular';
declare var ESceneTextureId : { PPI_SceneColor:'PPI_SceneColor',PPI_SceneDepth:'PPI_SceneDepth',PPI_DiffuseColor:'PPI_DiffuseColor',PPI_SpecularColor:'PPI_SpecularColor',PPI_SubsurfaceColor:'PPI_SubsurfaceColor',PPI_BaseColor:'PPI_BaseColor',PPI_Specular:'PPI_Specular',PPI_Metallic:'PPI_Metallic',PPI_WorldNormal:'PPI_WorldNormal',PPI_SeparateTranslucency:'PPI_SeparateTranslucency',PPI_Opacity:'PPI_Opacity',PPI_Roughness:'PPI_Roughness',PPI_MaterialAO:'PPI_MaterialAO',PPI_CustomDepth:'PPI_CustomDepth',PPI_PostProcessInput0:'PPI_PostProcessInput0',PPI_PostProcessInput1:'PPI_PostProcessInput1',PPI_PostProcessInput2:'PPI_PostProcessInput2',PPI_PostProcessInput3:'PPI_PostProcessInput3',PPI_PostProcessInput4:'PPI_PostProcessInput4',PPI_PostProcessInput5:'PPI_PostProcessInput5',PPI_PostProcessInput6:'PPI_PostProcessInput6',PPI_DecalMask:'PPI_DecalMask',PPI_ShadingModel:'PPI_ShadingModel',PPI_AmbientOcclusion:'PPI_AmbientOcclusion',PPI_CustomStencil:'PPI_CustomStencil',PPI_StoredBaseColor:'PPI_StoredBaseColor',PPI_StoredSpecular:'PPI_StoredSpecular', };
declare class MaterialExpressionSceneTexture extends MaterialExpression { 
	Coordinates: ExpressionInput;
	SceneTextureId: ESceneTextureId;
	bClampUVs: boolean;
	bFiltered: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSceneTexture;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexture;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSceneTexture;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexture;
	static C(Other: UObject): MaterialExpressionSceneTexture;
}

declare type EMaterialExpressionScreenPositionMapping = 'MESP_SceneTextureUV' | 'MESP_ViewportUV';
declare var EMaterialExpressionScreenPositionMapping : { MESP_SceneTextureUV:'MESP_SceneTextureUV',MESP_ViewportUV:'MESP_ViewportUV', };
declare class MaterialExpressionScreenPosition extends MaterialExpression { 
	Mapping: EMaterialExpressionScreenPositionMapping;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionScreenPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScreenPosition;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionScreenPosition;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScreenPosition;
	static C(Other: UObject): MaterialExpressionScreenPosition;
}

declare class MaterialExpressionSetMaterialAttributes extends MaterialExpression { 
	Inputs: ExpressionInput[];
	AttributeSetTypes: Guid[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSetMaterialAttributes;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSetMaterialAttributes;
	static C(Other: UObject): MaterialExpressionSetMaterialAttributes;
}

declare class MaterialExpressionSine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSine;
	static C(Other: UObject): MaterialExpressionSine;
}

declare type ESpeedTreeGeometryType = 'STG_Branch' | 'STG_Frond' | 'STG_Leaf' | 'STG_FacingLeaf' | 'STG_Billboard';
declare var ESpeedTreeGeometryType : { STG_Branch:'STG_Branch',STG_Frond:'STG_Frond',STG_Leaf:'STG_Leaf',STG_FacingLeaf:'STG_FacingLeaf',STG_Billboard:'STG_Billboard', };
declare type ESpeedTreeWindType = 'STW_None' | 'STW_Fastest' | 'STW_Fast' | 'STW_Better' | 'STW_Best' | 'STW_Palm' | 'STW_BestPlus';
declare var ESpeedTreeWindType : { STW_None:'STW_None',STW_Fastest:'STW_Fastest',STW_Fast:'STW_Fast',STW_Better:'STW_Better',STW_Best:'STW_Best',STW_Palm:'STW_Palm',STW_BestPlus:'STW_BestPlus', };
declare type ESpeedTreeLODType = 'STLOD_Pop' | 'STLOD_Smooth';
declare var ESpeedTreeLODType : { STLOD_Pop:'STLOD_Pop',STLOD_Smooth:'STLOD_Smooth', };
declare class MaterialExpressionSpeedTree extends MaterialExpression { 
	GeometryType: ESpeedTreeGeometryType;
	WindType: ESpeedTreeWindType;
	LODType: ESpeedTreeLODType;
	BillboardThreshold: number;
	bAccurateWindVelocities: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSpeedTree;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSpeedTree;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSpeedTree;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSpeedTree;
	static C(Other: UObject): MaterialExpressionSpeedTree;
}

declare class MaterialExpressionSphereMask extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Radius: ExpressionInput;
	Hardness: ExpressionInput;
	AttenuationRadius: number;
	HardnessPercent: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSphereMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphereMask;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSphereMask;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphereMask;
	static C(Other: UObject): MaterialExpressionSphereMask;
}

declare class MaterialExpressionSphericalParticleOpacity extends MaterialExpression { 
	Density: ExpressionInput;
	ConstantDensity: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSphericalParticleOpacity;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphericalParticleOpacity;
	static C(Other: UObject): MaterialExpressionSphericalParticleOpacity;
}

declare class MaterialExpressionSquareRoot extends MaterialExpression { 
	Input: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSquareRoot;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSquareRoot;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSquareRoot;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSquareRoot;
	static C(Other: UObject): MaterialExpressionSquareRoot;
}

declare class MaterialExpressionStaticBool extends MaterialExpression { 
	Value: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionStaticBool;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBool;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionStaticBool;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBool;
	static C(Other: UObject): MaterialExpressionStaticBool;
}

declare class MaterialExpressionStaticSwitch extends MaterialExpression { 
	DefaultValue: boolean;
	A: ExpressionInput;
	B: ExpressionInput;
	Value: ExpressionInput;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionStaticSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitch;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionStaticSwitch;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitch;
	static C(Other: UObject): MaterialExpressionStaticSwitch;
}

declare class MaterialExpressionSubtract extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionSubtract;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSubtract;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionSubtract;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSubtract;
	static C(Other: UObject): MaterialExpressionSubtract;
}

declare type EMaterialSamplerType = 'SAMPLERTYPE_Color' | 'SAMPLERTYPE_Grayscale' | 'SAMPLERTYPE_Alpha' | 'SAMPLERTYPE_Normal' | 'SAMPLERTYPE_Masks' | 'SAMPLERTYPE_DistanceFieldFont' | 'SAMPLERTYPE_LinearColor' | 'SAMPLERTYPE_LinearGrayscale';
declare var EMaterialSamplerType : { SAMPLERTYPE_Color:'SAMPLERTYPE_Color',SAMPLERTYPE_Grayscale:'SAMPLERTYPE_Grayscale',SAMPLERTYPE_Alpha:'SAMPLERTYPE_Alpha',SAMPLERTYPE_Normal:'SAMPLERTYPE_Normal',SAMPLERTYPE_Masks:'SAMPLERTYPE_Masks',SAMPLERTYPE_DistanceFieldFont:'SAMPLERTYPE_DistanceFieldFont',SAMPLERTYPE_LinearColor:'SAMPLERTYPE_LinearColor',SAMPLERTYPE_LinearGrayscale:'SAMPLERTYPE_LinearGrayscale', };
declare class MaterialExpressionTextureBase extends MaterialExpression { 
	Texture: Texture;
	SamplerType: EMaterialSamplerType;
	IsDefaultMeshpaintTexture: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureBase;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureBase;
	static C(Other: UObject): MaterialExpressionTextureBase;
}

declare class MaterialExpressionTextureObject extends MaterialExpressionTextureBase { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureObject;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObject;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureObject;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObject;
	static C(Other: UObject): MaterialExpressionTextureObject;
}

declare type ETextureMipValueMode = 'TMVM_None' | 'TMVM_MipLevel' | 'TMVM_MipBias' | 'TMVM_Derivative';
declare var ETextureMipValueMode : { TMVM_None:'TMVM_None',TMVM_MipLevel:'TMVM_MipLevel',TMVM_MipBias:'TMVM_MipBias',TMVM_Derivative:'TMVM_Derivative', };
declare type ESamplerSourceMode = 'SSM_FromTextureAsset' | 'SSM_Wrap_WorldGroupSettings' | 'SSM_Clamp_WorldGroupSettings';
declare var ESamplerSourceMode : { SSM_FromTextureAsset:'SSM_FromTextureAsset',SSM_Wrap_WorldGroupSettings:'SSM_Wrap_WorldGroupSettings',SSM_Clamp_WorldGroupSettings:'SSM_Clamp_WorldGroupSettings', };
declare class MaterialExpressionTextureSample extends MaterialExpressionTextureBase { 
	Coordinates: ExpressionInput;
	TextureObject: ExpressionInput;
	MipValue: ExpressionInput;
	CoordinatesDX: ExpressionInput;
	CoordinatesDY: ExpressionInput;
	MipValueMode: ETextureMipValueMode;
	SamplerSource: ESamplerSourceMode;
	ConstCoordinate: any;
	ConstMipValue: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSample;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureSample;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSample;
	static C(Other: UObject): MaterialExpressionTextureSample;
}

declare class MaterialExpressionParticleSubUV extends MaterialExpressionTextureSample { 
	bBlend: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionParticleSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSubUV;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionParticleSubUV;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSubUV;
	static C(Other: UObject): MaterialExpressionParticleSubUV;
}

declare class MaterialExpressionTextureSampleParameter extends MaterialExpressionTextureSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter;
	static C(Other: UObject): MaterialExpressionTextureSampleParameter;
}

declare class MaterialExpressionTextureObjectParameter extends MaterialExpressionTextureSampleParameter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureObjectParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObjectParameter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureObjectParameter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObjectParameter;
	static C(Other: UObject): MaterialExpressionTextureObjectParameter;
}

declare class MaterialExpressionTextureSampleParameter2D extends MaterialExpressionTextureSampleParameter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter2D;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter2D;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter2D;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter2D;
	static C(Other: UObject): MaterialExpressionTextureSampleParameter2D;
}

declare type ETextureColorChannel = 'TCC_Red' | 'TCC_Green' | 'TCC_Blue' | 'TCC_Alpha';
declare var ETextureColorChannel : { TCC_Red:'TCC_Red',TCC_Green:'TCC_Green',TCC_Blue:'TCC_Blue',TCC_Alpha:'TCC_Alpha', };
declare class MaterialExpressionAntialiasedTextureMask extends MaterialExpressionTextureSampleParameter2D { 
	Threshold: number;
	Channel: ETextureColorChannel;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionAntialiasedTextureMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAntialiasedTextureMask;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionAntialiasedTextureMask;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAntialiasedTextureMask;
	static C(Other: UObject): MaterialExpressionAntialiasedTextureMask;
}

declare class MaterialExpressionTextureSampleParameterSubUV extends MaterialExpressionTextureSampleParameter2D { 
	bBlend: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterSubUV;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterSubUV;
	static C(Other: UObject): MaterialExpressionTextureSampleParameterSubUV;
}

declare class MaterialExpressionTextureSampleParameterCube extends MaterialExpressionTextureSampleParameter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterCube;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterCube;
	static C(Other: UObject): MaterialExpressionTextureSampleParameterCube;
}

declare class MaterialExpressionTextureCoordinate extends MaterialExpression { 
	CoordinateIndex: number;
	UTiling: number;
	VTiling: number;
	UnMirrorU: boolean;
	UnMirrorV: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureCoordinate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureCoordinate;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureCoordinate;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureCoordinate;
	static C(Other: UObject): MaterialExpressionTextureCoordinate;
}

declare type EMaterialExposedTextureProperty = 'TMTM_TextureSize' | 'TMTM_TexelSize';
declare var EMaterialExposedTextureProperty : { TMTM_TextureSize:'TMTM_TextureSize',TMTM_TexelSize:'TMTM_TexelSize', };
declare class MaterialExpressionTextureProperty extends MaterialExpression { 
	TextureObject: ExpressionInput;
	Property: EMaterialExposedTextureProperty;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTextureProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureProperty;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTextureProperty;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureProperty;
	static C(Other: UObject): MaterialExpressionTextureProperty;
}

declare class MaterialExpressionTime extends MaterialExpression { 
	bIgnorePause: boolean;
	bOverride_Period: boolean;
	Period: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTime;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTime;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTime;
	static C(Other: UObject): MaterialExpressionTime;
}

declare type EMaterialVectorCoordTransformSource = 'TRANSFORMSOURCE_Tangent' | 'TRANSFORMSOURCE_Local' | 'TRANSFORMSOURCE_World' | 'TRANSFORMSOURCE_View' | 'TRANSFORMSOURCE_Camera' | 'TRANSFORMSOURCE_ParticleWorld';
declare var EMaterialVectorCoordTransformSource : { TRANSFORMSOURCE_Tangent:'TRANSFORMSOURCE_Tangent',TRANSFORMSOURCE_Local:'TRANSFORMSOURCE_Local',TRANSFORMSOURCE_World:'TRANSFORMSOURCE_World',TRANSFORMSOURCE_View:'TRANSFORMSOURCE_View',TRANSFORMSOURCE_Camera:'TRANSFORMSOURCE_Camera',TRANSFORMSOURCE_ParticleWorld:'TRANSFORMSOURCE_ParticleWorld', };
declare type EMaterialVectorCoordTransform = 'TRANSFORM_Tangent' | 'TRANSFORM_Local' | 'TRANSFORM_World' | 'TRANSFORM_View' | 'TRANSFORM_Camera' | 'TRANSFORM_ParticleWorld';
declare var EMaterialVectorCoordTransform : { TRANSFORM_Tangent:'TRANSFORM_Tangent',TRANSFORM_Local:'TRANSFORM_Local',TRANSFORM_World:'TRANSFORM_World',TRANSFORM_View:'TRANSFORM_View',TRANSFORM_Camera:'TRANSFORM_Camera',TRANSFORM_ParticleWorld:'TRANSFORM_ParticleWorld', };
declare class MaterialExpressionTransform extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialVectorCoordTransformSource;
	TransformType: EMaterialVectorCoordTransform;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTransform;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransform;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTransform;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransform;
	static C(Other: UObject): MaterialExpressionTransform;
}

declare type EMaterialPositionTransformSource = 'TRANSFORMPOSSOURCE_Local' | 'TRANSFORMPOSSOURCE_World' | 'TRANSFORMPOSSOURCE_TranslatedWorld' | 'TRANSFORMPOSSOURCE_View' | 'TRANSFORMPOSSOURCE_Camera' | 'TRANSFORMPOSSOURCE_Particle';
declare var EMaterialPositionTransformSource : { TRANSFORMPOSSOURCE_Local:'TRANSFORMPOSSOURCE_Local',TRANSFORMPOSSOURCE_World:'TRANSFORMPOSSOURCE_World',TRANSFORMPOSSOURCE_TranslatedWorld:'TRANSFORMPOSSOURCE_TranslatedWorld',TRANSFORMPOSSOURCE_View:'TRANSFORMPOSSOURCE_View',TRANSFORMPOSSOURCE_Camera:'TRANSFORMPOSSOURCE_Camera',TRANSFORMPOSSOURCE_Particle:'TRANSFORMPOSSOURCE_Particle', };
declare class MaterialExpressionTransformPosition extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialPositionTransformSource;
	TransformType: EMaterialPositionTransformSource;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTransformPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransformPosition;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTransformPosition;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransformPosition;
	static C(Other: UObject): MaterialExpressionTransformPosition;
}

declare class MaterialExpressionTwoSidedSign extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionTwoSidedSign;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTwoSidedSign;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionTwoSidedSign;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTwoSidedSign;
	static C(Other: UObject): MaterialExpressionTwoSidedSign;
}

declare type EVectorNoiseFunction = 'VNF_CellnoiseALU' | 'VNF_VectorALU' | 'VNF_GradientALU' | 'VNF_CurlALU' | 'VNF_VoronoiALU';
declare var EVectorNoiseFunction : { VNF_CellnoiseALU:'VNF_CellnoiseALU',VNF_VectorALU:'VNF_VectorALU',VNF_GradientALU:'VNF_GradientALU',VNF_CurlALU:'VNF_CurlALU',VNF_VoronoiALU:'VNF_VoronoiALU', };
declare class MaterialExpressionVectorNoise extends MaterialExpression { 
	Position: ExpressionInput;
	NoiseFunction: EVectorNoiseFunction;
	Quality: number;
	bTiling: boolean;
	TileSize: any;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionVectorNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorNoise;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionVectorNoise;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorNoise;
	static C(Other: UObject): MaterialExpressionVectorNoise;
}

declare class MaterialExpressionVertexColor extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionVertexColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexColor;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionVertexColor;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexColor;
	static C(Other: UObject): MaterialExpressionVertexColor;
}

declare class MaterialExpressionVertexNormalWS extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionVertexNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexNormalWS;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionVertexNormalWS;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexNormalWS;
	static C(Other: UObject): MaterialExpressionVertexNormalWS;
}

declare type EMaterialExposedViewProperty = 'MEVP_BufferSize' | 'MEVP_FieldOfView' | 'MEVP_TanHalfFieldOfView' | 'MEVP_ViewSize' | 'MEVP_WorldSpaceViewPosition' | 'MEVP_WorldSpaceCameraPosition';
declare var EMaterialExposedViewProperty : { MEVP_BufferSize:'MEVP_BufferSize',MEVP_FieldOfView:'MEVP_FieldOfView',MEVP_TanHalfFieldOfView:'MEVP_TanHalfFieldOfView',MEVP_ViewSize:'MEVP_ViewSize',MEVP_WorldSpaceViewPosition:'MEVP_WorldSpaceViewPosition',MEVP_WorldSpaceCameraPosition:'MEVP_WorldSpaceCameraPosition', };
declare class MaterialExpressionViewProperty extends MaterialExpression { 
	Property: EMaterialExposedViewProperty;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionViewProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewProperty;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionViewProperty;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewProperty;
	static C(Other: UObject): MaterialExpressionViewProperty;
}

declare class MaterialExpressionViewSize extends MaterialExpression { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionViewSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewSize;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionViewSize;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewSize;
	static C(Other: UObject): MaterialExpressionViewSize;
}

declare type EWorldPositionIncludedOffsets = 'WPT_Default' | 'WPT_ExcludeAllShaderOffsets' | 'WPT_CameraRelative' | 'WPT_CameraRelativeNoOffsets';
declare var EWorldPositionIncludedOffsets : { WPT_Default:'WPT_Default',WPT_ExcludeAllShaderOffsets:'WPT_ExcludeAllShaderOffsets',WPT_CameraRelative:'WPT_CameraRelative',WPT_CameraRelativeNoOffsets:'WPT_CameraRelativeNoOffsets', };
declare class MaterialExpressionWorldPosition extends MaterialExpression { 
	WorldPositionShaderOffset: EWorldPositionIncludedOffsets;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MaterialExpressionWorldPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionWorldPosition;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MaterialExpressionWorldPosition;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionWorldPosition;
	static C(Other: UObject): MaterialExpressionWorldPosition;
}

declare class MatineeInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): MatineeInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): MatineeInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeInterface;
	static C(Other: UObject): MatineeInterface;
}

declare class NavArea_Default extends NavArea { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavArea_Default;
	static Find(Outer: UObject, ResourceName: string): NavArea_Default;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavArea_Default;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Default;
	static C(Other: UObject): NavArea_Default;
}

declare class NavArea_LowHeight extends NavArea { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavArea_LowHeight;
	static Find(Outer: UObject, ResourceName: string): NavArea_LowHeight;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavArea_LowHeight;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_LowHeight;
	static C(Other: UObject): NavArea_LowHeight;
}

declare class NavArea_Null extends NavArea { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavArea_Null;
	static Find(Outer: UObject, ResourceName: string): NavArea_Null;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavArea_Null;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Null;
	static C(Other: UObject): NavArea_Null;
}

declare class NavArea_Obstacle extends NavArea { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavArea_Obstacle;
	static Find(Outer: UObject, ResourceName: string): NavArea_Obstacle;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavArea_Obstacle;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Obstacle;
	static C(Other: UObject): NavArea_Obstacle;
}

declare class NavAreaMeta extends NavArea { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavAreaMeta;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavAreaMeta;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta;
	static C(Other: UObject): NavAreaMeta;
}

declare class NavAreaMeta_SwitchByAgent extends NavAreaMeta { 
	Agent0Area: UnrealEngineClass;
	Agent1Area: UnrealEngineClass;
	Agent2Area: UnrealEngineClass;
	Agent3Area: UnrealEngineClass;
	Agent4Area: UnrealEngineClass;
	Agent5Area: UnrealEngineClass;
	Agent6Area: UnrealEngineClass;
	Agent7Area: UnrealEngineClass;
	Agent8Area: UnrealEngineClass;
	Agent9Area: UnrealEngineClass;
	Agent10Area: UnrealEngineClass;
	Agent11Area: UnrealEngineClass;
	Agent12Area: UnrealEngineClass;
	Agent13Area: UnrealEngineClass;
	Agent14Area: UnrealEngineClass;
	Agent15Area: UnrealEngineClass;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavAreaMeta_SwitchByAgent;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta_SwitchByAgent;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavAreaMeta_SwitchByAgent;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta_SwitchByAgent;
	static C(Other: UObject): NavAreaMeta_SwitchByAgent;
}

declare class RecastNavMeshDataChunk extends NavigationDataChunk { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RecastNavMeshDataChunk;
	static Find(Outer: UObject, ResourceName: string): RecastNavMeshDataChunk;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RecastNavMeshDataChunk;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMeshDataChunk;
	static C(Other: UObject): RecastNavMeshDataChunk;
}

declare class NavigationPathGenerator extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavigationPathGenerator;
	static Find(Outer: UObject, ResourceName: string): NavigationPathGenerator;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavigationPathGenerator;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPathGenerator;
	static C(Other: UObject): NavigationPathGenerator;
}

declare class RecastFilter_UseDefaultArea extends NavigationQueryFilter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): RecastFilter_UseDefaultArea;
	static Find(Outer: UObject, ResourceName: string): RecastFilter_UseDefaultArea;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): RecastFilter_UseDefaultArea;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastFilter_UseDefaultArea;
	static C(Other: UObject): RecastFilter_UseDefaultArea;
}

declare class NavLinkTrivial extends NavLinkDefinition { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavLinkTrivial;
	static Find(Outer: UObject, ResourceName: string): NavLinkTrivial;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavLinkTrivial;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkTrivial;
	static C(Other: UObject): NavLinkTrivial;
}

declare class NavNodeInterface extends Interface { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): NavNodeInterface;
	static Find(Outer: UObject, ResourceName: string): NavNodeInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): NavNodeInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavNodeInterface;
	static C(Other: UObject): NavNodeInterface;
}

declare class PackageMapClient extends PackageMap { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): PackageMapClient;
	static Find(Outer: UObject, ResourceName: string): PackageMapClient;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): PackageMapClient;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMapClient;
	static C(Other: UObject): PackageMapClient;
}

declare class DemoNetConnection extends NetConnection { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): DemoNetConnection;
	static Find(Outer: UObject, ResourceName: string): DemoNetConnection;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): DemoNetConnection;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoNetConnection;
	static C(Other: UObject): DemoNetConnection;
}

declare class ObjectLibrary extends UObject { 
	ObjectBaseClass: UnrealEngineClass;
	bHasBlueprintClasses: boolean;
	Objects: UObject[];
	WeakObjects: any[];
	bUseWeakReferences: boolean;
	bIsFullyLoaded: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ObjectLibrary;
	static Find(Outer: UObject, ResourceName: string): ObjectLibrary;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ObjectLibrary;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibrary;
	static C(Other: UObject): ObjectLibrary;
}

declare class ObjectReferencer extends UObject { 
	ReferencedObjects: UObject[];
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ObjectReferencer;
	static Find(Outer: UObject, ResourceName: string): ObjectReferencer;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ObjectReferencer;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectReferencer;
	static C(Other: UObject): ObjectReferencer;
}

declare class OnlineBlueprintCallProxyBase extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): OnlineBlueprintCallProxyBase;
	static Find(Outer: UObject, ResourceName: string): OnlineBlueprintCallProxyBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): OnlineBlueprintCallProxyBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBlueprintCallProxyBase;
	Activate(): void;
	static C(Other: UObject): OnlineBlueprintCallProxyBase;
}

declare class OnlineEngineInterface extends UObject { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): OnlineEngineInterface;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterface;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): OnlineEngineInterface;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterface;
	static C(Other: UObject): OnlineEngineInterface;
}

declare class ParticleSpriteEmitter extends ParticleEmitter { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleSpriteEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleSpriteEmitter;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleSpriteEmitter;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSpriteEmitter;
	static C(Other: UObject): ParticleSpriteEmitter;
}

declare class ParticleModuleOrientationBase extends ParticleModule { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleOrientationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleOrientationBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationBase;
	static C(Other: UObject): ParticleModuleOrientationBase;
}

declare type EParticleAxisLock = 'EPAL_NONE' | 'EPAL_X' | 'EPAL_Y' | 'EPAL_Z' | 'EPAL_NEGATIVE_X' | 'EPAL_NEGATIVE_Y' | 'EPAL_NEGATIVE_Z' | 'EPAL_ROTATE_X' | 'EPAL_ROTATE_Y' | 'EPAL_ROTATE_Z';
declare var EParticleAxisLock : { EPAL_NONE:'EPAL_NONE',EPAL_X:'EPAL_X',EPAL_Y:'EPAL_Y',EPAL_Z:'EPAL_Z',EPAL_NEGATIVE_X:'EPAL_NEGATIVE_X',EPAL_NEGATIVE_Y:'EPAL_NEGATIVE_Y',EPAL_NEGATIVE_Z:'EPAL_NEGATIVE_Z',EPAL_ROTATE_X:'EPAL_ROTATE_X',EPAL_ROTATE_Y:'EPAL_ROTATE_Y',EPAL_ROTATE_Z:'EPAL_ROTATE_Z', };
declare class ParticleModuleOrientationAxisLock extends ParticleModuleOrientationBase { 
	LockAxisFlags: EParticleAxisLock;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleOrientationAxisLock;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationAxisLock;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleOrientationAxisLock;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationAxisLock;
	static C(Other: UObject): ParticleModuleOrientationAxisLock;
}

declare class ParticleModuleAccelerationBase extends ParticleModule { 
	bAlwaysInWorldSpace: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAccelerationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAccelerationBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationBase;
	static C(Other: UObject): ParticleModuleAccelerationBase;
}

declare class ParticleModuleAcceleration extends ParticleModuleAccelerationBase { 
	Acceleration: RawDistributionVector;
	bApplyOwnerScale: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAcceleration;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAcceleration;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAcceleration;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAcceleration;
	static C(Other: UObject): ParticleModuleAcceleration;
}

declare class ParticleModuleAccelerationConstant extends ParticleModuleAccelerationBase { 
	Acceleration: Vector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAccelerationConstant;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationConstant;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAccelerationConstant;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationConstant;
	static C(Other: UObject): ParticleModuleAccelerationConstant;
}

declare class ParticleModuleAccelerationDrag extends ParticleModuleAccelerationBase { 
	DragCoefficient: DistributionFloat;
	DragCoefficientRaw: RawDistributionFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAccelerationDrag;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDrag;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAccelerationDrag;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDrag;
	static C(Other: UObject): ParticleModuleAccelerationDrag;
}

declare class ParticleModuleAccelerationDragScaleOverLife extends ParticleModuleAccelerationBase { 
	DragScale: DistributionFloat;
	DragScaleRaw: RawDistributionFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAccelerationDragScaleOverLife;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDragScaleOverLife;
	static C(Other: UObject): ParticleModuleAccelerationDragScaleOverLife;
}

declare class ParticleModuleAccelerationOverLifetime extends ParticleModuleAccelerationBase { 
	AccelOverLife: RawDistributionVector;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAccelerationOverLifetime;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationOverLifetime;
	static C(Other: UObject): ParticleModuleAccelerationOverLifetime;
}

declare class ParticleModuleAttractorBase extends ParticleModule { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAttractorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAttractorBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorBase;
	static C(Other: UObject): ParticleModuleAttractorBase;
}

declare class ParticleModuleAttractorLine extends ParticleModuleAttractorBase { 
	EndPoint0: Vector;
	EndPoint1: Vector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAttractorLine;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorLine;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAttractorLine;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorLine;
	static C(Other: UObject): ParticleModuleAttractorLine;
}

declare type EAttractorParticleSelectionMethod = 'EAPSM_Random' | 'EAPSM_Sequential';
declare var EAttractorParticleSelectionMethod : { EAPSM_Random:'EAPSM_Random',EAPSM_Sequential:'EAPSM_Sequential', };
declare class ParticleModuleAttractorParticle extends ParticleModuleAttractorBase { 
	EmitterName: string;
	Range: RawDistributionFloat;
	bStrengthByDistance: boolean;
	Strength: RawDistributionFloat;
	bAffectBaseVelocity: boolean;
	SelectionMethod: EAttractorParticleSelectionMethod;
	bRenewSource: boolean;
	bInheritSourceVel: boolean;
	LastSelIndex: number;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAttractorParticle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorParticle;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAttractorParticle;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorParticle;
	static C(Other: UObject): ParticleModuleAttractorParticle;
}

declare class ParticleModuleAttractorPoint extends ParticleModuleAttractorBase { 
	Position: RawDistributionVector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	StrengthByDistance: boolean;
	bAffectBaseVelocity: boolean;
	bOverrideVelocity: boolean;
	bUseWorldSpacePosition: boolean;
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAttractorPoint;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPoint;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAttractorPoint;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPoint;
	static C(Other: UObject): ParticleModuleAttractorPoint;
}

declare class ParticleModuleAttractorPointGravity extends ParticleModuleAttractorBase { 
	Position: Vector;
	Radius: number;
	Strength: DistributionFloat;
	StrengthRaw: RawDistributionFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleAttractorPointGravity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPointGravity;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleAttractorPointGravity;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPointGravity;
	static C(Other: UObject): ParticleModuleAttractorPointGravity;
}

declare class ParticleModuleBeamBase extends ParticleModule { 
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleBeamBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamBase;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleBeamBase;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamBase;
	static C(Other: UObject): ParticleModuleBeamBase;
}

declare type BeamModifierType = 'PEB2MT_Source' | 'PEB2MT_Target';
declare var BeamModifierType : { PEB2MT_Source:'PEB2MT_Source',PEB2MT_Target:'PEB2MT_Target', };
declare class BeamModifierOptions { 
	bModify: boolean;
	bScale: boolean;
	bLock: boolean;
	clone() : BeamModifierOptions;
	static C(Other: UObject): BeamModifierOptions;
}

declare class ParticleModuleBeamModifier extends ParticleModuleBeamBase { 
	ModifierType: BeamModifierType;
	PositionOptions: BeamModifierOptions;
	Position: RawDistributionVector;
	TangentOptions: BeamModifierOptions;
	Tangent: RawDistributionVector;
	bAbsoluteTangent: boolean;
	StrengthOptions: BeamModifierOptions;
	Strength: RawDistributionFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleBeamModifier;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamModifier;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleBeamModifier;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamModifier;
	static C(Other: UObject): ParticleModuleBeamModifier;
}

declare class ParticleModuleBeamNoise extends ParticleModuleBeamBase { 
	bLowFreq_Enabled: boolean;
	Frequency: number;
	Frequency_LowRange: number;
	NoiseRange: RawDistributionVector;
	NoiseRangeScale: RawDistributionFloat;
	bNRScaleEmitterTime: boolean;
	NoiseSpeed: RawDistributionVector;
	bSmooth: boolean;
	NoiseLockRadius: number;
	bNoiseLock: boolean;
	bOscillate: boolean;
	NoiseLockTime: number;
	NoiseTension: number;
	bUseNoiseTangents: boolean;
	NoiseTangentStrength: RawDistributionFloat;
	NoiseTessellation: number;
	bTargetNoise: boolean;
	FrequencyDistance: number;
	bApplyNoiseScale: boolean;
	NoiseScale: RawDistributionFloat;
	constructor();
	constructor(Outer: UObject);
	static Load(ResourceName: string): ParticleModuleBeamNoise;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamNoise;
	static StaticClass: any;
	static GetClassObject(): Class;
	static GetDefaultObject(): ParticleModuleBeamNoise;
	static GetDefaultSubobjectByName(Name: string): UObject;
	static SetDefaultSubobjectClass(Name: string): void;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamNoise;
	static C(Other: UObject): ParticleModuleBeamNoise;
}

