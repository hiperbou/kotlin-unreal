declare type ETransitionLogicType = 'TLT_StandardBlend' | 'TLT_Custom';
declare var ETransitionLogicType : { TLT_StandardBlend:'TLT_StandardBlend',TLT_Custom:'TLT_Custom', };
declare class AnimStateTransitionNode extends AnimStateNodeBase { 
	BoundGraph: EdGraph;
	CustomTransitionGraph: EdGraph;
	PriorityOrder: number;
	CrossfadeDuration: number;
	CrossfadeMode: ETransitionBlendMode;
	BlendMode: BlendMode;
	CustomBlendCurve: CurveFloat;
	BlendProfile: BlendProfile;
	bAutomaticRuleBasedOnSequencePlayerInState: boolean;
	LogicType: ETransitionLogicType;
	TransitionStart: AnimNotifyEvent;
	TransitionEnd: AnimNotifyEvent;
	TransitionInterrupt: AnimNotifyEvent;
	Bidirectional: boolean;
	bSharedRules: boolean;
	bSharedCrossfade: boolean;
	SharedRulesName: string;
	SharedRulesGuid: Guid;
	SharedColor: LinearColor;
	SharedCrossfadeName: string;
	SharedCrossfadeGuid: Guid;
	SharedCrossfadeIdx: number;
	static Load(ResourceName: string): AnimStateTransitionNode;
	static Find(Outer: UObject, ResourceName: string): AnimStateTransitionNode;
	static GetDefaultObject(): AnimStateTransitionNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateTransitionNode;
	static C(Other: UObject): AnimStateTransitionNode;
}

declare class K2Node_AnimGetter extends K2Node_CallFunction { 
	SourceNode: AnimGraphNode_Base;
	SourceStateNode: AnimStateNodeBase;
	GetterClass: UnrealEngineClass;
	SourceAnimBlueprint: AnimBlueprint;
	CachedTitle: string;
	Contexts: string[];
	static Load(ResourceName: string): K2Node_AnimGetter;
	static Find(Outer: UObject, ResourceName: string): K2Node_AnimGetter;
	static GetDefaultObject(): K2Node_AnimGetter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AnimGetter;
	static C(Other: UObject): K2Node_AnimGetter;
}

declare type ETransitionGetter = 'AnimationAsset_GetCurrentTime' | 'AnimationAsset_GetLength' | 'AnimationAsset_GetCurrentTimeFraction' | 'AnimationAsset_GetTimeFromEnd' | 'AnimationAsset_GetTimeFromEndFraction' | 'CurrentState_ElapsedTime' | 'CurrentState_GetBlendWeight' | 'CurrentTransitionDuration' | 'ArbitraryState_GetBlendWeight';
declare var ETransitionGetter : { AnimationAsset_GetCurrentTime:'AnimationAsset_GetCurrentTime',AnimationAsset_GetLength:'AnimationAsset_GetLength',AnimationAsset_GetCurrentTimeFraction:'AnimationAsset_GetCurrentTimeFraction',AnimationAsset_GetTimeFromEnd:'AnimationAsset_GetTimeFromEnd',AnimationAsset_GetTimeFromEndFraction:'AnimationAsset_GetTimeFromEndFraction',CurrentState_ElapsedTime:'CurrentState_ElapsedTime',CurrentState_GetBlendWeight:'CurrentState_GetBlendWeight',CurrentTransitionDuration:'CurrentTransitionDuration',ArbitraryState_GetBlendWeight:'ArbitraryState_GetBlendWeight', };
declare class K2Node_TransitionRuleGetter extends K2Node { 
	GetterType: ETransitionGetter;
	AssociatedAnimAssetPlayerNode: AnimGraphNode_Base;
	AssociatedStateNode: AnimStateNode;
	static Load(ResourceName: string): K2Node_TransitionRuleGetter;
	static Find(Outer: UObject, ResourceName: string): K2Node_TransitionRuleGetter;
	static GetDefaultObject(): K2Node_TransitionRuleGetter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_TransitionRuleGetter;
	static C(Other: UObject): K2Node_TransitionRuleGetter;
}

declare class CookerStats extends UObject { 
	Assets: any[];
	SizeBefore: number;
	SizeAfter: number;
	Path: string;
	static Load(ResourceName: string): CookerStats;
	static Find(Outer: UObject, ResourceName: string): CookerStats;
	static GetDefaultObject(): CookerStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerStats;
	static C(Other: UObject): CookerStats;
}

declare class LightingBuildInfo extends UObject { 
	UObject: any;
	LightingTime: number;
	UnmappedTexelsPercentage: number;
	UnmappedTexelsMemory: number;
	TotalTexelMemory: number;
	LevelName: string;
	static Load(ResourceName: string): LightingBuildInfo;
	static Find(Outer: UObject, ResourceName: string): LightingBuildInfo;
	static GetDefaultObject(): LightingBuildInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightingBuildInfo;
	static C(Other: UObject): LightingBuildInfo;
}

declare class PrimitiveStats extends UObject { 
	UObject: any;
	Actors: any[];
	Type: string;
	Count: number;
	Sections: number;
	InstSections: number;
	Triangles: number;
	InstTriangles: number;
	ResourceSize: number;
	VertexColorMem: number;
	InstVertexColorMem: number;
	LightsLM: number;
	LightsOther: number;
	LightsTotal: number;
	ObjLightCost: number;
	LightMapData: number;
	LMSMResolution: number;
	RadiusMin: number;
	RadiusMax: number;
	RadiusAvg: number;
	static Load(ResourceName: string): PrimitiveStats;
	static Find(Outer: UObject, ResourceName: string): PrimitiveStats;
	static GetDefaultObject(): PrimitiveStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveStats;
	static C(Other: UObject): PrimitiveStats;
}

declare class StaticMeshLightingInfo extends UObject { 
	StaticMeshActor: any;
	StaticMesh: any;
	LevelName: string;
	TextureMapping: string;
	bTextureMapping: boolean;
	bHasLightmapTexCoords: boolean;
	StaticLightingResolution: number;
	TextureLightMapMemoryUsage: number;
	VertexLightMapMemoryUsage: number;
	LightMapLightCount: number;
	TextureShadowMapMemoryUsage: number;
	VertexShadowMapMemoryUsage: number;
	ShadowMapLightCount: number;
	static Load(ResourceName: string): StaticMeshLightingInfo;
	static Find(Outer: UObject, ResourceName: string): StaticMeshLightingInfo;
	static GetDefaultObject(): StaticMeshLightingInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshLightingInfo;
	static C(Other: UObject): StaticMeshLightingInfo;
}

declare class TextureStats extends UObject { 
	Texture: any;
	Actors: any[];
	Type: string;
	MaxDim: Vector2D;
	CurrentDim: Vector2D;
	Format: EPixelFormat;
	Group: TextureGroup;
	LODBias: number;
	CurrentKB: number;
	FullyLoadedKB: number;
	NumUses: number;
	LastTimeRendered: number;
	Path: string;
	static Load(ResourceName: string): TextureStats;
	static Find(Outer: UObject, ResourceName: string): TextureStats;
	static GetDefaultObject(): TextureStats;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureStats;
	static C(Other: UObject): TextureStats;
}

declare class GizmoHandle { 
	clone() : GizmoHandle;
	static C(Other: UObject): GizmoHandle;
}

declare class GizmoHandleGroup extends SceneComponent { 
	GizmoMaterial: MaterialInterface;
	TranslucentGizmoMaterial: MaterialInterface;
	Handles: GizmoHandle[];
	static Load(ResourceName: string): GizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): GizmoHandleGroup;
	static GetDefaultObject(): GizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleGroup;
	static C(Other: UObject): GizmoHandleGroup;
}

declare class ViewportWorldInteraction extends UObject { 
	TransformGizmoActor: BaseTransformGizmo;
	SnapGridActor: Actor;
	SnapGridMeshComponent: StaticMeshComponent;
	SnapGridMID: MaterialInstanceDynamic;
	static Load(ResourceName: string): ViewportWorldInteraction;
	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteraction;
	static GetDefaultObject(): ViewportWorldInteraction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteraction;
	static C(Other: UObject): ViewportWorldInteraction;
}

declare class BaseTransformGizmo extends Actor { 
	SceneComponent: SceneComponent;
	GizmoMaterial: MaterialInterface;
	TranslucentGizmoMaterial: MaterialInterface;
	AllHandleGroups: GizmoHandleGroup[];
	WorldInteraction: ViewportWorldInteraction;
	static GetDefaultObject(): BaseTransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseTransformGizmo;
	static C(Other: UObject): BaseTransformGizmo;
}

declare class AxisGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): AxisGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): AxisGizmoHandleGroup;
	static GetDefaultObject(): AxisGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisGizmoHandleGroup;
	static C(Other: UObject): AxisGizmoHandleGroup;
}

declare class UniformScaleGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): UniformScaleGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): UniformScaleGizmoHandleGroup;
	static GetDefaultObject(): UniformScaleGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleGizmoHandleGroup;
	static C(Other: UObject): UniformScaleGizmoHandleGroup;
}

declare class PivotTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotTranslationGizmoHandleGroup;
	static GetDefaultObject(): PivotTranslationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTranslationGizmoHandleGroup;
	static C(Other: UObject): PivotTranslationGizmoHandleGroup;
}

declare class PivotScaleGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotScaleGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotScaleGizmoHandleGroup;
	static GetDefaultObject(): PivotScaleGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotScaleGizmoHandleGroup;
	static C(Other: UObject): PivotScaleGizmoHandleGroup;
}

declare class PivotPlaneTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
	static GetDefaultObject(): PivotPlaneTranslationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotPlaneTranslationGizmoHandleGroup;
	static C(Other: UObject): PivotPlaneTranslationGizmoHandleGroup;
}

declare class PivotRotationGizmoHandleGroup extends AxisGizmoHandleGroup { 
	static Load(ResourceName: string): PivotRotationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): PivotRotationGizmoHandleGroup;
	static GetDefaultObject(): PivotRotationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotRotationGizmoHandleGroup;
	static C(Other: UObject): PivotRotationGizmoHandleGroup;
}

declare class StretchGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): StretchGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleGroup;
	static GetDefaultObject(): StretchGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleGroup;
	static C(Other: UObject): StretchGizmoHandleGroup;
}

declare class PivotTransformGizmo extends BaseTransformGizmo { 
	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
	TranslationGizmoHandleGroup: PivotTranslationGizmoHandleGroup;
	ScaleGizmoHandleGroup: PivotScaleGizmoHandleGroup;
	PlaneTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup;
	RotationGizmoHandleGroup: PivotRotationGizmoHandleGroup;
	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
	static GetDefaultObject(): PivotTransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTransformGizmo;
	static C(Other: UObject): PivotTransformGizmo;
}

declare class ViewportDragOperation extends UObject { 
	static Load(ResourceName: string): ViewportDragOperation;
	static Find(Outer: UObject, ResourceName: string): ViewportDragOperation;
	static GetDefaultObject(): ViewportDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperation;
	static C(Other: UObject): ViewportDragOperation;
}

declare class ViewportDragOperationComponent extends ActorComponent { 
	DragOperation: ViewportDragOperation;
	DragOperationSubclass: UnrealEngineClass;
	static Load(ResourceName: string): ViewportDragOperationComponent;
	static Find(Outer: UObject, ResourceName: string): ViewportDragOperationComponent;
	static GetDefaultObject(): ViewportDragOperationComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperationComponent;
	static C(Other: UObject): ViewportDragOperationComponent;
}

declare class ViewportInteractableInterface extends Interface { 
	static Load(ResourceName: string): ViewportInteractableInterface;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractableInterface;
	static GetDefaultObject(): ViewportInteractableInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractableInterface;
	static C(Other: UObject): ViewportInteractableInterface;
}

declare class ViewportInteractor extends UObject { 
	WorldInteraction: ViewportWorldInteraction;
	OtherInteractor: ViewportInteractor;
	static Load(ResourceName: string): ViewportInteractor;
	static Find(Outer: UObject, ResourceName: string): ViewportInteractor;
	static GetDefaultObject(): ViewportInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractor;
	static C(Other: UObject): ViewportInteractor;
}

declare class MouseCursorInteractor extends ViewportInteractor { 
	static Load(ResourceName: string): MouseCursorInteractor;
	static Find(Outer: UObject, ResourceName: string): MouseCursorInteractor;
	static GetDefaultObject(): MouseCursorInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseCursorInteractor;
	static C(Other: UObject): MouseCursorInteractor;
}

declare class ViewportWorldInteractionInterface extends Interface { 
	static Load(ResourceName: string): ViewportWorldInteractionInterface;
	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteractionInterface;
	static GetDefaultObject(): ViewportWorldInteractionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteractionInterface;
	static C(Other: UObject): ViewportWorldInteractionInterface;
}

declare type ETrackingStatus = 'NotTracked' | 'InertialOnly' | 'Tracked';
declare var ETrackingStatus : { NotTracked:'NotTracked',InertialOnly:'InertialOnly',Tracked:'Tracked', };
declare class MotionControllerComponent extends PrimitiveComponent { 
	PlayerIndex: number;
	Hand: Hand;
	bDisableLowLatencyUpdate: boolean;
	CurrentTrackingStatus: CurrentTrackingStatus;
	static Load(ResourceName: string): MotionControllerComponent;
	static Find(Outer: UObject, ResourceName: string): MotionControllerComponent;
	static GetDefaultObject(): MotionControllerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionControllerComponent;
	IsTracked(): boolean;
	static C(Other: UObject): MotionControllerComponent;
}

declare class VRNotificationsComponent extends ActorComponent { 
	HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDLostDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): VRNotificationsComponent;
	static Find(Outer: UObject, ResourceName: string): VRNotificationsComponent;
	static GetDefaultObject(): VRNotificationsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRNotificationsComponent;
	static C(Other: UObject): VRNotificationsComponent;
}

declare class VREditorBaseUserWidget extends UserWidget { 
	Owner: any;
	static Load(ResourceName: string): VREditorBaseUserWidget;
	static Find(Outer: UObject, ResourceName: string): VREditorBaseUserWidget;
	static GetDefaultObject(): VREditorBaseUserWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseUserWidget;
	static C(Other: UObject): VREditorBaseUserWidget;
}

declare type EVREditorWidgetDrawingPolicy = 'Always' | 'Hovering';
declare var EVREditorWidgetDrawingPolicy : { Always:'Always',Hovering:'Hovering', };
declare class VREditorWidgetComponent extends WidgetComponent { 
	DrawingPolicy: DrawingPolicy;
	bIsHovering: boolean;
	bHasEverDrawn: boolean;
	static Load(ResourceName: string): VREditorWidgetComponent;
	static Find(Outer: UObject, ResourceName: string): VREditorWidgetComponent;
	static GetDefaultObject(): VREditorWidgetComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWidgetComponent;
	static C(Other: UObject): VREditorWidgetComponent;
}

declare class VREditorFloatingUI extends VREditorBaseActor { 
	UserWidget: VREditorBaseUserWidget;
	WidgetComponent: VREditorWidgetComponent;
	UserWidgetClass: UnrealEngineClass;
	static GetDefaultObject(): VREditorFloatingUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingUI;
	static C(Other: UObject): VREditorFloatingUI;
}

declare class VREditorDockableWindow extends VREditorFloatingUI { 
	WindowMeshComponent: StaticMeshComponent;
	SelectionBarMeshComponent: StaticMeshComponent;
	CloseButtonMeshComponent: StaticMeshComponent;
	SelectionBarMID: MaterialInstanceDynamic;
	SelectionBarTranslucentMID: MaterialInstanceDynamic;
	CloseButtonMID: MaterialInstanceDynamic;
	CloseButtonTranslucentMID: MaterialInstanceDynamic;
	DragOperationComponent: ViewportDragOperationComponent;
	static GetDefaultObject(): VREditorDockableWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableWindow;
	static C(Other: UObject): VREditorDockableWindow;
}

declare class VREditorUISystem extends UObject { 
	VRMode: VREditorMode;
	FloatingUIs: VREditorFloatingUI[];
	QuickMenuUI: VREditorFloatingUI;
	EditorUIPanels: VREditorFloatingUI[];
	QuickRadialMenu: VREditorFloatingUI;
	DraggingUI: VREditorDockableWindow;
	ColorPickerUI: VREditorDockableWindow;
	StartDragUISound: SoundCue;
	StopDragUISound: SoundCue;
	HideUISound: SoundCue;
	ShowUISound: SoundCue;
	ButtonPressSound: SoundCue;
	static Load(ResourceName: string): VREditorUISystem;
	static Find(Outer: UObject, ResourceName: string): VREditorUISystem;
	static GetDefaultObject(): VREditorUISystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorUISystem;
	static C(Other: UObject): VREditorUISystem;
}

declare class VREditorTeleporter extends UObject { 
	VRMode: VREditorMode;
	TeleportSound: SoundCue;
	static Load(ResourceName: string): VREditorTeleporter;
	static Find(Outer: UObject, ResourceName: string): VREditorTeleporter;
	static GetDefaultObject(): VREditorTeleporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTeleporter;
	static C(Other: UObject): VREditorTeleporter;
}

declare class VREditorAutoScaler extends UObject { 
	VRMode: VREditorMode;
	ScaleSound: SoundCue;
	static Load(ResourceName: string): VREditorAutoScaler;
	static Find(Outer: UObject, ResourceName: string): VREditorAutoScaler;
	static GetDefaultObject(): VREditorAutoScaler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAutoScaler;
	static C(Other: UObject): VREditorAutoScaler;
}

declare class VREditorWorldInteraction extends UObject { 
	Owner: VREditorMode;
	ViewportWorldInteraction: ViewportWorldInteraction;
	DropMaterialOrMaterialSound: SoundCue;
	FloatingUIAssetDraggedFrom: WidgetComponent;
	PlacingMaterialOrTextureAsset: UObject;
	static Load(ResourceName: string): VREditorWorldInteraction;
	static Find(Outer: UObject, ResourceName: string): VREditorWorldInteraction;
	static GetDefaultObject(): VREditorWorldInteraction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWorldInteraction;
	static C(Other: UObject): VREditorWorldInteraction;
}

declare class VREditorInteractor extends ViewportInteractor { 
	VRMode: VREditorMode;
	static Load(ResourceName: string): VREditorInteractor;
	static Find(Outer: UObject, ResourceName: string): VREditorInteractor;
	static GetDefaultObject(): VREditorInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorInteractor;
	static C(Other: UObject): VREditorInteractor;
}

declare class LightComponentBase extends SceneComponent { 
	LightGuid: Guid;
	Brightness: number;
	Intensity: number;
	LightColor: Color;
	bAffectsWorld: boolean;
	CastShadows: boolean;
	CastStaticShadows: boolean;
	CastDynamicShadows: boolean;
	bAffectTranslucentLighting: boolean;
	IndirectLightingIntensity: number;
	StaticEditorTexture: Texture2D;
	StaticEditorTextureScale: number;
	DynamicEditorTexture: Texture2D;
	DynamicEditorTextureScale: number;
	static Load(ResourceName: string): LightComponentBase;
	static Find(Outer: UObject, ResourceName: string): LightComponentBase;
	static GetDefaultObject(): LightComponentBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponentBase;
	SetCastShadows(bNewValue: boolean): void;
	GetLightColor(): LinearColor;
	static C(Other: UObject): LightComponentBase;
}

declare class TextureLightProfile extends Texture2D { 
	Brightness: number;
	TextureMultiplier: number;
	static Load(ResourceName: string): TextureLightProfile;
	static Find(Outer: UObject, ResourceName: string): TextureLightProfile;
	static GetDefaultObject(): TextureLightProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLightProfile;
	static C(Other: UObject): TextureLightProfile;
}

declare class LightComponent extends LightComponentBase { 
	Temperature: number;
	MaxDrawDistance: number;
	MaxDistanceFadeRange: number;
	bUseTemperature: boolean;
	ShadowMapChannel: number;
	MinRoughness: number;
	ShadowResolutionScale: number;
	ShadowBias: number;
	ShadowSharpen: number;
	ContactShadowLength: number;
	InverseSquaredFalloff: boolean;
	CastTranslucentShadows: boolean;
	bCastShadowsFromCinematicObjectsOnly: boolean;
	bAffectDynamicIndirectLighting: boolean;
	LightingChannels: LightingChannels;
	LightFunctionMaterial: MaterialInterface;
	LightFunctionScale: Vector;
	IESTexture: TextureLightProfile;
	bUseIESBrightness: boolean;
	IESBrightnessScale: number;
	LightFunctionFadeDistance: number;
	DisabledBrightness: number;
	bEnableLightShaftBloom: boolean;
	BloomScale: number;
	BloomThreshold: number;
	BloomTint: Color;
	bUseRayTracedDistanceFieldShadows: boolean;
	RayStartOffsetDepthScale: number;
	static Load(ResourceName: string): LightComponent;
	static Find(Outer: UObject, ResourceName: string): LightComponent;
	static GetDefaultObject(): LightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponent;
	SetTemperature(NewTemperature: number): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightFunctionDisabledBrightness(NewValue: number): void;
	SetLightColor(NewLightColor: LinearColor,bSRGB: boolean): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetIESTexture(NewValue: TextureLightProfile): void;
	SetEnableLightShaftBloom(bNewValue: boolean): void;
	SetBloomTint(NewValue: Color): void;
	SetBloomThreshold(NewValue: number): void;
	SetBloomScale(NewValue: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	SetAffectDynamicIndirectLighting(bNewValue: boolean): void;
	static C(Other: UObject): LightComponent;
}

declare class LightmassLightSettings { 
	IndirectLightingSaturation: number;
	ShadowExponent: number;
	bUseAreaShadowsForStationaryLight: boolean;
	clone() : LightmassLightSettings;
	static C(Other: UObject): LightmassLightSettings;
}

declare class LightmassPointLightSettings extends LightmassLightSettings { 
	clone() : LightmassPointLightSettings;
	static C(Other: UObject): LightmassPointLightSettings;
}

declare class PointLightComponent extends LightComponent { 
	Radius: number;
	AttenuationRadius: number;
	bUseInverseSquaredFalloff: boolean;
	LightFalloffExponent: number;
	SourceRadius: number;
	SourceLength: number;
	LightmassSettings: LightmassPointLightSettings;
	static Load(ResourceName: string): PointLightComponent;
	static Find(Outer: UObject, ResourceName: string): PointLightComponent;
	static GetDefaultObject(): PointLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLightComponent;
	SetSourceRadius(bNewValue: number): void;
	SetSourceLength(NewValue: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	SetAttenuationRadius(NewRadius: number): void;
	static C(Other: UObject): PointLightComponent;
}

declare class VREditorMotionControllerInteractor extends VREditorInteractor { 
	MotionControllerComponent: MotionControllerComponent;
	HandMeshComponent: StaticMeshComponent;
	LaserPointerMeshComponent: StaticMeshComponent;
	LaserPointerMID: MaterialInstanceDynamic;
	TranslucentLaserPointerMID: MaterialInstanceDynamic;
	HoverMeshComponent: StaticMeshComponent;
	HoverPointLightComponent: PointLightComponent;
	HandMeshMID: MaterialInstanceDynamic;
	static Load(ResourceName: string): VREditorMotionControllerInteractor;
	static Find(Outer: UObject, ResourceName: string): VREditorMotionControllerInteractor;
	static GetDefaultObject(): VREditorMotionControllerInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMotionControllerInteractor;
	static C(Other: UObject): VREditorMotionControllerInteractor;
}

declare class VREditorMode extends UObject { 
	UISystem: VREditorUISystem;
	TeleporterSystem: VREditorTeleporter;
	AutoScalerSystem: VREditorAutoScaler;
	WorldInteraction: ViewportWorldInteraction;
	VRWorldInteractionExtension: VREditorWorldInteraction;
	MouseCursorInteractor: MouseCursorInteractor;
	LeftHandInteractor: VREditorMotionControllerInteractor;
	RightHandInteractor: VREditorMotionControllerInteractor;
	static Load(ResourceName: string): VREditorMode;
	static Find(Outer: UObject, ResourceName: string): VREditorMode;
	static GetDefaultObject(): VREditorMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMode;
	static C(Other: UObject): VREditorMode;
}

declare class VREditorBaseActor extends Actor { 
	VRMode: VREditorMode;
	static GetDefaultObject(): VREditorBaseActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseActor;
	static C(Other: UObject): VREditorBaseActor;
}

declare class DockableWindowDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): DockableWindowDragOperation;
	static Find(Outer: UObject, ResourceName: string): DockableWindowDragOperation;
	static GetDefaultObject(): DockableWindowDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DockableWindowDragOperation;
	static C(Other: UObject): DockableWindowDragOperation;
}

declare type EHorizTextAligment = 'EHTA_Left' | 'EHTA_Center' | 'EHTA_Right';
declare var EHorizTextAligment : { EHTA_Left:'EHTA_Left',EHTA_Center:'EHTA_Center',EHTA_Right:'EHTA_Right', };
declare type EVerticalTextAligment = 'EVRTA_TextTop' | 'EVRTA_TextCenter' | 'EVRTA_TextBottom' | 'EVRTA_QuadTop';
declare var EVerticalTextAligment : { EVRTA_TextTop:'EVRTA_TextTop',EVRTA_TextCenter:'EVRTA_TextCenter',EVRTA_TextBottom:'EVRTA_TextBottom',EVRTA_QuadTop:'EVRTA_QuadTop', };
declare class TextRenderComponent extends PrimitiveComponent { 
	Text: string;
	TextMaterial: MaterialInterface;
	Font: Font;
	HorizontalAlignment: EHorizTextAligment;
	VerticalAlignment: EVerticalTextAligment;
	TextRenderColor: Color;
	XScale: number;
	YScale: number;
	WorldSize: number;
	InvDefaultSize: number;
	HorizSpacingAdjust: number;
	VertSpacingAdjust: number;
	bAlwaysRenderAsText: boolean;
	static Load(ResourceName: string): TextRenderComponent;
	static Find(Outer: UObject, ResourceName: string): TextRenderComponent;
	static GetDefaultObject(): TextRenderComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderComponent;
	SetYScale(Value: number): void;
	SetXScale(Value: number): void;
	SetWorldSize(Value: number): void;
	SetVertSpacingAdjust(Value: number): void;
	SetVerticalAlignment(Value: EVerticalTextAligment): void;
	SetTextRenderColor(Value: Color): void;
	SetTextMaterial(Material: MaterialInterface): void;
	SetText(Value: string): void;
	SetHorizSpacingAdjust(Value: number): void;
	SetHorizontalAlignment(Value: EHorizTextAligment): void;
	SetFont(Value: Font): void;
	SetText(Value: string): void;
	GetTextWorldSize(): Vector;
	GetTextLocalSize(): Vector;
	static C(Other: UObject): TextRenderComponent;
}

declare class FloatingText extends Actor { 
	SceneComponent: SceneComponent;
	FirstLineComponent: StaticMeshComponent;
	JointSphereComponent: StaticMeshComponent;
	SecondLineComponent: StaticMeshComponent;
	TextComponent: TextRenderComponent;
	MaskedTextMaterial: MaterialInterface;
	TranslucentTextMaterial: MaterialInterface;
	LineMaterial: MaterialInterface;
	LineMaterialMID: MaterialInstanceDynamic;
	static GetDefaultObject(): FloatingText;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingText;
	static C(Other: UObject): FloatingText;
}

declare class TransformGizmoMeasurement { 
	MeasurementText: TextRenderComponent;
	clone() : TransformGizmoMeasurement;
	static C(Other: UObject): TransformGizmoMeasurement;
}

declare class VREditorTranslationGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): VREditorTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): VREditorTranslationGizmoHandleGroup;
	static GetDefaultObject(): VREditorTranslationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTranslationGizmoHandleGroup;
	static C(Other: UObject): VREditorTranslationGizmoHandleGroup;
}

declare class VREditorPlaneTranslationGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): VREditorPlaneTranslationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): VREditorPlaneTranslationGizmoHandleGroup;
	static GetDefaultObject(): VREditorPlaneTranslationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorPlaneTranslationGizmoHandleGroup;
	static C(Other: UObject): VREditorPlaneTranslationGizmoHandleGroup;
}

declare class VREditorRotationGizmoHandleGroup extends GizmoHandleGroup { 
	static Load(ResourceName: string): VREditorRotationGizmoHandleGroup;
	static Find(Outer: UObject, ResourceName: string): VREditorRotationGizmoHandleGroup;
	static GetDefaultObject(): VREditorRotationGizmoHandleGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRotationGizmoHandleGroup;
	static C(Other: UObject): VREditorRotationGizmoHandleGroup;
}

declare class TransformGizmo extends BaseTransformGizmo { 
	Measurements: TransformGizmoMeasurement;
	TranslationGizmoHandleGroup: VREditorTranslationGizmoHandleGroup;
	PlaneTranslationGizmoHandleGroup: VREditorPlaneTranslationGizmoHandleGroup;
	RotationGizmoHandleGroup: VREditorRotationGizmoHandleGroup;
	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
	static GetDefaultObject(): TransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransformGizmo;
	static C(Other: UObject): TransformGizmo;
}

declare class PostProcessComponent extends SceneComponent { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	static Load(ResourceName: string): PostProcessComponent;
	static Find(Outer: UObject, ResourceName: string): PostProcessComponent;
	static GetDefaultObject(): PostProcessComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessComponent;
	static C(Other: UObject): PostProcessComponent;
}

declare class VREditorAvatarActor extends Actor { 
	HeadMeshComponent: StaticMeshComponent;
	WorldMovementGridMeshComponent: StaticMeshComponent;
	WorldMovementGridMID: MaterialInstanceDynamic;
	WorldMovementGridOpacity: number;
	bIsDrawingWorldMovementPostProcess: boolean;
	WorldMovementPostProcessMaterial: MaterialInstanceDynamic;
	ScaleProgressMeshComponent: StaticMeshComponent;
	CurrentScaleProgressMeshComponent: StaticMeshComponent;
	UserScaleIndicatorText: TextRenderComponent;
	FixedUserScaleMID: MaterialInstanceDynamic;
	TranslucentFixedUserScaleMID: MaterialInstanceDynamic;
	CurrentUserScaleMID: MaterialInstanceDynamic;
	TranslucentCurrentUserScaleMID: MaterialInstanceDynamic;
	PostProcessComponent: PostProcessComponent;
	VRMode: VREditorMode;
	static GetDefaultObject(): VREditorAvatarActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAvatarActor;
	static C(Other: UObject): VREditorAvatarActor;
}

declare class VREditorButton extends VREditorBaseActor { 
	ButtonMeshComponent: StaticMeshComponent;
	static GetDefaultObject(): VREditorButton;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorButton;
	static C(Other: UObject): VREditorButton;
}

declare class ActorFactory extends UObject { 
	DisplayName: string;
	MenuPriority: number;
	NewActorClassName: string;
	NewActorClass: UnrealEngineClass;
	bShowInEditorQuickMenu: boolean;
	bUseSurfaceOrientation: boolean;
	SpawnPositionOffset: Vector;
	static Load(ResourceName: string): ActorFactory;
	static Find(Outer: UObject, ResourceName: string): ActorFactory;
	static GetDefaultObject(): ActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactory;
	static C(Other: UObject): ActorFactory;
}

declare class ActorFactoryAmbientSound extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryAmbientSound;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAmbientSound;
	static GetDefaultObject(): ActorFactoryAmbientSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAmbientSound;
	static C(Other: UObject): ActorFactoryAmbientSound;
}

declare class ActorFactoryAtmosphericFog extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryAtmosphericFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAtmosphericFog;
	static GetDefaultObject(): ActorFactoryAtmosphericFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAtmosphericFog;
	static C(Other: UObject): ActorFactoryAtmosphericFog;
}

declare class ActorFactoryBlueprint extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryBlueprint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBlueprint;
	static GetDefaultObject(): ActorFactoryBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBlueprint;
	static C(Other: UObject): ActorFactoryBlueprint;
}

declare class ActorFactoryBoxReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryBoxReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxReflectionCapture;
	static GetDefaultObject(): ActorFactoryBoxReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxReflectionCapture;
	static C(Other: UObject): ActorFactoryBoxReflectionCapture;
}

declare class ActorFactoryCameraActor extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryCameraActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCameraActor;
	static GetDefaultObject(): ActorFactoryCameraActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCameraActor;
	static C(Other: UObject): ActorFactoryCameraActor;
}

declare class ActorFactoryCharacter extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryCharacter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCharacter;
	static GetDefaultObject(): ActorFactoryCharacter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCharacter;
	static C(Other: UObject): ActorFactoryCharacter;
}

declare class ActorFactoryClass extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryClass;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryClass;
	static GetDefaultObject(): ActorFactoryClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryClass;
	static C(Other: UObject): ActorFactoryClass;
}

declare class ActorFactoryDeferredDecal extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDeferredDecal;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDeferredDecal;
	static GetDefaultObject(): ActorFactoryDeferredDecal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDeferredDecal;
	static C(Other: UObject): ActorFactoryDeferredDecal;
}

declare class ActorFactoryDestructible extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDestructible;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDestructible;
	static GetDefaultObject(): ActorFactoryDestructible;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDestructible;
	static C(Other: UObject): ActorFactoryDestructible;
}

declare class ActorFactoryDirectionalLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDirectionalLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDirectionalLight;
	static GetDefaultObject(): ActorFactoryDirectionalLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDirectionalLight;
	static C(Other: UObject): ActorFactoryDirectionalLight;
}

declare class ActorFactoryEmitter extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryEmitter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmitter;
	static GetDefaultObject(): ActorFactoryEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmitter;
	static C(Other: UObject): ActorFactoryEmitter;
}

declare class ActorFactoryEmptyActor extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryEmptyActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmptyActor;
	static GetDefaultObject(): ActorFactoryEmptyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmptyActor;
	static C(Other: UObject): ActorFactoryEmptyActor;
}

declare class ActorFactoryPawn extends ActorFactoryEmptyActor { 
	static Load(ResourceName: string): ActorFactoryPawn;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPawn;
	static GetDefaultObject(): ActorFactoryPawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPawn;
	static C(Other: UObject): ActorFactoryPawn;
}

declare class ActorFactoryExponentialHeightFog extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryExponentialHeightFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryExponentialHeightFog;
	static GetDefaultObject(): ActorFactoryExponentialHeightFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryExponentialHeightFog;
	static C(Other: UObject): ActorFactoryExponentialHeightFog;
}

declare class ActorFactoryMatineeActor extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryMatineeActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryMatineeActor;
	static GetDefaultObject(): ActorFactoryMatineeActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryMatineeActor;
	static C(Other: UObject): ActorFactoryMatineeActor;
}

declare class ActorFactoryMovieScene extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryMovieScene;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryMovieScene;
	static GetDefaultObject(): ActorFactoryMovieScene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryMovieScene;
	static C(Other: UObject): ActorFactoryMovieScene;
}

declare class ActorFactoryNote extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryNote;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryNote;
	static GetDefaultObject(): ActorFactoryNote;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryNote;
	static C(Other: UObject): ActorFactoryNote;
}

declare class ActorFactoryPhysicsAsset extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPhysicsAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPhysicsAsset;
	static GetDefaultObject(): ActorFactoryPhysicsAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPhysicsAsset;
	static C(Other: UObject): ActorFactoryPhysicsAsset;
}

declare class ActorFactoryPlanarReflection extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlanarReflection;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlanarReflection;
	static GetDefaultObject(): ActorFactoryPlanarReflection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlanarReflection;
	static C(Other: UObject): ActorFactoryPlanarReflection;
}

declare class ActorFactoryPlaneReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static GetDefaultObject(): ActorFactoryPlaneReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlaneReflectionCapture;
	static C(Other: UObject): ActorFactoryPlaneReflectionCapture;
}

declare class ActorFactoryPlayerStart extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlayerStart;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlayerStart;
	static GetDefaultObject(): ActorFactoryPlayerStart;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlayerStart;
	static C(Other: UObject): ActorFactoryPlayerStart;
}

declare class ActorFactoryPointLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPointLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPointLight;
	static GetDefaultObject(): ActorFactoryPointLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPointLight;
	static C(Other: UObject): ActorFactoryPointLight;
}

declare class ActorFactorySkeletalMesh extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkeletalMesh;
	static GetDefaultObject(): ActorFactorySkeletalMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkeletalMesh;
	static C(Other: UObject): ActorFactorySkeletalMesh;
}

declare class ActorFactoryAnimationAsset extends ActorFactorySkeletalMesh { 
	static Load(ResourceName: string): ActorFactoryAnimationAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAnimationAsset;
	static GetDefaultObject(): ActorFactoryAnimationAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAnimationAsset;
	static C(Other: UObject): ActorFactoryAnimationAsset;
}

declare class ActorFactorySkyLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkyLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyLight;
	static GetDefaultObject(): ActorFactorySkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkyLight;
	static C(Other: UObject): ActorFactorySkyLight;
}

declare class ActorFactorySphereReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySphereReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereReflectionCapture;
	static GetDefaultObject(): ActorFactorySphereReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereReflectionCapture;
	static C(Other: UObject): ActorFactorySphereReflectionCapture;
}

declare class ActorFactorySpotLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySpotLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySpotLight;
	static GetDefaultObject(): ActorFactorySpotLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySpotLight;
	static C(Other: UObject): ActorFactorySpotLight;
}

declare class ActorFactoryStaticMesh extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryStaticMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryStaticMesh;
	static GetDefaultObject(): ActorFactoryStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryStaticMesh;
	static C(Other: UObject): ActorFactoryStaticMesh;
}

declare class ActorFactoryBasicShape extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): ActorFactoryBasicShape;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBasicShape;
	static GetDefaultObject(): ActorFactoryBasicShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBasicShape;
	static C(Other: UObject): ActorFactoryBasicShape;
}

declare class ActorFactoryInteractiveFoliage extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): ActorFactoryInteractiveFoliage;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryInteractiveFoliage;
	static GetDefaultObject(): ActorFactoryInteractiveFoliage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryInteractiveFoliage;
	static C(Other: UObject): ActorFactoryInteractiveFoliage;
}

declare class ActorFactorySubDSurface extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySubDSurface;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySubDSurface;
	static GetDefaultObject(): ActorFactorySubDSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySubDSurface;
	static C(Other: UObject): ActorFactorySubDSurface;
}

declare class ActorFactoryTargetPoint extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTargetPoint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTargetPoint;
	static GetDefaultObject(): ActorFactoryTargetPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTargetPoint;
	static C(Other: UObject): ActorFactoryTargetPoint;
}

declare class ActorFactoryTextRender extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTextRender;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTextRender;
	static GetDefaultObject(): ActorFactoryTextRender;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTextRender;
	static C(Other: UObject): ActorFactoryTextRender;
}

declare class ActorFactoryTriggerBox extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerBox;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerBox;
	static GetDefaultObject(): ActorFactoryTriggerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerBox;
	static C(Other: UObject): ActorFactoryTriggerBox;
}

declare class ActorFactoryTriggerCapsule extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerCapsule;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerCapsule;
	static GetDefaultObject(): ActorFactoryTriggerCapsule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerCapsule;
	static C(Other: UObject): ActorFactoryTriggerCapsule;
}

declare class ActorFactoryTriggerSphere extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerSphere;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerSphere;
	static GetDefaultObject(): ActorFactoryTriggerSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerSphere;
	static C(Other: UObject): ActorFactoryTriggerSphere;
}

declare class ActorFactoryVectorFieldVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVectorFieldVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVectorFieldVolume;
	static GetDefaultObject(): ActorFactoryVectorFieldVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVectorFieldVolume;
	static C(Other: UObject): ActorFactoryVectorFieldVolume;
}

declare class ActorFactoryVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVolume;
	static GetDefaultObject(): ActorFactoryVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVolume;
	static C(Other: UObject): ActorFactoryVolume;
}

declare class ActorFactoryBoxVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactoryBoxVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxVolume;
	static GetDefaultObject(): ActorFactoryBoxVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxVolume;
	static C(Other: UObject): ActorFactoryBoxVolume;
}

declare class ActorFactoryCylinderVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactoryCylinderVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCylinderVolume;
	static GetDefaultObject(): ActorFactoryCylinderVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCylinderVolume;
	static C(Other: UObject): ActorFactoryCylinderVolume;
}

declare class ActorFactorySphereVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactorySphereVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereVolume;
	static GetDefaultObject(): ActorFactorySphereVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereVolume;
	static C(Other: UObject): ActorFactorySphereVolume;
}

declare class AnalyticsPrivacySettings extends UObject { 
	bSendUsageData: boolean;
	static Load(ResourceName: string): AnalyticsPrivacySettings;
	static Find(Outer: UObject, ResourceName: string): AnalyticsPrivacySettings;
	static GetDefaultObject(): AnalyticsPrivacySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnalyticsPrivacySettings;
	static C(Other: UObject): AnalyticsPrivacySettings;
}

declare class SkeletalMeshActor extends Actor { 
	bShouldDoAnimNotifies: boolean;
	bWakeOnLevelStart: boolean;
	SkeletalMeshComponent: SkeletalMeshComponent;
	ReplicatedMesh: SkeletalMesh;
	ReplicatedPhysAsset: PhysicsAsset;
	ReplicatedMaterial0: MaterialInterface;
	ReplicatedMaterial1: MaterialInterface;
	static GetDefaultObject(): SkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshActor;
	OnRep_ReplicatedPhysAsset(): void;
	OnRep_ReplicatedMesh(): void;
	OnRep_ReplicatedMaterial1(): void;
	OnRep_ReplicatedMaterial0(): void;
	static C(Other: UObject): SkeletalMeshActor;
}

declare class AnimationThumbnailSkeletalMeshActor extends SkeletalMeshActor { 
	static GetDefaultObject(): AnimationThumbnailSkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationThumbnailSkeletalMeshActor;
	static C(Other: UObject): AnimationThumbnailSkeletalMeshActor;
}

declare class Exporter extends UObject { 
	SupportedClass: UnrealEngineClass;
	ExportRootScope: UObject;
	FormatExtension: string[];
	FormatDescription: string[];
	PreferredFormatIndex: number;
	TextIndent: number;
	bText: boolean;
	bSelectedOnly: boolean;
	bForceFileOperations: boolean;
	static Load(ResourceName: string): Exporter;
	static Find(Outer: UObject, ResourceName: string): Exporter;
	static GetDefaultObject(): Exporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Exporter;
	static C(Other: UObject): Exporter;
}

declare class AnimSequenceExporterFBX extends Exporter { 
	static Load(ResourceName: string): AnimSequenceExporterFBX;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceExporterFBX;
	static GetDefaultObject(): AnimSequenceExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceExporterFBX;
	static C(Other: UObject): AnimSequenceExporterFBX;
}

declare class PreviewSceneProfile { 
	ProfileName: string;
	DirectionalLightIntensity: number;
	DirectionalLightColor: LinearColor;
	SkyLightIntensity: number;
	bRotateLightingRig: boolean;
	bShowEnvironment: boolean;
	bShowFloor: boolean;
	EnvironmentCubeMap: any;
	EnvironmentCubeMapPath: string;
	PostProcessingSettings: PostProcessSettings;
	bPostProcessingEnabled: boolean;
	LightingRigRotation: number;
	RotationSpeed: number;
	DirectionalLightRotation: Rotator;
	clone() : PreviewSceneProfile;
	static C(Other: UObject): PreviewSceneProfile;
}

declare class AssetViewerSettings extends UObject { 
	Profiles: PreviewSceneProfile[];
	static Load(ResourceName: string): AssetViewerSettings;
	static Find(Outer: UObject, ResourceName: string): AssetViewerSettings;
	static GetDefaultObject(): AssetViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetViewerSettings;
	static C(Other: UObject): AssetViewerSettings;
}

declare class Commandlet extends UObject { 
	HelpDescription: string;
	HelpUsage: string;
	HelpWebLink: string;
	HelpParamNames: string[];
	HelpParamDescriptions: string[];
	IsServer: boolean;
	IsClient: boolean;
	IsEditor: boolean;
	LogToConsole: boolean;
	ShowErrorCount: boolean;
	static Load(ResourceName: string): Commandlet;
	static Find(Outer: UObject, ResourceName: string): Commandlet;
	static GetDefaultObject(): Commandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Commandlet;
	static C(Other: UObject): Commandlet;
}

declare class AudioMixerCommandlet extends Commandlet { 
	static Load(ResourceName: string): AudioMixerCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioMixerCommandlet;
	static GetDefaultObject(): AudioMixerCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioMixerCommandlet;
	static C(Other: UObject): AudioMixerCommandlet;
}

declare class AudioTestCommandlet extends Commandlet { 
	static Load(ResourceName: string): AudioTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioTestCommandlet;
	static GetDefaultObject(): AudioTestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioTestCommandlet;
	static C(Other: UObject): AudioTestCommandlet;
}

declare class AutoReimportManager extends UObject { 
	static Load(ResourceName: string): AutoReimportManager;
	static Find(Outer: UObject, ResourceName: string): AutoReimportManager;
	static GetDefaultObject(): AutoReimportManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutoReimportManager;
	static C(Other: UObject): AutoReimportManager;
}

declare class CascadeOptions extends UObject { 
	bShowModuleDump: boolean;
	BackgroundColor: Color;
	bUseSubMenus: boolean;
	bUseSpaceBarReset: boolean;
	bUseSpaceBarResetInLevel: boolean;
	Empty_Background: Color;
	Emitter_Background: Color;
	Emitter_Unselected: Color;
	Emitter_Selected: Color;
	ModuleColor_General_Unselected: Color;
	ModuleColor_General_Selected: Color;
	ModuleColor_TypeData_Unselected: Color;
	ModuleColor_TypeData_Selected: Color;
	ModuleColor_Beam_Unselected: Color;
	ModuleColor_Beam_Selected: Color;
	ModuleColor_Trail_Unselected: Color;
	ModuleColor_Trail_Selected: Color;
	ModuleColor_Spawn_Unselected: Color;
	ModuleColor_Spawn_Selected: Color;
	ModuleColor_Light_Unselected: Color;
	ModuleColor_Light_Selected: Color;
	ModuleColor_SubUV_Unselected: Color;
	ModuleColor_SubUV_Selected: Color;
	ModuleColor_Required_Unselected: Color;
	ModuleColor_Required_Selected: Color;
	ModuleColor_Event_Unselected: Color;
	ModuleColor_Event_Selected: Color;
	bShowGrid: boolean;
	GridColor_Hi: Color;
	GridColor_Low: Color;
	GridPerspectiveSize: number;
	bShowParticleCounts: boolean;
	bShowParticleEvents: boolean;
	bShowParticleTimes: boolean;
	bShowParticleDistance: boolean;
	bShowParticleMemory: boolean;
	ParticleMemoryUpdateTime: number;
	bShowFloor: boolean;
	FloorMesh: string;
	FloorPosition: Vector;
	FloorRotation: Rotator;
	FloorScale: number;
	FloorScale3D: Vector;
	ShowPPFlags: number;
	bUseSlimCascadeDraw: boolean;
	SlimCascadeDrawHeight: number;
	bCenterCascadeModuleText: boolean;
	Cascade_MouseMoveThreshold: number;
	MotionModeRadius: number;
	static Load(ResourceName: string): CascadeOptions;
	static Find(Outer: UObject, ResourceName: string): CascadeOptions;
	static GetDefaultObject(): CascadeOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CascadeOptions;
	static C(Other: UObject): CascadeOptions;
}

declare class ChunkDependency { 
	ChunkID: number;
	ParentChunkID: number;
	clone() : ChunkDependency;
	static C(Other: UObject): ChunkDependency;
}

declare class ChunkDependencyInfo extends UObject { 
	DependencyArray: ChunkDependency[];
	static Load(ResourceName: string): ChunkDependencyInfo;
	static Find(Outer: UObject, ResourceName: string): ChunkDependencyInfo;
	static GetDefaultObject(): ChunkDependencyInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChunkDependencyInfo;
	static C(Other: UObject): ChunkDependencyInfo;
}

declare type EClassViewerDeveloperType = 'CVDT_None' | 'CVDT_CurrentUser' | 'CVDT_All';
declare var EClassViewerDeveloperType : { CVDT_None:'CVDT_None',CVDT_CurrentUser:'CVDT_CurrentUser',CVDT_All:'CVDT_All', };
declare class ClassViewerSettings extends UObject { 
	DisplayInternalClasses: boolean;
	DeveloperFolderType: DeveloperFolderType;
	static Load(ResourceName: string): ClassViewerSettings;
	static Find(Outer: UObject, ResourceName: string): ClassViewerSettings;
	static GetDefaultObject(): ClassViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassViewerSettings;
	static C(Other: UObject): ClassViewerSettings;
}

declare class CompressAnimationsCommandlet extends Commandlet { 
	static Load(ResourceName: string): CompressAnimationsCommandlet;
	static Find(Outer: UObject, ResourceName: string): CompressAnimationsCommandlet;
	static GetDefaultObject(): CompressAnimationsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressAnimationsCommandlet;
	static C(Other: UObject): CompressAnimationsCommandlet;
}

declare class CompressionHolder extends UObject { 
	Compression: AnimCompress;
	static Load(ResourceName: string): CompressionHolder;
	static Find(Outer: UObject, ResourceName: string): CompressionHolder;
	static GetDefaultObject(): CompressionHolder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressionHolder;
	static C(Other: UObject): CompressionHolder;
}

declare class ContentBrowserSettings extends UObject { 
	NumObjectsToLoadBeforeWarning: number;
	RealTimeThumbnails: boolean;
	DisplayFolders: boolean;
	DisplayEngineFolder: boolean;
	DisplayDevelopersFolder: boolean;
	DisplayL10NFolder: boolean;
	DisplayPluginFolders: boolean;
	DisplayCollections: boolean;
	DisplayCppFolders: boolean;
	static Load(ResourceName: string): ContentBrowserSettings;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserSettings;
	static GetDefaultObject(): ContentBrowserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserSettings;
	static C(Other: UObject): ContentBrowserSettings;
}

declare class CookCommandlet extends Commandlet { 
	FullGCAssetClassNames: string[];
	static Load(ResourceName: string): CookCommandlet;
	static Find(Outer: UObject, ResourceName: string): CookCommandlet;
	static GetDefaultObject(): CookCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookCommandlet;
	static C(Other: UObject): CookCommandlet;
}

declare class DeveloperSettings extends UObject { 
	static Load(ResourceName: string): DeveloperSettings;
	static Find(Outer: UObject, ResourceName: string): DeveloperSettings;
	static GetDefaultObject(): DeveloperSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeveloperSettings;
	static C(Other: UObject): DeveloperSettings;
}

declare class CookerSettings extends DeveloperSettings { 
	bEnableCookOnTheSide: boolean;
	bEnableBuildDDCInBackground: boolean;
	bIterativeCookingForLaunchOn: boolean;
	bCompileBlueprintsInDevelopmentMode: boolean;
	bCookBlueprintComponentTemplateData: boolean;
	ClassesExcludedOnDedicatedServer: string[];
	ClassesExcludedOnDedicatedClient: string[];
	DefaultPVRTCQuality: number;
	DefaultASTCQualityBySpeed: number;
	DefaultASTCQualityBySize: number;
	static Load(ResourceName: string): CookerSettings;
	static Find(Outer: UObject, ResourceName: string): CookerSettings;
	static GetDefaultObject(): CookerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerSettings;
	static C(Other: UObject): CookerSettings;
}

declare class CookOnTheFlyServer extends UObject { 
	static Load(ResourceName: string): CookOnTheFlyServer;
	static Find(Outer: UObject, ResourceName: string): CookOnTheFlyServer;
	static GetDefaultObject(): CookOnTheFlyServer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookOnTheFlyServer;
	static C(Other: UObject): CookOnTheFlyServer;
}

declare class CrashReporterSettings extends UObject { 
	UploadSymbolsPath: string;
	DownstreamStorage: string;
	RemoteStorage: string[];
	static Load(ResourceName: string): CrashReporterSettings;
	static Find(Outer: UObject, ResourceName: string): CrashReporterSettings;
	static GetDefaultObject(): CrashReporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReporterSettings;
	static C(Other: UObject): CrashReporterSettings;
}

declare type ECurveEditorCurveVisibility = 'AllCurves' | 'SelectedCurves' | 'AnimatedCurves';
declare var ECurveEditorCurveVisibility : { AllCurves:'AllCurves',SelectedCurves:'SelectedCurves',AnimatedCurves:'AnimatedCurves', };
declare type ECurveEditorTangentVisibility = 'AllTangents' | 'SelectedKeys' | 'NoTangents';
declare var ECurveEditorTangentVisibility : { AllTangents:'AllTangents',SelectedKeys:'SelectedKeys',NoTangents:'NoTangents', };
declare class CurveEditorSettings extends UObject { 
	bAutoFrameCurveEditor: boolean;
	bShowCurveEditorCurveToolTips: boolean;
	CurveVisibility: ECurveEditorCurveVisibility;
	TangentVisibility: ECurveEditorTangentVisibility;
	static Load(ResourceName: string): CurveEditorSettings;
	static Find(Outer: UObject, ResourceName: string): CurveEditorSettings;
	static GetDefaultObject(): CurveEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorSettings;
	static C(Other: UObject): CurveEditorSettings;
}

declare class CurveEdOptions extends UObject { 
	MinViewRange: number;
	MaxViewRange: number;
	BackgroundColor: LinearColor;
	LabelColor: LinearColor;
	SelectedLabelColor: LinearColor;
	GridColor: LinearColor;
	GridTextColor: LinearColor;
	LabelBlockBkgColor: LinearColor;
	SelectedKeyColor: LinearColor;
	static Load(ResourceName: string): CurveEdOptions;
	static Find(Outer: UObject, ResourceName: string): CurveEdOptions;
	static GetDefaultObject(): CurveEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdOptions;
	static C(Other: UObject): CurveEdOptions;
}

declare class DebugSkelMeshComponent extends SkeletalMeshComponent { 
	bRenderRawSkeleton: boolean;
	bDrawMesh: boolean;
	bShowBoneNames: boolean;
	bDrawBoneInfluences: boolean;
	bDrawMorphTargetVerts: boolean;
	bDrawNormals: boolean;
	bDrawTangents: boolean;
	bDrawBinormals: boolean;
	bDrawSockets: boolean;
	bSkeletonSocketsVisible: boolean;
	bMeshSocketsVisible: boolean;
	bDisplayRawAnimation: boolean;
	bDisplayNonRetargetedPose: boolean;
	bDisplayAdditiveBasePose: boolean;
	bDisplayBakedAnimation: boolean;
	bDisplaySourceAnimation: boolean;
	bDisplayBound: boolean;
	bPreviewRootMotion: boolean;
	BonesOfInterest: number[];
	MorphTargetOfInterests: MorphTarget[];
	SkelMaterials: MaterialInterface[];
	PreviewInstance: AnimPreviewInstance;
	SavedAnimScriptInstance: AnimInstance;
	bIsUsingInGameBounds: boolean;
	bPerformSingleClothingTick: boolean;
	bPauseClothingSimulationWithAnim: boolean;
	static Load(ResourceName: string): DebugSkelMeshComponent;
	static Find(Outer: UObject, ResourceName: string): DebugSkelMeshComponent;
	static GetDefaultObject(): DebugSkelMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugSkelMeshComponent;
	static C(Other: UObject): DebugSkelMeshComponent;
}

declare class DEditorParameterValue extends UObject { 
	bOverride: boolean;
	ParameterName: string;
	ExpressionId: Guid;
	static Load(ResourceName: string): DEditorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorParameterValue;
	static GetDefaultObject(): DEditorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorParameterValue;
	static C(Other: UObject): DEditorParameterValue;
}

declare class DFontParameters { 
	FontValue: Font;
	FontPage: number;
	clone() : DFontParameters;
	static C(Other: UObject): DFontParameters;
}

declare class DEditorFontParameterValue extends DEditorParameterValue { 
	ParameterValue: DFontParameters;
	static Load(ResourceName: string): DEditorFontParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorFontParameterValue;
	static GetDefaultObject(): DEditorFontParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorFontParameterValue;
	static C(Other: UObject): DEditorFontParameterValue;
}

declare class DEditorScalarParameterValue extends DEditorParameterValue { 
	ParameterValue: number;
	static Load(ResourceName: string): DEditorScalarParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorScalarParameterValue;
	static GetDefaultObject(): DEditorScalarParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorScalarParameterValue;
	static C(Other: UObject): DEditorScalarParameterValue;
}

declare class DComponentMaskParameter { 
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	clone() : DComponentMaskParameter;
	static C(Other: UObject): DComponentMaskParameter;
}

declare class DEditorStaticComponentMaskParameterValue extends DEditorParameterValue { 
	ParameterValue: DComponentMaskParameter;
	static Load(ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static GetDefaultObject(): DEditorStaticComponentMaskParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticComponentMaskParameterValue;
	static C(Other: UObject): DEditorStaticComponentMaskParameterValue;
}

declare class DEditorStaticSwitchParameterValue extends DEditorParameterValue { 
	ParameterValue: boolean;
	static Load(ResourceName: string): DEditorStaticSwitchParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticSwitchParameterValue;
	static GetDefaultObject(): DEditorStaticSwitchParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticSwitchParameterValue;
	static C(Other: UObject): DEditorStaticSwitchParameterValue;
}

declare class DEditorTextureParameterValue extends DEditorParameterValue { 
	ParameterValue: Texture;
	static Load(ResourceName: string): DEditorTextureParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorTextureParameterValue;
	static GetDefaultObject(): DEditorTextureParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorTextureParameterValue;
	static C(Other: UObject): DEditorTextureParameterValue;
}

declare class DEditorVectorParameterValue extends DEditorParameterValue { 
	ParameterValue: LinearColor;
	static Load(ResourceName: string): DEditorVectorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorVectorParameterValue;
	static GetDefaultObject(): DEditorVectorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorVectorParameterValue;
	static C(Other: UObject): DEditorVectorParameterValue;
}

declare class DerivedDataCacheCommandlet extends Commandlet { 
	static Load(ResourceName: string): DerivedDataCacheCommandlet;
	static Find(Outer: UObject, ResourceName: string): DerivedDataCacheCommandlet;
	static GetDefaultObject(): DerivedDataCacheCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DerivedDataCacheCommandlet;
	static C(Other: UObject): DerivedDataCacheCommandlet;
}

declare class DestructableMeshEditorSettings extends UObject { 
	AnimPreviewFloorColor: Color;
	AnimPreviewSkyColor: Color;
	AnimPreviewSkyBrightness: number;
	AnimPreviewLightBrightness: number;
	AnimPreviewLightingDirection: Rotator;
	AnimPreviewDirectionalColor: Color;
	static Load(ResourceName: string): DestructableMeshEditorSettings;
	static Find(Outer: UObject, ResourceName: string): DestructableMeshEditorSettings;
	static GetDefaultObject(): DestructableMeshEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructableMeshEditorSettings;
	static C(Other: UObject): DestructableMeshEditorSettings;
}

declare class DiffAssetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): DiffAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffAssetsCommandlet;
	static GetDefaultObject(): DiffAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffAssetsCommandlet;
	static C(Other: UObject): DiffAssetsCommandlet;
}

declare class DiffFilesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DiffFilesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffFilesCommandlet;
	static GetDefaultObject(): DiffFilesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffFilesCommandlet;
	static C(Other: UObject): DiffFilesCommandlet;
}

declare class DiffPackagesCommandlet extends Commandlet { 
	Packages: Package;
	static Load(ResourceName: string): DiffPackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffPackagesCommandlet;
	static GetDefaultObject(): DiffPackagesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffPackagesCommandlet;
	static C(Other: UObject): DiffPackagesCommandlet;
}

declare class DumpBlueprintsInfoCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpBlueprintsInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpBlueprintsInfoCommandlet;
	static GetDefaultObject(): DumpBlueprintsInfoCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpBlueprintsInfoCommandlet;
	static C(Other: UObject): DumpBlueprintsInfoCommandlet;
}

declare class DumpHiddenCategoriesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpHiddenCategoriesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpHiddenCategoriesCommandlet;
	static GetDefaultObject(): DumpHiddenCategoriesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpHiddenCategoriesCommandlet;
	static C(Other: UObject): DumpHiddenCategoriesCommandlet;
}

declare type ECommentBoxMode = 'GroupMovement' | 'NoGroupMovement';
declare var ECommentBoxMode : { GroupMovement:'GroupMovement',NoGroupMovement:'NoGroupMovement', };
declare class EdGraphNode_Comment extends EdGraphNode { 
	CommentColor: LinearColor;
	bColorCommentBubble: boolean;
	MoveMode: ECommentBoxMode;
	CommentDepth: number;
	static Load(ResourceName: string): EdGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Comment;
	static GetDefaultObject(): EdGraphNode_Comment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Comment;
	static C(Other: UObject): EdGraphNode_Comment;
}

declare class MaterialGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Base;
	static GetDefaultObject(): MaterialGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Base;
	static C(Other: UObject): MaterialGraphNode_Base;
}

declare class MaterialGraphNode_Root extends MaterialGraphNode_Base { 
	Material: Material;
	static Load(ResourceName: string): MaterialGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Root;
	static GetDefaultObject(): MaterialGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Root;
	static C(Other: UObject): MaterialGraphNode_Root;
}

declare class MaterialGraph extends EdGraph { 
	Material: Material;
	MaterialFunction: MaterialFunction;
	RootNode: MaterialGraphNode_Root;
	OriginalMaterialFullName: string;
	static Load(ResourceName: string): MaterialGraph;
	static Find(Outer: UObject, ResourceName: string): MaterialGraph;
	static GetDefaultObject(): MaterialGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraph;
	static C(Other: UObject): MaterialGraph;
}

declare class MaterialGraphNode_Comment extends EdGraphNode_Comment { 
	MaterialExpressionComment: MaterialExpressionComment;
	static Load(ResourceName: string): MaterialGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Comment;
	static GetDefaultObject(): MaterialGraphNode_Comment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Comment;
	static C(Other: UObject): MaterialGraphNode_Comment;
}

declare class EditorActorFolders extends UObject { 
	static Load(ResourceName: string): EditorActorFolders;
	static Find(Outer: UObject, ResourceName: string): EditorActorFolders;
	static GetDefaultObject(): EditorActorFolders;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorActorFolders;
	static C(Other: UObject): EditorActorFolders;
}

declare class EditorAnimBaseObj extends UObject { 
	static Load(ResourceName: string): EditorAnimBaseObj;
	static Find(Outer: UObject, ResourceName: string): EditorAnimBaseObj;
	static GetDefaultObject(): EditorAnimBaseObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimBaseObj;
	static C(Other: UObject): EditorAnimBaseObj;
}

declare class EditorAnimCompositeSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	static Load(ResourceName: string): EditorAnimCompositeSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCompositeSegment;
	static GetDefaultObject(): EditorAnimCompositeSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCompositeSegment;
	static C(Other: UObject): EditorAnimCompositeSegment;
}

declare class EditorAnimSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	static Load(ResourceName: string): EditorAnimSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimSegment;
	static GetDefaultObject(): EditorAnimSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimSegment;
	static C(Other: UObject): EditorAnimSegment;
}

declare class EditorCompositeSection extends EditorAnimBaseObj { 
	CompositeSection: CompositeSection;
	static Load(ResourceName: string): EditorCompositeSection;
	static Find(Outer: UObject, ResourceName: string): EditorCompositeSection;
	static GetDefaultObject(): EditorCompositeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorCompositeSection;
	static C(Other: UObject): EditorCompositeSection;
}

declare class EditorNotifyObject extends EditorAnimBaseObj { 
	Event: AnimNotifyEvent;
	static Load(ResourceName: string): EditorNotifyObject;
	static Find(Outer: UObject, ResourceName: string): EditorNotifyObject;
	static GetDefaultObject(): EditorNotifyObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorNotifyObject;
	static C(Other: UObject): EditorNotifyObject;
}

declare class EditorAnimCurveBoneLinks extends UObject { 
	CurveName: SmartName;
	ConnectedBones: BoneReference[];
	static Load(ResourceName: string): EditorAnimCurveBoneLinks;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCurveBoneLinks;
	static GetDefaultObject(): EditorAnimCurveBoneLinks;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCurveBoneLinks;
	static C(Other: UObject): EditorAnimCurveBoneLinks;
}

declare class EditorBrushBuilder extends BrushBuilder { 
	static Load(ResourceName: string): EditorBrushBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorBrushBuilder;
	static GetDefaultObject(): EditorBrushBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorBrushBuilder;
	static C(Other: UObject): EditorBrushBuilder;
}

declare class ConeBuilder extends EditorBrushBuilder { 
	Z: number;
	CapZ: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	static Load(ResourceName: string): ConeBuilder;
	static Find(Outer: UObject, ResourceName: string): ConeBuilder;
	static GetDefaultObject(): ConeBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConeBuilder;
	static C(Other: UObject): ConeBuilder;
}

declare class CubeBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	Z: number;
	WallThickness: number;
	GroupName: string;
	Hollow: boolean;
	Tessellated: boolean;
	static Load(ResourceName: string): CubeBuilder;
	static Find(Outer: UObject, ResourceName: string): CubeBuilder;
	static GetDefaultObject(): CubeBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CubeBuilder;
	static C(Other: UObject): CubeBuilder;
}

declare class CurvedStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepHeight: number;
	StepWidth: number;
	AngleOfCurve: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	CounterClockwise: boolean;
	static Load(ResourceName: string): CurvedStairBuilder;
	static Find(Outer: UObject, ResourceName: string): CurvedStairBuilder;
	static GetDefaultObject(): CurvedStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurvedStairBuilder;
	static C(Other: UObject): CurvedStairBuilder;
}

declare class CylinderBuilder extends EditorBrushBuilder { 
	Z: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	static Load(ResourceName: string): CylinderBuilder;
	static Find(Outer: UObject, ResourceName: string): CylinderBuilder;
	static GetDefaultObject(): CylinderBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CylinderBuilder;
	static C(Other: UObject): CylinderBuilder;
}

declare class LinearStairBuilder extends EditorBrushBuilder { 
	StepLength: number;
	StepHeight: number;
	StepWidth: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	static Load(ResourceName: string): LinearStairBuilder;
	static Find(Outer: UObject, ResourceName: string): LinearStairBuilder;
	static GetDefaultObject(): LinearStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinearStairBuilder;
	static C(Other: UObject): LinearStairBuilder;
}

declare type ESheetAxis = 'AX_Horizontal' | 'AX_XAxis' | 'AX_YAxis';
declare var ESheetAxis : { AX_Horizontal:'AX_Horizontal',AX_XAxis:'AX_XAxis',AX_YAxis:'AX_YAxis', };
declare class SheetBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	XSegments: number;
	YSegments: number;
	Axis: ESheetAxis;
	GroupName: string;
	static Load(ResourceName: string): SheetBuilder;
	static Find(Outer: UObject, ResourceName: string): SheetBuilder;
	static GetDefaultObject(): SheetBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SheetBuilder;
	static C(Other: UObject): SheetBuilder;
}

declare class SpiralStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepWidth: number;
	StepHeight: number;
	StepThickness: number;
	NumStepsPer360: number;
	NumSteps: number;
	GroupName: string;
	SlopedCeiling: boolean;
	SlopedFloor: boolean;
	CounterClockwise: boolean;
	static Load(ResourceName: string): SpiralStairBuilder;
	static Find(Outer: UObject, ResourceName: string): SpiralStairBuilder;
	static GetDefaultObject(): SpiralStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpiralStairBuilder;
	static C(Other: UObject): SpiralStairBuilder;
}

declare class TetrahedronBuilder extends EditorBrushBuilder { 
	Radius: number;
	SphereExtrapolation: number;
	GroupName: string;
	static Load(ResourceName: string): TetrahedronBuilder;
	static Find(Outer: UObject, ResourceName: string): TetrahedronBuilder;
	static GetDefaultObject(): TetrahedronBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TetrahedronBuilder;
	static C(Other: UObject): TetrahedronBuilder;
}

declare class VolumetricBuilder extends EditorBrushBuilder { 
	Z: number;
	Radius: number;
	NumSheets: number;
	GroupName: string;
	static Load(ResourceName: string): VolumetricBuilder;
	static Find(Outer: UObject, ResourceName: string): VolumetricBuilder;
	static GetDefaultObject(): VolumetricBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricBuilder;
	static C(Other: UObject): VolumetricBuilder;
}

declare class JavascriptTransaction { 
	clone() : JavascriptTransaction;
	static C(Other: UObject): JavascriptTransaction;
	GetContext(): string;
	GetPrimaryObject(): UObject;
	GetTitle(): string;
	static GetContext(Transaction: JavascriptTransaction): string;
	static GetPrimaryObject(Transaction: JavascriptTransaction): UObject;
	static GetTitle(Transaction: JavascriptTransaction): string;
}

declare class Transactor extends UObject { 
	static Load(ResourceName: string): Transactor;
	static Find(Outer: UObject, ResourceName: string): Transactor;
	static GetDefaultObject(): Transactor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Transactor;
	static C(Other: UObject): Transactor;
	GetQueueLength(): number;
	GetTransaction(QueueIndex: number): JavascriptTransaction;
	IsActive(): boolean;
	static GetQueueLength(Transactor: Transactor): number;
	static GetTransaction(Transactor: Transactor,QueueIndex: number): JavascriptTransaction;
	static IsActive(Transactor: Transactor): boolean;
}

declare type ELabelAnchorMode = 'LabelAnchorMode_TopLeft' | 'LabelAnchorMode_TopCenter' | 'LabelAnchorMode_TopRight' | 'LabelAnchorMode_CenterLeft' | 'LabelAnchorMode_Centered' | 'LabelAnchorMode_CenterRight' | 'LabelAnchorMode_BottomLeft' | 'LabelAnchorMode_BottomCenter' | 'LabelAnchorMode_BottomRight';
declare var ELabelAnchorMode : { LabelAnchorMode_TopLeft:'LabelAnchorMode_TopLeft',LabelAnchorMode_TopCenter:'LabelAnchorMode_TopCenter',LabelAnchorMode_TopRight:'LabelAnchorMode_TopRight',LabelAnchorMode_CenterLeft:'LabelAnchorMode_CenterLeft',LabelAnchorMode_Centered:'LabelAnchorMode_Centered',LabelAnchorMode_CenterRight:'LabelAnchorMode_CenterRight',LabelAnchorMode_BottomLeft:'LabelAnchorMode_BottomLeft',LabelAnchorMode_BottomCenter:'LabelAnchorMode_BottomCenter',LabelAnchorMode_BottomRight:'LabelAnchorMode_BottomRight', };
declare type EPlayOnBuildMode = 'PlayOnBuild_Always' | 'PlayOnBuild_Never' | 'PlayOnBuild_Default';
declare var EPlayOnBuildMode : { PlayOnBuild_Always:'PlayOnBuild_Always',PlayOnBuild_Never:'PlayOnBuild_Never',PlayOnBuild_Default:'PlayOnBuild_Default', };
declare type EPlayOnLaunchConfiguration = 'LaunchConfig_Default' | 'LaunchConfig_Debug' | 'LaunchConfig_Development' | 'LaunchConfig_Test' | 'LaunchConfig_Shipping';
declare var EPlayOnLaunchConfiguration : { LaunchConfig_Default:'LaunchConfig_Default',LaunchConfig_Debug:'LaunchConfig_Debug',LaunchConfig_Development:'LaunchConfig_Development',LaunchConfig_Test:'LaunchConfig_Test',LaunchConfig_Shipping:'LaunchConfig_Shipping', };
declare type EPlayNetMode = 'PIE_Standalone' | 'PIE_ListenServer' | 'PIE_Client';
declare var EPlayNetMode : { PIE_Standalone:'PIE_Standalone',PIE_ListenServer:'PIE_ListenServer',PIE_Client:'PIE_Client', };
declare type ELaunchModeType = 'LaunchMode_OnDevice';
declare var ELaunchModeType : { LaunchMode_OnDevice:'LaunchMode_OnDevice', };
declare type EPlayModeLocations = 'PlayLocation_CurrentCameraLocation' | 'PlayLocation_DefaultPlayerStart';
declare var EPlayModeLocations : { PlayLocation_CurrentCameraLocation:'PlayLocation_CurrentCameraLocation',PlayLocation_DefaultPlayerStart:'PlayLocation_DefaultPlayerStart', };
declare type EPlayModeType = 'PlayMode_InViewPort' | 'PlayMode_InEditorFloating' | 'PlayMode_InMobilePreview' | 'PlayMode_InVulkanPreview' | 'PlayMode_InNewProcess' | 'PlayMode_InVR' | 'PlayMode_Simulate' | 'PlayMode_Count';
declare var EPlayModeType : { PlayMode_InViewPort:'PlayMode_InViewPort',PlayMode_InEditorFloating:'PlayMode_InEditorFloating',PlayMode_InMobilePreview:'PlayMode_InMobilePreview',PlayMode_InVulkanPreview:'PlayMode_InVulkanPreview',PlayMode_InNewProcess:'PlayMode_InNewProcess',PlayMode_InVR:'PlayMode_InVR',PlayMode_Simulate:'PlayMode_Simulate',PlayMode_Count:'PlayMode_Count', };
declare class PlayScreenResolution { 
	Description: string;
	Width: number;
	Height: number;
	AspectRatio: string;
	clone() : PlayScreenResolution;
	static C(Other: UObject): PlayScreenResolution;
}

declare class LevelEditorPlaySettings extends UObject { 
	PlayFromHerePlayerStartClassName: string;
	GameGetsMouseControl: boolean;
	ShowMouseControlLabel: boolean;
	MouseControlLabelPosition: ELabelAnchorMode;
	ViewportGetsHMDControl: boolean;
	AutoRecompileBlueprints: boolean;
	EnableSound: boolean;
	PlayInEditorSoundQualityLevel: number;
	bOnlyLoadVisibleLevelsInPIE: boolean;
	bPreferToStreamLevelsInPIE: boolean;
	PIEAlwaysOnTop: boolean;
	NewWindowWidth: number;
	NewWindowHeight: number;
	NewWindowPosition: IntPoint;
	CenterNewWindow: boolean;
	StandaloneWindowWidth: number;
	StandaloneWindowHeight: number;
	StandaloneWindowPosition: IntPoint;
	CenterStandaloneWindow: boolean;
	DisableStandaloneSound: boolean;
	AdditionalLaunchParameters: string;
	BuildGameBeforeLaunch: EPlayOnBuildMode;
	LaunchConfiguration: EPlayOnLaunchConfiguration;
	bAutoCompileBlueprintsOnLaunch: boolean;
	PlayNetMode: EPlayNetMode;
	RunUnderOneProcess: boolean;
	PlayNetDedicated: boolean;
	PlayNumberOfClients: number;
	ClientWindowWidth: number;
	AutoConnectToServer: boolean;
	RouteGamepadToSecondWindow: boolean;
	CreateAudioDeviceForEveryPlayer: boolean;
	ClientWindowHeight: number;
	AdditionalServerGameOptions: string;
	AdditionalLaunchOptions: string;
	MultipleInstanceLastHeight: number;
	MultipleInstanceLastWidth: number;
	MultipleInstancePositions: IntPoint[];
	LastExecutedLaunchDevice: string;
	LastExecutedLaunchName: string;
	LastExecutedLaunchModeType: ELaunchModeType;
	LastExecutedPlayModeLocation: EPlayModeLocations;
	LastExecutedPlayModeType: EPlayModeType;
	LaptopScreenResolutions: PlayScreenResolution[];
	MonitorScreenResolutions: PlayScreenResolution[];
	PhoneScreenResolutions: PlayScreenResolution[];
	TabletScreenResolutions: PlayScreenResolution[];
	TelevisionScreenResolutions: PlayScreenResolution[];
	static Load(ResourceName: string): LevelEditorPlaySettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorPlaySettings;
	static GetDefaultObject(): LevelEditorPlaySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorPlaySettings;
	static C(Other: UObject): LevelEditorPlaySettings;
}

declare class UnrealEdTypes extends UObject { 
	static Load(ResourceName: string): UnrealEdTypes;
	static Find(Outer: UObject, ResourceName: string): UnrealEdTypes;
	static GetDefaultObject(): UnrealEdTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdTypes;
	static C(Other: UObject): UnrealEdTypes;
}

declare type EWASDType = 'WASD_Always' | 'WASD_RMBOnly' | 'WASD_Never';
declare var EWASDType : { WASD_Always:'WASD_Always',WASD_RMBOnly:'WASD_RMBOnly',WASD_Never:'WASD_Never', };
declare type ELandscapeFoliageEditorControlType = 'IgnoreCtrl' | 'RequireCtrl' | 'RequireNoCtrl';
declare var ELandscapeFoliageEditorControlType : { IgnoreCtrl:'IgnoreCtrl',RequireCtrl:'RequireCtrl',RequireNoCtrl:'RequireNoCtrl', };
declare type EScrollGestureDirection = 'UseSystemSetting' | 'Standard' | 'Natural';
declare var EScrollGestureDirection : { UseSystemSetting:'UseSystemSetting',Standard:'Standard',Natural:'Natural', };
declare class SnapToSurfaceSettings { 
	bEnabled: boolean;
	SnapOffsetExtent: number;
	bSnapRotation: boolean;
	clone() : SnapToSurfaceSettings;
	static C(Other: UObject): SnapToSurfaceSettings;
}

declare type ERotationGridMode = 'GridMode_DivisionsOf360' | 'GridMode_Common';
declare var ERotationGridMode : { GridMode_DivisionsOf360:'GridMode_DivisionsOf360',GridMode_Common:'GridMode_Common', };
declare type EMeasuringToolUnits = 'MeasureUnits_Centimeters' | 'MeasureUnits_Meters' | 'MeasureUnits_Kilometers';
declare var EMeasuringToolUnits : { MeasureUnits_Centimeters:'MeasureUnits_Centimeters',MeasureUnits_Meters:'MeasureUnits_Meters',MeasureUnits_Kilometers:'MeasureUnits_Kilometers', };
declare type ELevelViewportType = 'LVT_OrthoXY' | 'LVT_OrthoXZ' | 'LVT_OrthoYZ' | 'LVT_Perspective' | 'LVT_OrthoFreelook' | 'LVT_OrthoNegativeXY' | 'LVT_OrthoNegativeXZ' | 'LVT_OrthoNegativeYZ' | 'LVT_MAX' | 'LVT_None' | 'None';
declare var ELevelViewportType : { LVT_OrthoXY:'LVT_OrthoXY',LVT_OrthoXZ:'LVT_OrthoXZ',LVT_OrthoYZ:'LVT_OrthoYZ',LVT_Perspective:'LVT_Perspective',LVT_OrthoFreelook:'LVT_OrthoFreelook',LVT_OrthoNegativeXY:'LVT_OrthoNegativeXY',LVT_OrthoNegativeXZ:'LVT_OrthoNegativeXZ',LVT_OrthoNegativeYZ:'LVT_OrthoNegativeYZ',LVT_MAX:'LVT_MAX',LVT_None:'LVT_None',None:'None', };
declare type EViewModeIndex = 'VMI_BrushWireframe' | 'VMI_Wireframe' | 'VMI_Unlit' | 'VMI_Lit' | 'VMI_Lit_DetailLighting' | 'VMI_LightingOnly' | 'VMI_LightComplexity' | 'VMI_ShaderComplexity' | 'VMI_LightmapDensity' | 'VMI_LitLightmapDensity' | 'VMI_ReflectionOverride' | 'VMI_VisualizeBuffer' | 'VMI_StationaryLightOverlap' | 'VMI_CollisionPawn' | 'VMI_CollisionVisibility' | 'VMI_LODColoration' | 'VMI_QuadOverdraw' | 'VMI_PrimitiveDistanceAccuracy' | 'VMI_MeshUVDensityAccuracy' | 'VMI_ShaderComplexityWithQuadOverdraw' | 'VMI_HLODColoration' | 'VMI_GroupLODColoration' | 'VMI_MaterialTextureScaleAccuracy' | 'VMI_RequiredTextureResolution' | 'VMI_Max' | 'VMI_Unknown' | 'None';
declare var EViewModeIndex : { VMI_BrushWireframe:'VMI_BrushWireframe',VMI_Wireframe:'VMI_Wireframe',VMI_Unlit:'VMI_Unlit',VMI_Lit:'VMI_Lit',VMI_Lit_DetailLighting:'VMI_Lit_DetailLighting',VMI_LightingOnly:'VMI_LightingOnly',VMI_LightComplexity:'VMI_LightComplexity',VMI_ShaderComplexity:'VMI_ShaderComplexity',VMI_LightmapDensity:'VMI_LightmapDensity',VMI_LitLightmapDensity:'VMI_LitLightmapDensity',VMI_ReflectionOverride:'VMI_ReflectionOverride',VMI_VisualizeBuffer:'VMI_VisualizeBuffer',VMI_StationaryLightOverlap:'VMI_StationaryLightOverlap',VMI_CollisionPawn:'VMI_CollisionPawn',VMI_CollisionVisibility:'VMI_CollisionVisibility',VMI_LODColoration:'VMI_LODColoration',VMI_QuadOverdraw:'VMI_QuadOverdraw',VMI_PrimitiveDistanceAccuracy:'VMI_PrimitiveDistanceAccuracy',VMI_MeshUVDensityAccuracy:'VMI_MeshUVDensityAccuracy',VMI_ShaderComplexityWithQuadOverdraw:'VMI_ShaderComplexityWithQuadOverdraw',VMI_HLODColoration:'VMI_HLODColoration',VMI_GroupLODColoration:'VMI_GroupLODColoration',VMI_MaterialTextureScaleAccuracy:'VMI_MaterialTextureScaleAccuracy',VMI_RequiredTextureResolution:'VMI_RequiredTextureResolution',VMI_Max:'VMI_Max',VMI_Unknown:'VMI_Unknown',None:'None', };
declare class ExposureSettings { 
	LogOffset: number;
	bFixed: boolean;
	clone() : ExposureSettings;
	static C(Other: UObject): ExposureSettings;
}

declare class LevelEditorViewportInstanceSettings { 
	ViewportType: ELevelViewportType;
	PerspViewModeIndex: EViewModeIndex;
	OrthoViewModeIndex: EViewModeIndex;
	EditorShowFlagsString: string;
	GameShowFlagsString: string;
	BufferVisualizationMode: string;
	ExposureSettings: ExposureSettings;
	FOVAngle: number;
	FarViewPlane: number;
	bIsRealtime: boolean;
	bShowFPS: boolean;
	bShowOnScreenStats: boolean;
	EnabledStats: string[];
	bShowFullToolbar: boolean;
	clone() : LevelEditorViewportInstanceSettings;
	static C(Other: UObject): LevelEditorViewportInstanceSettings;
}

declare class LevelEditorViewportInstanceSettingsKeyValuePair { 
	ConfigName: string;
	ConfigSettings: LevelEditorViewportInstanceSettings;
	clone() : LevelEditorViewportInstanceSettingsKeyValuePair;
	static C(Other: UObject): LevelEditorViewportInstanceSettingsKeyValuePair;
}

declare class LevelEditorViewportSettings extends UObject { 
	FlightCameraControlType: EWASDType;
	LandscapeEditorControlType: LandscapeEditorControlType;
	FoliageEditorControlType: FoliageEditorControlType;
	bPanMovesCanvas: boolean;
	bCenterZoomAroundCursor: boolean;
	bAllowTranslateRotateZWidget: boolean;
	bClickBSPSelectsBrush: boolean;
	CameraSpeed: number;
	MouseScrollCameraSpeed: number;
	MouseSensitivty: number;
	bInvertMouseLookYAxis: boolean;
	bInvertOrbitYAxis: boolean;
	bInvertMiddleMousePan: boolean;
	bUseAbsoluteTranslation: boolean;
	bLevelStreamingVolumePrevis: boolean;
	bUseUE3OrbitControls: boolean;
	ScrollGestureDirectionFor3DViewports: ScrollGestureDirectionFor3DViewports;
	ScrollGestureDirectionForOrthoViewports: ScrollGestureDirectionForOrthoViewports;
	bLevelEditorJoystickControls: boolean;
	bUsePowerOf2SnapSize: boolean;
	DecimalGridSizes: number[];
	DecimalGridIntervals: number[];
	Pow2GridSizes: number[];
	Pow2GridIntervals: number[];
	CommonRotGridSizes: number[];
	DivisionsOf360RotGridSizes: number[];
	ScalingGridSizes: number[];
	GridEnabled: boolean;
	RotGridEnabled: boolean;
	SnapScaleEnabled: boolean;
	SnapToSurface: SnapToSurfaceSettings;
	bUsePercentageBasedScaling: boolean;
	bEnableLayerSnap: boolean;
	ActiveSnapLayerIndex: number;
	bEnableActorSnap: boolean;
	ActorSnapScale: number;
	ActorSnapDistance: number;
	bSnapVertices: boolean;
	SnapDistance: number;
	CurrentPosGridSize: number;
	CurrentRotGridSize: number;
	CurrentScalingGridSize: number;
	PreserveNonUniformScale: boolean;
	CurrentRotGridMode: ERotationGridMode;
	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
	bEnableViewportHoverFeedback: boolean;
	bHighlightWithBrackets: boolean;
	bUseLinkedOrthographicViewports: boolean;
	bStrictBoxSelection: boolean;
	bTransparentBoxSelection: boolean;
	bUseSelectionOutline: boolean;
	SelectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	HoverHighlightIntensity: number;
	bEnableViewportCameraToUpdateFromPIV: boolean;
	bPreviewSelectedCameras: boolean;
	CameraPreviewSize: number;
	BackgroundDropDistance: number;
	PreviewMeshes: StringAssetReference[];
	BillboardScale: number;
	TransformWidgetSizeAdjustment: number;
	bSaveEngineStats: boolean;
	MeasuringToolUnits: EMeasuringToolUnits;
	PerInstanceSettings: LevelEditorViewportInstanceSettingsKeyValuePair[];
	static Load(ResourceName: string): LevelEditorViewportSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorViewportSettings;
	static GetDefaultObject(): LevelEditorViewportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorViewportSettings;
	static C(Other: UObject): LevelEditorViewportSettings;
}

declare type EWindowMode = 'Fullscreen' | 'WindowedFullscreen' | 'Windowed';
declare var EWindowMode : { Fullscreen:'Fullscreen',WindowedFullscreen:'WindowedFullscreen',Windowed:'Windowed', };
declare class GameUserSettings extends UObject { 
	bUseVSync: boolean;
	ResolutionSizeX: any;
	ResolutionSizeY: any;
	LastUserConfirmedResolutionSizeX: any;
	LastUserConfirmedResolutionSizeY: any;
	WindowPosX: number;
	WindowPosY: number;
	FullscreenMode: number;
	LastConfirmedFullscreenMode: number;
	PreferredFullscreenMode: number;
	Version: any;
	AudioQualityLevel: number;
	FrameRateLimit: number;
	DesiredScreenWidth: number;
	bUseDesiredScreenHeight: boolean;
	DesiredScreenHeight: number;
	LastRecommendedScreenWidth: number;
	LastRecommendedScreenHeight: number;
	LastCPUBenchmarkResult: number;
	LastGPUBenchmarkResult: number;
	LastCPUBenchmarkSteps: number[];
	LastGPUBenchmarkSteps: number[];
	LastGPUBenchmarkMultiplier: number;
	bUseHDRDisplayOutput: boolean;
	HDRDisplayOutputNits: number;
	OnGameUserSettingsUINeedsUpdate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameUserSettings;
	static Find(Outer: UObject, ResourceName: string): GameUserSettings;
	static GetDefaultObject(): GameUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameUserSettings;
	ValidateSettings(): void;
	SupportsHDRDisplayOutput(): boolean;
	SetVSyncEnabled(bEnable: boolean): void;
	SetVisualEffectQuality(Value: number): void;
	SetViewDistanceQuality(Value: number): void;
	SetToDefaults(): void;
	SetTextureQuality(Value: number): void;
	SetShadowQuality(Value: number): void;
	SetScreenResolution(Resolution: IntPoint): void;
	SetResolutionScaleValue(NewScaleValue: number): void;
	SetResolutionScaleValue_Deprecated(NewScaleValue: number): void;
	SetResolutionScaleNormalized(NewScaleNormalized: number): void;
	SetPostProcessingQuality(Value: number): void;
	SetOverallScalabilityLevel(Value: number): void;
	SetFullscreenMode(InFullscreenMode: EWindowMode): void;
	SetFrameRateLimit(NewLimit: number): void;
	SetFoliageQuality(Value: number): void;
	SetBenchmarkFallbackValues(): void;
	SetAudioQualityLevel(QualityLevel: number): void;
	SetAntiAliasingQuality(Value: number): void;
	SaveSettings(): void;
	RunHardwareBenchmark(WorkScale: number,CPUMultiplier: number,GPUMultiplier: number): void;
	RevertVideoMode(): void;
	ResetToCurrentSettings(): void;
	LoadSettings(bForceReload: boolean): void;
	IsVSyncEnabled(): boolean;
	IsVSyncDirty(): boolean;
	IsScreenResolutionDirty(): boolean;
	IsFullscreenModeDirty(): boolean;
	IsDirty(): boolean;
	GetVisualEffectQuality(): number;
	GetViewDistanceQuality(): number;
	GetTextureQuality(): number;
	GetShadowQuality(): number;
	GetScreenResolution(): IntPoint;
	GetResolutionScaleInformation(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetResolutionScaleInformation_Deprecated(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetPreferredFullscreenMode(): EWindowMode;
	GetPostProcessingQuality(): number;
	GetOverallScalabilityLevel(): number;
	GetLastConfirmedScreenResolution(): IntPoint;
	GetLastConfirmedFullscreenMode(): EWindowMode;
	static GetGameUserSettings(): GameUserSettings;
	GetFullscreenMode(): EWindowMode;
	GetFrameRateLimit(): number;
	GetFoliageQuality(): number;
	GetDesktopResolution(): IntPoint;
	static GetDefaultWindowPosition(): IntPoint;
	static GetDefaultWindowMode(): EWindowMode;
	GetDefaultResolutionScale(): number;
	static GetDefaultResolution(): IntPoint;
	GetAudioQualityLevel(): number;
	GetAntiAliasingQuality(): number;
	EnableHDRDisplayOutput(bEnable: boolean,DisplayNits: number): void;
	ConfirmVideoMode(): void;
	ApplySettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyResolutionSettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyNonResolutionSettings(): void;
	ApplyHardwareBenchmarkResults(): void;
	static C(Other: UObject): GameUserSettings;
}

declare class StatColorMapEntry { 
	In: number;
	Out: Color;
	clone() : StatColorMapEntry;
	static C(Other: UObject): StatColorMapEntry;
}

declare class StatColorMapping { 
	StatName: string;
	ColorMap: StatColorMapEntry[];
	DisableBlend: boolean;
	clone() : StatColorMapping;
	static C(Other: UObject): StatColorMapping;
}

declare class GameNameRedirect { 
	OldGameName: string;
	NewGameName: string;
	clone() : GameNameRedirect;
	static C(Other: UObject): GameNameRedirect;
}

declare class ClassRedirect { 
	ObjectName: string;
	OldClassName: string;
	NewClassName: string;
	OldSubobjName: string;
	NewSubobjName: string;
	NewClassClass: string;
	NewClassPackage: string;
	InstanceOnly: boolean;
	clone() : ClassRedirect;
	static C(Other: UObject): ClassRedirect;
}

declare class PluginRedirect { 
	OldPluginName: string;
	NewPluginName: string;
	clone() : PluginRedirect;
	static C(Other: UObject): PluginRedirect;
}

declare class StructRedirect { 
	OldStructName: string;
	NewStructName: string;
	clone() : StructRedirect;
	static C(Other: UObject): StructRedirect;
}

declare type ETransitionType = 'TT_None' | 'TT_Paused' | 'TT_Loading' | 'TT_Saving' | 'TT_Connecting' | 'TT_Precaching' | 'TT_WaitingToConnect';
declare var ETransitionType : { TT_None:'TT_None',TT_Paused:'TT_Paused',TT_Loading:'TT_Loading',TT_Saving:'TT_Saving',TT_Connecting:'TT_Connecting',TT_Precaching:'TT_Precaching',TT_WaitingToConnect:'TT_WaitingToConnect', };
declare class DropNoteInfo { 
	Location: Vector;
	Rotation: Rotator;
	Comment: string;
	clone() : DropNoteInfo;
	static C(Other: UObject): DropNoteInfo;
}

declare class RigidBodyErrorCorrection { 
	LinearDeltaThresholdSq: number;
	LinearInterpAlpha: number;
	LinearRecipFixTime: number;
	AngularDeltaThreshold: number;
	AngularInterpAlpha: number;
	AngularRecipFixTime: number;
	BodySpeedThresholdSq: number;
	clone() : RigidBodyErrorCorrection;
	static C(Other: UObject): RigidBodyErrorCorrection;
}

declare class NetDriverDefinition { 
	DefName: string;
	DriverClassName: string;
	DriverClassNameFallback: string;
	clone() : NetDriverDefinition;
	static C(Other: UObject): NetDriverDefinition;
}

declare class Engine extends UObject { 
	TinyFont: Font;
	TinyFontName: StringAssetReference;
	SmallFont: Font;
	SmallFontName: StringAssetReference;
	MediumFont: Font;
	MediumFontName: StringAssetReference;
	LargeFont: Font;
	LargeFontName: StringAssetReference;
	SubtitleFont: Font;
	SubtitleFontName: StringAssetReference;
	AdditionalFonts: Font[];
	AdditionalFontNames: string[];
	ConsoleClass: UnrealEngineClass;
	ConsoleClassName: StringClassReference;
	GameViewportClientClass: UnrealEngineClass;
	GameViewportClientClassName: StringClassReference;
	LocalPlayerClass: UnrealEngineClass;
	LocalPlayerClassName: StringClassReference;
	WorldSettingsClass: UnrealEngineClass;
	WorldSettingsClassName: StringClassReference;
	NavigationSystemClassName: StringClassReference;
	NavigationSystemClass: UnrealEngineClass;
	AvoidanceManagerClassName: StringClassReference;
	AvoidanceManagerClass: UnrealEngineClass;
	PhysicsCollisionHandlerClass: UnrealEngineClass;
	PhysicsCollisionHandlerClassName: StringClassReference;
	GameUserSettingsClassName: StringClassReference;
	GameUserSettingsClass: UnrealEngineClass;
	AIControllerClassName: StringClassReference;
	GameUserSettings: GameUserSettings;
	LevelScriptActorClass: UnrealEngineClass;
	LevelScriptActorClassName: StringClassReference;
	DefaultBlueprintBaseClassName: StringClassReference;
	GameSingletonClassName: StringClassReference;
	GameSingleton: UObject;
	PlayOnConsoleSaveDir: string;
	DefaultTexture: Texture2D;
	DefaultTextureName: StringAssetReference;
	DefaultDiffuseTexture: Texture;
	DefaultDiffuseTextureName: StringAssetReference;
	DefaultBSPVertexTexture: Texture2D;
	DefaultBSPVertexTextureName: StringAssetReference;
	HighFrequencyNoiseTexture: Texture2D;
	HighFrequencyNoiseTextureName: StringAssetReference;
	DefaultBokehTexture: Texture2D;
	DefaultBokehTextureName: StringAssetReference;
	WireframeMaterial: Material;
	WireframeMaterialName: string;
	GeomMaterial: Material;
	GeomMaterialName: StringAssetReference;
	DebugMeshMaterial: Material;
	DebugMeshMaterialName: StringAssetReference;
	LevelColorationLitMaterial: Material;
	LevelColorationLitMaterialName: string;
	LevelColorationUnlitMaterial: Material;
	LevelColorationUnlitMaterialName: string;
	LightingTexelDensityMaterial: Material;
	LightingTexelDensityName: string;
	ShadedLevelColorationLitMaterial: Material;
	ShadedLevelColorationLitMaterialName: string;
	ShadedLevelColorationUnlitMaterial: Material;
	ShadedLevelColorationUnlitMaterialName: string;
	RemoveSurfaceMaterial: Material;
	RemoveSurfaceMaterialName: StringAssetReference;
	VertexColorMaterial: Material;
	VertexColorMaterialName: string;
	VertexColorViewModeMaterial_ColorOnly: Material;
	VertexColorViewModeMaterialName_ColorOnly: string;
	VertexColorViewModeMaterial_AlphaAsColor: Material;
	VertexColorViewModeMaterialName_AlphaAsColor: string;
	VertexColorViewModeMaterial_RedOnly: Material;
	VertexColorViewModeMaterialName_RedOnly: string;
	VertexColorViewModeMaterial_GreenOnly: Material;
	VertexColorViewModeMaterialName_GreenOnly: string;
	VertexColorViewModeMaterial_BlueOnly: Material;
	VertexColorViewModeMaterialName_BlueOnly: string;
	BoneWeightMaterial: Material;
	BoneWeightMaterialName: StringAssetReference;
	ConstraintLimitMaterial: Material;
	ConstraintLimitMaterialX: MaterialInstanceDynamic;
	ConstraintLimitMaterialXAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialY: MaterialInstanceDynamic;
	ConstraintLimitMaterialYAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialZ: MaterialInstanceDynamic;
	ConstraintLimitMaterialZAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialPrismatic: MaterialInstanceDynamic;
	InvalidLightmapSettingsMaterial: Material;
	InvalidLightmapSettingsMaterialName: StringAssetReference;
	PreviewShadowsIndicatorMaterial: Material;
	PreviewShadowsIndicatorMaterialName: StringAssetReference;
	ArrowMaterial: Material;
	ArrowMaterialName: StringAssetReference;
	LightingOnlyBrightness: LinearColor;
	ShaderComplexityColors: LinearColor[];
	QuadComplexityColors: LinearColor[];
	LightComplexityColors: LinearColor[];
	StationaryLightOverlapColors: LinearColor[];
	LODColorationColors: LinearColor[];
	HLODColorationColors: LinearColor[];
	StreamingAccuracyColors: LinearColor[];
	MaxPixelShaderAdditiveComplexityCount: number;
	MaxES2PixelShaderAdditiveComplexityCount: number;
	MinLightMapDensity: number;
	IdealLightMapDensity: number;
	MaxLightMapDensity: number;
	bRenderLightMapDensityGrayscale: boolean;
	RenderLightMapDensityGrayscaleScale: number;
	RenderLightMapDensityColorScale: number;
	LightMapDensityVertexMappedColor: LinearColor;
	LightMapDensitySelectedColor: LinearColor;
	StatColorMappings: StatColorMapping[];
	EditorBrushMaterial: Material;
	EditorBrushMaterialName: StringAssetReference;
	DefaultPhysMaterial: PhysicalMaterial;
	DefaultPhysMaterialName: StringAssetReference;
	ActiveGameNameRedirects: GameNameRedirect[];
	ActiveClassRedirects: ClassRedirect[];
	ActivePluginRedirects: PluginRedirect[];
	ActiveStructRedirects: StructRedirect[];
	PreIntegratedSkinBRDFTexture: Texture2D;
	PreIntegratedSkinBRDFTextureName: StringAssetReference;
	MiniFontTexture: Texture2D;
	MiniFontTextureName: StringAssetReference;
	WeightMapPlaceholderTexture: Texture;
	WeightMapPlaceholderTextureName: StringAssetReference;
	LightMapDensityTexture: Texture2D;
	LightMapDensityTextureName: StringAssetReference;
	GameViewport: GameViewportClient;
	DeferredCommands: string[];
	TickCycles: number;
	GameCycles: number;
	ClientCycles: number;
	NearClipPlane: number;
	bHardwareSurveyEnabled: boolean;
	bSubtitlesEnabled: boolean;
	bSubtitlesForcedOff: boolean;
	MaximumLoopIterationCount: number;
	bCanBlueprintsTickByDefault: boolean;
	bOptimizeAnimBlueprintMemberVariableAccess: boolean;
	bAllowMultiThreadedAnimationUpdate: boolean;
	bEnableEditorPSysRealtimeLOD: boolean;
	bSmoothFrameRate: boolean;
	bUseFixedFrameRate: boolean;
	FixedFrameRate: number;
	SmoothedFrameRateRange: FloatRange;
	bCheckForMultiplePawnsSpawnedInAFrame: boolean;
	NumPawnsAllowedToBeSpawnedInAFrame: number;
	bShouldGenerateLowQualityLightmaps: boolean;
	C_WorldBox: Color;
	C_BrushWire: Color;
	C_AddWire: Color;
	C_SubtractWire: Color;
	C_SemiSolidWire: Color;
	C_NonSolidWire: Color;
	C_WireBackground: Color;
	C_ScaleBoxHi: Color;
	C_VolumeCollision: Color;
	C_BSPCollision: Color;
	C_OrthoBackground: Color;
	C_Volume: Color;
	C_BrushShape: Color;
	StreamingDistanceFactor: number;
	TransitionType: ETransitionType;
	TransitionDescription: string;
	TransitionGameMode: string;
	MeshLODRange: number;
	bAllowMatureLanguage: boolean;
	CameraRotationThreshold: number;
	CameraTranslationThreshold: number;
	PrimitiveProbablyVisibleTime: number;
	MaxOcclusionPixelsFraction: number;
	bPauseOnLossOfFocus: boolean;
	MaxParticleResize: number;
	MaxParticleResizeWarn: number;
	PendingDroppedNotes: DropNoteInfo[];
	PhysicErrorCorrection: RigidBodyErrorCorrection;
	NetClientTicksPerSecond: number;
	DisplayGamma: number;
	MinDesiredFrameRate: number;
	DefaultSelectedMaterialColor: LinearColor;
	SelectedMaterialColor: LinearColor;
	SelectionOutlineColor: LinearColor;
	SubduedSelectionOutlineColor: LinearColor;
	SelectedMaterialColorOverride: LinearColor;
	bIsOverridingSelectedColor: boolean;
	bEnableOnScreenDebugMessages: boolean;
	bEnableOnScreenDebugMessagesDisplay: boolean;
	bSuppressMapWarnings: boolean;
	bDisableAILogging: boolean;
	bEnableVisualLogRecordingOnStart: any;
	ScreenSaverInhibitorSemaphore: number;
	bLockReadOnlyLevels: boolean;
	ParticleEventManagerClassPath: string;
	SelectionHighlightIntensity: number;
	SelectionMeshSectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	HoverHighlightIntensity: number;
	SelectionHighlightIntensityBillboards: number;
	NetDriverDefinitions: NetDriverDefinition[];
	ServerActors: string[];
	RuntimeServerActors: string[];
	bStartedLoadMapMovie: boolean;
	NextWorldContextHandle: number;
	static Load(ResourceName: string): Engine;
	static Find(Outer: UObject, ResourceName: string): Engine;
	static GetDefaultObject(): Engine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Engine;
	static C(Other: UObject): Engine;
	GetEditorWorld(): World;
	GetPIEWorld(): World;
	HasUndo(): boolean;
	SetClientTravel(InWorld: World,NextURL: string,InTravelType: ETravelType): void;
	static GetEditorWorld(Engine: Engine): World;
	static GetPIEWorld(Engine: Engine): World;
	static HasUndo(Engine: Engine): boolean;
	static SetClientTravel(Engine: Engine,InWorld: World,NextURL: string,InTravelType: ETravelType): void;
}

declare type ECsgOper = 'CSG_Active' | 'CSG_Add' | 'CSG_Subtract' | 'CSG_Intersect' | 'CSG_Deintersect' | 'CSG_None';
declare var ECsgOper : { CSG_Active:'CSG_Active',CSG_Add:'CSG_Add',CSG_Subtract:'CSG_Subtract',CSG_Intersect:'CSG_Intersect',CSG_Deintersect:'CSG_Deintersect',CSG_None:'CSG_None', };
declare class USelection extends UObject { 
	static Load(ResourceName: string): USelection;
	static Find(Outer: UObject, ResourceName: string): USelection;
	static GetDefaultObject(): USelection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): USelection;
	static C(Other: UObject): USelection;
	Deselect(InObject: UObject): void;
	DeselectAll(InClass: UnrealEngineClass): void;
	GetSelectedObjects(Out?: UObject[]): {Out: UObject[], $: number};
	Select(InObject: UObject): void;
	ToggleSelect(InObject: UObject): void;
	static Deselect(USelection: USelection,InObject: UObject): void;
	static DeselectAll(USelection: USelection,InClass: UnrealEngineClass): void;
	static GetSelectedObjects(USelection: USelection,Out?: UObject[]): {Out: UObject[], $: number};
	static Select(USelection: USelection,InObject: UObject): void;
	static ToggleSelect(USelection: USelection,InObject: UObject): void;
}

declare class GroupActor extends Actor { 
	bLocked: boolean;
	GroupActors: Actor[];
	SubGroups: GroupActor[];
	static GetDefaultObject(): GroupActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GroupActor;
	static C(Other: UObject): GroupActor;
}

declare class EditorEngine extends Engine { 
	TempModel: Model;
	ConversionTempModel: Model;
	Trans: Transactor;
	Bad: Texture2D;
	EditorFont: Font;
	PreviewSoundCue: SoundCue;
	PreviewAudioComponent: AudioComponent;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorPlane: StaticMesh;
	EditorCylinder: StaticMesh;
	bFastRebuild: boolean;
	IsImportingT3D: boolean;
	ClickFlags: any;
	ParentContext: Package;
	UnsnappedClickLocation: Vector;
	ClickLocation: Vector;
	ClickPlane: Plane;
	MouseMovement: Vector;
	DetailMode: EDetailMode;
	UseSizingBox: boolean;
	UseAxisIndicator: boolean;
	GodMode: boolean;
	GameCommandLine: string;
	bShowBrushMarkerPolys: boolean;
	bEnableSocketSnapping: boolean;
	bEnableLODLocking: boolean;
	bGroupingActive: boolean;
	HeightMapExportClassName: string;
	ActorFactories: ActorFactory[];
	UserOpenedFile: string;
	InEditorGameURLOptions: string;
	PlayWorld: World;
	PlayWorldLocation: Vector;
	PlayWorldRotation: Rotator;
	bIsPlayWorldQueued: boolean;
	bIsToggleBetweenPIEandSIEQueued: boolean;
	bIsSimulateInEditorQueued: boolean;
	bAllowMultiplePIEWorlds: boolean;
	bRequestEndPlayMapQueued: boolean;
	bHasPlayWorldPlacement: boolean;
	bUseMobilePreviewForPlayWorld: boolean;
	bUseVRPreviewForPlayWorld: boolean;
	bIsSimulatingInEditor: boolean;
	bSquelchTransactionNotification: boolean;
	PlayFromHerePlayerStartClass: UnrealEngineClass;
	EditorWorld: World;
	ActorsThatWereSelected: any[];
	PlayWorldDestination: number;
	CurrentPlayWorldDestination: number;
	bMobilePreviewPortrait: boolean;
	BuildPlayDevice: number;
	PlayInEditorViewportIndex: number;
	UserEditedPlayWorldURL: string;
	ScratchRenderTarget2048: TextureRenderTarget2D;
	ScratchRenderTarget1024: TextureRenderTarget2D;
	ScratchRenderTarget512: TextureRenderTarget2D;
	ScratchRenderTarget256: TextureRenderTarget2D;
	PreviewMeshComp: StaticMeshComponent;
	PreviewMeshIndex: number;
	bShowPreviewMesh: boolean;
	bCustomCameraAlignEmitter: boolean;
	CustomCameraAlignEmitterDistance: number;
	bDrawSocketsInGMode: boolean;
	bDrawParticleHelpers: boolean;
	BrushBuilders: BrushBuilder[];
	static Load(ResourceName: string): EditorEngine;
	static Find(Outer: UObject, ResourceName: string): EditorEngine;
	static GetDefaultObject(): EditorEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorEngine;
	static C(Other: UObject): EditorEngine;
	bspBrushCSG(Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	CanSelectActor(Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	Exec(InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	FindBrushBuilder(BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	GetSelectedComponents(): USelection;
	GetSelectedObjects(): USelection;
	GetSelectedSet(Class: UnrealEngineClass): USelection;
	RebuildLevel(Level: Level): void;
	RebuildStaticNavigableGeometry(Level: Level): void;
	RedrawAllViewports(bInvalidateHitProxies: boolean): void;
	SelectActor(Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	SelectComponent(Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	SelectGroup(InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	SelectNone(bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	SetMaterial(InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
	static bspBrushCSG(Engine: EditorEngine,Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	static CanSelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	static Exec(Engine: EditorEngine,InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	static FindBrushBuilder(Engine: EditorEngine,BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	static GetSelectedComponents(Engine: EditorEngine): USelection;
	static GetSelectedObjects(Engine: EditorEngine): USelection;
	static GetSelectedSet(Engine: EditorEngine,Class: UnrealEngineClass): USelection;
	static RebuildLevel(Engine: EditorEngine,Level: Level): void;
	static RebuildStaticNavigableGeometry(Engine: EditorEngine,Level: Level): void;
	static RedrawAllViewports(Engine: EditorEngine,bInvalidateHitProxies: boolean): void;
	static SelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	static SelectComponent(Engine: EditorEngine,Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	static SelectGroup(Engine: EditorEngine,InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	static SelectNone(Engine: EditorEngine,bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	static SetMaterial(Engine: EditorEngine,InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
}

declare class EditorCommandCategory { 
	Parent: string;
	Name: string;
	clone() : EditorCommandCategory;
	static C(Other: UObject): EditorCommandCategory;
}

declare class EditorCommand { 
	Parent: string;
	CommandName: string;
	ExecCommand: string;
	Description: string;
	clone() : EditorCommand;
	static C(Other: UObject): EditorCommand;
}

declare class EditorKeyBinding { 
	bCtrlDown: boolean;
	bAltDown: boolean;
	bShiftDown: boolean;
	Key: Key;
	CommandName: string;
	clone() : EditorKeyBinding;
	static C(Other: UObject): EditorKeyBinding;
}

declare class UnrealEdKeyBindings extends UObject { 
	KeyBindings: EditorKeyBinding[];
	static Load(ResourceName: string): UnrealEdKeyBindings;
	static Find(Outer: UObject, ResourceName: string): UnrealEdKeyBindings;
	static GetDefaultObject(): UnrealEdKeyBindings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdKeyBindings;
	static C(Other: UObject): UnrealEdKeyBindings;
}

declare class ClassPickerDefaults { 
	ClassName: string;
	AssetClass: string;
	clone() : ClassPickerDefaults;
	static C(Other: UObject): ClassPickerDefaults;
}

declare class UnrealEdOptions extends UObject { 
	EditorCategories: EditorCommandCategory[];
	EditorCommands: EditorCommand[];
	EditorKeyBindings: UnrealEdKeyBindings;
	bExpandClassPickerClassList: boolean;
	NewAssetDefaultClasses: ClassPickerDefaults[];
	static Load(ResourceName: string): UnrealEdOptions;
	static Find(Outer: UObject, ResourceName: string): UnrealEdOptions;
	static GetDefaultObject(): UnrealEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdOptions;
	static C(Other: UObject): UnrealEdOptions;
}

declare class TemplateMapInfo { 
	ThumbnailTexture: Texture2D;
	Map: string;
	clone() : TemplateMapInfo;
	static C(Other: UObject): TemplateMapInfo;
}

declare class UnrealEdEngine extends EditorEngine { 
	EditorOptionsInst: UnrealEdOptions;
	AutoReimportManager: AutoReimportManager;
	MaterialCopyPasteBuffer: Material;
	MatineeCopyPasteBuffer: UObject[];
	SoundCueCopyPasteBuffer: SoundCue;
	AnimationCompressionAlgorithms: AnimCompress[];
	PackagesToBeFullyLoadedAtStartup: string[];
	CurrentLODParentActor: Actor;
	bNeedWarningForPkgEngineVer: boolean;
	bNeedWarningForWritePermission: boolean;
	SortedSpriteCategories: string[];
	TemplateMapInfos: TemplateMapInfo[];
	CookServer: CookOnTheFlyServer;
	static Load(ResourceName: string): UnrealEdEngine;
	static Find(Outer: UObject, ResourceName: string): UnrealEdEngine;
	static GetDefaultObject(): UnrealEdEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdEngine;
	static C(Other: UObject): UnrealEdEngine;
}

declare type EConsoleForGamepadLabels = 'None' | 'XBoxOne' | 'PS4';
declare var EConsoleForGamepadLabels : { None:'None',XBoxOne:'XBoxOne',PS4:'PS4', };
declare class EditorExperimentalSettings extends UObject { 
	bProceduralFoliage: boolean;
	bEnableLocalizationDashboard: boolean;
	bEnableTranslationPicker: boolean;
	bEnableEditorUtilityBlueprints: boolean;
	bEnableFavoriteSystem: boolean;
	bEnableContentHotReloading: boolean;
	bBlueprintableComponents: boolean;
	bDeviceOutputLog: boolean;
	ConsoleForGamepadLabels: EConsoleForGamepadLabels;
	bToolbarCustomization: boolean;
	bBreakOnExceptions: boolean;
	bBlueprintPerformanceAnalysisTools: boolean;
	bEnableFindAndReplaceReferences: boolean;
	bDrawMidpointArrowsInBlueprints: boolean;
	bShowAudioStreamingOptions: boolean;
	bShowAudioMixerData: boolean;
	bContextMenuChunkAssignments: boolean;
	bDisableCookInEditor: boolean;
	MultiProcessCooking: number;
	bEQSEditor: boolean;
	bLiveStreamingFromEditor: boolean;
	bAllowLateJoinInPIE: boolean;
	bAllowVulkanPreview: boolean;
	bEnableMultithreadedLightmapEncoding: boolean;
	bEnableMultithreadedShadowmapEncoding: boolean;
	bUseOpenCLForConvexHullDecomp: boolean;
	bEnableVREditing: boolean;
	bEnableAutoVREditMode: boolean;
	bAlwaysShowVRTutorial: boolean;
	bAllowPotentiallyUnsafePropertyEditing: boolean;
	bFacialAnimationImporter: boolean;
	static Load(ResourceName: string): EditorExperimentalSettings;
	static Find(Outer: UObject, ResourceName: string): EditorExperimentalSettings;
	static GetDefaultObject(): EditorExperimentalSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorExperimentalSettings;
	static C(Other: UObject): EditorExperimentalSettings;
}

declare type ELoadLevelAtStartup = 'None' | 'ProjectDefault' | 'LastOpened';
declare var ELoadLevelAtStartup : { None:'None',ProjectDefault:'ProjectDefault',LastOpened:'LastOpened', };
declare class AutoReimportWildcard { 
	Wildcard: string;
	bInclude: boolean;
	clone() : AutoReimportWildcard;
	static C(Other: UObject): AutoReimportWildcard;
}

declare class AutoReimportDirectoryConfig { 
	SourceDirectory: string;
	MountPoint: string;
	Wildcards: AutoReimportWildcard[];
	clone() : AutoReimportDirectoryConfig;
	static C(Other: UObject): AutoReimportDirectoryConfig;
}

declare class EditorLoadingSavingSettings extends UObject { 
	LoadLevelAtStartup: ELoadLevelAtStartup;
	bForceCompilationAtStartup: boolean;
	bRestoreOpenAssetTabsOnRestart: boolean;
	bEnableSourceControlCompatabilityCheck: boolean;
	bMonitorContentDirectories: boolean;
	AutoReimportDirectories: string[];
	AutoReimportDirectorySettings: AutoReimportDirectoryConfig[];
	AutoReimportThreshold: number;
	bAutoCreateAssets: boolean;
	bAutoDeleteAssets: boolean;
	bDetectChangesOnStartup: boolean;
	bPromptBeforeAutoImporting: boolean;
	bDeleteSourceFilesWithAssets: boolean;
	bAutoReimportTextures: boolean;
	bAutoReimportCSV: boolean;
	bDirtyMigratedBlueprints: boolean;
	bAutoSaveEnable: boolean;
	bAutoSaveMaps: boolean;
	bAutoSaveContent: boolean;
	AutoSaveTimeMinutes: number;
	AutoSaveWarningInSeconds: number;
	bAutomaticallyCheckoutOnAssetModification: boolean;
	bPromptForCheckoutOnAssetModification: boolean;
	bSCCAutoAddNewFiles: boolean;
	bSCCUseGlobalSettings: boolean;
	TextDiffToolPath: FilePath;
	static Load(ResourceName: string): EditorLoadingSavingSettings;
	static Find(Outer: UObject, ResourceName: string): EditorLoadingSavingSettings;
	static GetDefaultObject(): EditorLoadingSavingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLoadingSavingSettings;
	static C(Other: UObject): EditorLoadingSavingSettings;
}

declare class EditorMiscSettings extends UObject { 
	static Load(ResourceName: string): EditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): EditorMiscSettings;
	static GetDefaultObject(): EditorMiscSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorMiscSettings;
	static C(Other: UObject): EditorMiscSettings;
}

declare class EditorParentPlayerListObj extends UObject { 
	Overrides: AnimParentNodeAssetOverride[];
	static Load(ResourceName: string): EditorParentPlayerListObj;
	static Find(Outer: UObject, ResourceName: string): EditorParentPlayerListObj;
	static GetDefaultObject(): EditorParentPlayerListObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorParentPlayerListObj;
	static C(Other: UObject): EditorParentPlayerListObj;
}

declare type EFbxExportCompatibility = 'FBX_2010' | 'FBX_2011' | 'FBX_2012' | 'FBX_2013' | 'FBX_2014' | 'FBX_2016';
declare var EFbxExportCompatibility : { FBX_2010:'FBX_2010',FBX_2011:'FBX_2011',FBX_2012:'FBX_2012',FBX_2013:'FBX_2013',FBX_2014:'FBX_2014',FBX_2016:'FBX_2016', };
declare class EditorPerProjectUserSettings extends UObject { 
	bDisplayUIExtensionPoints: boolean;
	bDisplayDocumentationLink: boolean;
	bDisplayActionListItemRefIds: boolean;
	bAlwaysGatherBehaviorTreeDebuggerData: boolean;
	bDisplayEngineVersionInBadge: boolean;
	bUseSimplygonSwarm: boolean;
	SimplygonServerIP: string;
	bEnableSwarmDebugging: boolean;
	SimplygonSwarmDelay: any;
	SwarmNumOfConcurrentJobs: any;
	SwarmMaxUploadChunkSizeInMB: any;
	SwarmIntermediateFolder: string;
	bShowFrameRateAndMemory: boolean;
	bThrottleCPUWhenNotForeground: boolean;
	bMonitorEditorPerformance: boolean;
	bAutomaticallyHotReloadNewClasses: boolean;
	bShowCompilerLogOnCompileError: boolean;
	bKeepAttachHierarchy: boolean;
	bMapSkeletalMotionToRoot: boolean;
	FbxExportCompatibility: FbxExportCompatibility;
	bFbxExportCollisionMesh: boolean;
	bUseCurvesForDistributions: boolean;
	PropertyMatrix_NumberOfPasteOperationsBeforeWarning: number;
	bSCSEditorShowGrid: boolean;
	bSCSEditorShowFloor: boolean;
	SCSViewportCameraSpeed: number;
	bAutoloadCheckedOutPackages: boolean;
	bSuppressFullyLoadPrompt: boolean;
	bAllowSelectTranslucent: boolean;
	BlueprintFavorites: BlueprintPaletteFavorites;
	AssetViewerProfileIndex: number;
	MaterialQualityLevel: number;
	static Load(ResourceName: string): EditorPerProjectUserSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerProjectUserSettings;
	static GetDefaultObject(): EditorPerProjectUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerProjectUserSettings;
	static C(Other: UObject): EditorPerProjectUserSettings;
}

declare type EUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Lightyears' | 'Degrees' | 'Radians' | 'MetersPerSecond' | 'KilometersPerHour' | 'MilesPerHour' | 'Celsius' | 'Farenheit' | 'Kelvin' | 'Micrograms' | 'Milligrams' | 'Grams' | 'Kilograms' | 'MetricTons' | 'Ounces' | 'Pounds' | 'Stones' | 'Newtons' | 'PoundsForce' | 'KilogramsForce' | 'Hertz' | 'Kilohertz' | 'Megahertz' | 'Gigahertz' | 'RevolutionsPerMinute' | 'Bytes' | 'Kilobytes' | 'Megabytes' | 'Gigabytes' | 'Terabytes' | 'Lumens' | 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days' | 'Months' | 'Years' | 'Multiplier' | 'Unspecified';
declare var EUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Lightyears:'Lightyears',Degrees:'Degrees',Radians:'Radians',MetersPerSecond:'MetersPerSecond',KilometersPerHour:'KilometersPerHour',MilesPerHour:'MilesPerHour',Celsius:'Celsius',Farenheit:'Farenheit',Kelvin:'Kelvin',Micrograms:'Micrograms',Milligrams:'Milligrams',Grams:'Grams',Kilograms:'Kilograms',MetricTons:'MetricTons',Ounces:'Ounces',Pounds:'Pounds',Stones:'Stones',Newtons:'Newtons',PoundsForce:'PoundsForce',KilogramsForce:'KilogramsForce',Hertz:'Hertz',Kilohertz:'Kilohertz',Megahertz:'Megahertz',Gigahertz:'Gigahertz',RevolutionsPerMinute:'RevolutionsPerMinute',Bytes:'Bytes',Kilobytes:'Kilobytes',Megabytes:'Megabytes',Gigabytes:'Gigabytes',Terabytes:'Terabytes',Lumens:'Lumens',Milliseconds:'Milliseconds',Seconds:'Seconds',Minutes:'Minutes',Hours:'Hours',Days:'Days',Months:'Months',Years:'Years',Multiplier:'Multiplier',Unspecified:'Unspecified', };
declare type EUnitDisplay = 'None' | 'Metric' | 'Imperial' | 'Invalid';
declare var EUnitDisplay : { None:'None',Metric:'Metric',Imperial:'Imperial',Invalid:'Invalid', };
declare type EDefaultLocationUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Invalid';
declare var EDefaultLocationUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Invalid:'Invalid', };
declare class EditorProjectAppearanceSettings extends DeveloperSettings { 
	bDisplayUnits: boolean;
	DistanceUnits: DistanceUnits[];
	MassUnits: MassUnits[];
	TimeUnits: TimeUnits[];
	AngleUnits: AngleUnits;
	SpeedUnits: SpeedUnits;
	TemperatureUnits: TemperatureUnits;
	ForceUnits: ForceUnits;
	UnitDisplay: UnitDisplay;
	DefaultInputUnits: DefaultInputUnits;
	static Load(ResourceName: string): EditorProjectAppearanceSettings;
	static Find(Outer: UObject, ResourceName: string): EditorProjectAppearanceSettings;
	static GetDefaultObject(): EditorProjectAppearanceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorProjectAppearanceSettings;
	static C(Other: UObject): EditorProjectAppearanceSettings;
}

declare type ELevelEditor2DAxis = 'X' | 'Y' | 'Z';
declare var ELevelEditor2DAxis : { X:'X',Y:'Y',Z:'Z', };
declare class Mode2DLayer { 
	Name: string;
	Depth: number;
	clone() : Mode2DLayer;
	static C(Other: UObject): Mode2DLayer;
}

declare class LevelEditor2DSettings extends DeveloperSettings { 
	bEnable2DWidget: boolean;
	bEnableSnapLayers: boolean;
	SnapAxis: SnapAxis;
	SnapLayers: Mode2DLayer[];
	static Load(ResourceName: string): LevelEditor2DSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditor2DSettings;
	static GetDefaultObject(): LevelEditor2DSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditor2DSettings;
	static C(Other: UObject): LevelEditor2DSettings;
}

declare class EditorSettings extends UObject { 
	bLoadTheMostRecentlyLoadedProjectAtStartup: boolean;
	bEditorAnalyticsEnabled: boolean;
	bOpenSourcesPanelByDefault: boolean;
	RecentlyOpenedProjectFiles: string[];
	CreatedProjectPaths: string[];
	bCopyStarterContentPreference: boolean;
	CompletedSurveys: Guid[];
	InProgressSurveys: Guid[];
	AutoScalabilityWorkScaleAmount: number;
	static Load(ResourceName: string): EditorSettings;
	static Find(Outer: UObject, ResourceName: string): EditorSettings;
	static GetDefaultObject(): EditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSettings;
	static C(Other: UObject): EditorSettings;
}

declare class EditorSkeletonNotifyObj extends UObject { 
	Name: string;
	static Load(ResourceName: string): EditorSkeletonNotifyObj;
	static Find(Outer: UObject, ResourceName: string): EditorSkeletonNotifyObj;
	static GetDefaultObject(): EditorSkeletonNotifyObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSkeletonNotifyObj;
	static C(Other: UObject): EditorSkeletonNotifyObj;
}

declare class ExportTextContainer extends UObject { 
	ExportText: string;
	static Load(ResourceName: string): ExportTextContainer;
	static Find(Outer: UObject, ResourceName: string): ExportTextContainer;
	static GetDefaultObject(): ExportTextContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportTextContainer;
	static C(Other: UObject): ExportTextContainer;
}

declare class AnimBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	TargetSkeleton: Skeleton;
	static Load(ResourceName: string): AnimBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintFactory;
	static GetDefaultObject(): AnimBlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintFactory;
	static C(Other: UObject): AnimBlueprintFactory;
}

declare class AnimCompositeFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	static Load(ResourceName: string): AnimCompositeFactory;
	static Find(Outer: UObject, ResourceName: string): AnimCompositeFactory;
	static GetDefaultObject(): AnimCompositeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompositeFactory;
	static C(Other: UObject): AnimCompositeFactory;
}

declare class AnimMontageFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	static Load(ResourceName: string): AnimMontageFactory;
	static Find(Outer: UObject, ResourceName: string): AnimMontageFactory;
	static GetDefaultObject(): AnimMontageFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimMontageFactory;
	static C(Other: UObject): AnimMontageFactory;
}

declare class AnimSequenceFactory extends Factory { 
	TargetSkeleton: Skeleton;
	static Load(ResourceName: string): AnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceFactory;
	static GetDefaultObject(): AnimSequenceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceFactory;
	static C(Other: UObject): AnimSequenceFactory;
}

declare class BlendSpaceFactory1D extends Factory { 
	TargetSkeleton: Skeleton;
	static Load(ResourceName: string): BlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactory1D;
	static GetDefaultObject(): BlendSpaceFactory1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactory1D;
	static C(Other: UObject): BlendSpaceFactory1D;
}

declare class AimOffsetBlendSpaceFactory1D extends BlendSpaceFactory1D { 
	static Load(ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static GetDefaultObject(): AimOffsetBlendSpaceFactory1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactory1D;
	static C(Other: UObject): AimOffsetBlendSpaceFactory1D;
}

declare class BlendSpaceFactoryNew extends Factory { 
	TargetSkeleton: Skeleton;
	static Load(ResourceName: string): BlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactoryNew;
	static GetDefaultObject(): BlendSpaceFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactoryNew;
	static C(Other: UObject): BlendSpaceFactoryNew;
}

declare class AimOffsetBlendSpaceFactoryNew extends BlendSpaceFactoryNew { 
	static Load(ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static GetDefaultObject(): AimOffsetBlendSpaceFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactoryNew;
	static C(Other: UObject): AimOffsetBlendSpaceFactoryNew;
}

declare class BlueprintFactory extends Factory { 
	ParentClass: UnrealEngineClass;
	static Load(ResourceName: string): BlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFactory;
	static GetDefaultObject(): BlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFactory;
	static C(Other: UObject): BlueprintFactory;
}

declare class BlueprintFunctionLibraryFactory extends BlueprintFactory { 
	static Load(ResourceName: string): BlueprintFunctionLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibraryFactory;
	static GetDefaultObject(): BlueprintFunctionLibraryFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibraryFactory;
	static C(Other: UObject): BlueprintFunctionLibraryFactory;
}

declare class BlueprintMacroFactory extends BlueprintFactory { 
	static Load(ResourceName: string): BlueprintMacroFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintMacroFactory;
	static GetDefaultObject(): BlueprintMacroFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMacroFactory;
	static C(Other: UObject): BlueprintMacroFactory;
}

declare class BlueprintInterfaceFactory extends Factory { 
	static Load(ResourceName: string): BlueprintInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintInterfaceFactory;
	static GetDefaultObject(): BlueprintInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintInterfaceFactory;
	static C(Other: UObject): BlueprintInterfaceFactory;
}

declare class CameraAnimFactory extends Factory { 
	static Load(ResourceName: string): CameraAnimFactory;
	static Find(Outer: UObject, ResourceName: string): CameraAnimFactory;
	static GetDefaultObject(): CameraAnimFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnimFactory;
	static C(Other: UObject): CameraAnimFactory;
}

declare class CanvasRenderTarget2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static GetDefaultObject(): CanvasRenderTarget2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2DFactoryNew;
	static C(Other: UObject): CanvasRenderTarget2DFactoryNew;
}

declare type ECSVImportType = 'ECSV_DataTable' | 'ECSV_CurveTable' | 'ECSV_CurveFloat' | 'ECSV_CurveVector' | 'ECSV_CurveLinearColor';
declare var ECSVImportType : { ECSV_DataTable:'ECSV_DataTable',ECSV_CurveTable:'ECSV_CurveTable',ECSV_CurveFloat:'ECSV_CurveFloat',ECSV_CurveVector:'ECSV_CurveVector',ECSV_CurveLinearColor:'ECSV_CurveLinearColor', };
declare class CSVImportSettings { 
	ImportRowStruct: ScriptStruct;
	ImportType: ImportType;
	ImportCurveInterpMode: ERichCurveInterpMode;
	clone() : CSVImportSettings;
	static C(Other: UObject): CSVImportSettings;
}

declare class CSVImportFactory extends Factory { 
	AutomatedImportSettings: CSVImportSettings;
	static Load(ResourceName: string): CSVImportFactory;
	static Find(Outer: UObject, ResourceName: string): CSVImportFactory;
	static GetDefaultObject(): CSVImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CSVImportFactory;
	static C(Other: UObject): CSVImportFactory;
}

declare class ReimportCurveFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportCurveFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveFactory;
	static GetDefaultObject(): ReimportCurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveFactory;
	static C(Other: UObject): ReimportCurveFactory;
}

declare class ReimportCurveTableFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportCurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveTableFactory;
	static GetDefaultObject(): ReimportCurveTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveTableFactory;
	static C(Other: UObject): ReimportCurveTableFactory;
}

declare class ReimportDataTableFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportDataTableFactory;
	static GetDefaultObject(): ReimportDataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportDataTableFactory;
	static C(Other: UObject): ReimportDataTableFactory;
}

declare class CurveFactory extends Factory { 
	CurveClass: UnrealEngineClass;
	static Load(ResourceName: string): CurveFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFactory;
	static GetDefaultObject(): CurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFactory;
	static C(Other: UObject): CurveFactory;
}

declare class CurveFloatFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveFloatFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFloatFactory;
	static GetDefaultObject(): CurveFloatFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFloatFactory;
	static C(Other: UObject): CurveFloatFactory;
}

declare class CurveLinearColorFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveLinearColorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorFactory;
	static GetDefaultObject(): CurveLinearColorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorFactory;
	static C(Other: UObject): CurveLinearColorFactory;
}

declare class CurveVectorFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveVectorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveVectorFactory;
	static GetDefaultObject(): CurveVectorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveVectorFactory;
	static C(Other: UObject): CurveVectorFactory;
}

declare class CurveImportFactory extends Factory { 
	static Load(ResourceName: string): CurveImportFactory;
	static Find(Outer: UObject, ResourceName: string): CurveImportFactory;
	static GetDefaultObject(): CurveImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveImportFactory;
	static C(Other: UObject): CurveImportFactory;
}

declare class DataAssetFactory extends Factory { 
	DataAssetClass: UnrealEngineClass;
	static Load(ResourceName: string): DataAssetFactory;
	static Find(Outer: UObject, ResourceName: string): DataAssetFactory;
	static GetDefaultObject(): DataAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataAssetFactory;
	static C(Other: UObject): DataAssetFactory;
}

declare class DataTableFactory extends Factory { 
	Struct: ScriptStruct;
	static Load(ResourceName: string): DataTableFactory;
	static Find(Outer: UObject, ResourceName: string): DataTableFactory;
	static GetDefaultObject(): DataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFactory;
	static C(Other: UObject): DataTableFactory;
}

declare class DestructibleMeshFactory extends Factory { 
	static Load(ResourceName: string): DestructibleMeshFactory;
	static Find(Outer: UObject, ResourceName: string): DestructibleMeshFactory;
	static GetDefaultObject(): DestructibleMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleMeshFactory;
	static C(Other: UObject): DestructibleMeshFactory;
}

declare class ReimportDestructibleMeshFactory extends DestructibleMeshFactory { 
	static Load(ResourceName: string): ReimportDestructibleMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportDestructibleMeshFactory;
	static GetDefaultObject(): ReimportDestructibleMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportDestructibleMeshFactory;
	static C(Other: UObject): ReimportDestructibleMeshFactory;
}

declare class EnumFactory extends Factory { 
	static Load(ResourceName: string): EnumFactory;
	static Find(Outer: UObject, ResourceName: string): EnumFactory;
	static GetDefaultObject(): EnumFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnumFactory;
	static C(Other: UObject): EnumFactory;
}

declare type EFBXImportType = 'FBXIT_StaticMesh' | 'FBXIT_SkeletalMesh' | 'FBXIT_Animation' | 'FBXIT_SubDSurface';
declare var EFBXImportType : { FBXIT_StaticMesh:'FBXIT_StaticMesh',FBXIT_SkeletalMesh:'FBXIT_SkeletalMesh',FBXIT_Animation:'FBXIT_Animation',FBXIT_SubDSurface:'FBXIT_SubDSurface', };
declare class FbxSceneImportData extends UObject { 
	SourceFbxFile: string;
	static Load(ResourceName: string): FbxSceneImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportData;
	static GetDefaultObject(): FbxSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportData;
	static C(Other: UObject): FbxSceneImportData;
}

declare class FbxAssetImportData extends AssetImportData { 
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bConvertScene: boolean;
	bForceFrontXAxis: boolean;
	bConvertSceneUnit: boolean;
	bImportAsScene: boolean;
	FbxSceneImportDataReference: FbxSceneImportData;
	static Load(ResourceName: string): FbxAssetImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAssetImportData;
	static GetDefaultObject(): FbxAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAssetImportData;
	static C(Other: UObject): FbxAssetImportData;
}

declare type EFBXNormalImportMethod = 'FBXNIM_ComputeNormals' | 'FBXNIM_ImportNormals' | 'FBXNIM_ImportNormalsAndTangents';
declare var EFBXNormalImportMethod : { FBXNIM_ComputeNormals:'FBXNIM_ComputeNormals',FBXNIM_ImportNormals:'FBXNIM_ImportNormals',FBXNIM_ImportNormalsAndTangents:'FBXNIM_ImportNormalsAndTangents', };
declare type EFBXNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace';
declare var EFBXNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace', };
declare class FbxMeshImportData extends FbxAssetImportData { 
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportMeshLODs: boolean;
	NormalImportMethod: EFBXNormalImportMethod;
	NormalGenerationMethod: EFBXNormalGenerationMethod;
	static Load(ResourceName: string): FbxMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxMeshImportData;
	static GetDefaultObject(): FbxMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxMeshImportData;
	static C(Other: UObject): FbxMeshImportData;
}

declare type EVertexColorImportOption = 'Replace' | 'Ignore' | 'Override';
declare var EVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override', };
declare class FbxStaticMeshImportData extends FbxMeshImportData { 
	StaticMeshLODGroup: string;
	VertexColorImportOption: EVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	bAutoGenerateCollision: boolean;
	bCombineMeshes: boolean;
	static Load(ResourceName: string): FbxStaticMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxStaticMeshImportData;
	static GetDefaultObject(): FbxStaticMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxStaticMeshImportData;
	static C(Other: UObject): FbxStaticMeshImportData;
}

declare class FbxSkeletalMeshImportData extends FbxMeshImportData { 
	bUpdateSkeletonReferencePose: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	bKeepOverlappingVertices: boolean;
	static Load(ResourceName: string): FbxSkeletalMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSkeletalMeshImportData;
	static GetDefaultObject(): FbxSkeletalMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSkeletalMeshImportData;
	static C(Other: UObject): FbxSkeletalMeshImportData;
}

declare type EFBXAnimationLengthImportType = 'FBXALIT_ExportedTime' | 'FBXALIT_AnimatedKey' | 'FBXALIT_SetRange';
declare var EFBXAnimationLengthImportType : { FBXALIT_ExportedTime:'FBXALIT_ExportedTime',FBXALIT_AnimatedKey:'FBXALIT_AnimatedKey',FBXALIT_SetRange:'FBXALIT_SetRange', };
declare class FbxAnimSequenceImportData extends FbxAssetImportData { 
	bImportMeshesInBoneHierarchy: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	StartFrame: number;
	EndFrame: number;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	SourceAnimationName: string;
	bImportCustomAttribute: boolean;
	bSetMaterialDriveParameterOnCustomAttribute: boolean;
	MaterialCurveSuffixes: string[];
	bRemoveRedundantKeys: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	bDoNotImportCurveWithZero: boolean;
	bPreserveLocalTransform: boolean;
	static Load(ResourceName: string): FbxAnimSequenceImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAnimSequenceImportData;
	static GetDefaultObject(): FbxAnimSequenceImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAnimSequenceImportData;
	static C(Other: UObject): FbxAnimSequenceImportData;
}

declare type EMaterialSearchLocation = 'Local' | 'UnderParent' | 'UnderRoot' | 'AllAssets';
declare var EMaterialSearchLocation : { Local:'Local',UnderParent:'UnderParent',UnderRoot:'UnderRoot',AllAssets:'AllAssets', };
declare class FbxTextureImportData extends FbxAssetImportData { 
	bInvertNormalMaps: boolean;
	MaterialSearchLocation: EMaterialSearchLocation;
	BaseMaterialName: StringAssetReference;
	BaseColorName: string;
	BaseDiffuseTextureName: string;
	BaseNormalTextureName: string;
	BaseEmissiveColorName: string;
	BaseEmmisiveTextureName: string;
	BaseSpecularTextureName: string;
	static Load(ResourceName: string): FbxTextureImportData;
	static Find(Outer: UObject, ResourceName: string): FbxTextureImportData;
	static GetDefaultObject(): FbxTextureImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTextureImportData;
	static C(Other: UObject): FbxTextureImportData;
}

declare class FbxImportUI extends UObject { 
	bIsObjImport: boolean;
	OriginalImportType: EFBXImportType;
	MeshTypeToImport: EFBXImportType;
	bOverrideFullName: boolean;
	bImportAsSkeletal: boolean;
	bImportAsSubDSurface: boolean;
	bImportMesh: boolean;
	Skeleton: Skeleton;
	bCreatePhysicsAsset: boolean;
	PhysicsAsset: PhysicsAsset;
	bImportAnimations: boolean;
	OverrideAnimationName: string;
	bImportRigidMesh: boolean;
	bImportMaterials: boolean;
	bImportTextures: boolean;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	bAutomatedImportShouldDetectType: boolean;
	static Load(ResourceName: string): FbxImportUI;
	static Find(Outer: UObject, ResourceName: string): FbxImportUI;
	static GetDefaultObject(): FbxImportUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxImportUI;
	static C(Other: UObject): FbxImportUI;
}

declare class FbxFactory extends Factory { 
	ImportUI: FbxImportUI;
	static Load(ResourceName: string): FbxFactory;
	static Find(Outer: UObject, ResourceName: string): FbxFactory;
	static GetDefaultObject(): FbxFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxFactory;
	static C(Other: UObject): FbxFactory;
}

declare class ReimportFbxAnimSequenceFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxAnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxAnimSequenceFactory;
	static GetDefaultObject(): ReimportFbxAnimSequenceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxAnimSequenceFactory;
	static C(Other: UObject): ReimportFbxAnimSequenceFactory;
}

declare class ReimportFbxSkeletalMeshFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static GetDefaultObject(): ReimportFbxSkeletalMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSkeletalMeshFactory;
	static C(Other: UObject): ReimportFbxSkeletalMeshFactory;
}

declare class ReimportFbxStaticMeshFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxStaticMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxStaticMeshFactory;
	static GetDefaultObject(): ReimportFbxStaticMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxStaticMeshFactory;
	static C(Other: UObject): ReimportFbxStaticMeshFactory;
}

declare type EFBXSceneOptionsCreateHierarchyType = 'FBXSOCHT_CreateLevelActors' | 'FBXSOCHT_CreateActorComponents' | 'FBXSOCHT_CreateBlueprint';
declare var EFBXSceneOptionsCreateHierarchyType : { FBXSOCHT_CreateLevelActors:'FBXSOCHT_CreateLevelActors',FBXSOCHT_CreateActorComponents:'FBXSOCHT_CreateActorComponents',FBXSOCHT_CreateBlueprint:'FBXSOCHT_CreateBlueprint', };
declare class FbxSceneImportOptions extends UObject { 
	bCreateContentFolderHierarchy: boolean;
	bImportAsDynamic: boolean;
	HierarchyType: EFBXSceneOptionsCreateHierarchyType;
	bForceFrontXAxis: boolean;
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportStaticMeshLODs: boolean;
	bImportSkeletalMeshLODs: boolean;
	bInvertNormalMaps: boolean;
	static Load(ResourceName: string): FbxSceneImportOptions;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptions;
	static GetDefaultObject(): FbxSceneImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptions;
	static C(Other: UObject): FbxSceneImportOptions;
}

declare type EFbxSceneVertexColorImportOption = 'Replace' | 'Ignore' | 'Override';
declare var EFbxSceneVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override', };
declare type EFBXSceneNormalImportMethod = 'FBXSceneNIM_ComputeNormals' | 'FBXSceneNIM_ImportNormals' | 'FBXSceneNIM_ImportNormalsAndTangents';
declare var EFBXSceneNormalImportMethod : { FBXSceneNIM_ComputeNormals:'FBXSceneNIM_ComputeNormals',FBXSceneNIM_ImportNormals:'FBXSceneNIM_ImportNormals',FBXSceneNIM_ImportNormalsAndTangents:'FBXSceneNIM_ImportNormalsAndTangents', };
declare type EFBXSceneNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace';
declare var EFBXSceneNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace', };
declare class FbxSceneImportOptionsStaticMesh extends UObject { 
	StaticMeshLODGroup: string;
	bAutoGenerateCollision: boolean;
	VertexColorImportOption: EFbxSceneVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	NormalImportMethod: EFBXSceneNormalImportMethod;
	NormalGenerationMethod: EFBXSceneNormalGenerationMethod;
	static Load(ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static GetDefaultObject(): FbxSceneImportOptionsStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsStaticMesh;
	static C(Other: UObject): FbxSceneImportOptionsStaticMesh;
}

declare class FbxSceneImportOptionsSkeletalMesh extends UObject { 
	bUpdateSkeletonReferencePose: boolean;
	bCreatePhysicsAsset: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	bKeepOverlappingVertices: boolean;
	bImportAnimations: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	bImportCustomAttribute: boolean;
	bPreserveLocalTransform: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	static Load(ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static GetDefaultObject(): FbxSceneImportOptionsSkeletalMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsSkeletalMesh;
	static C(Other: UObject): FbxSceneImportOptionsSkeletalMesh;
}

declare class FbxSceneImportFactory extends Factory { 
	SceneImportOptions: FbxSceneImportOptions;
	SceneImportOptionsStaticMesh: FbxSceneImportOptionsStaticMesh;
	SceneImportOptionsSkeletalMesh: FbxSceneImportOptionsSkeletalMesh;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	ReimportData: FbxSceneImportData;
	static Load(ResourceName: string): FbxSceneImportFactory;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportFactory;
	static GetDefaultObject(): FbxSceneImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportFactory;
	static C(Other: UObject): FbxSceneImportFactory;
}

declare class ReimportFbxSceneFactory extends FbxSceneImportFactory { 
	static Load(ResourceName: string): ReimportFbxSceneFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSceneFactory;
	static GetDefaultObject(): ReimportFbxSceneFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSceneFactory;
	static C(Other: UObject): ReimportFbxSceneFactory;
}

declare class FontFactory extends Factory { 
	static Load(ResourceName: string): FontFactory;
	static Find(Outer: UObject, ResourceName: string): FontFactory;
	static GetDefaultObject(): FontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFactory;
	static C(Other: UObject): FontFactory;
}

declare class FontFileImportFactory extends Factory { 
	static Load(ResourceName: string): FontFileImportFactory;
	static Find(Outer: UObject, ResourceName: string): FontFileImportFactory;
	static GetDefaultObject(): FontFileImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFileImportFactory;
	static C(Other: UObject): FontFileImportFactory;
}

declare class ForceFeedbackAttenuationFactory extends Factory { 
	static Load(ResourceName: string): ForceFeedbackAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackAttenuationFactory;
	static GetDefaultObject(): ForceFeedbackAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackAttenuationFactory;
	static C(Other: UObject): ForceFeedbackAttenuationFactory;
}

declare class ForceFeedbackEffectFactory extends Factory { 
	static Load(ResourceName: string): ForceFeedbackEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackEffectFactory;
	static GetDefaultObject(): ForceFeedbackEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackEffectFactory;
	static C(Other: UObject): ForceFeedbackEffectFactory;
}

declare class HapticFeedbackEffectBufferFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectBufferFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectBufferFactory;
	static GetDefaultObject(): HapticFeedbackEffectBufferFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectBufferFactory;
	static C(Other: UObject): HapticFeedbackEffectBufferFactory;
}

declare class HapticFeedbackEffectCurveFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectCurveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectCurveFactory;
	static GetDefaultObject(): HapticFeedbackEffectCurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectCurveFactory;
	static C(Other: UObject): HapticFeedbackEffectCurveFactory;
}

declare class HapticFeedbackEffectSoundWaveFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static GetDefaultObject(): HapticFeedbackEffectSoundWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectSoundWaveFactory;
	static C(Other: UObject): HapticFeedbackEffectSoundWaveFactory;
}

declare class InterpDataFactoryNew extends Factory { 
	static Load(ResourceName: string): InterpDataFactoryNew;
	static Find(Outer: UObject, ResourceName: string): InterpDataFactoryNew;
	static GetDefaultObject(): InterpDataFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpDataFactoryNew;
	static C(Other: UObject): InterpDataFactoryNew;
}

declare class LevelFactory extends Factory { 
	static Load(ResourceName: string): LevelFactory;
	static Find(Outer: UObject, ResourceName: string): LevelFactory;
	static GetDefaultObject(): LevelFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelFactory;
	static C(Other: UObject): LevelFactory;
}

declare class MaterialFactoryNew extends Factory { 
	InitialTexture: Texture;
	static Load(ResourceName: string): MaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFactoryNew;
	static GetDefaultObject(): MaterialFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFactoryNew;
	static C(Other: UObject): MaterialFactoryNew;
}

declare class MaterialFunctionFactoryNew extends Factory { 
	static Load(ResourceName: string): MaterialFunctionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionFactoryNew;
	static GetDefaultObject(): MaterialFunctionFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionFactoryNew;
	static C(Other: UObject): MaterialFunctionFactoryNew;
}

declare class MaterialInstanceConstantFactoryNew extends Factory { 
	InitialParent: MaterialInterface;
	static Load(ResourceName: string): MaterialInstanceConstantFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstantFactoryNew;
	static GetDefaultObject(): MaterialInstanceConstantFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstantFactoryNew;
	static C(Other: UObject): MaterialInstanceConstantFactoryNew;
}

declare class MaterialParameterCollectionFactoryNew extends Factory { 
	static Load(ResourceName: string): MaterialParameterCollectionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollectionFactoryNew;
	static GetDefaultObject(): MaterialParameterCollectionFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollectionFactoryNew;
	static C(Other: UObject): MaterialParameterCollectionFactoryNew;
}

declare class ModelFactory extends Factory { 
	static Load(ResourceName: string): ModelFactory;
	static Find(Outer: UObject, ResourceName: string): ModelFactory;
	static GetDefaultObject(): ModelFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelFactory;
	static C(Other: UObject): ModelFactory;
}

declare class ObjectLibraryFactory extends Factory { 
	static Load(ResourceName: string): ObjectLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): ObjectLibraryFactory;
	static GetDefaultObject(): ObjectLibraryFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibraryFactory;
	static C(Other: UObject): ObjectLibraryFactory;
}

declare class PackageFactory extends Factory { 
	static Load(ResourceName: string): PackageFactory;
	static Find(Outer: UObject, ResourceName: string): PackageFactory;
	static GetDefaultObject(): PackageFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageFactory;
	static C(Other: UObject): PackageFactory;
}

declare class PackFactory extends Factory { 
	static Load(ResourceName: string): PackFactory;
	static Find(Outer: UObject, ResourceName: string): PackFactory;
	static GetDefaultObject(): PackFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackFactory;
	static C(Other: UObject): PackFactory;
}

declare class ParticleSystemFactoryNew extends Factory { 
	static Load(ResourceName: string): ParticleSystemFactoryNew;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemFactoryNew;
	static GetDefaultObject(): ParticleSystemFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemFactoryNew;
	static C(Other: UObject): ParticleSystemFactoryNew;
}

declare class PhysicalMaterialFactoryNew extends Factory { 
	PhysicalMaterialClass: UnrealEngineClass;
	static Load(ResourceName: string): PhysicalMaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialFactoryNew;
	static GetDefaultObject(): PhysicalMaterialFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialFactoryNew;
	static C(Other: UObject): PhysicalMaterialFactoryNew;
}

declare class PolysFactory extends Factory { 
	static Load(ResourceName: string): PolysFactory;
	static Find(Outer: UObject, ResourceName: string): PolysFactory;
	static GetDefaultObject(): PolysFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysFactory;
	static C(Other: UObject): PolysFactory;
}

declare class PoseAssetFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	static Load(ResourceName: string): PoseAssetFactory;
	static Find(Outer: UObject, ResourceName: string): PoseAssetFactory;
	static GetDefaultObject(): PoseAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseAssetFactory;
	static C(Other: UObject): PoseAssetFactory;
}

declare class PreviewMeshCollectionFactory extends Factory { 
	CurrentSkeleton: any;
	static Load(ResourceName: string): PreviewMeshCollectionFactory;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollectionFactory;
	static GetDefaultObject(): PreviewMeshCollectionFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollectionFactory;
	static C(Other: UObject): PreviewMeshCollectionFactory;
}

declare class SkeletonFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): SkeletonFactory;
	static Find(Outer: UObject, ResourceName: string): SkeletonFactory;
	static GetDefaultObject(): SkeletonFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletonFactory;
	static C(Other: UObject): SkeletonFactory;
}

declare class SlateBrushAssetFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SlateBrushAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateBrushAssetFactory;
	static GetDefaultObject(): SlateBrushAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAssetFactory;
	static C(Other: UObject): SlateBrushAssetFactory;
}

declare class SlateWidgetStyleAssetFactory extends Factory { 
	StyleType: UnrealEngineClass;
	static Load(ResourceName: string): SlateWidgetStyleAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAssetFactory;
	static GetDefaultObject(): SlateWidgetStyleAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAssetFactory;
	static C(Other: UObject): SlateWidgetStyleAssetFactory;
}

declare class StructureFactory extends Factory { 
	static Load(ResourceName: string): StructureFactory;
	static Find(Outer: UObject, ResourceName: string): StructureFactory;
	static GetDefaultObject(): StructureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructureFactory;
	static C(Other: UObject): StructureFactory;
}

declare class SubDSurfaceFactory extends Factory { 
	static Load(ResourceName: string): SubDSurfaceFactory;
	static Find(Outer: UObject, ResourceName: string): SubDSurfaceFactory;
	static GetDefaultObject(): SubDSurfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurfaceFactory;
	static C(Other: UObject): SubDSurfaceFactory;
}

declare class SubsurfaceProfileFactory extends Factory { 
	static Load(ResourceName: string): SubsurfaceProfileFactory;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileFactory;
	static GetDefaultObject(): SubsurfaceProfileFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileFactory;
	static C(Other: UObject): SubsurfaceProfileFactory;
}

declare class SubUVAnimationFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SubUVAnimationFactory;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimationFactory;
	static GetDefaultObject(): SubUVAnimationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimationFactory;
	static C(Other: UObject): SubUVAnimationFactory;
}

declare class Texture2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	static Load(ResourceName: string): Texture2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): Texture2DFactoryNew;
	static GetDefaultObject(): Texture2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DFactoryNew;
	static C(Other: UObject): Texture2DFactoryNew;
}

declare class TextureFactory extends Factory { 
	NoCompression: boolean;
	NoAlpha: boolean;
	bDeferCompression: boolean;
	CompressionSettings: TextureCompressionSettings;
	bCreateMaterial: boolean;
	bRGBToBaseColor: boolean;
	bRGBToEmissive: boolean;
	bAlphaToRoughness: boolean;
	bAlphaToEmissive: boolean;
	bAlphaToOpacity: boolean;
	bAlphaToOpacityMask: boolean;
	bTwoSided: boolean;
	Blending: EBlendMode;
	ShadingModel: EMaterialShadingModel;
	MipGenSettings: TextureMipGenSettings;
	LODGroup: TextureGroup;
	bDitherMipMapAlpha: boolean;
	AlphaCoverageThresholds: Vector4;
	bPreserveBorder: boolean;
	bFlipNormalMapGreenChannel: boolean;
	bUsingExistingSettings: boolean;
	static Load(ResourceName: string): TextureFactory;
	static Find(Outer: UObject, ResourceName: string): TextureFactory;
	static GetDefaultObject(): TextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureFactory;
	static C(Other: UObject): TextureFactory;
}

declare class ReimportTextureFactory extends TextureFactory { 
	pOriginalTex: Texture;
	static Load(ResourceName: string): ReimportTextureFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportTextureFactory;
	static GetDefaultObject(): ReimportTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportTextureFactory;
	static C(Other: UObject): ReimportTextureFactory;
}

declare class FontImportOptions extends UObject { 
	Data: FontImportOptionsData;
	static Load(ResourceName: string): FontImportOptions;
	static Find(Outer: UObject, ResourceName: string): FontImportOptions;
	static GetDefaultObject(): FontImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontImportOptions;
	static C(Other: UObject): FontImportOptions;
}

declare class TrueTypeFontFactory extends TextureFactory { 
	ImportOptions: FontImportOptions;
	bPropertiesConfigured: boolean;
	bFontSelected: boolean;
	static Load(ResourceName: string): TrueTypeFontFactory;
	static Find(Outer: UObject, ResourceName: string): TrueTypeFontFactory;
	static GetDefaultObject(): TrueTypeFontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TrueTypeFontFactory;
	static C(Other: UObject): TrueTypeFontFactory;
}

declare class TextureRenderTargetCubeFactoryNew extends Factory { 
	Width: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetCubeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCubeFactoryNew;
	static C(Other: UObject): TextureRenderTargetCubeFactoryNew;
}

declare class TextureRenderTargetFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetFactoryNew;
	static GetDefaultObject(): TextureRenderTargetFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetFactoryNew;
	static C(Other: UObject): TextureRenderTargetFactoryNew;
}

declare class TouchInterfaceFactory extends Factory { 
	static Load(ResourceName: string): TouchInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): TouchInterfaceFactory;
	static GetDefaultObject(): TouchInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterfaceFactory;
	static C(Other: UObject): TouchInterfaceFactory;
}

declare class VectorFieldStaticFactory extends Factory { 
	static Load(ResourceName: string): VectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStaticFactory;
	static GetDefaultObject(): VectorFieldStaticFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStaticFactory;
	static C(Other: UObject): VectorFieldStaticFactory;
}

declare class ReimportVectorFieldStaticFactory extends VectorFieldStaticFactory { 
	static Load(ResourceName: string): ReimportVectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportVectorFieldStaticFactory;
	static GetDefaultObject(): ReimportVectorFieldStaticFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportVectorFieldStaticFactory;
	static C(Other: UObject): ReimportVectorFieldStaticFactory;
}

declare class WorldFactory extends Factory { 
	static Load(ResourceName: string): WorldFactory;
	static Find(Outer: UObject, ResourceName: string): WorldFactory;
	static GetDefaultObject(): WorldFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldFactory;
	static C(Other: UObject): WorldFactory;
}

declare type EFBXTestPlanActionType = 'Import' | 'Reimport' | 'AddLOD' | 'ReimportLOD';
declare var EFBXTestPlanActionType : { Import:'Import',Reimport:'Reimport',AddLOD:'AddLOD',ReimportLOD:'ReimportLOD', };
declare type EFBXExpectedResultPreset = 'Error_Number' | 'Warning_Number' | 'Created_Staticmesh_Number' | 'Created_Skeletalmesh_Number' | 'Materials_Created_Number' | 'Vertex_Number' | 'Lod_Number' | 'Vertex_Number_Lod' | 'Mesh_Materials_Number' | 'Mesh_LOD_Section_Number' | 'Mesh_LOD_Section_Vertex_Number' | 'Mesh_LOD_Section_Triangle_Number' | 'Mesh_LOD_Section_Material_Name' | 'Mesh_LOD_Section_Material_Index' | 'LOD_UV_Channel_Number' | 'Bone_Number' | 'Bone_Position';
declare var EFBXExpectedResultPreset : { Error_Number:'Error_Number',Warning_Number:'Warning_Number',Created_Staticmesh_Number:'Created_Staticmesh_Number',Created_Skeletalmesh_Number:'Created_Skeletalmesh_Number',Materials_Created_Number:'Materials_Created_Number',Vertex_Number:'Vertex_Number',Lod_Number:'Lod_Number',Vertex_Number_Lod:'Vertex_Number_Lod',Mesh_Materials_Number:'Mesh_Materials_Number',Mesh_LOD_Section_Number:'Mesh_LOD_Section_Number',Mesh_LOD_Section_Vertex_Number:'Mesh_LOD_Section_Vertex_Number',Mesh_LOD_Section_Triangle_Number:'Mesh_LOD_Section_Triangle_Number',Mesh_LOD_Section_Material_Name:'Mesh_LOD_Section_Material_Name',Mesh_LOD_Section_Material_Index:'Mesh_LOD_Section_Material_Index',LOD_UV_Channel_Number:'LOD_UV_Channel_Number',Bone_Number:'Bone_Number',Bone_Position:'Bone_Position', };
declare class FbxTestPlanExpectedResult { 
	ExpectedPresetsType: EFBXExpectedResultPreset;
	ExpectedPresetsDataInteger: number[];
	ExpectedPresetsDataFloat: number[];
	ExpectedPresetsDataDouble: any[];
	ExpectedPresetsDataString: string[];
	clone() : FbxTestPlanExpectedResult;
	static C(Other: UObject): FbxTestPlanExpectedResult;
}

declare class FbxTestPlan extends UObject { 
	TestPlanName: string;
	Action: EFBXTestPlanActionType;
	LodIndex: number;
	bDeleteFolderAssets: boolean;
	ExpectedResult: FbxTestPlanExpectedResult[];
	ImportUI: FbxImportUI;
	static Load(ResourceName: string): FbxTestPlan;
	static Find(Outer: UObject, ResourceName: string): FbxTestPlan;
	static GetDefaultObject(): FbxTestPlan;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTestPlan;
	static C(Other: UObject): FbxTestPlan;
}

declare class FileServerCommandlet extends Commandlet { 
	static Load(ResourceName: string): FileServerCommandlet;
	static Find(Outer: UObject, ResourceName: string): FileServerCommandlet;
	static GetDefaultObject(): FileServerCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileServerCommandlet;
	static C(Other: UObject): FileServerCommandlet;
}

declare class FixupRedirectsCommandlet extends Commandlet { 
	static Load(ResourceName: string): FixupRedirectsCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixupRedirectsCommandlet;
	static GetDefaultObject(): FixupRedirectsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixupRedirectsCommandlet;
	static C(Other: UObject): FixupRedirectsCommandlet;
}

declare class GatherTextCommandletBase extends Commandlet { 
	static Load(ResourceName: string): GatherTextCommandletBase;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandletBase;
	static GetDefaultObject(): GatherTextCommandletBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandletBase;
	static C(Other: UObject): GatherTextCommandletBase;
}

declare class ExportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ExportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExportDialogueScriptCommandlet;
	static GetDefaultObject(): ExportDialogueScriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportDialogueScriptCommandlet;
	static C(Other: UObject): ExportDialogueScriptCommandlet;
}

declare class GatherTextCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandlet;
	static GetDefaultObject(): GatherTextCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandlet;
	static C(Other: UObject): GatherTextCommandlet;
}

declare class GatherTextFromAssetsCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromAssetsCommandlet;
	static GetDefaultObject(): GatherTextFromAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromAssetsCommandlet;
	static C(Other: UObject): GatherTextFromAssetsCommandlet;
}

declare class GatherTextFromMetaDataCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromMetaDataCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromMetaDataCommandlet;
	static GetDefaultObject(): GatherTextFromMetaDataCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromMetaDataCommandlet;
	static C(Other: UObject): GatherTextFromMetaDataCommandlet;
}

declare class GatherTextFromSourceCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromSourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromSourceCommandlet;
	static GetDefaultObject(): GatherTextFromSourceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromSourceCommandlet;
	static C(Other: UObject): GatherTextFromSourceCommandlet;
}

declare class GenerateGatherArchiveCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateGatherArchiveCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherArchiveCommandlet;
	static GetDefaultObject(): GenerateGatherArchiveCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherArchiveCommandlet;
	static C(Other: UObject): GenerateGatherArchiveCommandlet;
}

declare class GenerateGatherManifestCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateGatherManifestCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherManifestCommandlet;
	static GetDefaultObject(): GenerateGatherManifestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherManifestCommandlet;
	static C(Other: UObject): GenerateGatherManifestCommandlet;
}

declare class GenerateTextLocalizationReportCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static GetDefaultObject(): GenerateTextLocalizationReportCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationReportCommandlet;
	static C(Other: UObject): GenerateTextLocalizationReportCommandlet;
}

declare class GenerateTextLocalizationResourceCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static GetDefaultObject(): GenerateTextLocalizationResourceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationResourceCommandlet;
	static C(Other: UObject): GenerateTextLocalizationResourceCommandlet;
}

declare class ImportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ImportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportDialogueScriptCommandlet;
	static GetDefaultObject(): ImportDialogueScriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportDialogueScriptCommandlet;
	static C(Other: UObject): ImportDialogueScriptCommandlet;
}

declare class ImportLocalizedDialogueCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ImportLocalizedDialogueCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportLocalizedDialogueCommandlet;
	static GetDefaultObject(): ImportLocalizedDialogueCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportLocalizedDialogueCommandlet;
	static C(Other: UObject): ImportLocalizedDialogueCommandlet;
}

declare class InternationalizationConditioningCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): InternationalizationConditioningCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationConditioningCommandlet;
	static GetDefaultObject(): InternationalizationConditioningCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationConditioningCommandlet;
	static C(Other: UObject): InternationalizationConditioningCommandlet;
}

declare class InternationalizationExportCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): InternationalizationExportCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationExportCommandlet;
	static GetDefaultObject(): InternationalizationExportCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationExportCommandlet;
	static C(Other: UObject): InternationalizationExportCommandlet;
}

declare class GenerateBlueprintAPICommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateBlueprintAPICommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateBlueprintAPICommandlet;
	static GetDefaultObject(): GenerateBlueprintAPICommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateBlueprintAPICommandlet;
	static C(Other: UObject): GenerateBlueprintAPICommandlet;
}

declare class GenerateDistillFileSetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateDistillFileSetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateDistillFileSetsCommandlet;
	static GetDefaultObject(): GenerateDistillFileSetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateDistillFileSetsCommandlet;
	static C(Other: UObject): GenerateDistillFileSetsCommandlet;
}

declare class HierarchicalLODVolume extends Volume { 
	static GetDefaultObject(): HierarchicalLODVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODVolume;
	static C(Other: UObject): HierarchicalLODVolume;
}

declare class ImportAssetsCommandlet extends Commandlet { 
	GlobalImportData: AutomatedAssetImportData;
	ImportDataList: AutomatedAssetImportData[];
	static Load(ResourceName: string): ImportAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportAssetsCommandlet;
	static GetDefaultObject(): ImportAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportAssetsCommandlet;
	static C(Other: UObject): ImportAssetsCommandlet;
}

declare class LevelEditorMiscSettings extends DeveloperSettings { 
	bAutoApplyLightingEnable: boolean;
	bBSPAutoUpdate: boolean;
	bAutoMoveBSPPivotOffset: boolean;
	bNavigationAutoUpdate: boolean;
	bReplaceRespectsScale: boolean;
	bAllowBackgroundAudio: boolean;
	bEnableRealTimeAudio: boolean;
	EditorVolumeLevel: number;
	bEnableEditorSounds: boolean;
	DefaultLevelStreamingClass: UnrealEngineClass;
	static Load(ResourceName: string): LevelEditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorMiscSettings;
	static GetDefaultObject(): LevelEditorMiscSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorMiscSettings;
	static C(Other: UObject): LevelEditorMiscSettings;
}

declare class LevelExporterFBX extends Exporter { 
	static Load(ResourceName: string): LevelExporterFBX;
	static Find(Outer: UObject, ResourceName: string): LevelExporterFBX;
	static GetDefaultObject(): LevelExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterFBX;
	static C(Other: UObject): LevelExporterFBX;
}

declare class LevelExporterLOD extends Exporter { 
	static Load(ResourceName: string): LevelExporterLOD;
	static Find(Outer: UObject, ResourceName: string): LevelExporterLOD;
	static GetDefaultObject(): LevelExporterLOD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterLOD;
	static C(Other: UObject): LevelExporterLOD;
}

declare class LevelExporterOBJ extends Exporter { 
	static Load(ResourceName: string): LevelExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): LevelExporterOBJ;
	static GetDefaultObject(): LevelExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterOBJ;
	static C(Other: UObject): LevelExporterOBJ;
}

declare class LevelExporterSTL extends Exporter { 
	static Load(ResourceName: string): LevelExporterSTL;
	static Find(Outer: UObject, ResourceName: string): LevelExporterSTL;
	static GetDefaultObject(): LevelExporterSTL;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterSTL;
	static C(Other: UObject): LevelExporterSTL;
}

declare class LevelExporterT3D extends Exporter { 
	static Load(ResourceName: string): LevelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): LevelExporterT3D;
	static GetDefaultObject(): LevelExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterT3D;
	static C(Other: UObject): LevelExporterT3D;
}

declare class LightmassDebugOptions { 
	bDebugMode: boolean;
	bStatsEnabled: boolean;
	bGatherBSPSurfacesAcrossComponents: boolean;
	CoplanarTolerance: number;
	bUseImmediateImport: boolean;
	bImmediateProcessMappings: boolean;
	bSortMappings: boolean;
	bDumpBinaryFiles: boolean;
	bDebugMaterials: boolean;
	bPadMappings: boolean;
	bDebugPaddings: boolean;
	bOnlyCalcDebugTexelMappings: boolean;
	bUseRandomColors: boolean;
	bColorBordersGreen: boolean;
	bColorByExecutionTime: boolean;
	ExecutionTimeDivisor: number;
	clone() : LightmassDebugOptions;
	static C(Other: UObject): LightmassDebugOptions;
}

declare class SwarmDebugOptions { 
	bDistributionEnabled: boolean;
	bForceContentExport: boolean;
	bInitialized: boolean;
	clone() : SwarmDebugOptions;
	static C(Other: UObject): SwarmDebugOptions;
}

declare class LightmassOptionsObject extends UObject { 
	DebugSettings: LightmassDebugOptions;
	SwarmSettings: SwarmDebugOptions;
	static Load(ResourceName: string): LightmassOptionsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassOptionsObject;
	static GetDefaultObject(): LightmassOptionsObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassOptionsObject;
	static C(Other: UObject): LightmassOptionsObject;
}

declare class ListMaterialsUsedWithMeshEmittersCommandlet extends Commandlet { 
	static Load(ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static GetDefaultObject(): ListMaterialsUsedWithMeshEmittersCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListMaterialsUsedWithMeshEmittersCommandlet;
	static C(Other: UObject): ListMaterialsUsedWithMeshEmittersCommandlet;
}

declare class ListStaticMeshesImportedFromSpeedTreesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static GetDefaultObject(): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static C(Other: UObject): ListStaticMeshesImportedFromSpeedTreesCommandlet;
}

declare class LoadPackageCommandlet extends Commandlet { 
	static Load(ResourceName: string): LoadPackageCommandlet;
	static Find(Outer: UObject, ResourceName: string): LoadPackageCommandlet;
	static GetDefaultObject(): LoadPackageCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LoadPackageCommandlet;
	static C(Other: UObject): LoadPackageCommandlet;
}

declare class EditorParameterGroup { 
	GroupName: string;
	Parameters: DEditorParameterValue[];
	clone() : EditorParameterGroup;
	static C(Other: UObject): EditorParameterGroup;
}

declare class MaterialInstanceConstant extends MaterialInstance { 
	ParameterStateId: Guid;
	static Load(ResourceName: string): MaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstant;
	static GetDefaultObject(): MaterialInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstant;
	static C(Other: UObject): MaterialInstanceConstant;
}

declare class LightmassParameterValue { 
	bOverride: boolean;
	clone() : LightmassParameterValue;
	static C(Other: UObject): LightmassParameterValue;
}

declare class LightmassBooleanParameterValue extends LightmassParameterValue { 
	ParameterValue: boolean;
	clone() : LightmassBooleanParameterValue;
	static C(Other: UObject): LightmassBooleanParameterValue;
}

declare class LightmassScalarParameterValue extends LightmassParameterValue { 
	ParameterValue: number;
	clone() : LightmassScalarParameterValue;
	static C(Other: UObject): LightmassScalarParameterValue;
}

declare class LightmassParameterizedMaterialSettings { 
	CastShadowAsMasked: LightmassBooleanParameterValue;
	EmissiveBoost: LightmassScalarParameterValue;
	DiffuseBoost: LightmassScalarParameterValue;
	ExportResolutionScale: LightmassScalarParameterValue;
	clone() : LightmassParameterizedMaterialSettings;
	static C(Other: UObject): LightmassParameterizedMaterialSettings;
}

declare class MaterialEditorInstanceConstant extends UObject { 
	PhysMaterial: PhysicalMaterial;
	Parent: MaterialInterface;
	ParameterGroups: EditorParameterGroup[];
	RefractionDepthBias: number;
	SubsurfaceProfile: SubsurfaceProfile;
	bOverrideSubsurfaceProfile: boolean;
	bOverrideBaseProperties: boolean;
	BasePropertyOverrides: MaterialInstanceBasePropertyOverrides;
	SourceInstance: MaterialInstanceConstant;
	VisibleExpressions: Guid[];
	LightmassSettings: LightmassParameterizedMaterialSettings;
	bUseOldStyleMICEditorGroups: boolean;
	static Load(ResourceName: string): MaterialEditorInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorInstanceConstant;
	static GetDefaultObject(): MaterialEditorInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorInstanceConstant;
	static C(Other: UObject): MaterialEditorInstanceConstant;
}

declare class MaterialEditorMeshComponent extends StaticMeshComponent { 
	static Load(ResourceName: string): MaterialEditorMeshComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorMeshComponent;
	static GetDefaultObject(): MaterialEditorMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorMeshComponent;
	static C(Other: UObject): MaterialEditorMeshComponent;
}

declare class MaterialEditorOptions extends UObject { 
	bShowGrid: boolean;
	bShowBackground: boolean;
	bHideUnusedConnectors: boolean;
	bRealtimeMaterialViewport: boolean;
	bRealtimeExpressionViewport: boolean;
	bLivePreviewUpdate: boolean;
	bAlwaysRefreshAllPreviews: boolean;
	bUseUnsortedMenus: boolean;
	bShowMobileStats: boolean;
	FavoriteExpressions: string[];
	static Load(ResourceName: string): MaterialEditorOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorOptions;
	static GetDefaultObject(): MaterialEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorOptions;
	static C(Other: UObject): MaterialEditorOptions;
}

declare class MaterialGraphNode extends MaterialGraphNode_Base { 
	MaterialExpression: MaterialExpression;
	static Load(ResourceName: string): MaterialGraphNode;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode;
	static GetDefaultObject(): MaterialGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode;
	static C(Other: UObject): MaterialGraphNode;
}

declare class MaterialGraphNode_Knot extends MaterialGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_Knot;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Knot;
	static GetDefaultObject(): MaterialGraphNode_Knot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Knot;
	static C(Other: UObject): MaterialGraphNode_Knot;
}

declare class MaterialGraphSchema extends EdGraphSchema { 
	PC_Mask: string;
	PC_Required: string;
	PC_Optional: string;
	PC_MaterialInput: string;
	PSC_Red: string;
	PSC_Green: string;
	PSC_Blue: string;
	PSC_Alpha: string;
	ActivePinColor: LinearColor;
	InactivePinColor: LinearColor;
	AlphaPinColor: LinearColor;
	static Load(ResourceName: string): MaterialGraphSchema;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphSchema;
	static GetDefaultObject(): MaterialGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphSchema;
	static C(Other: UObject): MaterialGraphSchema;
}

declare class ModelExporterT3D extends Exporter { 
	static Load(ResourceName: string): ModelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ModelExporterT3D;
	static GetDefaultObject(): ModelExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelExporterT3D;
	static C(Other: UObject): ModelExporterT3D;
}

declare class NativeCodeGenCommandlet extends Commandlet { 
	static Load(ResourceName: string): NativeCodeGenCommandlet;
	static Find(Outer: UObject, ResourceName: string): NativeCodeGenCommandlet;
	static GetDefaultObject(): NativeCodeGenCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NativeCodeGenCommandlet;
	static C(Other: UObject): NativeCodeGenCommandlet;
}

declare class ObjectExporterT3D extends Exporter { 
	static Load(ResourceName: string): ObjectExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ObjectExporterT3D;
	static GetDefaultObject(): ObjectExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectExporterT3D;
	static C(Other: UObject): ObjectExporterT3D;
}

declare class ParticleSystemAuditCommandlet extends Commandlet { 
	HighSpawnRateOrBurstThreshold: number;
	FarLODDistanceTheshold: number;
	static Load(ResourceName: string): ParticleSystemAuditCommandlet;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemAuditCommandlet;
	static GetDefaultObject(): ParticleSystemAuditCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemAuditCommandlet;
	static C(Other: UObject): ParticleSystemAuditCommandlet;
}

declare class PersonaOptions extends UObject { 
	bShowFloor: boolean;
	bShowSky: boolean;
	bAutoAlignFloorToMesh: boolean;
	bShowGrid: boolean;
	bHighlightOrigin: boolean;
	bMuteAudio: boolean;
	ShowMeshStats: number;
	GridSize: number;
	ViewModeIndex: EViewModeIndex;
	ViewportBackgroundColor: LinearColor;
	ViewFOV: number;
	DefaultLocalAxesSelection: any;
	DefaultBoneDrawSelection: any;
	SectionTimingNodeColor: LinearColor;
	NotifyTimingNodeColor: LinearColor;
	BranchingPointTimingNodeColor: LinearColor;
	bUseInlineSocketEditor: boolean;
	bFlattenSkeletonHierarchyWhenFiltering: boolean;
	bAllowPreviewMeshCollectionsToSelectFromDifferentSkeletons: boolean;
	static Load(ResourceName: string): PersonaOptions;
	static Find(Outer: UObject, ResourceName: string): PersonaOptions;
	static GetDefaultObject(): PersonaOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaOptions;
	static C(Other: UObject): PersonaOptions;
}

declare class PhATSimOptions extends UObject { 
	PhysicsBlend: number;
	bUpdateJointsFromAnimation: boolean;
	PhysicsUpdateMode: EPhysicsTransformUpdateMode;
	PokePauseTime: number;
	PokeBlendTime: number;
	FloorGap: number;
	GravScale: number;
	MaxFPS: number;
	TimeDilation: number;
	HandleLinearDamping: number;
	HandleLinearStiffness: number;
	HandleAngularDamping: number;
	HandleAngularStiffness: number;
	InterpolationSpeed: number;
	PokeStrength: number;
	bShowConstraintsAsPoints: boolean;
	bShowNamesInHierarchy: boolean;
	ConstraintDrawSize: number;
	static Load(ResourceName: string): PhATSimOptions;
	static Find(Outer: UObject, ResourceName: string): PhATSimOptions;
	static GetDefaultObject(): PhATSimOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhATSimOptions;
	static C(Other: UObject): PhATSimOptions;
}

declare class PkgInfoCommandlet extends Commandlet { 
	static Load(ResourceName: string): PkgInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): PkgInfoCommandlet;
	static GetDefaultObject(): PkgInfoCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PkgInfoCommandlet;
	static C(Other: UObject): PkgInfoCommandlet;
}

declare class PolysExporterOBJ extends Exporter { 
	static Load(ResourceName: string): PolysExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): PolysExporterOBJ;
	static GetDefaultObject(): PolysExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterOBJ;
	static C(Other: UObject): PolysExporterOBJ;
}

declare class PolysExporterT3D extends Exporter { 
	static Load(ResourceName: string): PolysExporterT3D;
	static Find(Outer: UObject, ResourceName: string): PolysExporterT3D;
	static GetDefaultObject(): PolysExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterT3D;
	static C(Other: UObject): PolysExporterT3D;
}

declare class PopulateDialogueWaveFromCharacterSheetCommandlet extends Commandlet { 
	static Load(ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static Find(Outer: UObject, ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static GetDefaultObject(): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static C(Other: UObject): PopulateDialogueWaveFromCharacterSheetCommandlet;
}

declare class PreviewMaterial extends Material { 
	static Load(ResourceName: string): PreviewMaterial;
	static Find(Outer: UObject, ResourceName: string): PreviewMaterial;
	static GetDefaultObject(): PreviewMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMaterial;
	static C(Other: UObject): PreviewMaterial;
}

declare type EProjectPackagingBuildConfigurations = 'PPBC_DebugGame' | 'PPBC_Development' | 'PPBC_Shipping';
declare var EProjectPackagingBuildConfigurations : { PPBC_DebugGame:'PPBC_DebugGame',PPBC_Development:'PPBC_Development',PPBC_Shipping:'PPBC_Shipping', };
declare type EProjectPackagingBlueprintNativizationMethod = 'Disabled' | 'Inclusive' | 'Exclusive';
declare var EProjectPackagingBlueprintNativizationMethod : { Disabled:'Disabled',Inclusive:'Inclusive',Exclusive:'Exclusive', };
declare type EProjectPackagingInternationalizationPresets = 'English' | 'EFIGS' | 'EFIGSCJK' | 'CJK' | 'All';
declare var EProjectPackagingInternationalizationPresets : { English:'English',EFIGS:'EFIGS',EFIGSCJK:'EFIGSCJK',CJK:'CJK',All:'All', };
declare class ProjectPackagingSettings extends UObject { 
	BuildConfiguration: EProjectPackagingBuildConfigurations;
	StagingDirectory: DirectoryPath;
	FullRebuild: boolean;
	ForDistribution: boolean;
	IncludeDebugFiles: boolean;
	BlueprintNativizationMethod: BlueprintNativizationMethod;
	NativizeBlueprintAssets: FilePath[];
	bWarnIfPackagedWithoutNativizationFlag: boolean;
	UsePakFile: boolean;
	bGenerateChunks: boolean;
	bChunkHardReferencesOnly: boolean;
	bBuildHttpChunkInstallData: boolean;
	HttpChunkInstallDataDirectory: DirectoryPath;
	HttpChunkInstallDataVersion: string;
	IncludePrerequisites: boolean;
	ApplocalPrerequisitesDirectory: DirectoryPath;
	IncludeCrashReporter: boolean;
	InternationalizationPreset: InternationalizationPreset;
	CulturesToStage: string[];
	DefaultCulture: string;
	bCookAll: boolean;
	bCookMapsOnly: boolean;
	bCompressed: boolean;
	bEncryptIniFiles: boolean;
	bSkipEditorContent: boolean;
	MapsToCook: FilePath[];
	DirectoriesToAlwaysCook: DirectoryPath[];
	DirectoriesToNeverCook: DirectoryPath[];
	DirectoriesToAlwaysStageAsUFS: DirectoryPath[];
	DirectoriesToAlwaysStageAsNonUFS: DirectoryPath[];
	bNativizeBlueprintAssets: boolean;
	bNativizeOnlySelectedBlueprints: boolean;
	static Load(ResourceName: string): ProjectPackagingSettings;
	static Find(Outer: UObject, ResourceName: string): ProjectPackagingSettings;
	static GetDefaultObject(): ProjectPackagingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectPackagingSettings;
	static C(Other: UObject): ProjectPackagingSettings;
}

declare type PropertEditorTestEnum = 'PropertyEditorTest_Enum1' | 'PropertyEditorTest_Enum2' | 'PropertyEditorTest_Enum3' | 'PropertyEditorTest_Enum4' | 'PropertyEditorTest_Enum5' | 'PropertyEditorTest_Enum6';
declare var PropertEditorTestEnum : { PropertyEditorTest_Enum1:'PropertyEditorTest_Enum1',PropertyEditorTest_Enum2:'PropertyEditorTest_Enum2',PropertyEditorTest_Enum3:'PropertyEditorTest_Enum3',PropertyEditorTest_Enum4:'PropertyEditorTest_Enum4',PropertyEditorTest_Enum5:'PropertyEditorTest_Enum5',PropertyEditorTest_Enum6:'PropertyEditorTest_Enum6', };
declare class PropertyEditorTestSubStruct { 
	FirstProperty: number;
	SecondProperty: number;
	CustomizedStructInsideUncustomizedStruct: LinearColor;
	CustomizedStructInsideUncustomizedStruct2: StringAssetReference;
	clone() : PropertyEditorTestSubStruct;
	static C(Other: UObject): PropertyEditorTestSubStruct;
}

declare class PropertyEditorTestBasicStruct { 
	IntPropertyInsideAStruct: number;
	FloatPropertyInsideAStruct: number;
	ObjectPropertyInsideAStruct: UObject;
	InnerStruct: PropertyEditorTestSubStruct;
	clone() : PropertyEditorTestBasicStruct;
	static C(Other: UObject): PropertyEditorTestBasicStruct;
}

declare class PropertyEditorTestObject extends UObject { 
	Int8Property: any;
	Int16roperty: any;
	Int32Property: number;
	Int64Property: any;
	ByteProperty: number;
	UnsignedInt16Property: any;
	UnsignedInt32Property: any;
	UnsignedInt64Property: any;
	FloatProperty: number;
	DoubleProperty: any;
	NameProperty: string;
	BoolProperty: boolean;
	StringProperty: string;
	TextProperty: string;
	Vector3Property: Vector;
	Vector2Property: Vector2D;
	Vector4Property: Vector4;
	RotatorProperty: Rotator;
	ObjectProperty: UObject;
	ClassProperty: UnrealEngineClass;
	LinearColorProperty: LinearColor;
	ColorProperty: Color;
	EnumProperty: PropertEditorTestEnum;
	IntProperty32Array: number[];
	BytePropertyArray: number[];
	FloatPropertyArray: number[];
	NamePropertyArray: string[];
	BoolPropertyArray: boolean[];
	StringPropertyArray: string[];
	TextPropertyArray: string[];
	Vector3PropertyArray: Vector[];
	Vector2PropertyArray: Vector2D[];
	Vector4PropertyArray: Vector4[];
	RotatorPropertyArray: Rotator[];
	ObjectPropertyArray: UObject[];
	ActorPropertyArray: Actor[];
	LinearColorPropertyArray: LinearColor[];
	ColorPropertyArray: Color[];
	EnumPropertyArray: PropertEditorTestEnum[];
	StructPropertyArray: PropertyEditorTestBasicStruct[];
	FixedArrayOfInts: number[];
	StaticArrayOfInts: number;
	StaticArrayOfIntsWithEnumLabels: number;
	FloatPropertyWithClampedRange: number;
	IntPropertyWithClampedRange: number;
	IntThatCannotBeChanged: number;
	StringThatCannotBeChanged: string;
	ObjectThatCannotBeChanged: PrimitiveComponent;
	StringPasswordProperty: string;
	TextPasswordProperty: string;
	ThisIsBrokenIfItsVisibleInADetailsView: PropertyEditorTestBasicStruct;
	StructWithMultipleInstances1: PropertyEditorTestBasicStruct;
	bEditConditionStructWithMultipleInstances2: boolean;
	StructWithMultipleInstances2: PropertyEditorTestBasicStruct;
	AssetReferenceCustomStruct: StringAssetReference;
	AssetReferenceCustomStructWithThumbnail: StringAssetReference;
	bEditCondition: boolean;
	SimplePropertyWithEditCondition: number;
	bEditConditionAssetReferenceCustomStructWithEditCondition: boolean;
	AssetReferenceCustomStructWithEditCondition: StringAssetReference;
	ArrayOfStructs: PropertyEditorTestBasicStruct[];
	EditInlineNewStaticMeshComponent: StaticMeshComponent;
	ArrayOfEditInlineNewSMCs: StaticMeshComponent[];
	TextureProp: Texture;
	StaticMeshProp: StaticMesh;
	AnyMaterialInterface: MaterialInterface;
	OnlyActorsAllowed: Actor;
	Int32Set: any;
	FloatSet: any;
	StringSet: any;
	ObjectSet: any;
	ActorSet: any;
	Int32ToStringMap: any;
	StringToColorMap: any;
	Int32ToStructMap: any;
	StringToFloatMap: any;
	StringToObjectMap: any;
	StringToActorMap: any;
	ObjectToInt32Map: any;
	ObjectToColorMap: any;
	BlendableInterface: any;
	AnimClassInterface: any;
	LightPropagationVolumeBlendable: any;
	TextureOrBlendableInterface: UObject;
	static Load(ResourceName: string): PropertyEditorTestObject;
	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestObject;
	static GetDefaultObject(): PropertyEditorTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestObject;
	static C(Other: UObject): PropertyEditorTestObject;
}

declare class RenderTargetExporterHDR extends Exporter { 
	static Load(ResourceName: string): RenderTargetExporterHDR;
	static Find(Outer: UObject, ResourceName: string): RenderTargetExporterHDR;
	static GetDefaultObject(): RenderTargetExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RenderTargetExporterHDR;
	static C(Other: UObject): RenderTargetExporterHDR;
}

declare class ReplaceActorCommandlet extends Commandlet { 
	static Load(ResourceName: string): ReplaceActorCommandlet;
	static Find(Outer: UObject, ResourceName: string): ReplaceActorCommandlet;
	static GetDefaultObject(): ReplaceActorCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaceActorCommandlet;
	static C(Other: UObject): ReplaceActorCommandlet;
}

declare class ResavePackagesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ResavePackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ResavePackagesCommandlet;
	static GetDefaultObject(): ResavePackagesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ResavePackagesCommandlet;
	static C(Other: UObject): ResavePackagesCommandlet;
}

declare class FixupNeedsLoadForEditorGameCommandlet extends ResavePackagesCommandlet { 
	static Load(ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static GetDefaultObject(): FixupNeedsLoadForEditorGameCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixupNeedsLoadForEditorGameCommandlet;
	static C(Other: UObject): FixupNeedsLoadForEditorGameCommandlet;
}

declare class SceneThumbnailInfo extends ThumbnailInfo { 
	OrbitPitch: number;
	OrbitYaw: number;
	OrbitZoom: number;
	static Load(ResourceName: string): SceneThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfo;
	static GetDefaultObject(): SceneThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfo;
	static C(Other: UObject): SceneThumbnailInfo;
}

declare class ThumbnailRenderer extends UObject { 
	static Load(ResourceName: string): ThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ThumbnailRenderer;
	static GetDefaultObject(): ThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailRenderer;
	static C(Other: UObject): ThumbnailRenderer;
}

declare class ThumbnailRenderingInfo { 
	ClassNeedingThumbnailName: string;
	ClassNeedingThumbnail: UnrealEngineClass;
	RendererClassName: string;
	Renderer: ThumbnailRenderer;
	clone() : ThumbnailRenderingInfo;
	static C(Other: UObject): ThumbnailRenderingInfo;
}

declare class ThumbnailManager extends UObject { 
	RenderableThumbnailTypes: ThumbnailRenderingInfo[];
	NotSupported: ThumbnailRenderingInfo;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorCylinder: StaticMesh;
	EditorPlane: StaticMesh;
	EditorSkySphere: StaticMesh;
	FloorPlaneMaterial: Material;
	AmbientCubemap: TextureCube;
	CheckerboardTexture: Texture2D;
	ThumbnailManagerClassName: string;
	static Load(ResourceName: string): ThumbnailManager;
	static Find(Outer: UObject, ResourceName: string): ThumbnailManager;
	static GetDefaultObject(): ThumbnailManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailManager;
	static C(Other: UObject): ThumbnailManager;
}

declare type EThumbnailPrimType = 'TPT_None' | 'TPT_Sphere' | 'TPT_Cube' | 'TPT_Plane' | 'TPT_Cylinder';
declare var EThumbnailPrimType : { TPT_None:'TPT_None',TPT_Sphere:'TPT_Sphere',TPT_Cube:'TPT_Cube',TPT_Plane:'TPT_Plane',TPT_Cylinder:'TPT_Cylinder', };
declare class SceneThumbnailInfoWithPrimitive extends SceneThumbnailInfo { 
	PrimitiveType: EThumbnailPrimType;
	PreviewMesh: StringAssetReference;
	static Load(ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static GetDefaultObject(): SceneThumbnailInfoWithPrimitive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfoWithPrimitive;
	static C(Other: UObject): SceneThumbnailInfoWithPrimitive;
}

declare type EOrthoThumbnailDirection = 'Top' | 'Bottom' | 'Left' | 'Right' | 'Front' | 'Back';
declare var EOrthoThumbnailDirection : { Top:'Top',Bottom:'Bottom',Left:'Left',Right:'Right',Front:'Front',Back:'Back', };
declare class WorldThumbnailInfo extends SceneThumbnailInfo { 
	CameraMode: ECameraProjectionMode;
	OrthoDirection: EOrthoThumbnailDirection;
	static Load(ResourceName: string): WorldThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailInfo;
	static GetDefaultObject(): WorldThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailInfo;
	static C(Other: UObject): WorldThumbnailInfo;
}

declare class SequenceExporterT3D extends Exporter { 
	static Load(ResourceName: string): SequenceExporterT3D;
	static Find(Outer: UObject, ResourceName: string): SequenceExporterT3D;
	static GetDefaultObject(): SequenceExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceExporterT3D;
	static C(Other: UObject): SequenceExporterT3D;
}

declare class SkeletalMeshExporterFBX extends Exporter { 
	static Load(ResourceName: string): SkeletalMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshExporterFBX;
	static GetDefaultObject(): SkeletalMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshExporterFBX;
	static C(Other: UObject): SkeletalMeshExporterFBX;
}

declare class SoundExporterOGG extends Exporter { 
	static Load(ResourceName: string): SoundExporterOGG;
	static Find(Outer: UObject, ResourceName: string): SoundExporterOGG;
	static GetDefaultObject(): SoundExporterOGG;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterOGG;
	static C(Other: UObject): SoundExporterOGG;
}

declare class SoundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundExporterWAV;
	static GetDefaultObject(): SoundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterWAV;
	static C(Other: UObject): SoundExporterWAV;
}

declare class SoundSurroundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundSurroundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundExporterWAV;
	static GetDefaultObject(): SoundSurroundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundExporterWAV;
	static C(Other: UObject): SoundSurroundExporterWAV;
}

declare class StabilizeLocalizationKeysCommandlet extends Commandlet { 
	static Load(ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static GetDefaultObject(): StabilizeLocalizationKeysCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StabilizeLocalizationKeysCommandlet;
	static C(Other: UObject): StabilizeLocalizationKeysCommandlet;
}

declare class StaticMeshExporterFBX extends Exporter { 
	static Load(ResourceName: string): StaticMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterFBX;
	static GetDefaultObject(): StaticMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterFBX;
	static C(Other: UObject): StaticMeshExporterFBX;
}

declare class StaticMeshExporterOBJ extends Exporter { 
	static Load(ResourceName: string): StaticMeshExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterOBJ;
	static GetDefaultObject(): StaticMeshExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterOBJ;
	static C(Other: UObject): StaticMeshExporterOBJ;
}

declare class SwapSoundForDialogueInCuesCommandlet extends Commandlet { 
	static Load(ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static GetDefaultObject(): SwapSoundForDialogueInCuesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SwapSoundForDialogueInCuesCommandlet;
	static C(Other: UObject): SwapSoundForDialogueInCuesCommandlet;
}

declare class TemplateMapMetadata extends UObject { 
	static Load(ResourceName: string): TemplateMapMetadata;
	static Find(Outer: UObject, ResourceName: string): TemplateMapMetadata;
	static GetDefaultObject(): TemplateMapMetadata;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateMapMetadata;
	static C(Other: UObject): TemplateMapMetadata;
}

declare type ETexAlign = 'TEXALIGN_None' | 'TEXALIGN_Default' | 'TEXALIGN_Box' | 'TEXALIGN_Planar' | 'TEXALIGN_Fit' | 'TEXALIGN_PlanarAuto' | 'TEXALIGN_PlanarWall' | 'TEXALIGN_PlanarFloor';
declare var ETexAlign : { TEXALIGN_None:'TEXALIGN_None',TEXALIGN_Default:'TEXALIGN_Default',TEXALIGN_Box:'TEXALIGN_Box',TEXALIGN_Planar:'TEXALIGN_Planar',TEXALIGN_Fit:'TEXALIGN_Fit',TEXALIGN_PlanarAuto:'TEXALIGN_PlanarAuto',TEXALIGN_PlanarWall:'TEXALIGN_PlanarWall',TEXALIGN_PlanarFloor:'TEXALIGN_PlanarFloor', };
declare class TexAligner extends UObject { 
	DefTexAlign: ETexAlign;
	TAxis: number;
	UTile: number;
	VTile: number;
	Desc: string;
	static Load(ResourceName: string): TexAligner;
	static Find(Outer: UObject, ResourceName: string): TexAligner;
	static GetDefaultObject(): TexAligner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAligner;
	static C(Other: UObject): TexAligner;
}

declare class TexAlignerBox extends TexAligner { 
	static Load(ResourceName: string): TexAlignerBox;
	static Find(Outer: UObject, ResourceName: string): TexAlignerBox;
	static GetDefaultObject(): TexAlignerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerBox;
	static C(Other: UObject): TexAlignerBox;
}

declare class TexAlignerDefault extends TexAligner { 
	static Load(ResourceName: string): TexAlignerDefault;
	static Find(Outer: UObject, ResourceName: string): TexAlignerDefault;
	static GetDefaultObject(): TexAlignerDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerDefault;
	static C(Other: UObject): TexAlignerDefault;
}

declare class TexAlignerFit extends TexAligner { 
	static Load(ResourceName: string): TexAlignerFit;
	static Find(Outer: UObject, ResourceName: string): TexAlignerFit;
	static GetDefaultObject(): TexAlignerFit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerFit;
	static C(Other: UObject): TexAlignerFit;
}

declare class TexAlignerPlanar extends TexAligner { 
	static Load(ResourceName: string): TexAlignerPlanar;
	static Find(Outer: UObject, ResourceName: string): TexAlignerPlanar;
	static GetDefaultObject(): TexAlignerPlanar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerPlanar;
	static C(Other: UObject): TexAlignerPlanar;
}

declare class TextBufferExporterTXT extends Exporter { 
	static Load(ResourceName: string): TextBufferExporterTXT;
	static Find(Outer: UObject, ResourceName: string): TextBufferExporterTXT;
	static GetDefaultObject(): TextBufferExporterTXT;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBufferExporterTXT;
	static C(Other: UObject): TextBufferExporterTXT;
}

declare class TextureCubeExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureCubeExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureCubeExporterHDR;
	static GetDefaultObject(): TextureCubeExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeExporterHDR;
	static C(Other: UObject): TextureCubeExporterHDR;
}

declare class TextureExporterBMP extends Exporter { 
	static Load(ResourceName: string): TextureExporterBMP;
	static Find(Outer: UObject, ResourceName: string): TextureExporterBMP;
	static GetDefaultObject(): TextureExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterBMP;
	static C(Other: UObject): TextureExporterBMP;
}

declare class TextureExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureExporterHDR;
	static GetDefaultObject(): TextureExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterHDR;
	static C(Other: UObject): TextureExporterHDR;
}

declare class TextureExporterPCX extends Exporter { 
	static Load(ResourceName: string): TextureExporterPCX;
	static Find(Outer: UObject, ResourceName: string): TextureExporterPCX;
	static GetDefaultObject(): TextureExporterPCX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterPCX;
	static C(Other: UObject): TextureExporterPCX;
}

declare class TextureExporterTGA extends Exporter { 
	static Load(ResourceName: string): TextureExporterTGA;
	static Find(Outer: UObject, ResourceName: string): TextureExporterTGA;
	static GetDefaultObject(): TextureExporterTGA;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterTGA;
	static C(Other: UObject): TextureExporterTGA;
}

declare class DefaultSizedThumbnailRenderer extends ThumbnailRenderer { 
	DefaultSizeX: number;
	DefaultSizeY: number;
	static Load(ResourceName: string): DefaultSizedThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): DefaultSizedThumbnailRenderer;
	static GetDefaultObject(): DefaultSizedThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultSizedThumbnailRenderer;
	static C(Other: UObject): DefaultSizedThumbnailRenderer;
}

declare class AnimBlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): AnimBlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintThumbnailRenderer;
	static GetDefaultObject(): AnimBlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintThumbnailRenderer;
	static C(Other: UObject): AnimBlueprintThumbnailRenderer;
}

declare class AnimSequenceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): AnimSequenceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceThumbnailRenderer;
	static GetDefaultObject(): AnimSequenceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceThumbnailRenderer;
	static C(Other: UObject): AnimSequenceThumbnailRenderer;
}

declare class BlendSpaceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): BlendSpaceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceThumbnailRenderer;
	static GetDefaultObject(): BlendSpaceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceThumbnailRenderer;
	static C(Other: UObject): BlendSpaceThumbnailRenderer;
}

declare class BlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): BlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlueprintThumbnailRenderer;
	static GetDefaultObject(): BlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintThumbnailRenderer;
	static C(Other: UObject): BlueprintThumbnailRenderer;
}

declare class ClassThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): ClassThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ClassThumbnailRenderer;
	static GetDefaultObject(): ClassThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassThumbnailRenderer;
	static C(Other: UObject): ClassThumbnailRenderer;
}

declare class DestructibleMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): DestructibleMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): DestructibleMeshThumbnailRenderer;
	static GetDefaultObject(): DestructibleMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleMeshThumbnailRenderer;
	static C(Other: UObject): DestructibleMeshThumbnailRenderer;
}

declare class LevelThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): LevelThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): LevelThumbnailRenderer;
	static GetDefaultObject(): LevelThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelThumbnailRenderer;
	static C(Other: UObject): LevelThumbnailRenderer;
}

declare class MaterialFunctionThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): MaterialFunctionThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionThumbnailRenderer;
	static GetDefaultObject(): MaterialFunctionThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionThumbnailRenderer;
	static C(Other: UObject): MaterialFunctionThumbnailRenderer;
}

declare class MaterialInstanceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): MaterialInstanceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceThumbnailRenderer;
	static GetDefaultObject(): MaterialInstanceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceThumbnailRenderer;
	static C(Other: UObject): MaterialInstanceThumbnailRenderer;
}

declare class SkeletalMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SkeletalMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshThumbnailRenderer;
	static GetDefaultObject(): SkeletalMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshThumbnailRenderer;
	static C(Other: UObject): SkeletalMeshThumbnailRenderer;
}

declare class SlateBrushThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SlateBrushThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SlateBrushThumbnailRenderer;
	static GetDefaultObject(): SlateBrushThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushThumbnailRenderer;
	static C(Other: UObject): SlateBrushThumbnailRenderer;
}

declare class StaticMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): StaticMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): StaticMeshThumbnailRenderer;
	static GetDefaultObject(): StaticMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshThumbnailRenderer;
	static C(Other: UObject): StaticMeshThumbnailRenderer;
}

declare class WorldThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	GlobalOrbitPitchOffset: number;
	GlobalOrbitYawOffset: number;
	bUseUnlitScene: boolean;
	bAllowWorldThumbnails: boolean;
	static Load(ResourceName: string): WorldThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailRenderer;
	static GetDefaultObject(): WorldThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailRenderer;
	static C(Other: UObject): WorldThumbnailRenderer;
}

declare class SoundWaveThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): SoundWaveThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SoundWaveThumbnailRenderer;
	static GetDefaultObject(): SoundWaveThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveThumbnailRenderer;
	static C(Other: UObject): SoundWaveThumbnailRenderer;
}

declare class TextureThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): TextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureThumbnailRenderer;
	static GetDefaultObject(): TextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureThumbnailRenderer;
	static C(Other: UObject): TextureThumbnailRenderer;
}

declare class FontThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): FontThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): FontThumbnailRenderer;
	static GetDefaultObject(): FontThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontThumbnailRenderer;
	static C(Other: UObject): FontThumbnailRenderer;
}

declare class ParticleSystemThumbnailRenderer extends TextureThumbnailRenderer { 
	NoImage: Texture2D;
	OutOfDate: Texture2D;
	static Load(ResourceName: string): ParticleSystemThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemThumbnailRenderer;
	static GetDefaultObject(): ParticleSystemThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemThumbnailRenderer;
	static C(Other: UObject): ParticleSystemThumbnailRenderer;
}

declare class SubsurfaceProfileRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): SubsurfaceProfileRenderer;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileRenderer;
	static GetDefaultObject(): SubsurfaceProfileRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileRenderer;
	static C(Other: UObject): SubsurfaceProfileRenderer;
}

declare class TextureCubeThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): TextureCubeThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureCubeThumbnailRenderer;
	static GetDefaultObject(): TextureCubeThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeThumbnailRenderer;
	static C(Other: UObject): TextureCubeThumbnailRenderer;
}

declare class TransBuffer extends Transactor { 
	static Load(ResourceName: string): TransBuffer;
	static Find(Outer: UObject, ResourceName: string): TransBuffer;
	static GetDefaultObject(): TransBuffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransBuffer;
	static C(Other: UObject): TransBuffer;
}

declare class UpdateGameProjectCommandlet extends Commandlet { 
	static Load(ResourceName: string): UpdateGameProjectCommandlet;
	static Find(Outer: UObject, ResourceName: string): UpdateGameProjectCommandlet;
	static GetDefaultObject(): UpdateGameProjectCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UpdateGameProjectCommandlet;
	static C(Other: UObject): UpdateGameProjectCommandlet;
}

declare class StructVariableDescription { 
	VarName: string;
	VarGuid: Guid;
	FriendlyName: string;
	DefaultValue: string;
	Category: string;
	SubCategory: string;
	SubCategoryObject: any;
	PinValueType: EdGraphTerminalType;
	bIsArray: boolean;
	bIsSet: boolean;
	bIsMap: boolean;
	bInvalidMember: boolean;
	CurrentDefaultValue: string;
	ToolTip: string;
	bDontEditoOnInstance: boolean;
	bEnableMultiLineText: boolean;
	bEnable3dWidget: boolean;
	clone() : StructVariableDescription;
	static C(Other: UObject): StructVariableDescription;
}

declare class UserDefinedStructEditorData extends UObject { 
	UniqueNameId: any;
	VariablesDescriptions: StructVariableDescription[];
	ToolTip: string;
	NativeBase: ScriptStruct;
	static Load(ResourceName: string): UserDefinedStructEditorData;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStructEditorData;
	static GetDefaultObject(): UserDefinedStructEditorData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStructEditorData;
	static C(Other: UObject): UserDefinedStructEditorData;
}

declare class WrangleContentCommandlet extends Commandlet { 
	static Load(ResourceName: string): WrangleContentCommandlet;
	static Find(Outer: UObject, ResourceName: string): WrangleContentCommandlet;
	static GetDefaultObject(): WrangleContentCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrangleContentCommandlet;
	static C(Other: UObject): WrangleContentCommandlet;
}

declare class ControlPointMeshComponent extends StaticMeshComponent { 
	bSelected: boolean;
	static Load(ResourceName: string): ControlPointMeshComponent;
	static Find(Outer: UObject, ResourceName: string): ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshComponent;
	static C(Other: UObject): ControlPointMeshComponent;
}

declare class LandscapeLayerInfoObject extends UObject { 
	LayerName: string;
	PhysMaterial: PhysicalMaterial;
	Hardness: number;
	bNoWeightBlend: boolean;
	LayerUsageDebugColor: LinearColor;
	static Load(ResourceName: string): LandscapeLayerInfoObject;
	static Find(Outer: UObject, ResourceName: string): LandscapeLayerInfoObject;
	static GetDefaultObject(): LandscapeLayerInfoObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeLayerInfoObject;
	static C(Other: UObject): LandscapeLayerInfoObject;
}

declare class WeightmapLayerAllocationInfo { 
	LayerInfo: LandscapeLayerInfoObject;
	WeightmapTextureIndex: number;
	WeightmapTextureChannel: number;
	clone() : WeightmapLayerAllocationInfo;
	static C(Other: UObject): WeightmapLayerAllocationInfo;
}

declare class LandscapeComponent extends PrimitiveComponent { 
	SectionBaseX: number;
	SectionBaseY: number;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	OverrideMaterial: MaterialInterface;
	OverrideHoleMaterial: MaterialInterface;
	MaterialInstance: MaterialInstanceConstant;
	MaterialInstances: MaterialInstanceConstant[];
	WeightmapLayerAllocations: WeightmapLayerAllocationInfo[];
	WeightmapTextures: Texture2D[];
	XYOffsetmapTexture: Texture2D;
	WeightmapScaleBias: Vector4;
	WeightmapSubsectionOffset: number;
	HeightmapScaleBias: Vector4;
	HeightmapTexture: Texture2D;
	CachedLocalBox: Box;
	CollisionComponent: any;
	LightingGuid: Guid;
	MapBuildDataId: Guid;
	IrrelevantLights: Guid[];
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	StaticLightingResolution: number;
	ForcedLOD: number;
	LODBias: number;
	StateId: Guid;
	BakedTextureMaterialGuid: Guid;
	GIBakedBaseColorTexture: Texture2D;
	LightingLODBias: number;
	LayerWhitelist: LandscapeLayerInfoObject[];
	SelectDataTexture: Texture2D;
	MobileDataSourceHash: Guid;
	MobileBlendableLayerMask: number;
	MobileMaterialInterface: MaterialInterface;
	MobileWeightNormalmapTexture: Texture2D;
	static Load(ResourceName: string): LandscapeComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeComponent;
	static GetDefaultObject(): LandscapeComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeComponent;
	static C(Other: UObject): LandscapeComponent;
}

declare class LandscapeSplineSegmentConnection { 
	ControlPoint: LandscapeSplineControlPoint;
	TangentLen: number;
	SocketName: string;
	clone() : LandscapeSplineSegmentConnection;
	static C(Other: UObject): LandscapeSplineSegmentConnection;
}

declare type LandscapeSplineMeshOrientation = 'LSMO_XUp' | 'LSMO_YUp';
declare var LandscapeSplineMeshOrientation : { LSMO_XUp:'LSMO_XUp',LSMO_YUp:'LSMO_YUp', };
declare class LandscapeSplineMeshEntry { 
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	bCenterH: boolean;
	CenterAdjust: Vector2D;
	bScaleToWidth: boolean;
	Scale: Vector;
	Orientation: LandscapeSplineMeshOrientation;
	ForwardAxis: ESplineMeshAxis;
	UpAxis: ESplineMeshAxis;
	clone() : LandscapeSplineMeshEntry;
	static C(Other: UObject): LandscapeSplineMeshEntry;
}

declare class LandscapeSplineInterpPoint { 
	Center: Vector;
	Left: Vector;
	Right: Vector;
	FalloffLeft: Vector;
	FalloffRight: Vector;
	StartEndFalloff: number;
	clone() : LandscapeSplineInterpPoint;
	static C(Other: UObject): LandscapeSplineInterpPoint;
}

declare class LandscapeSplineSegment extends UObject { 
	Connections: LandscapeSplineSegmentConnection;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	SplineMeshes: LandscapeSplineMeshEntry[];
	bEnableCollision: boolean;
	bCastShadow: boolean;
	RandomSeed: number;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	bSelected: boolean;
	bNavDirty: boolean;
	SplineInfo: InterpCurveVector;
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponents: SplineMeshComponent[];
	ForeignWorlds: any[];
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineSegment;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineSegment;
	static GetDefaultObject(): LandscapeSplineSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineSegment;
	static C(Other: UObject): LandscapeSplineSegment;
}

declare class LandscapeSplineConnection { 
	Segment: LandscapeSplineSegment;
	End: boolean;
	clone() : LandscapeSplineConnection;
	static C(Other: UObject): LandscapeSplineConnection;
}

declare class LandscapeSplineControlPoint extends UObject { 
	Location: Vector;
	Rotation: Rotator;
	Width: number;
	SideFalloff: number;
	EndFalloff: number;
	SegmentMeshOffset: number;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	MeshScale: Vector;
	bEnableCollision: boolean;
	bCastShadow: boolean;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	bSelected: boolean;
	bNavDirty: boolean;
	ConnectedSegments: LandscapeSplineConnection[];
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponent: ControlPointMeshComponent;
	ForeignWorld: any;
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineControlPoint;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineControlPoint;
	static GetDefaultObject(): LandscapeSplineControlPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineControlPoint;
	static C(Other: UObject): LandscapeSplineControlPoint;
}

declare class LandscapeSplinesComponent extends PrimitiveComponent { 
	SplineResolution: number;
	SplineColor: Color;
	ControlPointSprite: Texture2D;
	SplineEditorMesh: StaticMesh;
	bShowSplineEditorMesh: boolean;
	ControlPoints: LandscapeSplineControlPoint[];
	Segments: LandscapeSplineSegment[];
	ForeignWorldSplineDataMap: any;
	CookedForeignMeshComponents: MeshComponent[];
	static Load(ResourceName: string): LandscapeSplinesComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplinesComponent;
	static GetDefaultObject(): LandscapeSplinesComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplinesComponent;
	static C(Other: UObject): LandscapeSplinesComponent;
}

declare type ELandscapeLODFalloff = 'Linear' | 'SquareRoot';
declare var ELandscapeLODFalloff : { Linear:'Linear',SquareRoot:'SquareRoot', };
declare class LandscapeHeightfieldCollisionComponent extends PrimitiveComponent { 
	ComponentLayerInfos: LandscapeLayerInfoObject[];
	SectionBaseX: number;
	SectionBaseY: number;
	CollisionSizeQuads: number;
	CollisionScale: number;
	SimpleCollisionSizeQuads: number;
	CollisionQuadFlags: number[];
	HeightfieldGuid: Guid;
	CachedLocalBox: Box;
	RenderComponent: any;
	CookedPhysicalMaterials: PhysicalMaterial[];
	static Load(ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static GetDefaultObject(): LandscapeHeightfieldCollisionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeHeightfieldCollisionComponent;
	static C(Other: UObject): LandscapeHeightfieldCollisionComponent;
}

declare class LandscapeEditorLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	ReimportLayerFilePath: string;
	clone() : LandscapeEditorLayerSettings;
	static C(Other: UObject): LandscapeEditorLayerSettings;
}

declare class LandscapeProxy extends Actor { 
	SplineComponent: LandscapeSplinesComponent;
	LandscapeGuid: Guid;
	LandscapeSectionOffset: IntPoint;
	MaxLODLevel: number;
	LODDistanceFactor: number;
	LODFalloff: ELandscapeLODFalloff;
	ExportLOD: number;
	StaticLightingLOD: number;
	DefaultPhysMaterial: PhysicalMaterial;
	StreamingDistanceMultiplier: number;
	LandscapeMaterial: MaterialInterface;
	LandscapeHoleMaterial: MaterialInterface;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	LandscapeComponents: LandscapeComponent[];
	CollisionComponents: LandscapeHeightfieldCollisionComponent[];
	FoliageComponents: HierarchicalInstancedStaticMeshComponent[];
	bHasLandscapeGrass: boolean;
	StaticLightingResolution: number;
	bCastStaticShadow: boolean;
	bCastShadowAsTwoSided: boolean;
	bCastFarShadow: boolean;
	bUseMaterialPositionOffsetInStaticLighting: boolean;
	bIsMovingToLevel: boolean;
	LightmassSettings: LightmassPrimitiveSettings;
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	CollisionThickness: number;
	BodyInstance: BodyInstance;
	bGenerateOverlapEvents: boolean;
	bBakeMaterialPositionOffsetIntoCollision: boolean;
	EditorCachedLayerInfos: LandscapeLayerInfoObject[];
	ReimportHeightmapFilePath: string;
	EditorLayerSettings: LandscapeEditorLayerSettings[];
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	bUsedForNavigation: boolean;
	NavigationGeometryGatheringMode: NavigationGeometryGatheringMode;
	MaxPaintedLayersPerComponent: number;
	bUseLandscapeForCullingInvisibleHLODVertices: boolean;
	static GetDefaultObject(): LandscapeProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeProxy;
	EditorApplySpline(InSplineComponent: SplineComponent,StartWidth: number,EndWidth: number,StartSideFalloff: number,EndSideFalloff: number,StartRoll: number,EndRoll: number,NumSubdivisions: number,bRaiseHeights: boolean,bLowerHeights: boolean,PaintLayer: LandscapeLayerInfoObject): void;
	ChangeLODDistanceFactor(InLODDistanceFactor: number): void;
	static C(Other: UObject): LandscapeProxy;
}

declare class LandscapeInfoLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	LayerName: string;
	ThumbnailMIC: MaterialInstanceConstant;
	Owner: LandscapeProxy;
	DebugColorChannel: number;
	bValid: boolean;
	clone() : LandscapeInfoLayerSettings;
	static C(Other: UObject): LandscapeInfoLayerSettings;
}

declare type ELandscapeLayerPaintingRestriction = 'None' | 'UseMaxLayers' | 'ExistingOnly' | 'UseComponentWhitelist';
declare var ELandscapeLayerPaintingRestriction : { None:'None',UseMaxLayers:'UseMaxLayers',ExistingOnly:'ExistingOnly',UseComponentWhitelist:'UseComponentWhitelist', };
declare class LandscapeInfo extends UObject { 
	LandscapeActor: any;
	LandscapeGuid: Guid;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	ComponentNumSubsections: number;
	DrawScale: Vector;
	Layers: LandscapeInfoLayerSettings[];
	Proxies: any;
	static Load(ResourceName: string): LandscapeInfo;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfo;
	static GetDefaultObject(): LandscapeInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfo;
	static C(Other: UObject): LandscapeInfo;
	GetAlphamapDataToMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetHeightmapDataToMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetLandscapeExtent(MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	GetLayerInfoByName(LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	SetAlphamapDataFromMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: PaintingRestriction): void;
	SetHeightmapDataFromMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetAlphamapDataToMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetHeightmapDataToMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetLandscapeExtent(LandscapeInfo: LandscapeInfo,MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	static GetLayerInfoByName(LandscapeInfo: LandscapeInfo,LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	static SetAlphamapDataFromMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: PaintingRestriction): void;
	static SetHeightmapDataFromMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
}

declare class LandscapeGizmoActor extends Actor { 
	Width: number;
	Height: number;
	LengthZ: number;
	MarginZ: number;
	MinRelativeZ: number;
	RelativeScaleZ: number;
	TargetLandscapeInfo: LandscapeInfo;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): LandscapeGizmoActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActor;
	static C(Other: UObject): LandscapeGizmoActor;
}

declare type ELandscapeGizmoType = 'LGT_None' | 'LGT_Height' | 'LGT_Weight';
declare var ELandscapeGizmoType : { LGT_None:'LGT_None',LGT_Height:'LGT_Height',LGT_Weight:'LGT_Weight', };
declare class LandscapeGizmoActiveActor extends LandscapeGizmoActor { 
	DataType: ELandscapeGizmoType;
	GizmoTexture: Texture2D;
	TextureScale: Vector2D;
	SampledHeight: Vector[];
	SampledNormal: Vector[];
	SampleSizeX: number;
	SampleSizeY: number;
	CachedWidth: number;
	CachedHeight: number;
	CachedScaleXY: number;
	FrustumVerts: Vector;
	GizmoMaterial: Material;
	GizmoDataMaterial: MaterialInstance;
	GizmoMeshMaterial: Material;
	LayerInfos: LandscapeLayerInfoObject[];
	bSnapToLandscapeGrid: boolean;
	UnsnappedRotation: Rotator;
	static GetDefaultObject(): LandscapeGizmoActiveActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActiveActor;
	static C(Other: UObject): LandscapeGizmoActiveActor;
}

declare class LandscapeGizmoRenderComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): LandscapeGizmoRenderComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeGizmoRenderComponent;
	static GetDefaultObject(): LandscapeGizmoRenderComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoRenderComponent;
	static C(Other: UObject): LandscapeGizmoRenderComponent;
}

declare type EGrassScaling = 'Uniform' | 'Free' | 'LockXY';
declare var EGrassScaling : { Uniform:'Uniform',Free:'Free',LockXY:'LockXY', };
declare class GrassVariety { 
	GrassMesh: StaticMesh;
	GrassDensity: number;
	bUseGrid: boolean;
	PlacementJitter: number;
	StartCullDistance: number;
	EndCullDistance: number;
	MinLOD: number;
	Scaling: Scaling;
	ScaleX: FloatInterval;
	ScaleY: FloatInterval;
	ScaleZ: FloatInterval;
	RandomRotation: boolean;
	AlignToSurface: boolean;
	bUseLandscapeLightmap: boolean;
	LightingChannels: LightingChannels;
	bReceivesDecals: boolean;
	clone() : GrassVariety;
	static C(Other: UObject): GrassVariety;
}

declare class LandscapeGrassType extends UObject { 
	GrassVarieties: GrassVariety[];
	GrassMesh: StaticMesh;
	GrassDensity: number;
	PlacementJitter: number;
	StartCullDistance: number;
	EndCullDistance: number;
	RandomRotation: boolean;
	AlignToSurface: boolean;
	static Load(ResourceName: string): LandscapeGrassType;
	static Find(Outer: UObject, ResourceName: string): LandscapeGrassType;
	static GetDefaultObject(): LandscapeGrassType;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGrassType;
	static C(Other: UObject): LandscapeGrassType;
}

declare class LandscapeMeshCollisionComponent extends LandscapeHeightfieldCollisionComponent { 
	MeshGuid: Guid;
	static Load(ResourceName: string): LandscapeMeshCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshCollisionComponent;
	static GetDefaultObject(): LandscapeMeshCollisionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshCollisionComponent;
	static C(Other: UObject): LandscapeMeshCollisionComponent;
}

declare class LandscapeInfoMap extends UObject { 
	static Load(ResourceName: string): LandscapeInfoMap;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfoMap;
	static GetDefaultObject(): LandscapeInfoMap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfoMap;
	static C(Other: UObject): LandscapeInfoMap;
}

declare class LandscapeMaterialInstanceConstant extends MaterialInstanceConstant { 
	bIsLayerThumbnail: boolean;
	bDisableTessellation: boolean;
	static Load(ResourceName: string): LandscapeMaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): LandscapeMaterialInstanceConstant;
	static GetDefaultObject(): LandscapeMaterialInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMaterialInstanceConstant;
	static C(Other: UObject): LandscapeMaterialInstanceConstant;
}

declare class LandscapeMeshProxyComponent extends StaticMeshComponent { 
	LandscapeGuid: Guid;
	ProxyComponentBases: IntPoint[];
	ProxyLOD: any;
	static Load(ResourceName: string): LandscapeMeshProxyComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshProxyComponent;
	static GetDefaultObject(): LandscapeMeshProxyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyComponent;
	static C(Other: UObject): LandscapeMeshProxyComponent;
}

declare class LandscapeMeshProxyActor extends Actor { 
	LandscapeMeshProxyComponent: LandscapeMeshProxyComponent;
	static GetDefaultObject(): LandscapeMeshProxyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyActor;
	static C(Other: UObject): LandscapeMeshProxyActor;
}

declare class Landscape extends LandscapeProxy { 
	static GetDefaultObject(): Landscape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Landscape;
	static C(Other: UObject): Landscape;
	GetLandscapeInfo(bSpawnNewActor: boolean): LandscapeInfo;
	static GetLandscapeInfo(Landscape: Landscape,bSpawnNewActor: boolean): LandscapeInfo;
}

declare class LandscapeStreamingProxy extends LandscapeProxy { 
	LandscapeActor: any;
	static GetDefaultObject(): LandscapeStreamingProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeStreamingProxy;
	static C(Other: UObject): LandscapeStreamingProxy;
}

declare class MaterialExpressionCustomOutput extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustomOutput;
	static GetDefaultObject(): MaterialExpressionCustomOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustomOutput;
	static C(Other: UObject): MaterialExpressionCustomOutput;
}

declare class GrassInput { 
	Name: string;
	GrassType: LandscapeGrassType;
	Input: ExpressionInput;
	clone() : GrassInput;
	static C(Other: UObject): GrassInput;
}

declare class MaterialExpressionLandscapeGrassOutput extends MaterialExpressionCustomOutput { 
	GrassTypes: GrassInput[];
	static Load(ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static GetDefaultObject(): MaterialExpressionLandscapeGrassOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeGrassOutput;
	static C(Other: UObject): MaterialExpressionLandscapeGrassOutput;
}

declare type ELandscapeLayerBlendType = 'LB_WeightBlend' | 'LB_AlphaBlend' | 'LB_HeightBlend';
declare var ELandscapeLayerBlendType : { LB_WeightBlend:'LB_WeightBlend',LB_AlphaBlend:'LB_AlphaBlend',LB_HeightBlend:'LB_HeightBlend', };
declare class LayerBlendInput { 
	LayerName: string;
	BlendType: ELandscapeLayerBlendType;
	LayerInput: ExpressionInput;
	HeightInput: ExpressionInput;
	PreviewWeight: number;
	ConstLayerInput: Vector;
	ConstHeightInput: number;
	clone() : LayerBlendInput;
	static C(Other: UObject): LayerBlendInput;
}

declare class MaterialExpressionLandscapeLayerBlend extends MaterialExpression { 
	Layers: LayerBlendInput[];
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerBlend;
	static C(Other: UObject): MaterialExpressionLandscapeLayerBlend;
}

declare type ETerrainCoordMappingType = 'TCMT_Auto' | 'TCMT_XY' | 'TCMT_XZ' | 'TCMT_YZ';
declare var ETerrainCoordMappingType : { TCMT_Auto:'TCMT_Auto',TCMT_XY:'TCMT_XY',TCMT_XZ:'TCMT_XZ',TCMT_YZ:'TCMT_YZ', };
declare type ELandscapeCustomizedCoordType = 'LCCT_None' | 'LCCT_CustomUV0' | 'LCCT_CustomUV1' | 'LCCT_CustomUV2' | 'LCCT_WeightMapUV';
declare var ELandscapeCustomizedCoordType : { LCCT_None:'LCCT_None',LCCT_CustomUV0:'LCCT_CustomUV0',LCCT_CustomUV1:'LCCT_CustomUV1',LCCT_CustomUV2:'LCCT_CustomUV2',LCCT_WeightMapUV:'LCCT_WeightMapUV', };
declare class MaterialExpressionLandscapeLayerCoords extends MaterialExpression { 
	MappingType: ETerrainCoordMappingType;
	CustomUVType: ELandscapeCustomizedCoordType;
	MappingScale: number;
	MappingRotation: number;
	MappingPanU: number;
	MappingPanV: number;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerCoords;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerCoords;
	static C(Other: UObject): MaterialExpressionLandscapeLayerCoords;
}

declare class MaterialExpressionLandscapeLayerSample extends MaterialExpression { 
	ParameterName: string;
	PreviewWeight: number;
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSample;
	static C(Other: UObject): MaterialExpressionLandscapeLayerSample;
}

declare class MaterialExpressionLandscapeLayerSwitch extends MaterialExpression { 
	LayerUsed: ExpressionInput;
	LayerNotUsed: ExpressionInput;
	ParameterName: string;
	PreviewUsed: boolean;
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSwitch;
	static C(Other: UObject): MaterialExpressionLandscapeLayerSwitch;
}

declare class MaterialExpressionLandscapeLayerWeight extends MaterialExpression { 
	Base: ExpressionInput;
	Layer: ExpressionInput;
	ParameterName: string;
	PreviewWeight: number;
	ConstBase: Vector;
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerWeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerWeight;
	static C(Other: UObject): MaterialExpressionLandscapeLayerWeight;
}

declare class MaterialExpressionLandscapeVisibilityMask extends MaterialExpression { 
	ExpressionGUID: Guid;
	static Load(ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static GetDefaultObject(): MaterialExpressionLandscapeVisibilityMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeVisibilityMask;
	static C(Other: UObject): MaterialExpressionLandscapeVisibilityMask;
}

declare class HandlerComponentFactory extends UObject { 
	static Load(ResourceName: string): HandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): HandlerComponentFactory;
	static GetDefaultObject(): HandlerComponentFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HandlerComponentFactory;
	static C(Other: UObject): HandlerComponentFactory;
}

declare class EngineTypes extends UObject { 
	static Load(ResourceName: string): EngineTypes;
	static Find(Outer: UObject, ResourceName: string): EngineTypes;
	static GetDefaultObject(): EngineTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineTypes;
	static C(Other: UObject): EngineTypes;
}

declare class EngineBaseTypes extends UObject { 
	static Load(ResourceName: string): EngineBaseTypes;
	static Find(Outer: UObject, ResourceName: string): EngineBaseTypes;
	static GetDefaultObject(): EngineBaseTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineBaseTypes;
	static C(Other: UObject): EngineBaseTypes;
}

declare class Interface_AssetUserData extends Interface { 
	static Load(ResourceName: string): Interface_AssetUserData;
	static Find(Outer: UObject, ResourceName: string): Interface_AssetUserData;
	static GetDefaultObject(): Interface_AssetUserData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_AssetUserData;
	static C(Other: UObject): Interface_AssetUserData;
}

declare class AmbientSound extends Actor { 
	AudioComponent: AudioComponent;
	static GetDefaultObject(): AmbientSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AmbientSound;
	Stop(): void;
	Play(StartTime: number): void;
	FadeOut(FadeOutDuration: number,FadeVolumeLevel: number): void;
	FadeIn(FadeInDuration: number,FadeVolumeLevel: number): void;
	AdjustVolume(AdjustVolumeDuration: number,AdjustVolumeLevel: number): void;
	static C(Other: UObject): AmbientSound;
}

declare class BrushShape extends Brush { 
	static GetDefaultObject(): BrushShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushShape;
	static C(Other: UObject): BrushShape;
}

declare class AudioVolume extends Volume { 
	Priority: number;
	bEnabled: boolean;
	Settings: ReverbSettings;
	AmbientZoneSettings: InteriorSettings;
	static GetDefaultObject(): AudioVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioVolume;
	SetReverbSettings(NewReverbSettings: ReverbSettings): void;
	SetPriority(NewPriority: number): void;
	SetInteriorSettings(NewInteriorSettings: InteriorSettings): void;
	SetEnabled(bNewEnabled: boolean): void;
	OnRep_bEnabled(): void;
	static C(Other: UObject): AudioVolume;
}

declare class BlockingVolume extends Volume { 
	static GetDefaultObject(): BlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlockingVolume;
	static C(Other: UObject): BlockingVolume;
}

declare class CameraBlockingVolume extends Volume { 
	static GetDefaultObject(): CameraBlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraBlockingVolume;
	static C(Other: UObject): CameraBlockingVolume;
}

declare class CullDistanceSizePair { 
	Size: number;
	CullDistance: number;
	clone() : CullDistanceSizePair;
	static C(Other: UObject): CullDistanceSizePair;
}

declare class CullDistanceVolume extends Volume { 
	CullDistances: CullDistanceSizePair[];
	bEnabled: boolean;
	static GetDefaultObject(): CullDistanceVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CullDistanceVolume;
	static C(Other: UObject): CullDistanceVolume;
}

declare class LightmassCharacterIndirectDetailVolume extends Volume { 
	static GetDefaultObject(): LightmassCharacterIndirectDetailVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassCharacterIndirectDetailVolume;
	static C(Other: UObject): LightmassCharacterIndirectDetailVolume;
}

declare class LightmassImportanceVolume extends Volume { 
	static GetDefaultObject(): LightmassImportanceVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassImportanceVolume;
	static C(Other: UObject): LightmassImportanceVolume;
}

declare class MeshMergeCullingVolume extends Volume { 
	static GetDefaultObject(): MeshMergeCullingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshMergeCullingVolume;
	static C(Other: UObject): MeshMergeCullingVolume;
}

declare class NavigationTypes extends UObject { 
	static Load(ResourceName: string): NavigationTypes;
	static Find(Outer: UObject, ResourceName: string): NavigationTypes;
	static GetDefaultObject(): NavigationTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTypes;
	static C(Other: UObject): NavigationTypes;
}

declare class NavRelevantInterface extends Interface { 
	static Load(ResourceName: string): NavRelevantInterface;
	static Find(Outer: UObject, ResourceName: string): NavRelevantInterface;
	static GetDefaultObject(): NavRelevantInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantInterface;
	static C(Other: UObject): NavRelevantInterface;
}

declare class NavModifierVolume extends Volume { 
	AreaClass: UnrealEngineClass;
	static GetDefaultObject(): NavModifierVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierVolume;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject): NavModifierVolume;
}

declare class KillZVolume extends PhysicsVolume { 
	static GetDefaultObject(): KillZVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KillZVolume;
	static C(Other: UObject): KillZVolume;
}

declare class PainCausingVolume extends PhysicsVolume { 
	bPainCausing: boolean;
	DamagePerSec: number;
	DamageType: UnrealEngineClass;
	PainInterval: number;
	bEntryPain: boolean;
	BACKUP_bPainCausing: boolean;
	DamageInstigator: Controller;
	static GetDefaultObject(): PainCausingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PainCausingVolume;
	static C(Other: UObject): PainCausingVolume;
}

declare class BlendableInterface extends Interface { 
	static Load(ResourceName: string): BlendableInterface;
	static Find(Outer: UObject, ResourceName: string): BlendableInterface;
	static GetDefaultObject(): BlendableInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendableInterface;
	static C(Other: UObject): BlendableInterface;
}

declare class Scene extends UObject { 
	static Load(ResourceName: string): Scene;
	static Find(Outer: UObject, ResourceName: string): Scene;
	static GetDefaultObject(): Scene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Scene;
	static C(Other: UObject): Scene;
}

declare class Interface_PostProcessVolume extends Interface { 
	static Load(ResourceName: string): Interface_PostProcessVolume;
	static Find(Outer: UObject, ResourceName: string): Interface_PostProcessVolume;
	static GetDefaultObject(): Interface_PostProcessVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_PostProcessVolume;
	static C(Other: UObject): Interface_PostProcessVolume;
}

declare class PostProcessVolume extends Volume { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	static GetDefaultObject(): PostProcessVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessVolume;
	static C(Other: UObject): PostProcessVolume;
}

declare class PrecomputedVisibilityOverrideVolume extends Volume { 
	OverrideVisibleActors: Actor[];
	OverrideInvisibleActors: Actor[];
	OverrideInvisibleLevels: string[];
	static GetDefaultObject(): PrecomputedVisibilityOverrideVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityOverrideVolume;
	static C(Other: UObject): PrecomputedVisibilityOverrideVolume;
}

declare class PrecomputedVisibilityVolume extends Volume { 
	static GetDefaultObject(): PrecomputedVisibilityVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityVolume;
	static C(Other: UObject): PrecomputedVisibilityVolume;
}

declare class PreCullTrianglesVolume extends Volume { 
	static GetDefaultObject(): PreCullTrianglesVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreCullTrianglesVolume;
	static C(Other: UObject): PreCullTrianglesVolume;
}

declare class TriggerVolume extends Volume { 
	static GetDefaultObject(): TriggerVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerVolume;
	static C(Other: UObject): TriggerVolume;
}

declare class NavAgentInterface extends Interface { 
	static Load(ResourceName: string): NavAgentInterface;
	static Find(Outer: UObject, ResourceName: string): NavAgentInterface;
	static GetDefaultObject(): NavAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAgentInterface;
	static C(Other: UObject): NavAgentInterface;
}

declare class BoxComponent extends ShapeComponent { 
	BoxExtent: Vector;
	static Load(ResourceName: string): BoxComponent;
	static Find(Outer: UObject, ResourceName: string): BoxComponent;
	static GetDefaultObject(): BoxComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxComponent;
	SetBoxExtent(InBoxExtent: Vector,bUpdateOverlaps: boolean): void;
	GetUnscaledBoxExtent(): Vector;
	GetScaledBoxExtent(): Vector;
	static C(Other: UObject): BoxComponent;
}

declare class DecalActor extends Actor { 
	Decal: DecalComponent;
	ArrowComponent: ArrowComponent;
	SpriteComponent: BillboardComponent;
	BoxComponent: BoxComponent;
	static GetDefaultObject(): DecalActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DecalActor;
	SetDecalMaterial(NewDecalMaterial: MaterialInterface): void;
	GetDecalMaterial(): MaterialInterface;
	CreateDynamicMaterialInstance(): MaterialInstanceDynamic;
	static C(Other: UObject): DecalActor;
}

declare class FractureEffect { 
	ParticleSystem: ParticleSystem;
	Sound: SoundBase;
	clone() : FractureEffect;
	static C(Other: UObject): FractureEffect;
}

declare class DestructibleDamageParameters { 
	DamageThreshold: number;
	DamageSpread: number;
	bEnableImpactDamage: boolean;
	ImpactDamage: number;
	DefaultImpactDamageDepth: number;
	bCustomImpactResistance: boolean;
	ImpactResistance: number;
	clone() : DestructibleDamageParameters;
	static C(Other: UObject): DestructibleDamageParameters;
}

declare class DestructibleDebrisParameters { 
	DebrisLifetimeMin: number;
	DebrisLifetimeMax: number;
	DebrisMaxSeparationMin: number;
	DebrisMaxSeparationMax: number;
	ValidBounds: Box;
	clone() : DestructibleDebrisParameters;
	static C(Other: UObject): DestructibleDebrisParameters;
}

declare class DestructibleAdvancedParameters { 
	DamageCap: number;
	ImpactVelocityThreshold: number;
	MaxChunkSpeed: number;
	FractureImpulseScale: number;
	clone() : DestructibleAdvancedParameters;
	static C(Other: UObject): DestructibleAdvancedParameters;
}

declare class DestructibleSpecialHierarchyDepths { 
	SupportDepth: number;
	MinimumFractureDepth: number;
	bEnableDebris: boolean;
	DebrisDepth: number;
	EssentialDepth: number;
	clone() : DestructibleSpecialHierarchyDepths;
	static C(Other: UObject): DestructibleSpecialHierarchyDepths;
}

declare type EImpactDamageOverride = 'IDO_None' | 'IDO_On' | 'IDO_Off';
declare var EImpactDamageOverride : { IDO_None:'IDO_None',IDO_On:'IDO_On',IDO_Off:'IDO_Off', };
declare class DestructibleDepthParameters { 
	ImpactDamageOverride: EImpactDamageOverride;
	clone() : DestructibleDepthParameters;
	static C(Other: UObject): DestructibleDepthParameters;
}

declare class DestructibleParametersFlag { 
	bAccumulateDamage: boolean;
	bAssetDefinedSupport: boolean;
	bWorldSupport: boolean;
	bDebrisTimeout: boolean;
	bDebrisMaxSeparation: boolean;
	bCrumbleSmallestChunks: boolean;
	bAccurateRaycasts: boolean;
	bUseValidBounds: boolean;
	bFormExtendedStructures: boolean;
	clone() : DestructibleParametersFlag;
	static C(Other: UObject): DestructibleParametersFlag;
}

declare class DestructibleParameters { 
	DamageParameters: DestructibleDamageParameters;
	DebrisParameters: DestructibleDebrisParameters;
	AdvancedParameters: DestructibleAdvancedParameters;
	SpecialHierarchyDepths: DestructibleSpecialHierarchyDepths;
	DepthParameters: DestructibleDepthParameters[];
	Flags: DestructibleParametersFlag;
	clone() : DestructibleParameters;
	static C(Other: UObject): DestructibleParameters;
}

declare class FractureMaterial { 
	UVScale: Vector2D;
	UVOffset: Vector2D;
	Tangent: Vector;
	UAngle: number;
	InteriorElementIndex: number;
	clone() : FractureMaterial;
	static C(Other: UObject): FractureMaterial;
}

declare class DestructibleChunkParameters { 
	bIsSupportChunk: boolean;
	bDoNotFracture: boolean;
	bDoNotDamage: boolean;
	bDoNotCrumble: boolean;
	clone() : DestructibleChunkParameters;
	static C(Other: UObject): DestructibleChunkParameters;
}

declare class DestructibleFractureSettings extends UObject { 
	CellSiteCount: number;
	FractureMaterialDesc: FractureMaterial;
	RandomSeed: number;
	VoronoiSites: Vector[];
	OriginalSubmeshCount: number;
	Materials: MaterialInterface[];
	ChunkParameters: DestructibleChunkParameters[];
	static Load(ResourceName: string): DestructibleFractureSettings;
	static Find(Outer: UObject, ResourceName: string): DestructibleFractureSettings;
	static GetDefaultObject(): DestructibleFractureSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleFractureSettings;
	static C(Other: UObject): DestructibleFractureSettings;
}

declare class Timespan { 
	clone() : Timespan;
	static C(Other: UObject): Timespan;
	AsTimespan(): string;
	Add_TimespanTimespan(B: Timespan): Timespan;
	BreakTimespan(Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	Equal(B: Timespan): boolean;
	GetDays(): number;
	GetDuration(): Timespan;
	GetHours(): number;
	GetMilliseconds(): number;
	GetMinutes(): number;
	GetSeconds(): number;
	GetTotalDays(): number;
	GetTotalHours(): number;
	GetTotalMilliseconds(): number;
	GetTotalMinutes(): number;
	GetTotalSeconds(): number;
	Greater_TimespanTimespan(B: Timespan): boolean;
	GreaterEqual_TimespanTimespan(B: Timespan): boolean;
	Less_TimespanTimespan(B: Timespan): boolean;
	LessEqual_TimespanTimespan(B: Timespan): boolean;
	Multiply_TimespanFloat(Scalar: number): Timespan;
	NotEqual(B: Timespan): boolean;
	Subtract_TimespanTimespan(B: Timespan): Timespan;
	TimespanRatio(B: Timespan): number;
	static AsTimespan(InTimespan: Timespan): string;
	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static BreakTimespan(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	static Equal(A: Timespan,B: Timespan): boolean;
	static GetDays(A: Timespan): number;
	static GetDuration(A: Timespan): Timespan;
	static GetHours(A: Timespan): number;
	static GetMilliseconds(A: Timespan): number;
	static GetMinutes(A: Timespan): number;
	static GetSeconds(A: Timespan): number;
	static GetTotalDays(A: Timespan): number;
	static GetTotalHours(A: Timespan): number;
	static GetTotalMilliseconds(A: Timespan): number;
	static GetTotalMinutes(A: Timespan): number;
	static GetTotalSeconds(A: Timespan): number;
	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static NotEqual(A: Timespan,B: Timespan): boolean;
	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static TimespanRatio(A: Timespan,B: Timespan): number;
	static FromDays(Days: number): Timespan;
	static FromHours(Hours: number): Timespan;
	static FromMilliseconds(Milliseconds: number): Timespan;
	static FromMinutes(Minutes: number): Timespan;
	static FromSeconds(Seconds: number): Timespan;
	static MakeTimespan(Days: number,Hours: number,Minutes: number,Seconds: number,Milliseconds: number): Timespan;
	static MaxValue(): Timespan;
	static MinValue(): Timespan;
	static ZeroValue(): Timespan;
}

declare class DateTime { 
	clone() : DateTime;
	static C(Other: UObject): DateTime;
	AsDate(): string;
	AsDateTime(): string;
	AsTime(): string;
	AsDate(InTimeZone: string): string;
	AsDateTime(InTimeZone: string): string;
	AsTime(InTimeZone: string): string;
	Add_DateTimeTimespan(B: Timespan): DateTime;
	BreakDateTime(Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	Equal(B: DateTime): boolean;
	GetDate(): DateTime;
	GetDay(): number;
	GetDayOfYear(): number;
	GetHour(): number;
	GetHour12(): number;
	GetMillisecond(): number;
	GetMinute(): number;
	GetMonth(): number;
	GetSecond(): number;
	GetTimeOfDay(): Timespan;
	GetYear(): number;
	Greater_DateTimeDateTime(B: DateTime): boolean;
	GreaterEqual_DateTimeDateTime(B: DateTime): boolean;
	IsAfternoon(): boolean;
	IsMorning(): boolean;
	Less_DateTimeDateTime(B: DateTime): boolean;
	LessEqual_DateTimeDateTime(B: DateTime): boolean;
	NotEqual(B: DateTime): boolean;
	Subtract_DateTimeDateTime(B: DateTime): Timespan;
	Subtract_DateTimeTimespan(B: Timespan): DateTime;
	ScheduleLocalNotificationAtTime(LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static AsDate(InDateTime: DateTime): string;
	static AsDateTime(In: DateTime): string;
	static AsTime(In: DateTime): string;
	static AsDate(InDateTime: DateTime,InTimeZone: string): string;
	static AsDateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsTime(InDateTime: DateTime,InTimeZone: string): string;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static Equal(A: DateTime,B: DateTime): boolean;
	static GetDate(A: DateTime): DateTime;
	static GetDay(A: DateTime): number;
	static GetDayOfYear(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetHour12(A: DateTime): number;
	static GetMillisecond(A: DateTime): number;
	static GetMinute(A: DateTime): number;
	static GetMonth(A: DateTime): number;
	static GetSecond(A: DateTime): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetYear(A: DateTime): number;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static IsMorning(A: DateTime): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static NotEqual(A: DateTime,B: DateTime): boolean;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static MaxValue(): DateTime;
	static MinValue(): DateTime;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static Now(): DateTime;
	static Today(): DateTime;
	static UtcNow(): DateTime;
}

declare class DestructibleMesh extends SkeletalMesh { 
	DefaultDestructibleParameters: DestructibleParameters;
	FractureEffects: FractureEffect[];
	FractureSettings: DestructibleFractureSettings;
	SourceStaticMesh: StaticMesh;
	SourceSMImportTimestamp: DateTime;
	FractureChunkMeshes: StaticMesh[];
	static Load(ResourceName: string): DestructibleMesh;
	static Find(Outer: UObject, ResourceName: string): DestructibleMesh;
	static GetDefaultObject(): DestructibleMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleMesh;
	static C(Other: UObject): DestructibleMesh;
}

declare class DestructibleComponent extends SkinnedMeshComponent { 
	bFractureEffectOverride: boolean;
	FractureEffects: FractureEffect[];
	bEnableHardSleeping: boolean;
	LargeChunkThreshold: number;
	DestructibleMesh: DestructibleMesh;
	OnComponentFracture: UnrealEngineMulticastDelegate<(HitPoint: Vector, HitDirection: Vector) => void>;
	static Load(ResourceName: string): DestructibleComponent;
	static Find(Outer: UObject, ResourceName: string): DestructibleComponent;
	static GetDefaultObject(): DestructibleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleComponent;
	SetDestructibleMesh(NewMesh: DestructibleMesh): void;
	GetDestructibleMesh(): DestructibleMesh;
	ApplyRadiusDamage(BaseDamage: number,HurtOrigin: Vector,DamageRadius: number,ImpulseStrength: number,bFullDamage: boolean): void;
	ApplyDamage(DamageAmount: number,HitLocation: Vector,ImpulseDir: Vector,ImpulseStrength: number): void;
	static C(Other: UObject): DestructibleComponent;
}

declare class DestructibleActor extends Actor { 
	DestructibleComponent: DestructibleComponent;
	bAffectNavigation: boolean;
	OnActorFracture: UnrealEngineMulticastDelegate<(HitPoint: Vector, HitDirection: Vector) => void>;
	static GetDefaultObject(): DestructibleActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleActor;
	static C(Other: UObject): DestructibleActor;
}

declare class MaterialSpriteElement { 
	Material: MaterialInterface;
	DistanceToOpacityCurve: CurveFloat;
	bSizeIsInScreenSpace: boolean;
	BaseSizeX: number;
	BaseSizeY: number;
	DistanceToSizeCurve: CurveFloat;
	clone() : MaterialSpriteElement;
	static C(Other: UObject): MaterialSpriteElement;
}

declare class MaterialBillboardComponent extends PrimitiveComponent { 
	Elements: MaterialSpriteElement[];
	static Load(ResourceName: string): MaterialBillboardComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialBillboardComponent;
	static GetDefaultObject(): MaterialBillboardComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialBillboardComponent;
	SetElements(NewElements: MaterialSpriteElement[]): void;
	AddElement(Material: MaterialInterface,DistanceToOpacityCurve: CurveFloat,bSizeIsInScreenSpace: boolean,BaseSizeX: number,BaseSizeY: number,DistanceToSizeCurve: CurveFloat): void;
	static C(Other: UObject): MaterialBillboardComponent;
}

declare class DocumentationActor extends Actor { 
	DocumentLink: string;
	Billboard: MaterialBillboardComponent;
	static GetDefaultObject(): DocumentationActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DocumentationActor;
	static C(Other: UObject): DocumentationActor;
}

declare class DebugCameraHUD extends HUD { 
	static GetDefaultObject(): DebugCameraHUD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraHUD;
	static C(Other: UObject): DebugCameraHUD;
}

declare class AtmospherePrecomputeParameters { 
	DensityHeight: number;
	DecayHeight: number;
	MaxScatteringOrder: number;
	TransmittanceTexWidth: number;
	TransmittanceTexHeight: number;
	IrradianceTexWidth: number;
	IrradianceTexHeight: number;
	InscatterAltitudeSampleNum: number;
	InscatterMuNum: number;
	InscatterMuSNum: number;
	InscatterNuNum: number;
	clone() : AtmospherePrecomputeParameters;
	static C(Other: UObject): AtmospherePrecomputeParameters;
}

declare class AtmosphericFogComponent extends SceneComponent { 
	SunMultiplier: number;
	FogMultiplier: number;
	DensityMultiplier: number;
	DensityOffset: number;
	DistanceScale: number;
	AltitudeScale: number;
	DistanceOffset: number;
	GroundOffset: number;
	StartDistance: number;
	SunDiscScale: number;
	DefaultBrightness: number;
	DefaultLightColor: Color;
	bDisableSunDisk: boolean;
	bDisableGroundScattering: boolean;
	PrecomputeParams: AtmospherePrecomputeParameters;
	TransmittanceTexture: Texture2D;
	IrradianceTexture: Texture2D;
	static Load(ResourceName: string): AtmosphericFogComponent;
	static Find(Outer: UObject, ResourceName: string): AtmosphericFogComponent;
	static GetDefaultObject(): AtmosphericFogComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFogComponent;
	StartPrecompute(): void;
	SetSunMultiplier(NewSunMultiplier: number): void;
	SetStartDistance(NewStartDistance: number): void;
	SetPrecomputeParams(DensityHeight: number,MaxScatteringOrder: number,InscatterAltitudeSampleNum: number): void;
	SetFogMultiplier(NewFogMultiplier: number): void;
	SetDistanceScale(NewDistanceScale: number): void;
	SetDistanceOffset(NewDistanceOffset: number): void;
	SetDensityOffset(NewDensityOffset: number): void;
	SetDensityMultiplier(NewDensityMultiplier: number): void;
	SetDefaultLightColor(NewLightColor: LinearColor): void;
	SetDefaultBrightness(NewBrightness: number): void;
	SetAltitudeScale(NewAltitudeScale: number): void;
	DisableSunDisk(NewSunDisk: boolean): void;
	DisableGroundScattering(NewGroundScattering: boolean): void;
	static C(Other: UObject): AtmosphericFogComponent;
}

declare class AtmosphericFog extends Info { 
	AtmosphericFogComponent: AtmosphericFogComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): AtmosphericFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFog;
	static C(Other: UObject): AtmosphericFog;
}

declare class ExponentialHeightFogComponent extends SceneComponent { 
	FogDensity: number;
	FogInscatteringColor: LinearColor;
	InscatteringColorCubemap: TextureCube;
	InscatteringTextureTint: LinearColor;
	FullyDirectionalInscatteringColorDistance: number;
	NonDirectionalInscatteringColorDistance: number;
	DirectionalInscatteringExponent: number;
	DirectionalInscatteringStartDistance: number;
	DirectionalInscatteringColor: LinearColor;
	FogHeightFalloff: number;
	FogMaxOpacity: number;
	StartDistance: number;
	FogCutoffDistance: number;
	static Load(ResourceName: string): ExponentialHeightFogComponent;
	static Find(Outer: UObject, ResourceName: string): ExponentialHeightFogComponent;
	static GetDefaultObject(): ExponentialHeightFogComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFogComponent;
	SetStartDistance(Value: number): void;
	SetNonDirectionalInscatteringColorDistance(Value: number): void;
	SetInscatteringTextureTint(Value: LinearColor): void;
	SetInscatteringColorCubemap(Value: TextureCube): void;
	SetFullyDirectionalInscatteringColorDistance(Value: number): void;
	SetFogMaxOpacity(Value: number): void;
	SetFogInscatteringColor(Value: LinearColor): void;
	SetFogHeightFalloff(Value: number): void;
	SetFogDensity(Value: number): void;
	SetFogCutoffDistance(Value: number): void;
	SetDirectionalInscatteringStartDistance(Value: number): void;
	SetDirectionalInscatteringExponent(Value: number): void;
	SetDirectionalInscatteringColor(Value: LinearColor): void;
	static C(Other: UObject): ExponentialHeightFogComponent;
}

declare class ExponentialHeightFog extends Info { 
	Component: ExponentialHeightFogComponent;
	bEnabled: boolean;
	static GetDefaultObject(): ExponentialHeightFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFog;
	OnRep_bEnabled(): void;
	static C(Other: UObject): ExponentialHeightFog;
}

declare class GameMode extends GameModeBase { 
	MatchState: string;
	bDelayedStart: boolean;
	NumSpectators: number;
	NumPlayers: number;
	NumBots: number;
	MinRespawnDelay: number;
	NumTravellingPlayers: number;
	EngineMessageClass: UnrealEngineClass;
	InactivePlayerArray: PlayerState[];
	InactivePlayerStateLifeSpan: number;
	bHandleDedicatedServerReplays: boolean;
	static GetDefaultObject(): GameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMode;
	StartMatch(): void;
	SetBandwidthLimit(AsyncIOBandwidthLimit: number): void;
	Say(Msg: string): void;
	RestartGame(): void;
	ReadyToStartMatch(): boolean;
	ReadyToEndMatch(): boolean;
	OnSetMatchState(NewState: string): void;
	IsMatchInProgress(): boolean;
	HasMatchEnded(): boolean;
	GetMatchState(): string;
	EndMatch(): void;
	AbortMatch(): void;
	static C(Other: UObject): GameMode;
	HandleSeamlessTravelPlayer(C?: Controller): {C: Controller};
	static HandleSeamlessTravelPlayer(GameMode: GameMode,C?: Controller): {C: Controller};
}

declare class GameState extends GameStateBase { 
	MatchState: string;
	PreviousMatchState: string;
	ElapsedTime: number;
	static GetDefaultObject(): GameState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameState;
	OnRep_MatchState(): void;
	OnRep_ElapsedTime(): void;
	static C(Other: UObject): GameState;
}

declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap';
declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap', };
declare class SkyLightComponent extends LightComponentBase { 
	SourceType: ESkyLightSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	CubemapResolution: number;
	SkyDistanceThreshold: number;
	bLowerHemisphereIsBlack: boolean;
	LowerHemisphereColor: LinearColor;
	OcclusionMaxDistance: number;
	Contrast: number;
	MinOcclusion: number;
	OcclusionTint: Color;
	BlendDestinationCubemap: TextureCube;
	static Load(ResourceName: string): SkyLightComponent;
	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
	static GetDefaultObject(): SkyLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
	SetOcclusionTint(InTint: Color): void;
	SetMinOcclusion(InMinOcclusion: number): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
	SetCubemap(NewCubemap: TextureCube): void;
	RecaptureSky(): void;
	static C(Other: UObject): SkyLightComponent;
}

declare class SkyLight extends Info { 
	LightComponent: SkyLightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): SkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
	OnRep_bEnabled(): void;
	static C(Other: UObject): SkyLight;
}

declare type EWindSourceType = 'Directional' | 'Point';
declare var EWindSourceType : { Directional:'Directional',Point:'Point', };
declare class WindDirectionalSourceComponent extends SceneComponent { 
	Strength: number;
	Speed: number;
	MinGustAmount: number;
	MaxGustAmount: number;
	Radius: number;
	bPointWind: boolean;
	static Load(ResourceName: string): WindDirectionalSourceComponent;
	static Find(Outer: UObject, ResourceName: string): WindDirectionalSourceComponent;
	static GetDefaultObject(): WindDirectionalSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSourceComponent;
	SetWindType(InNewType: InNewType): void;
	SetStrength(InNewStrength: number): void;
	SetSpeed(InNewSpeed: number): void;
	SetRadius(InNewRadius: number): void;
	SetMinimumGustAmount(InNewMinGust: number): void;
	SetMaximumGustAmount(InNewMaxGust: number): void;
	static C(Other: UObject): WindDirectionalSourceComponent;
}

declare class WindDirectionalSource extends Info { 
	Component: WindDirectionalSourceComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): WindDirectionalSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSource;
	static C(Other: UObject): WindDirectionalSource;
}

declare class LevelBounds extends Actor { 
	bAutoUpdateBounds: boolean;
	static GetDefaultObject(): LevelBounds;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelBounds;
	static C(Other: UObject): LevelBounds;
}

declare class Light extends Actor { 
	LightComponent: LightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): Light;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Light;
	ToggleEnabled(): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetEnabled(bSetEnabled: boolean): void;
	SetCastShadows(bNewValue: boolean): void;
	SetBrightness(NewBrightness: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	OnRep_bEnabled(): void;
	IsEnabled(): boolean;
	GetLightColor(): LinearColor;
	GetBrightness(): number;
	static C(Other: UObject): Light;
}

declare class DirectionalLight extends Light { 
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): DirectionalLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLight;
	static C(Other: UObject): DirectionalLight;
}

declare class PointLight extends Light { 
	PointLightComponent: PointLightComponent;
	static GetDefaultObject(): PointLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLight;
	SetRadius(NewRadius: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	static C(Other: UObject): PointLight;
}

declare class SpotLightComponent extends PointLightComponent { 
	InnerConeAngle: number;
	OuterConeAngle: number;
	LightShaftConeAngle: number;
	static Load(ResourceName: string): SpotLightComponent;
	static Find(Outer: UObject, ResourceName: string): SpotLightComponent;
	static GetDefaultObject(): SpotLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLightComponent;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject): SpotLightComponent;
}

declare class SpotLight extends Light { 
	SpotLightComponent: SpotLightComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): SpotLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLight;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject): SpotLight;
}

declare class GeneratedMeshAreaLight extends SpotLight { 
	static GetDefaultObject(): GeneratedMeshAreaLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneratedMeshAreaLight;
	static C(Other: UObject): GeneratedMeshAreaLight;
}

declare class LightmassPortalComponent extends SceneComponent { 
	PreviewBox: BoxComponent;
	static Load(ResourceName: string): LightmassPortalComponent;
	static Find(Outer: UObject, ResourceName: string): LightmassPortalComponent;
	static GetDefaultObject(): LightmassPortalComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPortalComponent;
	static C(Other: UObject): LightmassPortalComponent;
}

declare class LightmassPortal extends Actor { 
	PortalComponent: LightmassPortalComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): LightmassPortal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPortal;
	static C(Other: UObject): LightmassPortal;
}

declare class LODActor extends Actor { 
	StaticMeshComponent: StaticMeshComponent;
	SubActors: Actor[];
	LODDrawDistance: number;
	LODLevel: number;
	SubObjects: UObject[];
	bDirty: boolean;
	NumTrianglesInSubActors: any;
	NumTrianglesInMergedMesh: any;
	bOverrideMaterialMergeSettings: boolean;
	MaterialSettings: MaterialProxySettings;
	bOverrideTransitionScreenSize: boolean;
	TransitionScreenSize: number;
	bOverrideScreenSize: boolean;
	ScreenSize: number;
	static GetDefaultObject(): LODActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LODActor;
	static C(Other: UObject): LODActor;
}

declare class MaterialInstanceActor extends Actor { 
	TargetActors: Actor[];
	static GetDefaultObject(): MaterialInstanceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceActor;
	static C(Other: UObject): MaterialInstanceActor;
}

declare class MatineeActorCameraAnim extends MatineeActor { 
	CameraAnim: CameraAnim;
	static GetDefaultObject(): MatineeActorCameraAnim;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActorCameraAnim;
	static C(Other: UObject): MatineeActorCameraAnim;
}

declare class AbstractNavData extends NavigationData { 
	static GetDefaultObject(): AbstractNavData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbstractNavData;
	static C(Other: UObject): AbstractNavData;
}

declare class NavigationGraph extends NavigationData { 
	static GetDefaultObject(): NavigationGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraph;
	static C(Other: UObject): NavigationGraph;
}

declare class NavigationGraphNode extends Actor { 
	static GetDefaultObject(): NavigationGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNode;
	static C(Other: UObject): NavigationGraphNode;
}

declare class PlayerStart extends NavigationObjectBase { 
	PlayerStartTag: string;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): PlayerStart;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStart;
	static C(Other: UObject): PlayerStart;
}

declare class PlayerStartPIE extends PlayerStart { 
	static GetDefaultObject(): PlayerStartPIE;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStartPIE;
	static C(Other: UObject): PlayerStartPIE;
}

declare class NavPathObserverInterface extends Interface { 
	static Load(ResourceName: string): NavPathObserverInterface;
	static Find(Outer: UObject, ResourceName: string): NavPathObserverInterface;
	static GetDefaultObject(): NavPathObserverInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavPathObserverInterface;
	static C(Other: UObject): NavPathObserverInterface;
}

declare class NavTestRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavTestRenderingComponent;
	static GetDefaultObject(): NavTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavTestRenderingComponent;
	static C(Other: UObject): NavTestRenderingComponent;
}

declare class NavigationInvokerComponent extends ActorComponent { 
	TileGenerationRadius: number;
	TileRemovalRadius: number;
	static Load(ResourceName: string): NavigationInvokerComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationInvokerComponent;
	static GetDefaultObject(): NavigationInvokerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationInvokerComponent;
	static C(Other: UObject): NavigationInvokerComponent;
}

declare type ENavCostDisplay = 'TotalCost' | 'HeuristicOnly' | 'RealCostOnly';
declare var ENavCostDisplay : { TotalCost:'TotalCost',HeuristicOnly:'HeuristicOnly',RealCostOnly:'RealCostOnly', };
declare class NavigationTestingActor extends Actor { 
	CapsuleComponent: CapsuleComponent;
	EdRenderComp: NavTestRenderingComponent;
	InvokerComponent: NavigationInvokerComponent;
	bActAsNavigationInvoker: boolean;
	NavAgentProps: NavAgentProperties;
	QueryingExtent: Vector;
	MyNavData: NavigationData;
	ProjectedLocation: Vector;
	bProjectedLocationValid: boolean;
	bSearchStart: boolean;
	bUseHierarchicalPathfinding: boolean;
	bGatherDetailedInfo: boolean;
	bDrawDistanceToWall: boolean;
	bShowNodePool: boolean;
	bShowBestPath: boolean;
	bShowDiffWithPreviousStep: boolean;
	bShouldBeVisibleInGame: boolean;
	CostDisplayMode: ENavCostDisplay;
	TextCanvasOffset: Vector2D;
	bPathExist: boolean;
	bPathIsPartial: boolean;
	bPathSearchOutOfNodes: boolean;
	PathfindingTime: number;
	PathCost: number;
	PathfindingSteps: number;
	OtherActor: NavigationTestingActor;
	FilterClass: UnrealEngineClass;
	ShowStepIndex: number;
	OffsetFromCornersDistance: number;
	static GetDefaultObject(): NavigationTestingActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTestingActor;
	static C(Other: UObject): NavigationTestingActor;
}

declare type ENavLinkDirection = 'BothWays' | 'LeftToRight' | 'RightToLeft';
declare var ENavLinkDirection : { BothWays:'BothWays',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft', };
declare class NavigationLinkBase { 
	LeftProjectHeight: number;
	MaxFallDownLength: number;
	Direction: ENavLinkDirection;
	SnapRadius: number;
	SnapHeight: number;
	SupportedAgents: NavAgentSelector;
	bSupportsAgent0: boolean;
	bSupportsAgent1: boolean;
	bSupportsAgent2: boolean;
	bSupportsAgent3: boolean;
	bSupportsAgent4: boolean;
	bSupportsAgent5: boolean;
	bSupportsAgent6: boolean;
	bSupportsAgent7: boolean;
	bSupportsAgent8: boolean;
	bSupportsAgent9: boolean;
	bSupportsAgent10: boolean;
	bSupportsAgent11: boolean;
	bSupportsAgent12: boolean;
	bSupportsAgent13: boolean;
	bSupportsAgent14: boolean;
	bSupportsAgent15: boolean;
	Description: string;
	bUseSnapHeight: boolean;
	bSnapToCheapestArea: boolean;
	bCustomFlag0: boolean;
	bCustomFlag1: boolean;
	bCustomFlag2: boolean;
	bCustomFlag3: boolean;
	bCustomFlag4: boolean;
	bCustomFlag5: boolean;
	bCustomFlag6: boolean;
	bCustomFlag7: boolean;
	AreaClass: UnrealEngineClass;
	clone() : NavigationLinkBase;
	static C(Other: UObject): NavigationLinkBase;
}

declare class NavigationLink extends NavigationLinkBase { 
	Left: Vector;
	Right: Vector;
	clone() : NavigationLink;
	static C(Other: UObject): NavigationLink;
}

declare class NavigationSegmentLink extends NavigationLinkBase { 
	LeftStart: Vector;
	LeftEnd: Vector;
	RightStart: Vector;
	RightEnd: Vector;
	clone() : NavigationSegmentLink;
	static C(Other: UObject): NavigationSegmentLink;
}

declare class NavLinkDefinition extends UObject { 
	Links: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	static Load(ResourceName: string): NavLinkDefinition;
	static Find(Outer: UObject, ResourceName: string): NavLinkDefinition;
	static GetDefaultObject(): NavLinkDefinition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkDefinition;
	static C(Other: UObject): NavLinkDefinition;
}

declare class NavLinkHostInterface extends Interface { 
	static Load(ResourceName: string): NavLinkHostInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkHostInterface;
	static GetDefaultObject(): NavLinkHostInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkHostInterface;
	static C(Other: UObject): NavLinkHostInterface;
}

declare class NavRelevantComponent extends ActorComponent { 
	bAttachToOwnersRoot: boolean;
	CachedNavParent: UObject;
	static Load(ResourceName: string): NavRelevantComponent;
	static Find(Outer: UObject, ResourceName: string): NavRelevantComponent;
	static GetDefaultObject(): NavRelevantComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantComponent;
	SetNavigationRelevancy(bRelevant: boolean): void;
	static C(Other: UObject): NavRelevantComponent;
}

declare class NavLinkCustomComponent extends NavRelevantComponent { 
	NavLinkUserId: any;
	EnabledAreaClass: UnrealEngineClass;
	DisabledAreaClass: UnrealEngineClass;
	LinkRelativeStart: Vector;
	LinkRelativeEnd: Vector;
	LinkDirection: ENavLinkDirection;
	bLinkEnabled: boolean;
	bNotifyWhenEnabled: boolean;
	bNotifyWhenDisabled: boolean;
	bCreateBoxObstacle: boolean;
	ObstacleOffset: Vector;
	ObstacleExtent: Vector;
	ObstacleAreaClass: UnrealEngineClass;
	BroadcastRadius: number;
	BroadcastInterval: number;
	BroadcastChannel: ECollisionChannel;
	static Load(ResourceName: string): NavLinkCustomComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomComponent;
	static GetDefaultObject(): NavLinkCustomComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomComponent;
	static C(Other: UObject): NavLinkCustomComponent;
}

declare class NavLinkRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavLinkRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkRenderingComponent;
	static GetDefaultObject(): NavLinkRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkRenderingComponent;
	static C(Other: UObject): NavLinkRenderingComponent;
}

declare class NavLinkProxy extends Actor { 
	PointLinks: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	SmartLinkComp: NavLinkCustomComponent;
	bSmartLinkIsRelevant: boolean;
	EdRenderComp: NavLinkRenderingComponent;
	SpriteComponent: BillboardComponent;
	OnSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor, DestinationPoint: Vector) => void>;
	static GetDefaultObject(): NavLinkProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkProxy;
	SetSmartLinkEnabled(bEnabled: boolean): void;
	ResumePathFollowing(Agent: Actor): void;
	ReceiveSmartLinkReached(Agent: Actor,Destination: Vector): void;
	IsSmartLinkEnabled(): boolean;
	HasMovingAgents(): boolean;
	static C(Other: UObject): NavLinkProxy;
}

declare class Note extends Actor { 
	Text: string;
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): Note;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Note;
	static C(Other: UObject): Note;
}

declare class Interface_CollisionDataProvider extends Interface { 
	static Load(ResourceName: string): Interface_CollisionDataProvider;
	static Find(Outer: UObject, ResourceName: string): Interface_CollisionDataProvider;
	static GetDefaultObject(): Interface_CollisionDataProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_CollisionDataProvider;
	static C(Other: UObject): Interface_CollisionDataProvider;
}

declare type EReflectionSourceType = 'CapturedScene' | 'SpecifiedCubemap';
declare var EReflectionSourceType : { CapturedScene:'CapturedScene',SpecifiedCubemap:'SpecifiedCubemap', };
declare class ReflectionCaptureComponent extends SceneComponent { 
	CaptureOffsetComponent: BillboardComponent;
	ReflectionSourceType: ReflectionSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	Brightness: number;
	CaptureOffset: Vector;
	StateId: Guid;
	static Load(ResourceName: string): ReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): ReflectionCaptureComponent;
	static GetDefaultObject(): ReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCaptureComponent;
	static C(Other: UObject): ReflectionCaptureComponent;
}

declare class ReflectionCapture extends Actor { 
	CaptureComponent: ReflectionCaptureComponent;
	SpriteComponent: BillboardComponent;
	CaptureOffsetComponent: BillboardComponent;
	static GetDefaultObject(): ReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCapture;
	static C(Other: UObject): ReflectionCapture;
}

declare class BoxReflectionCapture extends ReflectionCapture { 
	static GetDefaultObject(): BoxReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCapture;
	static C(Other: UObject): BoxReflectionCapture;
}

declare class PlaneReflectionCapture extends ReflectionCapture { 
	static GetDefaultObject(): PlaneReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCapture;
	static C(Other: UObject): PlaneReflectionCapture;
}

declare class DrawSphereComponent extends SphereComponent { 
	static Load(ResourceName: string): DrawSphereComponent;
	static Find(Outer: UObject, ResourceName: string): DrawSphereComponent;
	static GetDefaultObject(): DrawSphereComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DrawSphereComponent;
	static C(Other: UObject): DrawSphereComponent;
}

declare class SphereReflectionCapture extends ReflectionCapture { 
	DrawCaptureRadius: DrawSphereComponent;
	static GetDefaultObject(): SphereReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCapture;
	static C(Other: UObject): SphereReflectionCapture;
}

declare class RigidBodyBase extends Actor { 
	static GetDefaultObject(): RigidBodyBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RigidBodyBase;
	static C(Other: UObject): RigidBodyBase;
}

declare class ConstrainComponentPropName { 
	ComponentName: string;
	clone() : ConstrainComponentPropName;
	static C(Other: UObject): ConstrainComponentPropName;
}

declare type EConstraintFrame = 'Frame1' | 'Frame2';
declare var EConstraintFrame : { Frame1:'Frame1',Frame2:'Frame2', };
declare class PhysicsConstraintComponent extends SceneComponent { 
	ConstraintActor1: Actor;
	ComponentName1: ConstrainComponentPropName;
	ConstraintActor2: Actor;
	ComponentName2: ConstrainComponentPropName;
	ConstraintSetup: PhysicsConstraintTemplate;
	OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: number) => void>;
	ConstraintInstance: ConstraintInstance;
	static Load(ResourceName: string): PhysicsConstraintComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsConstraintComponent;
	static GetDefaultObject(): PhysicsConstraintComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintComponent;
	SetOrientationDriveTwistAndSwing(bEnableTwistDrive: boolean,bEnableSwingDrive: boolean): void;
	SetOrientationDriveSLERP(bEnableSLERP: boolean): void;
	SetLinearZLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearYLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearXLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearVelocityTarget(InVelTarget: Vector): void;
	SetLinearVelocityDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearPositionTarget(InPosTarget: Vector): void;
	SetLinearPositionDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearDriveParams(PositionStrength: number,VelocityStrength: number,InForceLimit: number): void;
	SetDisableCollision(bDisableCollision: boolean): void;
	SetConstraintReferencePosition(Frame: EConstraintFrame,RefPosition: Vector): void;
	SetConstraintReferenceOrientation(Frame: EConstraintFrame,PriAxis: Vector,SecAxis: Vector): void;
	SetConstraintReferenceFrame(Frame: EConstraintFrame,RefFrame: Transform): void;
	SetConstrainedComponents(Component1: PrimitiveComponent,BoneName1: string,Component2: PrimitiveComponent,BoneName2: string): void;
	SetAngularVelocityTarget(InVelTarget: Vector): void;
	SetAngularVelocityDriveTwistAndSwing(bEnableTwistDrive: boolean,bEnableSwingDrive: boolean): void;
	SetAngularVelocityDriveSLERP(bEnableSLERP: boolean): void;
	SetAngularVelocityDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularTwistLimit(ConstraintType: EAngularConstraintMotion,TwistLimitAngle: number): void;
	SetAngularSwing2Limit(MotionType: EAngularConstraintMotion,Swing2LimitAngle: number): void;
	SetAngularSwing1Limit(MotionType: EAngularConstraintMotion,Swing1LimitAngle: number): void;
	SetAngularOrientationTarget(InPosTarget: Rotator): void;
	SetAngularOrientationDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularDriveParams(PositionStrength: number,VelocityStrength: number,InForceLimit: number): void;
	SetAngularDriveMode(DriveMode: EAngularDriveMode): void;
	GetCurrentTwist(): number;
	GetCurrentSwing2(): number;
	GetCurrentSwing1(): number;
	GetConstraintForce(OutLinearForce?: Vector,OutAngularForce?: Vector): {OutLinearForce: Vector, OutAngularForce: Vector};
	BreakConstraint(): void;
	static C(Other: UObject): PhysicsConstraintComponent;
}

declare class PhysicsConstraintActor extends RigidBodyBase { 
	ConstraintComp: PhysicsConstraintComponent;
	ConstraintActor1: Actor;
	ConstraintActor2: Actor;
	bDisableCollision: boolean;
	static GetDefaultObject(): PhysicsConstraintActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintActor;
	static C(Other: UObject): PhysicsConstraintActor;
}

declare class PhysicsThrusterComponent extends SceneComponent { 
	ThrustStrength: number;
	static Load(ResourceName: string): PhysicsThrusterComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsThrusterComponent;
	static GetDefaultObject(): PhysicsThrusterComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThrusterComponent;
	static C(Other: UObject): PhysicsThrusterComponent;
}

declare class PhysicsThruster extends RigidBodyBase { 
	ThrusterComponent: PhysicsThrusterComponent;
	ArrowComponent: ArrowComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): PhysicsThruster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThruster;
	static C(Other: UObject): PhysicsThruster;
}

declare class RadialForceComponent extends SceneComponent { 
	Radius: number;
	Falloff: ERadialImpulseFalloff;
	ImpulseStrength: number;
	bImpulseVelChange: boolean;
	bIgnoreOwningActor: boolean;
	ForceStrength: number;
	DestructibleDamage: number;
	ObjectTypesToAffect: EObjectTypeQuery[];
	static Load(ResourceName: string): RadialForceComponent;
	static Find(Outer: UObject, ResourceName: string): RadialForceComponent;
	static GetDefaultObject(): RadialForceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceComponent;
	RemoveObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	FireImpulse(): void;
	AddObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	static C(Other: UObject): RadialForceComponent;
}

declare class RadialForceActor extends RigidBodyBase { 
	ForceComponent: RadialForceComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): RadialForceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceActor;
	ToggleForce(): void;
	FireImpulse(): void;
	EnableForce(): void;
	DisableForce(): void;
	static C(Other: UObject): RadialForceActor;
}

declare class SceneCapture extends Actor { 
	MeshComp: StaticMeshComponent;
	static GetDefaultObject(): SceneCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture;
	static C(Other: UObject): SceneCapture;
}

declare class EngineShowFlagsSetting { 
	ShowFlagName: string;
	Enabled: boolean;
	clone() : EngineShowFlagsSetting;
	static C(Other: UObject): EngineShowFlagsSetting;
}

declare class SceneCaptureComponent extends SceneComponent { 
	HiddenComponents: any[];
	HiddenActors: Actor[];
	ShowOnlyComponents: any[];
	ShowOnlyActors: Actor[];
	bCaptureEveryFrame: boolean;
	bCaptureOnMovement: boolean;
	MaxViewDistanceOverride: number;
	ShowFlagSettings: EngineShowFlagsSetting[];
	static Load(ResourceName: string): SceneCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent;
	static GetDefaultObject(): SceneCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent;
	ShowOnlyComponent(InComponent: PrimitiveComponent): void;
	ShowOnlyActorComponents(InActor: Actor): void;
	RemoveShowOnlyComponent(InComponent: PrimitiveComponent): void;
	RemoveShowOnlyActorComponents(InActor: Actor): void;
	HideComponent(InComponent: PrimitiveComponent): void;
	HideActorComponents(InActor: Actor): void;
	ClearShowOnlyComponents(InComponent: PrimitiveComponent): void;
	static C(Other: UObject): SceneCaptureComponent;
}

declare class PlanarReflectionComponent extends SceneCaptureComponent { 
	PreviewBox: BoxComponent;
	NormalDistortionStrength: number;
	PrefilterRoughness: number;
	PrefilterRoughnessDistance: number;
	ScreenPercentage: number;
	ExtraFOV: number;
	DistanceFromPlaneFadeStart: number;
	DistanceFromPlaneFadeEnd: number;
	DistanceFromPlaneFadeoutStart: number;
	DistanceFromPlaneFadeoutEnd: number;
	AngleFromPlaneFadeStart: number;
	AngleFromPlaneFadeEnd: number;
	bRenderSceneTwoSided: boolean;
	static Load(ResourceName: string): PlanarReflectionComponent;
	static Find(Outer: UObject, ResourceName: string): PlanarReflectionComponent;
	static GetDefaultObject(): PlanarReflectionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflectionComponent;
	static C(Other: UObject): PlanarReflectionComponent;
}

declare class PlanarReflection extends SceneCapture { 
	PlanarReflectionComponent: PlanarReflectionComponent;
	SpriteComponent: BillboardComponent;
	bShowPreviewPlane: boolean;
	static GetDefaultObject(): PlanarReflection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflection;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject): PlanarReflection;
}

declare type ESceneCaptureSource = 'SCS_SceneColorHDR' | 'SCS_SceneColorHDRNoAlpha' | 'SCS_FinalColorLDR' | 'SCS_SceneColorSceneDepth' | 'SCS_SceneDepth' | 'SCS_Normal' | 'SCS_BaseColor';
declare var ESceneCaptureSource : { SCS_SceneColorHDR:'SCS_SceneColorHDR',SCS_SceneColorHDRNoAlpha:'SCS_SceneColorHDRNoAlpha',SCS_FinalColorLDR:'SCS_FinalColorLDR',SCS_SceneColorSceneDepth:'SCS_SceneColorSceneDepth',SCS_SceneDepth:'SCS_SceneDepth',SCS_Normal:'SCS_Normal',SCS_BaseColor:'SCS_BaseColor', };
declare type ESceneCaptureCompositeMode = 'SCCM_Overwrite' | 'SCCM_Additive' | 'SCCM_Composite';
declare var ESceneCaptureCompositeMode : { SCCM_Overwrite:'SCCM_Overwrite',SCCM_Additive:'SCCM_Additive',SCCM_Composite:'SCCM_Composite', };
declare class SceneCaptureComponent2D extends SceneCaptureComponent { 
	ProjectionType: ECameraProjectionMode;
	FOVAngle: number;
	OrthoWidth: number;
	TextureTarget: TextureRenderTarget2D;
	CaptureSource: ESceneCaptureSource;
	CompositeMode: ESceneCaptureCompositeMode;
	PostProcessSettings: PostProcessSettings;
	PostProcessBlendWeight: number;
	bUseCustomProjectionMatrix: boolean;
	CustomProjectionMatrix: Matrix;
	bEnableClipPlane: boolean;
	ClipPlaneBase: Vector;
	ClipPlaneNormal: Vector;
	static Load(ResourceName: string): SceneCaptureComponent2D;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent2D;
	static GetDefaultObject(): SceneCaptureComponent2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent2D;
	CaptureScene(): void;
	static C(Other: UObject): SceneCaptureComponent2D;
}

declare class SceneCapture2D extends SceneCapture { 
	CaptureComponent2D: SceneCaptureComponent2D;
	DrawFrustum: DrawFrustumComponent;
	static GetDefaultObject(): SceneCapture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture2D;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject): SceneCapture2D;
}

declare class TextureRenderTargetCube extends TextureRenderTarget { 
	SizeX: number;
	ClearColor: LinearColor;
	OverrideFormat: EPixelFormat;
	bHDR: boolean;
	bForceLinearGamma: boolean;
	static Load(ResourceName: string): TextureRenderTargetCube;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCube;
	static GetDefaultObject(): TextureRenderTargetCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCube;
	static C(Other: UObject): TextureRenderTargetCube;
}

declare class SceneCaptureComponentCube extends SceneCaptureComponent { 
	TextureTarget: TextureRenderTargetCube;
	static Load(ResourceName: string): SceneCaptureComponentCube;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponentCube;
	static GetDefaultObject(): SceneCaptureComponentCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponentCube;
	CaptureScene(): void;
	static C(Other: UObject): SceneCaptureComponentCube;
}

declare class SceneCaptureCube extends SceneCapture { 
	CaptureComponentCube: SceneCaptureComponentCube;
	DrawFrustum: DrawFrustumComponent;
	static GetDefaultObject(): SceneCaptureCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureCube;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject): SceneCaptureCube;
}

declare class MatineeAnimInterface extends Interface { 
	static Load(ResourceName: string): MatineeAnimInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeAnimInterface;
	static GetDefaultObject(): MatineeAnimInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeAnimInterface;
	static C(Other: UObject): MatineeAnimInterface;
}

declare class SplineMeshActor extends Actor { 
	SplineMeshComponent: SplineMeshComponent;
	static GetDefaultObject(): SplineMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshActor;
	static C(Other: UObject): SplineMeshActor;
}

declare type EVertexAttributeStreamType = 'VAST_unknown' | 'VAST_float' | 'VAST_float2' | 'VAST_float3' | 'VAST_float4';
declare var EVertexAttributeStreamType : { VAST_unknown:'VAST_unknown',VAST_float:'VAST_float',VAST_float2:'VAST_float2',VAST_float3:'VAST_float3',VAST_float4:'VAST_float4', };
declare class VertexAttributeStream extends UObject { 
	Usage: string;
	AttributeType: EVertexAttributeStreamType;
	Data: number[];
	static Load(ResourceName: string): VertexAttributeStream;
	static Find(Outer: UObject, ResourceName: string): VertexAttributeStream;
	static GetDefaultObject(): VertexAttributeStream;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VertexAttributeStream;
	static C(Other: UObject): VertexAttributeStream;
}

declare class SubDSurface extends UObject { 
	VertexCountPerFace: any[];
	IndicesPerFace: any[];
	VertexAttributeStreams: VertexAttributeStream[];
	Materials: MaterialInterface[];
	static Load(ResourceName: string): SubDSurface;
	static Find(Outer: UObject, ResourceName: string): SubDSurface;
	static GetDefaultObject(): SubDSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurface;
	static C(Other: UObject): SubDSurface;
}

declare class SubDSurfaceComponent extends PrimitiveComponent { 
	Mesh: SubDSurface;
	DebugLevel: number;
	DisplayMeshComponent: StaticMeshComponent;
	static Load(ResourceName: string): SubDSurfaceComponent;
	static Find(Outer: UObject, ResourceName: string): SubDSurfaceComponent;
	static GetDefaultObject(): SubDSurfaceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurfaceComponent;
	SetMesh(NewMesh: SubDSurface): boolean;
	static C(Other: UObject): SubDSurfaceComponent;
}

declare class SubDSurfaceActor extends Actor { 
	SubDSurface: SubDSurfaceComponent;
	DisplayMeshComponent: StaticMeshComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): SubDSurfaceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubDSurfaceActor;
	static C(Other: UObject): SubDSurfaceActor;
}

declare class TargetPoint extends Actor { 
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): TargetPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TargetPoint;
	static C(Other: UObject): TargetPoint;
}

declare class TextRenderActor extends Actor { 
	TextRender: TextRenderComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): TextRenderActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderActor;
	static C(Other: UObject): TextRenderActor;
}

declare class TriggerBase extends Actor { 
	CollisionComponent: ShapeComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): TriggerBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBase;
	static C(Other: UObject): TriggerBase;
}

declare class TriggerBox extends TriggerBase { 
	static GetDefaultObject(): TriggerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBox;
	static C(Other: UObject): TriggerBox;
}

declare class TriggerCapsule extends TriggerBase { 
	static GetDefaultObject(): TriggerCapsule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerCapsule;
	static C(Other: UObject): TriggerCapsule;
}

declare class TriggerSphere extends TriggerBase { 
	static GetDefaultObject(): TriggerSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerSphere;
	static C(Other: UObject): TriggerSphere;
}

declare class VectorField extends UObject { 
	Bounds: Box;
	Intensity: number;
	static Load(ResourceName: string): VectorField;
	static Find(Outer: UObject, ResourceName: string): VectorField;
	static GetDefaultObject(): VectorField;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorField;
	static C(Other: UObject): VectorField;
}

declare class VectorFieldComponent extends PrimitiveComponent { 
	VectorField: VectorField;
	Intensity: number;
	Tightness: number;
	bPreviewVectorField: boolean;
	static Load(ResourceName: string): VectorFieldComponent;
	static Find(Outer: UObject, ResourceName: string): VectorFieldComponent;
	static GetDefaultObject(): VectorFieldComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldComponent;
	SetIntensity(NewIntensity: number): void;
	static C(Other: UObject): VectorFieldComponent;
}

declare class VectorFieldVolume extends Actor { 
	VectorFieldComponent: VectorFieldComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): VectorFieldVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldVolume;
	static C(Other: UObject): VectorFieldVolume;
}

declare class ApplicationLifecycleComponent extends ActorComponent { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): ApplicationLifecycleComponent;
	static Find(Outer: UObject, ResourceName: string): ApplicationLifecycleComponent;
	static GetDefaultObject(): ApplicationLifecycleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ApplicationLifecycleComponent;
	static C(Other: UObject): ApplicationLifecycleComponent;
}

declare type EInterpToBehaviourType = 'OneShot' | 'OneShot_Reverse' | 'Loop_Reset' | 'PingPong';
declare var EInterpToBehaviourType : { OneShot:'OneShot',OneShot_Reverse:'OneShot_Reverse',Loop_Reset:'Loop_Reset',PingPong:'PingPong', };
declare class InterpControlPoint { 
	PositionControlPoint: Vector;
	bPositionIsRelative: boolean;
	clone() : InterpControlPoint;
	static C(Other: UObject): InterpControlPoint;
}

declare class InterpToMovementComponent extends MovementComponent { 
	Duration: number;
	bPauseOnImpact: boolean;
	BehaviourType: BehaviourType;
	bForceSubStepping: boolean;
	OnInterpToReverse: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnInterpToStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitBeginDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitEndDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnResetDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	ControlPoints: InterpControlPoint[];
	static Load(ResourceName: string): InterpToMovementComponent;
	static Find(Outer: UObject, ResourceName: string): InterpToMovementComponent;
	static GetDefaultObject(): InterpToMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpToMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	RestartMovement(InitialDirection: number): void;
	FinaliseControlPoints(): void;
	static C(Other: UObject): InterpToMovementComponent;
}

declare class RVOAvoidanceInterface extends Interface { 
	static Load(ResourceName: string): RVOAvoidanceInterface;
	static Find(Outer: UObject, ResourceName: string): RVOAvoidanceInterface;
	static GetDefaultObject(): RVOAvoidanceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RVOAvoidanceInterface;
	static C(Other: UObject): RVOAvoidanceInterface;
}

declare class NetworkPredictionInterface extends Interface { 
	static Load(ResourceName: string): NetworkPredictionInterface;
	static Find(Outer: UObject, ResourceName: string): NetworkPredictionInterface;
	static GetDefaultObject(): NetworkPredictionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkPredictionInterface;
	static C(Other: UObject): NetworkPredictionInterface;
}

declare class FloatingPawnMovement extends PawnMovementComponent { 
	MaxSpeed: number;
	Acceleration: number;
	Deceleration: number;
	TurningBoost: number;
	bPositionCorrected: boolean;
	static Load(ResourceName: string): FloatingPawnMovement;
	static Find(Outer: UObject, ResourceName: string): FloatingPawnMovement;
	static GetDefaultObject(): FloatingPawnMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingPawnMovement;
	static C(Other: UObject): FloatingPawnMovement;
}

declare class SpectatorPawnMovement extends FloatingPawnMovement { 
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): SpectatorPawnMovement;
	static Find(Outer: UObject, ResourceName: string): SpectatorPawnMovement;
	static GetDefaultObject(): SpectatorPawnMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorPawnMovement;
	static C(Other: UObject): SpectatorPawnMovement;
}

declare class ProjectileMovementComponent extends MovementComponent { 
	InitialSpeed: number;
	MaxSpeed: number;
	bRotationFollowsVelocity: boolean;
	bShouldBounce: boolean;
	bInitialVelocityInLocalSpace: boolean;
	bForceSubStepping: boolean;
	bIsHomingProjectile: boolean;
	bBounceAngleAffectsFriction: boolean;
	bIsSliding: boolean;
	PreviousHitTime: number;
	PreviousHitNormal: Vector;
	ProjectileGravityScale: number;
	Buoyancy: number;
	Bounciness: number;
	Friction: number;
	BounceVelocityStopSimulatingThreshold: number;
	OnProjectileBounce: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, ImpactVelocity: Vector) => void>;
	OnProjectileStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult) => void>;
	HomingAccelerationMagnitude: number;
	HomingTargetComponent: any;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	static Load(ResourceName: string): ProjectileMovementComponent;
	static Find(Outer: UObject, ResourceName: string): ProjectileMovementComponent;
	static GetDefaultObject(): ProjectileMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectileMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	SetVelocityInLocalSpace(NewVelocity: Vector): void;
	LimitVelocity(NewVelocity: Vector): Vector;
	static C(Other: UObject): ProjectileMovementComponent;
}

declare class RotatingMovementComponent extends MovementComponent { 
	RotationRate: Rotator;
	PivotTranslation: Vector;
	bRotationInLocalSpace: boolean;
	static Load(ResourceName: string): RotatingMovementComponent;
	static Find(Outer: UObject, ResourceName: string): RotatingMovementComponent;
	static GetDefaultObject(): RotatingMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotatingMovementComponent;
	static C(Other: UObject): RotatingMovementComponent;
}

declare class NavLinkCustomInterface extends Interface { 
	static Load(ResourceName: string): NavLinkCustomInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomInterface;
	static GetDefaultObject(): NavLinkCustomInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomInterface;
	static C(Other: UObject): NavLinkCustomInterface;
}

declare class NavModifierComponent extends NavRelevantComponent { 
	AreaClass: UnrealEngineClass;
	FailsafeExtent: Vector;
	static Load(ResourceName: string): NavModifierComponent;
	static Find(Outer: UObject, ResourceName: string): NavModifierComponent;
	static GetDefaultObject(): NavModifierComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierComponent;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject): NavModifierComponent;
}

declare class PawnNoiseEmitterComponent extends ActorComponent { 
	bAIPerceptionSystemCompatibilityMode: boolean;
	LastRemoteNoisePosition: Vector;
	NoiseLifetime: number;
	LastRemoteNoiseVolume: number;
	LastRemoteNoiseTime: number;
	LastLocalNoiseVolume: number;
	LastLocalNoiseTime: number;
	static Load(ResourceName: string): PawnNoiseEmitterComponent;
	static Find(Outer: UObject, ResourceName: string): PawnNoiseEmitterComponent;
	static GetDefaultObject(): PawnNoiseEmitterComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnNoiseEmitterComponent;
	MakeNoise(NoiseMaker: Actor,Loudness: number,NoiseLocation: Vector): void;
	static C(Other: UObject): PawnNoiseEmitterComponent;
}

declare class PhysicalAnimationComponent extends ActorComponent { 
	StrengthMultiplyer: number;
	SkeletalMeshComponent: SkeletalMeshComponent;
	static Load(ResourceName: string): PhysicalAnimationComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicalAnimationComponent;
	static GetDefaultObject(): PhysicalAnimationComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalAnimationComponent;
	SetStrengthMultiplyer(InStrengthMultiplyer: number): void;
	SetSkeletalMeshComponent(InSkeletalMeshComponent: SkeletalMeshComponent): void;
	ApplyPhysicalAnimationSettingsBelow(BodyName: string,PhysicalAnimationData: PhysicalAnimationData,bIncludeSelf: boolean): void;
	ApplyPhysicalAnimationSettings(BodyName: string,PhysicalAnimationData: PhysicalAnimationData): void;
	ApplyPhysicalAnimationProfileBelow(BodyName: string,ProfileName: string,bIncludeSelf: boolean,bClearNotFound: boolean): void;
	static C(Other: UObject): PhysicalAnimationComponent;
}

declare class PhysicsHandleComponent extends ActorComponent { 
	GrabbedComponent: PrimitiveComponent;
	bSoftAngularConstraint: boolean;
	bSoftLinearConstraint: boolean;
	bInterpolateTarget: boolean;
	LinearDamping: number;
	LinearStiffness: number;
	AngularDamping: number;
	AngularStiffness: number;
	InterpolationSpeed: number;
	static Load(ResourceName: string): PhysicsHandleComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsHandleComponent;
	static GetDefaultObject(): PhysicsHandleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsHandleComponent;
	SetTargetRotation(NewRotation: Rotator): void;
	SetTargetLocationAndRotation(NewLocation: Vector,NewRotation: Rotator): void;
	SetTargetLocation(NewLocation: Vector): void;
	SetLinearStiffness(NewLinearStiffness: number): void;
	SetLinearDamping(NewLinearDamping: number): void;
	SetInterpolationSpeed(NewInterpolationSpeed: number): void;
	SetAngularStiffness(NewAngularStiffness: number): void;
	SetAngularDamping(NewAngularDamping: number): void;
	ReleaseComponent(): void;
	GrabComponentAtLocationWithRotation(Component: PrimitiveComponent,InBoneName: string,Location: Vector,Rotation: Rotator): void;
	GrabComponentAtLocation(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector): void;
	GrabComponent(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector,bConstrainRotation: boolean): void;
	GetTargetLocationAndRotation(TargetLocation?: Vector,TargetRotation?: Rotator): {TargetLocation: Vector, TargetRotation: Rotator};
	GetGrabbedComponent(): PrimitiveComponent;
	static C(Other: UObject): PhysicsHandleComponent;
}

declare class PlatformEventsComponent extends ActorComponent { 
	PlatformChangedToLaptopModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	PlatformChangedToTabletModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): PlatformEventsComponent;
	static Find(Outer: UObject, ResourceName: string): PlatformEventsComponent;
	static GetDefaultObject(): PlatformEventsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformEventsComponent;
	SupportsConvertibleLaptops(): boolean;
	IsInTabletMode(): boolean;
	IsInLaptopMode(): boolean;
	static C(Other: UObject): PlatformEventsComponent;
}

declare class LightmassDirectionalLightSettings extends LightmassLightSettings { 
	LightSourceAngle: number;
	clone() : LightmassDirectionalLightSettings;
	static C(Other: UObject): LightmassDirectionalLightSettings;
}

declare class DirectionalLightComponent extends LightComponent { 
	bEnableLightShaftOcclusion: boolean;
	OcclusionMaskDarkness: number;
	OcclusionDepthRange: number;
	LightShaftOverrideDirection: Vector;
	WholeSceneDynamicShadowRadius: number;
	DynamicShadowDistanceMovableLight: number;
	DynamicShadowDistanceStationaryLight: number;
	DynamicShadowCascades: number;
	CascadeDistributionExponent: number;
	CascadeTransitionFraction: number;
	ShadowDistanceFadeoutFraction: number;
	bUseInsetShadowsForMovableObjects: boolean;
	FarShadowCascadeCount: number;
	FarShadowDistance: number;
	DistanceFieldShadowDistance: number;
	LightSourceAngle: number;
	TraceDistance: number;
	LightmassSettings: LightmassDirectionalLightSettings;
	bCastModulatedShadows: boolean;
	ModulatedShadowColor: Color;
	bUsedAsAtmosphereSunLight: boolean;
	static Load(ResourceName: string): DirectionalLightComponent;
	static Find(Outer: UObject, ResourceName: string): DirectionalLightComponent;
	static GetDefaultObject(): DirectionalLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLightComponent;
	SetShadowDistanceFadeoutFraction(NewValue: number): void;
	SetOcclusionMaskDarkness(NewValue: number): void;
	SetLightShaftOverrideDirection(NewValue: Vector): void;
	SetEnableLightShaftOcclusion(bNewValue: boolean): void;
	SetDynamicShadowDistanceStationaryLight(NewValue: number): void;
	SetDynamicShadowDistanceMovableLight(NewValue: number): void;
	SetDynamicShadowCascades(NewValue: number): void;
	SetCascadeTransitionFraction(NewValue: number): void;
	SetCascadeDistributionExponent(NewValue: number): void;
	static C(Other: UObject): DirectionalLightComponent;
}

declare class NavGraphNode { 
	Owner: UObject;
	clone() : NavGraphNode;
	static C(Other: UObject): NavGraphNode;
}

declare class NavigationGraphNodeComponent extends SceneComponent { 
	UNode: NavGraphNode;
	NextNodeComponent: NavigationGraphNodeComponent;
	PrevNodeComponent: NavigationGraphNodeComponent;
	static Load(ResourceName: string): NavigationGraphNodeComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationGraphNodeComponent;
	static GetDefaultObject(): NavigationGraphNodeComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNodeComponent;
	static C(Other: UObject): NavigationGraphNodeComponent;
}

declare class PhysicsSpringComponent extends SceneComponent { 
	SpringStiffness: number;
	SpringDamping: number;
	SpringLengthAtRest: number;
	SpringRadius: number;
	SpringChannel: ECollisionChannel;
	bIgnoreSelf: boolean;
	SpringCompression: number;
	static Load(ResourceName: string): PhysicsSpringComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsSpringComponent;
	static GetDefaultObject(): PhysicsSpringComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSpringComponent;
	GetSpringRestingPoint(): Vector;
	GetSpringDirection(): Vector;
	GetSpringCurrentEndPoint(): Vector;
	GetNormalizedCompressionScalar(): number;
	static C(Other: UObject): PhysicsSpringComponent;
}

declare type EBoneSpaces = 'WorldSpace' | 'ComponentSpace';
declare var EBoneSpaces : { WorldSpace:'WorldSpace',ComponentSpace:'ComponentSpace', };
declare class PoseableMeshComponent extends SkinnedMeshComponent { 
	static Load(ResourceName: string): PoseableMeshComponent;
	static Find(Outer: UObject, ResourceName: string): PoseableMeshComponent;
	static GetDefaultObject(): PoseableMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseableMeshComponent;
	SetBoneTransformByName(BoneName: string,InTransform: Transform,BoneSpace: EBoneSpaces): void;
	SetBoneScaleByName(BoneName: string,InScale3D: Vector,BoneSpace: EBoneSpaces): void;
	SetBoneRotationByName(BoneName: string,InRotation: Rotator,BoneSpace: EBoneSpaces): void;
	SetBoneLocationByName(BoneName: string,InLocation: Vector,BoneSpace: EBoneSpaces): void;
	ResetBoneTransformByName(BoneName: string): void;
	GetBoneTransformByName(BoneName: string,BoneSpace: EBoneSpaces): Transform;
	GetBoneScaleByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	GetBoneRotationByName(BoneName: string,BoneSpace: EBoneSpaces): Rotator;
	GetBoneLocationByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	CopyPoseFromSkeletalComponent(InComponentToCopy: SkeletalMeshComponent): void;
	static C(Other: UObject): PoseableMeshComponent;
}

declare class NavLinkComponent extends PrimitiveComponent { 
	Links: NavigationLink[];
	static Load(ResourceName: string): NavLinkComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkComponent;
	static GetDefaultObject(): NavLinkComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkComponent;
	static C(Other: UObject): NavLinkComponent;
}

declare class NavMeshRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavMeshRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavMeshRenderingComponent;
	static GetDefaultObject(): NavMeshRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshRenderingComponent;
	static C(Other: UObject): NavMeshRenderingComponent;
}

declare class BoxReflectionCaptureComponent extends ReflectionCaptureComponent { 
	BoxTransitionDistance: number;
	PreviewInfluenceBox: BoxComponent;
	PreviewCaptureBox: BoxComponent;
	static Load(ResourceName: string): BoxReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): BoxReflectionCaptureComponent;
	static GetDefaultObject(): BoxReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCaptureComponent;
	static C(Other: UObject): BoxReflectionCaptureComponent;
}

declare class PlaneReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadiusScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	PreviewCaptureBox: BoxComponent;
	static Load(ResourceName: string): PlaneReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): PlaneReflectionCaptureComponent;
	static GetDefaultObject(): PlaneReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCaptureComponent;
	static C(Other: UObject): PlaneReflectionCaptureComponent;
}

declare class SphereReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadius: number;
	CaptureDistanceScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	static Load(ResourceName: string): SphereReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SphereReflectionCaptureComponent;
	static GetDefaultObject(): SphereReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCaptureComponent;
	static C(Other: UObject): SphereReflectionCaptureComponent;
}

declare class SpringArmComponent extends SceneComponent { 
	TargetArmLength: number;
	SocketOffset: Vector;
	TargetOffset: Vector;
	ProbeSize: number;
	ProbeChannel: ECollisionChannel;
	bDoCollisionTest: boolean;
	bUsePawnControlRotation: boolean;
	bInheritPitch: boolean;
	bInheritYaw: boolean;
	bInheritRoll: boolean;
	bEnableCameraLag: boolean;
	bEnableCameraRotationLag: boolean;
	bUseCameraLagSubstepping: boolean;
	bDrawDebugLagMarkers: boolean;
	CameraLagSpeed: number;
	CameraRotationLagSpeed: number;
	CameraLagMaxTimeStep: number;
	CameraLagMaxDistance: number;
	static Load(ResourceName: string): SpringArmComponent;
	static Find(Outer: UObject, ResourceName: string): SpringArmComponent;
	static GetDefaultObject(): SpringArmComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpringArmComponent;
	static C(Other: UObject): SpringArmComponent;
}

declare type EStereoLayerType = 'SLT_WorldLocked' | 'SLT_TrackerLocked' | 'SLT_FaceLocked';
declare var EStereoLayerType : { SLT_WorldLocked:'SLT_WorldLocked',SLT_TrackerLocked:'SLT_TrackerLocked',SLT_FaceLocked:'SLT_FaceLocked', };
declare type EStereoLayerShape = 'SLSH_QuadLayer' | 'SLSH_CylinderLayer' | 'SLSH_CubemapLayer';
declare var EStereoLayerShape : { SLSH_QuadLayer:'SLSH_QuadLayer',SLSH_CylinderLayer:'SLSH_CylinderLayer',SLSH_CubemapLayer:'SLSH_CubemapLayer', };
declare class StereoLayerComponent extends SceneComponent { 
	bLiveTexture: boolean;
	bSupportsDepth: boolean;
	bNoAlphaChannel: boolean;
	Texture: Texture;
	LeftTexture: Texture;
	bQuadPreserveTextureRatio: boolean;
	QuadSize: Vector2D;
	UVRect: Box2D;
	CylinderRadius: number;
	CylinderOverlayArc: number;
	CylinderHeight: number;
	StereoLayerType: EStereoLayerType;
	StereoLayerShape: EStereoLayerShape;
	Priority: number;
	static Load(ResourceName: string): StereoLayerComponent;
	static Find(Outer: UObject, ResourceName: string): StereoLayerComponent;
	static GetDefaultObject(): StereoLayerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerComponent;
	SetUVRect(InUVRect: Box2D): void;
	SetTexture(InTexture: Texture): void;
	SetQuadSize(InQuadSize: Vector2D): void;
	SetPriority(InPriority: number): void;
	MarkTextureForUpdate(): void;
	GetUVRect(): Box2D;
	GetTexture(): Texture;
	GetQuadSize(): Vector2D;
	GetPriority(): number;
	static C(Other: UObject): StereoLayerComponent;
}

declare class TimelineEventEntry { 
	Time: number;
	EventFunc: UnrealEngineDelegate<() => void>;
	clone() : TimelineEventEntry;
	static C(Other: UObject): TimelineEventEntry;
}

declare class TimelineVectorTrack { 
	VectorCurve: CurveVector;
	InterpFunc: UnrealEngineDelegate<(Output: Vector) => void>;
	TrackName: string;
	VectorPropertyName: string;
	VectorProperty: StructProperty;
	clone() : TimelineVectorTrack;
	static C(Other: UObject): TimelineVectorTrack;
}

declare class TimelineFloatTrack { 
	FloatCurve: CurveFloat;
	InterpFunc: UnrealEngineDelegate<(Output: number) => void>;
	TrackName: string;
	FloatPropertyName: string;
	FloatProperty: FloatProperty;
	clone() : TimelineFloatTrack;
	static C(Other: UObject): TimelineFloatTrack;
}

declare class TimelineLinearColorTrack { 
	LinearColorCurve: CurveLinearColor;
	InterpFunc: UnrealEngineDelegate<(Output: LinearColor) => void>;
	TrackName: string;
	LinearColorPropertyName: string;
	LinearColorProperty: StructProperty;
	clone() : TimelineLinearColorTrack;
	static C(Other: UObject): TimelineLinearColorTrack;
}

declare class Timeline { 
	LengthMode: ETimelineLengthMode;
	Length: number;
	bLooping: boolean;
	bReversePlayback: boolean;
	bPlaying: boolean;
	PlayRate: number;
	Position: number;
	Events: TimelineEventEntry[];
	InterpVectors: TimelineVectorTrack[];
	InterpFloats: TimelineFloatTrack[];
	InterpLinearColors: TimelineLinearColorTrack[];
	TimelinePostUpdateFunc: UnrealEngineDelegate<() => void>;
	TimelineFinishedFunc: UnrealEngineDelegate<() => void>;
	PropertySetObject: any;
	DirectionPropertyName: string;
	DirectionProperty: Property;
	clone() : Timeline;
	static C(Other: UObject): Timeline;
}

declare class TimelineComponent extends ActorComponent { 
	TheTimeline: Timeline;
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): TimelineComponent;
	static Find(Outer: UObject, ResourceName: string): TimelineComponent;
	static GetDefaultObject(): TimelineComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimelineComponent;
	Stop(): void;
	SetVectorCurve(NewVectorCurve: CurveVector,VectorTrackName: string): void;
	SetTimelineLengthMode(NewLengthMode: ETimelineLengthMode): void;
	SetTimelineLength(NewLength: number): void;
	SetPlayRate(NewRate: number): void;
	SetPlaybackPosition(NewPosition: number,bFireEvents: boolean,bFireUpdate: boolean): void;
	SetNewTime(NewTime: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetLinearColorCurve(NewLinearColorCurve: CurveLinearColor,LinearColorTrackName: string): void;
	SetIgnoreTimeDilation(bNewIgnoreTimeDilation: boolean): void;
	SetFloatCurve(NewFloatCurve: CurveFloat,FloatTrackName: string): void;
	ReverseFromEnd(): void;
	Reverse(): void;
	PlayFromStart(): void;
	Play(): void;
	OnRep_Timeline(): void;
	IsReversing(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetTimelineLength(): number;
	GetPlayRate(): number;
	GetPlaybackPosition(): number;
	GetIgnoreTimeDilation(): boolean;
	static C(Other: UObject): TimelineComponent;
}

declare class AnimComposite extends AnimCompositeBase { 
	AnimationTrack: AnimTrack;
	PreviewBasePose: AnimSequence;
	static Load(ResourceName: string): AnimComposite;
	static Find(Outer: UObject, ResourceName: string): AnimComposite;
	static GetDefaultObject(): AnimComposite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimComposite;
	static C(Other: UObject): AnimComposite;
}

declare type EBlendSpaceAxis = 'BSA_None' | 'BSA_X' | 'BSA_Y';
declare var EBlendSpaceAxis : { BSA_None:'BSA_None',BSA_X:'BSA_X',BSA_Y:'BSA_Y', };
declare class BlendSpace extends BlendSpaceBase { 
	AxisToScaleAnimation: EBlendSpaceAxis;
	static Load(ResourceName: string): BlendSpace;
	static Find(Outer: UObject, ResourceName: string): BlendSpace;
	static GetDefaultObject(): BlendSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace;
	static C(Other: UObject): BlendSpace;
}

declare class AimOffsetBlendSpace extends BlendSpace { 
	static Load(ResourceName: string): AimOffsetBlendSpace;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace;
	static GetDefaultObject(): AimOffsetBlendSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace;
	static C(Other: UObject): AimOffsetBlendSpace;
}

declare class BlendSpace1D extends BlendSpaceBase { 
	bDisplayEditorVertically: boolean;
	bScaleAnimation: boolean;
	static Load(ResourceName: string): BlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpace1D;
	static GetDefaultObject(): BlendSpace1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace1D;
	static C(Other: UObject): BlendSpace1D;
}

declare class AimOffsetBlendSpace1D extends BlendSpace1D { 
	static Load(ResourceName: string): AimOffsetBlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace1D;
	static GetDefaultObject(): AimOffsetBlendSpace1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace1D;
	static C(Other: UObject): AimOffsetBlendSpace1D;
}

declare class AnimStateMachineTypes extends UObject { 
	static Load(ResourceName: string): AnimStateMachineTypes;
	static Find(Outer: UObject, ResourceName: string): AnimStateMachineTypes;
	static GetDefaultObject(): AnimStateMachineTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateMachineTypes;
	static C(Other: UObject): AnimStateMachineTypes;
}

declare class AnimClassInterface extends Interface { 
	static Load(ResourceName: string): AnimClassInterface;
	static Find(Outer: UObject, ResourceName: string): AnimClassInterface;
	static GetDefaultObject(): AnimClassInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassInterface;
	static C(Other: UObject): AnimClassInterface;
}

declare class BakedStateExitTransition { 
	CanTakeDelegateIndex: number;
	CustomResultNodeIndex: number;
	TransitionIndex: number;
	bDesiredTransitionReturnValue: boolean;
	bAutomaticRemainingTimeRule: boolean;
	PoseEvaluatorLinks: number[];
	clone() : BakedStateExitTransition;
	static C(Other: UObject): BakedStateExitTransition;
}

declare class BakedAnimationState { 
	StateName: string;
	Transitions: BakedStateExitTransition[];
	StateRootNodeIndex: number;
	StartNotify: number;
	EndNotify: number;
	FullyBlendedNotify: number;
	bIsAConduit: boolean;
	EntryRuleNodeIndex: number;
	PlayerNodeIndices: number[];
	bAlwaysResetOnEntry: boolean;
	clone() : BakedAnimationState;
	static C(Other: UObject): BakedAnimationState;
}

declare class AnimationStateBase { 
	StateName: string;
	clone() : AnimationStateBase;
	static C(Other: UObject): AnimationStateBase;
}

declare class AnimationTransitionBetweenStates extends AnimationStateBase { 
	PreviousState: number;
	NextState: number;
	CrossfadeDuration: number;
	StartNotify: number;
	EndNotify: number;
	InterruptNotify: number;
	BlendMode: BlendMode;
	CustomCurve: CurveFloat;
	BlendProfile: BlendProfile;
	LogicType: ETransitionLogicType;
	clone() : AnimationTransitionBetweenStates;
	static C(Other: UObject): AnimationTransitionBetweenStates;
}

declare class BakedAnimationStateMachine { 
	MachineName: string;
	InitialState: number;
	States: BakedAnimationState[];
	Transitions: AnimationTransitionBetweenStates[];
	clone() : BakedAnimationStateMachine;
	static C(Other: UObject): BakedAnimationStateMachine;
}

declare class AnimClassData extends UObject { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	RootAnimNodeIndex: number;
	OrderedSavedPoseIndices: number[];
	RootAnimNodeProperty: StructProperty;
	AnimNodeProperties: StructProperty[];
	SyncGroupNames: string[];
	static Load(ResourceName: string): AnimClassData;
	static Find(Outer: UObject, ResourceName: string): AnimClassData;
	static GetDefaultObject(): AnimClassData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassData;
	static C(Other: UObject): AnimClassData;
}

declare class AnimCompress_Automatic extends AnimCompress { 
	MaxEndEffectorError: number;
	bTryFixedBitwiseCompression: boolean;
	bTryPerTrackBitwiseCompression: boolean;
	bTryLinearKeyRemovalCompression: boolean;
	bTryIntervalKeyRemoval: boolean;
	bRunCurrentDefaultCompressor: boolean;
	bAutoReplaceIfExistingErrorTooGreat: boolean;
	bRaiseMaxErrorToExisting: boolean;
	static Load(ResourceName: string): AnimCompress_Automatic;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_Automatic;
	static GetDefaultObject(): AnimCompress_Automatic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_Automatic;
	static C(Other: UObject): AnimCompress_Automatic;
}

declare class AnimCompress_BitwiseCompressOnly extends AnimCompress { 
	static Load(ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static GetDefaultObject(): AnimCompress_BitwiseCompressOnly;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_BitwiseCompressOnly;
	static C(Other: UObject): AnimCompress_BitwiseCompressOnly;
}

declare class AnimCompress_LeastDestructive extends AnimCompress { 
	static Load(ResourceName: string): AnimCompress_LeastDestructive;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_LeastDestructive;
	static GetDefaultObject(): AnimCompress_LeastDestructive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_LeastDestructive;
	static C(Other: UObject): AnimCompress_LeastDestructive;
}

declare class AnimCompress_RemoveEverySecondKey extends AnimCompress { 
	MinKeys: number;
	bStartAtSecondKey: boolean;
	static Load(ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static GetDefaultObject(): AnimCompress_RemoveEverySecondKey;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveEverySecondKey;
	static C(Other: UObject): AnimCompress_RemoveEverySecondKey;
}

declare class AnimCompress_RemoveLinearKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	MaxEffectorDiff: number;
	MinEffectorDiff: number;
	EffectorDiffSocket: number;
	ParentKeyScale: number;
	bRetarget: boolean;
	bActuallyFilterLinearKeys: boolean;
	static Load(ResourceName: string): AnimCompress_RemoveLinearKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveLinearKeys;
	static GetDefaultObject(): AnimCompress_RemoveLinearKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveLinearKeys;
	static C(Other: UObject): AnimCompress_RemoveLinearKeys;
}

declare class AnimCompress_PerTrackCompression extends AnimCompress_RemoveLinearKeys { 
	MaxZeroingThreshold: number;
	MaxPosDiffBitwise: number;
	MaxAngleDiffBitwise: number;
	MaxScaleDiffBitwise: number;
	AllowedRotationFormats: AnimationCompressionFormat[];
	AllowedTranslationFormats: AnimationCompressionFormat[];
	AllowedScaleFormats: AnimationCompressionFormat[];
	bResampleAnimation: boolean;
	ResampledFramerate: number;
	MinKeysForResampling: number;
	bUseAdaptiveError: boolean;
	bUseOverrideForEndEffectors: boolean;
	TrackHeightBias: number;
	ParentingDivisor: number;
	ParentingDivisorExponent: number;
	bUseAdaptiveError2: boolean;
	RotationErrorSourceRatio: number;
	TranslationErrorSourceRatio: number;
	ScaleErrorSourceRatio: number;
	MaxErrorPerTrackRatio: number;
	PerturbationProbeSize: number;
	static Load(ResourceName: string): AnimCompress_PerTrackCompression;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_PerTrackCompression;
	static GetDefaultObject(): AnimCompress_PerTrackCompression;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_PerTrackCompression;
	static C(Other: UObject): AnimCompress_PerTrackCompression;
}

declare class AnimCompress_RemoveTrivialKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	static Load(ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static GetDefaultObject(): AnimCompress_RemoveTrivialKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveTrivialKeys;
	static C(Other: UObject): AnimCompress_RemoveTrivialKeys;
}

declare class AnimNotify_PlayParticleEffect extends AnimNotify { 
	PSTemplate: ParticleSystem;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	Attached: boolean;
	SocketName: string;
	static Load(ResourceName: string): AnimNotify_PlayParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlayParticleEffect;
	static GetDefaultObject(): AnimNotify_PlayParticleEffect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlayParticleEffect;
	static C(Other: UObject): AnimNotify_PlayParticleEffect;
}

declare class AnimNotify_PlaySound extends AnimNotify { 
	Sound: SoundBase;
	VolumeMultiplier: number;
	PitchMultiplier: number;
	bFollow: boolean;
	AttachName: string;
	static Load(ResourceName: string): AnimNotify_PlaySound;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlaySound;
	static GetDefaultObject(): AnimNotify_PlaySound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlaySound;
	static C(Other: UObject): AnimNotify_PlaySound;
}

declare class AnimNotify_ResetClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResetClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResetClothingSimulation;
	static GetDefaultObject(): AnimNotify_ResetClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResetClothingSimulation;
	static C(Other: UObject): AnimNotify_ResetClothingSimulation;
}

declare class AnimNotifyState_TimedParticleEffect extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	SocketName: string;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	bDestroyAtEnd: boolean;
	PreviousPSTemplates: ParticleSystem[];
	PreviousSocketNames: string[];
	static Load(ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static GetDefaultObject(): AnimNotifyState_TimedParticleEffect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_TimedParticleEffect;
	static C(Other: UObject): AnimNotifyState_TimedParticleEffect;
}

declare class AnimNotifyState_Trail extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	FirstSocketName: string;
	SecondSocketName: string;
	WidthScaleMode: ETrailWidthMode;
	WidthScaleCurve: string;
	bRecycleSpawnedSystems: boolean;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	static Load(ResourceName: string): AnimNotifyState_Trail;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_Trail;
	static GetDefaultObject(): AnimNotifyState_Trail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_Trail;
	OverridePSTemplate(MeshComp: SkeletalMeshComponent,Animation: AnimSequenceBase): ParticleSystem;
	static C(Other: UObject): AnimNotifyState_Trail;
}

declare class AnimSetMeshLinkup { 
	BoneToTrackTable: number[];
	clone() : AnimSetMeshLinkup;
	static C(Other: UObject): AnimSetMeshLinkup;
}

declare class AnimSet extends UObject { 
	bAnimRotationOnly: boolean;
	TrackBoneNames: string[];
	Sequences: AnimSequence[];
	LinkupCache: AnimSetMeshLinkup[];
	BoneUseAnimTranslation: number[];
	ForceUseMeshTranslation: number[];
	UseTranslationBoneNames: string[];
	ForceMeshTranslationBoneNames: string[];
	PreviewSkelMeshName: string;
	BestRatioSkelMeshName: string;
	static Load(ResourceName: string): AnimSet;
	static Find(Outer: UObject, ResourceName: string): AnimSet;
	static GetDefaultObject(): AnimSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSet;
	static C(Other: UObject): AnimSet;
}

declare class EditorMapPerformanceTestDefinition { 
	PerformanceTestmap: StringAssetReference;
	TestTimer: number;
	clone() : EditorMapPerformanceTestDefinition;
	static C(Other: UObject): EditorMapPerformanceTestDefinition;
}

declare class ImportFactorySettingValues { 
	SettingName: string;
	Value: string;
	clone() : ImportFactorySettingValues;
	static C(Other: UObject): ImportFactorySettingValues;
}

declare class EditorImportWorkflowDefinition { 
	ImportFilePath: FilePath;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportWorkflowDefinition;
	static C(Other: UObject): EditorImportWorkflowDefinition;
}

declare class BuildPromotionImportWorkflowSettings { 
	Diffuse: EditorImportWorkflowDefinition;
	Normal: EditorImportWorkflowDefinition;
	StaticMesh: EditorImportWorkflowDefinition;
	ReimportStaticMesh: EditorImportWorkflowDefinition;
	BlendShapeMesh: EditorImportWorkflowDefinition;
	MorphMesh: EditorImportWorkflowDefinition;
	SkeletalMesh: EditorImportWorkflowDefinition;
	Animation: EditorImportWorkflowDefinition;
	Sound: EditorImportWorkflowDefinition;
	SurroundSound: EditorImportWorkflowDefinition;
	OtherAssetsToImport: EditorImportWorkflowDefinition[];
	clone() : BuildPromotionImportWorkflowSettings;
	static C(Other: UObject): BuildPromotionImportWorkflowSettings;
}

declare class BuildPromotionOpenAssetSettings { 
	BlueprintAsset: FilePath;
	MaterialAsset: FilePath;
	ParticleSystemAsset: FilePath;
	SkeletalMeshAsset: FilePath;
	StaticMeshAsset: FilePath;
	TextureAsset: FilePath;
	clone() : BuildPromotionOpenAssetSettings;
	static C(Other: UObject): BuildPromotionOpenAssetSettings;
}

declare class BuildPromotionNewProjectSettings { 
	NewProjectFolderOverride: DirectoryPath;
	NewProjectNameOverride: string;
	clone() : BuildPromotionNewProjectSettings;
	static C(Other: UObject): BuildPromotionNewProjectSettings;
}

declare class BuildPromotionTestSettings { 
	DefaultStaticMeshAsset: FilePath;
	ImportWorkflow: BuildPromotionImportWorkflowSettings;
	OpenAssets: BuildPromotionOpenAssetSettings;
	NewProjectSettings: BuildPromotionNewProjectSettings;
	SourceControlMaterial: FilePath;
	clone() : BuildPromotionTestSettings;
	static C(Other: UObject): BuildPromotionTestSettings;
}

declare class MaterialEditorPromotionSettings { 
	DefaultMaterialAsset: FilePath;
	DefaultDiffuseTexture: FilePath;
	DefaultNormalTexture: FilePath;
	clone() : MaterialEditorPromotionSettings;
	static C(Other: UObject): MaterialEditorPromotionSettings;
}

declare class ParticleEditorPromotionSettings { 
	DefaultParticleAsset: FilePath;
	clone() : ParticleEditorPromotionSettings;
	static C(Other: UObject): ParticleEditorPromotionSettings;
}

declare class BlueprintEditorPromotionSettings { 
	FirstMeshPath: FilePath;
	SecondMeshPath: FilePath;
	DefaultParticleAsset: FilePath;
	clone() : BlueprintEditorPromotionSettings;
	static C(Other: UObject): BlueprintEditorPromotionSettings;
}

declare class OpenTestAsset { 
	AssetToOpen: FilePath;
	bSkipTestWhenUnAttended: boolean;
	clone() : OpenTestAsset;
	static C(Other: UObject): OpenTestAsset;
}

declare class ExternalToolDefinition { 
	ToolName: string;
	ExecutablePath: FilePath;
	CommandLineOptions: string;
	WorkingDirectory: DirectoryPath;
	ScriptExtension: string;
	ScriptDirectory: DirectoryPath;
	clone() : ExternalToolDefinition;
	static C(Other: UObject): ExternalToolDefinition;
}

declare class EditorImportExportTestDefinition { 
	ImportFilePath: FilePath;
	ExportFileExtension: string;
	bSkipExport: boolean;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportExportTestDefinition;
	static C(Other: UObject): EditorImportExportTestDefinition;
}

declare class LaunchOnTestSettings { 
	LaunchOnTestmap: FilePath;
	DeviceID: string;
	clone() : LaunchOnTestSettings;
	static C(Other: UObject): LaunchOnTestSettings;
}

declare class AutomationTestSettings extends UObject { 
	AutomationTestmap: StringAssetReference;
	EditorPerformanceTestMaps: EditorMapPerformanceTestDefinition[];
	BuildPromotionTest: BuildPromotionTestSettings;
	MaterialEditorPromotionTest: MaterialEditorPromotionSettings;
	ParticleEditorPromotionTest: ParticleEditorPromotionSettings;
	BlueprintEditorPromotionTest: BlueprintEditorPromotionSettings;
	EngineTestModules: string[];
	EditorTestModules: string[];
	TestLevelFolders: string[];
	TestAssetsToOpen: OpenTestAsset[];
	ExternalTools: ExternalToolDefinition[];
	ImportExportTestDefinitions: EditorImportExportTestDefinition[];
	LaunchOnSettings: LaunchOnTestSettings[];
	DefaultScreenshotResolution: IntPoint;
	static Load(ResourceName: string): AutomationTestSettings;
	static Find(Outer: UObject, ResourceName: string): AutomationTestSettings;
	static GetDefaultObject(): AutomationTestSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationTestSettings;
	static C(Other: UObject): AutomationTestSettings;
}

declare class BlueprintMapLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintMapLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintMapLibrary;
	static GetDefaultObject(): BlueprintMapLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMapLibrary;
	static Values(TargetMap: any,Values?: number[]): {Values: number[]};
	static Remove(TargetMap: any,Key: number): boolean;
	static Length(TargetMap: any): number;
	static Keys(TargetMap: any,Keys?: number[]): {Keys: number[]};
	static Find(TargetMap: any,Key: number,Value?: number): {Value: number, $: boolean};
	static Contains(TargetMap: any,Key: number): boolean;
	static Clear(TargetMap: any): void;
	static Add(TargetMap: any,Key: number,Value: number): boolean;
	static C(Other: UObject): BlueprintMapLibrary;
}

declare type EScreenOrientation = 'Unknown' | 'Portrait' | 'PortraitUpsideDown' | 'LandscapeLeft' | 'LandscapeRight' | 'FaceUp' | 'FaceDown';
declare var EScreenOrientation : { Unknown:'Unknown',Portrait:'Portrait',PortraitUpsideDown:'PortraitUpsideDown',LandscapeLeft:'LandscapeLeft',LandscapeRight:'LandscapeRight',FaceUp:'FaceUp',FaceDown:'FaceDown', };
declare class PlatformGameInstance extends GameInstance { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationRegisteredForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inArray: number[]) => void>;
	ApplicationRegisteredForUserNotificationsDelegate: UnrealEngineMulticastDelegate<(inInt: number) => void>;
	ApplicationFailedToRegisterForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inString: string) => void>;
	ApplicationReceivedRemoteNotificationDelegate: UnrealEngineMulticastDelegate<(inString: string) => void>;
	ApplicationReceivedLocalNotificationDelegate: UnrealEngineMulticastDelegate<(inString: string, inInt: number) => void>;
	ApplicationReceivedScreenOrientationChangedNotificationDelegate: UnrealEngineMulticastDelegate<(inScreenOrientation: EScreenOrientation) => void>;
	static Load(ResourceName: string): PlatformGameInstance;
	static Find(Outer: UObject, ResourceName: string): PlatformGameInstance;
	static GetDefaultObject(): PlatformGameInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformGameInstance;
	static C(Other: UObject): PlatformGameInstance;
}

declare class BlueprintPlatformLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintPlatformLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintPlatformLibrary;
	static GetDefaultObject(): BlueprintPlatformLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPlatformLibrary;
	static ScheduleLocalNotificationFromNow(inSecondsFromNow: number,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
	static GetLaunchNotification(NotificationLaunchedApp?: boolean,ActivationEvent?: string,FireDate?: number): {NotificationLaunchedApp: boolean, ActivationEvent: string, FireDate: number};
	static ClearAllLocalNotifications(): void;
	static CancelLocalNotification(ActivationEvent: string): void;
	static C(Other: UObject): BlueprintPlatformLibrary;
}

declare class BlueprintSetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintSetLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintSetLibrary;
	static GetDefaultObject(): BlueprintSetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintSetLibrary;
	static Union(A: any,B: any,Result?: any): {Result: any};
	static ToArray(A: any,Result?: number[]): {Result: number[]};
	static RemoveItems(TargetSet: any,Items: number[]): void;
	static Remove(TargetSet: any,Item: number): boolean;
	static Length(TargetSet: any): number;
	static Intersection(A: any,B: any,Result?: any): {Result: any};
	static Difference(A: any,B: any,Result?: any): {Result: any};
	static ContainsItem(TargetSet: any,ItemToFind: number): boolean;
	static Clear(TargetSet: any): void;
	static AddItems(TargetSet: any,NewItems: number[]): void;
	static Add(TargetSet: any,NewItem: number): boolean;
	static C(Other: UObject): BlueprintSetLibrary;
}

declare class DataTableFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DataTableFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): DataTableFunctionLibrary;
	static GetDefaultObject(): DataTableFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFunctionLibrary;
	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
	static C(Other: UObject): DataTableFunctionLibrary;
}

declare class DebugDrawService extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DebugDrawService;
	static Find(Outer: UObject, ResourceName: string): DebugDrawService;
	static GetDefaultObject(): DebugDrawService;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugDrawService;
	static C(Other: UObject): DebugDrawService;
}

declare class UserActivity { 
	ActionName: string;
	clone() : UserActivity;
	static C(Other: UObject): UserActivity;
	SetUserActivity(): void;
	static SetUserActivity(UserActivity: UserActivity): void;
}

declare class KismetSystemLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetSystemLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetSystemLibrary;
	static GetDefaultObject(): KismetSystemLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetSystemLibrary;
	static StackTrace(): void;
	static SphereTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static SphereTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static MultiSphereTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiSphereTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static SphereOverlapComponents(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static SphereOverlapActors(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static ShowPlatformSpecificLeaderboardScreen(CategoryName: string): void;
	static ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController): void;
	static ShowInterstitialAd(): void;
	static ShowAdBanner(AdIdIndex: number,bShowOnBottomOfScreen: boolean): void;
	static SetWindowTitle(Title: string): void;
	static SetVolumeButtonsHandledBySystem(bEnabled: boolean): void;
	static SetVectorPropertyByName(UObject: UObject,PropertyName: string,Value: Vector): void;
	static SetUserActivity(UserActivity: UserActivity): void;
	static SetTransformPropertyByName(UObject: UObject,PropertyName: string,Value: Transform): void;
	static SetTextPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetSuppressViewportTransitionMessage(WorldContextObject: UObject,bState: boolean): void;
	static SetStructurePropertyByName(UObject: UObject,PropertyName: string,Value: GenericStruct): void;
	static SetStringPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetRotatorPropertyByName(UObject: UObject,PropertyName: string,Value: Rotator): void;
	static SetObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
	static SetNamePropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
	static SetLinearColorPropertyByName(UObject: UObject,PropertyName: string,Value: LinearColor): void;
	static SetIntPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetFloatPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetCollisionProfileNameProperty(UObject: UObject,PropertyName: string,Value: CollisionProfileName): void;
	static SetClassPropertyByName(UObject: UObject,PropertyName: string,Value: UnrealEngineClass): void;
	static SetBytePropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
	static SetBoolPropertyByName(UObject: UObject,PropertyName: string,Value: boolean): void;
	static SetAssetPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static SetAssetClassPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static RetriggerableDelay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
	static ResetGamepadAssignmentToController(ControllerId: number): void;
	static ResetGamepadAssignments(): void;
	static RegisterForRemoteNotifications(): void;
	static QuitGame(WorldContextObject: UObject,SpecificPlayer: PlayerController,QuitPreference: EQuitPreference): void;
	static PrintWarning(InString: string): void;
	static PrintText(WorldContextObject: UObject,InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
	static PrintString(WorldContextObject: UObject,InString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
	static MoveComponentTo(Component: SceneComponent,TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
	static MakeLiteralText(Value: string): string;
	static MakeLiteralString(Value: string): string;
	static MakeLiteralName(Value: string): string;
	static MakeLiteralInt(Value: number): number;
	static MakeLiteralFloat(Value: number): number;
	static MakeLiteralByte(Value: number): number;
	static MakeLiteralBool(Value: boolean): boolean;
	static LoadInterstitialAd(AdIdIndex: number): void;
	static LineTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static LineTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static MultiLineTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiLineTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static LaunchURL(URL: string): void;
	static UnpauseTimerbyHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static UnpauseTimerbyFunctionName(UObject: UObject,FunctionName: string): void;
	static DoesTimerExistbyHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static DoesTimerExistbyFunctionName(UObject: UObject,FunctionName: string): boolean;
	static SetTimerbyFunctionName(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean): TimerHandle;
	static PauseTimerbyHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static PauseTimerbyFunctionName(UObject: UObject,FunctionName: string): void;
	static IsValid(Handle: TimerHandle): boolean;
	static IsTimerPausedbyHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static IsTimerPausedbyFunctionName(UObject: UObject,FunctionName: string): boolean;
	static IsTimerActivebyHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
	static IsTimerActivebyFunctionName(UObject: UObject,FunctionName: string): boolean;
	static Invalidate(Handle?: TimerHandle): {Handle: TimerHandle, $: TimerHandle};
	static GetTimerRemainingTimebyHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
	static GetTimerRemainingTimebyFunctionName(UObject: UObject,FunctionName: string): number;
	static GetTimerElapsedTimebyHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
	static GetTimerElapsedTimebyFunctionName(UObject: UObject,FunctionName: string): number;
	static ClearTimerbyHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
	static ClearTimerbyFunctionName(UObject: UObject,FunctionName: string): void;
	static ClearandInvalidateTimerbyHandle(WorldContextObject: UObject,Handle?: TimerHandle): {Handle: TimerHandle};
	static IsValidClass(Class: UnrealEngineClass): boolean;
	static IsValid(UObject: UObject): boolean;
	static IsStandalone(WorldContextObject: UObject): boolean;
	static IsServer(WorldContextObject: UObject): boolean;
	static IsPackagedForDistribution(): boolean;
	static IsLoggedIn(SpecificPlayer: PlayerController): boolean;
	static IsInterstitialAdRequested(): boolean;
	static IsInterstitialAdAvailable(): boolean;
	static IsDedicatedServer(WorldContextObject: UObject): boolean;
	static IsControllerAssignedToGamepad(ControllerId: number): boolean;
	static HideAdBanner(): void;
	static GetVolumeButtonsHandledBySystem(): boolean;
	static GetUniqueDeviceId(): string;
	static GetSupportedFullscreenResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
	static GetRenderingMaterialQualityLevel(): number;
	static GetRenderingDetailMode(): number;
	static GetPreferredLanguages(): string[];
	static GetPlatformUserName(): string;
	static GetPathName(UObject: UObject): string;
	static GetObjectName(UObject: UObject): string;
	static GetMinYResolutionForUI(): number;
	static GetMinYResolutionFor3DView(): number;
	static GetLocalCurrencySymbol(): string;
	static GetLocalCurrencyCode(): string;
	static GetGameTimeInSeconds(WorldContextObject: UObject): number;
	static GetGameName(): string;
	static GetGameBundleId(): string;
	static GetEngineVersion(): string;
	static GetDisplayName(UObject: UObject): string;
	static GetDeviceId(): string;
	static GetConvenientWindowedResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
	static GetComponentBounds(Component: SceneComponent,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
	static GetCommandLine(): string;
	static GetDisplayName(Class: UnrealEngineClass): string;
	static GetAdIDCount(): number;
	static GetActorListFromComponentList(ComponentList: PrimitiveComponent[],ActorClassFilter: UnrealEngineClass,OutActorList?: Actor[]): {OutActorList: Actor[]};
	static GetActorBounds(Actor: Actor,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
	static ForceCloseAdBanner(): void;
	static FlushPersistentDebugLines(WorldContextObject: UObject): void;
	static FlushDebugStrings(WorldContextObject: UObject): void;
	static ExecuteConsoleCommand(WorldContextObject: UObject,Command: string,SpecificPlayer: PlayerController): void;
	static DrawDebugString(WorldContextObject: UObject,TextLocation: Vector,Text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
	static DrawDebugSphere(WorldContextObject: UObject,Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugPoint(WorldContextObject: UObject,Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
	static DrawDebugPlane(WorldContextObject: UObject,PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
	static DrawDebugLine(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugFrustum(WorldContextObject: UObject,FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugFloatHistoryTransform(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
	static DrawDebugFloatHistoryLocation(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
	static DrawDebugCylinder(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCoordinateSystem(WorldContextObject: UObject,AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCircle(WorldContextObject: UObject,Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
	static DrawDebugCapsule(WorldContextObject: UObject,Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DrawDebugCamera(CameraActor: CameraActor,CameraColor: LinearColor,Duration: number): void;
	static DrawDebugBox(WorldContextObject: UObject,Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
	static DrawDebugArrow(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
	static DoesImplementInterface(TestObject: UObject,Interface: UnrealEngineClass): boolean;
	static Delay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
	static CreateCopyForUndoBuffer(ObjectToModify: UObject): void;
	static Conv_AssetToObject(Asset: any): UObject;
	static Conv_AssetClassToClass(AssetClass: any): UnrealEngineClass;
	static ControlScreensaver(bAllowScreenSaver: boolean): void;
	static ComponentOverlapComponents(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static ComponentOverlapActors(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CollectGarbage(): void;
	static CapsuleTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static CapsuleTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static MultiCapsuleTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiCapsuleTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static CapsuleOverlapComponents(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static CapsuleOverlapActors(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static CanLaunchURL(URL: string): boolean;
	static BoxTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static BoxTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
	static MultiBoxTraceForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static MultiBoxTraceByChannel(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
	static BoxOverlapComponents(WorldContextObject: UObject,BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
	static BoxOverlapActors(WorldContextObject: UObject,BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static AddFloatHistorySample(Value: number,FloatHistory: DebugFloatHistory): DebugFloatHistory;
	static C(Other: UObject): KismetSystemLibrary;
}

declare class GameplayStatics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): GameplayStatics;
	static Find(Outer: UObject, ResourceName: string): GameplayStatics;
	static GetDefaultObject(): GameplayStatics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayStatics;
	static UnloadStreamLevel(WorldContextObject: UObject,LevelName: string,LatentInfo: LatentActionInfo): void;
	static SuggestProjectileVelocityCustomArc(WorldContextObject: UObject,OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
	static SpawnSoundAttached(Sound: SoundBase,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency): AudioComponent;
	static SpawnSoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency): AudioComponent;
	static SpawnSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean): AudioComponent;
	static SpawnObject(ObjectClass: UnrealEngineClass,Outer: UObject): UObject;
	static SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation): ForceFeedbackComponent;
	static SpawnForceFeedbackAtLocation(WorldContextObject: UObject,ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation): ForceFeedbackComponent;
	static SpawnEmitterAttached(EmitterTemplate: ParticleSystem,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bAutoDestroy: boolean): ParticleSystemComponent;
	static SpawnEmitterAtLocation(WorldContextObject: UObject,EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,bAutoDestroy: boolean): ParticleSystemComponent;
	static SpawnDialogueAttached(Dialogue: DialogueWave,Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): AudioComponent;
	static SpawnDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): AudioComponent;
	static SpawnDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): AudioComponent;
	static SpawnDecalAttached(DecalMaterial: MaterialInterface,DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
	static SetSubtitlesEnabled(bEnabled: boolean): void;
	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
	static SetGamePaused(WorldContextObject: UObject,bPaused: boolean): boolean;
	static SetBaseSoundMix(WorldContextObject: UObject,InSoundMix: SoundMix): void;
	static SaveGameToSlot(SaveGameObject: SaveGame,SlotName: string,UserIndex: number): boolean;
	static RemovePlayer(Player: PlayerController,bDestroyPawn: boolean): void;
	static RebaseZeroOriginOntoLocal(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static RebaseLocalOriginOntoZero(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static PushSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static ProjectWorldToScreen(Player: PlayerController,WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
	static PopSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static PlayWorldCameraShake(WorldContextObject: UObject,Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
	static PlaySoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency): void;
	static PlaySound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency): void;
	static PlayDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
	static PlayDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
	static ParseOption(Options: string,Key: string): string;
	static OpenLevel(WorldContextObject: UObject,LevelName: string,bAbsolute: boolean,Options: string): void;
	static MakeHitResult(bBlockingHit: boolean,bInitialOverlap: boolean,Time: number,Location: Vector,ImpactPoint: Vector,Normal: Vector,ImpactNormal: Vector,PhysMat: PhysicalMaterial,HitActor: Actor,HitComponent: PrimitiveComponent,HitBoneName: string,HitItem: number,FaceIndex: number,TraceStart: Vector,TraceEnd: Vector): HitResult;
	static LoadStreamLevel(WorldContextObject: UObject,LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
	static LoadGameFromSlot(SlotName: string,UserIndex: number): SaveGame;
	static IsGamePaused(WorldContextObject: UObject): boolean;
	static HasOption(Options: string,InKey: string): boolean;
	static HasLaunchOption(OptionToCheck: string): boolean;
	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
	static GetTimeSeconds(WorldContextObject: UObject): number;
	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
	static GetStreamingLevel(WorldContextObject: UObject,PackageName: string): LevelStreaming;
	static GetRealTimeSeconds(WorldContextObject: UObject): number;
	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
	static GetPlayerControllerID(Player: PlayerController): number;
	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
	static GetPlatformName(): string;
	static GetClass(UObject: UObject): UnrealEngineClass;
	static GetKeyValue(Pair: string,Key?: string,Value?: string): {Key: string, Value: string};
	static GetIntOption(Options: string,Key: string,DefaultValue: number): number;
	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
	static GetGameState(WorldContextObject: UObject): GameStateBase;
	static GetGameMode(WorldContextObject: UObject): GameModeBase;
	static GetGameInstance(WorldContextObject: UObject): GameInstance;
	static GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect;
	static GetCurrentLevelName(WorldContextObject: UObject,bRemovePrefixString: boolean): string;
	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetActorArrayBounds(Actors: Actor[],bOnlyCollidingComponents: boolean,Center?: Vector,BoxExtent?: Vector): {Center: Vector, BoxExtent: Vector};
	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
	static GetAccurateRealTime(WorldContextObject: UObject,Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
	static FlushLevelStreaming(WorldContextObject: UObject): void;
	static FinishSpawningActor(Actor: Actor,SpawnTransform: Transform): Actor;
	static FindCollisionUV(Hit: HitResult,UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
	static EnableLiveStreaming(Enable: boolean): void;
	static DoesSaveGameExist(SlotName: string,UserIndex: number): boolean;
	static DeprojectScreenToWorld(Player: PlayerController,ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
	static DeleteGameInSlot(SlotName: string,UserIndex: number): boolean;
	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean): AudioComponent;
	static CreateSaveGameObjectFromBlueprint(SaveGameBlueprint: Blueprint): SaveGame;
	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPawn: boolean): PlayerController;
	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
	static CancelAsyncLoading(): void;
	static BreakHitResult(Hit: HitResult,bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
	static SuggestProjectileVelocity(WorldContextObject: UObject,TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
	static PredictProjectilePathByTraceChannel(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static PredictProjectilePathByObjectType(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static PredictProjectilePath(WorldContextObject: UObject,PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
	static BeginSpawningActorFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
	static BeginSpawningActorFromBlueprint(WorldContextObject: UObject,Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
	static BeginDeferredActorSpawnFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: CollisionHandlingOverride,Owner: Actor): Actor;
	static AreSubtitlesEnabled(): boolean;
	static AreAnyListenersWithinRange(WorldContextObject: UObject,Location: Vector,MaximumRange: number): boolean;
	static ApplyRadialDamageWithFalloff(WorldContextObject: UObject,BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyRadialDamage(WorldContextObject: UObject,BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyPointDamage(DamagedActor: Actor,BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
	static ApplyDamage(DamagedActor: Actor,BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
	static ActivateReverbEffect(WorldContextObject: UObject,ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
	static C(Other: UObject): GameplayStatics;
}

declare type EHMDTrackingOrigin = 'Floor' | 'Eye';
declare var EHMDTrackingOrigin : { Floor:'Floor',Eye:'Eye', };
declare type EOrientPositionSelector = 'Orientation' | 'Position' | 'OrientationAndPosition';
declare var EOrientPositionSelector : { Orientation:'Orientation',Position:'Position',OrientationAndPosition:'OrientationAndPosition', };
declare class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static GetDefaultObject(): HeadMountedDisplayFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HeadMountedDisplayFunctionLibrary;
	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
	static SetTrackingOrigin(Origin: EHMDTrackingOrigin): void;
	static SetClippingPlanes(Near: number,Far: number): void;
	static ResetOrientationAndPosition(Yaw: number,Options: EOrientPositionSelector): void;
	static IsInLowPersistenceMode(): boolean;
	static IsHeadMountedDisplayEnabled(): boolean;
	static IsHeadMountedDisplayConnected(): boolean;
	static HasValidTrackingPosition(): boolean;
	static GetWorldToMetersScale(WorldContext: UObject): number;
	static GetVRFocusState(bUseFocus?: boolean,bHasFocus?: boolean): {bUseFocus: boolean, bHasFocus: boolean};
	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,Index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
	static GetTrackingOrigin(): EHMDTrackingOrigin;
	static GetScreenPercentage(): number;
	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
	static GetNumOfTrackingSensors(): number;
	static GetHMDDeviceName(): string;
	static EnableLowPersistenceMode(bEnable: boolean): void;
	static EnableHMD(bEnable: boolean): boolean;
	static C(Other: UObject): HeadMountedDisplayFunctionLibrary;
}

declare class KismetArrayLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetArrayLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetArrayLibrary;
	static GetDefaultObject(): KismetArrayLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetArrayLibrary;
	static SetArrayPropertyByName(UObject: UObject,PropertyName: string,Value: number[]): void;
	static FilterArray(TargetArray: Actor[],FilterClass: UnrealEngineClass,FilteredArray?: Actor[]): {FilteredArray: Actor[]};
	static Shuffle(TargetArray: number[]): void;
	static SetArrayElem(TargetArray: number[],Index: number,Item: number,bSizeToFit: boolean): void;
	static Resize(TargetArray: number[],Size: number): void;
	static RemoveItem(TargetArray: number[],Item: number): boolean;
	static RemoveIndex(TargetArray: number[],IndexToRemove: number): void;
	static Length(TargetArray: number[]): number;
	static LastIndex(TargetArray: number[]): number;
	static IsValidIndex(TargetArray: number[],IndexToTest: number): boolean;
	static Insert(TargetArray: number[],NewItem: number,Index: number): void;
	static Get(TargetArray: number[],Index: number,Item?: number): {Item: number};
	static FindItem(TargetArray: number[],ItemToFind: number): number;
	static ContainsItem(TargetArray: number[],ItemToFind: number): boolean;
	static Clear(TargetArray: number[]): void;
	static AppendArray(TargetArray: number[],SourceArray: number[]): void;
	static AddUnique(TargetArray: number[],NewItem: number): number;
	static Add(TargetArray: number[],NewItem: number): number;
	static C(Other: UObject): KismetArrayLibrary;
}

declare class KismetGuidLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetGuidLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetGuidLibrary;
	static GetDefaultObject(): KismetGuidLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetGuidLibrary;
	static ParseStringtoGuid(GuidString: string,OutGuid?: Guid,Success?: boolean): {OutGuid: Guid, Success: boolean};
	static NotEqual(A: Guid,B: Guid): boolean;
	static NewGuid(): Guid;
	static IsValid(InGuid: Guid): boolean;
	static Invalidate_Guid(InGuid?: Guid): {InGuid: Guid};
	static Equal(A: Guid,B: Guid): boolean;
	static ToString(InGuid: Guid): string;
	static C(Other: UObject): KismetGuidLibrary;
}

declare class KismetInputLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetInputLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetInputLibrary;
	static GetDefaultObject(): KismetInputLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetInputLibrary;
	static IsTouchEvent(Input: UPointerEvent): boolean;
	static IsMouseButtonDown(Input: UPointerEvent,MouseButton: Key): boolean;
	static GetWheelDelta(Input: UPointerEvent): number;
	static GetUserIndex(Input: UPointerEvent): number;
	static GetTouchpadIndex(Input: UPointerEvent): number;
	static GetScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static GetPointerIndex(Input: UPointerEvent): number;
	static GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static GetGestureDelta(Input: UPointerEvent): Vector2D;
	static GetEffectingButton(Input: UPointerEvent): Key;
	static GetCursorDelta(Input: UPointerEvent): Vector2D;
	static Key_IsVectorAxis(Key: Key): boolean;
	static Key_IsMouseButton(Key: Key): boolean;
	static Key_IsModifierKey(Key: Key): boolean;
	static Key_IsKeyboardKey(Key: Key): boolean;
	static Key_IsGamepadKey(Key: Key): boolean;
	static Key_IsFloatAxis(Key: Key): boolean;
	static Key_GetDisplayName(Key: Key): string;
	static IsShiftDown(Input: InputEvent): boolean;
	static IsRightShiftDown(Input: InputEvent): boolean;
	static IsRightControlDown(Input: InputEvent): boolean;
	static IsRightCommandDown(Input: InputEvent): boolean;
	static IsRightAltDown(Input: InputEvent): boolean;
	static IsRepeat(Input: InputEvent): boolean;
	static IsLeftShiftDown(Input: InputEvent): boolean;
	static IsLeftControlDown(Input: InputEvent): boolean;
	static IsLeftCommandDown(Input: InputEvent): boolean;
	static IsLeftAltDown(Input: InputEvent): boolean;
	static IsControlDown(Input: InputEvent): boolean;
	static IsCommandDown(Input: InputEvent): boolean;
	static IsAltDown(Input: InputEvent): boolean;
	static GetUserIndex(Input: KeyEvent): number;
	static GetKey(Input: KeyEvent): Key;
	static GetAnalogValue(Input: AnalogInputEvent): number;
	static Equal(A: Key,B: Key): boolean;
	static Equal(A: InputChord,B: InputChord): boolean;
	static ControllerEvent_GetUserIndex(Input: ControllerEvent): number;
	static GetEffectingButton(Input: ControllerEvent): Key;
	static ControllerEvent_GetAnalogValue(Input: ControllerEvent): number;
	static CalibrateTilt(): void;
	static C(Other: UObject): KismetInputLibrary;
}

declare class KismetMaterialLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetMaterialLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMaterialLibrary;
	static GetDefaultObject(): KismetMaterialLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMaterialLibrary;
	static SetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
	static SetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
	static GetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
	static GetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): number;
	static CreateDynamicMaterialInstance(WorldContextObject: UObject,Parent: MaterialInterface): MaterialInstanceDynamic;
	static C(Other: UObject): KismetMaterialLibrary;
}

declare class FloatSpringState { 
	clone() : FloatSpringState;
	static C(Other: UObject): FloatSpringState;
	ResetFloatSpringState(): {SpringState: FloatSpringState};
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
}

declare class KismetMathLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetMathLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMathLibrary;
	static GetDefaultObject(): KismetMathLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMathLibrary;
	static BitwiseXOR(A: number,B: number): number;
	static VectorLengthSquared(A: Vector): number;
	static Vector2dLengthSquared(A: Vector2D): number;
	static Vector2dLength(A: Vector2D): number;
	static VectorLength(A: Vector): number;
	static Lerp(A: Vector,B: Vector,Alpha: number): Vector;
	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Ease(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
	static UtcNow(): DateTime;
	static TransformLocation(T: Transform,Location: Vector): Vector;
	static TransformDirection(T: Transform,Direction: Vector): Vector;
	static Today(): DateTime;
	static Lerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
	static ZeroValue(): Timespan;
	static TimespanRatio(A: Timespan,B: Timespan): number;
	static MinValue(): Timespan;
	static MaxValue(): Timespan;
	static TimespanFromString(TimespanString: string,Result?: Timespan): {Result: Timespan, $: boolean};
	static Ease(A: Transform,B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
	static Tan(A: number): number;
	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
	static Subtract_VectorInt(A: Vector,B: number): Vector;
	static Subtract_VectorFloat(A: Vector,B: number): Vector;
	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Subtract_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Subtract_IntInt(A: number,B: number): number;
	static Subtract_FloatFloat(A: number,B: number): number;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_ByteByte(A: number,B: number): number;
	static Square(A: number): number;
	static Sqrt(A: number): number;
	static Sin(A: number): number;
	static Sign(A: number): number;
	static Sign(A: number): number;
	static SetRandomStreamSeed(Stream?: RandomStream,NewSeed?: number): {Stream: RandomStream};
	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
	static SelectString(A: string,B: string,bPickA: boolean): string;
	static SelectRotator(A: Rotator,B: Rotator,bPickA: boolean): Rotator;
	static SelectObject(A: UObject,B: UObject,bSelectA: boolean): UObject;
	static SelectInt(A: number,B: number,bPickA: boolean): number;
	static SelectFloat(A: number,B: number,bPickA: boolean): number;
	static SelectColor(A: LinearColor,B: LinearColor,bPickA: boolean): LinearColor;
	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
	static SeedRandomStream(Stream?: RandomStream): {Stream: RandomStream};
	static Round(A: number): number;
	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
	static RotateVectorAroundAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
	static Lerp(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean): Rotator;
	static RInterpTo_Constant(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RInterpTo(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RGBtoHSV(RGB: LinearColor,HSV?: LinearColor): {HSV: LinearColor};
	static RGBToHSV(InColor: LinearColor,H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
	static ResetRandomStream(Stream: RandomStream): void;
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
	static Ease(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Rotator;
	static RandomUnitVectorInConeWithYawAndPitch(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
	static RandomUnitVectorInCone(ConeDir: Vector,ConeHalfAngle: number): Vector;
	static RandomUnitVectorFromStream(Stream: RandomStream): Vector;
	static RandomUnitVector(): Vector;
	static RandomRotatorFromStream(bRoll: boolean,Stream: RandomStream): Rotator;
	static RandomRotator(bRoll: boolean): Rotator;
	static RandomPointInBoundingBox(Origin: Vector,BoxExtent: Vector): Vector;
	static RandomIntegerInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomIntegerInRange(Min: number,Max: number): number;
	static RandomIntegerFromStream(Max: number,Stream: RandomStream): number;
	static RandomInteger(Max: number): number;
	static RandomFloatInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomFloatInRange(Min: number,Max: number): number;
	static RandomFloatFromStream(Stream: RandomStream): number;
	static RandomFloat(): number;
	static RandomBoolWithWeightFromStream(Weight: number,RandomStream: RandomStream): boolean;
	static RandomBoolWithWeight(Weight: number): boolean;
	static RandomBoolFromStream(Stream: RandomStream): boolean;
	static RandomBool(): boolean;
	static RadiansToDegrees(A: number): number;
	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
	static PointsAreCoplanar(Points: Vector[],Tolerance: number): boolean;
	static Percent_IntInt(A: number,B: number): number;
	static Percent_FloatFloat(A: number,B: number): number;
	static Percent_ByteByte(A: number,B: number): number;
	static BitwiseOR(A: number,B: number): number;
	static Now(): DateTime;
	static NotEqual(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static NotEqual(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static NotEqual(A: Timespan,B: Timespan): boolean;
	static NotEqual(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static NotEqual(A: UObject,B: UObject): boolean;
	static NotEqual(A: string,B: string): boolean;
	static NotEqual(A: number,B: number): boolean;
	static NotEqual(A: number,B: number): boolean;
	static NotEqual(A: DateTime,B: DateTime): boolean;
	static NotEqual(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static NotEqual(A: number,B: number): boolean;
	static NotEqualBoolean(A: boolean,B: boolean): boolean;
	static NOTBoolean(A: boolean): boolean;
	static BitwiseNOT(A: number): number;
	static NormalizeToRange(Value: number,RangeMin: number,RangeMax: number): number;
	static Delta(A: Rotator,B: Rotator): Rotator;
	static NormalizeAxis(Angle: number): number;
	static Normalize2D(A: Vector2D): Vector2D;
	static Normalize(A: Vector): Vector;
	static NegateVector(A: Vector): Vector;
	static InvertRotator(A: Rotator): Rotator;
	static NearlyEqual(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
	static NearlyEqual(A: number,B: number,ErrorTolerance: number): boolean;
	static Power(Base: number,Exp: number): number;
	static MultiplyByPi(Value: number): number;
	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
	static Multiply_VectorInt(A: Vector,B: number): Vector;
	static Multiply_VectorFloat(A: Vector,B: number): Vector;
	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Multiply_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static ScaleRotator(A: Rotator,B: number): Rotator;
	static ScaleRotator(A: Rotator,B: number): Rotator;
	static Multiply_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Multiply_LinearColorFloat(A: LinearColor,B: number): LinearColor;
	static Multiply_IntInt(A: number,B: number): number;
	static Multiply_IntFloat(A: number,B: number): number;
	static Multiply_FloatFloat(A: number,B: number): number;
	static Multiply_ByteByte(A: number,B: number): number;
	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
	static MinOfIntArray(IntArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfFloatArray(FloatArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfByteArray(ByteArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
	static Min(A: number,B: number): number;
	static MaxOfIntArray(IntArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfFloatArray(FloatArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfByteArray(ByteArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static Max(A: number,B: number): number;
	static MapRangeUnclamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
	static MapRangeClamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
	static MakeVector2D(X: number,Y: number): Vector2D;
	static MakeVector(X: number,Y: number,Z: number): Vector;
	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
	static MakeTimespan(Days: number,Hours: number,Minutes: number,Seconds: number,Milliseconds: number): Timespan;
	static MakeRotFromZY(Z: Vector,Y: Vector): Rotator;
	static MakeRotFromZX(Z: Vector,X: Vector): Rotator;
	static MakeRotFromZ(Z: Vector): Rotator;
	static MakeRotFromYZ(Y: Vector,Z: Vector): Rotator;
	static MakeRotFromYX(Y: Vector,X: Vector): Rotator;
	static MakeRotFromY(Y: Vector): Rotator;
	static MakeRotFromXZ(X: Vector,Z: Vector): Rotator;
	static MakeRotFromXY(X: Vector,Y: Vector): Rotator;
	static MakeRotFromX(X: Vector): Rotator;
	static MakeRotator(Roll: number,Pitch: number,Yaw: number): Rotator;
	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
	static MakeRandomStream(InitialSeed: number): RandomStream;
	static MakePulsatingValue(InCurrentTime: number,InPulsesPerSecond: number,InPhase: number): number;
	static MakePlaneFromPointAndNormal(Point: Vector,Normal: Vector): Plane;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static MakeColor(R: number,G: number,B: number,A: number): LinearColor;
	static MakeBox2D(Min: Vector2D,Max: Vector2D): Box2D;
	static MakeBox(Min: Vector,Max: Vector): Box;
	static Loge(A: number): number;
	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LerpUsingHSV(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static Lerp(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static UnrotateVector(A: Vector,B: Rotator): Vector;
	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static LessEqual_IntInt(A: number,B: number): boolean;
	static LessEqual_FloatFloat(A: number,B: number): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_ByteByte(A: number,B: number): boolean;
	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Less_IntInt(A: number,B: number): boolean;
	static Less_FloatFloat(A: number,B: number): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Less_ByteByte(A: number,B: number): boolean;
	static Lerp(A: number,B: number,Alpha: number): number;
	static IsPointInBoxWithTransform(Point: Vector,BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
	static IsPointInBox(Point: Vector,BoxOrigin: Vector,BoxExtent: Vector): boolean;
	static IsMorning(A: DateTime): boolean;
	static IsLeapYear(Year: number): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static InvertTransform(T: Transform): Transform;
	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
	static InverseLerp(A: number,B: number,Value: number): number;
	static InRange(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static Hypotenuse(Width: number,Height: number): number;
	static HSVtoRGB(HSV: LinearColor,RGB?: LinearColor): {RGB: LinearColor};
	static HSVToRGB(H: number,S: number,V: number,A: number): LinearColor;
	static Snaptogrid(Location: number,GridSize: number): number;
	static RotateVector(A: Vector,B: Rotator): Vector;
	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static GreaterEqual_IntInt(A: number,B: number): boolean;
	static GreaterEqual_FloatFloat(A: number,B: number): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_ByteByte(A: number,B: number): boolean;
	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Greater_IntInt(A: number,B: number): boolean;
	static Greater_FloatFloat(A: number,B: number): boolean;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Greater_ByteByte(A: number,B: number): boolean;
	static GetYear(A: DateTime): number;
	static GetYawPitchFromVector(InVec: Vector,Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
	static GetVectorArrayAverage(Vectors: Vector[]): Vector;
	static GetUpVector(InRot: Rotator): Vector;
	static GetTotalSeconds(A: Timespan): number;
	static GetTotalMinutes(A: Timespan): number;
	static GetTotalMilliseconds(A: Timespan): number;
	static GetTotalHours(A: Timespan): number;
	static GetTotalDays(A: Timespan): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetTAU(): number;
	static GetSeconds(A: Timespan): number;
	static GetSecond(A: DateTime): number;
	static GetRightVector(InRot: Rotator): Vector;
	static GetReflectionVector(Direction: Vector,SurfaceNormal: Vector): Vector;
	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
	static GetPointDistanceToLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): number;
	static GetPI(): number;
	static GetMonth(A: DateTime): number;
	static GetMinutes(A: Timespan): number;
	static GetMinute(A: DateTime): number;
	static GetMinElement(A: Vector): number;
	static GetMilliseconds(A: Timespan): number;
	static GetMillisecond(A: DateTime): number;
	static GetMaxElement(A: Vector): number;
	static GetHours(A: Timespan): number;
	static GetHour12(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetForwardVector(InRot: Rotator): Vector;
	static GetDuration(A: Timespan): Timespan;
	static GetUnitDirectionVector(From: Vector,To: Vector): Vector;
	static GetDays(A: Timespan): number;
	static GetDayOfYear(A: DateTime): number;
	static GetDay(A: DateTime): number;
	static GetDate(A: DateTime): DateTime;
	static GetAxes(A: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static TruncateVector(InVector: Vector): IntVector;
	static Truncate(A: number): number;
	static FromSeconds(Seconds: number): Timespan;
	static FromMinutes(Minutes: number): Timespan;
	static FromMilliseconds(Milliseconds: number): Timespan;
	static FromHours(Hours: number): Timespan;
	static FromDays(Days: number): Timespan;
	static Fraction(A: number): number;
	static Division(Dividend: number,Divisor: number,Remainder?: number): {Remainder: number, $: number};
	static Min(A: number,B: number): number;
	static Max(A: number,B: number): number;
	static FloatSpringInterp(Current: number,Target: number,SpringState?: FloatSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: FloatSpringState, $: number};
	static FixedTurn(InCurrent: number,InDesired: number,InDeltaRate: number): number;
	static FInterpTo_Constant(Current: number,Target: number,DeltaTime: number,InterpSpeed: number): number;
	static FInterpTo(Current: number,Target: number,DeltaTime: number,InterpSpeed: number): number;
	static FInterpEaseInOut(A: number,B: number,Alpha: number,Exponent: number): number;
	static FindNearestPointsOnLineSegments(Segment1Start: Vector,Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
	static Floor(A: number): number;
	static Clamp(Value: number,Min: number,Max: number): number;
	static FCeil(A: number): number;
	static Exp(A: number): number;
	static Equal(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static Equal(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static EqualTransform(A: Transform,B: Transform): boolean;
	static Equal(A: Timespan,B: Timespan): boolean;
	static Equal(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static Equal(A: UObject,B: UObject): boolean;
	static Equal(A: string,B: string): boolean;
	static Equal(A: number,B: number): boolean;
	static Equal(A: number,B: number): boolean;
	static Equal(A: DateTime,B: DateTime): boolean;
	static Equal(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static Equal(A: number,B: number): boolean;
	static EqualBoolean(A: boolean,B: boolean): boolean;
	static Ease(A: number,B: number,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): number;
	static DotProduct(A: Vector2D,B: Vector2D): number;
	static DotProduct(A: Vector,B: Vector): number;
	static Divide_VectorVector(A: Vector,B: Vector): Vector;
	static Divide_VectorInt(A: Vector,B: number): Vector;
	static Divide_VectorFloat(A: Vector,B: number): Vector;
	static Divide_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Divide_IntInt(A: number,B: number): number;
	static Divide_FloatFloat(A: number,B: number): number;
	static Divide_ByteByte(A: number,B: number): number;
	static Tan(A: number): number;
	static Sin(A: number): number;
	static DegreesToRadians(A: number): number;
	static Cos(A: number): number;
	static Atan2(A: number,B: number): number;
	static Atan(A: number): number;
	static Asin(A: number): number;
	static Acos(A: number): number;
	static DaysInYear(Year: number): number;
	static DaysInMonth(Year: number,Month: number): number;
	static MinValue(): DateTime;
	static MaxValue(): DateTime;
	static DateTimeFromString(DateTimeString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static DateTimeFromIsoString(IsoString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static CrossProduct(A: Vector2D,B: Vector2D): number;
	static CrossProduct(A: Vector,B: Vector): Vector;
	static CreateVectorFromYawPitch(Yaw: number,Pitch: number,Length: number): Vector;
	static Cos(A: number): number;
	static ConvertTransformToRelative(Transform: Transform,ParentTransform: Transform): Transform;
	static ToVector2D(InVector: Vector): Vector2D;
	static ToTransform(InLocation: Vector): Transform;
	static RotationFromXVector(InVec: Vector): Rotator;
	static ToLinearColor(InVec: Vector): LinearColor;
	static ToVector(InVector2D: Vector2D,Z: number): Vector;
	static GetRotationXVector(InRot: Rotator): Vector;
	static ToVector(InLinearColor: LinearColor): Vector;
	static ToColor(InLinearColor: LinearColor): Color;
	static ToVector(InIntVector: IntVector): Vector;
	static ToIntVector(InInt: number): IntVector;
	static ToFloat(InInt: number): number;
	static ToByte(InInt: number): number;
	static ToBool(InInt: number): boolean;
	static ToVector(InFloat: number): Vector;
	static ToLinearColor(InFloat: number): LinearColor;
	static ToLinearColor(InColor: Color): LinearColor;
	static ToInt(InByte: number): number;
	static ToFloat(InByte: number): number;
	static ToInt(InBool: boolean): number;
	static ToFloat(InBool: boolean): number;
	static ToByte(InBool: boolean): number;
	static ComposeTransforms(A: Transform,B: Transform): Transform;
	static CombineRotators(A: Rotator,B: Rotator): Rotator;
	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
	static ClampVectorSize(A: Vector,Min: number,Max: number): Vector;
	static ClampAxis(Angle: number): number;
	static ClampAngle(AngleDegrees: number,MinAngleDegrees: number,MaxAngleDegrees: number): number;
	static Clamp(Value: number,Min: number,Max: number): number;
	static CInterpTo(Current: LinearColor,Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
	static BreakVector2D(InVec: Vector2D,X?: number,Y?: number): {X: number, Y: number};
	static BreakVector(InVec: Vector,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
	static BreakTimespan(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	static BreakRotIntoAxes(InRot: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static BreakRotator(InRot: Rotator,Roll?: number,Pitch?: number,Yaw?: number): {Roll: number, Pitch: number, Yaw: number};
	static BreakRandomStream(InRandomStream: RandomStream,InitialSeed?: number): {InitialSeed: number};
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static BreakColor(InColor: LinearColor,R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
	static XORBoolean(A: boolean,B: boolean): boolean;
	static ORBoolean(A: boolean,B: boolean): boolean;
	static NORBoolean(A: boolean,B: boolean): boolean;
	static NANDBoolean(A: boolean,B: boolean): boolean;
	static ANDBoolean(A: boolean,B: boolean): boolean;
	static Min(A: number,B: number): number;
	static Max(A: number,B: number): number;
	static Atan2(A: number,B: number): number;
	static Atan(A: number): number;
	static Asin(A: number): number;
	static BitwiseAND(A: number,B: number): number;
	static Add_VectorVector(A: Vector,B: Vector): Vector;
	static Add_VectorInt(A: Vector,B: number): Vector;
	static Add_VectorFloat(A: Vector,B: number): Vector;
	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Add_Vector2DFloat(A: Vector2D,B: number): Vector2D;
	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Add_IntInt(A: number,B: number): number;
	static Add_FloatFloat(A: number,B: number): number;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Add_ByteByte(A: number,B: number): number;
	static Acos(A: number): number;
	static Absolute(A: number): number;
	static Absolute(A: number): number;
	static C(Other: UObject): KismetMathLibrary;
}

declare class KismetNodeHelperLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetNodeHelperLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetNodeHelperLibrary;
	static GetDefaultObject(): KismetNodeHelperLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetNodeHelperLibrary;
	static MarkBit(Data?: number,Index?: number): {Data: number};
	static HasUnmarkedBit(Data: number,NumBits: number): boolean;
	static HasMarkedBit(Data: number,NumBits: number): boolean;
	static GetValidValue(Enum: Enum,EnumeratorValue: number): number;
	static GetUnmarkedBit(Data: number,StartIdx: number,NumBits: number,bRandom: boolean): number;
	static GetRandomUnmarkedBit(Data: number,StartIdx: number,NumBits: number): number;
	static GetFirstUnmarkedBit(Data: number,StartIdx: number,NumBits: number): number;
	static GetEnumeratorValueFromIndex(Enum: Enum,EnumeratorIndex: number): number;
	static GetEnumeratorUserFriendlyName(Enum: Enum,EnumeratorValue: number): string;
	static GetEnumeratorName(Enum: Enum,EnumeratorValue: number): string;
	static ClearBit(Data?: number,Index?: number): {Data: number};
	static ClearAllBits(Data?: number): {Data: number};
	static BitIsMarked(Data: number,Index: number): boolean;
	static C(Other: UObject): KismetNodeHelperLibrary;
}

declare class KismetRenderingLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetRenderingLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetRenderingLibrary;
	static GetDefaultObject(): KismetRenderingLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetRenderingLibrary;
	static ExportTexture2D(WorldContextObject: UObject,Texture: Texture2D,FilePath: string,FileName: string): void;
	static ExportRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,FilePath: string,FileName: string): void;
	static EndDrawCanvasToRenderTarget(WorldContextObject: UObject,Context: DrawToRenderTargetContext): void;
	static DrawMaterialToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number): TextureRenderTarget2D;
	static ClearRenderTarget2D(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
	static BeginDrawCanvasToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
	static C(Other: UObject): KismetRenderingLibrary;
}

declare type ESearchCase = 'CaseSensitive' | 'IgnoreCase';
declare var ESearchCase : { CaseSensitive:'CaseSensitive',IgnoreCase:'IgnoreCase', };
declare type ESearchDir = 'FromStart' | 'FromEnd';
declare var ESearchDir : { FromStart:'FromStart',FromEnd:'FromEnd', };
declare class KismetStringLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetStringLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetStringLibrary;
	static GetDefaultObject(): KismetStringLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetStringLibrary;
	static TrimTrailing(SourceString: string): string;
	static Trim(SourceString: string): string;
	static ToUpper(SourceString: string): string;
	static ToLower(SourceString: string): string;
	static TimeSecondsToString(InSeconds: number): string;
	static StartsWith(SourceString: string,InPrefix: string,SearchCase: ESearchCase): boolean;
	static Split(SourceString: string,InStr: string,LeftS?: string,RightS?: string,SearchCase?: ESearchCase,SearchDir?: ESearchDir): {LeftS: string, RightS: string, $: boolean};
	static RightPad(SourceString: string,ChCount: number): string;
	static RightChop(SourceString: string,Count: number): string;
	static Right(SourceString: string,Count: number): string;
	static Reverse(SourceString: string): string;
	static ReplaceInline(SourceString?: string,SearchText?: string,ReplacementText?: string,SearchCase?: ESearchCase): {SourceString: string, $: number};
	static Replace(SourceString: string,From: string,To: string,SearchCase: ESearchCase): string;
	static ParseIntoArray(SourceString: string,Delimiter: string,CullEmptyStrings: boolean): string[];
	static NotEqual(A: string,B: string): boolean;
	static NotEqual_StriStri(A: string,B: string): boolean;
	static Mid(SourceString: string,Start: number,Count: number): string;
	static MatchesWildcard(SourceString: string,Wildcard: string,SearchCase: ESearchCase): boolean;
	static Len(S: string): number;
	static LeftPad(SourceString: string,ChCount: number): string;
	static LeftChop(SourceString: string,Count: number): string;
	static Left(SourceString: string,Count: number): string;
	static JoinStringArray(SourceArray: string[],Separator: string): string;
	static IsNumeric(SourceString: string): boolean;
	static GetSubstring(SourceString: string,StartIndex: number,Length: number): string;
	static GetCharacterAsNumber(SourceString: string,Index: number): number;
	static GetCharacterArrayFromString(SourceString: string): string[];
	static FindSubstring(SearchIn: string,Substring: string,bUseCase: boolean,bSearchFromEnd: boolean,StartPosition: number): number;
	static Equal(A: string,B: string): boolean;
	static EqualEqual_StriStri(A: string,B: string): boolean;
	static EndsWith(SourceString: string,InSuffix: string,SearchCase: ESearchCase): boolean;
	static CullArray(SourceString: string,InArray?: string[]): {InArray: string[], $: number};
	static ToString(InVec: Vector): string;
	static ToString(InVec: Vector2D): string;
	static ToString(InTrans: Transform): string;
	static StringtoVector2D(InString: string,OutConvertedVector2D?: Vector2D,OutIsValid?: boolean): {OutConvertedVector2D: Vector2D, OutIsValid: boolean};
	static StringtoVector(InString: string,OutConvertedVector?: Vector,OutIsValid?: boolean): {OutConvertedVector: Vector, OutIsValid: boolean};
	static StringtoRotator(InString: string,OutConvertedRotator?: Rotator,OutIsValid?: boolean): {OutConvertedRotator: Rotator, OutIsValid: boolean};
	static StringToName(InString: string): string;
	static StringToInt(InString: string): number;
	static StringToFloat(InString: string): number;
	static StringtoColor(InString: string,OutConvertedColor?: LinearColor,OutIsValid?: boolean): {OutConvertedColor: LinearColor, OutIsValid: boolean};
	static ToString(InRot: Rotator): string;
	static ToString(InObj: UObject): string;
	static ToString(InName: string): string;
	static ToString(InIntVec: IntVector): string;
	static ToString(InInt: number): string;
	static ToString(InFloat: number): string;
	static ToString(InColor: LinearColor): string;
	static ToString(InByte: number): string;
	static ToString(InBool: boolean): string;
	static Contains(SearchIn: string,Substring: string,bUseCase: boolean,bSearchFromEnd: boolean): boolean;
	static Append(A: string,B: string): string;
	static BuildString(AppendTo: string,Prefix: string,InVector2d: Vector2D,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InVector: Vector,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InRot: Rotator,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InObj: UObject,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InName: string,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InIntVector: IntVector,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InInt: number,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InFloat: number,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InColor: LinearColor,Suffix: string): string;
	static BuildString(AppendTo: string,Prefix: string,InBool: boolean,Suffix: string): string;
	static C(Other: UObject): KismetStringLibrary;
}

declare type EFormatArgumentType = 'Int' | 'UInt' | 'Float' | 'Double' | 'Text' | 'Gender';
declare var EFormatArgumentType : { Int:'Int',UInt:'UInt',Float:'Float',Double:'Double',Text:'Text',Gender:'Gender', };
declare type ETextGender = 'Masculine' | 'Feminine' | 'Neuter';
declare var ETextGender : { Masculine:'Masculine',Feminine:'Feminine',Neuter:'Neuter', };
declare class FormatArgumentData { 
	ArgumentName: string;
	ArgumentValueType: EFormatArgumentType;
	ArgumentValue: string;
	ArgumentValueInt: number;
	ArgumentValueFloat: number;
	ArgumentValueGender: ArgumentValueGender;
	clone() : FormatArgumentData;
	static C(Other: UObject): FormatArgumentData;
}

declare type ERoundingMode = 'HalfToEven' | 'HalfFromZero' | 'HalfToZero' | 'FromZero' | 'ToZero' | 'ToNegativeInfinity' | 'ToPositiveInfinity';
declare var ERoundingMode : { HalfToEven:'HalfToEven',HalfFromZero:'HalfFromZero',HalfToZero:'HalfToZero',FromZero:'FromZero',ToZero:'ToZero',ToNegativeInfinity:'ToNegativeInfinity',ToPositiveInfinity:'ToPositiveInfinity', };
declare class KismetTextLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetTextLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetTextLibrary;
	static GetDefaultObject(): KismetTextLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetTextLibrary;
	static TextTrimTrailing(InText: string): string;
	static TextTrimPrecedingAndTrailing(InText: string): string;
	static TextTrimPreceding(InText: string): string;
	static TextIsTransient(InText: string): boolean;
	static TextIsEmpty(InText: string): boolean;
	static TextIsCultureInvariant(InText: string): boolean;
	static NotEqual(A: string,B: string): boolean;
	static NotEqual_IgnoreCase_TextText(A: string,B: string): boolean;
	static GetEmptyText(): string;
	static Format(InPattern: string,InArgs: FormatArgumentData[]): string;
	static FindTextInLocalizationTable(Namespace: string,Key: string,OutText?: string): {OutText: string, $: boolean};
	static Equal(A: string,B: string): boolean;
	static EqualEqual_IgnoreCase_TextText(A: string,B: string): boolean;
	static ToText(InVec: Vector): string;
	static ToText(InVec: Vector2D): string;
	static ToText(InTrans: Transform): string;
	static ToString(InText: string): string;
	static ToText(InString: string): string;
	static ToText(InRot: Rotator): string;
	static ToText(InObj: UObject): string;
	static ToText(InName: string): string;
	static ToText(Value: number,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number): string;
	static ToText(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
	static ToText(InColor: LinearColor): string;
	static ToText(Value: number): string;
	static ToText(InBool: boolean): string;
	static AsTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsDateTime(InDateTime: DateTime,InTimeZone: string): string;
	static AsDate(InDateTime: DateTime,InTimeZone: string): string;
	static AsTimespan(InTimespan: Timespan): string;
	static AsTime(In: DateTime): string;
	static AsPercent(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
	static AsDateTime(In: DateTime): string;
	static AsDate(InDateTime: DateTime): string;
	static AsCurrency(BaseValue: number,CurrencyCode: string): string;
	static AsCurrency(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number,CurrencyCode: string): string;
	static AsCurrency(Value: number,RoundingMode: ERoundingMode,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number,CurrencyCode: string): string;
	static C(Other: UObject): KismetTextLibrary;
}

declare class MeshVertexPainterKismetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MeshVertexPainterKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): MeshVertexPainterKismetLibrary;
	static GetDefaultObject(): MeshVertexPainterKismetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshVertexPainterKismetLibrary;
	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: Axis,bConvertToSRGB: boolean): void;
	static C(Other: UObject): MeshVertexPainterKismetLibrary;
}

declare class StereoLayerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): StereoLayerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): StereoLayerFunctionLibrary;
	static GetDefaultObject(): StereoLayerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerFunctionLibrary;
	static ShowSplashScreen(): void;
	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector2D,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
	static HideSplashScreen(): void;
	static EnableAutoLoadingSplashScreen(InAutoShowEnabled: boolean): void;
	static C(Other: UObject): StereoLayerFunctionLibrary;
}

declare class VisualLoggerKismetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VisualLoggerKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerKismetLibrary;
	static GetDefaultObject(): VisualLoggerKismetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerKismetLibrary;
	static LogText(WorldContextObject: UObject,Text: string,LogCategory: string): void;
	static LogLocation(WorldContextObject: UObject,Location: Vector,Text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string): void;
	static LogBoxShape(WorldContextObject: UObject,BoxShape: Box,Text: string,ObjectColor: LinearColor,LogCategory: string): void;
	static C(Other: UObject): VisualLoggerKismetLibrary;
}

declare class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	RootAnimNodeIndex: number;
	OrderedSavedPoseIndices: number[];
	SyncGroupNames: string[];
	static Load(ResourceName: string): AnimBlueprintGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintGeneratedClass;
	static GetDefaultObject(): AnimBlueprintGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintGeneratedClass;
	static C(Other: UObject): AnimBlueprintGeneratedClass;
}

declare class CircleElement2D { 
	Center: Vector2D;
	Radius: number;
	clone() : CircleElement2D;
	static C(Other: UObject): CircleElement2D;
}

declare class BoxElement2D { 
	Center: Vector2D;
	Width: number;
	Height: number;
	Angle: number;
	clone() : BoxElement2D;
	static C(Other: UObject): BoxElement2D;
}

declare class ConvexElement2D { 
	VertexData: Vector2D[];
	clone() : ConvexElement2D;
	static C(Other: UObject): ConvexElement2D;
}

declare class AggregateGeometry2D { 
	CircleElements: CircleElement2D[];
	BoxElements: BoxElement2D[];
	ConvexElements: ConvexElement2D[];
	clone() : AggregateGeometry2D;
	static C(Other: UObject): AggregateGeometry2D;
}

declare class BodySetup2D extends BodySetup { 
	AggGeom2D: AggregateGeometry2D;
	static Load(ResourceName: string): BodySetup2D;
	static Find(Outer: UObject, ResourceName: string): BodySetup2D;
	static GetDefaultObject(): BodySetup2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BodySetup2D;
	static C(Other: UObject): BodySetup2D;
}

declare class BoneMaskFilter extends UObject { 
	BlendPoses: InputBlendPose[];
	static Load(ResourceName: string): BoneMaskFilter;
	static Find(Outer: UObject, ResourceName: string): BoneMaskFilter;
	static GetDefaultObject(): BoneMaskFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneMaskFilter;
	static C(Other: UObject): BoneMaskFilter;
}

declare class BookMark2D extends UObject { 
	Zoom2D: number;
	Location: IntPoint;
	static Load(ResourceName: string): BookMark2D;
	static Find(Outer: UObject, ResourceName: string): BookMark2D;
	static GetDefaultObject(): BookMark2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookMark2D;
	static C(Other: UObject): BookMark2D;
}

declare class ButtonStyleAsset extends UObject { 
	ButtonStyle: ButtonStyle;
	static Load(ResourceName: string): ButtonStyleAsset;
	static Find(Outer: UObject, ResourceName: string): ButtonStyleAsset;
	static GetDefaultObject(): ButtonStyleAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonStyleAsset;
	static C(Other: UObject): ButtonStyleAsset;
}

declare class ActorChannel extends Channel { 
	Actor: Actor;
	static Load(ResourceName: string): ActorChannel;
	static Find(Outer: UObject, ResourceName: string): ActorChannel;
	static GetDefaultObject(): ActorChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorChannel;
	static C(Other: UObject): ActorChannel;
}

declare class ControlChannel extends Channel { 
	static Load(ResourceName: string): ControlChannel;
	static Find(Outer: UObject, ResourceName: string): ControlChannel;
	static GetDefaultObject(): ControlChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlChannel;
	static C(Other: UObject): ControlChannel;
}

declare class VoiceChannel extends Channel { 
	static Load(ResourceName: string): VoiceChannel;
	static Find(Outer: UObject, ResourceName: string): VoiceChannel;
	static GetDefaultObject(): VoiceChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VoiceChannel;
	static C(Other: UObject): VoiceChannel;
}

declare class CheckBoxStyleAsset extends UObject { 
	CheckBoxStyle: CheckBoxStyle;
	static Load(ResourceName: string): CheckBoxStyleAsset;
	static Find(Outer: UObject, ResourceName: string): CheckBoxStyleAsset;
	static GetDefaultObject(): CheckBoxStyleAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBoxStyleAsset;
	static C(Other: UObject): CheckBoxStyleAsset;
}

declare class PluginCommandlet extends Commandlet { 
	static Load(ResourceName: string): PluginCommandlet;
	static Find(Outer: UObject, ResourceName: string): PluginCommandlet;
	static GetDefaultObject(): PluginCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginCommandlet;
	static C(Other: UObject): PluginCommandlet;
}

declare class SmokeTestCommandlet extends Commandlet { 
	static Load(ResourceName: string): SmokeTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): SmokeTestCommandlet;
	static GetDefaultObject(): SmokeTestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SmokeTestCommandlet;
	static C(Other: UObject): SmokeTestCommandlet;
}

declare class CurveEdPresetCurve extends UObject { 
	static Load(ResourceName: string): CurveEdPresetCurve;
	static Find(Outer: UObject, ResourceName: string): CurveEdPresetCurve;
	static GetDefaultObject(): CurveEdPresetCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdPresetCurve;
	static C(Other: UObject): CurveEdPresetCurve;
}

declare class NamedCurveValue { 
	Name: string;
	Value: number;
	clone() : NamedCurveValue;
	static C(Other: UObject): NamedCurveValue;
}

declare class CurveSourceInterface extends Interface { 
	static Load(ResourceName: string): CurveSourceInterface;
	static Find(Outer: UObject, ResourceName: string): CurveSourceInterface;
	static GetDefaultObject(): CurveSourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveSourceInterface;
	GetCurveValue(CurveName: string): number;
	GetCurves(OutValues?: NamedCurveValue[]): {OutValues: NamedCurveValue[]};
	GetBindingName(): string;
	static C(Other: UObject): CurveSourceInterface;
}

declare class PreviewMeshCollectionEntry { 
	SkeletalMesh: any;
	clone() : PreviewMeshCollectionEntry;
	static C(Other: UObject): PreviewMeshCollectionEntry;
}

declare class PreviewMeshCollection extends DataAsset { 
	Skeleton: Skeleton;
	SkeletalMeshes: PreviewMeshCollectionEntry[];
	static Load(ResourceName: string): PreviewMeshCollection;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollection;
	static GetDefaultObject(): PreviewMeshCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollection;
	static C(Other: UObject): PreviewMeshCollection;
}

declare class AnimationSettings extends DeveloperSettings { 
	CompressCommandletVersion: number;
	KeyEndEffectorsMatchNameArray: string[];
	DefaultCompressionAlgorithm: UnrealEngineClass;
	RotationCompressionFormat: AnimationCompressionFormat;
	TranslationCompressionFormat: AnimationCompressionFormat;
	AlternativeCompressionThreshold: number;
	ForceRecompression: boolean;
	bOnlyCheckForMissingSkeletalMeshes: boolean;
	bForceBelowThreshold: boolean;
	bFirstRecompressUsingCurrentOrDefault: boolean;
	bRaiseMaxErrorToExisting: boolean;
	bTryFixedBitwiseCompression: boolean;
	bTryPerTrackBitwiseCompression: boolean;
	bTryLinearKeyRemovalCompression: boolean;
	bTryIntervalKeyRemoval: boolean;
	bEnablePerformanceLog: boolean;
	bStripAnimationDataOnDedicatedServer: boolean;
	static Load(ResourceName: string): AnimationSettings;
	static Find(Outer: UObject, ResourceName: string): AnimationSettings;
	static GetDefaultObject(): AnimationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSettings;
	static C(Other: UObject): AnimationSettings;
}

declare class AudioQualitySettings { 
	DisplayName: string;
	MaxChannels: number;
	clone() : AudioQualitySettings;
	static C(Other: UObject): AudioQualitySettings;
}

declare class AudioSettings extends DeveloperSettings { 
	DefaultSoundClassName: StringAssetReference;
	DefaultSoundConcurrencyName: StringAssetReference;
	DefaultBaseSoundMix: StringAssetReference;
	VoiPSoundClass: StringAssetReference;
	LowPassFilterResonance: number;
	MaximumConcurrentStreams: number;
	QualityLevels: AudioQualitySettings[];
	bAllowVirtualizedSounds: boolean;
	bDisableMasterEQ: boolean;
	bDisableMasterReverb: boolean;
	bAllowCenterChannel3DPanning: boolean;
	DialogueFilenameFormat: string;
	static Load(ResourceName: string): AudioSettings;
	static Find(Outer: UObject, ResourceName: string): AudioSettings;
	static GetDefaultObject(): AudioSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioSettings;
	static C(Other: UObject): AudioSettings;
}

declare class CollisionResponseTemplate { 
	Name: string;
	CollisionEnabled: ECollisionEnabled;
	ObjectTypeName: string;
	CustomResponses: ResponseChannel[];
	HelpMessage: string;
	bCanModify: boolean;
	clone() : CollisionResponseTemplate;
	static C(Other: UObject): CollisionResponseTemplate;
}

declare class CustomChannelSetup { 
	Channel: ECollisionChannel;
	Name: string;
	DefaultResponse: ECollisionResponse;
	bTraceType: boolean;
	bStaticObject: boolean;
	clone() : CustomChannelSetup;
	static C(Other: UObject): CustomChannelSetup;
}

declare class CustomProfile { 
	Name: string;
	CustomResponses: ResponseChannel[];
	clone() : CustomProfile;
	static C(Other: UObject): CustomProfile;
}

declare class Redirector { 
	OldName: string;
	NewName: string;
	clone() : Redirector;
	static C(Other: UObject): Redirector;
}

declare class CollisionProfile extends DeveloperSettings { 
	Profiles: CollisionResponseTemplate[];
	DefaultChannelResponses: CustomChannelSetup[];
	EditProfiles: CustomProfile[];
	ProfileRedirects: Redirector[];
	CollisionChannelRedirects: Redirector[];
	static Load(ResourceName: string): CollisionProfile;
	static Find(Outer: UObject, ResourceName: string): CollisionProfile;
	static GetDefaultObject(): CollisionProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CollisionProfile;
	static C(Other: UObject): CollisionProfile;
}

declare class StreamingSettings extends DeveloperSettings { 
	AsyncLoadingThreadEnabled: boolean;
	WarnIfTimeLimitExceeded: boolean;
	TimeLimitExceededMultiplier: number;
	TimeLimitExceededMinTime: number;
	MinBulkDataSizeForAsyncLoading: number;
	AsyncIOBandwidthLimit: number;
	UseBackgroundLevelStreaming: boolean;
	AsyncLoadingUseFullTimeLimit: boolean;
	AsyncLoadingTimeLimit: number;
	PriorityAsyncLoadingExtraTime: number;
	LevelStreamingActorsUpdateTimeLimit: number;
	LevelStreamingComponentsRegistrationGranularity: number;
	LevelStreamingUnregisterComponentsTimeLimit: number;
	LevelStreamingComponentsUnregistrationGranularity: number;
	EventDrivenLoaderEnabled: boolean;
	static Load(ResourceName: string): StreamingSettings;
	static Find(Outer: UObject, ResourceName: string): StreamingSettings;
	static GetDefaultObject(): StreamingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamingSettings;
	static C(Other: UObject): StreamingSettings;
}

declare class GarbageCollectionSettings extends DeveloperSettings { 
	TimeBetweenPurgingPendingKillObjects: number;
	FlushStreamingOnGC: boolean;
	AllowParallelGC: boolean;
	CreateGCClusters: boolean;
	MergeGCClusters: boolean;
	NumRetriesBeforeForcingGC: number;
	MaxObjectsNotConsideredByGC: number;
	SizeOfPermanentObjectPool: number;
	MaxObjectsInGame: number;
	MaxObjectsInEditor: number;
	static Load(ResourceName: string): GarbageCollectionSettings;
	static Find(Outer: UObject, ResourceName: string): GarbageCollectionSettings;
	static GetDefaultObject(): GarbageCollectionSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GarbageCollectionSettings;
	static C(Other: UObject): GarbageCollectionSettings;
}

declare class MeshSimplificationSettings extends DeveloperSettings { 
	MeshReductionModuleName: string;
	static Load(ResourceName: string): MeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): MeshSimplificationSettings;
	static GetDefaultObject(): MeshSimplificationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSimplificationSettings;
	static C(Other: UObject): MeshSimplificationSettings;
}

declare class NetworkSettings extends DeveloperSettings { 
	bVerifyPeer: boolean;
	bEnableMultiplayerWorldOriginRebasing: boolean;
	MaxRepArraySize: number;
	MaxRepArrayMemory: number;
	static Load(ResourceName: string): NetworkSettings;
	static Find(Outer: UObject, ResourceName: string): NetworkSettings;
	static GetDefaultObject(): NetworkSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkSettings;
	static C(Other: UObject): NetworkSettings;
}

declare type ESettingsLockedAxis = 'None' | 'X' | 'Y' | 'Z' | 'Invalid';
declare var ESettingsLockedAxis : { None:'None',X:'X',Y:'Y',Z:'Z',Invalid:'Invalid', };
declare type ESettingsDOF = 'Full3D' | 'YZPlane' | 'XZPlane' | 'XYPlane';
declare var ESettingsDOF : { Full3D:'Full3D',YZPlane:'YZPlane',XZPlane:'XZPlane',XYPlane:'XYPlane', };
declare class PhysicalSurfaceName { 
	Type: EPhysicalSurface;
	Name: string;
	clone() : PhysicalSurfaceName;
	static C(Other: UObject): PhysicalSurfaceName;
}

declare class PhysicsSettings extends DeveloperSettings { 
	DefaultGravityZ: number;
	DefaultTerminalVelocity: number;
	DefaultFluidFriction: number;
	SimulateScratchMemorySize: number;
	RagdollAggregateThreshold: number;
	TriangleMeshTriangleMinAreaThreshold: number;
	bEnableAsyncScene: boolean;
	bEnableShapeSharing: boolean;
	bEnablePCM: boolean;
	bWarnMissingLocks: boolean;
	bEnable2DPhysics: boolean;
	LockedAxis: ESettingsLockedAxis;
	DefaultDegreesOfFreedom: ESettingsDOF;
	BounceThresholdVelocity: number;
	FrictionCombineMode: EFrictionCombineMode;
	RestitutionCombineMode: EFrictionCombineMode;
	MaxAngularVelocity: number;
	MaxDepenetrationVelocity: number;
	ContactOffsetMultiplier: number;
	MinContactOffset: number;
	MaxContactOffset: number;
	bSimulateSkeletalMeshOnDedicatedServer: boolean;
	DefaultShapeComplexity: ECollisionTraceFlag;
	bDefaultHasComplexCollision: boolean;
	bSuppressFaceRemapTable: boolean;
	bSupportUVFromHitResults: boolean;
	bDisableActiveActors: boolean;
	bDisableCCD: boolean;
	MaxPhysicsDeltaTime: number;
	bSubstepping: boolean;
	bSubsteppingAsync: boolean;
	MaxSubstepDeltaTime: number;
	MaxSubsteps: number;
	SyncSceneSmoothingFactor: number;
	AsyncSceneSmoothingFactor: number;
	InitialAverageFrameRate: number;
	PhysicalSurfaces: PhysicalSurfaceName[];
	static Load(ResourceName: string): PhysicsSettings;
	static Find(Outer: UObject, ResourceName: string): PhysicsSettings;
	static GetDefaultObject(): PhysicsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSettings;
	static C(Other: UObject): PhysicsSettings;
}

declare type EMobileMSAASampleCount = 'One' | 'Two' | 'Four' | 'Eight' | 'EMobileMSAASampleCount_MAX' | 'None';
declare var EMobileMSAASampleCount : { One:'One',Two:'Two',Four:'Four',Eight:'Eight',EMobileMSAASampleCount_MAX:'EMobileMSAASampleCount_MAX',None:'None', };
declare type ETranslucentSortPolicy = 'SortByDistance' | 'SortByProjectedZ' | 'SortAlongAxis';
declare var ETranslucentSortPolicy : { SortByDistance:'SortByDistance',SortByProjectedZ:'SortByProjectedZ',SortAlongAxis:'SortAlongAxis', };
declare type ECustomDepthStencil = 'Disabled' | 'Enabled' | 'EnabledOnDemand' | 'EnabledWithStencil';
declare var ECustomDepthStencil : { Disabled:'Disabled',Enabled:'Enabled',EnabledOnDemand:'EnabledOnDemand',EnabledWithStencil:'EnabledWithStencil', };
declare type EAutoExposureMethodUI = 'AEM_Histogram' | 'AEM_Basic';
declare var EAutoExposureMethodUI : { AEM_Histogram:'AEM_Histogram',AEM_Basic:'AEM_Basic', };
declare type EAntiAliasingMethod = 'AAM_None' | 'AAM_FXAA' | 'AAM_TemporalAA' | 'AAM_MSAA';
declare var EAntiAliasingMethod : { AAM_None:'AAM_None',AAM_FXAA:'AAM_FXAA',AAM_TemporalAA:'AAM_TemporalAA',AAM_MSAA:'AAM_MSAA', };
declare type EEarlyZPass = 'None' | 'OpaqueOnly' | 'OpaqueAndMasked' | 'Auto';
declare var EEarlyZPass : { None:'None',OpaqueOnly:'OpaqueOnly',OpaqueAndMasked:'OpaqueAndMasked',Auto:'Auto', };
declare type EClearSceneOptions = 'NoClear' | 'HardwareClear' | 'QuadAtMaxZ';
declare var EClearSceneOptions : { NoClear:'NoClear',HardwareClear:'HardwareClear',QuadAtMaxZ:'QuadAtMaxZ', };
declare type EGBufferFormat = 'Force8BitsPerChannel' | 'Default' | 'HighPrecisionNormals' | 'Force16BitsPerChannel' | 'EGBufferFormat_MAX' | 'None';
declare var EGBufferFormat : { Force8BitsPerChannel:'Force8BitsPerChannel',Default:'Default',HighPrecisionNormals:'HighPrecisionNormals',Force16BitsPerChannel:'Force16BitsPerChannel',EGBufferFormat_MAX:'EGBufferFormat_MAX',None:'None', };
declare class RendererSettings extends DeveloperSettings { 
	bMobileHDR: boolean;
	bMobileDisableVertexFog: boolean;
	MaxMobileCascades: number;
	MobileMSAASampleCount: EMobileMSAASampleCount;
	bDiscardUnusedQualityLevels: boolean;
	bOcclusionCulling: boolean;
	MinScreenRadiusForLights: number;
	MinScreenRadiusForEarlyZPass: number;
	MinScreenRadiusForCSMdepth: number;
	bPrecomputedVisibilityWarning: boolean;
	bTextureStreaming: boolean;
	bUseDXT5NormalMaps: boolean;
	bClearCoatEnableSecondNormal: boolean;
	ReflectionCaptureResolution: number;
	ReflectionEnvironmentLightmapMixBasedOnRoughness: boolean;
	bForwardShading: boolean;
	bVertexFoggingForOpaque: boolean;
	bAllowStaticLighting: boolean;
	bUseNormalMapsForStaticLighting: boolean;
	bGenerateMeshDistanceFields: boolean;
	bGenerateLandscapeGIData: boolean;
	TessellationAdaptivePixelsPerTriangle: number;
	bSeparateTranslucency: boolean;
	TranslucentSortPolicy: ETranslucentSortPolicy;
	TranslucentSortAxis: Vector;
	CustomDepthStencil: ECustomDepthStencil;
	bCustomDepthTaaJitter: boolean;
	bDefaultFeatureBloom: boolean;
	bDefaultFeatureAmbientOcclusion: boolean;
	bDefaultFeatureAmbientOcclusionStaticFraction: boolean;
	bDefaultFeatureAutoExposure: boolean;
	DefaultFeatureAutoExposure: EAutoExposureMethodUI;
	bDefaultFeatureMotionBlur: boolean;
	bDefaultFeatureLensFlare: boolean;
	DefaultFeatureAntiAliasing: EAntiAliasingMethod;
	bStencilForLODDither: boolean;
	EarlyZPass: EEarlyZPass;
	bEarlyZPassMovable: boolean;
	bEarlyZPassOnlyMaterialMasking: boolean;
	bDBuffer: boolean;
	ClearSceneMethod: EClearSceneOptions;
	bBasePassOutputsVelocity: boolean;
	bSelectiveBasePassOutputs: boolean;
	bDefaultParticleCutouts: boolean;
	bGlobalClipPlane: boolean;
	GBufferFormat: EGBufferFormat;
	bUseGPUMorphTargets: boolean;
	bInstancedStereo: boolean;
	bMultiView: boolean;
	bMobileMultiView: boolean;
	bMonoscopicFarField: boolean;
	WireframeCullThreshold: number;
	bSupportStationarySkylight: boolean;
	bSupportLowQualityLightmaps: boolean;
	bSupportPointLightWholeSceneShadows: boolean;
	bSupportAtmosphericFog: boolean;
	bSupportSkinCacheShaders: boolean;
	bMobileEnableStaticAndCSMShadowReceivers: boolean;
	bMobileAllowDistanceFieldShadows: boolean;
	bMobileAllowMovableDirectionalLights: boolean;
	MobileNumDynamicPointLights: any;
	bMobileDynamicPointLightsUseStaticBranch: boolean;
	static Load(ResourceName: string): RendererSettings;
	static Find(Outer: UObject, ResourceName: string): RendererSettings;
	static GetDefaultObject(): RendererSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererSettings;
	static C(Other: UObject): RendererSettings;
}

declare class RendererOverrideSettings extends DeveloperSettings { 
	bSupportAllShaderPermutations: boolean;
	static Load(ResourceName: string): RendererOverrideSettings;
	static Find(Outer: UObject, ResourceName: string): RendererOverrideSettings;
	static GetDefaultObject(): RendererOverrideSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererOverrideSettings;
	static C(Other: UObject): RendererOverrideSettings;
}

declare type ERenderFocusRule = 'Always' | 'NonPointer' | 'NavigationOnly' | 'Never';
declare var ERenderFocusRule : { Always:'Always',NonPointer:'NonPointer',NavigationOnly:'NavigationOnly',Never:'Never', };
declare type EUIScalingRule = 'ShortestSide' | 'LongestSide' | 'Horizontal' | 'Vertical' | 'Custom';
declare var EUIScalingRule : { ShortestSide:'ShortestSide',LongestSide:'LongestSide',Horizontal:'Horizontal',Vertical:'Vertical',Custom:'Custom', };
declare class DPICustomScalingRule extends UObject { 
	static Load(ResourceName: string): DPICustomScalingRule;
	static Find(Outer: UObject, ResourceName: string): DPICustomScalingRule;
	static GetDefaultObject(): DPICustomScalingRule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DPICustomScalingRule;
	static C(Other: UObject): DPICustomScalingRule;
}

declare class UserInterfaceSettings extends DeveloperSettings { 
	RenderFocusRule: RenderFocusRule;
	DefaultCursor: StringClassReference;
	TextEditBeamCursor: StringClassReference;
	CrosshairsCursor: StringClassReference;
	HandCursor: StringClassReference;
	GrabHandCursor: StringClassReference;
	GrabHandClosedCursor: StringClassReference;
	SlashedCircleCursor: StringClassReference;
	ApplicationScale: number;
	UIScaleRule: UIScaleRule;
	CustomScalingRuleClass: StringClassReference;
	UIScaleCurve: RuntimeFloatCurve;
	bLoadWidgetsOnDedicatedServer: boolean;
	CursorClasses: UObject[];
	CustomScalingRuleClassInstance: UnrealEngineClass;
	CustomScalingRule: DPICustomScalingRule;
	static Load(ResourceName: string): UserInterfaceSettings;
	static Find(Outer: UObject, ResourceName: string): UserInterfaceSettings;
	static GetDefaultObject(): UserInterfaceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserInterfaceSettings;
	static C(Other: UObject): UserInterfaceSettings;
}

declare class DeviceProfileManager extends UObject { 
	Profiles: UObject[];
	static Load(ResourceName: string): DeviceProfileManager;
	static Find(Outer: UObject, ResourceName: string): DeviceProfileManager;
	static GetDefaultObject(): DeviceProfileManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfileManager;
	static C(Other: UObject): DeviceProfileManager;
}

declare class DistributionFloatConstant extends DistributionFloat { 
	Constant: number;
	static Load(ResourceName: string): DistributionFloatConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstant;
	static GetDefaultObject(): DistributionFloatConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstant;
	static C(Other: UObject): DistributionFloatConstant;
}

declare type DistributionParamMode = 'DPM_Normal' | 'DPM_Abs' | 'DPM_Direct';
declare var DistributionParamMode : { DPM_Normal:'DPM_Normal',DPM_Abs:'DPM_Abs',DPM_Direct:'DPM_Direct', };
declare class DistributionFloatParameterBase extends DistributionFloatConstant { 
	ParameterName: string;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: DistributionParamMode;
	static Load(ResourceName: string): DistributionFloatParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParameterBase;
	static GetDefaultObject(): DistributionFloatParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParameterBase;
	static C(Other: UObject): DistributionFloatParameterBase;
}

declare class DistributionFloatParticleParameter extends DistributionFloatParameterBase { 
	static Load(ResourceName: string): DistributionFloatParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParticleParameter;
	static GetDefaultObject(): DistributionFloatParticleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParticleParameter;
	static C(Other: UObject): DistributionFloatParticleParameter;
}

declare class DistributionFloatConstantCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveFloat;
	static Load(ResourceName: string): DistributionFloatConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstantCurve;
	static GetDefaultObject(): DistributionFloatConstantCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstantCurve;
	static C(Other: UObject): DistributionFloatConstantCurve;
}

declare class DistributionFloatUniform extends DistributionFloat { 
	Min: number;
	Max: number;
	static Load(ResourceName: string): DistributionFloatUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniform;
	static GetDefaultObject(): DistributionFloatUniform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniform;
	static C(Other: UObject): DistributionFloatUniform;
}

declare class InterpCurvePointVector2D { 
	InVal: number;
	OutVal: Vector2D;
	ArriveTangent: Vector2D;
	LeaveTangent: Vector2D;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointVector2D;
	static C(Other: UObject): InterpCurvePointVector2D;
}

declare class InterpCurveVector2D { 
	Points: InterpCurvePointVector2D[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveVector2D;
	static C(Other: UObject): InterpCurveVector2D;
}

declare class DistributionFloatUniformCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveVector2D;
	static Load(ResourceName: string): DistributionFloatUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniformCurve;
	static GetDefaultObject(): DistributionFloatUniformCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniformCurve;
	static C(Other: UObject): DistributionFloatUniformCurve;
}

declare type EDistributionVectorLockFlags = 'EDVLF_None' | 'EDVLF_XY' | 'EDVLF_XZ' | 'EDVLF_YZ' | 'EDVLF_XYZ';
declare var EDistributionVectorLockFlags : { EDVLF_None:'EDVLF_None',EDVLF_XY:'EDVLF_XY',EDVLF_XZ:'EDVLF_XZ',EDVLF_YZ:'EDVLF_YZ',EDVLF_XYZ:'EDVLF_XYZ', };
declare class DistributionVectorConstant extends DistributionVector { 
	Constant: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	static Load(ResourceName: string): DistributionVectorConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstant;
	static GetDefaultObject(): DistributionVectorConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstant;
	static C(Other: UObject): DistributionVectorConstant;
}

declare class DistributionVectorParameterBase extends DistributionVectorConstant { 
	ParameterName: string;
	MinInput: Vector;
	MaxInput: Vector;
	MinOutput: Vector;
	MaxOutput: Vector;
	ParamModes: DistributionParamMode;
	static Load(ResourceName: string): DistributionVectorParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParameterBase;
	static GetDefaultObject(): DistributionVectorParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParameterBase;
	static C(Other: UObject): DistributionVectorParameterBase;
}

declare class DistributionVectorParticleParameter extends DistributionVectorParameterBase { 
	static Load(ResourceName: string): DistributionVectorParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParticleParameter;
	static GetDefaultObject(): DistributionVectorParticleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParticleParameter;
	static C(Other: UObject): DistributionVectorParticleParameter;
}

declare class DistributionVectorConstantCurve extends DistributionVector { 
	ConstantCurve: InterpCurveVector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	static Load(ResourceName: string): DistributionVectorConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstantCurve;
	static GetDefaultObject(): DistributionVectorConstantCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstantCurve;
	static C(Other: UObject): DistributionVectorConstantCurve;
}

declare type EDistributionVectorMirrorFlags = 'EDVMF_Same' | 'EDVMF_Different' | 'EDVMF_Mirror';
declare var EDistributionVectorMirrorFlags : { EDVMF_Same:'EDVMF_Same',EDVMF_Different:'EDVMF_Different',EDVMF_Mirror:'EDVMF_Mirror', };
declare class DistributionVectorUniform extends DistributionVector { 
	Max: Vector;
	Min: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	static Load(ResourceName: string): DistributionVectorUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniform;
	static GetDefaultObject(): DistributionVectorUniform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniform;
	static C(Other: UObject): DistributionVectorUniform;
}

declare class TwoVectors { 
	v1: Vector;
	v2: Vector;
	clone() : TwoVectors;
	static C(Other: UObject): TwoVectors;
}

declare class InterpCurvePointTwoVectors { 
	InVal: number;
	OutVal: TwoVectors;
	ArriveTangent: TwoVectors;
	LeaveTangent: TwoVectors;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointTwoVectors;
	static C(Other: UObject): InterpCurvePointTwoVectors;
}

declare class InterpCurveTwoVectors { 
	Points: InterpCurvePointTwoVectors[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveTwoVectors;
	static C(Other: UObject): InterpCurveTwoVectors;
}

declare class DistributionVectorUniformCurve extends DistributionVector { 
	ConstantCurve: InterpCurveTwoVectors;
	bLockAxes1: boolean;
	bLockAxes2: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	static Load(ResourceName: string): DistributionVectorUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniformCurve;
	static GetDefaultObject(): DistributionVectorUniformCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniformCurve;
	static C(Other: UObject): DistributionVectorUniformCurve;
}

declare class BlueprintComponentDelegateBinding { 
	ComponentPropertyName: string;
	DelegatePropertyName: string;
	FunctionNameToBind: string;
	clone() : BlueprintComponentDelegateBinding;
	static C(Other: UObject): BlueprintComponentDelegateBinding;
}

declare class ComponentDelegateBinding extends DynamicBlueprintBinding { 
	ComponentDelegateBindings: BlueprintComponentDelegateBinding[];
	static Load(ResourceName: string): ComponentDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): ComponentDelegateBinding;
	static GetDefaultObject(): ComponentDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentDelegateBinding;
	static C(Other: UObject): ComponentDelegateBinding;
}

declare class InputDelegateBinding extends DynamicBlueprintBinding { 
	static Load(ResourceName: string): InputDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputDelegateBinding;
	static GetDefaultObject(): InputDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputDelegateBinding;
	static C(Other: UObject): InputDelegateBinding;
}

declare class BlueprintInputDelegateBinding { 
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	clone() : BlueprintInputDelegateBinding;
	static C(Other: UObject): BlueprintInputDelegateBinding;
}

declare class BlueprintInputActionDelegateBinding extends BlueprintInputDelegateBinding { 
	InputActionName: string;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputActionDelegateBinding;
	static C(Other: UObject): BlueprintInputActionDelegateBinding;
}

declare class InputActionDelegateBinding extends InputDelegateBinding { 
	InputActionDelegateBindings: BlueprintInputActionDelegateBinding[];
	static Load(ResourceName: string): InputActionDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputActionDelegateBinding;
	static GetDefaultObject(): InputActionDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputActionDelegateBinding;
	static C(Other: UObject): InputActionDelegateBinding;
}

declare class BlueprintInputAxisDelegateBinding extends BlueprintInputDelegateBinding { 
	InputAxisName: string;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisDelegateBinding;
	static C(Other: UObject): BlueprintInputAxisDelegateBinding;
}

declare class InputAxisDelegateBinding extends InputDelegateBinding { 
	InputAxisDelegateBindings: BlueprintInputAxisDelegateBinding[];
	static Load(ResourceName: string): InputAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisDelegateBinding;
	static GetDefaultObject(): InputAxisDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisDelegateBinding;
	static C(Other: UObject): InputAxisDelegateBinding;
}

declare class BlueprintInputAxisKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	AxisKey: Key;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisKeyDelegateBinding;
	static C(Other: UObject): BlueprintInputAxisKeyDelegateBinding;
}

declare class InputAxisKeyDelegateBinding extends InputDelegateBinding { 
	InputAxisKeyDelegateBindings: BlueprintInputAxisKeyDelegateBinding[];
	static Load(ResourceName: string): InputAxisKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisKeyDelegateBinding;
	static GetDefaultObject(): InputAxisKeyDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisKeyDelegateBinding;
	static C(Other: UObject): InputAxisKeyDelegateBinding;
}

declare class InputVectorAxisDelegateBinding extends InputAxisKeyDelegateBinding { 
	static Load(ResourceName: string): InputVectorAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputVectorAxisDelegateBinding;
	static GetDefaultObject(): InputVectorAxisDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputVectorAxisDelegateBinding;
	static C(Other: UObject): InputVectorAxisDelegateBinding;
}

declare class BlueprintInputKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	InputChord: InputChord;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputKeyDelegateBinding;
	static C(Other: UObject): BlueprintInputKeyDelegateBinding;
}

declare class InputKeyDelegateBinding extends InputDelegateBinding { 
	InputKeyDelegateBindings: BlueprintInputKeyDelegateBinding[];
	static Load(ResourceName: string): InputKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputKeyDelegateBinding;
	static GetDefaultObject(): InputKeyDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputKeyDelegateBinding;
	static C(Other: UObject): InputKeyDelegateBinding;
}

declare class BlueprintInputTouchDelegateBinding extends BlueprintInputDelegateBinding { 
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputTouchDelegateBinding;
	static C(Other: UObject): BlueprintInputTouchDelegateBinding;
}

declare class InputTouchDelegateBinding extends InputDelegateBinding { 
	InputTouchDelegateBindings: BlueprintInputTouchDelegateBinding[];
	static Load(ResourceName: string): InputTouchDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputTouchDelegateBinding;
	static GetDefaultObject(): InputTouchDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputTouchDelegateBinding;
	static C(Other: UObject): InputTouchDelegateBinding;
}

declare class EdGraphNode_Documentation extends EdGraphNode { 
	Link: string;
	Excerpt: string;
	static Load(ResourceName: string): EdGraphNode_Documentation;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Documentation;
	static GetDefaultObject(): EdGraphNode_Documentation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Documentation;
	static C(Other: UObject): EdGraphNode_Documentation;
}

declare class ImportantToggleSettingInterface extends Interface { 
	static Load(ResourceName: string): ImportantToggleSettingInterface;
	static Find(Outer: UObject, ResourceName: string): ImportantToggleSettingInterface;
	static GetDefaultObject(): ImportantToggleSettingInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportantToggleSettingInterface;
	static C(Other: UObject): ImportantToggleSettingInterface;
}

declare class EndUserSettings extends UObject { 
	bSendAnonymousUsageDataToEpic: boolean;
	bSendMeanTimeBetweenFailureDataToEpic: boolean;
	bAllowUserIdInUsageData: boolean;
	static Load(ResourceName: string): EndUserSettings;
	static Find(Outer: UObject, ResourceName: string): EndUserSettings;
	static GetDefaultObject(): EndUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndUserSettings;
	static C(Other: UObject): EndUserSettings;
}

declare class PendingNetGame extends UObject { 
	NetDriver: NetDriver;
	DemoNetDriver: DemoNetDriver;
	static Load(ResourceName: string): PendingNetGame;
	static Find(Outer: UObject, ResourceName: string): PendingNetGame;
	static GetDefaultObject(): PendingNetGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PendingNetGame;
	static C(Other: UObject): PendingNetGame;
}

declare class GameEngine extends Engine { 
	MaxDeltaTime: number;
	ServerFlushLogInterval: number;
	GameInstance: GameInstance;
	static Load(ResourceName: string): GameEngine;
	static Find(Outer: UObject, ResourceName: string): GameEngine;
	static GetDefaultObject(): GameEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameEngine;
	static C(Other: UObject): GameEngine;
}

declare class EngineHandlerComponentFactory extends HandlerComponentFactory { 
	static Load(ResourceName: string): EngineHandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): EngineHandlerComponentFactory;
	static GetDefaultObject(): EngineHandlerComponentFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineHandlerComponentFactory;
	static C(Other: UObject): EngineHandlerComponentFactory;
}

declare class FontFace extends UObject { 
	SourceFilename: string;
	Hinting: Hinting;
	LoadingPolicy: LoadingPolicy;
	FontFaceData: number[];
	static Load(ResourceName: string): FontFace;
	static Find(Outer: UObject, ResourceName: string): FontFace;
	static GetDefaultObject(): FontFace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFace;
	static C(Other: UObject): FontFace;
}

declare class HapticFeedbackEffect_Buffer extends HapticFeedbackEffect_Base { 
	Amplitudes: number[];
	SampleRate: number;
	static Load(ResourceName: string): HapticFeedbackEffect_Buffer;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Buffer;
	static GetDefaultObject(): HapticFeedbackEffect_Buffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Buffer;
	static C(Other: UObject): HapticFeedbackEffect_Buffer;
}

declare class HapticFeedbackDetails_Curve { 
	Frequency: RuntimeFloatCurve;
	Amplitude: RuntimeFloatCurve;
	clone() : HapticFeedbackDetails_Curve;
	static C(Other: UObject): HapticFeedbackDetails_Curve;
}

declare class HapticFeedbackEffect_Curve extends HapticFeedbackEffect_Base { 
	HapticDetails: HapticFeedbackDetails_Curve;
	static Load(ResourceName: string): HapticFeedbackEffect_Curve;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Curve;
	static GetDefaultObject(): HapticFeedbackEffect_Curve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Curve;
	static C(Other: UObject): HapticFeedbackEffect_Curve;
}

declare class HapticFeedbackEffect_SoundWave extends HapticFeedbackEffect_Base { 
	SoundWave: SoundWave;
	static Load(ResourceName: string): HapticFeedbackEffect_SoundWave;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_SoundWave;
	static GetDefaultObject(): HapticFeedbackEffect_SoundWave;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_SoundWave;
	static C(Other: UObject): HapticFeedbackEffect_SoundWave;
}

declare class InputAxisProperties { 
	DeadZone: number;
	Sensitivity: number;
	Exponent: number;
	bInvert: boolean;
	clone() : InputAxisProperties;
	static C(Other: UObject): InputAxisProperties;
}

declare class InputAxisConfigEntry { 
	AxisKeyName: string;
	AxisProperties: InputAxisProperties;
	clone() : InputAxisConfigEntry;
	static C(Other: UObject): InputAxisConfigEntry;
}

declare type EMouseCaptureMode = 'NoCapture' | 'CapturePermanently' | 'CapturePermanently_IncludingInitialMouseDown' | 'CaptureDuringMouseDown' | 'CaptureDuringRightMouseDown';
declare var EMouseCaptureMode : { NoCapture:'NoCapture',CapturePermanently:'CapturePermanently',CapturePermanently_IncludingInitialMouseDown:'CapturePermanently_IncludingInitialMouseDown',CaptureDuringMouseDown:'CaptureDuringMouseDown',CaptureDuringRightMouseDown:'CaptureDuringRightMouseDown', };
declare class InputActionKeyMapping { 
	ActionName: string;
	Key: Key;
	bShift: boolean;
	bCtrl: boolean;
	bAlt: boolean;
	bCmd: boolean;
	clone() : InputActionKeyMapping;
	static C(Other: UObject): InputActionKeyMapping;
}

declare class InputAxisKeyMapping { 
	AxisName: string;
	Key: Key;
	Scale: number;
	clone() : InputAxisKeyMapping;
	static C(Other: UObject): InputAxisKeyMapping;
}

declare class InputSettings extends UObject { 
	AxisConfig: InputAxisConfigEntry[];
	bAltEnterTogglesFullscreen: boolean;
	bF11TogglesFullscreen: boolean;
	bUseMouseForTouch: boolean;
	bEnableMouseSmoothing: boolean;
	bEnableFOVScaling: boolean;
	FOVScale: number;
	DoubleClickTime: number;
	bCaptureMouseOnLaunch: boolean;
	DefaultViewportMouseCaptureMode: DefaultViewportMouseCaptureMode;
	bDefaultViewportMouseLock: boolean;
	DefaultViewportMouseLockMode: DefaultViewportMouseLockMode;
	ActionMappings: InputActionKeyMapping[];
	AxisMappings: InputAxisKeyMapping[];
	bAlwaysShowTouchInterface: boolean;
	bShowConsoleOnFourFingerTap: boolean;
	DefaultTouchInterface: StringAssetReference;
	ConsoleKey: Key;
	ConsoleKeys: Key[];
	static Load(ResourceName: string): InputSettings;
	static Find(Outer: UObject, ResourceName: string): InputSettings;
	static GetDefaultObject(): InputSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputSettings;
	static C(Other: UObject): InputSettings;
}

declare class InterpFilter_Classes extends InterpFilter { 
	ClassToFilterBy: UnrealEngineClass;
	TrackClasses: UnrealEngineClass[];
	static Load(ResourceName: string): InterpFilter_Classes;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Classes;
	static GetDefaultObject(): InterpFilter_Classes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Classes;
	static C(Other: UObject): InterpFilter_Classes;
}

declare class InterpFilter_Custom extends InterpFilter { 
	GroupsToInclude: InterpGroup[];
	static Load(ResourceName: string): InterpFilter_Custom;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Custom;
	static GetDefaultObject(): InterpFilter_Custom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Custom;
	static C(Other: UObject): InterpFilter_Custom;
}

declare class CameraPreviewInfo { 
	PawnClass: UnrealEngineClass;
	AnimSeq: AnimSequence;
	Location: Vector;
	Rotation: Rotator;
	PawnInst: Pawn;
	clone() : CameraPreviewInfo;
	static C(Other: UObject): CameraPreviewInfo;
}

declare class InterpGroupCamera extends InterpGroup { 
	CameraAnimInst: CameraAnim;
	Target: CameraPreviewInfo;
	CompressTolerance: number;
	static Load(ResourceName: string): InterpGroupCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupCamera;
	static GetDefaultObject(): InterpGroupCamera;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupCamera;
	static C(Other: UObject): InterpGroupCamera;
}

declare class InterpGroupInstCamera extends InterpGroupInst { 
	static Load(ResourceName: string): InterpGroupInstCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstCamera;
	static GetDefaultObject(): InterpGroupInstCamera;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstCamera;
	static C(Other: UObject): InterpGroupInstCamera;
}

declare class InterpGroupInstDirector extends InterpGroupInst { 
	static Load(ResourceName: string): InterpGroupInstDirector;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstDirector;
	static GetDefaultObject(): InterpGroupInstDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstDirector;
	static C(Other: UObject): InterpGroupInstDirector;
}

declare class BoolTrackKey { 
	Time: number;
	Value: boolean;
	clone() : BoolTrackKey;
	static C(Other: UObject): BoolTrackKey;
}

declare class InterpTrackBoolProp extends InterpTrack { 
	BoolTrack: BoolTrackKey[];
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackBoolProp;
	static GetDefaultObject(): InterpTrackBoolProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackBoolProp;
	static C(Other: UObject): InterpTrackBoolProp;
}

declare class DirectorTrackCut { 
	Time: number;
	TransitionTime: number;
	TargetCamGroup: string;
	ShotNumber: number;
	clone() : DirectorTrackCut;
	static C(Other: UObject): DirectorTrackCut;
}

declare class InterpTrackDirector extends InterpTrack { 
	CutTrack: DirectorTrackCut[];
	bSimulateCameraCutsOnClients: boolean;
	PreviewCamera: CameraActor;
	static Load(ResourceName: string): InterpTrackDirector;
	static Find(Outer: UObject, ResourceName: string): InterpTrackDirector;
	static GetDefaultObject(): InterpTrackDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackDirector;
	static C(Other: UObject): InterpTrackDirector;
}

declare class EventTrackKey { 
	Time: number;
	EventName: string;
	clone() : EventTrackKey;
	static C(Other: UObject): EventTrackKey;
}

declare class InterpTrackEvent extends InterpTrack { 
	EventTrack: EventTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	bUseCustomEventName: boolean;
	static Load(ResourceName: string): InterpTrackEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackEvent;
	static GetDefaultObject(): InterpTrackEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackEvent;
	static C(Other: UObject): InterpTrackEvent;
}

declare class InterpTrackFloatBase extends InterpTrack { 
	FloatTrack: InterpCurveFloat;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackFloatBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatBase;
	static GetDefaultObject(): InterpTrackFloatBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatBase;
	static C(Other: UObject): InterpTrackFloatBase;
}

declare class AnimControlTrackKey { 
	StartTime: number;
	AnimSeq: AnimSequence;
	AnimStartOffset: number;
	AnimEndOffset: number;
	AnimPlayRate: number;
	bLooping: boolean;
	bReverse: boolean;
	clone() : AnimControlTrackKey;
	static C(Other: UObject): AnimControlTrackKey;
}

declare class InterpTrackAnimControl extends InterpTrackFloatBase { 
	SlotName: string;
	AnimSeqs: AnimControlTrackKey[];
	bSkipAnimNotifiers: boolean;
	static Load(ResourceName: string): InterpTrackAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAnimControl;
	static GetDefaultObject(): InterpTrackAnimControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAnimControl;
	static C(Other: UObject): InterpTrackAnimControl;
}

declare class InterpTrackFade extends InterpTrackFloatBase { 
	bPersistFade: boolean;
	bFadeAudio: boolean;
	FadeColor: LinearColor;
	static Load(ResourceName: string): InterpTrackFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFade;
	static GetDefaultObject(): InterpTrackFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFade;
	static C(Other: UObject): InterpTrackFade;
}

declare class InterpTrackFloatAnimBPParam extends InterpTrackFloatBase { 
	AnimBlueprintClass: UnrealEngineClass;
	AnimClass: UnrealEngineClass;
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatAnimBPParam;
	static GetDefaultObject(): InterpTrackFloatAnimBPParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatAnimBPParam;
	static C(Other: UObject): InterpTrackFloatAnimBPParam;
}

declare class InterpTrackFloatMaterialParam extends InterpTrackFloatBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatMaterialParam;
	static GetDefaultObject(): InterpTrackFloatMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatMaterialParam;
	static C(Other: UObject): InterpTrackFloatMaterialParam;
}

declare class InterpTrackFloatParticleParam extends InterpTrackFloatBase { 
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatParticleParam;
	static GetDefaultObject(): InterpTrackFloatParticleParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatParticleParam;
	static C(Other: UObject): InterpTrackFloatParticleParam;
}

declare class InterpTrackFloatProp extends InterpTrackFloatBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatProp;
	static GetDefaultObject(): InterpTrackFloatProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatProp;
	static C(Other: UObject): InterpTrackFloatProp;
}

declare type EInterpMoveAxis = 'AXIS_TranslationX' | 'AXIS_TranslationY' | 'AXIS_TranslationZ' | 'AXIS_RotationX' | 'AXIS_RotationY' | 'AXIS_RotationZ';
declare var EInterpMoveAxis : { AXIS_TranslationX:'AXIS_TranslationX',AXIS_TranslationY:'AXIS_TranslationY',AXIS_TranslationZ:'AXIS_TranslationZ',AXIS_RotationX:'AXIS_RotationX',AXIS_RotationY:'AXIS_RotationY',AXIS_RotationZ:'AXIS_RotationZ', };
declare class InterpTrackMoveAxis extends InterpTrackFloatBase { 
	MoveAxis: EInterpMoveAxis;
	LookupTrack: InterpLookupTrack;
	static Load(ResourceName: string): InterpTrackMoveAxis;
	static Find(Outer: UObject, ResourceName: string): InterpTrackMoveAxis;
	static GetDefaultObject(): InterpTrackMoveAxis;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackMoveAxis;
	static C(Other: UObject): InterpTrackMoveAxis;
}

declare class InterpTrackSlomo extends InterpTrackFloatBase { 
	static Load(ResourceName: string): InterpTrackSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSlomo;
	static GetDefaultObject(): InterpTrackSlomo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSlomo;
	static C(Other: UObject): InterpTrackSlomo;
}

declare class InterpCurvePointLinearColor { 
	InVal: number;
	OutVal: LinearColor;
	ArriveTangent: LinearColor;
	LeaveTangent: LinearColor;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointLinearColor;
	static C(Other: UObject): InterpCurvePointLinearColor;
}

declare class InterpCurveLinearColor { 
	Points: InterpCurvePointLinearColor[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveLinearColor;
	static C(Other: UObject): InterpCurveLinearColor;
}

declare class InterpTrackLinearColorBase extends InterpTrack { 
	LinearColorTrack: InterpCurveLinearColor;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackLinearColorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorBase;
	static GetDefaultObject(): InterpTrackLinearColorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorBase;
	static C(Other: UObject): InterpTrackLinearColorBase;
}

declare class InterpTrackLinearColorProp extends InterpTrackLinearColorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorProp;
	static GetDefaultObject(): InterpTrackLinearColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorProp;
	static C(Other: UObject): InterpTrackLinearColorProp;
}

declare class ParticleReplayTrackKey { 
	Time: number;
	Duration: number;
	ClipIDNumber: number;
	clone() : ParticleReplayTrackKey;
	static C(Other: UObject): ParticleReplayTrackKey;
}

declare class InterpTrackParticleReplay extends InterpTrack { 
	TrackKeys: ParticleReplayTrackKey[];
	bIsCapturingReplay: boolean;
	FixedTimeStep: number;
	static Load(ResourceName: string): InterpTrackParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackParticleReplay;
	static GetDefaultObject(): InterpTrackParticleReplay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackParticleReplay;
	static C(Other: UObject): InterpTrackParticleReplay;
}

declare type ETrackToggleAction = 'ETTA_Off' | 'ETTA_On' | 'ETTA_Toggle' | 'ETTA_Trigger';
declare var ETrackToggleAction : { ETTA_Off:'ETTA_Off',ETTA_On:'ETTA_On',ETTA_Toggle:'ETTA_Toggle',ETTA_Trigger:'ETTA_Trigger', };
declare class ToggleTrackKey { 
	Time: number;
	ToggleAction: ETrackToggleAction;
	clone() : ToggleTrackKey;
	static C(Other: UObject): ToggleTrackKey;
}

declare class InterpTrackToggle extends InterpTrack { 
	ToggleTrack: ToggleTrackKey[];
	bActivateSystemEachUpdate: boolean;
	bActivateWithJustAttachedFlag: boolean;
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	static Load(ResourceName: string): InterpTrackToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackToggle;
	static GetDefaultObject(): InterpTrackToggle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackToggle;
	static C(Other: UObject): InterpTrackToggle;
}

declare class InterpTrackVectorBase extends InterpTrack { 
	VectorTrack: InterpCurveVector;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackVectorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorBase;
	static GetDefaultObject(): InterpTrackVectorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorBase;
	static C(Other: UObject): InterpTrackVectorBase;
}

declare class InterpTrackAudioMaster extends InterpTrackVectorBase { 
	static Load(ResourceName: string): InterpTrackAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAudioMaster;
	static GetDefaultObject(): InterpTrackAudioMaster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAudioMaster;
	static C(Other: UObject): InterpTrackAudioMaster;
}

declare class InterpTrackColorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorProp;
	static GetDefaultObject(): InterpTrackColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorProp;
	static C(Other: UObject): InterpTrackColorProp;
}

declare class InterpTrackColorScale extends InterpTrackVectorBase { 
	static Load(ResourceName: string): InterpTrackColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorScale;
	static GetDefaultObject(): InterpTrackColorScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorScale;
	static C(Other: UObject): InterpTrackColorScale;
}

declare class SoundTrackKey { 
	Time: number;
	Volume: number;
	Pitch: number;
	Sound: SoundBase;
	clone() : SoundTrackKey;
	static C(Other: UObject): SoundTrackKey;
}

declare class InterpTrackSound extends InterpTrackVectorBase { 
	Sounds: SoundTrackKey[];
	bPlayOnReverse: boolean;
	bContinueSoundOnMatineeEnd: boolean;
	bSuppressSubtitles: boolean;
	bTreatAsDialogue: boolean;
	bAttach: boolean;
	static Load(ResourceName: string): InterpTrackSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSound;
	static GetDefaultObject(): InterpTrackSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSound;
	static C(Other: UObject): InterpTrackSound;
}

declare class InterpTrackVectorMaterialParam extends InterpTrackVectorBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	static Load(ResourceName: string): InterpTrackVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorMaterialParam;
	static GetDefaultObject(): InterpTrackVectorMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorMaterialParam;
	static C(Other: UObject): InterpTrackVectorMaterialParam;
}

declare class InterpTrackVectorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorProp;
	static GetDefaultObject(): InterpTrackVectorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorProp;
	static C(Other: UObject): InterpTrackVectorProp;
}

declare type EVisibilityTrackAction = 'EVTA_Hide' | 'EVTA_Show' | 'EVTA_Toggle';
declare var EVisibilityTrackAction : { EVTA_Hide:'EVTA_Hide',EVTA_Show:'EVTA_Show',EVTA_Toggle:'EVTA_Toggle', };
declare type EVisibilityTrackCondition = 'EVTC_Always' | 'EVTC_GoreEnabled' | 'EVTC_GoreDisabled';
declare var EVisibilityTrackCondition : { EVTC_Always:'EVTC_Always',EVTC_GoreEnabled:'EVTC_GoreEnabled',EVTC_GoreDisabled:'EVTC_GoreDisabled', };
declare class VisibilityTrackKey { 
	Time: number;
	Action: EVisibilityTrackAction;
	ActiveCondition: EVisibilityTrackCondition;
	clone() : VisibilityTrackKey;
	static C(Other: UObject): VisibilityTrackKey;
}

declare class InterpTrackVisibility extends InterpTrack { 
	VisibilityTrack: VisibilityTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	static Load(ResourceName: string): InterpTrackVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVisibility;
	static GetDefaultObject(): InterpTrackVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVisibility;
	static C(Other: UObject): InterpTrackVisibility;
}

declare class InterpTrackInstAnimControl extends InterpTrackInst { 
	LastUpdatePosition: number;
	InitPosition: Vector;
	InitRotation: Rotator;
	static Load(ResourceName: string): InterpTrackInstAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAnimControl;
	static GetDefaultObject(): InterpTrackInstAnimControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAnimControl;
	static C(Other: UObject): InterpTrackInstAnimControl;
}

declare class InterpTrackInstAudioMaster extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAudioMaster;
	static GetDefaultObject(): InterpTrackInstAudioMaster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAudioMaster;
	static C(Other: UObject): InterpTrackInstAudioMaster;
}

declare class InterpTrackInstColorScale extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorScale;
	static GetDefaultObject(): InterpTrackInstColorScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorScale;
	static C(Other: UObject): InterpTrackInstColorScale;
}

declare class InterpTrackInstEvent extends InterpTrackInst { 
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstEvent;
	static GetDefaultObject(): InterpTrackInstEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstEvent;
	static C(Other: UObject): InterpTrackInstEvent;
}

declare class InterpTrackInstFade extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFade;
	static GetDefaultObject(): InterpTrackInstFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFade;
	static C(Other: UObject): InterpTrackInstFade;
}

declare class InterpTrackInstFloatAnimBPParam extends InterpTrackInst { 
	AnimScriptInstance: AnimInstance;
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static GetDefaultObject(): InterpTrackInstFloatAnimBPParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatAnimBPParam;
	static C(Other: UObject): InterpTrackInstFloatAnimBPParam;
}

declare class PrimitiveMaterialRef { 
	Primitive: PrimitiveComponent;
	Decal: DecalComponent;
	ElementIndex: number;
	clone() : PrimitiveMaterialRef;
	static C(Other: UObject): PrimitiveMaterialRef;
}

declare class InterpTrackInstFloatMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetFloats: number[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackFloatMaterialParam;
	static Load(ResourceName: string): InterpTrackInstFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatMaterialParam;
	static GetDefaultObject(): InterpTrackInstFloatMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatMaterialParam;
	static C(Other: UObject): InterpTrackInstFloatMaterialParam;
}

declare class InterpTrackInstFloatParticleParam extends InterpTrackInst { 
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatParticleParam;
	static GetDefaultObject(): InterpTrackInstFloatParticleParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatParticleParam;
	static C(Other: UObject): InterpTrackInstFloatParticleParam;
}

declare class InterpTrackInstParticleReplay extends InterpTrackInst { 
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstParticleReplay;
	static GetDefaultObject(): InterpTrackInstParticleReplay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstParticleReplay;
	static C(Other: UObject): InterpTrackInstParticleReplay;
}

declare class InterpTrackInstProperty extends InterpTrackInst { 
	InterpProperty: Property;
	PropertyOuterObjectInst: UObject;
	static Load(ResourceName: string): InterpTrackInstProperty;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstProperty;
	static GetDefaultObject(): InterpTrackInstProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstProperty;
	static C(Other: UObject): InterpTrackInstProperty;
}

declare class InterpTrackInstBoolProp extends InterpTrackInstProperty { 
	BoolProperty: BoolProperty;
	ResetBool: boolean;
	static Load(ResourceName: string): InterpTrackInstBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstBoolProp;
	static GetDefaultObject(): InterpTrackInstBoolProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstBoolProp;
	static C(Other: UObject): InterpTrackInstBoolProp;
}

declare class InterpTrackInstColorProp extends InterpTrackInstProperty { 
	ResetColor: Color;
	static Load(ResourceName: string): InterpTrackInstColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorProp;
	static GetDefaultObject(): InterpTrackInstColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorProp;
	static C(Other: UObject): InterpTrackInstColorProp;
}

declare class InterpTrackInstFloatProp extends InterpTrackInstProperty { 
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatProp;
	static GetDefaultObject(): InterpTrackInstFloatProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatProp;
	static C(Other: UObject): InterpTrackInstFloatProp;
}

declare class InterpTrackInstLinearColorProp extends InterpTrackInstProperty { 
	ResetColor: LinearColor;
	static Load(ResourceName: string): InterpTrackInstLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstLinearColorProp;
	static GetDefaultObject(): InterpTrackInstLinearColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstLinearColorProp;
	static C(Other: UObject): InterpTrackInstLinearColorProp;
}

declare class InterpTrackInstVectorProp extends InterpTrackInstProperty { 
	ResetVector: Vector;
	static Load(ResourceName: string): InterpTrackInstVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorProp;
	static GetDefaultObject(): InterpTrackInstVectorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorProp;
	static C(Other: UObject): InterpTrackInstVectorProp;
}

declare class InterpTrackInstSlomo extends InterpTrackInst { 
	OldTimeDilation: number;
	static Load(ResourceName: string): InterpTrackInstSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSlomo;
	static GetDefaultObject(): InterpTrackInstSlomo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSlomo;
	static C(Other: UObject): InterpTrackInstSlomo;
}

declare class InterpTrackInstSound extends InterpTrackInst { 
	LastUpdatePosition: number;
	PlayAudioComp: AudioComponent;
	static Load(ResourceName: string): InterpTrackInstSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSound;
	static GetDefaultObject(): InterpTrackInstSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSound;
	static C(Other: UObject): InterpTrackInstSound;
}

declare class InterpTrackInstToggle extends InterpTrackInst { 
	Action: ETrackToggleAction;
	LastUpdatePosition: number;
	bSavedActiveState: boolean;
	static Load(ResourceName: string): InterpTrackInstToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstToggle;
	static GetDefaultObject(): InterpTrackInstToggle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstToggle;
	static C(Other: UObject): InterpTrackInstToggle;
}

declare class InterpTrackInstVectorMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetVectors: Vector[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackVectorMaterialParam;
	static Load(ResourceName: string): InterpTrackInstVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorMaterialParam;
	static GetDefaultObject(): InterpTrackInstVectorMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorMaterialParam;
	static C(Other: UObject): InterpTrackInstVectorMaterialParam;
}

declare class InterpTrackInstVisibility extends InterpTrackInst { 
	Action: EVisibilityTrackAction;
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVisibility;
	static GetDefaultObject(): InterpTrackInstVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVisibility;
	static C(Other: UObject): InterpTrackInstVisibility;
}

declare class IntSerialization extends UObject { 
	UnsignedInt16Variable: any;
	UnsignedInt32Variable: any;
	UnsignedInt64Variable: any;
	SignedInt8Variable: any;
	SignedInt16Variable: any;
	SignedInt64Variable: any;
	UnsignedInt8Variable: number;
	SignedInt32Variable: number;
	static Load(ResourceName: string): IntSerialization;
	static Find(Outer: UObject, ResourceName: string): IntSerialization;
	static GetDefaultObject(): IntSerialization;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntSerialization;
	static C(Other: UObject): IntSerialization;
}

declare class LevelStreamingAlwaysLoaded extends LevelStreaming { 
	static Load(ResourceName: string): LevelStreamingAlwaysLoaded;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingAlwaysLoaded;
	static GetDefaultObject(): LevelStreamingAlwaysLoaded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingAlwaysLoaded;
	static C(Other: UObject): LevelStreamingAlwaysLoaded;
}

declare class LevelStreamingKismet extends LevelStreaming { 
	bInitiallyLoaded: boolean;
	bInitiallyVisible: boolean;
	static Load(ResourceName: string): LevelStreamingKismet;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingKismet;
	static GetDefaultObject(): LevelStreamingKismet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingKismet;
	static LoadLevelInstance(WorldContextObject: UObject,LevelName: string,Location: Vector,Rotation: Rotator,bOutSuccess?: boolean): {bOutSuccess: boolean, $: LevelStreamingKismet};
	static C(Other: UObject): LevelStreamingKismet;
}

declare class LevelStreamingPersistent extends LevelStreaming { 
	static Load(ResourceName: string): LevelStreamingPersistent;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingPersistent;
	static GetDefaultObject(): LevelStreamingPersistent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingPersistent;
	static C(Other: UObject): LevelStreamingPersistent;
}

declare class LightmappedSurfaceCollection extends UObject { 
	SourceModel: Model;
	Surfaces: number[];
	static Load(ResourceName: string): LightmappedSurfaceCollection;
	static Find(Outer: UObject, ResourceName: string): LightmappedSurfaceCollection;
	static GetDefaultObject(): LightmappedSurfaceCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmappedSurfaceCollection;
	static C(Other: UObject): LightmappedSurfaceCollection;
}

declare class LightmassPrimitiveSettingsObject extends UObject { 
	LightmassSettings: LightmassPrimitiveSettings;
	static Load(ResourceName: string): LightmassPrimitiveSettingsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassPrimitiveSettingsObject;
	static GetDefaultObject(): LightmassPrimitiveSettingsObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassPrimitiveSettingsObject;
	static C(Other: UObject): LightmassPrimitiveSettingsObject;
}

declare class EngineMessage extends LocalMessage { 
	FailedPlaceMessage: string;
	MaxedOutMessage: string;
	EnteredMessage: string;
	LeftMessage: string;
	GlobalNameChange: string;
	SpecEnteredMessage: string;
	NewPlayerMessage: string;
	NewSpecMessage: string;
	static Load(ResourceName: string): EngineMessage;
	static Find(Outer: UObject, ResourceName: string): EngineMessage;
	static GetDefaultObject(): EngineMessage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineMessage;
	static C(Other: UObject): EngineMessage;
}

declare class MaterialExpressionAbs extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionAbs;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAbs;
	static GetDefaultObject(): MaterialExpressionAbs;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAbs;
	static C(Other: UObject): MaterialExpressionAbs;
}

declare class MaterialExpressionActorPositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionActorPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionActorPositionWS;
	static GetDefaultObject(): MaterialExpressionActorPositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionActorPositionWS;
	static C(Other: UObject): MaterialExpressionActorPositionWS;
}

declare class MaterialExpressionAdd extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionAdd;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAdd;
	static GetDefaultObject(): MaterialExpressionAdd;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAdd;
	static C(Other: UObject): MaterialExpressionAdd;
}

declare class MaterialExpressionAppendVector extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionAppendVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAppendVector;
	static GetDefaultObject(): MaterialExpressionAppendVector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAppendVector;
	static C(Other: UObject): MaterialExpressionAppendVector;
}

declare class MaterialExpressionArccosine extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArccosine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArccosine;
	static GetDefaultObject(): MaterialExpressionArccosine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArccosine;
	static C(Other: UObject): MaterialExpressionArccosine;
}

declare class MaterialExpressionArccosineFast extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArccosineFast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArccosineFast;
	static GetDefaultObject(): MaterialExpressionArccosineFast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArccosineFast;
	static C(Other: UObject): MaterialExpressionArccosineFast;
}

declare class MaterialExpressionArcsine extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArcsine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArcsine;
	static GetDefaultObject(): MaterialExpressionArcsine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArcsine;
	static C(Other: UObject): MaterialExpressionArcsine;
}

declare class MaterialExpressionArcsineFast extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArcsineFast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArcsineFast;
	static GetDefaultObject(): MaterialExpressionArcsineFast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArcsineFast;
	static C(Other: UObject): MaterialExpressionArcsineFast;
}

declare class MaterialExpressionArctangent extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangent;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangent;
	static GetDefaultObject(): MaterialExpressionArctangent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangent;
	static C(Other: UObject): MaterialExpressionArctangent;
}

declare class MaterialExpressionArctangent2 extends MaterialExpression { 
	Y: ExpressionInput;
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangent2;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangent2;
	static GetDefaultObject(): MaterialExpressionArctangent2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangent2;
	static C(Other: UObject): MaterialExpressionArctangent2;
}

declare class MaterialExpressionArctangent2Fast extends MaterialExpression { 
	Y: ExpressionInput;
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangent2Fast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangent2Fast;
	static GetDefaultObject(): MaterialExpressionArctangent2Fast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangent2Fast;
	static C(Other: UObject): MaterialExpressionArctangent2Fast;
}

declare class MaterialExpressionArctangentFast extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionArctangentFast;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionArctangentFast;
	static GetDefaultObject(): MaterialExpressionArctangentFast;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionArctangentFast;
	static C(Other: UObject): MaterialExpressionArctangentFast;
}

declare class MaterialExpressionAtmosphericFogColor extends MaterialExpression { 
	WorldPosition: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionAtmosphericFogColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericFogColor;
	static GetDefaultObject(): MaterialExpressionAtmosphericFogColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericFogColor;
	static C(Other: UObject): MaterialExpressionAtmosphericFogColor;
}

declare class MaterialExpressionAtmosphericLightColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionAtmosphericLightColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericLightColor;
	static GetDefaultObject(): MaterialExpressionAtmosphericLightColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericLightColor;
	static C(Other: UObject): MaterialExpressionAtmosphericLightColor;
}

declare class MaterialExpressionAtmosphericLightVector extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionAtmosphericLightVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAtmosphericLightVector;
	static GetDefaultObject(): MaterialExpressionAtmosphericLightVector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAtmosphericLightVector;
	static C(Other: UObject): MaterialExpressionAtmosphericLightVector;
}

declare class MaterialExpressionBlackBody extends MaterialExpression { 
	Temp: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionBlackBody;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBlackBody;
	static GetDefaultObject(): MaterialExpressionBlackBody;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBlackBody;
	static C(Other: UObject): MaterialExpressionBlackBody;
}

declare type EMaterialAttributeBlend = 'Blend' | 'UseA' | 'UseB';
declare var EMaterialAttributeBlend : { Blend:'Blend',UseA:'UseA',UseB:'UseB', };
declare class MaterialExpressionBlendMaterialAttributes extends MaterialExpression { 
	A: MaterialAttributesInput;
	B: MaterialAttributesInput;
	Alpha: ExpressionInput;
	PixelAttributeBlendType: EMaterialAttributeBlend;
	VertexAttributeBlendType: EMaterialAttributeBlend;
	static Load(ResourceName: string): MaterialExpressionBlendMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBlendMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionBlendMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBlendMaterialAttributes;
	static C(Other: UObject): MaterialExpressionBlendMaterialAttributes;
}

declare class MaterialExpressionBreakMaterialAttributes extends MaterialExpression { 
	MaterialAttributes: MaterialAttributesInput;
	static Load(ResourceName: string): MaterialExpressionBreakMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBreakMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionBreakMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBreakMaterialAttributes;
	static C(Other: UObject): MaterialExpressionBreakMaterialAttributes;
}

declare class MaterialExpressionBumpOffset extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Height: ExpressionInput;
	HeightRatioInput: ExpressionInput;
	HeightRatio: number;
	ReferencePlane: number;
	ConstCoordinate: any;
	static Load(ResourceName: string): MaterialExpressionBumpOffset;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionBumpOffset;
	static GetDefaultObject(): MaterialExpressionBumpOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionBumpOffset;
	static C(Other: UObject): MaterialExpressionBumpOffset;
}

declare class MaterialExpressionCameraPositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCameraPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCameraPositionWS;
	static GetDefaultObject(): MaterialExpressionCameraPositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCameraPositionWS;
	static C(Other: UObject): MaterialExpressionCameraPositionWS;
}

declare class MaterialExpressionCameraVectorWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCameraVectorWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCameraVectorWS;
	static GetDefaultObject(): MaterialExpressionCameraVectorWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCameraVectorWS;
	static C(Other: UObject): MaterialExpressionCameraVectorWS;
}

declare class MaterialExpressionCeil extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionCeil;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCeil;
	static GetDefaultObject(): MaterialExpressionCeil;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCeil;
	static C(Other: UObject): MaterialExpressionCeil;
}

declare type EClampMode = 'CMODE_Clamp' | 'CMODE_ClampMin' | 'CMODE_ClampMax';
declare var EClampMode : { CMODE_Clamp:'CMODE_Clamp',CMODE_ClampMin:'CMODE_ClampMin',CMODE_ClampMax:'CMODE_ClampMax', };
declare class MaterialExpressionClamp extends MaterialExpression { 
	Input: ExpressionInput;
	Min: ExpressionInput;
	Max: ExpressionInput;
	ClampMode: EClampMode;
	MinDefault: number;
	MaxDefault: number;
	static Load(ResourceName: string): MaterialExpressionClamp;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionClamp;
	static GetDefaultObject(): MaterialExpressionClamp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionClamp;
	static C(Other: UObject): MaterialExpressionClamp;
}

declare class MaterialExpressionCollectionParameter extends MaterialExpression { 
	Collection: MaterialParameterCollection;
	ParameterName: string;
	ParameterId: Guid;
	static Load(ResourceName: string): MaterialExpressionCollectionParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCollectionParameter;
	static GetDefaultObject(): MaterialExpressionCollectionParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCollectionParameter;
	static C(Other: UObject): MaterialExpressionCollectionParameter;
}

declare class MaterialExpressionComponentMask extends MaterialExpression { 
	Input: ExpressionInput;
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	static Load(ResourceName: string): MaterialExpressionComponentMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionComponentMask;
	static GetDefaultObject(): MaterialExpressionComponentMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionComponentMask;
	static C(Other: UObject): MaterialExpressionComponentMask;
}

declare class MaterialExpressionConstant extends MaterialExpression { 
	R: number;
	static Load(ResourceName: string): MaterialExpressionConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant;
	static GetDefaultObject(): MaterialExpressionConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant;
	static C(Other: UObject): MaterialExpressionConstant;
}

declare class MaterialExpressionConstant2Vector extends MaterialExpression { 
	R: number;
	G: number;
	static Load(ResourceName: string): MaterialExpressionConstant2Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant2Vector;
	static GetDefaultObject(): MaterialExpressionConstant2Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant2Vector;
	static C(Other: UObject): MaterialExpressionConstant2Vector;
}

declare class MaterialExpressionConstant3Vector extends MaterialExpression { 
	Constant: LinearColor;
	static Load(ResourceName: string): MaterialExpressionConstant3Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant3Vector;
	static GetDefaultObject(): MaterialExpressionConstant3Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant3Vector;
	static C(Other: UObject): MaterialExpressionConstant3Vector;
}

declare class MaterialExpressionConstant4Vector extends MaterialExpression { 
	Constant: LinearColor;
	static Load(ResourceName: string): MaterialExpressionConstant4Vector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstant4Vector;
	static GetDefaultObject(): MaterialExpressionConstant4Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstant4Vector;
	static C(Other: UObject): MaterialExpressionConstant4Vector;
}

declare class MaterialExpressionConstantBiasScale extends MaterialExpression { 
	Input: ExpressionInput;
	Bias: number;
	Scale: number;
	static Load(ResourceName: string): MaterialExpressionConstantBiasScale;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionConstantBiasScale;
	static GetDefaultObject(): MaterialExpressionConstantBiasScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionConstantBiasScale;
	static C(Other: UObject): MaterialExpressionConstantBiasScale;
}

declare class MaterialExpressionCosine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionCosine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCosine;
	static GetDefaultObject(): MaterialExpressionCosine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCosine;
	static C(Other: UObject): MaterialExpressionCosine;
}

declare class MaterialExpressionCrossProduct extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionCrossProduct;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCrossProduct;
	static GetDefaultObject(): MaterialExpressionCrossProduct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCrossProduct;
	static C(Other: UObject): MaterialExpressionCrossProduct;
}

declare type ECustomMaterialOutputType = 'CMOT_Float1' | 'CMOT_Float2' | 'CMOT_Float3' | 'CMOT_Float4';
declare var ECustomMaterialOutputType : { CMOT_Float1:'CMOT_Float1',CMOT_Float2:'CMOT_Float2',CMOT_Float3:'CMOT_Float3',CMOT_Float4:'CMOT_Float4', };
declare class CustomInput { 
	InputName: string;
	Input: ExpressionInput;
	clone() : CustomInput;
	static C(Other: UObject): CustomInput;
}

declare class MaterialExpressionCustom extends MaterialExpression { 
	Code: string;
	OutputType: ECustomMaterialOutputType;
	Description: string;
	Inputs: CustomInput[];
	static Load(ResourceName: string): MaterialExpressionCustom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustom;
	static GetDefaultObject(): MaterialExpressionCustom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustom;
	static C(Other: UObject): MaterialExpressionCustom;
}

declare class MaterialExpressionClearCoatNormalCustomOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionClearCoatNormalCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionClearCoatNormalCustomOutput;
	static GetDefaultObject(): MaterialExpressionClearCoatNormalCustomOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionClearCoatNormalCustomOutput;
	static C(Other: UObject): MaterialExpressionClearCoatNormalCustomOutput;
}

declare class MaterialExpressionTangentOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionTangentOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangentOutput;
	static GetDefaultObject(): MaterialExpressionTangentOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangentOutput;
	static C(Other: UObject): MaterialExpressionTangentOutput;
}

declare class MaterialExpressionDDX extends MaterialExpression { 
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDDX;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDDX;
	static GetDefaultObject(): MaterialExpressionDDX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDDX;
	static C(Other: UObject): MaterialExpressionDDX;
}

declare class MaterialExpressionDDY extends MaterialExpression { 
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDDY;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDDY;
	static GetDefaultObject(): MaterialExpressionDDY;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDDY;
	static C(Other: UObject): MaterialExpressionDDY;
}

declare class MaterialExpressionDecalDerivative extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDecalDerivative;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalDerivative;
	static GetDefaultObject(): MaterialExpressionDecalDerivative;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalDerivative;
	static C(Other: UObject): MaterialExpressionDecalDerivative;
}

declare class MaterialExpressionDecalLifetimeOpacity extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDecalLifetimeOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalLifetimeOpacity;
	static GetDefaultObject(): MaterialExpressionDecalLifetimeOpacity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalLifetimeOpacity;
	static C(Other: UObject): MaterialExpressionDecalLifetimeOpacity;
}

declare class MaterialExpressionDecalMipmapLevel extends MaterialExpression { 
	TextureSize: ExpressionInput;
	ConstWidth: number;
	ConstHeight: number;
	static Load(ResourceName: string): MaterialExpressionDecalMipmapLevel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDecalMipmapLevel;
	static GetDefaultObject(): MaterialExpressionDecalMipmapLevel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDecalMipmapLevel;
	static C(Other: UObject): MaterialExpressionDecalMipmapLevel;
}

declare class MaterialExpressionDepthFade extends MaterialExpression { 
	InOpacity: ExpressionInput;
	FadeDistance: ExpressionInput;
	OpacityDefault: number;
	FadeDistanceDefault: number;
	static Load(ResourceName: string): MaterialExpressionDepthFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDepthFade;
	static GetDefaultObject(): MaterialExpressionDepthFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDepthFade;
	static C(Other: UObject): MaterialExpressionDepthFade;
}

declare type EDepthOfFieldFunctionValue = 'TDOF_NearAndFarMask' | 'TDOF_NearMask' | 'TDOF_FarMask' | 'TDOF_CircleOfConfusionRadius';
declare var EDepthOfFieldFunctionValue : { TDOF_NearAndFarMask:'TDOF_NearAndFarMask',TDOF_NearMask:'TDOF_NearMask',TDOF_FarMask:'TDOF_FarMask',TDOF_CircleOfConfusionRadius:'TDOF_CircleOfConfusionRadius', };
declare class MaterialExpressionDepthOfFieldFunction extends MaterialExpression { 
	FunctionValue: EDepthOfFieldFunctionValue;
	Depth: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDepthOfFieldFunction;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDepthOfFieldFunction;
	static GetDefaultObject(): MaterialExpressionDepthOfFieldFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDepthOfFieldFunction;
	static C(Other: UObject): MaterialExpressionDepthOfFieldFunction;
}

declare class MaterialExpressionDeriveNormalZ extends MaterialExpression { 
	InXY: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDeriveNormalZ;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDeriveNormalZ;
	static GetDefaultObject(): MaterialExpressionDeriveNormalZ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDeriveNormalZ;
	static C(Other: UObject): MaterialExpressionDeriveNormalZ;
}

declare class MaterialExpressionDesaturation extends MaterialExpression { 
	Input: ExpressionInput;
	Fraction: ExpressionInput;
	LuminanceFactors: LinearColor;
	static Load(ResourceName: string): MaterialExpressionDesaturation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDesaturation;
	static GetDefaultObject(): MaterialExpressionDesaturation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDesaturation;
	static C(Other: UObject): MaterialExpressionDesaturation;
}

declare class MaterialExpressionDistance extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistance;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistance;
	static GetDefaultObject(): MaterialExpressionDistance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistance;
	static C(Other: UObject): MaterialExpressionDistance;
}

declare class MaterialExpressionDistanceCullFade extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionDistanceCullFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceCullFade;
	static GetDefaultObject(): MaterialExpressionDistanceCullFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceCullFade;
	static C(Other: UObject): MaterialExpressionDistanceCullFade;
}

declare class MaterialExpressionDistanceFieldGradient extends MaterialExpression { 
	Position: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistanceFieldGradient;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceFieldGradient;
	static GetDefaultObject(): MaterialExpressionDistanceFieldGradient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceFieldGradient;
	static C(Other: UObject): MaterialExpressionDistanceFieldGradient;
}

declare class MaterialExpressionDistanceToNearestSurface extends MaterialExpression { 
	Position: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDistanceToNearestSurface;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDistanceToNearestSurface;
	static GetDefaultObject(): MaterialExpressionDistanceToNearestSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDistanceToNearestSurface;
	static C(Other: UObject): MaterialExpressionDistanceToNearestSurface;
}

declare class MaterialExpressionDivide extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionDivide;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDivide;
	static GetDefaultObject(): MaterialExpressionDivide;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDivide;
	static C(Other: UObject): MaterialExpressionDivide;
}

declare class MaterialExpressionDotProduct extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionDotProduct;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDotProduct;
	static GetDefaultObject(): MaterialExpressionDotProduct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDotProduct;
	static C(Other: UObject): MaterialExpressionDotProduct;
}

declare class MaterialExpressionDynamicParameter extends MaterialExpression { 
	ParamNames: string[];
	DefaultValue: LinearColor;
	static Load(ResourceName: string): MaterialExpressionDynamicParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDynamicParameter;
	static GetDefaultObject(): MaterialExpressionDynamicParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDynamicParameter;
	static C(Other: UObject): MaterialExpressionDynamicParameter;
}

declare class MaterialExpressionEyeAdaptation extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionEyeAdaptation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionEyeAdaptation;
	static GetDefaultObject(): MaterialExpressionEyeAdaptation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionEyeAdaptation;
	static C(Other: UObject): MaterialExpressionEyeAdaptation;
}

declare class MaterialExpressionFeatureLevelSwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFeatureLevelSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFeatureLevelSwitch;
	static GetDefaultObject(): MaterialExpressionFeatureLevelSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFeatureLevelSwitch;
	static C(Other: UObject): MaterialExpressionFeatureLevelSwitch;
}

declare class MaterialExpressionFloor extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFloor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFloor;
	static GetDefaultObject(): MaterialExpressionFloor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFloor;
	static C(Other: UObject): MaterialExpressionFloor;
}

declare class MaterialExpressionFmod extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFmod;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFmod;
	static GetDefaultObject(): MaterialExpressionFmod;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFmod;
	static C(Other: UObject): MaterialExpressionFmod;
}

declare class MaterialExpressionFontSample extends MaterialExpression { 
	Font: Font;
	FontTexturePage: number;
	static Load(ResourceName: string): MaterialExpressionFontSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFontSample;
	static GetDefaultObject(): MaterialExpressionFontSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFontSample;
	static C(Other: UObject): MaterialExpressionFontSample;
}

declare class MaterialExpressionFontSampleParameter extends MaterialExpressionFontSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	static Load(ResourceName: string): MaterialExpressionFontSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFontSampleParameter;
	static GetDefaultObject(): MaterialExpressionFontSampleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFontSampleParameter;
	static C(Other: UObject): MaterialExpressionFontSampleParameter;
}

declare class MaterialExpressionFrac extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFrac;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFrac;
	static GetDefaultObject(): MaterialExpressionFrac;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFrac;
	static C(Other: UObject): MaterialExpressionFrac;
}

declare class MaterialExpressionFresnel extends MaterialExpression { 
	ExponentIn: ExpressionInput;
	Exponent: number;
	BaseReflectFractionIn: ExpressionInput;
	BaseReflectFraction: number;
	Normal: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionFresnel;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFresnel;
	static GetDefaultObject(): MaterialExpressionFresnel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFresnel;
	static C(Other: UObject): MaterialExpressionFresnel;
}

declare type EFunctionInputType = 'FunctionInput_Scalar' | 'FunctionInput_Vector2' | 'FunctionInput_Vector3' | 'FunctionInput_Vector4' | 'FunctionInput_Texture2D' | 'FunctionInput_TextureCube' | 'FunctionInput_StaticBool' | 'FunctionInput_MaterialAttributes';
declare var EFunctionInputType : { FunctionInput_Scalar:'FunctionInput_Scalar',FunctionInput_Vector2:'FunctionInput_Vector2',FunctionInput_Vector3:'FunctionInput_Vector3',FunctionInput_Vector4:'FunctionInput_Vector4',FunctionInput_Texture2D:'FunctionInput_Texture2D',FunctionInput_TextureCube:'FunctionInput_TextureCube',FunctionInput_StaticBool:'FunctionInput_StaticBool',FunctionInput_MaterialAttributes:'FunctionInput_MaterialAttributes', };
declare class MaterialExpressionFunctionInput extends MaterialExpression { 
	Preview: ExpressionInput;
	InputName: string;
	Description: string;
	Id: Guid;
	InputType: EFunctionInputType;
	PreviewValue: Vector4;
	bUsePreviewValueAsDefault: boolean;
	SortPriority: number;
	bCompilingFunctionPreview: boolean;
	static Load(ResourceName: string): MaterialExpressionFunctionInput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFunctionInput;
	static GetDefaultObject(): MaterialExpressionFunctionInput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFunctionInput;
	static C(Other: UObject): MaterialExpressionFunctionInput;
}

declare class MaterialExpressionFunctionOutput extends MaterialExpression { 
	OutputName: string;
	Description: string;
	SortPriority: number;
	A: ExpressionInput;
	bLastPreviewed: boolean;
	Id: Guid;
	static Load(ResourceName: string): MaterialExpressionFunctionOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionFunctionOutput;
	static GetDefaultObject(): MaterialExpressionFunctionOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionFunctionOutput;
	static C(Other: UObject): MaterialExpressionFunctionOutput;
}

declare class MaterialExpressionGetMaterialAttributes extends MaterialExpression { 
	MaterialAttributes: MaterialAttributesInput;
	AttributeGetTypes: Guid[];
	static Load(ResourceName: string): MaterialExpressionGetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionGetMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionGetMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionGetMaterialAttributes;
	static C(Other: UObject): MaterialExpressionGetMaterialAttributes;
}

declare class MaterialExpressionGIReplace extends MaterialExpression { 
	Default: ExpressionInput;
	StaticIndirect: ExpressionInput;
	DynamicIndirect: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionGIReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionGIReplace;
	static GetDefaultObject(): MaterialExpressionGIReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionGIReplace;
	static C(Other: UObject): MaterialExpressionGIReplace;
}

declare class MaterialExpressionIf extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	AGreaterThanB: ExpressionInput;
	AEqualsB: ExpressionInput;
	ALessThanB: ExpressionInput;
	EqualsThreshold: number;
	ConstB: number;
	ConstAEqualsB: number;
	static Load(ResourceName: string): MaterialExpressionIf;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionIf;
	static GetDefaultObject(): MaterialExpressionIf;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionIf;
	static C(Other: UObject): MaterialExpressionIf;
}

declare class MaterialExpressionLightmapUVs extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionLightmapUVs;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightmapUVs;
	static GetDefaultObject(): MaterialExpressionLightmapUVs;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightmapUVs;
	static C(Other: UObject): MaterialExpressionLightmapUVs;
}

declare class MaterialExpressionLightmassReplace extends MaterialExpression { 
	Realtime: ExpressionInput;
	Lightmass: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionLightmassReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightmassReplace;
	static GetDefaultObject(): MaterialExpressionLightmassReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightmassReplace;
	static C(Other: UObject): MaterialExpressionLightmassReplace;
}

declare class MaterialExpressionLightVector extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionLightVector;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLightVector;
	static GetDefaultObject(): MaterialExpressionLightVector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLightVector;
	static C(Other: UObject): MaterialExpressionLightVector;
}

declare class MaterialExpressionLinearInterpolate extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Alpha: ExpressionInput;
	ConstA: number;
	ConstB: number;
	ConstAlpha: number;
	static Load(ResourceName: string): MaterialExpressionLinearInterpolate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLinearInterpolate;
	static GetDefaultObject(): MaterialExpressionLinearInterpolate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLinearInterpolate;
	static C(Other: UObject): MaterialExpressionLinearInterpolate;
}

declare class MaterialExpressionLogarithm2 extends MaterialExpression { 
	X: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionLogarithm2;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLogarithm2;
	static GetDefaultObject(): MaterialExpressionLogarithm2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLogarithm2;
	static C(Other: UObject): MaterialExpressionLogarithm2;
}

declare class MaterialExpressionMakeMaterialAttributes extends MaterialExpression { 
	BaseColor: ExpressionInput;
	Metallic: ExpressionInput;
	Specular: ExpressionInput;
	Roughness: ExpressionInput;
	EmissiveColor: ExpressionInput;
	Opacity: ExpressionInput;
	OpacityMask: ExpressionInput;
	Normal: ExpressionInput;
	WorldPositionOffset: ExpressionInput;
	WorldDisplacement: ExpressionInput;
	TessellationMultiplier: ExpressionInput;
	SubsurfaceColor: ExpressionInput;
	ClearCoat: ExpressionInput;
	ClearCoatRoughness: ExpressionInput;
	AmbientOcclusion: ExpressionInput;
	Refraction: ExpressionInput;
	CustomizedUVs: ExpressionInput;
	PixelDepthOffset: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionMakeMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMakeMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionMakeMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMakeMaterialAttributes;
	static C(Other: UObject): MaterialExpressionMakeMaterialAttributes;
}

declare class FunctionExpressionInput { 
	ExpressionInput: MaterialExpressionFunctionInput;
	ExpressionInputId: Guid;
	Input: ExpressionInput;
	clone() : FunctionExpressionInput;
	static C(Other: UObject): FunctionExpressionInput;
}

declare class FunctionExpressionOutput { 
	ExpressionOutput: MaterialExpressionFunctionOutput;
	ExpressionOutputId: Guid;
	Output: ExpressionOutput;
	clone() : FunctionExpressionOutput;
	static C(Other: UObject): FunctionExpressionOutput;
}

declare class MaterialExpressionMaterialFunctionCall extends MaterialExpression { 
	MaterialFunction: MaterialFunction;
	FunctionInputs: FunctionExpressionInput[];
	FunctionOutputs: FunctionExpressionOutput[];
	static Load(ResourceName: string): MaterialExpressionMaterialFunctionCall;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialFunctionCall;
	static GetDefaultObject(): MaterialExpressionMaterialFunctionCall;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialFunctionCall;
	static C(Other: UObject): MaterialExpressionMaterialFunctionCall;
}

declare class MaterialExpressionMaterialProxyReplace extends MaterialExpression { 
	Realtime: ExpressionInput;
	MaterialProxy: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionMaterialProxyReplace;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMaterialProxyReplace;
	static GetDefaultObject(): MaterialExpressionMaterialProxyReplace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMaterialProxyReplace;
	static C(Other: UObject): MaterialExpressionMaterialProxyReplace;
}

declare class MaterialExpressionMax extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionMax;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMax;
	static GetDefaultObject(): MaterialExpressionMax;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMax;
	static C(Other: UObject): MaterialExpressionMax;
}

declare class MaterialExpressionMin extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionMin;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMin;
	static GetDefaultObject(): MaterialExpressionMin;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMin;
	static C(Other: UObject): MaterialExpressionMin;
}

declare class MaterialExpressionMultiply extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionMultiply;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMultiply;
	static GetDefaultObject(): MaterialExpressionMultiply;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMultiply;
	static C(Other: UObject): MaterialExpressionMultiply;
}

declare type ENoiseFunction = 'NOISEFUNCTION_SimplexTex' | 'NOISEFUNCTION_GradientTex' | 'NOISEFUNCTION_GradientTex3D' | 'NOISEFUNCTION_GradientALU' | 'NOISEFUNCTION_ValueALU' | 'NOISEFUNCTION_VoronoiALU';
declare var ENoiseFunction : { NOISEFUNCTION_SimplexTex:'NOISEFUNCTION_SimplexTex',NOISEFUNCTION_GradientTex:'NOISEFUNCTION_GradientTex',NOISEFUNCTION_GradientTex3D:'NOISEFUNCTION_GradientTex3D',NOISEFUNCTION_GradientALU:'NOISEFUNCTION_GradientALU',NOISEFUNCTION_ValueALU:'NOISEFUNCTION_ValueALU',NOISEFUNCTION_VoronoiALU:'NOISEFUNCTION_VoronoiALU', };
declare class MaterialExpressionNoise extends MaterialExpression { 
	Position: ExpressionInput;
	FilterWidth: ExpressionInput;
	Scale: number;
	Quality: number;
	NoiseFunction: ENoiseFunction;
	bTurbulence: boolean;
	Levels: number;
	OutputMin: number;
	OutputMax: number;
	LevelScale: number;
	bTiling: boolean;
	RepeatSize: any;
	static Load(ResourceName: string): MaterialExpressionNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNoise;
	static GetDefaultObject(): MaterialExpressionNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNoise;
	static C(Other: UObject): MaterialExpressionNoise;
}

declare class MaterialExpressionNormalize extends MaterialExpression { 
	VectorInput: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionNormalize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionNormalize;
	static GetDefaultObject(): MaterialExpressionNormalize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionNormalize;
	static C(Other: UObject): MaterialExpressionNormalize;
}

declare class MaterialExpressionObjectBounds extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectBounds;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectBounds;
	static GetDefaultObject(): MaterialExpressionObjectBounds;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectBounds;
	static C(Other: UObject): MaterialExpressionObjectBounds;
}

declare class MaterialExpressionObjectOrientation extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectOrientation;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectOrientation;
	static GetDefaultObject(): MaterialExpressionObjectOrientation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectOrientation;
	static C(Other: UObject): MaterialExpressionObjectOrientation;
}

declare class MaterialExpressionObjectPositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectPositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectPositionWS;
	static GetDefaultObject(): MaterialExpressionObjectPositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectPositionWS;
	static C(Other: UObject): MaterialExpressionObjectPositionWS;
}

declare class MaterialExpressionObjectRadius extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionObjectRadius;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionObjectRadius;
	static GetDefaultObject(): MaterialExpressionObjectRadius;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionObjectRadius;
	static C(Other: UObject): MaterialExpressionObjectRadius;
}

declare class MaterialExpressionOneMinus extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionOneMinus;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionOneMinus;
	static GetDefaultObject(): MaterialExpressionOneMinus;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionOneMinus;
	static C(Other: UObject): MaterialExpressionOneMinus;
}

declare class MaterialExpressionPanner extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Time: ExpressionInput;
	Speed: ExpressionInput;
	SpeedX: number;
	SpeedY: number;
	ConstCoordinate: any;
	bFractionalPart: boolean;
	static Load(ResourceName: string): MaterialExpressionPanner;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPanner;
	static GetDefaultObject(): MaterialExpressionPanner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPanner;
	static C(Other: UObject): MaterialExpressionPanner;
}

declare class MaterialExpressionParameter extends MaterialExpression { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	static Load(ResourceName: string): MaterialExpressionParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParameter;
	static GetDefaultObject(): MaterialExpressionParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParameter;
	static C(Other: UObject): MaterialExpressionParameter;
}

declare class MaterialExpressionScalarParameter extends MaterialExpressionParameter { 
	DefaultValue: number;
	SliderMin: number;
	SliderMax: number;
	static Load(ResourceName: string): MaterialExpressionScalarParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScalarParameter;
	static GetDefaultObject(): MaterialExpressionScalarParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScalarParameter;
	static C(Other: UObject): MaterialExpressionScalarParameter;
}

declare class MaterialExpressionStaticBoolParameter extends MaterialExpressionParameter { 
	DefaultValue: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticBoolParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBoolParameter;
	static GetDefaultObject(): MaterialExpressionStaticBoolParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBoolParameter;
	static C(Other: UObject): MaterialExpressionStaticBoolParameter;
}

declare class MaterialExpressionStaticSwitchParameter extends MaterialExpressionStaticBoolParameter { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static GetDefaultObject(): MaterialExpressionStaticSwitchParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitchParameter;
	static C(Other: UObject): MaterialExpressionStaticSwitchParameter;
}

declare class MaterialExpressionStaticComponentMaskParameter extends MaterialExpressionParameter { 
	Input: ExpressionInput;
	DefaultR: boolean;
	DefaultG: boolean;
	DefaultB: boolean;
	DefaultA: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static GetDefaultObject(): MaterialExpressionStaticComponentMaskParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticComponentMaskParameter;
	static C(Other: UObject): MaterialExpressionStaticComponentMaskParameter;
}

declare class MaterialExpressionVectorParameter extends MaterialExpressionParameter { 
	DefaultValue: LinearColor;
	static Load(ResourceName: string): MaterialExpressionVectorParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorParameter;
	static GetDefaultObject(): MaterialExpressionVectorParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorParameter;
	static C(Other: UObject): MaterialExpressionVectorParameter;
}

declare class MaterialExpressionParticleColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleColor;
	static GetDefaultObject(): MaterialExpressionParticleColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleColor;
	static C(Other: UObject): MaterialExpressionParticleColor;
}

declare class MaterialExpressionParticleDirection extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleDirection;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleDirection;
	static GetDefaultObject(): MaterialExpressionParticleDirection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleDirection;
	static C(Other: UObject): MaterialExpressionParticleDirection;
}

declare class MaterialExpressionParticleMacroUV extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleMacroUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleMacroUV;
	static GetDefaultObject(): MaterialExpressionParticleMacroUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleMacroUV;
	static C(Other: UObject): MaterialExpressionParticleMacroUV;
}

declare class MaterialExpressionParticleMotionBlurFade extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleMotionBlurFade;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleMotionBlurFade;
	static GetDefaultObject(): MaterialExpressionParticleMotionBlurFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleMotionBlurFade;
	static C(Other: UObject): MaterialExpressionParticleMotionBlurFade;
}

declare class MaterialExpressionParticlePositionWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticlePositionWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticlePositionWS;
	static GetDefaultObject(): MaterialExpressionParticlePositionWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticlePositionWS;
	static C(Other: UObject): MaterialExpressionParticlePositionWS;
}

declare class MaterialExpressionParticleRadius extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleRadius;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRadius;
	static GetDefaultObject(): MaterialExpressionParticleRadius;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRadius;
	static C(Other: UObject): MaterialExpressionParticleRadius;
}

declare class MaterialExpressionParticleRandom extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleRandom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRandom;
	static GetDefaultObject(): MaterialExpressionParticleRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRandom;
	static C(Other: UObject): MaterialExpressionParticleRandom;
}

declare class MaterialExpressionParticleRelativeTime extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleRelativeTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleRelativeTime;
	static GetDefaultObject(): MaterialExpressionParticleRelativeTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleRelativeTime;
	static C(Other: UObject): MaterialExpressionParticleRelativeTime;
}

declare class MaterialExpressionParticleSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSize;
	static GetDefaultObject(): MaterialExpressionParticleSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSize;
	static C(Other: UObject): MaterialExpressionParticleSize;
}

declare class MaterialExpressionParticleSpeed extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionParticleSpeed;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSpeed;
	static GetDefaultObject(): MaterialExpressionParticleSpeed;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSpeed;
	static C(Other: UObject): MaterialExpressionParticleSpeed;
}

declare class MaterialExpressionPerInstanceFadeAmount extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPerInstanceFadeAmount;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceFadeAmount;
	static GetDefaultObject(): MaterialExpressionPerInstanceFadeAmount;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceFadeAmount;
	static C(Other: UObject): MaterialExpressionPerInstanceFadeAmount;
}

declare class MaterialExpressionPerInstanceRandom extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPerInstanceRandom;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPerInstanceRandom;
	static GetDefaultObject(): MaterialExpressionPerInstanceRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPerInstanceRandom;
	static C(Other: UObject): MaterialExpressionPerInstanceRandom;
}

declare class MaterialExpressionPixelDepth extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPixelDepth;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPixelDepth;
	static GetDefaultObject(): MaterialExpressionPixelDepth;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPixelDepth;
	static C(Other: UObject): MaterialExpressionPixelDepth;
}

declare class MaterialExpressionPixelNormalWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPixelNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPixelNormalWS;
	static GetDefaultObject(): MaterialExpressionPixelNormalWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPixelNormalWS;
	static C(Other: UObject): MaterialExpressionPixelNormalWS;
}

declare class MaterialExpressionPower extends MaterialExpression { 
	Base: ExpressionInput;
	Exponent: ExpressionInput;
	ConstExponent: number;
	static Load(ResourceName: string): MaterialExpressionPower;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPower;
	static GetDefaultObject(): MaterialExpressionPower;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPower;
	static C(Other: UObject): MaterialExpressionPower;
}

declare class MaterialExpressionPrecomputedAOMask extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPrecomputedAOMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPrecomputedAOMask;
	static GetDefaultObject(): MaterialExpressionPrecomputedAOMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPrecomputedAOMask;
	static C(Other: UObject): MaterialExpressionPrecomputedAOMask;
}

declare class MaterialExpressionPreSkinnedNormal extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPreSkinnedNormal;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedNormal;
	static GetDefaultObject(): MaterialExpressionPreSkinnedNormal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedNormal;
	static C(Other: UObject): MaterialExpressionPreSkinnedNormal;
}

declare class MaterialExpressionPreSkinnedPosition extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionPreSkinnedPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedPosition;
	static GetDefaultObject(): MaterialExpressionPreSkinnedPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedPosition;
	static C(Other: UObject): MaterialExpressionPreSkinnedPosition;
}

declare class MaterialExpressionPreviousFrameSwitch extends MaterialExpression { 
	CurrentFrame: ExpressionInput;
	PreviousFrame: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionPreviousFrameSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreviousFrameSwitch;
	static GetDefaultObject(): MaterialExpressionPreviousFrameSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreviousFrameSwitch;
	static C(Other: UObject): MaterialExpressionPreviousFrameSwitch;
}

declare class MaterialExpressionQualitySwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionQualitySwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionQualitySwitch;
	static GetDefaultObject(): MaterialExpressionQualitySwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionQualitySwitch;
	static C(Other: UObject): MaterialExpressionQualitySwitch;
}

declare class MaterialExpressionReflectionVectorWS extends MaterialExpression { 
	CustomWorldNormal: ExpressionInput;
	bNormalizeCustomWorldNormal: boolean;
	static Load(ResourceName: string): MaterialExpressionReflectionVectorWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionReflectionVectorWS;
	static GetDefaultObject(): MaterialExpressionReflectionVectorWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionReflectionVectorWS;
	static C(Other: UObject): MaterialExpressionReflectionVectorWS;
}

declare class MaterialExpressionReroute extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionReroute;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionReroute;
	static GetDefaultObject(): MaterialExpressionReroute;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionReroute;
	static C(Other: UObject): MaterialExpressionReroute;
}

declare class MaterialExpressionRotateAboutAxis extends MaterialExpression { 
	NormalizedRotationAxis: ExpressionInput;
	RotationAngle: ExpressionInput;
	PivotPoint: ExpressionInput;
	Position: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionRotateAboutAxis;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRotateAboutAxis;
	static GetDefaultObject(): MaterialExpressionRotateAboutAxis;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRotateAboutAxis;
	static C(Other: UObject): MaterialExpressionRotateAboutAxis;
}

declare class MaterialExpressionRotator extends MaterialExpression { 
	Coordinate: ExpressionInput;
	Time: ExpressionInput;
	CenterX: number;
	CenterY: number;
	Speed: number;
	ConstCoordinate: any;
	static Load(ResourceName: string): MaterialExpressionRotator;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRotator;
	static GetDefaultObject(): MaterialExpressionRotator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRotator;
	static C(Other: UObject): MaterialExpressionRotator;
}

declare class MaterialExpressionRound extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionRound;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRound;
	static GetDefaultObject(): MaterialExpressionRound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRound;
	static C(Other: UObject): MaterialExpressionRound;
}

declare class MaterialExpressionSaturate extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSaturate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSaturate;
	static GetDefaultObject(): MaterialExpressionSaturate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSaturate;
	static C(Other: UObject): MaterialExpressionSaturate;
}

declare type EMaterialSceneAttributeInputMode = 'Coordinates' | 'OffsetFraction';
declare var EMaterialSceneAttributeInputMode : { Coordinates:'Coordinates',OffsetFraction:'OffsetFraction', };
declare class MaterialExpressionSceneColor extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	OffsetFraction: ExpressionInput;
	ConstInput: Vector2D;
	static Load(ResourceName: string): MaterialExpressionSceneColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneColor;
	static GetDefaultObject(): MaterialExpressionSceneColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneColor;
	static C(Other: UObject): MaterialExpressionSceneColor;
}

declare class MaterialExpressionSceneDepth extends MaterialExpression { 
	InputMode: EMaterialSceneAttributeInputMode;
	Input: ExpressionInput;
	Coordinates: ExpressionInput;
	ConstInput: Vector2D;
	static Load(ResourceName: string): MaterialExpressionSceneDepth;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneDepth;
	static GetDefaultObject(): MaterialExpressionSceneDepth;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneDepth;
	static C(Other: UObject): MaterialExpressionSceneDepth;
}

declare class MaterialExpressionSceneTexelSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionSceneTexelSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexelSize;
	static GetDefaultObject(): MaterialExpressionSceneTexelSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexelSize;
	static C(Other: UObject): MaterialExpressionSceneTexelSize;
}

declare type ESceneTextureId = 'PPI_SceneColor' | 'PPI_SceneDepth' | 'PPI_DiffuseColor' | 'PPI_SpecularColor' | 'PPI_SubsurfaceColor' | 'PPI_BaseColor' | 'PPI_Specular' | 'PPI_Metallic' | 'PPI_WorldNormal' | 'PPI_SeparateTranslucency' | 'PPI_Opacity' | 'PPI_Roughness' | 'PPI_MaterialAO' | 'PPI_CustomDepth' | 'PPI_PostProcessInput0' | 'PPI_PostProcessInput1' | 'PPI_PostProcessInput2' | 'PPI_PostProcessInput3' | 'PPI_PostProcessInput4' | 'PPI_PostProcessInput5' | 'PPI_PostProcessInput6' | 'PPI_DecalMask' | 'PPI_ShadingModel' | 'PPI_AmbientOcclusion' | 'PPI_CustomStencil' | 'PPI_StoredBaseColor' | 'PPI_StoredSpecular';
declare var ESceneTextureId : { PPI_SceneColor:'PPI_SceneColor',PPI_SceneDepth:'PPI_SceneDepth',PPI_DiffuseColor:'PPI_DiffuseColor',PPI_SpecularColor:'PPI_SpecularColor',PPI_SubsurfaceColor:'PPI_SubsurfaceColor',PPI_BaseColor:'PPI_BaseColor',PPI_Specular:'PPI_Specular',PPI_Metallic:'PPI_Metallic',PPI_WorldNormal:'PPI_WorldNormal',PPI_SeparateTranslucency:'PPI_SeparateTranslucency',PPI_Opacity:'PPI_Opacity',PPI_Roughness:'PPI_Roughness',PPI_MaterialAO:'PPI_MaterialAO',PPI_CustomDepth:'PPI_CustomDepth',PPI_PostProcessInput0:'PPI_PostProcessInput0',PPI_PostProcessInput1:'PPI_PostProcessInput1',PPI_PostProcessInput2:'PPI_PostProcessInput2',PPI_PostProcessInput3:'PPI_PostProcessInput3',PPI_PostProcessInput4:'PPI_PostProcessInput4',PPI_PostProcessInput5:'PPI_PostProcessInput5',PPI_PostProcessInput6:'PPI_PostProcessInput6',PPI_DecalMask:'PPI_DecalMask',PPI_ShadingModel:'PPI_ShadingModel',PPI_AmbientOcclusion:'PPI_AmbientOcclusion',PPI_CustomStencil:'PPI_CustomStencil',PPI_StoredBaseColor:'PPI_StoredBaseColor',PPI_StoredSpecular:'PPI_StoredSpecular', };
declare class MaterialExpressionSceneTexture extends MaterialExpression { 
	Coordinates: ExpressionInput;
	SceneTextureId: ESceneTextureId;
	bClampUVs: boolean;
	bFiltered: boolean;
	static Load(ResourceName: string): MaterialExpressionSceneTexture;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexture;
	static GetDefaultObject(): MaterialExpressionSceneTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexture;
	static C(Other: UObject): MaterialExpressionSceneTexture;
}

declare type EMaterialExpressionScreenPositionMapping = 'MESP_SceneTextureUV' | 'MESP_ViewportUV';
declare var EMaterialExpressionScreenPositionMapping : { MESP_SceneTextureUV:'MESP_SceneTextureUV',MESP_ViewportUV:'MESP_ViewportUV', };
declare class MaterialExpressionScreenPosition extends MaterialExpression { 
	Mapping: EMaterialExpressionScreenPositionMapping;
	static Load(ResourceName: string): MaterialExpressionScreenPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScreenPosition;
	static GetDefaultObject(): MaterialExpressionScreenPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScreenPosition;
	static C(Other: UObject): MaterialExpressionScreenPosition;
}

declare class MaterialExpressionSetMaterialAttributes extends MaterialExpression { 
	Inputs: ExpressionInput[];
	AttributeSetTypes: Guid[];
	static Load(ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionSetMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSetMaterialAttributes;
	static C(Other: UObject): MaterialExpressionSetMaterialAttributes;
}

declare class MaterialExpressionSine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionSine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSine;
	static GetDefaultObject(): MaterialExpressionSine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSine;
	static C(Other: UObject): MaterialExpressionSine;
}

declare type ESpeedTreeGeometryType = 'STG_Branch' | 'STG_Frond' | 'STG_Leaf' | 'STG_FacingLeaf' | 'STG_Billboard';
declare var ESpeedTreeGeometryType : { STG_Branch:'STG_Branch',STG_Frond:'STG_Frond',STG_Leaf:'STG_Leaf',STG_FacingLeaf:'STG_FacingLeaf',STG_Billboard:'STG_Billboard', };
declare type ESpeedTreeWindType = 'STW_None' | 'STW_Fastest' | 'STW_Fast' | 'STW_Better' | 'STW_Best' | 'STW_Palm' | 'STW_BestPlus';
declare var ESpeedTreeWindType : { STW_None:'STW_None',STW_Fastest:'STW_Fastest',STW_Fast:'STW_Fast',STW_Better:'STW_Better',STW_Best:'STW_Best',STW_Palm:'STW_Palm',STW_BestPlus:'STW_BestPlus', };
declare type ESpeedTreeLODType = 'STLOD_Pop' | 'STLOD_Smooth';
declare var ESpeedTreeLODType : { STLOD_Pop:'STLOD_Pop',STLOD_Smooth:'STLOD_Smooth', };
declare class MaterialExpressionSpeedTree extends MaterialExpression { 
	GeometryType: ESpeedTreeGeometryType;
	WindType: ESpeedTreeWindType;
	LODType: ESpeedTreeLODType;
	BillboardThreshold: number;
	bAccurateWindVelocities: boolean;
	static Load(ResourceName: string): MaterialExpressionSpeedTree;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSpeedTree;
	static GetDefaultObject(): MaterialExpressionSpeedTree;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSpeedTree;
	static C(Other: UObject): MaterialExpressionSpeedTree;
}

declare class MaterialExpressionSphereMask extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Radius: ExpressionInput;
	Hardness: ExpressionInput;
	AttenuationRadius: number;
	HardnessPercent: number;
	static Load(ResourceName: string): MaterialExpressionSphereMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphereMask;
	static GetDefaultObject(): MaterialExpressionSphereMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphereMask;
	static C(Other: UObject): MaterialExpressionSphereMask;
}

declare class MaterialExpressionSphericalParticleOpacity extends MaterialExpression { 
	Density: ExpressionInput;
	ConstantDensity: number;
	static Load(ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static GetDefaultObject(): MaterialExpressionSphericalParticleOpacity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphericalParticleOpacity;
	static C(Other: UObject): MaterialExpressionSphericalParticleOpacity;
}

declare class MaterialExpressionSquareRoot extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSquareRoot;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSquareRoot;
	static GetDefaultObject(): MaterialExpressionSquareRoot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSquareRoot;
	static C(Other: UObject): MaterialExpressionSquareRoot;
}

declare class MaterialExpressionStaticBool extends MaterialExpression { 
	Value: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticBool;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBool;
	static GetDefaultObject(): MaterialExpressionStaticBool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBool;
	static C(Other: UObject): MaterialExpressionStaticBool;
}

declare class MaterialExpressionStaticSwitch extends MaterialExpression { 
	DefaultValue: boolean;
	A: ExpressionInput;
	B: ExpressionInput;
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionStaticSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitch;
	static GetDefaultObject(): MaterialExpressionStaticSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitch;
	static C(Other: UObject): MaterialExpressionStaticSwitch;
}

declare class MaterialExpressionSubtract extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionSubtract;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSubtract;
	static GetDefaultObject(): MaterialExpressionSubtract;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSubtract;
	static C(Other: UObject): MaterialExpressionSubtract;
}

declare class MaterialExpressionTangent extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionTangent;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangent;
	static GetDefaultObject(): MaterialExpressionTangent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangent;
	static C(Other: UObject): MaterialExpressionTangent;
}

declare type EMaterialSamplerType = 'SAMPLERTYPE_Color' | 'SAMPLERTYPE_Grayscale' | 'SAMPLERTYPE_Alpha' | 'SAMPLERTYPE_Normal' | 'SAMPLERTYPE_Masks' | 'SAMPLERTYPE_DistanceFieldFont' | 'SAMPLERTYPE_LinearColor' | 'SAMPLERTYPE_LinearGrayscale';
declare var EMaterialSamplerType : { SAMPLERTYPE_Color:'SAMPLERTYPE_Color',SAMPLERTYPE_Grayscale:'SAMPLERTYPE_Grayscale',SAMPLERTYPE_Alpha:'SAMPLERTYPE_Alpha',SAMPLERTYPE_Normal:'SAMPLERTYPE_Normal',SAMPLERTYPE_Masks:'SAMPLERTYPE_Masks',SAMPLERTYPE_DistanceFieldFont:'SAMPLERTYPE_DistanceFieldFont',SAMPLERTYPE_LinearColor:'SAMPLERTYPE_LinearColor',SAMPLERTYPE_LinearGrayscale:'SAMPLERTYPE_LinearGrayscale', };
declare class MaterialExpressionTextureBase extends MaterialExpression { 
	Texture: Texture;
	SamplerType: EMaterialSamplerType;
	IsDefaultMeshpaintTexture: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureBase;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureBase;
	static GetDefaultObject(): MaterialExpressionTextureBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureBase;
	static C(Other: UObject): MaterialExpressionTextureBase;
}

declare class MaterialExpressionTextureObject extends MaterialExpressionTextureBase { 
	static Load(ResourceName: string): MaterialExpressionTextureObject;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObject;
	static GetDefaultObject(): MaterialExpressionTextureObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObject;
	static C(Other: UObject): MaterialExpressionTextureObject;
}

declare type ETextureMipValueMode = 'TMVM_None' | 'TMVM_MipLevel' | 'TMVM_MipBias' | 'TMVM_Derivative';
declare var ETextureMipValueMode : { TMVM_None:'TMVM_None',TMVM_MipLevel:'TMVM_MipLevel',TMVM_MipBias:'TMVM_MipBias',TMVM_Derivative:'TMVM_Derivative', };
declare type ESamplerSourceMode = 'SSM_FromTextureAsset' | 'SSM_Wrap_WorldGroupSettings' | 'SSM_Clamp_WorldGroupSettings';
declare var ESamplerSourceMode : { SSM_FromTextureAsset:'SSM_FromTextureAsset',SSM_Wrap_WorldGroupSettings:'SSM_Wrap_WorldGroupSettings',SSM_Clamp_WorldGroupSettings:'SSM_Clamp_WorldGroupSettings', };
declare class MaterialExpressionTextureSample extends MaterialExpressionTextureBase { 
	Coordinates: ExpressionInput;
	TextureObject: ExpressionInput;
	MipValue: ExpressionInput;
	CoordinatesDX: ExpressionInput;
	CoordinatesDY: ExpressionInput;
	MipValueMode: ETextureMipValueMode;
	SamplerSource: ESamplerSourceMode;
	ConstCoordinate: any;
	ConstMipValue: number;
	static Load(ResourceName: string): MaterialExpressionTextureSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSample;
	static GetDefaultObject(): MaterialExpressionTextureSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSample;
	static C(Other: UObject): MaterialExpressionTextureSample;
}

declare class MaterialExpressionParticleSubUV extends MaterialExpressionTextureSample { 
	bBlend: boolean;
	static Load(ResourceName: string): MaterialExpressionParticleSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionParticleSubUV;
	static GetDefaultObject(): MaterialExpressionParticleSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionParticleSubUV;
	static C(Other: UObject): MaterialExpressionParticleSubUV;
}

declare class MaterialExpressionTextureSampleParameter extends MaterialExpressionTextureSample { 
	ParameterName: string;
	ExpressionGUID: Guid;
	Group: string;
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter;
	static C(Other: UObject): MaterialExpressionTextureSampleParameter;
}

declare class MaterialExpressionTextureObjectParameter extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureObjectParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObjectParameter;
	static GetDefaultObject(): MaterialExpressionTextureObjectParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObjectParameter;
	static C(Other: UObject): MaterialExpressionTextureObjectParameter;
}

declare class MaterialExpressionTextureSampleParameter2D extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameter2D;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameter2D;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameter2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameter2D;
	static C(Other: UObject): MaterialExpressionTextureSampleParameter2D;
}

declare type ETextureColorChannel = 'TCC_Red' | 'TCC_Green' | 'TCC_Blue' | 'TCC_Alpha';
declare var ETextureColorChannel : { TCC_Red:'TCC_Red',TCC_Green:'TCC_Green',TCC_Blue:'TCC_Blue',TCC_Alpha:'TCC_Alpha', };
declare class MaterialExpressionAntialiasedTextureMask extends MaterialExpressionTextureSampleParameter2D { 
	Threshold: number;
	Channel: ETextureColorChannel;
	static Load(ResourceName: string): MaterialExpressionAntialiasedTextureMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionAntialiasedTextureMask;
	static GetDefaultObject(): MaterialExpressionAntialiasedTextureMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionAntialiasedTextureMask;
	static C(Other: UObject): MaterialExpressionAntialiasedTextureMask;
}

declare class MaterialExpressionTextureSampleParameterSubUV extends MaterialExpressionTextureSampleParameter2D { 
	bBlend: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterSubUV;
	static C(Other: UObject): MaterialExpressionTextureSampleParameterSubUV;
}

declare class MaterialExpressionTextureSampleParameterCube extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterCube;
	static C(Other: UObject): MaterialExpressionTextureSampleParameterCube;
}

declare class MaterialExpressionTextureCoordinate extends MaterialExpression { 
	CoordinateIndex: number;
	UTiling: number;
	VTiling: number;
	UnMirrorU: boolean;
	UnMirrorV: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureCoordinate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureCoordinate;
	static GetDefaultObject(): MaterialExpressionTextureCoordinate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureCoordinate;
	static C(Other: UObject): MaterialExpressionTextureCoordinate;
}

declare type EMaterialExposedTextureProperty = 'TMTM_TextureSize' | 'TMTM_TexelSize';
declare var EMaterialExposedTextureProperty : { TMTM_TextureSize:'TMTM_TextureSize',TMTM_TexelSize:'TMTM_TexelSize', };
declare class MaterialExpressionTextureProperty extends MaterialExpression { 
	TextureObject: ExpressionInput;
	Property: EMaterialExposedTextureProperty;
	static Load(ResourceName: string): MaterialExpressionTextureProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureProperty;
	static GetDefaultObject(): MaterialExpressionTextureProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureProperty;
	static C(Other: UObject): MaterialExpressionTextureProperty;
}

declare class MaterialExpressionTime extends MaterialExpression { 
	bIgnorePause: boolean;
	bOverride_Period: boolean;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTime;
	static GetDefaultObject(): MaterialExpressionTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTime;
	static C(Other: UObject): MaterialExpressionTime;
}

declare type EMaterialVectorCoordTransformSource = 'TRANSFORMSOURCE_Tangent' | 'TRANSFORMSOURCE_Local' | 'TRANSFORMSOURCE_World' | 'TRANSFORMSOURCE_View' | 'TRANSFORMSOURCE_Camera' | 'TRANSFORMSOURCE_ParticleWorld';
declare var EMaterialVectorCoordTransformSource : { TRANSFORMSOURCE_Tangent:'TRANSFORMSOURCE_Tangent',TRANSFORMSOURCE_Local:'TRANSFORMSOURCE_Local',TRANSFORMSOURCE_World:'TRANSFORMSOURCE_World',TRANSFORMSOURCE_View:'TRANSFORMSOURCE_View',TRANSFORMSOURCE_Camera:'TRANSFORMSOURCE_Camera',TRANSFORMSOURCE_ParticleWorld:'TRANSFORMSOURCE_ParticleWorld', };
declare type EMaterialVectorCoordTransform = 'TRANSFORM_Tangent' | 'TRANSFORM_Local' | 'TRANSFORM_World' | 'TRANSFORM_View' | 'TRANSFORM_Camera' | 'TRANSFORM_ParticleWorld';
declare var EMaterialVectorCoordTransform : { TRANSFORM_Tangent:'TRANSFORM_Tangent',TRANSFORM_Local:'TRANSFORM_Local',TRANSFORM_World:'TRANSFORM_World',TRANSFORM_View:'TRANSFORM_View',TRANSFORM_Camera:'TRANSFORM_Camera',TRANSFORM_ParticleWorld:'TRANSFORM_ParticleWorld', };
declare class MaterialExpressionTransform extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialVectorCoordTransformSource;
	TransformType: EMaterialVectorCoordTransform;
	static Load(ResourceName: string): MaterialExpressionTransform;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransform;
	static GetDefaultObject(): MaterialExpressionTransform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransform;
	static C(Other: UObject): MaterialExpressionTransform;
}

declare type EMaterialPositionTransformSource = 'TRANSFORMPOSSOURCE_Local' | 'TRANSFORMPOSSOURCE_World' | 'TRANSFORMPOSSOURCE_TranslatedWorld' | 'TRANSFORMPOSSOURCE_View' | 'TRANSFORMPOSSOURCE_Camera' | 'TRANSFORMPOSSOURCE_Particle';
declare var EMaterialPositionTransformSource : { TRANSFORMPOSSOURCE_Local:'TRANSFORMPOSSOURCE_Local',TRANSFORMPOSSOURCE_World:'TRANSFORMPOSSOURCE_World',TRANSFORMPOSSOURCE_TranslatedWorld:'TRANSFORMPOSSOURCE_TranslatedWorld',TRANSFORMPOSSOURCE_View:'TRANSFORMPOSSOURCE_View',TRANSFORMPOSSOURCE_Camera:'TRANSFORMPOSSOURCE_Camera',TRANSFORMPOSSOURCE_Particle:'TRANSFORMPOSSOURCE_Particle', };
declare class MaterialExpressionTransformPosition extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialPositionTransformSource;
	TransformType: EMaterialPositionTransformSource;
	static Load(ResourceName: string): MaterialExpressionTransformPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransformPosition;
	static GetDefaultObject(): MaterialExpressionTransformPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransformPosition;
	static C(Other: UObject): MaterialExpressionTransformPosition;
}

declare class MaterialExpressionTruncate extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionTruncate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTruncate;
	static GetDefaultObject(): MaterialExpressionTruncate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTruncate;
	static C(Other: UObject): MaterialExpressionTruncate;
}

declare class MaterialExpressionTwoSidedSign extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionTwoSidedSign;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTwoSidedSign;
	static GetDefaultObject(): MaterialExpressionTwoSidedSign;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTwoSidedSign;
	static C(Other: UObject): MaterialExpressionTwoSidedSign;
}

declare type EVectorNoiseFunction = 'VNF_CellnoiseALU' | 'VNF_VectorALU' | 'VNF_GradientALU' | 'VNF_CurlALU' | 'VNF_VoronoiALU';
declare var EVectorNoiseFunction : { VNF_CellnoiseALU:'VNF_CellnoiseALU',VNF_VectorALU:'VNF_VectorALU',VNF_GradientALU:'VNF_GradientALU',VNF_CurlALU:'VNF_CurlALU',VNF_VoronoiALU:'VNF_VoronoiALU', };
declare class MaterialExpressionVectorNoise extends MaterialExpression { 
	Position: ExpressionInput;
	NoiseFunction: EVectorNoiseFunction;
	Quality: number;
	bTiling: boolean;
	TileSize: any;
	static Load(ResourceName: string): MaterialExpressionVectorNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorNoise;
	static GetDefaultObject(): MaterialExpressionVectorNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorNoise;
	static C(Other: UObject): MaterialExpressionVectorNoise;
}

declare class MaterialExpressionVertexColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexColor;
	static GetDefaultObject(): MaterialExpressionVertexColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexColor;
	static C(Other: UObject): MaterialExpressionVertexColor;
}

declare class MaterialExpressionVertexNormalWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexNormalWS;
	static GetDefaultObject(): MaterialExpressionVertexNormalWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexNormalWS;
	static C(Other: UObject): MaterialExpressionVertexNormalWS;
}

declare type EMaterialExposedViewProperty = 'MEVP_BufferSize' | 'MEVP_FieldOfView' | 'MEVP_TanHalfFieldOfView' | 'MEVP_ViewSize' | 'MEVP_WorldSpaceViewPosition' | 'MEVP_WorldSpaceCameraPosition';
declare var EMaterialExposedViewProperty : { MEVP_BufferSize:'MEVP_BufferSize',MEVP_FieldOfView:'MEVP_FieldOfView',MEVP_TanHalfFieldOfView:'MEVP_TanHalfFieldOfView',MEVP_ViewSize:'MEVP_ViewSize',MEVP_WorldSpaceViewPosition:'MEVP_WorldSpaceViewPosition',MEVP_WorldSpaceCameraPosition:'MEVP_WorldSpaceCameraPosition', };
declare class MaterialExpressionViewProperty extends MaterialExpression { 
	Property: EMaterialExposedViewProperty;
	static Load(ResourceName: string): MaterialExpressionViewProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewProperty;
	static GetDefaultObject(): MaterialExpressionViewProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewProperty;
	static C(Other: UObject): MaterialExpressionViewProperty;
}

declare class MaterialExpressionViewSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionViewSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewSize;
	static GetDefaultObject(): MaterialExpressionViewSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewSize;
	static C(Other: UObject): MaterialExpressionViewSize;
}

declare type EWorldPositionIncludedOffsets = 'WPT_Default' | 'WPT_ExcludeAllShaderOffsets' | 'WPT_CameraRelative' | 'WPT_CameraRelativeNoOffsets';
declare var EWorldPositionIncludedOffsets : { WPT_Default:'WPT_Default',WPT_ExcludeAllShaderOffsets:'WPT_ExcludeAllShaderOffsets',WPT_CameraRelative:'WPT_CameraRelative',WPT_CameraRelativeNoOffsets:'WPT_CameraRelativeNoOffsets', };
declare class MaterialExpressionWorldPosition extends MaterialExpression { 
	WorldPositionShaderOffset: EWorldPositionIncludedOffsets;
	static Load(ResourceName: string): MaterialExpressionWorldPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionWorldPosition;
	static GetDefaultObject(): MaterialExpressionWorldPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionWorldPosition;
	static C(Other: UObject): MaterialExpressionWorldPosition;
}

declare class MatineeInterface extends Interface { 
	static Load(ResourceName: string): MatineeInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeInterface;
	static GetDefaultObject(): MatineeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeInterface;
	static C(Other: UObject): MatineeInterface;
}

declare class NavArea_Default extends NavArea { 
	static Load(ResourceName: string): NavArea_Default;
	static Find(Outer: UObject, ResourceName: string): NavArea_Default;
	static GetDefaultObject(): NavArea_Default;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Default;
	static C(Other: UObject): NavArea_Default;
}

declare class NavArea_LowHeight extends NavArea { 
	static Load(ResourceName: string): NavArea_LowHeight;
	static Find(Outer: UObject, ResourceName: string): NavArea_LowHeight;
	static GetDefaultObject(): NavArea_LowHeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_LowHeight;
	static C(Other: UObject): NavArea_LowHeight;
}

declare class NavArea_Null extends NavArea { 
	static Load(ResourceName: string): NavArea_Null;
	static Find(Outer: UObject, ResourceName: string): NavArea_Null;
	static GetDefaultObject(): NavArea_Null;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Null;
	static C(Other: UObject): NavArea_Null;
}

declare class NavArea_Obstacle extends NavArea { 
	static Load(ResourceName: string): NavArea_Obstacle;
	static Find(Outer: UObject, ResourceName: string): NavArea_Obstacle;
	static GetDefaultObject(): NavArea_Obstacle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Obstacle;
	static C(Other: UObject): NavArea_Obstacle;
}

declare class NavAreaMeta extends NavArea { 
	static Load(ResourceName: string): NavAreaMeta;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta;
	static GetDefaultObject(): NavAreaMeta;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta;
	static C(Other: UObject): NavAreaMeta;
}

declare class NavAreaMeta_SwitchByAgent extends NavAreaMeta { 
	Agent0Area: UnrealEngineClass;
	Agent1Area: UnrealEngineClass;
	Agent2Area: UnrealEngineClass;
	Agent3Area: UnrealEngineClass;
	Agent4Area: UnrealEngineClass;
	Agent5Area: UnrealEngineClass;
	Agent6Area: UnrealEngineClass;
	Agent7Area: UnrealEngineClass;
	Agent8Area: UnrealEngineClass;
	Agent9Area: UnrealEngineClass;
	Agent10Area: UnrealEngineClass;
	Agent11Area: UnrealEngineClass;
	Agent12Area: UnrealEngineClass;
	Agent13Area: UnrealEngineClass;
	Agent14Area: UnrealEngineClass;
	Agent15Area: UnrealEngineClass;
	static Load(ResourceName: string): NavAreaMeta_SwitchByAgent;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta_SwitchByAgent;
	static GetDefaultObject(): NavAreaMeta_SwitchByAgent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta_SwitchByAgent;
	static C(Other: UObject): NavAreaMeta_SwitchByAgent;
}

declare class NavEdgeProviderInterface extends Interface { 
	static Load(ResourceName: string): NavEdgeProviderInterface;
	static Find(Outer: UObject, ResourceName: string): NavEdgeProviderInterface;
	static GetDefaultObject(): NavEdgeProviderInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavEdgeProviderInterface;
	static C(Other: UObject): NavEdgeProviderInterface;
}

declare class RecastNavMeshDataChunk extends NavigationDataChunk { 
	static Load(ResourceName: string): RecastNavMeshDataChunk;
	static Find(Outer: UObject, ResourceName: string): RecastNavMeshDataChunk;
	static GetDefaultObject(): RecastNavMeshDataChunk;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMeshDataChunk;
	static C(Other: UObject): RecastNavMeshDataChunk;
}

declare class NavigationPathGenerator extends Interface { 
	static Load(ResourceName: string): NavigationPathGenerator;
	static Find(Outer: UObject, ResourceName: string): NavigationPathGenerator;
	static GetDefaultObject(): NavigationPathGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPathGenerator;
	static C(Other: UObject): NavigationPathGenerator;
}

declare class RecastFilter_UseDefaultArea extends NavigationQueryFilter { 
	static Load(ResourceName: string): RecastFilter_UseDefaultArea;
	static Find(Outer: UObject, ResourceName: string): RecastFilter_UseDefaultArea;
	static GetDefaultObject(): RecastFilter_UseDefaultArea;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastFilter_UseDefaultArea;
	static C(Other: UObject): RecastFilter_UseDefaultArea;
}

declare class NavLinkTrivial extends NavLinkDefinition { 
	static Load(ResourceName: string): NavLinkTrivial;
	static Find(Outer: UObject, ResourceName: string): NavLinkTrivial;
	static GetDefaultObject(): NavLinkTrivial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkTrivial;
	static C(Other: UObject): NavLinkTrivial;
}

declare class NavNodeInterface extends Interface { 
	static Load(ResourceName: string): NavNodeInterface;
	static Find(Outer: UObject, ResourceName: string): NavNodeInterface;
	static GetDefaultObject(): NavNodeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavNodeInterface;
	static C(Other: UObject): NavNodeInterface;
}

declare class PackageMapClient extends PackageMap { 
	static Load(ResourceName: string): PackageMapClient;
	static Find(Outer: UObject, ResourceName: string): PackageMapClient;
	static GetDefaultObject(): PackageMapClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMapClient;
	static C(Other: UObject): PackageMapClient;
}

declare class DemoNetConnection extends NetConnection { 
	static Load(ResourceName: string): DemoNetConnection;
	static Find(Outer: UObject, ResourceName: string): DemoNetConnection;
	static GetDefaultObject(): DemoNetConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoNetConnection;
	static C(Other: UObject): DemoNetConnection;
}

declare class ObjectLibrary extends UObject { 
	ObjectBaseClass: UnrealEngineClass;
	bHasBlueprintClasses: boolean;
	Objects: UObject[];
	WeakObjects: any[];
	bUseWeakReferences: boolean;
	bIsFullyLoaded: boolean;
	static Load(ResourceName: string): ObjectLibrary;
	static Find(Outer: UObject, ResourceName: string): ObjectLibrary;
	static GetDefaultObject(): ObjectLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibrary;
	static C(Other: UObject): ObjectLibrary;
}

declare class ObjectReferencer extends UObject { 
	ReferencedObjects: UObject[];
	static Load(ResourceName: string): ObjectReferencer;
	static Find(Outer: UObject, ResourceName: string): ObjectReferencer;
	static GetDefaultObject(): ObjectReferencer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectReferencer;
	static C(Other: UObject): ObjectReferencer;
}

declare class OnlineBlueprintCallProxyBase extends UObject { 
	static Load(ResourceName: string): OnlineBlueprintCallProxyBase;
	static Find(Outer: UObject, ResourceName: string): OnlineBlueprintCallProxyBase;
	static GetDefaultObject(): OnlineBlueprintCallProxyBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBlueprintCallProxyBase;
	Activate(): void;
	static C(Other: UObject): OnlineBlueprintCallProxyBase;
}

declare class OnlineEngineInterface extends UObject { 
	static Load(ResourceName: string): OnlineEngineInterface;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterface;
	static GetDefaultObject(): OnlineEngineInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterface;
	static C(Other: UObject): OnlineEngineInterface;
}

declare class ParticleSpriteEmitter extends ParticleEmitter { 
	static Load(ResourceName: string): ParticleSpriteEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleSpriteEmitter;
	static GetDefaultObject(): ParticleSpriteEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSpriteEmitter;
	static C(Other: UObject): ParticleSpriteEmitter;
}

declare class ParticleModuleAccelerationBase extends ParticleModule { 
	bAlwaysInWorldSpace: boolean;
	static Load(ResourceName: string): ParticleModuleAccelerationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationBase;
	static GetDefaultObject(): ParticleModuleAccelerationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationBase;
	static C(Other: UObject): ParticleModuleAccelerationBase;
}

declare class ParticleModuleAcceleration extends ParticleModuleAccelerationBase { 
	Acceleration: RawDistributionVector;
	bApplyOwnerScale: boolean;
	static Load(ResourceName: string): ParticleModuleAcceleration;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAcceleration;
	static GetDefaultObject(): ParticleModuleAcceleration;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAcceleration;
	static C(Other: UObject): ParticleModuleAcceleration;
}

declare class ParticleModuleAccelerationConstant extends ParticleModuleAccelerationBase { 
	Acceleration: Vector;
	static Load(ResourceName: string): ParticleModuleAccelerationConstant;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationConstant;
	static GetDefaultObject(): ParticleModuleAccelerationConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationConstant;
	static C(Other: UObject): ParticleModuleAccelerationConstant;
}

declare class ParticleModuleAccelerationDrag extends ParticleModuleAccelerationBase { 
	DragCoefficient: DistributionFloat;
	DragCoefficientRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAccelerationDrag;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDrag;
	static GetDefaultObject(): ParticleModuleAccelerationDrag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDrag;
	static C(Other: UObject): ParticleModuleAccelerationDrag;
}

declare class ParticleModuleAccelerationDragScaleOverLife extends ParticleModuleAccelerationBase { 
	DragScale: DistributionFloat;
	DragScaleRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static GetDefaultObject(): ParticleModuleAccelerationDragScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDragScaleOverLife;
	static C(Other: UObject): ParticleModuleAccelerationDragScaleOverLife;
}

declare class ParticleModuleAccelerationOverLifetime extends ParticleModuleAccelerationBase { 
	AccelOverLife: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static GetDefaultObject(): ParticleModuleAccelerationOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationOverLifetime;
	static C(Other: UObject): ParticleModuleAccelerationOverLifetime;
}

declare class ParticleModuleAttractorBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleAttractorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorBase;
	static GetDefaultObject(): ParticleModuleAttractorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorBase;
	static C(Other: UObject): ParticleModuleAttractorBase;
}

declare class ParticleModuleAttractorLine extends ParticleModuleAttractorBase { 
	EndPoint0: Vector;
	EndPoint1: Vector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAttractorLine;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorLine;
	static GetDefaultObject(): ParticleModuleAttractorLine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorLine;
	static C(Other: UObject): ParticleModuleAttractorLine;
}

declare type EAttractorParticleSelectionMethod = 'EAPSM_Random' | 'EAPSM_Sequential';
declare var EAttractorParticleSelectionMethod : { EAPSM_Random:'EAPSM_Random',EAPSM_Sequential:'EAPSM_Sequential', };
declare class ParticleModuleAttractorParticle extends ParticleModuleAttractorBase { 
	EmitterName: string;
	Range: RawDistributionFloat;
	bStrengthByDistance: boolean;
	Strength: RawDistributionFloat;
	bAffectBaseVelocity: boolean;
	SelectionMethod: EAttractorParticleSelectionMethod;
	bRenewSource: boolean;
	bInheritSourceVel: boolean;
	LastSelIndex: number;
	static Load(ResourceName: string): ParticleModuleAttractorParticle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorParticle;
	static GetDefaultObject(): ParticleModuleAttractorParticle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorParticle;
	static C(Other: UObject): ParticleModuleAttractorParticle;
}

declare class ParticleModuleAttractorPoint extends ParticleModuleAttractorBase { 
	Position: RawDistributionVector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	StrengthByDistance: boolean;
	bAffectBaseVelocity: boolean;
	bOverrideVelocity: boolean;
	bUseWorldSpacePosition: boolean;
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	static Load(ResourceName: string): ParticleModuleAttractorPoint;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPoint;
	static GetDefaultObject(): ParticleModuleAttractorPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPoint;
	static C(Other: UObject): ParticleModuleAttractorPoint;
}

declare class ParticleModuleAttractorPointGravity extends ParticleModuleAttractorBase { 
	Position: Vector;
	Radius: number;
	Strength: DistributionFloat;
	StrengthRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAttractorPointGravity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPointGravity;
	static GetDefaultObject(): ParticleModuleAttractorPointGravity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPointGravity;
	static C(Other: UObject): ParticleModuleAttractorPointGravity;
}

declare class ParticleModuleBeamBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleBeamBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamBase;
	static GetDefaultObject(): ParticleModuleBeamBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamBase;
	static C(Other: UObject): ParticleModuleBeamBase;
}

declare type BeamModifierType = 'PEB2MT_Source' | 'PEB2MT_Target';
declare var BeamModifierType : { PEB2MT_Source:'PEB2MT_Source',PEB2MT_Target:'PEB2MT_Target', };
declare class BeamModifierOptions { 
	bModify: boolean;
	bScale: boolean;
	bLock: boolean;
	clone() : BeamModifierOptions;
	static C(Other: UObject): BeamModifierOptions;
}

declare class ParticleModuleBeamModifier extends ParticleModuleBeamBase { 
	ModifierType: BeamModifierType;
	PositionOptions: BeamModifierOptions;
	Position: RawDistributionVector;
	TangentOptions: BeamModifierOptions;
	Tangent: RawDistributionVector;
	bAbsoluteTangent: boolean;
	StrengthOptions: BeamModifierOptions;
	Strength: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleBeamModifier;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamModifier;
	static GetDefaultObject(): ParticleModuleBeamModifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamModifier;
	static C(Other: UObject): ParticleModuleBeamModifier;
}

declare class ParticleModuleBeamNoise extends ParticleModuleBeamBase { 
	bLowFreq_Enabled: boolean;
	Frequency: number;
	Frequency_LowRange: number;
	NoiseRange: RawDistributionVector;
	NoiseRangeScale: RawDistributionFloat;
	bNRScaleEmitterTime: boolean;
	NoiseSpeed: RawDistributionVector;
	bSmooth: boolean;
	NoiseLockRadius: number;
	bNoiseLock: boolean;
	bOscillate: boolean;
	NoiseLockTime: number;
	NoiseTension: number;
	bUseNoiseTangents: boolean;
	NoiseTangentStrength: RawDistributionFloat;
	NoiseTessellation: number;
	bTargetNoise: boolean;
	FrequencyDistance: number;
	bApplyNoiseScale: boolean;
	NoiseScale: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleBeamNoise;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamNoise;
	static GetDefaultObject(): ParticleModuleBeamNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamNoise;
	static C(Other: UObject): ParticleModuleBeamNoise;
}

declare type Beam2SourceTargetMethod = 'PEB2STM_Default' | 'PEB2STM_UserSet' | 'PEB2STM_Emitter' | 'PEB2STM_Particle' | 'PEB2STM_Actor';
declare var Beam2SourceTargetMethod : { PEB2STM_Default:'PEB2STM_Default',PEB2STM_UserSet:'PEB2STM_UserSet',PEB2STM_Emitter:'PEB2STM_Emitter',PEB2STM_Particle:'PEB2STM_Particle',PEB2STM_Actor:'PEB2STM_Actor', };
declare type Beam2SourceTargetTangentMethod = 'PEB2STTM_Direct' | 'PEB2STTM_UserSet' | 'PEB2STTM_Distribution' | 'PEB2STTM_Emitter';
declare var Beam2SourceTargetTangentMethod : { PEB2STTM_Direct:'PEB2STTM_Direct',PEB2STTM_UserSet:'PEB2STTM_UserSet',PEB2STTM_Distribution:'PEB2STTM_Distribution',PEB2STTM_Emitter:'PEB2STTM_Emitter', };
declare class ParticleModuleBeamSource extends ParticleModuleBeamBase { 
	SourceMethod: Beam2SourceTargetMethod;
	SourceName: string;
	bSourceAbsolute: boolean;
	Source: RawDistributionVector;
	bLockSource: boolean;
	SourceTangentMethod: Beam2SourceTargetTangentMethod;
	SourceTangent: RawDistributionVector;
	bLockSourceTangent: boolean;
	SourceStrength: RawDistributionFloat;
	bLockSourceStength: boolean;
	static Load(ResourceName: string): ParticleModuleBeamSource;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamSource;
	static GetDefaultObject(): ParticleModuleBeamSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamSource;
	static C(Other: UObject): ParticleModuleBeamSource;
}

declare class ParticleModuleBeamTarget extends ParticleModuleBeamBase { 
	TargetMethod: Beam2SourceTargetMethod;
	TargetName: string;
	Target: RawDistributionVector;
	bTargetAbsolute: boolean;
	bLockTarget: boolean;
	TargetTangentMethod: Beam2SourceTargetTangentMethod;
	TargetTangent: RawDistributionVector;
	bLockTargetTangent: boolean;
	TargetStrength: RawDistributionFloat;
	bLockTargetStength: boolean;
	LockRadius: number;
	static Load(ResourceName: string): ParticleModuleBeamTarget;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamTarget;
	static GetDefaultObject(): ParticleModuleBeamTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamTarget;
	static C(Other: UObject): ParticleModuleBeamTarget;
}

declare class ParticleModuleCameraBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleCameraBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraBase;
	static GetDefaultObject(): ParticleModuleCameraBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraBase;
	static C(Other: UObject): ParticleModuleCameraBase;
}

declare type EParticleCameraOffsetUpdateMethod = 'EPCOUM_DirectSet' | 'EPCOUM_Additive' | 'EPCOUM_Scalar';
declare var EParticleCameraOffsetUpdateMethod : { EPCOUM_DirectSet:'EPCOUM_DirectSet',EPCOUM_Additive:'EPCOUM_Additive',EPCOUM_Scalar:'EPCOUM_Scalar', };
declare class ParticleModuleCameraOffset extends ParticleModuleCameraBase { 
	CameraOffset: RawDistributionFloat;
	bSpawnTimeOnly: boolean;
	UpdateMethod: EParticleCameraOffsetUpdateMethod;
	static Load(ResourceName: string): ParticleModuleCameraOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraOffset;
	static GetDefaultObject(): ParticleModuleCameraOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraOffset;
	static C(Other: UObject): ParticleModuleCameraOffset;
}

declare class ParticleModuleCollisionBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleCollisionBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionBase;
	static GetDefaultObject(): ParticleModuleCollisionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionBase;
	static C(Other: UObject): ParticleModuleCollisionBase;
}

declare type EParticleCollisionComplete = 'EPCC_Kill' | 'EPCC_Freeze' | 'EPCC_HaltCollisions' | 'EPCC_FreezeTranslation' | 'EPCC_FreezeRotation' | 'EPCC_FreezeMovement';
declare var EParticleCollisionComplete : { EPCC_Kill:'EPCC_Kill',EPCC_Freeze:'EPCC_Freeze',EPCC_HaltCollisions:'EPCC_HaltCollisions',EPCC_FreezeTranslation:'EPCC_FreezeTranslation',EPCC_FreezeRotation:'EPCC_FreezeRotation',EPCC_FreezeMovement:'EPCC_FreezeMovement', };
declare class ParticleModuleCollision extends ParticleModuleCollisionBase { 
	DampingFactor: RawDistributionVector;
	DampingFactorRotation: RawDistributionVector;
	MaxCollisions: RawDistributionFloat;
	CollisionCompletionOption: EParticleCollisionComplete;
	CollisionTypes: EObjectTypeQuery[];
	bApplyPhysics: boolean;
	bIgnoreTriggerVolumes: boolean;
	ParticleMass: RawDistributionFloat;
	DirScalar: number;
	bPawnsDoNotDecrementCount: boolean;
	bOnlyVerticalNormalsDecrementCount: boolean;
	VerticalFudgeFactor: number;
	DelayAmount: RawDistributionFloat;
	bDropDetail: boolean;
	bCollideOnlyIfVisible: boolean;
	bIgnoreSourceActor: boolean;
	MaxCollisionDistance: number;
	static Load(ResourceName: string): ParticleModuleCollision;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollision;
	static GetDefaultObject(): ParticleModuleCollision;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollision;
	static C(Other: UObject): ParticleModuleCollision;
}

declare type EParticleCollisionResponse = 'Bounce' | 'Stop' | 'Kill';
declare var EParticleCollisionResponse : { Bounce:'Bounce',Stop:'Stop',Kill:'Kill', };
declare type EParticleCollisionMode = 'SceneDepth' | 'DistanceField';
declare var EParticleCollisionMode : { SceneDepth:'SceneDepth',DistanceField:'DistanceField', };
declare class ParticleModuleCollisionGPU extends ParticleModuleCollisionBase { 
	Resilience: RawDistributionFloat;
	ResilienceScaleOverLife: RawDistributionFloat;
	Friction: number;
	RandomSpread: number;
	RandomDistribution: number;
	RadiusScale: number;
	RadiusBias: number;
	Response: EParticleCollisionResponse;
	CollisionMode: EParticleCollisionMode;
	static Load(ResourceName: string): ParticleModuleCollisionGPU;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionGPU;
	static GetDefaultObject(): ParticleModuleCollisionGPU;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionGPU;
	static C(Other: UObject): ParticleModuleCollisionGPU;
}

declare class ParticleModuleColorBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleColorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorBase;
	static GetDefaultObject(): ParticleModuleColorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorBase;
	static C(Other: UObject): ParticleModuleColorBase;
}

declare class ParticleModuleColor extends ParticleModuleColorBase { 
	StartColor: RawDistributionVector;
	StartAlpha: RawDistributionFloat;
	bClampAlpha: boolean;
	static Load(ResourceName: string): ParticleModuleColor;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor;
	static GetDefaultObject(): ParticleModuleColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor;
	static C(Other: UObject): ParticleModuleColor;
}

declare class ParticleRandomSeedInfo { 
	ParameterName: string;
	bGetSeedFromInstance: boolean;
	bInstanceSeedIsIndex: boolean;
	bResetSeedOnEmitterLooping: boolean;
	bRandomlySelectSeedArray: boolean;
	RandomSeeds: number[];
	clone() : ParticleRandomSeedInfo;
	static C(Other: UObject): ParticleRandomSeedInfo;
}

declare class ParticleModuleColor_Seeded extends ParticleModuleColor { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleColor_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor_Seeded;
	static GetDefaultObject(): ParticleModuleColor_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor_Seeded;
	static C(Other: UObject): ParticleModuleColor_Seeded;
}

declare class ParticleModuleColorOverLife extends ParticleModuleColorBase { 
	ColorOverLife: RawDistributionVector;
	AlphaOverLife: RawDistributionFloat;
	bClampAlpha: boolean;
	static Load(ResourceName: string): ParticleModuleColorOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorOverLife;
	static GetDefaultObject(): ParticleModuleColorOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorOverLife;
	static C(Other: UObject): ParticleModuleColorOverLife;
}

declare class ParticleModuleColorScaleOverLife extends ParticleModuleColorBase { 
	ColorScaleOverLife: RawDistributionVector;
	AlphaScaleOverLife: RawDistributionFloat;
	bEmitterTime: boolean;
	static Load(ResourceName: string): ParticleModuleColorScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorScaleOverLife;
	static GetDefaultObject(): ParticleModuleColorScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorScaleOverLife;
	static C(Other: UObject): ParticleModuleColorScaleOverLife;
}

declare class ParticleModuleEventReceiverKillParticles extends ParticleModuleEventReceiverBase { 
	bStopSpawning: boolean;
	static Load(ResourceName: string): ParticleModuleEventReceiverKillParticles;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverKillParticles;
	static GetDefaultObject(): ParticleModuleEventReceiverKillParticles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverKillParticles;
	static C(Other: UObject): ParticleModuleEventReceiverKillParticles;
}

declare class ParticleModuleEventReceiverSpawn extends ParticleModuleEventReceiverBase { 
	SpawnCount: RawDistributionFloat;
	bUseParticleTime: boolean;
	bUsePSysLocation: boolean;
	bInheritVelocity: boolean;
	InheritVelocityScale: RawDistributionVector;
	PhysicalMaterials: PhysicalMaterial[];
	bBanPhysicalMaterials: boolean;
	static Load(ResourceName: string): ParticleModuleEventReceiverSpawn;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverSpawn;
	static GetDefaultObject(): ParticleModuleEventReceiverSpawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverSpawn;
	static C(Other: UObject): ParticleModuleEventReceiverSpawn;
}

declare class ParticleModuleKillBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleKillBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBase;
	static GetDefaultObject(): ParticleModuleKillBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBase;
	static C(Other: UObject): ParticleModuleKillBase;
}

declare class ParticleModuleKillBox extends ParticleModuleKillBase { 
	LowerLeftCorner: RawDistributionVector;
	UpperRightCorner: RawDistributionVector;
	bAbsolute: boolean;
	bKillInside: boolean;
	bAxisAlignedAndFixedSize: boolean;
	static Load(ResourceName: string): ParticleModuleKillBox;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBox;
	static GetDefaultObject(): ParticleModuleKillBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBox;
	static C(Other: UObject): ParticleModuleKillBox;
}

declare class ParticleModuleKillHeight extends ParticleModuleKillBase { 
	Height: RawDistributionFloat;
	bAbsolute: boolean;
	bFloor: boolean;
	bApplyPSysScale: boolean;
	static Load(ResourceName: string): ParticleModuleKillHeight;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillHeight;
	static GetDefaultObject(): ParticleModuleKillHeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillHeight;
	static C(Other: UObject): ParticleModuleKillHeight;
}

declare class ParticleModuleLifetimeBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLifetimeBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetimeBase;
	static GetDefaultObject(): ParticleModuleLifetimeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetimeBase;
	static C(Other: UObject): ParticleModuleLifetimeBase;
}

declare class ParticleModuleLifetime extends ParticleModuleLifetimeBase { 
	Lifetime: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime;
	static GetDefaultObject(): ParticleModuleLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime;
	static C(Other: UObject): ParticleModuleLifetime;
}

declare class ParticleModuleLifetime_Seeded extends ParticleModuleLifetime { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLifetime_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime_Seeded;
	static GetDefaultObject(): ParticleModuleLifetime_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime_Seeded;
	static C(Other: UObject): ParticleModuleLifetime_Seeded;
}

declare class ParticleModuleLightBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLightBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLightBase;
	static GetDefaultObject(): ParticleModuleLightBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLightBase;
	static C(Other: UObject): ParticleModuleLightBase;
}

declare class ParticleModuleLight extends ParticleModuleLightBase { 
	bUseInverseSquaredFalloff: boolean;
	bAffectsTranslucency: boolean;
	bPreviewLightRadius: boolean;
	SpawnFraction: number;
	ColorScaleOverLife: RawDistributionVector;
	BrightnessOverLife: RawDistributionFloat;
	RadiusScale: RawDistributionFloat;
	LightExponent: RawDistributionFloat;
	LightingChannels: LightingChannels;
	bHighQualityLights: boolean;
	bShadowCastingLights: boolean;
	static Load(ResourceName: string): ParticleModuleLight;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight;
	static GetDefaultObject(): ParticleModuleLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight;
	static C(Other: UObject): ParticleModuleLight;
}

declare class ParticleModuleLight_Seeded extends ParticleModuleLight { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLight_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight_Seeded;
	static GetDefaultObject(): ParticleModuleLight_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight_Seeded;
	static C(Other: UObject): ParticleModuleLight_Seeded;
}

declare class ParticleModuleLocationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLocationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBase;
	static GetDefaultObject(): ParticleModuleLocationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBase;
	static C(Other: UObject): ParticleModuleLocationBase;
}

declare class ParticleModuleLocation extends ParticleModuleLocationBase { 
	StartLocation: RawDistributionVector;
	DistributeOverNPoints: number;
	DistributeThreshold: number;
	static Load(ResourceName: string): ParticleModuleLocation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation;
	static GetDefaultObject(): ParticleModuleLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation;
	static C(Other: UObject): ParticleModuleLocation;
}

declare class ParticleModuleLocation_Seeded extends ParticleModuleLocation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation_Seeded;
	static GetDefaultObject(): ParticleModuleLocation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation_Seeded;
	static C(Other: UObject): ParticleModuleLocation_Seeded;
}

declare class ParticleModuleLocationWorldOffset extends ParticleModuleLocation { 
	static Load(ResourceName: string): ParticleModuleLocationWorldOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset;
	static GetDefaultObject(): ParticleModuleLocationWorldOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset;
	static C(Other: UObject): ParticleModuleLocationWorldOffset;
}

declare class ParticleModuleLocationWorldOffset_Seeded extends ParticleModuleLocationWorldOffset { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
	static GetDefaultObject(): ParticleModuleLocationWorldOffset_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset_Seeded;
	static C(Other: UObject): ParticleModuleLocationWorldOffset_Seeded;
}

declare type ELocationBoneSocketSource = 'BONESOCKETSOURCE_Bones' | 'BONESOCKETSOURCE_Sockets';
declare var ELocationBoneSocketSource : { BONESOCKETSOURCE_Bones:'BONESOCKETSOURCE_Bones',BONESOCKETSOURCE_Sockets:'BONESOCKETSOURCE_Sockets', };
declare class LocationBoneSocketInfo { 
	BoneSocketName: string;
	Offset: Vector;
	clone() : LocationBoneSocketInfo;
	static C(Other: UObject): LocationBoneSocketInfo;
}

declare type ELocationBoneSocketSelectionMethod = 'BONESOCKETSEL_Sequential' | 'BONESOCKETSEL_Random';
declare var ELocationBoneSocketSelectionMethod : { BONESOCKETSEL_Sequential:'BONESOCKETSEL_Sequential',BONESOCKETSEL_Random:'BONESOCKETSEL_Random', };
declare class ParticleModuleLocationBoneSocket extends ParticleModuleLocationBase { 
	SourceType: ELocationBoneSocketSource;
	UniversalOffset: Vector;
	SourceLocations: LocationBoneSocketInfo[];
	SelectionMethod: ELocationBoneSocketSelectionMethod;
	bUpdatePositionEachFrame: boolean;
	bOrientMeshEmitters: boolean;
	bInheritBoneVelocity: boolean;
	InheritVelocityScale: number;
	SkelMeshActorParamName: string;
	NumPreSelectedIndices: number;
	EditorSkelMesh: SkeletalMesh;
	static Load(ResourceName: string): ParticleModuleLocationBoneSocket;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBoneSocket;
	static GetDefaultObject(): ParticleModuleLocationBoneSocket;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBoneSocket;
	static C(Other: UObject): ParticleModuleLocationBoneSocket;
}

declare class ParticleModuleLocationDirect extends ParticleModuleLocationBase { 
	Location: RawDistributionVector;
	LocationOffset: RawDistributionVector;
	ScaleFactor: RawDistributionVector;
	Direction: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleLocationDirect;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationDirect;
	static GetDefaultObject(): ParticleModuleLocationDirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationDirect;
	static C(Other: UObject): ParticleModuleLocationDirect;
}

declare type ELocationEmitterSelectionMethod = 'ELESM_Random' | 'ELESM_Sequential';
declare var ELocationEmitterSelectionMethod : { ELESM_Random:'ELESM_Random',ELESM_Sequential:'ELESM_Sequential', };
declare class ParticleModuleLocationEmitter extends ParticleModuleLocationBase { 
	EmitterName: string;
	SelectionMethod: ELocationEmitterSelectionMethod;
	InheritSourceVelocity: boolean;
	InheritSourceVelocityScale: number;
	bInheritSourceRotation: boolean;
	InheritSourceRotationScale: number;
	static Load(ResourceName: string): ParticleModuleLocationEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitter;
	static GetDefaultObject(): ParticleModuleLocationEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitter;
	static C(Other: UObject): ParticleModuleLocationEmitter;
}

declare class ParticleModuleLocationEmitterDirect extends ParticleModuleLocationBase { 
	EmitterName: string;
	static Load(ResourceName: string): ParticleModuleLocationEmitterDirect;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitterDirect;
	static GetDefaultObject(): ParticleModuleLocationEmitterDirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitterDirect;
	static C(Other: UObject): ParticleModuleLocationEmitterDirect;
}

declare class ParticleModuleLocationPrimitiveBase extends ParticleModuleLocationBase { 
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	SurfaceOnly: boolean;
	Velocity: boolean;
	VelocityScale: RawDistributionFloat;
	StartLocation: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveBase;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveBase;
	static C(Other: UObject): ParticleModuleLocationPrimitiveBase;
}

declare type CylinderHeightAxis = 'PMLPC_HEIGHTAXIS_X' | 'PMLPC_HEIGHTAXIS_Y' | 'PMLPC_HEIGHTAXIS_Z';
declare var CylinderHeightAxis : { PMLPC_HEIGHTAXIS_X:'PMLPC_HEIGHTAXIS_X',PMLPC_HEIGHTAXIS_Y:'PMLPC_HEIGHTAXIS_Y',PMLPC_HEIGHTAXIS_Z:'PMLPC_HEIGHTAXIS_Z', };
declare class ParticleModuleLocationPrimitiveCylinder extends ParticleModuleLocationPrimitiveBase { 
	RadialVelocity: boolean;
	StartRadius: RawDistributionFloat;
	StartHeight: RawDistributionFloat;
	HeightAxis: CylinderHeightAxis;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder;
	static C(Other: UObject): ParticleModuleLocationPrimitiveCylinder;
}

declare class ParticleModuleLocationPrimitiveCylinder_Seeded extends ParticleModuleLocationPrimitiveCylinder { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static C(Other: UObject): ParticleModuleLocationPrimitiveCylinder_Seeded;
}

declare class ParticleModuleLocationPrimitiveSphere extends ParticleModuleLocationPrimitiveBase { 
	StartRadius: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere;
	static C(Other: UObject): ParticleModuleLocationPrimitiveSphere;
}

declare class ParticleModuleLocationPrimitiveSphere_Seeded extends ParticleModuleLocationPrimitiveSphere { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere_Seeded;
	static C(Other: UObject): ParticleModuleLocationPrimitiveSphere_Seeded;
}

declare class ParticleModuleLocationPrimitiveTriangle extends ParticleModuleLocationBase { 
	StartOffset: RawDistributionVector;
	Height: RawDistributionFloat;
	Angle: RawDistributionFloat;
	Thickness: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveTriangle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveTriangle;
	static C(Other: UObject): ParticleModuleLocationPrimitiveTriangle;
}

declare type ELocationSkelVertSurfaceSource = 'VERTSURFACESOURCE_Vert' | 'VERTSURFACESOURCE_Surface';
declare var ELocationSkelVertSurfaceSource : { VERTSURFACESOURCE_Vert:'VERTSURFACESOURCE_Vert',VERTSURFACESOURCE_Surface:'VERTSURFACESOURCE_Surface', };
declare class ParticleModuleLocationSkelVertSurface extends ParticleModuleLocationBase { 
	SourceType: ELocationSkelVertSurfaceSource;
	UniversalOffset: Vector;
	bUpdatePositionEachFrame: boolean;
	bOrientMeshEmitters: boolean;
	bInheritBoneVelocity: boolean;
	InheritVelocityScale: number;
	SkelMeshActorParamName: string;
	EditorSkelMesh: SkeletalMesh;
	ValidAssociatedBones: string[];
	bEnforceNormalCheck: boolean;
	NormalToCompare: Vector;
	NormalCheckToleranceDegrees: number;
	NormalCheckTolerance: number;
	ValidMaterialIndices: number[];
	bInheritVertexColor: boolean;
	bInheritUV: boolean;
	InheritUVChannel: any;
	static Load(ResourceName: string): ParticleModuleLocationSkelVertSurface;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationSkelVertSurface;
	static GetDefaultObject(): ParticleModuleLocationSkelVertSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationSkelVertSurface;
	static C(Other: UObject): ParticleModuleLocationSkelVertSurface;
}

declare class ParticleModulePivotOffset extends ParticleModuleLocationBase { 
	PivotOffset: Vector2D;
	static Load(ResourceName: string): ParticleModulePivotOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModulePivotOffset;
	static GetDefaultObject(): ParticleModulePivotOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModulePivotOffset;
	static C(Other: UObject): ParticleModulePivotOffset;
}

declare class ParticleModuleSourceMovement extends ParticleModuleLocationBase { 
	SourceMovementScale: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleSourceMovement;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSourceMovement;
	static GetDefaultObject(): ParticleModuleSourceMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSourceMovement;
	static C(Other: UObject): ParticleModuleSourceMovement;
}

declare class ParticleModuleMaterialBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleMaterialBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMaterialBase;
	static GetDefaultObject(): ParticleModuleMaterialBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMaterialBase;
	static C(Other: UObject): ParticleModuleMaterialBase;
}

declare class ParticleModuleMeshMaterial extends ParticleModuleMaterialBase { 
	MeshMaterials: MaterialInterface[];
	static Load(ResourceName: string): ParticleModuleMeshMaterial;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshMaterial;
	static GetDefaultObject(): ParticleModuleMeshMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshMaterial;
	static C(Other: UObject): ParticleModuleMeshMaterial;
}

declare class ParticleModuleOrientationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleOrientationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationBase;
	static GetDefaultObject(): ParticleModuleOrientationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationBase;
	static C(Other: UObject): ParticleModuleOrientationBase;
}

declare type EParticleAxisLock = 'EPAL_NONE' | 'EPAL_X' | 'EPAL_Y' | 'EPAL_Z' | 'EPAL_NEGATIVE_X' | 'EPAL_NEGATIVE_Y' | 'EPAL_NEGATIVE_Z' | 'EPAL_ROTATE_X' | 'EPAL_ROTATE_Y' | 'EPAL_ROTATE_Z';
declare var EParticleAxisLock : { EPAL_NONE:'EPAL_NONE',EPAL_X:'EPAL_X',EPAL_Y:'EPAL_Y',EPAL_Z:'EPAL_Z',EPAL_NEGATIVE_X:'EPAL_NEGATIVE_X',EPAL_NEGATIVE_Y:'EPAL_NEGATIVE_Y',EPAL_NEGATIVE_Z:'EPAL_NEGATIVE_Z',EPAL_ROTATE_X:'EPAL_ROTATE_X',EPAL_ROTATE_Y:'EPAL_ROTATE_Y',EPAL_ROTATE_Z:'EPAL_ROTATE_Z', };
declare class ParticleModuleOrientationAxisLock extends ParticleModuleOrientationBase { 
	LockAxisFlags: EParticleAxisLock;
	static Load(ResourceName: string): ParticleModuleOrientationAxisLock;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationAxisLock;
	static GetDefaultObject(): ParticleModuleOrientationAxisLock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationAxisLock;
	static C(Other: UObject): ParticleModuleOrientationAxisLock;
}

declare class ParticleModuleParameterBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleParameterBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterBase;
	static GetDefaultObject(): ParticleModuleParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterBase;
	static C(Other: UObject): ParticleModuleParameterBase;
}

declare type EEmitterDynamicParameterValue = 'EDPV_UserSet' | 'EDPV_AutoSet' | 'EDPV_VelocityX' | 'EDPV_VelocityY' | 'EDPV_VelocityZ' | 'EDPV_VelocityMag';
declare var EEmitterDynamicParameterValue : { EDPV_UserSet:'EDPV_UserSet',EDPV_AutoSet:'EDPV_AutoSet',EDPV_VelocityX:'EDPV_VelocityX',EDPV_VelocityY:'EDPV_VelocityY',EDPV_VelocityZ:'EDPV_VelocityZ',EDPV_VelocityMag:'EDPV_VelocityMag', };
declare class EmitterDynamicParameter { 
	ParamName: string;
	bUseEmitterTime: boolean;
	bSpawnTimeOnly: boolean;
	ValueMethod: EEmitterDynamicParameterValue;
	bScaleVelocityByParamValue: boolean;
	ParamValue: RawDistributionFloat;
	clone() : EmitterDynamicParameter;
	static C(Other: UObject): EmitterDynamicParameter;
}

declare class ParticleModuleParameterDynamic extends ParticleModuleParameterBase { 
	DynamicParams: EmitterDynamicParameter[];
	UpdateFlags: number;
	bUsesVelocity: boolean;
	static Load(ResourceName: string): ParticleModuleParameterDynamic;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic;
	static GetDefaultObject(): ParticleModuleParameterDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic;
	static C(Other: UObject): ParticleModuleParameterDynamic;
}

declare class ParticleModuleParameterDynamic_Seeded extends ParticleModuleParameterDynamic { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleParameterDynamic_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic_Seeded;
	static GetDefaultObject(): ParticleModuleParameterDynamic_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic_Seeded;
	static C(Other: UObject): ParticleModuleParameterDynamic_Seeded;
}

declare class SubUVAnimation extends UObject { 
	SubUVTexture: Texture2D;
	SubImages_Horizontal: number;
	SubImages_Vertical: number;
	BoundingMode: ESubUVBoundingVertexCount;
	OpacitySourceMode: EOpacitySourceMode;
	AlphaThreshold: number;
	static Load(ResourceName: string): SubUVAnimation;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimation;
	static GetDefaultObject(): SubUVAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimation;
	static C(Other: UObject): SubUVAnimation;
}

declare class ParticleModuleRotationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleRotationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationBase;
	static GetDefaultObject(): ParticleModuleRotationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationBase;
	static C(Other: UObject): ParticleModuleRotationBase;
}

declare class ParticleModuleMeshRotation extends ParticleModuleRotationBase { 
	StartRotation: RawDistributionVector;
	bInheritParent: boolean;
	static Load(ResourceName: string): ParticleModuleMeshRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation;
	static GetDefaultObject(): ParticleModuleMeshRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation;
	static C(Other: UObject): ParticleModuleMeshRotation;
}

declare class ParticleModuleMeshRotation_Seeded extends ParticleModuleMeshRotation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleMeshRotation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation_Seeded;
	static GetDefaultObject(): ParticleModuleMeshRotation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation_Seeded;
	static C(Other: UObject): ParticleModuleMeshRotation_Seeded;
}

declare class ParticleModuleRotation extends ParticleModuleRotationBase { 
	StartRotation: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation;
	static GetDefaultObject(): ParticleModuleRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation;
	static C(Other: UObject): ParticleModuleRotation;
}

declare class ParticleModuleRotation_Seeded extends ParticleModuleRotation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleRotation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation_Seeded;
	static GetDefaultObject(): ParticleModuleRotation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation_Seeded;
	static C(Other: UObject): ParticleModuleRotation_Seeded;
}

declare class ParticleModuleRotationOverLifetime extends ParticleModuleRotationBase { 
	RotationOverLife: RawDistributionFloat;
	Scale: boolean;
	static Load(ResourceName: string): ParticleModuleRotationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationOverLifetime;
	static GetDefaultObject(): ParticleModuleRotationOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationOverLifetime;
	static C(Other: UObject): ParticleModuleRotationOverLifetime;
}

declare class ParticleModuleRotationRateBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleRotationRateBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateBase;
	static GetDefaultObject(): ParticleModuleRotationRateBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateBase;
	static C(Other: UObject): ParticleModuleRotationRateBase;
}

declare class ParticleModuleMeshRotationRate extends ParticleModuleRotationRateBase { 
	StartRotationRate: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleMeshRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate;
	static GetDefaultObject(): ParticleModuleMeshRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate;
	static C(Other: UObject): ParticleModuleMeshRotationRate;
}

declare class ParticleModuleMeshRotationRate_Seeded extends ParticleModuleMeshRotationRate { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
	static GetDefaultObject(): ParticleModuleMeshRotationRate_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate_Seeded;
	static C(Other: UObject): ParticleModuleMeshRotationRate_Seeded;
}

declare class ParticleModuleMeshRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
	LifeMultiplier: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
	static GetDefaultObject(): ParticleModuleMeshRotationRateMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateMultiplyLife;
	static C(Other: UObject): ParticleModuleMeshRotationRateMultiplyLife;
}

declare class ParticleModuleMeshRotationRateOverLife extends ParticleModuleRotationRateBase { 
	RotRate: RawDistributionVector;
	bScaleRotRate: boolean;
	static Load(ResourceName: string): ParticleModuleMeshRotationRateOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateOverLife;
	static GetDefaultObject(): ParticleModuleMeshRotationRateOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateOverLife;
	static C(Other: UObject): ParticleModuleMeshRotationRateOverLife;
}

declare class ParticleModuleRotationRate extends ParticleModuleRotationRateBase { 
	StartRotationRate: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate;
	static GetDefaultObject(): ParticleModuleRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate;
	static C(Other: UObject): ParticleModuleRotationRate;
}

declare class ParticleModuleRotationRate_Seeded extends ParticleModuleRotationRate { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleRotationRate_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate_Seeded;
	static GetDefaultObject(): ParticleModuleRotationRate_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate_Seeded;
	static C(Other: UObject): ParticleModuleRotationRate_Seeded;
}

declare class ParticleModuleRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
	LifeMultiplier: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotationRateMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateMultiplyLife;
	static GetDefaultObject(): ParticleModuleRotationRateMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateMultiplyLife;
	static C(Other: UObject): ParticleModuleRotationRateMultiplyLife;
}

declare class ParticleModuleSizeBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleSizeBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeBase;
	static GetDefaultObject(): ParticleModuleSizeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeBase;
	static C(Other: UObject): ParticleModuleSizeBase;
}

declare class ParticleModuleSize extends ParticleModuleSizeBase { 
	StartSize: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleSize;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize;
	static GetDefaultObject(): ParticleModuleSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize;
	static C(Other: UObject): ParticleModuleSize;
}

declare class ParticleModuleSize_Seeded extends ParticleModuleSize { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleSize_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize_Seeded;
	static GetDefaultObject(): ParticleModuleSize_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize_Seeded;
	static C(Other: UObject): ParticleModuleSize_Seeded;
}

declare class ParticleModuleSizeMultiplyLife extends ParticleModuleSizeBase { 
	LifeMultiplier: RawDistributionVector;
	MultiplyX: boolean;
	MultiplyY: boolean;
	MultiplyZ: boolean;
	static Load(ResourceName: string): ParticleModuleSizeMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeMultiplyLife;
	static GetDefaultObject(): ParticleModuleSizeMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeMultiplyLife;
	static C(Other: UObject): ParticleModuleSizeMultiplyLife;
}

declare class ParticleModuleSizeScale extends ParticleModuleSizeBase { 
	SizeScale: RawDistributionVector;
	EnableX: boolean;
	EnableY: boolean;
	EnableZ: boolean;
	static Load(ResourceName: string): ParticleModuleSizeScale;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScale;
	static GetDefaultObject(): ParticleModuleSizeScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScale;
	static C(Other: UObject): ParticleModuleSizeScale;
}

declare class ParticleModuleSizeScaleBySpeed extends ParticleModuleSizeBase { 
	SpeedScale: Vector2D;
	MaxScale: Vector2D;
	static Load(ResourceName: string): ParticleModuleSizeScaleBySpeed;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScaleBySpeed;
	static GetDefaultObject(): ParticleModuleSizeScaleBySpeed;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScaleBySpeed;
	static C(Other: UObject): ParticleModuleSizeScaleBySpeed;
}

declare class ParticleModuleSpawnPerUnit extends ParticleModuleSpawnBase { 
	UnitScalar: number;
	SpawnPerUnit: RawDistributionFloat;
	bIgnoreSpawnRateWhenMoving: boolean;
	MovementTolerance: number;
	MaxFrameDistance: number;
	bIgnoreMovementAlongX: boolean;
	bIgnoreMovementAlongY: boolean;
	bIgnoreMovementAlongZ: boolean;
	static Load(ResourceName: string): ParticleModuleSpawnPerUnit;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnPerUnit;
	static GetDefaultObject(): ParticleModuleSpawnPerUnit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnPerUnit;
	static C(Other: UObject): ParticleModuleSpawnPerUnit;
}

declare class ParticleModuleSubUVBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleSubUVBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVBase;
	static GetDefaultObject(): ParticleModuleSubUVBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVBase;
	static C(Other: UObject): ParticleModuleSubUVBase;
}

declare class ParticleModuleSubUV extends ParticleModuleSubUVBase { 
	Animation: SubUVAnimation;
	SubImageIndex: RawDistributionFloat;
	bUseRealTime: boolean;
	static Load(ResourceName: string): ParticleModuleSubUV;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUV;
	static GetDefaultObject(): ParticleModuleSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUV;
	static C(Other: UObject): ParticleModuleSubUV;
}

declare class ParticleModuleSubUVMovie extends ParticleModuleSubUV { 
	bUseEmitterTime: boolean;
	FrameRate: RawDistributionFloat;
	StartingFrame: number;
	static Load(ResourceName: string): ParticleModuleSubUVMovie;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVMovie;
	static GetDefaultObject(): ParticleModuleSubUVMovie;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVMovie;
	static C(Other: UObject): ParticleModuleSubUVMovie;
}

declare class ParticleModuleTrailBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleTrailBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTrailBase;
	static GetDefaultObject(): ParticleModuleTrailBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTrailBase;
	static C(Other: UObject): ParticleModuleTrailBase;
}

declare type ETrail2SourceMethod = 'PET2SRCM_Default' | 'PET2SRCM_Particle' | 'PET2SRCM_Actor';
declare var ETrail2SourceMethod : { PET2SRCM_Default:'PET2SRCM_Default',PET2SRCM_Particle:'PET2SRCM_Particle',PET2SRCM_Actor:'PET2SRCM_Actor', };
declare type EParticleSourceSelectionMethod = 'EPSSM_Random' | 'EPSSM_Sequential';
declare var EParticleSourceSelectionMethod : { EPSSM_Random:'EPSSM_Random',EPSSM_Sequential:'EPSSM_Sequential', };
declare class ParticleModuleTrailSource extends ParticleModuleTrailBase { 
	SourceMethod: ETrail2SourceMethod;
	SourceName: string;
	SourceStrength: RawDistributionFloat;
	bLockSourceStength: boolean;
	SourceOffsetCount: number;
	SourceOffsetDefaults: Vector[];
	SelectionMethod: EParticleSourceSelectionMethod;
	bInheritRotation: boolean;
	static Load(ResourceName: string): ParticleModuleTrailSource;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTrailSource;
	static GetDefaultObject(): ParticleModuleTrailSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTrailSource;
	static C(Other: UObject): ParticleModuleTrailSource;
}

declare class ParticleModuleTypeDataAnimTrail extends ParticleModuleTypeDataBase { 
	bDeadTrailsOnDeactivate: boolean;
	bEnablePreviousTangentRecalculation: boolean;
	bTangentRecalculationEveryFrame: boolean;
	TilingDistance: number;
	DistanceTessellationStepSize: number;
	TangentTessellationStepSize: number;
	WidthTessellationStepSize: number;
	static Load(ResourceName: string): ParticleModuleTypeDataAnimTrail;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataAnimTrail;
	static GetDefaultObject(): ParticleModuleTypeDataAnimTrail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataAnimTrail;
	static C(Other: UObject): ParticleModuleTypeDataAnimTrail;
}

declare type EBeam2Method = 'PEB2M_Distance' | 'PEB2M_Target' | 'PEB2M_Branch';
declare var EBeam2Method : { PEB2M_Distance:'PEB2M_Distance',PEB2M_Target:'PEB2M_Target',PEB2M_Branch:'PEB2M_Branch', };
declare type EBeamTaperMethod = 'PEBTM_None' | 'PEBTM_Full' | 'PEBTM_Partial';
declare var EBeamTaperMethod : { PEBTM_None:'PEBTM_None',PEBTM_Full:'PEBTM_Full',PEBTM_Partial:'PEBTM_Partial', };
declare class ParticleModuleTypeDataBeam2 extends ParticleModuleTypeDataBase { 
	BeamMethod: EBeam2Method;
	TextureTile: number;
	TextureTileDistance: number;
	Sheets: number;
	MaxBeamCount: number;
	Speed: number;
	InterpolationPoints: number;
	bAlwaysOn: boolean;
	UpVectorStepSize: number;
	BranchParentName: string;
	Distance: RawDistributionFloat;
	TaperMethod: EBeamTaperMethod;
	TaperFactor: RawDistributionFloat;
	TaperScale: RawDistributionFloat;
	RenderGeometry: boolean;
	RenderDirectLine: boolean;
	RenderLines: boolean;
	RenderTessellation: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataBeam2;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataBeam2;
	static GetDefaultObject(): ParticleModuleTypeDataBeam2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataBeam2;
	static C(Other: UObject): ParticleModuleTypeDataBeam2;
}

declare class GPUSpriteLocalVectorFieldInfo { 
	Field: VectorField;
	Transform: Transform;
	MinInitialRotation: Rotator;
	MaxInitialRotation: Rotator;
	RotationRate: Rotator;
	Intensity: number;
	Tightness: number;
	bIgnoreComponentTransform: boolean;
	bTileX: boolean;
	bTileY: boolean;
	bTileZ: boolean;
	bUseFixDT: boolean;
	clone() : GPUSpriteLocalVectorFieldInfo;
	static C(Other: UObject): GPUSpriteLocalVectorFieldInfo;
}

declare class FloatDistribution { 
	Table: DistributionLookupTable;
	clone() : FloatDistribution;
	static C(Other: UObject): FloatDistribution;
}

declare class GPUSpriteEmitterInfo { 
	RequiredModule: ParticleModuleRequired;
	SpawnModule: ParticleModuleSpawn;
	SpawnPerUnitModule: ParticleModuleSpawnPerUnit;
	SpawnModules: ParticleModule[];
	LocalVectorField: GPUSpriteLocalVectorFieldInfo;
	VectorFieldScale: FloatDistribution;
	DragCoefficient: FloatDistribution;
	PointAttractorStrength: FloatDistribution;
	Resilience: FloatDistribution;
	ConstantAcceleration: Vector;
	PointAttractorPosition: Vector;
	PointAttractorRadiusSq: number;
	OrbitOffsetBase: Vector;
	OrbitOffsetRange: Vector;
	InvMaxSize: Vector2D;
	InvRotationRateScale: number;
	MaxLifetime: number;
	MaxParticleCount: number;
	ScreenAlignment: EParticleScreenAlignment;
	LockAxisFlag: EParticleAxisLock;
	bEnableCollision: boolean;
	CollisionMode: EParticleCollisionMode;
	bRemoveHMDRoll: boolean;
	MinFacingCameraBlendDistance: number;
	MaxFacingCameraBlendDistance: number;
	DynamicColor: RawDistributionVector;
	DynamicAlpha: RawDistributionFloat;
	DynamicColorScale: RawDistributionVector;
	DynamicAlphaScale: RawDistributionFloat;
	clone() : GPUSpriteEmitterInfo;
	static C(Other: UObject): GPUSpriteEmitterInfo;
}

declare class GPUSpriteResourceData { 
	QuantizedColorSamples: Color[];
	QuantizedMiscSamples: Color[];
	QuantizedSimulationAttrSamples: Color[];
	ColorScale: Vector4;
	ColorBias: Vector4;
	MiscScale: Vector4;
	MiscBias: Vector4;
	SimulationAttrCurveScale: Vector4;
	SimulationAttrCurveBias: Vector4;
	SubImageSize: Vector4;
	SizeBySpeed: Vector4;
	ConstantAcceleration: Vector;
	OrbitOffsetBase: Vector;
	OrbitOffsetRange: Vector;
	OrbitFrequencyBase: Vector;
	OrbitFrequencyRange: Vector;
	OrbitPhaseBase: Vector;
	OrbitPhaseRange: Vector;
	GlobalVectorFieldScale: number;
	GlobalVectorFieldTightness: number;
	PerParticleVectorFieldScale: number;
	PerParticleVectorFieldBias: number;
	DragCoefficientScale: number;
	DragCoefficientBias: number;
	ResilienceScale: number;
	ResilienceBias: number;
	CollisionRadiusScale: number;
	CollisionRadiusBias: number;
	CollisionTimeBias: number;
	CollisionRandomSpread: number;
	CollisionRandomDistribution: number;
	OneMinusFriction: number;
	RotationRateScale: number;
	CameraMotionBlurAmount: number;
	ScreenAlignment: EParticleScreenAlignment;
	LockAxisFlag: EParticleAxisLock;
	PivotOffset: Vector2D;
	bRemoveHMDRoll: boolean;
	MinFacingCameraBlendDistance: number;
	MaxFacingCameraBlendDistance: number;
	clone() : GPUSpriteResourceData;
	static C(Other: UObject): GPUSpriteResourceData;
}

declare class ParticleModuleTypeDataGpu extends ParticleModuleTypeDataBase { 
	EmitterInfo: GPUSpriteEmitterInfo;
	ResourceData: GPUSpriteResourceData;
	CameraMotionBlurAmount: number;
	bClearExistingParticlesOnInit: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataGpu;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataGpu;
	static GetDefaultObject(): ParticleModuleTypeDataGpu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataGpu;
	static C(Other: UObject): ParticleModuleTypeDataGpu;
}

declare type EMeshScreenAlignment = 'PSMA_MeshFaceCameraWithRoll' | 'PSMA_MeshFaceCameraWithSpin' | 'PSMA_MeshFaceCameraWithLockedAxis';
declare var EMeshScreenAlignment : { PSMA_MeshFaceCameraWithRoll:'PSMA_MeshFaceCameraWithRoll',PSMA_MeshFaceCameraWithSpin:'PSMA_MeshFaceCameraWithSpin',PSMA_MeshFaceCameraWithLockedAxis:'PSMA_MeshFaceCameraWithLockedAxis', };
declare type EMeshCameraFacingUpAxis = 'CameraFacing_NoneUP' | 'CameraFacing_ZUp' | 'CameraFacing_NegativeZUp' | 'CameraFacing_YUp' | 'CameraFacing_NegativeYUp';
declare var EMeshCameraFacingUpAxis : { CameraFacing_NoneUP:'CameraFacing_NoneUP',CameraFacing_ZUp:'CameraFacing_ZUp',CameraFacing_NegativeZUp:'CameraFacing_NegativeZUp',CameraFacing_YUp:'CameraFacing_YUp',CameraFacing_NegativeYUp:'CameraFacing_NegativeYUp', };
declare type EMeshCameraFacingOptions = 'XAxisFacing_NoUp' | 'XAxisFacing_ZUp' | 'XAxisFacing_NegativeZUp' | 'XAxisFacing_YUp' | 'XAxisFacing_NegativeYUp' | 'LockedAxis_ZAxisFacing' | 'LockedAxis_NegativeZAxisFacing' | 'LockedAxis_YAxisFacing' | 'LockedAxis_NegativeYAxisFacing' | 'VelocityAligned_ZAxisFacing' | 'VelocityAligned_NegativeZAxisFacing' | 'VelocityAligned_YAxisFacing' | 'VelocityAligned_NegativeYAxisFacing';
declare var EMeshCameraFacingOptions : { XAxisFacing_NoUp:'XAxisFacing_NoUp',XAxisFacing_ZUp:'XAxisFacing_ZUp',XAxisFacing_NegativeZUp:'XAxisFacing_NegativeZUp',XAxisFacing_YUp:'XAxisFacing_YUp',XAxisFacing_NegativeYUp:'XAxisFacing_NegativeYUp',LockedAxis_ZAxisFacing:'LockedAxis_ZAxisFacing',LockedAxis_NegativeZAxisFacing:'LockedAxis_NegativeZAxisFacing',LockedAxis_YAxisFacing:'LockedAxis_YAxisFacing',LockedAxis_NegativeYAxisFacing:'LockedAxis_NegativeYAxisFacing',VelocityAligned_ZAxisFacing:'VelocityAligned_ZAxisFacing',VelocityAligned_NegativeZAxisFacing:'VelocityAligned_NegativeZAxisFacing',VelocityAligned_YAxisFacing:'VelocityAligned_YAxisFacing',VelocityAligned_NegativeYAxisFacing:'VelocityAligned_NegativeYAxisFacing', };
declare class ParticleModuleTypeDataMesh extends ParticleModuleTypeDataBase { 
	Mesh: StaticMesh;
	CastShadows: boolean;
	DoCollisions: boolean;
	MeshAlignment: EMeshScreenAlignment;
	bOverrideMaterial: boolean;
	bOverrideDefaultMotionBlurSettings: boolean;
	bEnableMotionBlur: boolean;
	Pitch: number;
	Roll: number;
	Yaw: number;
	RollPitchYawRange: RawDistributionVector;
	AxisLockOption: EParticleAxisLock;
	bCameraFacing: boolean;
	CameraFacingUpAxisOption: EMeshCameraFacingUpAxis;
	CameraFacingOption: EMeshCameraFacingOptions;
	bApplyParticleRotationAsSpin: boolean;
	bFaceCameraDirectionRatherThanPosition: boolean;
	bCollisionsConsiderPartilceSize: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataMesh;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataMesh;
	static GetDefaultObject(): ParticleModuleTypeDataMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataMesh;
	static C(Other: UObject): ParticleModuleTypeDataMesh;
}

declare type ETrailsRenderAxisOption = 'Trails_CameraUp' | 'Trails_SourceUp' | 'Trails_WorldUp';
declare var ETrailsRenderAxisOption : { Trails_CameraUp:'Trails_CameraUp',Trails_SourceUp:'Trails_SourceUp',Trails_WorldUp:'Trails_WorldUp', };
declare class ParticleModuleTypeDataRibbon extends ParticleModuleTypeDataBase { 
	MaxTessellationBetweenParticles: number;
	SheetsPerTrail: number;
	MaxTrailCount: number;
	MaxParticleInTrailCount: number;
	bDeadTrailsOnDeactivate: boolean;
	bDeadTrailsOnSourceLoss: boolean;
	bClipSourceSegement: boolean;
	bEnablePreviousTangentRecalculation: boolean;
	bTangentRecalculationEveryFrame: boolean;
	bSpawnInitialParticle: boolean;
	RenderAxis: ETrailsRenderAxisOption;
	TangentSpawningScalar: number;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	TilingDistance: number;
	DistanceTessellationStepSize: number;
	bEnableTangentDiffInterpScale: boolean;
	TangentTessellationScalar: number;
	static Load(ResourceName: string): ParticleModuleTypeDataRibbon;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataRibbon;
	static GetDefaultObject(): ParticleModuleTypeDataRibbon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataRibbon;
	static C(Other: UObject): ParticleModuleTypeDataRibbon;
}

declare class ParticleModuleVectorFieldBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleVectorFieldBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldBase;
	static GetDefaultObject(): ParticleModuleVectorFieldBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldBase;
	static C(Other: UObject): ParticleModuleVectorFieldBase;
}

declare class ParticleModuleVectorFieldGlobal extends ParticleModuleVectorFieldBase { 
	bOverrideGlobalVectorFieldTightness: boolean;
	GlobalVectorFieldScale: number;
	GlobalVectorFieldTightness: number;
	static Load(ResourceName: string): ParticleModuleVectorFieldGlobal;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldGlobal;
	static GetDefaultObject(): ParticleModuleVectorFieldGlobal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldGlobal;
	static C(Other: UObject): ParticleModuleVectorFieldGlobal;
}

declare class ParticleModuleVectorFieldLocal extends ParticleModuleVectorFieldBase { 
	VectorField: VectorField;
	RelativeTranslation: Vector;
	RelativeRotation: Rotator;
	RelativeScale3D: Vector;
	Intensity: number;
	Tightness: number;
	bIgnoreComponentTransform: boolean;
	bTileX: boolean;
	bTileY: boolean;
	bTileZ: boolean;
	bUseFixDT: boolean;
	static Load(ResourceName: string): ParticleModuleVectorFieldLocal;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldLocal;
	static GetDefaultObject(): ParticleModuleVectorFieldLocal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldLocal;
	static C(Other: UObject): ParticleModuleVectorFieldLocal;
}

declare class ParticleModuleVectorFieldRotation extends ParticleModuleVectorFieldBase { 
	MinInitialRotation: Vector;
	MaxInitialRotation: Vector;
	static Load(ResourceName: string): ParticleModuleVectorFieldRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldRotation;
	static GetDefaultObject(): ParticleModuleVectorFieldRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldRotation;
	static C(Other: UObject): ParticleModuleVectorFieldRotation;
}

declare class ParticleModuleVectorFieldRotationRate extends ParticleModuleVectorFieldBase { 
	RotationRate: Vector;
	static Load(ResourceName: string): ParticleModuleVectorFieldRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldRotationRate;
	static GetDefaultObject(): ParticleModuleVectorFieldRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldRotationRate;
	static C(Other: UObject): ParticleModuleVectorFieldRotationRate;
}

declare class ParticleModuleVectorFieldScale extends ParticleModuleVectorFieldBase { 
	VectorFieldScale: DistributionFloat;
	VectorFieldScaleRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVectorFieldScale;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldScale;
	static GetDefaultObject(): ParticleModuleVectorFieldScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldScale;
	static C(Other: UObject): ParticleModuleVectorFieldScale;
}

declare class ParticleModuleVectorFieldScaleOverLife extends ParticleModuleVectorFieldBase { 
	VectorFieldScaleOverLife: DistributionFloat;
	VectorFieldScaleOverLifeRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVectorFieldScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldScaleOverLife;
	static GetDefaultObject(): ParticleModuleVectorFieldScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldScaleOverLife;
	static C(Other: UObject): ParticleModuleVectorFieldScaleOverLife;
}

declare class ParticleModuleVelocityBase extends ParticleModule { 
	bInWorldSpace: boolean;
	bApplyOwnerScale: boolean;
	static Load(ResourceName: string): ParticleModuleVelocityBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityBase;
	static GetDefaultObject(): ParticleModuleVelocityBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityBase;
	static C(Other: UObject): ParticleModuleVelocityBase;
}

declare class ParticleModuleVelocity extends ParticleModuleVelocityBase { 
	StartVelocity: RawDistributionVector;
	StartVelocityRadial: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVelocity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocity;
	static GetDefaultObject(): ParticleModuleVelocity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocity;
	static C(Other: UObject): ParticleModuleVelocity;
}

declare class ParticleModuleVelocity_Seeded extends ParticleModuleVelocity { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleVelocity_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocity_Seeded;
	static GetDefaultObject(): ParticleModuleVelocity_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocity_Seeded;
	static C(Other: UObject): ParticleModuleVelocity_Seeded;
}

declare class ParticleModuleVelocityCone extends ParticleModuleVelocityBase { 
	Angle: RawDistributionFloat;
	Velocity: RawDistributionFloat;
	Direction: Vector;
	static Load(ResourceName: string): ParticleModuleVelocityCone;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityCone;
	static GetDefaultObject(): ParticleModuleVelocityCone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityCone;
	static C(Other: UObject): ParticleModuleVelocityCone;
}

declare class ParticleModuleVelocityInheritParent extends ParticleModuleVelocityBase { 
	Scale: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleVelocityInheritParent;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityInheritParent;
	static GetDefaultObject(): ParticleModuleVelocityInheritParent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityInheritParent;
	static C(Other: UObject): ParticleModuleVelocityInheritParent;
}

declare class ParticleModuleVelocityOverLifetime extends ParticleModuleVelocityBase { 
	VelOverLife: RawDistributionVector;
	Absolute: boolean;
	static Load(ResourceName: string): ParticleModuleVelocityOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityOverLifetime;
	static GetDefaultObject(): ParticleModuleVelocityOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityOverLifetime;
	static C(Other: UObject): ParticleModuleVelocityOverLifetime;
}

declare class DemoPendingNetGame extends PendingNetGame { 
	static Load(ResourceName: string): DemoPendingNetGame;
	static Find(Outer: UObject, ResourceName: string): DemoPendingNetGame;
	static GetDefaultObject(): DemoPendingNetGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoPendingNetGame;
	static C(Other: UObject): DemoPendingNetGame;
}

declare type EPlatformInterfaceDataType = 'PIDT_None' | 'PIDT_Int' | 'PIDT_Float' | 'PIDT_String' | 'PIDT_Object' | 'PIDT_Custom';
declare var EPlatformInterfaceDataType : { PIDT_None:'PIDT_None',PIDT_Int:'PIDT_Int',PIDT_Float:'PIDT_Float',PIDT_String:'PIDT_String',PIDT_Object:'PIDT_Object',PIDT_Custom:'PIDT_Custom', };
declare class PlatformInterfaceData { 
	DataName: string;
	Type: EPlatformInterfaceDataType;
	IntValue: number;
	FloatValue: number;
	StringValue: string;
	ObjectValue: UObject;
	clone() : PlatformInterfaceData;
	static C(Other: UObject): PlatformInterfaceData;
}

declare class PlatformInterfaceDelegateResult { 
	bSuccessful: boolean;
	Data: PlatformInterfaceData;
	clone() : PlatformInterfaceDelegateResult;
	static C(Other: UObject): PlatformInterfaceDelegateResult;
}

declare class DelegateArray { 
	Delegates: UnrealEngineDelegate<(Result: PlatformInterfaceDelegateResult) => void>[];
	clone() : DelegateArray;
	static C(Other: UObject): DelegateArray;
}

declare class PlatformInterfaceBase extends UObject { 
	AllDelegates: DelegateArray[];
	static Load(ResourceName: string): PlatformInterfaceBase;
	static Find(Outer: UObject, ResourceName: string): PlatformInterfaceBase;
	static GetDefaultObject(): PlatformInterfaceBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformInterfaceBase;
	static C(Other: UObject): PlatformInterfaceBase;
}

declare class CloudStorageBase extends PlatformInterfaceBase { 
	LocalCloudFiles: string[];
	bSuppressDelegateCalls: boolean;
	static Load(ResourceName: string): CloudStorageBase;
	static Find(Outer: UObject, ResourceName: string): CloudStorageBase;
	static GetDefaultObject(): CloudStorageBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CloudStorageBase;
	static C(Other: UObject): CloudStorageBase;
}

declare class InGameAdManager extends PlatformInterfaceBase { 
	bShouldPauseWhileAdOpen: boolean;
	ClickedBannerDelegates: UnrealEngineDelegate<() => void>[];
	ClosedAdDelegates: UnrealEngineDelegate<() => void>[];
	static Load(ResourceName: string): InGameAdManager;
	static Find(Outer: UObject, ResourceName: string): InGameAdManager;
	static GetDefaultObject(): InGameAdManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InGameAdManager;
	static C(Other: UObject): InGameAdManager;
}

declare class PurchaseInfo { 
	Identifier: string;
	DisplayName: string;
	DisplayDescription: string;
	DisplayPrice: string;
	clone() : PurchaseInfo;
	static C(Other: UObject): PurchaseInfo;
}

declare class MicroTransactionBase extends PlatformInterfaceBase { 
	AvailableProducts: PurchaseInfo[];
	LastError: string;
	LastErrorSolution: string;
	static Load(ResourceName: string): MicroTransactionBase;
	static Find(Outer: UObject, ResourceName: string): MicroTransactionBase;
	static GetDefaultObject(): MicroTransactionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MicroTransactionBase;
	static C(Other: UObject): MicroTransactionBase;
}

declare type ETwitterRequestMethod = 'TRM_Get' | 'TRM_Post' | 'TRM_Delete';
declare var ETwitterRequestMethod : { TRM_Get:'TRM_Get',TRM_Post:'TRM_Post',TRM_Delete:'TRM_Delete', };
declare class TwitterIntegrationBase extends PlatformInterfaceBase { 
	static Load(ResourceName: string): TwitterIntegrationBase;
	static Find(Outer: UObject, ResourceName: string): TwitterIntegrationBase;
	static GetDefaultObject(): TwitterIntegrationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TwitterIntegrationBase;
	TwitterRequest(URL: string,ParamKeysAndValues: string[],RequestMethod: ETwitterRequestMethod,AccountIndex: number): boolean;
	ShowTweetUI(InitialMessage: string,URL: string,Picture: string): boolean;
	Init(): void;
	GetNumAccounts(): number;
	GetAccountName(AccountIndex: number): string;
	CanShowTweetUI(): boolean;
	AuthorizeAccounts(): boolean;
	static C(Other: UObject): TwitterIntegrationBase;
}

declare class PlatformInterfaceWebResponse extends UObject { 
	OriginalURL: string;
	ResponseCode: number;
	Tag: number;
	StringResponse: string;
	BinaryResponse: number[];
	static Load(ResourceName: string): PlatformInterfaceWebResponse;
	static Find(Outer: UObject, ResourceName: string): PlatformInterfaceWebResponse;
	static GetDefaultObject(): PlatformInterfaceWebResponse;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformInterfaceWebResponse;
	GetNumHeaders(): number;
	GetHeaderValue(HeaderName: string): string;
	GetHeader(HeaderIndex: number,Header?: string,Value?: string): {Header: string, Value: string};
	static C(Other: UObject): PlatformInterfaceWebResponse;
}

declare class Polys extends UObject { 
	static Load(ResourceName: string): Polys;
	static Find(Outer: UObject, ResourceName: string): Polys;
	static GetDefaultObject(): Polys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Polys;
	static C(Other: UObject): Polys;
}

declare class SkeletalMeshLODGroupSettings { 
	ScreenSize: number;
	OptimizationSettings: SkeletalMeshOptimizationSettings;
	clone() : SkeletalMeshLODGroupSettings;
	static C(Other: UObject): SkeletalMeshLODGroupSettings;
}

declare class SkeletalMeshReductionSettings extends UObject { 
	Settings: SkeletalMeshLODGroupSettings[];
	static Load(ResourceName: string): SkeletalMeshReductionSettings;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshReductionSettings;
	static GetDefaultObject(): SkeletalMeshReductionSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshReductionSettings;
	static C(Other: UObject): SkeletalMeshReductionSettings;
}

declare class SlateTextureAtlasInterface extends Interface { 
	static Load(ResourceName: string): SlateTextureAtlasInterface;
	static Find(Outer: UObject, ResourceName: string): SlateTextureAtlasInterface;
	static GetDefaultObject(): SlateTextureAtlasInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateTextureAtlasInterface;
	static C(Other: UObject): SlateTextureAtlasInterface;
}

declare class SoundGroup { 
	SoundGroup: ESoundGroup;
	DisplayName: string;
	bAlwaysDecompressOnLoad: boolean;
	DecompressedDuration: number;
	clone() : SoundGroup;
	static C(Other: UObject): SoundGroup;
}

declare class SoundGroups extends UObject { 
	SoundGroupProfiles: SoundGroup[];
	static Load(ResourceName: string): SoundGroups;
	static Find(Outer: UObject, ResourceName: string): SoundGroups;
	static GetDefaultObject(): SoundGroups;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundGroups;
	static C(Other: UObject): SoundGroups;
}

declare class SoundWaveProcedural extends SoundWave { 
	static Load(ResourceName: string): SoundWaveProcedural;
	static Find(Outer: UObject, ResourceName: string): SoundWaveProcedural;
	static GetDefaultObject(): SoundWaveProcedural;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveProcedural;
	static C(Other: UObject): SoundWaveProcedural;
}

declare class SoundNodeAssetReferencer extends SoundNode { 
	static Load(ResourceName: string): SoundNodeAssetReferencer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeAssetReferencer;
	static GetDefaultObject(): SoundNodeAssetReferencer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeAssetReferencer;
	static C(Other: UObject): SoundNodeAssetReferencer;
}

declare class SoundNodeWavePlayer extends SoundNodeAssetReferencer { 
	SoundWaveAssetPtr: any;
	SoundWave: SoundWave;
	bLooping: boolean;
	static Load(ResourceName: string): SoundNodeWavePlayer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeWavePlayer;
	static GetDefaultObject(): SoundNodeWavePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeWavePlayer;
	static C(Other: UObject): SoundNodeWavePlayer;
}

declare class SoundNodeAttenuation extends SoundNode { 
	AttenuationSettings: SoundAttenuation;
	AttenuationOverrides: SoundAttenuationSettings;
	bOverrideAttenuation: boolean;
	static Load(ResourceName: string): SoundNodeAttenuation;
	static Find(Outer: UObject, ResourceName: string): SoundNodeAttenuation;
	static GetDefaultObject(): SoundNodeAttenuation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeAttenuation;
	static C(Other: UObject): SoundNodeAttenuation;
}

declare class SoundNodeBranch extends SoundNode { 
	BoolParameterName: string;
	static Load(ResourceName: string): SoundNodeBranch;
	static Find(Outer: UObject, ResourceName: string): SoundNodeBranch;
	static GetDefaultObject(): SoundNodeBranch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeBranch;
	static C(Other: UObject): SoundNodeBranch;
}

declare class SoundNodeConcatenator extends SoundNode { 
	InputVolume: number[];
	static Load(ResourceName: string): SoundNodeConcatenator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeConcatenator;
	static GetDefaultObject(): SoundNodeConcatenator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeConcatenator;
	static C(Other: UObject): SoundNodeConcatenator;
}

declare class SoundNodeDelay extends SoundNode { 
	DelayMin: number;
	DelayMax: number;
	static Load(ResourceName: string): SoundNodeDelay;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDelay;
	static GetDefaultObject(): SoundNodeDelay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDelay;
	static C(Other: UObject): SoundNodeDelay;
}

declare class DialogueWaveParameter { 
	DialogueWave: DialogueWave;
	Context: DialogueContext;
	clone() : DialogueWaveParameter;
	static C(Other: UObject): DialogueWaveParameter;
}

declare class SoundNodeDialoguePlayer extends SoundNode { 
	DialogueWaveParameter: DialogueWaveParameter;
	bLooping: boolean;
	static Load(ResourceName: string): SoundNodeDialoguePlayer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDialoguePlayer;
	static GetDefaultObject(): SoundNodeDialoguePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDialoguePlayer;
	static C(Other: UObject): SoundNodeDialoguePlayer;
}

declare class DistanceDatum { 
	FadeInDistanceStart: number;
	FadeInDistanceEnd: number;
	FadeOutDistanceStart: number;
	FadeOutDistanceEnd: number;
	Volume: number;
	clone() : DistanceDatum;
	static C(Other: UObject): DistanceDatum;
}

declare class SoundNodeDistanceCrossFade extends SoundNode { 
	CrossFadeInput: DistanceDatum[];
	static Load(ResourceName: string): SoundNodeDistanceCrossFade;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDistanceCrossFade;
	static GetDefaultObject(): SoundNodeDistanceCrossFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDistanceCrossFade;
	static C(Other: UObject): SoundNodeDistanceCrossFade;
}

declare class SoundNodeParamCrossFade extends SoundNodeDistanceCrossFade { 
	ParamName: string;
	static Load(ResourceName: string): SoundNodeParamCrossFade;
	static Find(Outer: UObject, ResourceName: string): SoundNodeParamCrossFade;
	static GetDefaultObject(): SoundNodeParamCrossFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeParamCrossFade;
	static C(Other: UObject): SoundNodeParamCrossFade;
}

declare class SoundNodeDoppler extends SoundNode { 
	DopplerIntensity: number;
	static Load(ResourceName: string): SoundNodeDoppler;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDoppler;
	static GetDefaultObject(): SoundNodeDoppler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDoppler;
	static C(Other: UObject): SoundNodeDoppler;
}

declare class SoundNodeEnveloper extends SoundNode { 
	LoopStart: number;
	LoopEnd: number;
	DurationAfterLoop: number;
	LoopCount: number;
	bLoopIndefinitely: boolean;
	bLoop: boolean;
	VolumeInterpCurve: DistributionFloatConstantCurve;
	PitchInterpCurve: DistributionFloatConstantCurve;
	VolumeCurve: RuntimeFloatCurve;
	PitchCurve: RuntimeFloatCurve;
	PitchMin: number;
	PitchMax: number;
	VolumeMin: number;
	VolumeMax: number;
	static Load(ResourceName: string): SoundNodeEnveloper;
	static Find(Outer: UObject, ResourceName: string): SoundNodeEnveloper;
	static GetDefaultObject(): SoundNodeEnveloper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeEnveloper;
	static C(Other: UObject): SoundNodeEnveloper;
}

declare class SoundNodeGroupControl extends SoundNode { 
	GroupSizes: number[];
	static Load(ResourceName: string): SoundNodeGroupControl;
	static Find(Outer: UObject, ResourceName: string): SoundNodeGroupControl;
	static GetDefaultObject(): SoundNodeGroupControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeGroupControl;
	static C(Other: UObject): SoundNodeGroupControl;
}

declare class SoundNodeLooping extends SoundNode { 
	LoopCount: number;
	bLoopIndefinitely: boolean;
	static Load(ResourceName: string): SoundNodeLooping;
	static Find(Outer: UObject, ResourceName: string): SoundNodeLooping;
	static GetDefaultObject(): SoundNodeLooping;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeLooping;
	static C(Other: UObject): SoundNodeLooping;
}

declare class SoundNodeMature extends SoundNode { 
	static Load(ResourceName: string): SoundNodeMature;
	static Find(Outer: UObject, ResourceName: string): SoundNodeMature;
	static GetDefaultObject(): SoundNodeMature;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeMature;
	static C(Other: UObject): SoundNodeMature;
}

declare class SoundNodeMixer extends SoundNode { 
	InputVolume: number[];
	static Load(ResourceName: string): SoundNodeMixer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeMixer;
	static GetDefaultObject(): SoundNodeMixer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeMixer;
	static C(Other: UObject): SoundNodeMixer;
}

declare class SoundNodeModulator extends SoundNode { 
	PitchMin: number;
	PitchMax: number;
	VolumeMin: number;
	VolumeMax: number;
	static Load(ResourceName: string): SoundNodeModulator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeModulator;
	static GetDefaultObject(): SoundNodeModulator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeModulator;
	static C(Other: UObject): SoundNodeModulator;
}

declare type ModulationParamMode = 'MPM_Normal' | 'MPM_Abs' | 'MPM_Direct';
declare var ModulationParamMode : { MPM_Normal:'MPM_Normal',MPM_Abs:'MPM_Abs',MPM_Direct:'MPM_Direct', };
declare class ModulatorContinuousParams { 
	ParameterName: string;
	Default: number;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: ModulationParamMode;
	clone() : ModulatorContinuousParams;
	static C(Other: UObject): ModulatorContinuousParams;
}

declare class SoundNodeModulatorContinuous extends SoundNode { 
	PitchModulationParams: ModulatorContinuousParams;
	VolumeModulationParams: ModulatorContinuousParams;
	static Load(ResourceName: string): SoundNodeModulatorContinuous;
	static Find(Outer: UObject, ResourceName: string): SoundNodeModulatorContinuous;
	static GetDefaultObject(): SoundNodeModulatorContinuous;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeModulatorContinuous;
	static C(Other: UObject): SoundNodeModulatorContinuous;
}

declare class SoundNodeOscillator extends SoundNode { 
	bModulateVolume: boolean;
	bModulatePitch: boolean;
	AmplitudeMin: number;
	AmplitudeMax: number;
	FrequencyMin: number;
	FrequencyMax: number;
	OffsetMin: number;
	OffsetMax: number;
	CenterMin: number;
	CenterMax: number;
	static Load(ResourceName: string): SoundNodeOscillator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeOscillator;
	static GetDefaultObject(): SoundNodeOscillator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeOscillator;
	static C(Other: UObject): SoundNodeOscillator;
}

declare class SoundNodeQualityLevel extends SoundNode { 
	static Load(ResourceName: string): SoundNodeQualityLevel;
	static Find(Outer: UObject, ResourceName: string): SoundNodeQualityLevel;
	static GetDefaultObject(): SoundNodeQualityLevel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeQualityLevel;
	static C(Other: UObject): SoundNodeQualityLevel;
}

declare class SoundNodeRandom extends SoundNode { 
	Weights: number[];
	PreselectAtLevelLoad: number;
	bRandomizeWithoutReplacement: boolean;
	HasBeenUsed: boolean[];
	NumRandomUsed: number;
	PIEHiddenNodes: number[];
	static Load(ResourceName: string): SoundNodeRandom;
	static Find(Outer: UObject, ResourceName: string): SoundNodeRandom;
	static GetDefaultObject(): SoundNodeRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeRandom;
	static C(Other: UObject): SoundNodeRandom;
}

declare class SoundNodeSoundClass extends SoundNode { 
	SoundClassOverride: SoundClass;
	static Load(ResourceName: string): SoundNodeSoundClass;
	static Find(Outer: UObject, ResourceName: string): SoundNodeSoundClass;
	static GetDefaultObject(): SoundNodeSoundClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeSoundClass;
	static C(Other: UObject): SoundNodeSoundClass;
}

declare class SoundNodeSwitch extends SoundNode { 
	IntParameterName: string;
	static Load(ResourceName: string): SoundNodeSwitch;
	static Find(Outer: UObject, ResourceName: string): SoundNodeSwitch;
	static GetDefaultObject(): SoundNodeSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeSwitch;
	static C(Other: UObject): SoundNodeSwitch;
}

declare class SoundNodeWaveParam extends SoundNode { 
	WaveParameterName: string;
	static Load(ResourceName: string): SoundNodeWaveParam;
	static Find(Outer: UObject, ResourceName: string): SoundNodeWaveParam;
	static GetDefaultObject(): SoundNodeWaveParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeWaveParam;
	static C(Other: UObject): SoundNodeWaveParam;
}

declare class TextPropertyTestObject extends UObject { 
	DefaultedText: string;
	UndefaultedText: string;
	TransientText: string;
	static Load(ResourceName: string): TextPropertyTestObject;
	static Find(Outer: UObject, ResourceName: string): TextPropertyTestObject;
	static GetDefaultObject(): TextPropertyTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextPropertyTestObject;
	static C(Other: UObject): TextPropertyTestObject;
}

declare class LightMapTexture2D extends Texture2D { 
	static Load(ResourceName: string): LightMapTexture2D;
	static Find(Outer: UObject, ResourceName: string): LightMapTexture2D;
	static GetDefaultObject(): LightMapTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapTexture2D;
	static C(Other: UObject): LightMapTexture2D;
}

declare type EShadowMapFlags = 'SMF_None' | 'SMF_Streamed';
declare var EShadowMapFlags : { SMF_None:'SMF_None',SMF_Streamed:'SMF_Streamed', };
declare class ShadowMapTexture2D extends Texture2D { 
	ShadowmapFlags: EShadowMapFlags;
	static Load(ResourceName: string): ShadowMapTexture2D;
	static Find(Outer: UObject, ResourceName: string): ShadowMapTexture2D;
	static GetDefaultObject(): ShadowMapTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShadowMapTexture2D;
	static C(Other: UObject): ShadowMapTexture2D;
}

declare class CanvasRenderTarget2D extends TextureRenderTarget2D { 
	OnCanvasRenderTargetUpdate: UnrealEngineMulticastDelegate<(Canvas: Canvas, Width: number, Height: number) => void>;
	World: any;
	bShouldClearRenderTargetOnReceiveUpdate: boolean;
	static Load(ResourceName: string): CanvasRenderTarget2D;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2D;
	static GetDefaultObject(): CanvasRenderTarget2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2D;
	UpdateResource(): void;
	ReceiveUpdate(Canvas: Canvas,Width: number,Height: number): void;
	GetSize(Width?: number,Height?: number): {Width: number, Height: number};
	static CreateCanvasRenderTarget2D(WorldContextObject: UObject,CanvasRenderTarget2DClass: UnrealEngineClass,Width: number,Height: number): CanvasRenderTarget2D;
	static C(Other: UObject): CanvasRenderTarget2D;
}

declare class TextureLODGroup { 
	Group: TextureGroup;
	LODBias: number;
	NumStreamedMips: number;
	MipGenSettings: TextureMipGenSettings;
	MinLODSize: number;
	MaxLODSize: number;
	MinMagFilter: string;
	MipFilter: string;
	clone() : TextureLODGroup;
	static C(Other: UObject): TextureLODGroup;
}

declare class TextureLODSettings extends UObject { 
	TextureLODGroups: TextureLODGroup[];
	static Load(ResourceName: string): TextureLODSettings;
	static Find(Outer: UObject, ResourceName: string): TextureLODSettings;
	static GetDefaultObject(): TextureLODSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLODSettings;
	static C(Other: UObject): TextureLODSettings;
}

declare class DeviceProfile extends TextureLODSettings { 
	DeviceType: string;
	BaseProfileName: string;
	Parent: UObject;
	CVars: string[];
	static Load(ResourceName: string): DeviceProfile;
	static Find(Outer: UObject, ResourceName: string): DeviceProfile;
	static GetDefaultObject(): DeviceProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfile;
	static C(Other: UObject): DeviceProfile;
}

declare class UserDefinedEnum extends Enum { 
	UniqueNameIndex: any;
	DisplayNameMap: any;
	static Load(ResourceName: string): UserDefinedEnum;
	static Find(Outer: UObject, ResourceName: string): UserDefinedEnum;
	static GetDefaultObject(): UserDefinedEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedEnum;
	static C(Other: UObject): UserDefinedEnum;
}

declare type EVectorFieldConstructionOp = 'VFCO_Extrude' | 'VFCO_Revolve';
declare var EVectorFieldConstructionOp : { VFCO_Extrude:'VFCO_Extrude',VFCO_Revolve:'VFCO_Revolve', };
declare class VectorFieldStatic extends VectorField { 
	SizeX: number;
	SizeY: number;
	SizeZ: number;
	SourceFilePath: string;
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): VectorFieldStatic;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStatic;
	static GetDefaultObject(): VectorFieldStatic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStatic;
	static C(Other: UObject): VectorFieldStatic;
}

declare class VectorFieldAnimated extends VectorField { 
	Texture: Texture2D;
	ConstructionOp: EVectorFieldConstructionOp;
	VolumeSizeX: number;
	VolumeSizeY: number;
	VolumeSizeZ: number;
	SubImagesX: number;
	SubImagesY: number;
	FrameCount: number;
	FramesPerSecond: number;
	bLoop: boolean;
	NoiseField: VectorFieldStatic;
	NoiseScale: number;
	NoiseMax: number;
	static Load(ResourceName: string): VectorFieldAnimated;
	static Find(Outer: UObject, ResourceName: string): VectorFieldAnimated;
	static GetDefaultObject(): VectorFieldAnimated;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldAnimated;
	static C(Other: UObject): VectorFieldAnimated;
}

declare class VisualLoggerAutomationTests extends UObject { 
	static Load(ResourceName: string): VisualLoggerAutomationTests;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerAutomationTests;
	static GetDefaultObject(): VisualLoggerAutomationTests;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerAutomationTests;
	static C(Other: UObject): VisualLoggerAutomationTests;
}

declare class VisualLoggerDebugSnapshotInterface extends Interface { 
	static Load(ResourceName: string): VisualLoggerDebugSnapshotInterface;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerDebugSnapshotInterface;
	static GetDefaultObject(): VisualLoggerDebugSnapshotInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerDebugSnapshotInterface;
	static C(Other: UObject): VisualLoggerDebugSnapshotInterface;
}

declare class MoviePlayerSettings extends UObject { 
	bWaitForMoviesToComplete: boolean;
	bMoviesAreSkippable: boolean;
	StartupMovies: string[];
	static Load(ResourceName: string): MoviePlayerSettings;
	static Find(Outer: UObject, ResourceName: string): MoviePlayerSettings;
	static GetDefaultObject(): MoviePlayerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MoviePlayerSettings;
	static C(Other: UObject): MoviePlayerSettings;
}

declare class SoundFactory extends Factory { 
	bAutoCreateCue: boolean;
	bIncludeAttenuationNode: boolean;
	bIncludeLoopingNode: boolean;
	bIncludeModulatorNode: boolean;
	CueVolume: number;
	CuePackageSuffix: string;
	static Load(ResourceName: string): SoundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundFactory;
	static GetDefaultObject(): SoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundFactory;
	static C(Other: UObject): SoundFactory;
}

declare class ReimportSoundFactory extends SoundFactory { 
	static Load(ResourceName: string): ReimportSoundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundFactory;
	static GetDefaultObject(): ReimportSoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundFactory;
	static C(Other: UObject): ReimportSoundFactory;
}

declare class SoundSurroundFactory extends Factory { 
	CueVolume: number;
	static Load(ResourceName: string): SoundSurroundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundFactory;
	static GetDefaultObject(): SoundSurroundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundFactory;
	static C(Other: UObject): SoundSurroundFactory;
}

declare class ReimportSoundSurroundFactory extends SoundSurroundFactory { 
	ReimportPaths: string[];
	static Load(ResourceName: string): ReimportSoundSurroundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundSurroundFactory;
	static GetDefaultObject(): ReimportSoundSurroundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundSurroundFactory;
	static C(Other: UObject): ReimportSoundSurroundFactory;
}

declare class MacTargetSettings extends UObject { 
	TargetedRHIs: string[];
	CachedShaderFormats: string[];
	MaxShaderLanguageVersion: number;
	static Load(ResourceName: string): MacTargetSettings;
	static Find(Outer: UObject, ResourceName: string): MacTargetSettings;
	static GetDefaultObject(): MacTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MacTargetSettings;
	static C(Other: UObject): MacTargetSettings;
}

declare type ECompilerVersion = 'Default' | 'VisualStudio2013' | 'VisualStudio2015' | 'VisualStudio2017';
declare var ECompilerVersion : { Default:'Default',VisualStudio2013:'VisualStudio2013',VisualStudio2015:'VisualStudio2015',VisualStudio2017:'VisualStudio2017', };
declare type EMinimumSupportedOS = 'MSOS_Vista';
declare var EMinimumSupportedOS : { MSOS_Vista:'MSOS_Vista', };
declare class WindowsTargetSettings extends UObject { 
	Compiler: Compiler;
	TargetedRHIs: string[];
	MinimumOSVersion: MinimumOSVersion;
	AudioDevice: string;
	static Load(ResourceName: string): WindowsTargetSettings;
	static Find(Outer: UObject, ResourceName: string): WindowsTargetSettings;
	static GetDefaultObject(): WindowsTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindowsTargetSettings;
	static C(Other: UObject): WindowsTargetSettings;
}

declare class LinuxTargetSettings extends UObject { 
	TargetedRHIs: string[];
	static Load(ResourceName: string): LinuxTargetSettings;
	static Find(Outer: UObject, ResourceName: string): LinuxTargetSettings;
	static GetDefaultObject(): LinuxTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinuxTargetSettings;
	static C(Other: UObject): LinuxTargetSettings;
}

declare class DialogueVoiceFactory extends Factory { 
	static Load(ResourceName: string): DialogueVoiceFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueVoiceFactory;
	static GetDefaultObject(): DialogueVoiceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoiceFactory;
	static C(Other: UObject): DialogueVoiceFactory;
}

declare class DialogueWaveFactory extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSpeakerVoice: DialogueVoice;
	HasSetInitialTargetVoice: boolean;
	InitialTargetVoices: DialogueVoice[];
	static Load(ResourceName: string): DialogueWaveFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueWaveFactory;
	static GetDefaultObject(): DialogueWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWaveFactory;
	static C(Other: UObject): DialogueWaveFactory;
}

declare class ReverbEffectFactory extends Factory { 
	static Load(ResourceName: string): ReverbEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ReverbEffectFactory;
	static GetDefaultObject(): ReverbEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffectFactory;
	static C(Other: UObject): ReverbEffectFactory;
}

declare class SoundAttenuationFactory extends Factory { 
	static Load(ResourceName: string): SoundAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): SoundAttenuationFactory;
	static GetDefaultObject(): SoundAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuationFactory;
	static C(Other: UObject): SoundAttenuationFactory;
}

declare class SoundClassFactory extends Factory { 
	static Load(ResourceName: string): SoundClassFactory;
	static Find(Outer: UObject, ResourceName: string): SoundClassFactory;
	static GetDefaultObject(): SoundClassFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassFactory;
	static C(Other: UObject): SoundClassFactory;
}

declare class SoundClassGraph extends EdGraph { 
	static Load(ResourceName: string): SoundClassGraph;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraph;
	static GetDefaultObject(): SoundClassGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraph;
	static C(Other: UObject): SoundClassGraph;
}

declare class SoundClassGraphNode extends EdGraphNode { 
	SoundClass: SoundClass;
	static Load(ResourceName: string): SoundClassGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphNode;
	static GetDefaultObject(): SoundClassGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphNode;
	static C(Other: UObject): SoundClassGraphNode;
}

declare class SoundClassGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundClassGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphSchema;
	static GetDefaultObject(): SoundClassGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphSchema;
	static C(Other: UObject): SoundClassGraphSchema;
}

declare class SoundConcurrencyFactory extends Factory { 
	static Load(ResourceName: string): SoundConcurrencyFactory;
	static Find(Outer: UObject, ResourceName: string): SoundConcurrencyFactory;
	static GetDefaultObject(): SoundConcurrencyFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrencyFactory;
	static C(Other: UObject): SoundConcurrencyFactory;
}

declare class SoundCueFactoryNew extends Factory { 
	InitialSoundWave: SoundWave;
	InitialDialogueWave: DialogueWave;
	static Load(ResourceName: string): SoundCueFactoryNew;
	static Find(Outer: UObject, ResourceName: string): SoundCueFactoryNew;
	static GetDefaultObject(): SoundCueFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueFactoryNew;
	static C(Other: UObject): SoundCueFactoryNew;
}

declare class SoundCueGraph extends EdGraph { 
	static Load(ResourceName: string): SoundCueGraph;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraph;
	static GetDefaultObject(): SoundCueGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraph;
	static C(Other: UObject): SoundCueGraph;
}

declare class SoundCueGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): SoundCueGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Base;
	static GetDefaultObject(): SoundCueGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Base;
	static C(Other: UObject): SoundCueGraphNode_Base;
}

declare class SoundCueGraphNode extends SoundCueGraphNode_Base { 
	SoundNode: SoundNode;
	static Load(ResourceName: string): SoundCueGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode;
	static GetDefaultObject(): SoundCueGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode;
	static C(Other: UObject): SoundCueGraphNode;
}

declare class SoundCueGraphNode_Root extends SoundCueGraphNode_Base { 
	static Load(ResourceName: string): SoundCueGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Root;
	static GetDefaultObject(): SoundCueGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Root;
	static C(Other: UObject): SoundCueGraphNode_Root;
}

declare class SoundCueGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundCueGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphSchema;
	static GetDefaultObject(): SoundCueGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphSchema;
	static C(Other: UObject): SoundCueGraphSchema;
}

declare class SoundMixFactory extends Factory { 
	static Load(ResourceName: string): SoundMixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundMixFactory;
	static GetDefaultObject(): SoundMixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMixFactory;
	static C(Other: UObject): SoundMixFactory;
}

declare class SoundSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixFactory;
	static GetDefaultObject(): SoundSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixFactory;
	static C(Other: UObject): SoundSubmixFactory;
}

declare class SoundSubmixGraph extends EdGraph { 
	static Load(ResourceName: string): SoundSubmixGraph;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraph;
	static GetDefaultObject(): SoundSubmixGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraph;
	static C(Other: UObject): SoundSubmixGraph;
}

declare class SoundSubmixGraphNode extends EdGraphNode { 
	SoundSubmix: SoundSubmix;
	static Load(ResourceName: string): SoundSubmixGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphNode;
	static GetDefaultObject(): SoundSubmixGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphNode;
	static C(Other: UObject): SoundSubmixGraphNode;
}

declare class SoundSubmixGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundSubmixGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphSchema;
	static GetDefaultObject(): SoundSubmixGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphSchema;
	static C(Other: UObject): SoundSubmixGraphSchema;
}

declare class NamedInterface { 
	InterfaceName: string;
	InterfaceObject: UObject;
	clone() : NamedInterface;
	static C(Other: UObject): NamedInterface;
}

declare class NamedInterfaceDef { 
	InterfaceName: string;
	InterfaceClassName: string;
	clone() : NamedInterfaceDef;
	static C(Other: UObject): NamedInterfaceDef;
}

declare class NamedInterfaces extends UObject { 
	NamedInterfaces: NamedInterface[];
	NamedInterfaceDefs: NamedInterfaceDef[];
	static Load(ResourceName: string): NamedInterfaces;
	static Find(Outer: UObject, ResourceName: string): NamedInterfaces;
	static GetDefaultObject(): NamedInterfaces;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NamedInterfaces;
	static C(Other: UObject): NamedInterfaces;
}

declare class TurnBasedMatchInterface extends Interface { 
	static Load(ResourceName: string): TurnBasedMatchInterface;
	static Find(Outer: UObject, ResourceName: string): TurnBasedMatchInterface;
	static GetDefaultObject(): TurnBasedMatchInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TurnBasedMatchInterface;
	OnMatchReceivedTurn(Match: string,bDidBecomeActive: boolean): void;
	OnMatchEnded(Match: string): void;
	static C(Other: UObject): TurnBasedMatchInterface;
}

declare class AchievementBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AchievementBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AchievementBlueprintLibrary;
	static GetDefaultObject(): AchievementBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementBlueprintLibrary;
	static GetCachedAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
	static GetCachedAchievementDescription(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
	static C(Other: UObject): AchievementBlueprintLibrary;
}

declare class AchievementQueryCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): AchievementQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): AchievementQueryCallbackProxy;
	static GetDefaultObject(): AchievementQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementQueryCallbackProxy;
	static CacheAchievements(WorldContextObject: UObject,PlayerController: PlayerController): AchievementQueryCallbackProxy;
	static CacheAchievementDescriptions(WorldContextObject: UObject,PlayerController: PlayerController): AchievementQueryCallbackProxy;
	static C(Other: UObject): AchievementQueryCallbackProxy;
}

declare class AchievementWriteCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(WrittenAchievementName: string, WrittenProgress: number, WrittenUserTag: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(WrittenAchievementName: string, WrittenProgress: number, WrittenUserTag: number) => void>;
	static Load(ResourceName: string): AchievementWriteCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): AchievementWriteCallbackProxy;
	static GetDefaultObject(): AchievementWriteCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementWriteCallbackProxy;
	static WriteAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementName: string,Progress: number,UserTag: number): AchievementWriteCallbackProxy;
	static C(Other: UObject): AchievementWriteCallbackProxy;
}

declare class ConnectionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(ErrorCode: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(ErrorCode: number) => void>;
	static Load(ResourceName: string): ConnectionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): ConnectionCallbackProxy;
	static GetDefaultObject(): ConnectionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConnectionCallbackProxy;
	static ConnectToService(WorldContextObject: UObject,PlayerController: PlayerController): ConnectionCallbackProxy;
	static C(Other: UObject): ConnectionCallbackProxy;
}

declare class CreateSessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): CreateSessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): CreateSessionCallbackProxy;
	static GetDefaultObject(): CreateSessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CreateSessionCallbackProxy;
	static CreateSession(WorldContextObject: UObject,PlayerController: PlayerController,PublicConnections: number,bUseLAN: boolean): CreateSessionCallbackProxy;
	static C(Other: UObject): CreateSessionCallbackProxy;
}

declare class DestroySessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): DestroySessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): DestroySessionCallbackProxy;
	static GetDefaultObject(): DestroySessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestroySessionCallbackProxy;
	static DestroySession(WorldContextObject: UObject,PlayerController: PlayerController): DestroySessionCallbackProxy;
	static C(Other: UObject): DestroySessionCallbackProxy;
}

declare class EndMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EndMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): EndMatchCallbackProxy;
	static GetDefaultObject(): EndMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndMatchCallbackProxy;
	static C(Other: UObject): EndMatchCallbackProxy;
}

declare class EndTurnCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EndTurnCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): EndTurnCallbackProxy;
	static GetDefaultObject(): EndTurnCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndTurnCallbackProxy;
	static C(Other: UObject): EndTurnCallbackProxy;
}

declare class BlueprintSessionResult { 
	clone() : BlueprintSessionResult;
	static C(Other: UObject): BlueprintSessionResult;
}

declare class FindSessionsCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(Results: BlueprintSessionResult[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(Results: BlueprintSessionResult[]) => void>;
	static Load(ResourceName: string): FindSessionsCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): FindSessionsCallbackProxy;
	static GetDefaultObject(): FindSessionsCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FindSessionsCallbackProxy;
	static GetServerName(Result: BlueprintSessionResult): string;
	static GetPingInMs(Result: BlueprintSessionResult): number;
	static GetMaxPlayers(Result: BlueprintSessionResult): number;
	static GetCurrentPlayers(Result: BlueprintSessionResult): number;
	static FindSessions(WorldContextObject: UObject,PlayerController: PlayerController,MaxResults: number,bUseLAN: boolean): FindSessionsCallbackProxy;
	static C(Other: UObject): FindSessionsCallbackProxy;
}

declare class FindTurnBasedMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(MatchID: string) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(MatchID: string) => void>;
	static Load(ResourceName: string): FindTurnBasedMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): FindTurnBasedMatchCallbackProxy;
	static GetDefaultObject(): FindTurnBasedMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FindTurnBasedMatchCallbackProxy;
	static C(Other: UObject): FindTurnBasedMatchCallbackProxy;
}

declare type EInAppPurchaseState = 'Unknown' | 'Success' | 'Failed' | 'Cancelled' | 'Invalid' | 'NotAllowed' | 'Restored' | 'AlreadyOwned';
declare var EInAppPurchaseState : { Unknown:'Unknown',Success:'Success',Failed:'Failed',Cancelled:'Cancelled',Invalid:'Invalid',NotAllowed:'NotAllowed',Restored:'Restored',AlreadyOwned:'AlreadyOwned', };
declare class InAppPurchaseProductInfo { 
	Identifier: string;
	TransactionIdentifier: string;
	DisplayName: string;
	DisplayDescription: string;
	DisplayPrice: string;
	RawPrice: number;
	CurrencyCode: string;
	CurrencySymbol: string;
	DecimalSeparator: string;
	GroupingSeparator: string;
	ReceiptData: string;
	clone() : InAppPurchaseProductInfo;
	static C(Other: UObject): InAppPurchaseProductInfo;
}

declare class InAppPurchaseProductRequest { 
	ProductIdentifier: string;
	bIsConsumable: boolean;
	clone() : InAppPurchaseProductRequest;
	static C(Other: UObject): InAppPurchaseProductRequest;
}

declare class InAppPurchaseCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppPurchaseInformation: InAppPurchaseProductInfo) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppPurchaseInformation: InAppPurchaseProductInfo) => void>;
	static Load(ResourceName: string): InAppPurchaseCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseCallbackProxy;
	static GetDefaultObject(): InAppPurchaseCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseCallbackProxy;
	static CreateProxyObjectForInAppPurchase(PlayerController: PlayerController,ProductRequest: InAppPurchaseProductRequest): InAppPurchaseCallbackProxy;
	static C(Other: UObject): InAppPurchaseCallbackProxy;
}

declare class InAppPurchaseQueryCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(InAppPurchaseInformation: InAppPurchaseProductInfo[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(InAppPurchaseInformation: InAppPurchaseProductInfo[]) => void>;
	static Load(ResourceName: string): InAppPurchaseQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseQueryCallbackProxy;
	static GetDefaultObject(): InAppPurchaseQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseQueryCallbackProxy;
	static ReadInAppPurchaseInformation(PlayerController: PlayerController,ProductIdentifiers: string[]): InAppPurchaseQueryCallbackProxy;
	static C(Other: UObject): InAppPurchaseQueryCallbackProxy;
}

declare class InAppPurchaseRestoreInfo { 
	Identifier: string;
	ReceiptData: string;
	TransactionIdentifier: string;
	clone() : InAppPurchaseRestoreInfo;
	static C(Other: UObject): InAppPurchaseRestoreInfo;
}

declare class InAppPurchaseRestoreCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppRestorePurchaseInformation: InAppPurchaseRestoreInfo[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppRestorePurchaseInformation: InAppPurchaseRestoreInfo[]) => void>;
	static Load(ResourceName: string): InAppPurchaseRestoreCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseRestoreCallbackProxy;
	static GetDefaultObject(): InAppPurchaseRestoreCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseRestoreCallbackProxy;
	static CreateProxyObjectForInAppPurchaseRestore(ConsumableProductFlags: InAppPurchaseProductRequest[],PlayerController: PlayerController): InAppPurchaseRestoreCallbackProxy;
	static C(Other: UObject): InAppPurchaseRestoreCallbackProxy;
}

declare class IpConnection extends NetConnection { 
	static Load(ResourceName: string): IpConnection;
	static Find(Outer: UObject, ResourceName: string): IpConnection;
	static GetDefaultObject(): IpConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IpConnection;
	static C(Other: UObject): IpConnection;
}

declare class IpNetDriver extends NetDriver { 
	LogPortUnreach: boolean;
	AllowPlayerPortUnreach: boolean;
	MaxPortCountToTry: any;
	static Load(ResourceName: string): IpNetDriver;
	static Find(Outer: UObject, ResourceName: string): IpNetDriver;
	static GetDefaultObject(): IpNetDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IpNetDriver;
	static C(Other: UObject): IpNetDriver;
}

declare class JoinSessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): JoinSessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): JoinSessionCallbackProxy;
	static GetDefaultObject(): JoinSessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JoinSessionCallbackProxy;
	static JoinSession(WorldContextObject: UObject,PlayerController: PlayerController,SearchResult: BlueprintSessionResult): JoinSessionCallbackProxy;
	static C(Other: UObject): JoinSessionCallbackProxy;
}

declare class LeaderboardBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LeaderboardBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): LeaderboardBlueprintLibrary;
	static GetDefaultObject(): LeaderboardBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardBlueprintLibrary;
	static WriteLeaderboardInteger(PlayerController: PlayerController,StatName: string,StatValue: number): boolean;
	static C(Other: UObject): LeaderboardBlueprintLibrary;
}

declare class LeaderboardFlushCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(SessionName: string) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(SessionName: string) => void>;
	static Load(ResourceName: string): LeaderboardFlushCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LeaderboardFlushCallbackProxy;
	static GetDefaultObject(): LeaderboardFlushCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardFlushCallbackProxy;
	static CreateProxyObjectForFlush(PlayerController: PlayerController,SessionName: string): LeaderboardFlushCallbackProxy;
	static C(Other: UObject): LeaderboardFlushCallbackProxy;
}

declare class LeaderboardQueryCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(LeaderboardValue: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(LeaderboardValue: number) => void>;
	static Load(ResourceName: string): LeaderboardQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LeaderboardQueryCallbackProxy;
	static GetDefaultObject(): LeaderboardQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardQueryCallbackProxy;
	static ReadLeaderboardInteger(PlayerController: PlayerController,StatName: string): LeaderboardQueryCallbackProxy;
	static C(Other: UObject): LeaderboardQueryCallbackProxy;
}

declare class LogoutCallbackProxy extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	static Load(ResourceName: string): LogoutCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LogoutCallbackProxy;
	static GetDefaultObject(): LogoutCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LogoutCallbackProxy;
	static Logout(WorldContextObject: UObject,PlayerController: PlayerController): LogoutCallbackProxy;
	static C(Other: UObject): LogoutCallbackProxy;
}

declare class OnlineBeacon extends Actor { 
	BeaconConnectionInitialTimeout: number;
	BeaconConnectionTimeout: number;
	NetDriver: NetDriver;
	static GetDefaultObject(): OnlineBeacon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeacon;
	static C(Other: UObject): OnlineBeacon;
}

declare class OnlineBeaconHostObject extends Actor { 
	BeaconTypeName: string;
	ClientBeaconActorClass: UnrealEngineClass;
	ClientActors: OnlineBeaconClient[];
	static GetDefaultObject(): OnlineBeaconHostObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconHostObject;
	static C(Other: UObject): OnlineBeaconHostObject;
}

declare type EBeaconConnectionState = 'Invalid' | 'Closed' | 'Pending' | 'Open';
declare var EBeaconConnectionState : { Invalid:'Invalid',Closed:'Closed',Pending:'Pending',Open:'Open', };
declare class OnlineBeaconClient extends OnlineBeacon { 
	BeaconOwner: OnlineBeaconHostObject;
	BeaconConnection: NetConnection;
	ConnectionState: ConnectionState;
	static GetDefaultObject(): OnlineBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconClient;
	ClientOnConnected(): void;
	static C(Other: UObject): OnlineBeaconClient;
}

declare class PlayerReservation { 
	UniqueId: UniqueNetIdRepl;
	ValidationStr: string;
	ElapsedTime: number;
	clone() : PlayerReservation;
	static C(Other: UObject): PlayerReservation;
}

declare class PartyReservation { 
	TeamNum: number;
	PartyLeader: UniqueNetIdRepl;
	PartyMembers: PlayerReservation[];
	clone() : PartyReservation;
	static C(Other: UObject): PartyReservation;
}

declare class PartyBeaconState extends UObject { 
	SessionName: string;
	NumConsumedReservations: number;
	MaxReservations: number;
	NumTeams: number;
	NumPlayersPerTeam: number;
	TeamAssignmentMethod: string;
	ReservedHostTeamNum: number;
	ForceTeamNum: number;
	Reservations: PartyReservation[];
	static Load(ResourceName: string): PartyBeaconState;
	static Find(Outer: UObject, ResourceName: string): PartyBeaconState;
	static GetDefaultObject(): PartyBeaconState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconState;
	static C(Other: UObject): PartyBeaconState;
}

declare type EClientRequestType = 'NonePending' | 'ExistingSessionReservation' | 'ReservationUpdate' | 'EmptyServerReservation' | 'Reconnect' | 'Abandon';
declare var EClientRequestType : { NonePending:'NonePending',ExistingSessionReservation:'ExistingSessionReservation',ReservationUpdate:'ReservationUpdate',EmptyServerReservation:'EmptyServerReservation',Reconnect:'Reconnect',Abandon:'Abandon', };
declare type EPartyReservationResult = 'NoResult' | 'RequestPending' | 'GeneralError' | 'PartyLimitReached' | 'IncorrectPlayerCount' | 'RequestTimedOut' | 'ReservationDuplicate' | 'ReservationNotFound' | 'ReservationAccepted' | 'ReservationDenied' | 'ReservationDenied_Banned' | 'ReservationRequestCanceled' | 'ReservationInvalid' | 'BadSessionId';
declare var EPartyReservationResult : { NoResult:'NoResult',RequestPending:'RequestPending',GeneralError:'GeneralError',PartyLimitReached:'PartyLimitReached',IncorrectPlayerCount:'IncorrectPlayerCount',RequestTimedOut:'RequestTimedOut',ReservationDuplicate:'ReservationDuplicate',ReservationNotFound:'ReservationNotFound',ReservationAccepted:'ReservationAccepted',ReservationDenied:'ReservationDenied',ReservationDenied_Banned:'ReservationDenied_Banned',ReservationRequestCanceled:'ReservationRequestCanceled',ReservationInvalid:'ReservationInvalid',BadSessionId:'BadSessionId', };
declare class PartyBeaconClient extends OnlineBeaconClient { 
	DestSessionId: string;
	PendingReservation: PartyReservation;
	RequestType: RequestType;
	bPendingReservationSent: boolean;
	bCancelReservation: boolean;
	static GetDefaultObject(): PartyBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconClient;
	ServerUpdateReservationRequest(SessionId: string,ReservationUpdate: PartyReservation): void;
	ServerReservationRequest(SessionId: string,Reservation: PartyReservation): void;
	ServerCancelReservationRequest(PartyLeader: UniqueNetIdRepl): void;
	ClientSendReservationUpdates(NumRemainingReservations: number): void;
	ClientSendReservationFull(): void;
	ClientReservationResponse(ReservationResponse: EPartyReservationResult): void;
	ClientCancelReservationResponse(ReservationResponse: EPartyReservationResult): void;
	static C(Other: UObject): PartyBeaconClient;
}

declare class TestBeaconClient extends OnlineBeaconClient { 
	static GetDefaultObject(): TestBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconClient;
	ServerPong(): void;
	ClientPing(): void;
	static C(Other: UObject): TestBeaconClient;
}

declare class OnlineBeaconHost extends OnlineBeacon { 
	ListenPort: number;
	ClientActors: OnlineBeaconClient[];
	static GetDefaultObject(): OnlineBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconHost;
	static C(Other: UObject): OnlineBeaconHost;
}

declare class PartyBeaconHost extends OnlineBeaconHostObject { 
	State: PartyBeaconState;
	bLogoutOnSessionTimeout: boolean;
	SessionTimeoutSecs: number;
	TravelSessionTimeoutSecs: number;
	static GetDefaultObject(): PartyBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconHost;
	static C(Other: UObject): PartyBeaconHost;
}

declare class TestBeaconHost extends OnlineBeaconHostObject { 
	static GetDefaultObject(): TestBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconHost;
	static C(Other: UObject): TestBeaconHost;
}

declare class OnlineEngineInterfaceImpl extends OnlineEngineInterface { 
	static Load(ResourceName: string): OnlineEngineInterfaceImpl;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterfaceImpl;
	static GetDefaultObject(): OnlineEngineInterfaceImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterfaceImpl;
	static C(Other: UObject): OnlineEngineInterfaceImpl;
}

declare class PIELoginSettingsInternal { 
	Id: string;
	Token: string;
	Type: string;
	TokenBytes: number[];
	clone() : PIELoginSettingsInternal;
	static C(Other: UObject): PIELoginSettingsInternal;
}

declare class OnlinePIESettings extends DeveloperSettings { 
	bOnlinePIEEnabled: boolean;
	Logins: PIELoginSettingsInternal[];
	static Load(ResourceName: string): OnlinePIESettings;
	static Find(Outer: UObject, ResourceName: string): OnlinePIESettings;
	static GetDefaultObject(): OnlinePIESettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlinePIESettings;
	static C(Other: UObject): OnlinePIESettings;
}

declare class OnlineSessionClient extends OnlineSession { 
	bIsFromInvite: boolean;
	bHandlingDisconnect: boolean;
	static Load(ResourceName: string): OnlineSessionClient;
	static Find(Outer: UObject, ResourceName: string): OnlineSessionClient;
	static GetDefaultObject(): OnlineSessionClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineSessionClient;
	static C(Other: UObject): OnlineSessionClient;
}

declare type EMPMatchOutcome = 'None' | 'Quit' | 'Won' | 'Lost' | 'Tied' | 'TimeExpired' | 'First' | 'Second' | 'Third' | 'Fourth';
declare var EMPMatchOutcome : { None:'None',Quit:'Quit',Won:'Won',Lost:'Lost',Tied:'Tied',TimeExpired:'TimeExpired',First:'First',Second:'Second',Third:'Third',Fourth:'Fourth', };
declare class QuitMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): QuitMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): QuitMatchCallbackProxy;
	static GetDefaultObject(): QuitMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QuitMatchCallbackProxy;
	static QuitMatch(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,Outcome: EMPMatchOutcome,TurnTimeoutInSeconds: number): QuitMatchCallbackProxy;
	static C(Other: UObject): QuitMatchCallbackProxy;
}

declare class ShowLoginUICallbackProxy extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	static Load(ResourceName: string): ShowLoginUICallbackProxy;
	static Find(Outer: UObject, ResourceName: string): ShowLoginUICallbackProxy;
	static GetDefaultObject(): ShowLoginUICallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShowLoginUICallbackProxy;
	static ShowExternalLoginUI(WorldContextObject: UObject,InPlayerController: PlayerController): ShowLoginUICallbackProxy;
	static C(Other: UObject): ShowLoginUICallbackProxy;
}

declare class TurnBasedBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): TurnBasedBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): TurnBasedBlueprintLibrary;
	static GetDefaultObject(): TurnBasedBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TurnBasedBlueprintLibrary;
	static RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject,PlayerController: PlayerController,UObject: UObject): void;
	static GetPlayerDisplayName(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
	static GetMyPlayerIndex(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
	static GetIsMyTurn(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
	static C(Other: UObject): TurnBasedBlueprintLibrary;
}

declare class K2Node_InAppPurchase extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchase;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchase;
	static GetDefaultObject(): K2Node_InAppPurchase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchase;
	static C(Other: UObject): K2Node_InAppPurchase;
}

declare class K2Node_InAppPurchaseQuery extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseQuery;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseQuery;
	static GetDefaultObject(): K2Node_InAppPurchaseQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseQuery;
	static C(Other: UObject): K2Node_InAppPurchaseQuery;
}

declare class K2Node_InAppPurchaseRestore extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseRestore;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseRestore;
	static GetDefaultObject(): K2Node_InAppPurchaseRestore;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseRestore;
	static C(Other: UObject): K2Node_InAppPurchaseRestore;
}

declare class K2Node_LatentOnlineCall extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LatentOnlineCall;
	static Find(Outer: UObject, ResourceName: string): K2Node_LatentOnlineCall;
	static GetDefaultObject(): K2Node_LatentOnlineCall;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LatentOnlineCall;
	static C(Other: UObject): K2Node_LatentOnlineCall;
}

declare class K2Node_LeaderboardFlush extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LeaderboardFlush;
	static Find(Outer: UObject, ResourceName: string): K2Node_LeaderboardFlush;
	static GetDefaultObject(): K2Node_LeaderboardFlush;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LeaderboardFlush;
	static C(Other: UObject): K2Node_LeaderboardFlush;
}

declare class K2Node_LeaderboardQuery extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LeaderboardQuery;
	static Find(Outer: UObject, ResourceName: string): K2Node_LeaderboardQuery;
	static GetDefaultObject(): K2Node_LeaderboardQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LeaderboardQuery;
	static C(Other: UObject): K2Node_LeaderboardQuery;
}

declare class GearVRFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): GearVRFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): GearVRFunctionLibrary;
	static GetDefaultObject(): GearVRFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GearVRFunctionLibrary;
	static SetCPUAndGPULevels(CPULevel: number,GPULevel: number): void;
	static IsPowerLevelStateThrottled(): boolean;
	static IsPowerLevelStateMinimum(): boolean;
	static GetTemperatureInCelsius(): number;
	static GetBatteryLevel(): number;
	static AreHeadPhonesPluggedIn(): boolean;
	static C(Other: UObject): GearVRFunctionLibrary;
}

declare type ETrackedDeviceType = 'None' | 'HMD' | 'LTouch' | 'RTouch' | 'Touch' | 'All';
declare var ETrackedDeviceType : { None:'None',HMD:'HMD',LTouch:'LTouch',RTouch:'RTouch',Touch:'Touch',All:'All', };
declare class BoundaryTestResult { 
	IsTriggering: boolean;
	DeviceType: DeviceType;
	ClosestDistance: number;
	ClosestPoint: Vector;
	ClosestPointNormal: Vector;
	clone() : BoundaryTestResult;
	static C(Other: UObject): BoundaryTestResult;
}

declare class OculusRiftBoundaryComponent extends ActorComponent { 
	OnOuterBoundaryTriggered: UnrealEngineMulticastDelegate<(OuterBoundsInteractionList: BoundaryTestResult[]) => void>;
	OnOuterBoundaryReturned: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): OculusRiftBoundaryComponent;
	static Find(Outer: UObject, ResourceName: string): OculusRiftBoundaryComponent;
	static GetDefaultObject(): OculusRiftBoundaryComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusRiftBoundaryComponent;
	SetOuterBoundaryColor(InBoundaryColor: Color): boolean;
	ResetOuterBoundaryColor(): boolean;
	RequestOuterBoundaryVisible(BoundaryVisible: boolean): boolean;
	IsOuterBoundaryTriggered(): boolean;
	IsOuterBoundaryDisplayed(): boolean;
	GetTriggeredPlayAreaInfo(DeviceType: DeviceType): BoundaryTestResult;
	GetTriggeredOuterBoundaryInfo(): BoundaryTestResult[];
	GetPlayAreaPoints(): Vector[];
	GetPlayAreaDimensions(): Vector;
	GetOuterBoundaryPoints(): Vector[];
	GetOuterBoundaryDimensions(): Vector;
	CheckIfPointWithinPlayArea(Point: Vector): BoundaryTestResult;
	CheckIfPointWithinOuterBounds(Point: Vector): BoundaryTestResult;
	static C(Other: UObject): OculusRiftBoundaryComponent;
}

declare class SceneCubemapCapturer extends UObject { 
	CaptureComponents: SceneCaptureComponent2D[];
	static Load(ResourceName: string): SceneCubemapCapturer;
	static Find(Outer: UObject, ResourceName: string): SceneCubemapCapturer;
	static GetDefaultObject(): SceneCubemapCapturer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCubemapCapturer;
	static C(Other: UObject): SceneCubemapCapturer;
}

declare class SourceCodeAccessSettings extends UObject { 
	PreferredAccessor: string;
	static Load(ResourceName: string): SourceCodeAccessSettings;
	static Find(Outer: UObject, ResourceName: string): SourceCodeAccessSettings;
	static GetDefaultObject(): SourceCodeAccessSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SourceCodeAccessSettings;
	static C(Other: UObject): SourceCodeAccessSettings;
}

declare class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AutomationBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): AutomationBlueprintFunctionLibrary;
	static GetDefaultObject(): AutomationBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationBlueprintFunctionLibrary;
	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
	static GetDefaultScreenshotOptionsForRendering(Tolerance: Tolerance): AutomationScreenshotOptions;
	static GetDefaultScreenshotOptionsForGameplay(Tolerance: Tolerance): AutomationScreenshotOptions;
	static AreAutomatedTestsRunning(): boolean;
	static C(Other: UObject): AutomationBlueprintFunctionLibrary;
}

declare class AutomationPerformaceHelper extends UObject { 
	static Load(ResourceName: string): AutomationPerformaceHelper;
	static Find(Outer: UObject, ResourceName: string): AutomationPerformaceHelper;
	static GetDefaultObject(): AutomationPerformaceHelper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationPerformaceHelper;
	WriteLogFile(CaptureDir: string,CaptureExtension: string): void;
	TriggerGPUTraceIfRecordFallsBelowBudget(): void;
	Tick(DeltaSeconds: number): void;
	StopCPUProfiling(): void;
	StartCPUProfiling(): void;
	Sample(DeltaSeconds: number): void;
	OnBeginTests(): void;
	OnAllTestsComplete(): void;
	IsRecording(): boolean;
	IsCurrentRecordWithinRenderThreadBudget(): boolean;
	IsCurrentRecordWithinGPUBudget(): boolean;
	IsCurrentRecordWithinGameThreadBudget(): boolean;
	EndStatsFile(): void;
	EndRecordingBaseline(): void;
	EndRecording(): void;
	BeginStatsFile(RecordName: string): void;
	BeginRecordingBaseline(RecordName: string): void;
	BeginRecording(RecordName: string,InGPUBudget: number,InRenderThreadBudget: number,InGameThreadBudget: number): void;
	static C(Other: UObject): AutomationPerformaceHelper;
}

declare type EFunctionalTestResult = 'Default' | 'Invalid' | 'Error' | 'Running' | 'Failed' | 'Succeeded';
declare var EFunctionalTestResult : { Default:'Default',Invalid:'Invalid',Error:'Error',Running:'Running',Failed:'Failed',Succeeded:'Succeeded', };
declare class FuncTestRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): FuncTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): FuncTestRenderingComponent;
	static GetDefaultObject(): FuncTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FuncTestRenderingComponent;
	static C(Other: UObject): FuncTestRenderingComponent;
}

declare type EComparisonMethod = 'Equal_To' | 'Not_Equal_To' | 'Greater_Than_Or_Equal_To' | 'Less_Than_Or_Equal_To' | 'Greater_Than' | 'Less_Than';
declare var EComparisonMethod : { Equal_To:'Equal_To',Not_Equal_To:'Not_Equal_To',Greater_Than_Or_Equal_To:'Greater_Than_Or_Equal_To',Less_Than_Or_Equal_To:'Less_Than_Or_Equal_To',Greater_Than:'Greater_Than',Less_Than:'Less_Than', };
declare class FunctionalTest extends Actor { 
	SpriteComponent: BillboardComponent;
	bIsEnabled: boolean;
	bWarningsAsErrors: boolean;
	Description: string;
	ObservationPoint: Actor;
	RandomNumbersStream: RandomStream;
	Result: Result;
	PreparationTimeLimit: number;
	TimeLimit: number;
	TimesUpMessage: string;
	TimesUpResult: TimesUpResult;
	OnTestStart: UnrealEngineMulticastDelegate<() => void>;
	OnTestFinished: UnrealEngineMulticastDelegate<() => void>;
	AutoDestroyActors: Actor[];
	RenderComp: FuncTestRenderingComponent;
	TestName: TextRenderComponent;
	bIsRunning: boolean;
	static GetDefaultObject(): FunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTest;
	SetTimeLimit(NewTimeLimit: number,ResultWhenTimeRunsOut: ResultWhenTimeRunsOut): void;
	RegisterAutoDestroyActor(ActorToAutoDestroy: Actor): void;
	StartTest(): void;
	PrepareTest(): void;
	OnWantsReRunCheck(): boolean;
	OnAdditionalTestFinishedMessageRequest(TestResult: TestResult): string;
	LogMessage(Message: string): void;
	IsRunning(): boolean;
	IsReady(): boolean;
	IsEnabled(): boolean;
	GetCurrentRerunReason(): string;
	FinishTest(TestResult: TestResult,Message: string): void;
	DebugGatherRelevantActors(): Actor[];
	AssertValue(Actual: number,ShouldBe: ShouldBe,Expected: number,What: string,ContextObject: UObject): void;
	AssertValue(Actual: number,ShouldBe: ShouldBe,Expected: number,What: string,ContextObject: UObject): void;
	AssertValue(Actual: DateTime,ShouldBe: ShouldBe,Expected: DateTime,What: string,ContextObject: UObject): void;
	AssertTrue(Condition: boolean,Message: string,ContextObject: UObject): void;
	AssertNotEqual(Actual: Vector,NotExpected: Vector,What: string,ContextObject: UObject): void;
	AssertNotEqual(Actual: Transform,NotExpected: Transform,What: string,ContextObject: UObject): void;
	AssertNotEqual(Actual: string,NotExpected: string,What: string,ContextObject: UObject): void;
	AssertNotEqual(Actual: Rotator,NotExpected: Rotator,What: string,ContextObject: UObject): void;
	AssertIsValid(UObject: UObject,Message: string,ContextObject: UObject): void;
	AssertFalse(Condition: boolean,Message: string,ContextObject: UObject): void;
	AssertEqual(Actual: Vector,Expected: Vector,What: string,Tolerance: number,ContextObject: UObject): void;
	AssertEqual(Actual: Transform,Expected: Transform,What: string,ContextObject: UObject): void;
	AssertEqual(Actual: string,Expected: string,What: string,ContextObject: UObject): void;
	AssertEqual(Actual: Rotator,Expected: Rotator,What: string,ContextObject: UObject): void;
	AssertEqual(Actual: number,Expected: number,What: string,Tolerance: number,ContextObject: UObject): void;
	AddWarning(Message: string): void;
	AddRerun(Reason: string): void;
	AddError(Message: string): void;
	static C(Other: UObject): FunctionalTest;
}

declare class GenericTeamId { 
	TeamID: number;
	clone() : GenericTeamId;
	static C(Other: UObject): GenericTeamId;
}

declare class AITestSpawnInfo { 
	PawnClass: UnrealEngineClass;
	ControllerClass: UnrealEngineClass;
	TeamID: GenericTeamId;
	BehaviorTree: BehaviorTree;
	SpawnLocation: Actor;
	NumberToSpawn: number;
	SpawnDelay: number;
	PreSpawnDelay: number;
	clone() : AITestSpawnInfo;
	static C(Other: UObject): AITestSpawnInfo;
}

declare class AITestSpawnSet { 
	SpawnInfoContainer: AITestSpawnInfo[];
	Name: string;
	bEnabled: boolean;
	FallbackSpawnLocation: Actor;
	clone() : AITestSpawnSet;
	static C(Other: UObject): AITestSpawnSet;
}

declare class PendingDelayedSpawn extends AITestSpawnInfo { 
	clone() : PendingDelayedSpawn;
	static C(Other: UObject): PendingDelayedSpawn;
}

declare class FunctionalAITest extends FunctionalTest { 
	SpawnSets: AITestSpawnSet[];
	SpawnLocationRandomizationRange: number;
	SpawnedPawns: Pawn[];
	PendingDelayedSpawns: PendingDelayedSpawn[];
	OnAISpawned: UnrealEngineMulticastDelegate<(Controller: AIController, Pawn: Pawn) => void>;
	OnAllAISPawned: UnrealEngineMulticastDelegate<() => void>;
	bWaitForNavMesh: boolean;
	static GetDefaultObject(): FunctionalAITest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalAITest;
	IsOneOfSpawnedPawns(Actor: Actor): boolean;
	static C(Other: UObject): FunctionalAITest;
}

declare class ScreenshotFunctionalTest extends FunctionalTest { 
	ScreenshotCamera: CameraComponent;
	ScreenshotOptions: AutomationScreenshotOptions;
	static GetDefaultObject(): ScreenshotFunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotFunctionalTest;
	static C(Other: UObject): ScreenshotFunctionalTest;
}

declare class FunctionalTestGameMode extends GameModeBase { 
	static GetDefaultObject(): FunctionalTestGameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestGameMode;
	static C(Other: UObject): FunctionalTestGameMode;
}

declare class FunctionalTestingManager extends BlueprintFunctionLibrary { 
	TestsLeft: FunctionalTest[];
	AllTests: FunctionalTest[];
	OnSetupTests: UnrealEngineMulticastDelegate<() => void>;
	OnTestsComplete: UnrealEngineMulticastDelegate<() => void>;
	OnTestsBegin: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): FunctionalTestingManager;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestingManager;
	static GetDefaultObject(): FunctionalTestingManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestingManager;
	static RunAllFunctionalTests(WorldContext: UObject,bNewLog: boolean,bRunLooped: boolean,bWaitForNavigationBuildFinish: boolean,FailedTestsReproString: string): boolean;
	static C(Other: UObject): FunctionalTestingManager;
}

declare class PhasedAutomationActorBase extends Actor { 
	static GetDefaultObject(): PhasedAutomationActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhasedAutomationActorBase;
	OnFunctionalTestingComplete(): void;
	OnFunctionalTestingBegin(): void;
	static C(Other: UObject): PhasedAutomationActorBase;
}

declare class FunctionalTestLevelScript extends LevelScriptActor { 
	static GetDefaultObject(): FunctionalTestLevelScript;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestLevelScript;
	static C(Other: UObject): FunctionalTestLevelScript;
}

declare class TestPhaseComponent extends SceneComponent { 
	static Load(ResourceName: string): TestPhaseComponent;
	static Find(Outer: UObject, ResourceName: string): TestPhaseComponent;
	static GetDefaultObject(): TestPhaseComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPhaseComponent;
	static C(Other: UObject): TestPhaseComponent;
}

declare class AIGraph extends EdGraph { 
	GraphVersion: number;
	static Load(ResourceName: string): AIGraph;
	static Find(Outer: UObject, ResourceName: string): AIGraph;
	static GetDefaultObject(): AIGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIGraph;
	static C(Other: UObject): AIGraph;
}

declare class GraphNodeClassData { 
	AssetName: string;
	GeneratedClassPackage: string;
	ClassName: string;
	Category: string;
	clone() : GraphNodeClassData;
	static C(Other: UObject): GraphNodeClassData;
}

declare class AIGraphNode extends EdGraphNode { 
	ClassData: GraphNodeClassData;
	NodeInstance: UObject;
	ParentNode: AIGraphNode;
	SubNodes: AIGraphNode[];
	CopySubNodeIndex: number;
	bIsReadOnly: boolean;
	bIsSubNode: boolean;
	ErrorMessage: string;
	static Load(ResourceName: string): AIGraphNode;
	static Find(Outer: UObject, ResourceName: string): AIGraphNode;
	static GetDefaultObject(): AIGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIGraphNode;
	static C(Other: UObject): AIGraphNode;
}

declare class AIGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): AIGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AIGraphSchema;
	static GetDefaultObject(): AIGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIGraphSchema;
	static C(Other: UObject): AIGraphSchema;
}

declare class K2Node_AIMoveTo extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_AIMoveTo;
	static Find(Outer: UObject, ResourceName: string): K2Node_AIMoveTo;
	static GetDefaultObject(): K2Node_AIMoveTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AIMoveTo;
	static C(Other: UObject): K2Node_AIMoveTo;
}

declare class BehaviorTreeDecoratorGraph extends EdGraph { 
	static Load(ResourceName: string): BehaviorTreeDecoratorGraph;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraph;
	static GetDefaultObject(): BehaviorTreeDecoratorGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraph;
	static C(Other: UObject): BehaviorTreeDecoratorGraph;
}

declare class BehaviorTreeDecoratorGraphNode extends EdGraphNode { 
	static Load(ResourceName: string): BehaviorTreeDecoratorGraphNode;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraphNode;
	static GetDefaultObject(): BehaviorTreeDecoratorGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraphNode;
	static C(Other: UObject): BehaviorTreeDecoratorGraphNode;
}

declare class BehaviorTreeDecoratorGraphNode_Decorator extends BehaviorTreeDecoratorGraphNode { 
	NodeInstance: UObject;
	ClassData: GraphNodeClassData;
	static Load(ResourceName: string): BehaviorTreeDecoratorGraphNode_Decorator;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraphNode_Decorator;
	static GetDefaultObject(): BehaviorTreeDecoratorGraphNode_Decorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraphNode_Decorator;
	static C(Other: UObject): BehaviorTreeDecoratorGraphNode_Decorator;
}

declare type EDecoratorLogicMode = 'Sink' | 'And' | 'Or' | 'Not';
declare var EDecoratorLogicMode : { Sink:'Sink',And:'And',Or:'Or',Not:'Not', };
declare class BehaviorTreeDecoratorGraphNode_Logic extends BehaviorTreeDecoratorGraphNode { 
	LogicMode: EDecoratorLogicMode;
	static Load(ResourceName: string): BehaviorTreeDecoratorGraphNode_Logic;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraphNode_Logic;
	static GetDefaultObject(): BehaviorTreeDecoratorGraphNode_Logic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraphNode_Logic;
	static C(Other: UObject): BehaviorTreeDecoratorGraphNode_Logic;
}

declare class BehaviorTreeEditorTypes extends UObject { 
	static Load(ResourceName: string): BehaviorTreeEditorTypes;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeEditorTypes;
	static GetDefaultObject(): BehaviorTreeEditorTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeEditorTypes;
	static C(Other: UObject): BehaviorTreeEditorTypes;
}

declare class BehaviorTreeFactory extends Factory { 
	static Load(ResourceName: string): BehaviorTreeFactory;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeFactory;
	static GetDefaultObject(): BehaviorTreeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeFactory;
	static C(Other: UObject): BehaviorTreeFactory;
}

declare class BehaviorTreeGraph extends AIGraph { 
	ModCounter: number;
	bIsUsingModCounter: boolean;
	static Load(ResourceName: string): BehaviorTreeGraph;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraph;
	static GetDefaultObject(): BehaviorTreeGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraph;
	static C(Other: UObject): BehaviorTreeGraph;
}

declare class BehaviorTreeGraphNode extends AIGraphNode { 
	Decorators: BehaviorTreeGraphNode[];
	Services: BehaviorTreeGraphNode[];
	bInjectedNode: boolean;
	static Load(ResourceName: string): BehaviorTreeGraphNode;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode;
	static GetDefaultObject(): BehaviorTreeGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode;
	static C(Other: UObject): BehaviorTreeGraphNode;
}

declare class BehaviorTreeGraphNode_Composite extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Composite;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Composite;
	static GetDefaultObject(): BehaviorTreeGraphNode_Composite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Composite;
	static C(Other: UObject): BehaviorTreeGraphNode_Composite;
}

declare class BehaviorTreeGraphNode_SimpleParallel extends BehaviorTreeGraphNode_Composite { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_SimpleParallel;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_SimpleParallel;
	static GetDefaultObject(): BehaviorTreeGraphNode_SimpleParallel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_SimpleParallel;
	static C(Other: UObject): BehaviorTreeGraphNode_SimpleParallel;
}

declare class BehaviorTreeGraphNode_CompositeDecorator extends BehaviorTreeGraphNode { 
	BoundGraph: EdGraph;
	CompositeName: string;
	bShowOperations: boolean;
	bCanAbortFlow: boolean;
	ParentNodeInstance: BTCompositeNode;
	CachedDescription: string;
	static Load(ResourceName: string): BehaviorTreeGraphNode_CompositeDecorator;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_CompositeDecorator;
	static GetDefaultObject(): BehaviorTreeGraphNode_CompositeDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_CompositeDecorator;
	static C(Other: UObject): BehaviorTreeGraphNode_CompositeDecorator;
}

declare class BehaviorTreeGraphNode_Decorator extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Decorator;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Decorator;
	static GetDefaultObject(): BehaviorTreeGraphNode_Decorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Decorator;
	static C(Other: UObject): BehaviorTreeGraphNode_Decorator;
}

declare class BehaviorTreeGraphNode_Root extends BehaviorTreeGraphNode { 
	BlackboardAsset: BlackboardData;
	static Load(ResourceName: string): BehaviorTreeGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Root;
	static GetDefaultObject(): BehaviorTreeGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Root;
	static C(Other: UObject): BehaviorTreeGraphNode_Root;
}

declare class BehaviorTreeGraphNode_Service extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Service;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Service;
	static GetDefaultObject(): BehaviorTreeGraphNode_Service;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Service;
	static C(Other: UObject): BehaviorTreeGraphNode_Service;
}

declare class BehaviorTreeGraphNode_Task extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Task;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Task;
	static GetDefaultObject(): BehaviorTreeGraphNode_Task;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Task;
	static C(Other: UObject): BehaviorTreeGraphNode_Task;
}

declare class BehaviorTreeGraphNode_SubtreeTask extends BehaviorTreeGraphNode_Task { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_SubtreeTask;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_SubtreeTask;
	static GetDefaultObject(): BehaviorTreeGraphNode_SubtreeTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_SubtreeTask;
	static C(Other: UObject): BehaviorTreeGraphNode_SubtreeTask;
}

declare class BlackboardDataFactory extends Factory { 
	static Load(ResourceName: string): BlackboardDataFactory;
	static Find(Outer: UObject, ResourceName: string): BlackboardDataFactory;
	static GetDefaultObject(): BlackboardDataFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardDataFactory;
	static C(Other: UObject): BlackboardDataFactory;
}

declare class EdGraphSchema_BehaviorTree extends AIGraphSchema { 
	static Load(ResourceName: string): EdGraphSchema_BehaviorTree;
	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_BehaviorTree;
	static GetDefaultObject(): EdGraphSchema_BehaviorTree;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_BehaviorTree;
	static C(Other: UObject): EdGraphSchema_BehaviorTree;
}

declare class EdGraphSchema_BehaviorTreeDecorator extends EdGraphSchema { 
	PC_Boolean: string;
	static Load(ResourceName: string): EdGraphSchema_BehaviorTreeDecorator;
	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_BehaviorTreeDecorator;
	static GetDefaultObject(): EdGraphSchema_BehaviorTreeDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_BehaviorTreeDecorator;
	static C(Other: UObject): EdGraphSchema_BehaviorTreeDecorator;
}

declare class K2Node_LatentGameplayTaskCall extends K2Node_BaseAsyncTask { 
	SpawnParamPins: string[];
	static Load(ResourceName: string): K2Node_LatentGameplayTaskCall;
	static Find(Outer: UObject, ResourceName: string): K2Node_LatentGameplayTaskCall;
	static GetDefaultObject(): K2Node_LatentGameplayTaskCall;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LatentGameplayTaskCall;
	static C(Other: UObject): K2Node_LatentGameplayTaskCall;
}

declare class GameLiveStreamingFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): GameLiveStreamingFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): GameLiveStreamingFunctionLibrary;
	static GetDefaultObject(): GameLiveStreamingFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameLiveStreamingFunctionLibrary;
	static StopWebCam(): void;
	static StopBroadcastingGame(): void;
	static StartWebCam(DesiredWebCamWidth: number,DesiredWebCamHeight: number,bMirrorWebCamImage: boolean,bDrawSimpleWebCamVideo: boolean): void;
	static StartBroadcastingGame(LoginUserName: string,LoginPassword: string,FrameRate: number,ScreenScaling: number,bStartWebCam: boolean,DesiredWebCamWidth: number,DesiredWebCamHeight: number,bMirrorWebCamImage: boolean,bDrawSimpleWebCamVideo: boolean,bCaptureAudioFromComputer: boolean,bCaptureAudioFromMicrophone: boolean,CoverUpImage: Texture2D): void;
	static IsWebCamEnabled(): boolean;
	static IsBroadcastingGame(): boolean;
	static C(Other: UObject): GameLiveStreamingFunctionLibrary;
}

declare class BlueprintLiveStreamInfo { 
	GameName: string;
	StreamName: string;
	URL: string;
	clone() : BlueprintLiveStreamInfo;
	static C(Other: UObject): BlueprintLiveStreamInfo;
}

declare class QueryLiveStreamsCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnQueriedLiveStreams: UnrealEngineMulticastDelegate<(LiveStreams: BlueprintLiveStreamInfo[], bWasSuccessful: boolean) => void>;
	static Load(ResourceName: string): QueryLiveStreamsCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): QueryLiveStreamsCallbackProxy;
	static GetDefaultObject(): QueryLiveStreamsCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QueryLiveStreamsCallbackProxy;
	static QueryLiveStreams(GameName: string): QueryLiveStreamsCallbackProxy;
	static C(Other: UObject): QueryLiveStreamsCallbackProxy;
}

declare class MediaPlayerOverlay { 
	HasPosition: boolean;
	Position: Vector2D;
	Text: string;
	clone() : MediaPlayerOverlay;
	static C(Other: UObject): MediaPlayerOverlay;
}

declare class MediaOverlays extends UObject { 
	static Load(ResourceName: string): MediaOverlays;
	static Find(Outer: UObject, ResourceName: string): MediaOverlays;
	static GetDefaultObject(): MediaOverlays;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaOverlays;
	GetTexts(OutTexts?: MediaPlayerOverlay[],Time?: Timespan): {OutTexts: MediaPlayerOverlay[]};
	GetSubtitles(OutSubtitles?: MediaPlayerOverlay[],Time?: Timespan): {OutSubtitles: MediaPlayerOverlay[]};
	GetCaptions(OutCaptions?: MediaPlayerOverlay[],Time?: Timespan): {OutCaptions: MediaPlayerOverlay[]};
	static C(Other: UObject): MediaOverlays;
}

declare class MediaSource extends UObject { 
	static Load(ResourceName: string): MediaSource;
	static Find(Outer: UObject, ResourceName: string): MediaSource;
	static GetDefaultObject(): MediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSource;
	static C(Other: UObject): MediaSource;
}

declare class MediaPlaylist extends UObject { 
	Items: MediaSource[];
	static Load(ResourceName: string): MediaPlaylist;
	static Find(Outer: UObject, ResourceName: string): MediaPlaylist;
	static GetDefaultObject(): MediaPlaylist;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaPlaylist;
	RemoveAt(Index: number): void;
	Remove(MediaSource: MediaSource): void;
	Num(): number;
	Insert(MediaSource: MediaSource,Index: number): void;
	GetRandom(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	GetPrevious(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	GetNext(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	Get(Index: number): MediaSource;
	Add(MediaSource: MediaSource): void;
	static C(Other: UObject): MediaPlaylist;
}

declare class MediaSoundWave extends SoundWave { 
	AudioTrackIndex: number;
	MediaPlayer: MediaPlayer;
	static Load(ResourceName: string): MediaSoundWave;
	static Find(Outer: UObject, ResourceName: string): MediaSoundWave;
	static GetDefaultObject(): MediaSoundWave;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSoundWave;
	static C(Other: UObject): MediaSoundWave;
}

declare class MediaTexture extends Texture { 
	AddressX: TextureAddress;
	AddressY: TextureAddress;
	ClearColor: LinearColor;
	MediaPlayer: MediaPlayer;
	VideoTrackIndex: number;
	static Load(ResourceName: string): MediaTexture;
	static Find(Outer: UObject, ResourceName: string): MediaTexture;
	static GetDefaultObject(): MediaTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaTexture;
	GetWidth(): number;
	GetHeight(): number;
	GetAspectRatio(): number;
	static C(Other: UObject): MediaTexture;
}

declare type EMediaPlayerTrack = 'Audio' | 'Binary' | 'Caption' | 'Script' | 'Subtitle' | 'Text' | 'Video';
declare var EMediaPlayerTrack : { Audio:'Audio',Binary:'Binary',Caption:'Caption',Script:'Script',Subtitle:'Subtitle',Text:'Text',Video:'Video', };
declare class MediaPlayer extends UObject { 
	OnEndReached: UnrealEngineMulticastDelegate<() => void>;
	OnMediaClosed: UnrealEngineMulticastDelegate<() => void>;
	OnMediaOpened: UnrealEngineMulticastDelegate<(OpenedUrl: string) => void>;
	OnMediaOpenFailed: UnrealEngineMulticastDelegate<(FailedUrl: string) => void>;
	OnPlaybackResumed: UnrealEngineMulticastDelegate<() => void>;
	OnPlaybackSuspended: UnrealEngineMulticastDelegate<() => void>;
	PlayOnOpen: boolean;
	Shuffle: boolean;
	Loop: boolean;
	Overlays: MediaOverlays;
	Playlist: MediaPlaylist;
	PlaylistIndex: number;
	SoundWave: MediaSoundWave;
	VideoTexture: MediaTexture;
	static Load(ResourceName: string): MediaPlayer;
	static Find(Outer: UObject, ResourceName: string): MediaPlayer;
	static GetDefaultObject(): MediaPlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaPlayer;
	SupportsSeeking(): boolean;
	SupportsScrubbing(): boolean;
	SupportsRate(Rate: number,Unthinned: boolean): boolean;
	SetVideoTexture(NewTexture: MediaTexture): void;
	SetSoundWave(NewSoundWave: MediaSoundWave): void;
	SetRate(Rate: number): boolean;
	SetOverlays(NewOverlays: MediaOverlays): void;
	SetLooping(Looping: boolean): boolean;
	SetDesiredPlayerName(PlayerName: string): void;
	SelectTrack(TrackType: TrackType,TrackIndex: number): boolean;
	Seek(Time: Timespan): boolean;
	Rewind(): boolean;
	Reopen(): boolean;
	Previous(): boolean;
	Play(): boolean;
	Pause(): boolean;
	OpenUrl(Url: string): boolean;
	OpenSource(MediaSource: MediaSource): boolean;
	OpenPlaylistIndex(InPlaylist: MediaPlaylist,Index: number): boolean;
	OpenPlaylist(InPlaylist: MediaPlaylist): boolean;
	OpenFile(FilePath: string): boolean;
	Next(): boolean;
	IsReady(): boolean;
	IsPreparing(): boolean;
	IsPlaying(): boolean;
	IsPaused(): boolean;
	IsLooping(): boolean;
	GetUrl(): string;
	GetTrackLanguage(TrackType: TrackType,TrackIndex: number): string;
	GetTrackDisplayName(TrackType: TrackType,TrackIndex: number): string;
	GetTime(): Timespan;
	GetSelectedTrack(TrackType: TrackType): number;
	GetReverseRates(Unthinned: boolean): FloatRange;
	GetRate(): number;
	GetPlayerName(): string;
	GetNumTracks(TrackType: TrackType): number;
	GetForwardRates(Unthinned: boolean): FloatRange;
	GetDuration(): Timespan;
	GetDesiredPlayerName(): string;
	Close(): void;
	CanPlayUrl(Url: string): boolean;
	CanPlaySource(MediaSource: MediaSource): boolean;
	CanPause(): boolean;
	static C(Other: UObject): MediaPlayer;
}

declare class BaseMediaSource extends MediaSource { 
	PlatformPlayerNames: any;
	PlayerName: string;
	static Load(ResourceName: string): BaseMediaSource;
	static Find(Outer: UObject, ResourceName: string): BaseMediaSource;
	static GetDefaultObject(): BaseMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseMediaSource;
	static C(Other: UObject): BaseMediaSource;
}

declare class FileMediaSource extends BaseMediaSource { 
	FilePath: string;
	PrecacheFile: boolean;
	static Load(ResourceName: string): FileMediaSource;
	static Find(Outer: UObject, ResourceName: string): FileMediaSource;
	static GetDefaultObject(): FileMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileMediaSource;
	SetFilePath(Path: string): void;
	static C(Other: UObject): FileMediaSource;
}

declare class StreamMediaSource extends BaseMediaSource { 
	StreamUrl: string;
	static Load(ResourceName: string): StreamMediaSource;
	static Find(Outer: UObject, ResourceName: string): StreamMediaSource;
	static GetDefaultObject(): StreamMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamMediaSource;
	static C(Other: UObject): StreamMediaSource;
}

declare class PlatformMediaSource extends MediaSource { 
	PlatformMediaSources: any;
	MediaSource: MediaSource;
	static Load(ResourceName: string): PlatformMediaSource;
	static Find(Outer: UObject, ResourceName: string): PlatformMediaSource;
	static GetDefaultObject(): PlatformMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformMediaSource;
	static C(Other: UObject): PlatformMediaSource;
}

declare class MediaSubtitle { 
	clone() : MediaSubtitle;
	static C(Other: UObject): MediaSubtitle;
}

declare class MediaSubtitles extends UObject { 
	Subtitles: MediaSubtitle[];
	static Load(ResourceName: string): MediaSubtitles;
	static Find(Outer: UObject, ResourceName: string): MediaSubtitles;
	static GetDefaultObject(): MediaSubtitles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSubtitles;
	static C(Other: UObject): MediaSubtitles;
}

declare class WmfMediaSettings extends UObject { 
	AllowNonStandardCodecs: boolean;
	NativeAudioOut: boolean;
	static Load(ResourceName: string): WmfMediaSettings;
	static Find(Outer: UObject, ResourceName: string): WmfMediaSettings;
	static GetDefaultObject(): WmfMediaSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WmfMediaSettings;
	static C(Other: UObject): WmfMediaSettings;
}

declare class MaterialExpressionSpriteTextureSampler extends MaterialExpressionTextureSampleParameter2D { 
	bSampleAdditionalTextures: boolean;
	AdditionalSlotIndex: number;
	SlotDisplayName: string;
	static Load(ResourceName: string): MaterialExpressionSpriteTextureSampler;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSpriteTextureSampler;
	static GetDefaultObject(): MaterialExpressionSpriteTextureSampler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSpriteTextureSampler;
	static C(Other: UObject): MaterialExpressionSpriteTextureSampler;
}

declare class PaperSpriteSocket { 
	LocalTransform: Transform;
	SocketName: string;
	clone() : PaperSpriteSocket;
	static C(Other: UObject): PaperSpriteSocket;
}

declare type ESpriteCollisionMode = 'None' | 'Use2DPhysics' | 'Use3DPhysics';
declare var ESpriteCollisionMode : { None:'None',Use2DPhysics:'Use2DPhysics',Use3DPhysics:'Use3DPhysics', };
declare type ESpritePivotMode = 'Top_Left' | 'Top_Center' | 'Top_Right' | 'Center_Left' | 'Center_Center' | 'Center_Right' | 'Bottom_Left' | 'Bottom_Center' | 'Bottom_Right' | 'Custom';
declare var ESpritePivotMode : { Top_Left:'Top_Left',Top_Center:'Top_Center',Top_Right:'Top_Right',Center_Left:'Center_Left',Center_Center:'Center_Center',Center_Right:'Center_Right',Bottom_Left:'Bottom_Left',Bottom_Center:'Bottom_Center',Bottom_Right:'Bottom_Right',Custom:'Custom', };
declare type ESpriteShapeType = 'Box' | 'Circle' | 'Polygon';
declare var ESpriteShapeType : { Box:'Box',Circle:'Circle',Polygon:'Polygon', };
declare class SpriteGeometryShape { 
	ShapeType: ShapeType;
	Vertices: Vector2D[];
	BoxSize: Vector2D;
	BoxPosition: Vector2D;
	Rotation: number;
	bNegativeWinding: boolean;
	clone() : SpriteGeometryShape;
	static C(Other: UObject): SpriteGeometryShape;
}

declare type ESpritePolygonMode = 'SourceBoundingBox' | 'TightBoundingBox' | 'ShrinkWrapped' | 'FullyCustom' | 'Diced';
declare var ESpritePolygonMode : { SourceBoundingBox:'SourceBoundingBox',TightBoundingBox:'TightBoundingBox',ShrinkWrapped:'ShrinkWrapped',FullyCustom:'FullyCustom',Diced:'Diced', };
declare class SpriteGeometryCollection { 
	Shapes: SpriteGeometryShape[];
	GeometryType: ESpritePolygonMode;
	PixelsPerSubdivisionX: number;
	PixelsPerSubdivisionY: number;
	bAvoidVertexMerging: boolean;
	AlphaThreshold: number;
	DetailAmount: number;
	SimplifyEpsilon: number;
	clone() : SpriteGeometryCollection;
	static C(Other: UObject): SpriteGeometryCollection;
}

declare type EPaperSpriteAtlasPadding = 'DilateBorder' | 'PadWithZero';
declare var EPaperSpriteAtlasPadding : { DilateBorder:'DilateBorder',PadWithZero:'PadWithZero', };
declare class PaperSpriteAtlasSlot { 
	SpriteRef: any;
	AtlasIndex: number;
	X: number;
	Y: number;
	Width: number;
	Height: number;
	clone() : PaperSpriteAtlasSlot;
	static C(Other: UObject): PaperSpriteAtlasSlot;
}

declare class PaperSpriteAtlas extends UObject { 
	AtlasDescription: string;
	MaxWidth: number;
	MaxHeight: number;
	MipCount: number;
	PaddingType: PaddingType;
	Padding: number;
	CompressionSettings: TextureCompressionSettings;
	Filter: TextureFilter;
	GeneratedTextures: Texture[];
	AtlasGUID: Guid;
	bRebuildAtlas: boolean;
	AtlasSlots: PaperSpriteAtlasSlot[];
	NumIncrementalBuilds: number;
	BuiltWidth: number;
	BuiltHeight: number;
	BuiltPadding: number;
	static Load(ResourceName: string): PaperSpriteAtlas;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteAtlas;
	static GetDefaultObject(): PaperSpriteAtlas;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteAtlas;
	static C(Other: UObject): PaperSpriteAtlas;
}

declare class PaperSprite extends UObject { 
	OriginInSourceImageBeforeTrimming: Vector2D;
	SourceImageDimensionBeforeTrimming: Vector2D;
	bTrimmedInSourceImage: boolean;
	bRotatedInSourceImage: boolean;
	SourceTextureDimension: Vector2D;
	SourceUV: Vector2D;
	SourceDimension: Vector2D;
	SourceTexture: Texture2D;
	AdditionalSourceTextures: Texture[];
	BakedSourceUV: Vector2D;
	BakedSourceDimension: Vector2D;
	BakedSourceTexture: Texture2D;
	DefaultMaterial: MaterialInterface;
	AlternateMaterial: MaterialInterface;
	Sockets: PaperSpriteSocket[];
	SpriteCollisionDomain: ESpriteCollisionMode;
	PixelsPerUnrealUnit: number;
	BodySetup: BodySetup;
	PivotMode: ESpritePivotMode;
	CustomPivotPoint: Vector2D;
	bSnapPivotToPixelGrid: boolean;
	CollisionGeometry: SpriteGeometryCollection;
	CollisionThickness: number;
	RenderGeometry: SpriteGeometryCollection;
	AtlasGroup: PaperSpriteAtlas;
	AlternateMaterialSplitIndex: number;
	BakedRenderData: Vector4[];
	static Load(ResourceName: string): PaperSprite;
	static Find(Outer: UObject, ResourceName: string): PaperSprite;
	static GetDefaultObject(): PaperSprite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSprite;
	static C(Other: UObject): PaperSprite;
}

declare class PaperFlipbookKeyFrame { 
	Sprite: PaperSprite;
	FrameRun: number;
	clone() : PaperFlipbookKeyFrame;
	static C(Other: UObject): PaperFlipbookKeyFrame;
}

declare type EFlipbookCollisionMode = 'NoCollision' | 'FirstFrameCollision' | 'EachFrameCollision';
declare var EFlipbookCollisionMode : { NoCollision:'NoCollision',FirstFrameCollision:'FirstFrameCollision',EachFrameCollision:'EachFrameCollision', };
declare class PaperFlipbook extends UObject { 
	FramesPerSecond: number;
	KeyFrames: PaperFlipbookKeyFrame[];
	DefaultMaterial: MaterialInterface;
	CollisionSource: EFlipbookCollisionMode;
	static Load(ResourceName: string): PaperFlipbook;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbook;
	static GetDefaultObject(): PaperFlipbook;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbook;
	IsValidKeyFrameIndex(Index: number): boolean;
	GetTotalDuration(): number;
	GetSpriteAtTime(Time: number,bClampToEnds: boolean): PaperSprite;
	GetSpriteAtFrame(FrameIndex: number): PaperSprite;
	GetNumKeyFrames(): number;
	GetNumFrames(): number;
	GetKeyFrameIndexAtTime(Time: number,bClampToEnds: boolean): number;
	static C(Other: UObject): PaperFlipbook;
}

declare class PaperFlipbookComponent extends MeshComponent { 
	SourceFlipbook: PaperFlipbook;
	Material: MaterialInterface;
	PlayRate: number;
	bLooping: boolean;
	bReversePlayback: boolean;
	bPlaying: boolean;
	AccumulatedTime: number;
	CachedFrameIndex: number;
	SpriteColor: LinearColor;
	CachedBodySetup: BodySetup;
	OnFinishedPlaying: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): PaperFlipbookComponent;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookComponent;
	static GetDefaultObject(): PaperFlipbookComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookComponent;
	Stop(): void;
	SetSpriteColor(NewColor: LinearColor): void;
	SetPlayRate(NewRate: number): void;
	SetPlaybackPositionInFrames(NewFramePosition: number,bFireEvents: boolean): void;
	SetPlaybackPosition(NewPosition: number,bFireEvents: boolean): void;
	SetNewTime(NewTime: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetFlipbook(NewFlipbook: PaperFlipbook): boolean;
	ReverseFromEnd(): void;
	Reverse(): void;
	PlayFromStart(): void;
	Play(): void;
	OnRep_SourceFlipbook(OldFlipbook: PaperFlipbook): void;
	IsReversing(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetSpriteMaterial(): MaterialInterface;
	GetPlayRate(): number;
	GetPlaybackPositionInFrames(): number;
	GetPlaybackPosition(): number;
	GetFlipbookLengthInFrames(): number;
	GetFlipbookLength(): number;
	GetFlipbookFramerate(): number;
	GetFlipbook(): PaperFlipbook;
	static C(Other: UObject): PaperFlipbookComponent;
}

declare class PaperCharacter extends Character { 
	Sprite: PaperFlipbookComponent;
	static GetDefaultObject(): PaperCharacter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperCharacter;
	static C(Other: UObject): PaperCharacter;
}

declare class PaperFlipbookActor extends Actor { 
	RenderComponent: PaperFlipbookComponent;
	static GetDefaultObject(): PaperFlipbookActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookActor;
	static C(Other: UObject): PaperFlipbookActor;
}

declare class SpriteInstanceData { 
	Transform: Matrix;
	SourceSprite: PaperSprite;
	VertexColor: Color;
	MaterialIndex: number;
	clone() : SpriteInstanceData;
	static C(Other: UObject): SpriteInstanceData;
}

declare class PaperGroupedSpriteComponent extends MeshComponent { 
	InstanceMaterials: MaterialInterface[];
	PerInstanceSpriteData: SpriteInstanceData[];
	static Load(ResourceName: string): PaperGroupedSpriteComponent;
	static Find(Outer: UObject, ResourceName: string): PaperGroupedSpriteComponent;
	static GetDefaultObject(): PaperGroupedSpriteComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperGroupedSpriteComponent;
	UpdateInstanceTransform(InstanceIndex: number,NewInstanceTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	UpdateInstanceColor(InstanceIndex: number,NewInstanceColor: LinearColor,bMarkRenderStateDirty: boolean): boolean;
	SortInstancesAlongAxis(WorldSpaceSortAxis: Vector): void;
	RemoveInstance(InstanceIndex: number): boolean;
	GetInstanceTransform(InstanceIndex: number,OutInstanceTransform?: Transform,bWorldSpace?: boolean): {OutInstanceTransform: Transform, $: boolean};
	GetInstanceCount(): number;
	ClearInstances(): void;
	AddInstance(Transform: Transform,Sprite: PaperSprite,bWorldSpace: boolean,Color: LinearColor): number;
	static C(Other: UObject): PaperGroupedSpriteComponent;
}

declare class PaperGroupedSpriteActor extends Actor { 
	RenderComponent: PaperGroupedSpriteComponent;
	static GetDefaultObject(): PaperGroupedSpriteActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperGroupedSpriteActor;
	static C(Other: UObject): PaperGroupedSpriteActor;
}

declare class PaperRuntimeSettings extends UObject { 
	bEnableSpriteAtlasGroups: boolean;
	bEnableTerrainSplineEditing: boolean;
	bResizeSpriteDataToMatchTextures: boolean;
	static Load(ResourceName: string): PaperRuntimeSettings;
	static Find(Outer: UObject, ResourceName: string): PaperRuntimeSettings;
	static GetDefaultObject(): PaperRuntimeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperRuntimeSettings;
	static C(Other: UObject): PaperRuntimeSettings;
}

declare class PaperSpriteComponent extends MeshComponent { 
	SourceSprite: PaperSprite;
	MaterialOverride: MaterialInterface;
	SpriteColor: LinearColor;
	static Load(ResourceName: string): PaperSpriteComponent;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteComponent;
	static GetDefaultObject(): PaperSpriteComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteComponent;
	SetSpriteColor(NewColor: LinearColor): void;
	SetSprite(NewSprite: PaperSprite): boolean;
	GetSprite(): PaperSprite;
	static C(Other: UObject): PaperSpriteComponent;
}

declare class PaperSpriteActor extends Actor { 
	RenderComponent: PaperSpriteComponent;
	static GetDefaultObject(): PaperSpriteActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteActor;
	static C(Other: UObject): PaperSpriteActor;
}

declare class PaperTerrainSplineComponent extends SplineComponent { 
	static Load(ResourceName: string): PaperTerrainSplineComponent;
	static Find(Outer: UObject, ResourceName: string): PaperTerrainSplineComponent;
	static GetDefaultObject(): PaperTerrainSplineComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainSplineComponent;
	static C(Other: UObject): PaperTerrainSplineComponent;
}

declare class PaperTerrainMaterialRule { 
	StartCap: PaperSprite;
	Body: PaperSprite[];
	EndCap: PaperSprite;
	MinimumAngle: number;
	MaximumAngle: number;
	bEnableCollision: boolean;
	CollisionOffset: number;
	DrawOrder: number;
	Description: string;
	clone() : PaperTerrainMaterialRule;
	static C(Other: UObject): PaperTerrainMaterialRule;
}

declare class PaperTerrainMaterial extends DataAsset { 
	Rules: PaperTerrainMaterialRule[];
	InteriorFill: PaperSprite;
	static Load(ResourceName: string): PaperTerrainMaterial;
	static Find(Outer: UObject, ResourceName: string): PaperTerrainMaterial;
	static GetDefaultObject(): PaperTerrainMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainMaterial;
	static C(Other: UObject): PaperTerrainMaterial;
}

declare class PaperTerrainComponent extends PrimitiveComponent { 
	TerrainMaterial: PaperTerrainMaterial;
	bClosedSpline: boolean;
	bFilledSpline: boolean;
	AssociatedSpline: PaperTerrainSplineComponent;
	RandomSeed: number;
	SegmentOverlapAmount: number;
	TerrainColor: LinearColor;
	ReparamStepsPerSegment: number;
	SpriteCollisionDomain: ESpriteCollisionMode;
	CollisionThickness: number;
	CachedBodySetup: BodySetup;
	static Load(ResourceName: string): PaperTerrainComponent;
	static Find(Outer: UObject, ResourceName: string): PaperTerrainComponent;
	static GetDefaultObject(): PaperTerrainComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainComponent;
	SetTerrainColor(NewColor: LinearColor): void;
	static C(Other: UObject): PaperTerrainComponent;
}

declare class PaperTerrainActor extends Actor { 
	DummyRoot: SceneComponent;
	SplineComponent: PaperTerrainSplineComponent;
	RenderComponent: PaperTerrainComponent;
	static GetDefaultObject(): PaperTerrainActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainActor;
	static C(Other: UObject): PaperTerrainActor;
}

declare class IntMargin { 
	Left: number;
	Top: number;
	Right: number;
	Bottom: number;
	clone() : IntMargin;
	static C(Other: UObject): IntMargin;
}

declare class PaperTileMetadata { 
	UserDataName: string;
	CollisionData: SpriteGeometryCollection;
	TerrainMembership: number;
	clone() : PaperTileMetadata;
	static C(Other: UObject): PaperTileMetadata;
}

declare class PaperTileSetTerrain { 
	TerrainName: string;
	CenterTileIndex: number;
	clone() : PaperTileSetTerrain;
	static C(Other: UObject): PaperTileSetTerrain;
}

declare class PaperTileSet extends UObject { 
	TileSize: IntPoint;
	TileSheet: Texture2D;
	BorderMargin: IntMargin;
	PerTileSpacing: IntPoint;
	DrawingOffset: IntPoint;
	BackgroundColor: LinearColor;
	WidthInTiles: number;
	HeightInTiles: number;
	AllocatedWidth: number;
	AllocatedHeight: number;
	PerTileData: PaperTileMetadata[];
	Terrains: PaperTileSetTerrain[];
	TileWidth: number;
	TileHeight: number;
	Margin: number;
	Spacing: number;
	static Load(ResourceName: string): PaperTileSet;
	static Find(Outer: UObject, ResourceName: string): PaperTileSet;
	static GetDefaultObject(): PaperTileSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileSet;
	static C(Other: UObject): PaperTileSet;
}

declare class PaperTileInfo { 
	TileSet: PaperTileSet;
	PackedTileIndex: number;
	clone() : PaperTileInfo;
	static C(Other: UObject): PaperTileInfo;
	BreakTile(TileIndex?: number,TileSet?: PaperTileSet,bFlipH?: boolean,bFlipV?: boolean,bFlipD?: boolean): {TileIndex: number, TileSet: PaperTileSet, bFlipH: boolean, bFlipV: boolean, bFlipD: boolean};
	GetTileTransform(): Transform;
	GetTileUserData(): string;
	static BreakTile(Tile: PaperTileInfo,TileIndex?: number,TileSet?: PaperTileSet,bFlipH?: boolean,bFlipV?: boolean,bFlipD?: boolean): {TileIndex: number, TileSet: PaperTileSet, bFlipH: boolean, bFlipV: boolean, bFlipD: boolean};
	static GetTileTransform(Tile: PaperTileInfo): Transform;
	static GetTileUserData(Tile: PaperTileInfo): string;
	static MakeTile(TileIndex: number,TileSet: PaperTileSet,bFlipH: boolean,bFlipV: boolean,bFlipD: boolean): PaperTileInfo;
}

declare class PaperTileLayer extends UObject { 
	LayerName: string;
	LayerWidth: number;
	LayerHeight: number;
	bHiddenInEditor: boolean;
	bHiddenInGame: boolean;
	bLayerCollides: boolean;
	bOverrideCollisionThickness: boolean;
	bOverrideCollisionOffset: boolean;
	CollisionThicknessOverride: number;
	CollisionOffsetOverride: number;
	LayerColor: LinearColor;
	AllocatedWidth: number;
	AllocatedHeight: number;
	AllocatedCells: PaperTileInfo[];
	TileSet: PaperTileSet;
	AllocatedGrid: number[];
	static Load(ResourceName: string): PaperTileLayer;
	static Find(Outer: UObject, ResourceName: string): PaperTileLayer;
	static GetDefaultObject(): PaperTileLayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileLayer;
	static C(Other: UObject): PaperTileLayer;
}

declare type ETileMapProjectionMode = 'Orthogonal' | 'IsometricDiamond' | 'IsometricStaggered' | 'HexagonalStaggered';
declare var ETileMapProjectionMode : { Orthogonal:'Orthogonal',IsometricDiamond:'IsometricDiamond',IsometricStaggered:'IsometricStaggered',HexagonalStaggered:'HexagonalStaggered', };
declare class PaperTileMap extends UObject { 
	MapWidth: number;
	MapHeight: number;
	TileWidth: number;
	TileHeight: number;
	PixelsPerUnrealUnit: number;
	SeparationPerTileX: number;
	SeparationPerTileY: number;
	SeparationPerLayer: number;
	SelectedTileSet: any;
	Material: MaterialInterface;
	TileLayers: PaperTileLayer[];
	CollisionThickness: number;
	SpriteCollisionDomain: ESpriteCollisionMode;
	ProjectionMode: ETileMapProjectionMode;
	HexSideLength: number;
	BodySetup: BodySetup;
	AssetImportData: AssetImportData;
	SelectedLayerIndex: number;
	BackgroundColor: LinearColor;
	LayerNameIndex: number;
	static Load(ResourceName: string): PaperTileMap;
	static Find(Outer: UObject, ResourceName: string): PaperTileMap;
	static GetDefaultObject(): PaperTileMap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMap;
	static C(Other: UObject): PaperTileMap;
}

declare class PaperTileMapComponent extends MeshComponent { 
	MapWidth: number;
	MapHeight: number;
	TileWidth: number;
	TileHeight: number;
	DefaultLayerTileSet: PaperTileSet;
	Material: MaterialInterface;
	TileLayers: PaperTileLayer[];
	TileMapColor: LinearColor;
	UseSingleLayerIndex: number;
	bUseSingleLayer: boolean;
	TileMap: PaperTileMap;
	bShowPerTileGridWhenSelected: boolean;
	bShowPerLayerGridWhenSelected: boolean;
	bShowOutlineWhenUnselected: boolean;
	static Load(ResourceName: string): PaperTileMapComponent;
	static Find(Outer: UObject, ResourceName: string): PaperTileMapComponent;
	static GetDefaultObject(): PaperTileMapComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapComponent;
	SetTileMapColor(NewColor: LinearColor): void;
	SetTileMap(NewTileMap: PaperTileMap): boolean;
	SetTile(X: number,Y: number,Layer: number,NewValue: PaperTileInfo): void;
	SetLayerColor(NewColor: LinearColor,Layer: number): void;
	SetLayerCollision(Layer: number,bHasCollision: boolean,bOverrideThickness: boolean,CustomThickness: number,bOverrideOffset: boolean,CustomOffset: number,bRebuildCollision: boolean): void;
	SetDefaultCollisionThickness(Thickness: number,bRebuildCollision: boolean): void;
	ResizeMap(NewWidthInTiles: number,NewHeightInTiles: number): void;
	RebuildCollision(): void;
	OwnsTileMap(): boolean;
	MakeTileMapEditable(): void;
	GetTilePolygon(TileX: number,TileY: number,Points?: Vector[],LayerIndex?: number,bWorldSpace?: boolean): {Points: Vector[]};
	GetTileMapColor(): LinearColor;
	GetTileCornerPosition(TileX: number,TileY: number,LayerIndex: number,bWorldSpace: boolean): Vector;
	GetTileCenterPosition(TileX: number,TileY: number,LayerIndex: number,bWorldSpace: boolean): Vector;
	GetTile(X: number,Y: number,Layer: number): PaperTileInfo;
	GetMapSize(MapWidth?: number,MapHeight?: number,NumLayers?: number): {MapWidth: number, MapHeight: number, NumLayers: number};
	GetLayerColor(Layer: number): LinearColor;
	CreateNewTileMap(MapWidth: number,MapHeight: number,TileWidth: number,TileHeight: number,PixelsPerUnrealUnit: number,bCreateLayer: boolean): void;
	AddNewLayer(): PaperTileLayer;
	static C(Other: UObject): PaperTileMapComponent;
}

declare class PaperTileMapActor extends Actor { 
	RenderComponent: PaperTileMapComponent;
	static GetDefaultObject(): PaperTileMapActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapActor;
	static C(Other: UObject): PaperTileMapActor;
}

declare class TileMapBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): TileMapBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): TileMapBlueprintLibrary;
	static GetDefaultObject(): TileMapBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapBlueprintLibrary;
	static MakeTile(TileIndex: number,TileSet: PaperTileSet,bFlipH: boolean,bFlipV: boolean,bFlipD: boolean): PaperTileInfo;
	static GetTileUserData(Tile: PaperTileInfo): string;
	static GetTileTransform(Tile: PaperTileInfo): Transform;
	static BreakTile(Tile: PaperTileInfo,TileIndex?: number,TileSet?: PaperTileSet,bFlipH?: boolean,bFlipV?: boolean,bFlipD?: boolean): {TileIndex: number, TileSet: PaperTileSet, bFlipH: boolean, bFlipV: boolean, bFlipD: boolean};
	static C(Other: UObject): TileMapBlueprintLibrary;
}

declare class LightPropagationVolumeSettings { 
	bOverride_LPVIntensity: boolean;
	bOverride_LPVDirectionalOcclusionIntensity: boolean;
	bOverride_LPVDirectionalOcclusionRadius: boolean;
	bOverride_LPVDiffuseOcclusionExponent: boolean;
	bOverride_LPVSpecularOcclusionExponent: boolean;
	bOverride_LPVDiffuseOcclusionIntensity: boolean;
	bOverride_LPVSpecularOcclusionIntensity: boolean;
	bOverride_LPVSize: boolean;
	bOverride_LPVSecondaryOcclusionIntensity: boolean;
	bOverride_LPVSecondaryBounceIntensity: boolean;
	bOverride_LPVGeometryVolumeBias: boolean;
	bOverride_LPVVplInjectionBias: boolean;
	bOverride_LPVEmissiveInjectionIntensity: boolean;
	LPVIntensity: number;
	LPVVplInjectionBias: number;
	LPVSize: number;
	LPVSecondaryOcclusionIntensity: number;
	LPVSecondaryBounceIntensity: number;
	LPVGeometryVolumeBias: number;
	LPVEmissiveInjectionIntensity: number;
	LPVDirectionalOcclusionIntensity: number;
	LPVDirectionalOcclusionRadius: number;
	LPVDiffuseOcclusionExponent: number;
	LPVSpecularOcclusionExponent: number;
	LPVDiffuseOcclusionIntensity: number;
	LPVSpecularOcclusionIntensity: number;
	clone() : LightPropagationVolumeSettings;
	static C(Other: UObject): LightPropagationVolumeSettings;
}

declare class LightPropagationVolumeBlendable extends UObject { 
	Settings: LightPropagationVolumeSettings;
	BlendWeight: number;
	static Load(ResourceName: string): LightPropagationVolumeBlendable;
	static Find(Outer: UObject, ResourceName: string): LightPropagationVolumeBlendable;
	static GetDefaultObject(): LightPropagationVolumeBlendable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightPropagationVolumeBlendable;
	static C(Other: UObject): LightPropagationVolumeBlendable;
}

declare class AudioCurveSourceComponent extends AudioComponent { 
	CurveSourceBindingName: string;
	static Load(ResourceName: string): AudioCurveSourceComponent;
	static Find(Outer: UObject, ResourceName: string): AudioCurveSourceComponent;
	static GetDefaultObject(): AudioCurveSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioCurveSourceComponent;
	static C(Other: UObject): AudioCurveSourceComponent;
}

declare class FacialAnimationBulkImporterSettings extends UObject { 
	SourceImportPath: DirectoryPath;
	TargetImportPath: DirectoryPath;
	CurveNodeName: string;
	static Load(ResourceName: string): FacialAnimationBulkImporterSettings;
	static Find(Outer: UObject, ResourceName: string): FacialAnimationBulkImporterSettings;
	static GetDefaultObject(): FacialAnimationBulkImporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FacialAnimationBulkImporterSettings;
	static C(Other: UObject): FacialAnimationBulkImporterSettings;
}

declare class ContentBrowserFrontEndFilterExtension extends UObject { 
	static Load(ResourceName: string): ContentBrowserFrontEndFilterExtension;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserFrontEndFilterExtension;
	static GetDefaultObject(): ContentBrowserFrontEndFilterExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserFrontEndFilterExtension;
	static C(Other: UObject): ContentBrowserFrontEndFilterExtension;
}

declare class GameplayTagSearchFilter extends ContentBrowserFrontEndFilterExtension { 
	static Load(ResourceName: string): GameplayTagSearchFilter;
	static Find(Outer: UObject, ResourceName: string): GameplayTagSearchFilter;
	static GetDefaultObject(): GameplayTagSearchFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagSearchFilter;
	static C(Other: UObject): GameplayTagSearchFilter;
}

declare class GameplayTagsK2Node_LiteralGameplayTag extends K2Node { 
	static Load(ResourceName: string): GameplayTagsK2Node_LiteralGameplayTag;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_LiteralGameplayTag;
	static GetDefaultObject(): GameplayTagsK2Node_LiteralGameplayTag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_LiteralGameplayTag;
	static C(Other: UObject): GameplayTagsK2Node_LiteralGameplayTag;
}

declare class GameplayTagsK2Node_MultiCompareBase extends K2Node { 
	NumberOfPins: number;
	PinNames: string[];
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareBase;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareBase;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareBase;
	static C(Other: UObject): GameplayTagsK2Node_MultiCompareBase;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static C(Other: UObject): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static C(Other: UObject): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagContainer extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static C(Other: UObject): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static C(Other: UObject): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
}

declare class GameplayTagsK2Node_SwitchGameplayTag extends K2Node_Switch { 
	PinTags: GameplayTag[];
	PinNames: string[];
	static Load(ResourceName: string): GameplayTagsK2Node_SwitchGameplayTag;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_SwitchGameplayTag;
	static GetDefaultObject(): GameplayTagsK2Node_SwitchGameplayTag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_SwitchGameplayTag;
	static C(Other: UObject): GameplayTagsK2Node_SwitchGameplayTag;
}

declare class GameplayTagsK2Node_SwitchGameplayTagContainer extends K2Node_Switch { 
	PinContainers: GameplayTagContainer[];
	PinNames: string[];
	static Load(ResourceName: string): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static GetDefaultObject(): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static C(Other: UObject): GameplayTagsK2Node_SwitchGameplayTagContainer;
}

declare class DirectoryWatcher extends UObject { 
	Added: string[];
	Modified: string[];
	Removed: string[];
	OnChanged: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): DirectoryWatcher;
	static Find(Outer: UObject, ResourceName: string): DirectoryWatcher;
	static GetDefaultObject(): DirectoryWatcher;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectoryWatcher;
	Watch(Directory: string): void;
	Unwatch(): void;
	Contains(File: string): boolean;
	static C(Other: UObject): DirectoryWatcher;
}

declare class JavascriptContext extends UObject { 
	Paths: string[];
	static Load(ResourceName: string): JavascriptContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptContext;
	static GetDefaultObject(): JavascriptContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptContext;
	WriteDTS(Target: string,bIncludingTooltip: boolean): boolean;
	WriteAliases(Target: string): boolean;
	SetContextId(Name: string): void;
	SetAsDebugContext(InPort: number): void;
	RunScript(Script: string,bOutput: boolean): string;
	RunFile(Filename: string): void;
	ResetAsDebugContext(): void;
	ReadScriptFile(Filename: string): string;
	IsDebugContext(): boolean;
	GetScriptFileFullPath(Filename: string): string;
	FindPathFile(TargetRootPath: string,TargetFileName: string,OutFiles?: string[]): {OutFiles: string[]};
	Expose(Name: string,UObject: UObject): void;
	DestroyInspector(): void;
	CreateInspector(Port: number): void;
	static C(Other: UObject): JavascriptContext;
}

declare class JavascriptAsset { 
	Name: string;
	Asset: StringAssetReference;
	clone() : JavascriptAsset;
	static C(Other: UObject): JavascriptAsset;
}

declare class JavascriptClassAsset { 
	Name: string;
	Class: UnrealEngineClass;
	clone() : JavascriptClassAsset;
	static C(Other: UObject): JavascriptClassAsset;
}

declare class JavascriptComponent extends ActorComponent { 
	ScriptSourceFile: string;
	bActiveWithinEditor: boolean;
	JavascriptContext: JavascriptContext;
	OnTick: UnrealEngineDelegate<(DeltaSeconds: number) => void>;
	OnBeginPlay: UnrealEngineDelegate<() => void>;
	OnEndPlay: UnrealEngineDelegate<() => void>;
	OnInvoke: UnrealEngineDelegate<(Name: string) => void>;
	Assets: JavascriptAsset[];
	ClassAssets: JavascriptClassAsset[];
	static Load(ResourceName: string): JavascriptComponent;
	static Find(Outer: UObject, ResourceName: string): JavascriptComponent;
	static GetDefaultObject(): JavascriptComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptComponent;
	ResolveClass(Name: string): UnrealEngineClass;
	ResolveAsset(Name: string,bTryLoad: boolean): UObject;
	Invoke(Name: string): void;
	ForceGC(): void;
	Expose(ExposedAs: string,UObject: UObject): void;
	static C(Other: UObject): JavascriptComponent;
}

declare class JavascriptDelegate extends UObject { 
	static Load(ResourceName: string): JavascriptDelegate;
	static Find(Outer: UObject, ResourceName: string): JavascriptDelegate;
	static GetDefaultObject(): JavascriptDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptDelegate;
	Fire(): void;
	static C(Other: UObject): JavascriptDelegate;
}

declare class JavascriptGeneratedClass extends BlueprintGeneratedClass { 
	static Load(ResourceName: string): JavascriptGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): JavascriptGeneratedClass;
	static GetDefaultObject(): JavascriptGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGeneratedClass;
	static C(Other: UObject): JavascriptGeneratedClass;
}

declare class JavascriptGeneratedClass_Native extends BlueprintGeneratedClass { 
	static Load(ResourceName: string): JavascriptGeneratedClass_Native;
	static Find(Outer: UObject, ResourceName: string): JavascriptGeneratedClass_Native;
	static GetDefaultObject(): JavascriptGeneratedClass_Native;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGeneratedClass_Native;
	static C(Other: UObject): JavascriptGeneratedClass_Native;
}

declare class JavascriptGeneratedFunction extends UFunction { 
	static Load(ResourceName: string): JavascriptGeneratedFunction;
	static Find(Outer: UObject, ResourceName: string): JavascriptGeneratedFunction;
	static GetDefaultObject(): JavascriptGeneratedFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGeneratedFunction;
	static C(Other: UObject): JavascriptGeneratedFunction;
}

declare class JavascriptGlobalDelegates extends UObject { 
	static Load(ResourceName: string): JavascriptGlobalDelegates;
	static Find(Outer: UObject, ResourceName: string): JavascriptGlobalDelegates;
	static GetDefaultObject(): JavascriptGlobalDelegates;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGlobalDelegates;
	UnbindAll(): void;
	Unbind(Key: string): void;
	RedirectorFollowed(PackageName: string,Redirector: UObject): void;
	PreLoadMap(MapName: string): void;
	PreGarbageCollect(): void;
	PostLoadMap(): void;
	PostGarbageCollect(): void;
	PostDemoPlay(): void;
	PostApplyLevelOffset(Level: Level,World: World,Offset: Vector,Flag: boolean): void;
	PackageCreatedForLoad(InPackage: Package): void;
	OnWorldCleanup(World: World,bSessionEnded: boolean,bCleanupResources: boolean): void;
	OnPreWorldInitialization_Friendly(World: World): void;
	OnPreWorldFinishDestroy(World: World): void;
	OnPreObjectPropertyChanged_Friendly(InObject: UObject,Property: Property,MemberProperty: Property): void;
	OnPostWorldInitialization_Friendly(World: World): void;
	OnPostWorldCreation(World: World): void;
	OnPostDuplicate_Friendly(World: World,bDuplicateForPIE: boolean): void;
	OnObjectSaved(UObject: UObject): void;
	OnObjectPropertyChanged_Friendly(InObject: UObject,Property: Property,MemberProperty: Property,ChangeType: number): void;
	OnObjectModified(UObject: UObject): void;
	OnAssetLoaded(UObject: UObject): void;
	LevelRemovedFromWorld(Level: Level,World: World): void;
	LevelAddedToWorld(Level: Level,World: World): void;
	Bind(Key: string): void;
	static C(Other: UObject): JavascriptGlobalDelegates;
}

declare class JavascriptHeapStatistics { 
	TotalHeapSize: number;
	TotalHeapSizeExecutable: number;
	TotalPhysicalSize: number;
	TotalAvailableSize: number;
	UsedHeapSize: number;
	HeapSizeLimit: number;
	MallocedMemory: number;
	bDoesZapGarbage: boolean;
	clone() : JavascriptHeapStatistics;
	static C(Other: UObject): JavascriptHeapStatistics;
}

declare class JavascriptIsolate extends UObject { 
	static Load(ResourceName: string): JavascriptIsolate;
	static Find(Outer: UObject, ResourceName: string): JavascriptIsolate;
	static GetDefaultObject(): JavascriptIsolate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptIsolate;
	GetHeapStatistics(Statistics?: JavascriptHeapStatistics): {Statistics: JavascriptHeapStatistics};
	CreateContext(): JavascriptContext;
	static C(Other: UObject): JavascriptIsolate;
}

declare class JavascriptProfileNode { 
	clone() : JavascriptProfileNode;
	static C(Other: UObject): JavascriptProfileNode;
	GetBailoutReason(): string;
	GetCallUid(): number;
	GetChild(index: number): JavascriptProfileNode;
	GetChildrenCount(): number;
	GetColumnNumber(): number;
	GetDeoptInfo_Reason(index: number): string;
	GetDeoptInfo_Stack(index: number): string;
	GetDeoptInfosCount(index: number): number;
	GetFunctionName(): string;
	GetHitCount(): number;
	GetHitLineCount(): number;
	GetLineNumber(): number;
	GetNodeId(): number;
	GetScriptId(): number;
	GetScriptResourceName(): string;
	static GetBailoutReason(UNode: JavascriptProfileNode): string;
	static GetCallUid(UNode: JavascriptProfileNode): number;
	static GetChild(UNode: JavascriptProfileNode,index: number): JavascriptProfileNode;
	static GetChildrenCount(UNode: JavascriptProfileNode): number;
	static GetColumnNumber(UNode: JavascriptProfileNode): number;
	static GetDeoptInfo_Reason(UNode: JavascriptProfileNode,index: number): string;
	static GetDeoptInfo_Stack(UNode: JavascriptProfileNode,index: number): string;
	static GetDeoptInfosCount(UNode: JavascriptProfileNode,index: number): number;
	static GetFunctionName(UNode: JavascriptProfileNode): string;
	static GetHitCount(UNode: JavascriptProfileNode): number;
	static GetHitLineCount(UNode: JavascriptProfileNode): number;
	static GetLineNumber(UNode: JavascriptProfileNode): number;
	static GetNodeId(UNode: JavascriptProfileNode): number;
	static GetScriptId(UNode: JavascriptProfileNode): number;
	static GetScriptResourceName(UNode: JavascriptProfileNode): string;
}

declare class JavascriptProfile extends UObject { 
	static Load(ResourceName: string): JavascriptProfile;
	static Find(Outer: UObject, ResourceName: string): JavascriptProfile;
	static GetDefaultObject(): JavascriptProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptProfile;
	static Stop(Title: string): JavascriptProfile;
	static Start(Title: string,bRecordSamples: boolean): void;
	static SetSamplingInterval(us: number): void;
	static SetIdle(is_idle: boolean): void;
	GetTopDownRoot(): JavascriptProfileNode;
	GetSampleTimestamp(index: number): number;
	GetSamplesCount(): number;
	GetSample(index: number): JavascriptProfileNode;
	static C(Other: UObject): JavascriptProfile;
}

declare class JavascriptStubStruct { 
	clone() : JavascriptStubStruct;
	static C(Other: UObject): JavascriptStubStruct;
}

declare class JavascriptFunction { 
	clone() : JavascriptFunction;
	static C(Other: UObject): JavascriptFunction;
	CallJS(CustomStruct: JavascriptStubStruct): void;
	static CallJS(UFunction: JavascriptFunction,CustomStruct: JavascriptStubStruct): void;
}

declare class JavascriptStreamableManager { 
	clone() : JavascriptStreamableManager;
	static C(Other: UObject): JavascriptStreamableManager;
	IsAsyncLoadComplete(Target: StringAssetReference): boolean;
	RequestAsyncLoad(TargetsToStream: StringAssetReference[],DelegateToCall: JavascriptFunction,Priority: number): void;
	SimpleAsyncLoad(Target: StringAssetReference,Priority: number): void;
	Unload(Target: StringAssetReference): void;
	static IsAsyncLoadComplete(Manager: JavascriptStreamableManager,Target: StringAssetReference): boolean;
	static RequestAsyncLoad(Manager: JavascriptStreamableManager,TargetsToStream: StringAssetReference[],DelegateToCall: JavascriptFunction,Priority: number): void;
	static SimpleAsyncLoad(Manager: JavascriptStreamableManager,Target: StringAssetReference,Priority: number): void;
	static Unload(Manager: JavascriptStreamableManager,Target: StringAssetReference): void;
	static CreateStreamableManager(): JavascriptStreamableManager;
}

declare class JavascriptInternetAddr { 
	clone() : JavascriptInternetAddr;
	static C(Other: UObject): JavascriptInternetAddr;
	SetIp(ResolvedAddress?: string,bValid?: boolean): {Addr: JavascriptInternetAddr, bValid: boolean};
	SetPort(Port?: number): {Addr: JavascriptInternetAddr};
	static SetIp(Addr?: JavascriptInternetAddr,ResolvedAddress?: string,bValid?: boolean): {Addr: JavascriptInternetAddr, bValid: boolean};
	static SetPort(Addr?: JavascriptInternetAddr,Port?: number): {Addr: JavascriptInternetAddr};
	static CreateInternetAddr(): JavascriptInternetAddr;
}

declare class JavascriptSocket { 
	clone() : JavascriptSocket;
	static C(Other: UObject): JavascriptSocket;
	SendMemoryTo(ToAddr?: JavascriptInternetAddr,NumBytes?: number,BytesSent?: number): {Socket: JavascriptSocket, BytesSent: number, $: boolean};
	static SendMemoryTo(Socket?: JavascriptSocket,ToAddr?: JavascriptInternetAddr,NumBytes?: number,BytesSent?: number): {Socket: JavascriptSocket, BytesSent: number, $: boolean};
	static CreateSocket(SocketType: string,Description: string,bForceUDP: boolean): JavascriptSocket;
}

declare type EJavascriptStatDataType = 'Invalid' | 'ST_None' | 'ST_int64' | 'ST_double' | 'ST_FName' | 'ST_Ptr';
declare var EJavascriptStatDataType : { Invalid:'Invalid',ST_None:'ST_None',ST_int64:'ST_int64',ST_double:'ST_double',ST_FName:'ST_FName',ST_Ptr:'ST_Ptr', };
declare type EJavascriptStatOperation = 'Invalid' | 'SetLongName' | 'AdvanceFrameEventGameThread' | 'AdvanceFrameEventRenderThread' | 'CycleScopeStart' | 'CycleScopeEnd' | 'SpecialMessageMarker' | 'Set' | 'Clear' | 'Add' | 'Subtract' | 'ChildrenStart' | 'ChildrenEnd' | 'Leaf' | 'MaxVal' | 'Memory';
declare var EJavascriptStatOperation : { Invalid:'Invalid',SetLongName:'SetLongName',AdvanceFrameEventGameThread:'AdvanceFrameEventGameThread',AdvanceFrameEventRenderThread:'AdvanceFrameEventRenderThread',CycleScopeStart:'CycleScopeStart',CycleScopeEnd:'CycleScopeEnd',SpecialMessageMarker:'SpecialMessageMarker',Set:'Set',Clear:'Clear',Add:'Add',Subtract:'Subtract',ChildrenStart:'ChildrenStart',ChildrenEnd:'ChildrenEnd',Leaf:'Leaf',MaxVal:'MaxVal',Memory:'Memory', };
declare class JavascriptStat { 
	clone() : JavascriptStat;
	static C(Other: UObject): JavascriptStat;
	AddMessage(InStatOperation: InStatOperation): void;
	AddMessage_float(InStatOperation: InStatOperation,Value: number,bIsCycle: boolean): void;
	AddMessage_int(InStatOperation: InStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage(Stat: JavascriptStat,InStatOperation: InStatOperation): void;
	static AddMessage_float(Stat: JavascriptStat,InStatOperation: InStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage_int(Stat: JavascriptStat,InStatOperation: InStatOperation,Value: number,bIsCycle: boolean): void;
	static NewStat(InStatName: string,InStatDesc: string,InGroupName: string,InGroupCategory: string,InGroupDesc: string,bDefaultEnable: boolean,bShouldClearEveryFrame: boolean,InStatType: InStatType,bCycleStat: boolean): JavascriptStat;
}

declare type ELogVerbosity_JS = 'NoLogging' | 'Fatal' | 'Error' | 'Warning' | 'Display' | 'Log' | 'Verbose' | 'VeryVerbose';
declare var ELogVerbosity_JS : { NoLogging:'NoLogging',Fatal:'Fatal',Error:'Error',Warning:'Warning',Display:'Display',Log:'Log',Verbose:'Verbose',VeryVerbose:'VeryVerbose', };
declare class JavascriptLogCategory { 
	clone() : JavascriptLogCategory;
	static C(Other: UObject): JavascriptLogCategory;
	GetCategoryName(): string;
	IsSuppressed(Verbosity: Verbosity): boolean;
	Log(Verbosity: Verbosity,Message: string,FileName: string,LineNumber: number): void;
	static GetCategoryName(Category: JavascriptLogCategory): string;
	static IsSuppressed(Category: JavascriptLogCategory,Verbosity: Verbosity): boolean;
	static Log(Category: JavascriptLogCategory,Verbosity: Verbosity,Message: string,FileName: string,LineNumber: number): void;
	static CreateLogCategory(CategoryName: string,InDefaultVerbosity: InDefaultVerbosity): JavascriptLogCategory;
}

declare class JavascriptLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptLibrary;
	static GetDefaultObject(): JavascriptLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptLibrary;
	static WriteStringToFile(UObject: UObject,Filename: string,Data: string): boolean;
	static WriteFile(UObject: UObject,Filename: string): boolean;
	static V8_SetIdleTaskBudget(BudgetInSeconds: number): void;
	static V8_SetFlagsFromString(V8Flags: string): void;
	static UnregisterComponent(ActorComponent: ActorComponent): void;
	static Unload(Manager: JavascriptStreamableManager,Target: StringAssetReference): void;
	static TryLoadByPath(Path: string): UObject;
	static SimpleAsyncLoad(Manager: JavascriptStreamableManager,Target: StringAssetReference,Priority: number): void;
	static SetRootComponent(Actor: Actor,Component: SceneComponent): void;
	static SetPort(Addr?: JavascriptInternetAddr,Port?: number): {Addr: JavascriptInternetAddr};
	static SetObjectFlags(Obj: UObject,Flags: number): void;
	static SetMobility(SceneComponent: SceneComponent,Type: EComponentMobility): void;
	static SetMobile(SceneComponent: SceneComponent): void;
	static SetIp(Addr?: JavascriptInternetAddr,ResolvedAddress?: string,bValid?: boolean): {Addr: JavascriptInternetAddr, bValid: boolean};
	static SetClientTravel(Engine: Engine,InWorld: World,NextURL: string,InTravelType: ETravelType): void;
	static SendMemoryTo(Socket?: JavascriptSocket,ToAddr?: JavascriptInternetAddr,NumBytes?: number,BytesSent?: number): {Socket: JavascriptSocket, BytesSent: number, $: boolean};
	static SegmentIntersection2D(SegmentStartA: Vector,SegmentEndA: Vector,SegmentStartB: Vector,SegmentEndB: Vector,IntersectionPoint?: Vector): {IntersectionPoint: Vector, $: boolean};
	static ResolveIp(HostName: string,OutIp?: string): {OutIp: string, $: boolean};
	static ReregisterComponent(ActorComponent: ActorComponent): void;
	static ReregisterAllComponents(Actor: Actor): void;
	static RequestAsyncLoad(Manager: JavascriptStreamableManager,TargetsToStream: StringAssetReference[],DelegateToCall: JavascriptFunction,Priority: number): void;
	static RegisterComponent(ActorComponent: ActorComponent): void;
	static ReadStringFromFile(UObject: UObject,Filename: string): string;
	static ReadFile(UObject: UObject,Filename: string): boolean;
	static ReadDirectory(UObject: UObject,Directory: string,OutItems?: DirectoryItem[]): {OutItems: DirectoryItem[], $: boolean};
	static NewStat(InStatName: string,InStatDesc: string,InGroupName: string,InGroupCategory: string,InGroupDesc: string,bDefaultEnable: boolean,bShouldClearEveryFrame: boolean,InStatType: InStatType,bCycleStat: boolean): JavascriptStat;
	static MarkRenderStateDirty(Component: ActorComponent): void;
	static MakeDirectory(Path: string,Tree: boolean): boolean;
	static Log(Category: JavascriptLogCategory,Verbosity: Verbosity,Message: string,FileName: string,LineNumber: number): void;
	static LoadPackage(InOuter: Package,PackageName: string): Package;
	static IsSuppressed(Category: JavascriptLogCategory,Verbosity: Verbosity): boolean;
	static IsRegistered(ActorComponent: ActorComponent): boolean;
	static IsPlayInPreview(World: World): boolean;
	static IsPlayInEditor(World: World): boolean;
	static IsGeneratedByBlueprint(InClass: UnrealEngineClass): boolean;
	static IsGameWorld(World: World): boolean;
	static IsAsyncLoadComplete(Manager: JavascriptStreamableManager,Target: StringAssetReference): boolean;
	static HasUndo(Engine: Engine): boolean;
	static HasAnyPackageFlags(Package: Package,Flags: number): boolean;
	static HasAnyFlags(UObject: UObject,Flags: number): boolean;
	static HandleSeamlessTravelPlayer(GameMode: GameMode,C?: Controller): {C: Controller};
	static GetSuperClasses(InClass: UnrealEngineClass): UnrealEngineClass[];
	static GetScriptResourceName(UNode: JavascriptProfileNode): string;
	static GetScriptId(UNode: JavascriptProfileNode): number;
	static GetPlatformName(): string;
	static GetOutermost(UObject: UObject): UObject;
	static GetOuter(UObject: UObject): UObject;
	static GetObjectsWithOuter(Outer: UObject,Results?: UObject[],bIncludeNestedObjects?: boolean,ExclusionFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
	static GetObjectsOfClass(ClassToLookFor: UnrealEngineClass,Results?: UObject[],bIncludeDerivedClasses?: boolean,ExcludeFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
	static GetNodeId(UNode: JavascriptProfileNode): number;
	static GetName(UObject: UObject): string;
	static GetModel(World: World): Model;
	static GetMetaData(Field: Field,Key: string): string;
	static GetMaskedFlags(Obj: UObject): number;
	static GetLineNumber(UNode: JavascriptProfileNode): number;
	static GetLevels(World: World): Level[];
	static GetLevel(Actor: Actor): Level;
	static GetLastRenderTime(Actor: Actor): number;
	static GetHitLineCount(UNode: JavascriptProfileNode): number;
	static GetHitCount(UNode: JavascriptProfileNode): number;
	static GetFunctionParmsSize(UFunction: UFunction): number;
	static GetFunctionName(UNode: JavascriptProfileNode): string;
	static GetFileSize(UObject: UObject,Filename: string): number;
	static GetFields(UObject: UObject,bIncludeSuper: boolean): Field[];
	static GetDynamicBinding(Outer: UnrealEngineClass,BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding;
	static GetDir(UObject: UObject,WhichDir: string): string;
	static GetDerivedClasses(ClassToLookFor: UnrealEngineClass,Results?: UnrealEngineClass[],bRecursive?: boolean): {Results: UnrealEngineClass[]};
	static GetDeoptInfosCount(UNode: JavascriptProfileNode,index: number): number;
	static GetDeoptInfo_Stack(UNode: JavascriptProfileNode,index: number): string;
	static GetDeoptInfo_Reason(UNode: JavascriptProfileNode,index: number): string;
	static GetCurrentProcessId(): number;
	static GetColumnNumber(UNode: JavascriptProfileNode): number;
	static GetClassPathName(Class: UnrealEngineClass): string;
	static GetChildrenCount(UNode: JavascriptProfileNode): number;
	static GetChild(UNode: JavascriptProfileNode,index: number): JavascriptProfileNode;
	static GetCategoryName(Category: JavascriptLogCategory): string;
	static GetCallUid(UNode: JavascriptProfileNode): number;
	static GetBlueprintGeneratedClassFromPath(Path: string): UnrealEngineClass;
	static GetBlueprintGeneratedClass(Blueprint: Blueprint): UnrealEngineClass;
	static GetBailoutReason(UNode: JavascriptProfileNode): string;
	static GetArchetypePathName(UObject: UObject): string;
	static GetAllActorsOfClassAndTags(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tags_Accept: string[],Tags_Deny: string[],OutActors?: Actor[]): {OutActors: Actor[]};
	static GenerateNavigation(world: World,NavData: RecastNavMesh): void;
	static FindPackage(InOuter: UObject,PackageName: string): Package;
	static FindObjectWithOuter(Outer: UObject,ClassToLookFor: UnrealEngineClass,NameToLookFor: string): UObject;
	static FileExists(Filename: string): boolean;
	static Duplicate(UObject: UObject,Outer: UObject,Name: string): UObject;
	static DirectoryExists(InDirectory: string): boolean;
	static DeleteFile(Filename: string,ReadOnly: boolean): boolean;
	static DeleteDirectory(Path: string,RequireExists: boolean,Tree: boolean): boolean;
	static CreateStreamableManager(): JavascriptStreamableManager;
	static CreateSocket(SocketType: string,Description: string,bForceUDP: boolean): JavascriptSocket;
	static CreatePackage(Outer: UObject,PackageName: string): Package;
	static CreateLogCategory(CategoryName: string,InDefaultVerbosity: InDefaultVerbosity): JavascriptLogCategory;
	static CreateInternetAddr(): JavascriptInternetAddr;
	static CreateEnum(Outer: UObject,Name: string,DisplayNames: string[]): Enum;
	static ClipboardPaste(): string;
	static ClipboardCopy(String: string): void;
	static ClearFlags(Obj: UObject): void;
	static CallJS(UFunction: JavascriptFunction,CustomStruct: JavascriptStubStruct): void;
	static AddMessage_int(Stat: JavascriptStat,InStatOperation: InStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage_float(Stat: JavascriptStat,InStatOperation: InStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage(Stat: JavascriptStat,InStatOperation: InStatOperation): void;
	static AddDynamicBinding(Outer: UnrealEngineClass,BindingObject: DynamicBlueprintBinding): void;
	static Actor_GetWorld(Actor: Actor): World;
	static C(Other: UObject): JavascriptLibrary;
}

declare class JavascriptMemoryObject extends UObject { 
	static Load(ResourceName: string): JavascriptMemoryObject;
	static Find(Outer: UObject, ResourceName: string): JavascriptMemoryObject;
	static GetDefaultObject(): JavascriptMemoryObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMemoryObject;
	static C(Other: UObject): JavascriptMemoryObject;
}

declare class JavascriptSharedMemoryRegion extends JavascriptMemoryObject { 
	static Load(ResourceName: string): JavascriptSharedMemoryRegion;
	static Find(Outer: UObject, ResourceName: string): JavascriptSharedMemoryRegion;
	static GetDefaultObject(): JavascriptSharedMemoryRegion;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSharedMemoryRegion;
	Dispose(): void;
	static Create(Name: string,bCreate: boolean,bRead: boolean,bWrite: boolean,Size: number): JavascriptSharedMemoryRegion;
	static C(Other: UObject): JavascriptSharedMemoryRegion;
}

declare class JavascriptRef { 
	clone() : JavascriptRef;
	static C(Other: UObject): JavascriptRef;
}

declare class JavascriptObject extends UObject { 
	Ref: JavascriptRef;
	Func: JavascriptFunction;
	static Load(ResourceName: string): JavascriptObject;
	static Find(Outer: UObject, ResourceName: string): JavascriptObject;
	static GetDefaultObject(): JavascriptObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptObject;
	static C(Other: UObject): JavascriptObject;
}

declare class JavascriptOutputDevice extends UObject { 
	static Load(ResourceName: string): JavascriptOutputDevice;
	static Find(Outer: UObject, ResourceName: string): JavascriptOutputDevice;
	static GetDefaultObject(): JavascriptOutputDevice;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptOutputDevice;
	OnMessage(Message: string,Verbosity: Verbosity,Category: string): void;
	static Log(Category: string,Verbosity: Verbosity,Filename: string,LineNumber: number,Message: string): void;
	Kill(): void;
	static C(Other: UObject): JavascriptOutputDevice;
}

declare class JavascriptProcess extends UObject { 
	static Load(ResourceName: string): JavascriptProcess;
	static Find(Outer: UObject, ResourceName: string): JavascriptProcess;
	static GetDefaultObject(): JavascriptProcess;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptProcess;
	WriteToPipe(Message: string,OutWritten?: string): {OutWritten: string, $: boolean};
	Wait(): void;
	Terminate(KillTree: boolean): void;
	static Sleep(Seconds: number): void;
	static SetEnvironmentVar(VarName: string,VarValue: string): void;
	ReadFromPipe(): string;
	ReadArrayFromPipe(Array?: number[]): {Array: number[], $: boolean};
	static Open_PID(ProcessId: number): JavascriptProcess;
	static Open(ProcName: string): JavascriptProcess;
	static LaunchURL(URL: string,Parms: string,Error?: string): {Error: string};
	IsRunning(): boolean;
	static IsApplicationRunning_PID(ProcessId: number): boolean;
	static IsApplicationRunning(ProcName: string): boolean;
	static GetString(Key: string,bFlag: boolean): string;
	GetReturnCode(ReturnCode?: number): {ReturnCode: number, $: boolean};
	static GetEnvironmentVar(VarName: string): string;
	static GetApplicationName(ProcessId: number): string;
	static Create(URL: string,Parms: string,bLaunchDetached: boolean,bLaunchHidden: boolean,bLaunchReallyHidden: boolean,PriorityModifier: number,OptionalWorkingDirectory: string,bUsePipe: boolean): JavascriptProcess;
	Close(): void;
	static CanLaunchURL(URL: string): boolean;
	static C(Other: UObject): JavascriptProcess;
}

declare class JavascriptSemaphore extends UObject { 
	static Load(ResourceName: string): JavascriptSemaphore;
	static Find(Outer: UObject, ResourceName: string): JavascriptSemaphore;
	static GetDefaultObject(): JavascriptSemaphore;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSemaphore;
	Unlock(): void;
	TryLock(NanosecondsToWait: number): boolean;
	Lock(): void;
	Dispose(): void;
	static Create(Name: string,bCreate: boolean,MaxLocks: number): JavascriptSemaphore;
	static C(Other: UObject): JavascriptSemaphore;
}

declare class JavascriptSettings extends UObject { 
	V8Flags: string;
	static Load(ResourceName: string): JavascriptSettings;
	static Find(Outer: UObject, ResourceName: string): JavascriptSettings;
	static GetDefaultObject(): JavascriptSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSettings;
	static C(Other: UObject): JavascriptSettings;
}

declare class JavascriptAutomatedTestInstance { 
	clone() : JavascriptAutomatedTestInstance;
	static C(Other: UObject): JavascriptAutomatedTestInstance;
	AddAnalyticsItem(InAnalyticsItem: string): void;
	AddError(InError: string): void;
	AddLogItem(InLogItem: string): void;
	AddWarning(InWarning: string): void;
	ClearExecutionInfo(): void;
	Destroy(): {Test: JavascriptAutomatedTestInstance};
	SetContinue(bInContinue: boolean): void;
	static AddAnalyticsItem(Test: JavascriptAutomatedTestInstance,InAnalyticsItem: string): void;
	static AddError(Test: JavascriptAutomatedTestInstance,InError: string): void;
	static AddLogItem(Test: JavascriptAutomatedTestInstance,InLogItem: string): void;
	static AddWarning(Test: JavascriptAutomatedTestInstance,InWarning: string): void;
	static ClearExecutionInfo(Test: JavascriptAutomatedTestInstance): void;
	static Destroy(Test?: JavascriptAutomatedTestInstance): {Test: JavascriptAutomatedTestInstance};
	static SetContinue(Test: JavascriptAutomatedTestInstance,bInContinue: boolean): void;
}

declare class JavascriptAutomatedTest { 
	Name: string;
	bComplexTask: boolean;
	TestFlags: number;
	RequiredDeviceNum: number;
	TestFunctionNames: string[];
	UFunction: JavascriptFunction;
	clone() : JavascriptAutomatedTest;
	static C(Other: UObject): JavascriptAutomatedTest;
	Create(): JavascriptAutomatedTestInstance;
	static Create(Test: JavascriptAutomatedTest): JavascriptAutomatedTestInstance;
}

declare class JavascriptTestLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptTestLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptTestLibrary;
	static GetDefaultObject(): JavascriptTestLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTestLibrary;
	static SetContinue(Test: JavascriptAutomatedTestInstance,bInContinue: boolean): void;
	static PushFrameCounter(): void;
	static PopFrameCounter(): void;
	static NewWorld(): World;
	static InitializeActorsForPlay(World: World,URL: URL): void;
	static DestroyWorld(World: World): void;
	static Destroy(Test?: JavascriptAutomatedTestInstance): {Test: JavascriptAutomatedTestInstance};
	static Create(Test: JavascriptAutomatedTest): JavascriptAutomatedTestInstance;
	static ClearExecutionInfo(Test: JavascriptAutomatedTestInstance): void;
	static BeginPlay(World: World): void;
	static AddWarning(Test: JavascriptAutomatedTestInstance,InWarning: string): void;
	static AddLogItem(Test: JavascriptAutomatedTestInstance,InLogItem: string): void;
	static AddError(Test: JavascriptAutomatedTestInstance,InError: string): void;
	static AddAnalyticsItem(Test: JavascriptAutomatedTestInstance,InAnalyticsItem: string): void;
	static C(Other: UObject): JavascriptTestLibrary;
}

declare class InGameSceneAccessor extends UObject { 
	static Load(ResourceName: string): InGameSceneAccessor;
	static Find(Outer: UObject, ResourceName: string): InGameSceneAccessor;
	static GetDefaultObject(): InGameSceneAccessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InGameSceneAccessor;
	Tick(DeltaTime: number): void;
	isBegunPlay(): boolean;
	Initialize(): InGameSceneAccessor;
	GetSceneWorld(): World;
	Destroy(): void;
	static C(Other: UObject): InGameSceneAccessor;
}

declare class JavascriptSlateStyle { 
	clone() : JavascriptSlateStyle;
	static C(Other: UObject): JavascriptSlateStyle;
	AddBorderBrush(PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	AddBoxBrush(PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	AddFontInfo(PropertyName: string,FontInfo: SlateFontInfo): void;
	AddImageBrush(PropertyName: string,InImageName: string,InImageSize: Vector2D,InTint: LinearColor,InTiling: ESlateBrushTileType,InImageType: ESlateBrushImageType): void;
	AddSound(PropertyName: string,Sound: SlateSound): void;
	Register(): void;
	RootToContentDir(RelativePath: string): string;
	RootToCoreContentDir(RelativePath: string): string;
	SetContentRoot(InContentRootDir: string): void;
	SetCoreContentRoot(InCoreContentRootDir: string): void;
	Unregister(): void;
	static AddBorderBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static AddBoxBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static AddFontInfo(StyleSet: JavascriptSlateStyle,PropertyName: string,FontInfo: SlateFontInfo): void;
	static AddImageBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InImageSize: Vector2D,InTint: LinearColor,InTiling: ESlateBrushTileType,InImageType: ESlateBrushImageType): void;
	static AddSound(StyleSet: JavascriptSlateStyle,PropertyName: string,Sound: SlateSound): void;
	static Register(StyleSet: JavascriptSlateStyle): void;
	static RootToContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static RootToCoreContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static SetContentRoot(StyleSet: JavascriptSlateStyle,InContentRootDir: string): void;
	static SetCoreContentRoot(StyleSet: JavascriptSlateStyle,InCoreContentRootDir: string): void;
	static Unregister(StyleSet: JavascriptSlateStyle): void;
	static CreateSlateStyle(InStyleSetName: string): JavascriptSlateStyle;
}

declare class JavascriptUMGLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptUMGLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptUMGLibrary;
	static GetDefaultObject(): JavascriptUMGLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUMGLibrary;
	static Unregister(StyleSet: JavascriptSlateStyle): void;
	static TakeWidget(Widget: Widget): JavascriptSlateWidget;
	static SetCoreContentRoot(StyleSet: JavascriptSlateStyle,InCoreContentRootDir: string): void;
	static SetContentRoot(StyleSet: JavascriptSlateStyle,InContentRootDir: string): void;
	static RootToCoreContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static RootToContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static Register(StyleSet: JavascriptSlateStyle): void;
	static GenerateDynamicImageResource(InDynamicBrushName: string): Vector2D;
	static CreateSlateStyle(InStyleSetName: string): JavascriptSlateStyle;
	static ComputeDesiredSize(Widget: Widget,LayoutScaleMultiplier: number): Vector2D;
	static AddWindowAsNativeChild(NewWindow: JavascriptSlateWidget,RootWindow: JavascriptSlateWidget): void;
	static AddWindow(NewWindow: JavascriptSlateWidget): void;
	static AddSound(StyleSet: JavascriptSlateStyle,PropertyName: string,Sound: SlateSound): void;
	static AddImageBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InImageSize: Vector2D,InTint: LinearColor,InTiling: ESlateBrushTileType,InImageType: ESlateBrushImageType): void;
	static AddFontInfo(StyleSet: JavascriptSlateStyle,PropertyName: string,FontInfo: SlateFontInfo): void;
	static AddBoxBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static AddBorderBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static C(Other: UObject): JavascriptUMGLibrary;
}

declare class JavascriptComboButton extends ContentWidget { 
	ComboButtonStyle: ComboButtonStyle;
	ButtonStyle: ButtonStyle;
	OnGetMenuContent: UnrealEngineDelegate<() => JavascriptSlateWidget>;
	OnMenuOpenChanged: UnrealEngineDelegate<(Value: boolean) => void>;
	OnComboBoxOpened: UnrealEngineDelegate<() => void>;
	bIsFocusable: boolean;
	bHasDownArrow: boolean;
	ForegroundColor: SlateColor;
	ButtonColorAndOpacity: SlateColor;
	ContentPadding: Margin;
	MenuPlacement: EMenuPlacement;
	HAlign: EHorizontalAlignment;
	VAlign: EVerticalAlignment;
	static Load(ResourceName: string): JavascriptComboButton;
	static Find(Outer: UObject, ResourceName: string): JavascriptComboButton;
	static GetDefaultObject(): JavascriptComboButton;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptComboButton;
	SetIsOpen(InIsOpen: boolean,bFocusMenu: boolean): void;
	static C(Other: UObject): JavascriptComboButton;
}

declare class JavascriptSlateIcon { 
	StyleSetName: string;
	StyleName: string;
	SmallStyleName: string;
	clone() : JavascriptSlateIcon;
	static C(Other: UObject): JavascriptSlateIcon;
}

declare class JavascriptComboButtonContext extends UObject { 
	OnGetLabel: UnrealEngineDelegate<() => string>;
	OnGetTooltip: UnrealEngineDelegate<() => string>;
	OnGetIcon: UnrealEngineDelegate<() => JavascriptSlateIcon>;
	OnGetWidget: UnrealEngineDelegate<() => JavascriptSlateWidget>;
	OnCanExecute: UnrealEngineDelegate<() => boolean>;
	static Load(ResourceName: string): JavascriptComboButtonContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptComboButtonContext;
	static GetDefaultObject(): JavascriptComboButtonContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptComboButtonContext;
	static C(Other: UObject): JavascriptComboButtonContext;
}

declare class JavascriptGameViewport extends ContentWidget { 
	BackgroundColor: LinearColor;
	static Load(ResourceName: string): JavascriptGameViewport;
	static Find(Outer: UObject, ResourceName: string): JavascriptGameViewport;
	static GetDefaultObject(): JavascriptGameViewport;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGameViewport;
	Spawn(ActorClass: UnrealEngineClass): Actor;
	SetViewRotation(Rotation: Rotator): void;
	SetViewLocation(Location: Vector): void;
	GetViewRotation(): Rotator;
	GetViewportWorld(): World;
	GetViewLocation(): Vector;
	static C(Other: UObject): JavascriptGameViewport;
}

declare class JavascriptMenuContext extends UObject { 
	Description: string;
	ToolTip: string;
	Icon: JavascriptSlateIcon;
	OnCanExecute: UnrealEngineDelegate<() => boolean>;
	OnExecute: UnrealEngineDelegate<() => void>;
	static Load(ResourceName: string): JavascriptMenuContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptMenuContext;
	static GetDefaultObject(): JavascriptMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMenuContext;
	static C(Other: UObject): JavascriptMenuContext;
}

declare type EJavasrciptUserInterfaceActionType = 'Button' | 'ToggleButton' | 'RadioButton' | 'Check';
declare var EJavasrciptUserInterfaceActionType : { Button:'Button',ToggleButton:'ToggleButton',RadioButton:'RadioButton',Check:'Check', };
declare class JavascriptUICommandInfo { 
	clone() : JavascriptUICommandInfo;
	static C(Other: UObject): JavascriptUICommandInfo;
	static GenericCommand(What: string): JavascriptUICommandInfo;
}

declare class JavascriptUICommand { 
	Id: string;
	FriendlyName: string;
	Description: string;
	DefaultChord: InputChord;
	ActionType: EJavasrciptUserInterfaceActionType;
	CommandInfo: JavascriptUICommandInfo;
	clone() : JavascriptUICommand;
	static C(Other: UObject): JavascriptUICommand;
}

declare class JavascriptBindingContext { 
	clone() : JavascriptBindingContext;
	static C(Other: UObject): JavascriptBindingContext;
	Destroy(): void;
	UI_COMMAND_Function(Command: JavascriptUICommand): JavascriptUICommandInfo;
	static Destroy(Context: JavascriptBindingContext): void;
	static UI_COMMAND_Function(This: JavascriptBindingContext,Command: JavascriptUICommand): JavascriptUICommandInfo;
	static NewBindingContext(InContextName: string,InContextDesc: string,InContextParent: string,InStyleSetName: string): JavascriptBindingContext;
}

declare type EJavascriptExtensionHook = 'Before' | 'After' | 'First';
declare var EJavascriptExtensionHook : { Before:'Before',After:'After',First:'First', };
declare class JavascriptUICommandList { 
	clone() : JavascriptUICommandList;
	static C(Other: UObject): JavascriptUICommandList;
	CreateMenuBarBuilder(UFunction: JavascriptFunction): void;
	CreateMenuBuilder(bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
	CreateToolbarBuilder(Orientation: EOrientation,UFunction: JavascriptFunction): void;
	ProcessCommandBindings_KeyEvent(InKeyEvent: KeyEvent): boolean;
	ProcessCommandBindings_PointerEvent(InMouseEvent: UPointerEvent): boolean;
	static CreateMenuBarBuilder(CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): void;
	static CreateMenuBuilder(CommandList: JavascriptUICommandList,bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
	static CreateToolbarBuilder(CommandList: JavascriptUICommandList,Orientation: EOrientation,UFunction: JavascriptFunction): void;
	static ProcessCommandBindings_KeyEvent(CommandList: JavascriptUICommandList,InKeyEvent: KeyEvent): boolean;
	static ProcessCommandBindings_PointerEvent(CommandList: JavascriptUICommandList,InMouseEvent: UPointerEvent): boolean;
	static CreateUICommandList(): JavascriptUICommandList;
}

declare class JavascriptExtensionBase { 
	clone() : JavascriptExtensionBase;
	static C(Other: UObject): JavascriptExtensionBase;
}

declare class JavascriptMenuBuilder { 
	clone() : JavascriptMenuBuilder;
	static C(Other: UObject): JavascriptMenuBuilder;
	AddComboButton(UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
	AddMenuEntry(UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
	AddPullDownMenu(InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
	AddSeparator(): {Builder: JavascriptMenuBuilder};
	AddToolBarButton(CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
	AddWidget(Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
	BeginSection(InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
	EndSection(): {Builder: JavascriptMenuBuilder};
	PopCommandList(): {Builder: JavascriptMenuBuilder};
	PushCommandList(List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
	static AddComboButton(Builder?: JavascriptMenuBuilder,UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
	static AddMenuEntry(Builder?: JavascriptMenuBuilder,UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
	static AddPullDownMenu(MenuBuilder?: JavascriptMenuBuilder,InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
	static AddSeparator(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static AddToolBarButton(Builder?: JavascriptMenuBuilder,CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
	static AddWidget(Builder?: JavascriptMenuBuilder,Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
	static EndSection(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static PopCommandList(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static PushCommandList(Builder?: JavascriptMenuBuilder,List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
}

declare class JavascriptExtender { 
	clone() : JavascriptExtender;
	static C(Other: UObject): JavascriptExtender;
	AddMenubarExtension(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	AddMenuExtension(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	AddToolBarExtension(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	Apply(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
	RemoveExtension(Extension: JavascriptExtensionBase): void;
	static AddMenubarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddMenuExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddToolBarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static Apply(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
	static RemoveExtension(Extender: JavascriptExtender,Extension: JavascriptExtensionBase): void;
	static Combine(Extenders: JavascriptExtender[]): JavascriptExtender;
}

declare class JavascriptMenuLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptMenuLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptMenuLibrary;
	static GetDefaultObject(): JavascriptMenuLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMenuLibrary;
	static UI_COMMAND_Function(This: JavascriptBindingContext,Command: JavascriptUICommand): JavascriptUICommandInfo;
	static RemoveExtension(Extender: JavascriptExtender,Extension: JavascriptExtensionBase): void;
	static PushCommandList(Builder?: JavascriptMenuBuilder,List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
	static ProcessCommandBindings_PointerEvent(CommandList: JavascriptUICommandList,InMouseEvent: UPointerEvent): boolean;
	static ProcessCommandBindings_KeyEvent(CommandList: JavascriptUICommandList,InKeyEvent: KeyEvent): boolean;
	static PopCommandList(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static NewBindingContext(InContextName: string,InContextDesc: string,InContextParent: string,InStyleSetName: string): JavascriptBindingContext;
	static GenericCommand(What: string): JavascriptUICommandInfo;
	static EndSection(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static Destroy(Context: JavascriptBindingContext): void;
	static CreateUICommandList(): JavascriptUICommandList;
	static CreateToolbarBuilder(CommandList: JavascriptUICommandList,Orientation: EOrientation,UFunction: JavascriptFunction): void;
	static CreateMenuBuilder(CommandList: JavascriptUICommandList,bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
	static CreateMenuBarBuilder(CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): void;
	static Combine(Extenders: JavascriptExtender[]): JavascriptExtender;
	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
	static Apply(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
	static AddWidget(Builder?: JavascriptMenuBuilder,Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
	static AddToolBarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddToolBarButton(Builder?: JavascriptMenuBuilder,CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
	static AddSeparator(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static AddPullDownMenu(MenuBuilder?: JavascriptMenuBuilder,InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
	static AddMenuExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddMenuEntry(Builder?: JavascriptMenuBuilder,UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
	static AddMenubarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddComboButton(Builder?: JavascriptMenuBuilder,UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
	static C(Other: UObject): JavascriptMenuLibrary;
}

declare class JavascriptMultiBox extends Widget { 
	OnHook: UnrealEngineDelegate<(Id: string, Self: JavascriptMultiBox, CurrentBuilder: JavascriptMenuBuilder) => void>;
	static Load(ResourceName: string): JavascriptMultiBox;
	static Find(Outer: UObject, ResourceName: string): JavascriptMultiBox;
	static GetDefaultObject(): JavascriptMultiBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMultiBox;
	static Bind(Builder: JavascriptMenuBuilder): void;
	AddSubMenu(Builder?: JavascriptMenuBuilder,Id?: string,Label?: string,ToolTip?: string,bInOpenSubMenuOnClick?: boolean): {Builder: JavascriptMenuBuilder};
	AddPullDownMenu(Builder?: JavascriptMenuBuilder,Id?: string,Label?: string,ToolTip?: string): {Builder: JavascriptMenuBuilder};
	static C(Other: UObject): JavascriptMultiBox;
}

declare class JavascriptSlateTextRun { 
	clone() : JavascriptSlateTextRun;
	static C(Other: UObject): JavascriptSlateTextRun;
}

declare class JavascriptTextModel extends UObject { 
	static Load(ResourceName: string): JavascriptTextModel;
	static Find(Outer: UObject, ResourceName: string): JavascriptTextModel;
	static GetDefaultObject(): JavascriptTextModel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTextModel;
	SetString(String: string): void;
	GetString(): string;
	CreateRun(MessageTextStyle: TextBlockStyle,BeginIndex: number,EndIndex: number): JavascriptSlateTextRun;
	static C(Other: UObject): JavascriptTextModel;
}

declare class JavascriptTextLayout { 
	clone() : JavascriptTextLayout;
	static C(Other: UObject): JavascriptTextLayout;
	AddLine(Model?: JavascriptTextModel,Runs?: JavascriptSlateTextRun[]): {TextLayout: JavascriptTextLayout};
	ClearLines(): {TextLayout: JavascriptTextLayout};
	GetAsText(): string;
	GetLineLength(): number;
	static AddLine(TextLayout?: JavascriptTextLayout,Model?: JavascriptTextModel,Runs?: JavascriptSlateTextRun[]): {TextLayout: JavascriptTextLayout};
	static ClearLines(TextLayout?: JavascriptTextLayout): {TextLayout: JavascriptTextLayout};
	static GetAsText(TextLayout: JavascriptTextLayout): string;
	static GetLineLength(TargetTextLayout: JavascriptTextLayout): number;
}

declare class JavascriptMultiLineEditableTextBox extends MultiLineEditableTextBox { 
	OnVScrollBarUserScrolled: UnrealEngineMulticastDelegate<(Offset: number) => void>;
	GetTextDelegate: UnrealEngineDelegate<(TextLayout: JavascriptTextLayout) => string>;
	SetTextDelegate: UnrealEngineDelegate<(InText: string, TextLayout: JavascriptTextLayout) => void>;
	bIsReadOnly: boolean;
	bAlwaysShowScrollbars: boolean;
	static Load(ResourceName: string): JavascriptMultiLineEditableTextBox;
	static Find(Outer: UObject, ResourceName: string): JavascriptMultiLineEditableTextBox;
	static GetDefaultObject(): JavascriptMultiLineEditableTextBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMultiLineEditableTextBox;
	ScrollTo(Line: number,Offset: number): void;
	Refresh(): void;
	GoTo(Line: number,Offset: number): void;
	static C(Other: UObject): JavascriptMultiLineEditableTextBox;
}

declare class JavascriptRichTextBlockHyperlinkDecorator extends RichTextBlockDecorator { 
	HyperlinkId: string;
	OnClick: UnrealEngineMulticastDelegate<(Self: JavascriptRichTextBlockHyperlinkDecorator) => void>;
	static Load(ResourceName: string): JavascriptRichTextBlockHyperlinkDecorator;
	static Find(Outer: UObject, ResourceName: string): JavascriptRichTextBlockHyperlinkDecorator;
	static GetDefaultObject(): JavascriptRichTextBlockHyperlinkDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptRichTextBlockHyperlinkDecorator;
	GetMetadata(Key: string): string;
	static C(Other: UObject): JavascriptRichTextBlockHyperlinkDecorator;
}

declare class JavascriptSearchBox extends Widget { 
	OnTextChanged: UnrealEngineMulticastDelegate<(Text: string) => void>;
	OnTextCommitted: UnrealEngineMulticastDelegate<(Text: string, CommitMethod: ETextCommit) => void>;
	Text: string;
	TextDelegate: UnrealEngineDelegate<() => string>;
	HintText: string;
	HintTextDelegate: UnrealEngineDelegate<() => string>;
	static Load(ResourceName: string): JavascriptSearchBox;
	static Find(Outer: UObject, ResourceName: string): JavascriptSearchBox;
	static GetDefaultObject(): JavascriptSearchBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSearchBox;
	SetText(InText: string): void;
	SetHintText(InHintText: string): void;
	static C(Other: UObject): JavascriptSearchBox;
}

declare class JavascriptStyleSet { 
	StyleSetName: string;
	clone() : JavascriptStyleSet;
	static C(Other: UObject): JavascriptStyleSet;
	GetBrush(StyleName: string): SlateBrush;
	GetButtonStyle(StyleName: string): ButtonStyle;
	GetCheckBoxStyle(StyleName: string): CheckBoxStyle;
	GetColor(StyleName: string): LinearColor;
	GetComboBoxStyle(StyleName: string): ComboBoxStyle;
	GetComboButtonStyle(StyleName: string): ComboButtonStyle;
	GetEditableTextBoxStyle(StyleName: string): EditableTextBoxStyle;
	GetEditableTextStyle(StyleName: string): EditableTextStyle;
	GetFloat(StyleName: string): number;
	GetFontStyle(StyleName: string): SlateFontInfo;
	GetMargin(StyleName: string): Margin;
	GetSlateColor(StyleName: string): SlateColor;
	GetSound(StyleName: string): SlateSound;
	GetTextBlockStyle(StyleName: string): TextBlockStyle;
	GetVector(StyleName: string): Vector2D;
	static GetBrush(Handle: JavascriptStyleSet,StyleName: string): SlateBrush;
	static GetButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ButtonStyle;
	static GetCheckBoxStyle(Handle: JavascriptStyleSet,StyleName: string): CheckBoxStyle;
	static GetColor(Handle: JavascriptStyleSet,StyleName: string): LinearColor;
	static GetComboBoxStyle(Handle: JavascriptStyleSet,StyleName: string): ComboBoxStyle;
	static GetComboButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ComboButtonStyle;
	static GetEditableTextBoxStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextBoxStyle;
	static GetEditableTextStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextStyle;
	static GetFloat(Handle: JavascriptStyleSet,StyleName: string): number;
	static GetFontStyle(Handle: JavascriptStyleSet,StyleName: string): SlateFontInfo;
	static GetMargin(Handle: JavascriptStyleSet,StyleName: string): Margin;
	static GetSlateColor(Handle: JavascriptStyleSet,StyleName: string): SlateColor;
	static GetSound(Handle: JavascriptStyleSet,StyleName: string): SlateSound;
	static GetTextBlockStyle(Handle: JavascriptStyleSet,StyleName: string): TextBlockStyle;
	static GetVector(Handle: JavascriptStyleSet,StyleName: string): Vector2D;
}

declare class JavascriptStyleSetLibrary extends BlueprintFunctionLibrary { 
	SlateColor: SlateColor;
	SlateBrush: SlateBrush;
	ButtonStyle: ButtonStyle;
	TextBlockStyle: TextBlockStyle;
	EditableTextStyle: EditableTextStyle;
	EditableTextBoxStyle: EditableTextBoxStyle;
	CheckBoxStyle: CheckBoxStyle;
	ComboBoxStyle: ComboBoxStyle;
	ComboButtonStyle: ComboButtonStyle;
	static Load(ResourceName: string): JavascriptStyleSetLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptStyleSetLibrary;
	static GetDefaultObject(): JavascriptStyleSetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptStyleSetLibrary;
	static GetVector(Handle: JavascriptStyleSet,StyleName: string): Vector2D;
	static GetTextBlockStyle(Handle: JavascriptStyleSet,StyleName: string): TextBlockStyle;
	static GetSound(Handle: JavascriptStyleSet,StyleName: string): SlateSound;
	static GetSlateColor(Handle: JavascriptStyleSet,StyleName: string): SlateColor;
	static GetMargin(Handle: JavascriptStyleSet,StyleName: string): Margin;
	static GetFontStyle(Handle: JavascriptStyleSet,StyleName: string): SlateFontInfo;
	static GetFloat(Handle: JavascriptStyleSet,StyleName: string): number;
	static GetEditableTextStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextStyle;
	static GetEditableTextBoxStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextBoxStyle;
	static GetComboButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ComboButtonStyle;
	static GetComboBoxStyle(Handle: JavascriptStyleSet,StyleName: string): ComboBoxStyle;
	static GetColor(Handle: JavascriptStyleSet,StyleName: string): LinearColor;
	static GetCheckBoxStyle(Handle: JavascriptStyleSet,StyleName: string): CheckBoxStyle;
	static GetButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ButtonStyle;
	static GetBrush(Handle: JavascriptStyleSet,StyleName: string): SlateBrush;
	static C(Other: UObject): JavascriptStyleSetLibrary;
}

declare class JavascriptTextBlock extends TextBlock { 
	HighlightText: string;
	HighlightTextDelegate: UnrealEngineDelegate<() => string>;
	static Load(ResourceName: string): JavascriptTextBlock;
	static Find(Outer: UObject, ResourceName: string): JavascriptTextBlock;
	static GetDefaultObject(): JavascriptTextBlock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTextBlock;
	SetHighlightText(InHighlightText: string): void;
	static C(Other: UObject): JavascriptTextBlock;
}

declare class JavascriptTileView extends TileView { 
	JavascriptContext: JavascriptContext;
	static Load(ResourceName: string): JavascriptTileView;
	static Find(Outer: UObject, ResourceName: string): JavascriptTileView;
	static GetDefaultObject(): JavascriptTileView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTileView;
	OnSelectionChanged(UObject: UObject,Type: ESelectInfo): void;
	OnDoubleClick(UObject: UObject): void;
	OnClick(UObject: UObject): void;
	static C(Other: UObject): JavascriptTileView;
}

declare class TableColumnHeaderStyle extends SlateWidgetStyle { 
	SortPrimaryAscendingImage: SlateBrush;
	SortPrimaryDescendingImage: SlateBrush;
	SortSecondaryAscendingImage: SlateBrush;
	SortSecondaryDescendingImage: SlateBrush;
	NormalBrush: SlateBrush;
	HoveredBrush: SlateBrush;
	MenuDropdownImage: SlateBrush;
	MenuDropdownNormalBorderBrush: SlateBrush;
	MenuDropdownHoveredBorderBrush: SlateBrush;
	clone() : TableColumnHeaderStyle;
	static C(Other: UObject): TableColumnHeaderStyle;
}

declare class SplitterStyle extends SlateWidgetStyle { 
	HandleNormalBrush: SlateBrush;
	HandleHighlightBrush: SlateBrush;
	clone() : SplitterStyle;
	static C(Other: UObject): SplitterStyle;
}

declare class HeaderRowStyle extends SlateWidgetStyle { 
	ColumnStyle: TableColumnHeaderStyle;
	LastColumnStyle: TableColumnHeaderStyle;
	ColumnSplitterStyle: SplitterStyle;
	BackgroundBrush: SlateBrush;
	ForegroundColor: SlateColor;
	clone() : HeaderRowStyle;
	static C(Other: UObject): HeaderRowStyle;
}

declare class JavascriptColumn { 
	Id: string;
	Width: number;
	Widget: Widget;
	clone() : JavascriptColumn;
	static C(Other: UObject): JavascriptColumn;
}

declare class JavascriptTreeView extends TableViewBase { 
	OnGenerateRowEvent: UnrealEngineDelegate<(UObject: UObject, Id: string, Instance: JavascriptTreeView) => Widget>;
	OnExpansionChanged: UnrealEngineDelegate<(Item: UObject, bExpanded: boolean, Instance: JavascriptTreeView) => void>;
	OnContextMenuOpening: UnrealEngineDelegate<(Instance: JavascriptTreeView) => Widget>;
	OnGetChildren: UnrealEngineDelegate<(Item: UObject, Instance: JavascriptTreeView) => void>;
	JavascriptContext: JavascriptContext;
	Items: UObject[];
	HeaderRowStyle: HeaderRowStyle;
	TableRowStyle: TableRowStyle;
	ScrollBarStyle: ScrollBarStyle;
	SelectionMode: ESelectionMode;
	Children: UObject[];
	Columns: JavascriptColumn[];
	ColumnWidgets: Widget[];
	static Load(ResourceName: string): JavascriptTreeView;
	static Find(Outer: UObject, ResourceName: string): JavascriptTreeView;
	static GetDefaultObject(): JavascriptTreeView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTreeView;
	SetSingleExpandedItem(InItem: UObject): void;
	SetSelection(SoleSelectedItem: UObject): void;
	SetItemExpansion(InItem: UObject,InShouldExpandItem: boolean): void;
	RequestTreeRefresh(): void;
	OnSelectionChanged(UObject: UObject,Type: ESelectInfo): void;
	OnDoubleClick(UObject: UObject): void;
	IsItemExpanded(InItem: UObject): boolean;
	GetSelectedItems(OutItems?: UObject[]): {OutItems: UObject[]};
	static C(Other: UObject): JavascriptTreeView;
}

declare class JavascriptListView extends JavascriptTreeView { 
	ItemHeight: number;
	static Load(ResourceName: string): JavascriptListView;
	static Find(Outer: UObject, ResourceName: string): JavascriptListView;
	static GetDefaultObject(): JavascriptListView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptListView;
	SetSelection(SoleSelectedItem: UObject): void;
	RequestListRefresh(): void;
	OnClick(UObject: UObject): void;
	GetSelectedItems(OutItems?: UObject[]): {OutItems: UObject[]};
	static C(Other: UObject): JavascriptListView;
}

declare class JavascriptUICommands extends UObject { 
	OnExecuteAction: UnrealEngineDelegate<(Id: string) => void>;
	OnCanExecuteAction: UnrealEngineDelegate<(Id: string) => boolean>;
	OnIsActionChecked: UnrealEngineDelegate<(Id: string) => boolean>;
	OnIsActionButtonVisible: UnrealEngineDelegate<(Id: string) => boolean>;
	Commands: JavascriptUICommand[];
	ContextName: string;
	ContextDesc: string;
	ContextNameParent: string;
	StyleSetName: string;
	CommandInfos: JavascriptUICommandInfo[];
	BindingContext: JavascriptBindingContext;
	static Load(ResourceName: string): JavascriptUICommands;
	static Find(Outer: UObject, ResourceName: string): JavascriptUICommands;
	static GetDefaultObject(): JavascriptUICommands;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUICommands;
	Uninitialize(): void;
	Unbind(List: JavascriptUICommandList): void;
	Refresh(): void;
	Initialize(): void;
	GetAction(Id: string): JavascriptUICommandInfo;
	Discard(): void;
	Commit(): void;
	static BroadcastCommandsChanged(InContextName: string): void;
	Bind(List: JavascriptUICommandList): void;
	static C(Other: UObject): JavascriptUICommands;
}

declare class JavascriptUMGBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptUMGBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptUMGBlueprintLibrary;
	static GetDefaultObject(): JavascriptUMGBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUMGBlueprintLibrary;
	static SlateColor_UseSubduedForeground(): SlateColor;
	static SlateColor_UseForeground(): SlateColor;
	static GetLineLength(TargetTextLayout: JavascriptTextLayout): number;
	static GetAsText(TextLayout: JavascriptTextLayout): string;
	static DrawSpaceSpline(Context?: PaintContext,InStart?: Vector2D,InStartDir?: Vector2D,InEnd?: Vector2D,InEndDir?: Vector2D,InThickness?: number,InTint?: LinearColor): {Context: PaintContext};
	static ClearLines(TextLayout?: JavascriptTextLayout): {TextLayout: JavascriptTextLayout};
	static AddLine(TextLayout?: JavascriptTextLayout,Model?: JavascriptTextModel,Runs?: JavascriptSlateTextRun[]): {TextLayout: JavascriptTextLayout};
	static C(Other: UObject): JavascriptUMGBlueprintLibrary;
}

declare class JavascriptWidget extends UserWidget { 
	JavascriptContext: JavascriptContext;
	OnInputActionEvent: UnrealEngineMulticastDelegate<(ActionName: string) => void>;
	OnDestroy: UnrealEngineMulticastDelegate<(bReleaseChildren: boolean) => void>;
	ContentSlot: PanelSlot;
	static Load(ResourceName: string): JavascriptWidget;
	static Find(Outer: UObject, ResourceName: string): JavascriptWidget;
	static GetDefaultObject(): JavascriptWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWidget;
	SetRootWidget(Widget: Widget): void;
	RemoveChild(): boolean;
	OnListenForInputAction(ActionName: string,EventType: EInputEvent,bConsume: boolean): void;
	OnInputActionByName(ActionName: string): void;
	static HasValidCachedWidget(Widget: Widget): boolean;
	static CallSynchronizeProperties(WidgetOrSlot: Visual): void;
	AddChild(Content: Widget): PanelSlot;
	static C(Other: UObject): JavascriptWidget;
}

declare type EJavascriptWindowType = 'Normal' | 'Menu' | 'ToolTip' | 'Notification' | 'CursorDecorator';
declare var EJavascriptWindowType : { Normal:'Normal',Menu:'Menu',ToolTip:'ToolTip',Notification:'Notification',CursorDecorator:'CursorDecorator', };
declare class WindowStyle extends SlateWidgetStyle { 
	MinimizeButtonStyle: ButtonStyle;
	MaximizeButtonStyle: ButtonStyle;
	RestoreButtonStyle: ButtonStyle;
	CloseButtonStyle: ButtonStyle;
	TitleTextStyle: TextBlockStyle;
	ActiveTitleBrush: SlateBrush;
	InactiveTitleBrush: SlateBrush;
	FlashTitleBrush: SlateBrush;
	OutlineBrush: SlateBrush;
	OutlineColor: SlateColor;
	BorderBrush: SlateBrush;
	BackgroundBrush: SlateBrush;
	ChildBackgroundBrush: SlateBrush;
	clone() : WindowStyle;
	static C(Other: UObject): WindowStyle;
}

declare type EJavascriptAutoCenter = 'None' | 'PrimaryWorkArea' | 'PreferredWorkArea';
declare var EJavascriptAutoCenter : { None:'None',PrimaryWorkArea:'PrimaryWorkArea',PreferredWorkArea:'PreferredWorkArea', };
declare type EJavascriptWindowTransparency = 'None' | 'PerWindow';
declare var EJavascriptWindowTransparency : { None:'None',PerWindow:'PerWindow', };
declare type EJavascriptSizingRule = 'FixedSize' | 'Autosized' | 'UserSized';
declare var EJavascriptSizingRule : { FixedSize:'FixedSize',Autosized:'Autosized',UserSized:'UserSized', };
declare class JavascriptWindow extends ContentWidget { 
	Type: Type;
	Style: WindowStyle;
	Title: string;
	bDragAnywhere: boolean;
	AutoCenter: AutoCenter;
	ScreenPosition: Vector2D;
	ClientSize: Vector2D;
	SupportsTransparency: SupportsTransparency;
	InitialOpacity: number;
	IsInitiallyMaximized: boolean;
	SizingRule: SizingRule;
	IsPopupWindow: boolean;
	FocusWhenFirstShown: boolean;
	ActivateWhenFirstShown: boolean;
	UseOSWindowBorder: boolean;
	HasCloseButton: boolean;
	SupportsMaximize: boolean;
	SupportsMinimize: boolean;
	CreateTitleBar: boolean;
	SaneWindowPlacement: boolean;
	LayoutBorder: Margin;
	UserResizeBorder: Margin;
	static Load(ResourceName: string): JavascriptWindow;
	static Find(Outer: UObject, ResourceName: string): JavascriptWindow;
	static GetDefaultObject(): JavascriptWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWindow;
	ShowWindow(): void;
	SetOpacity(InOpacity: number): void;
	Resize(NewSize: Vector2D): void;
	ReshapeWindow(NewPosition: Vector2D,NewSize: Vector2D): void;
	RequestDestroyWindow(): void;
	MoveWindowTo(NewPosition: Vector2D): void;
	HideWindow(): void;
	FlashWindow(): void;
	EnableWindow(bEnable: boolean): void;
	DestroyWindowImmediately(): void;
	BringToFront(): void;
	static C(Other: UObject): JavascriptWindow;
}

declare type EJavascriptHttpRequestStatus = 'NotStarted' | 'Processing' | 'Failed' | 'Succeeded';
declare var EJavascriptHttpRequestStatus : { NotStarted:'NotStarted',Processing:'Processing',Failed:'Failed',Succeeded:'Succeeded', };
declare class JavascriptHttpRequest extends UObject { 
	OnComplete: UnrealEngineDelegate<(successful: boolean) => void>;
	OnProgress: UnrealEngineDelegate<(sent: number, recv: number) => void>;
	static Load(ResourceName: string): JavascriptHttpRequest;
	static Find(Outer: UObject, ResourceName: string): JavascriptHttpRequest;
	static GetDefaultObject(): JavascriptHttpRequest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptHttpRequest;
	SetVerb(Verb: string): void;
	SetURL(URL: string): void;
	SetHeader(HeaderName: string,HeaderValue: string): void;
	SetContentFromMemory(): void;
	SetContentAsString(ContentString: string): void;
	ProcessRequest(): boolean;
	GetVerb(): string;
	GetStatus(): EJavascriptHttpRequestStatus;
	GetResponseCode(): number;
	GetElapsedTime(): number;
	GetContentToMemory(): void;
	GetContentLength(): number;
	GetContentAsString(): string;
	CancelRequest(): void;
	static C(Other: UObject): JavascriptHttpRequest;
}

declare class JavascriptWebSocket extends UObject { 
	OnReceived: UnrealEngineMulticastDelegate<() => void>;
	OnConnected: UnrealEngineMulticastDelegate<() => void>;
	OnError: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): JavascriptWebSocket;
	static Find(Outer: UObject, ResourceName: string): JavascriptWebSocket;
	static GetDefaultObject(): JavascriptWebSocket;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWebSocket;
	Tick(): void;
	SendMemory(NumBytes: number): void;
	RemoteEndPoint(): string;
	LocalEndPoint(): string;
	GetReceivedBytes(): number;
	Flush(): void;
	Dispose(): void;
	CopyBuffer(): void;
	static Connect(Endpoint: string): JavascriptWebSocket;
	static C(Other: UObject): JavascriptWebSocket;
}

declare class JavascriptWebSocketServer extends UObject { 
	OnConnected: UnrealEngineMulticastDelegate<(WebSocket: JavascriptWebSocket) => void>;
	Connections: JavascriptWebSocket[];
	static Load(ResourceName: string): JavascriptWebSocketServer;
	static Find(Outer: UObject, ResourceName: string): JavascriptWebSocketServer;
	static GetDefaultObject(): JavascriptWebSocketServer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWebSocketServer;
	Tick(): void;
	Info(): string;
	Dispose(): void;
	static Create(Port: number): JavascriptWebSocketServer;
	static C(Other: UObject): JavascriptWebSocketServer;
}

declare class TcpMessagingSettings extends UObject { 
	EnableTransport: boolean;
	ListenEndpoint: string;
	ConnectToEndpoints: string[];
	ConnectionRetryDelay: number;
	static Load(ResourceName: string): TcpMessagingSettings;
	static Find(Outer: UObject, ResourceName: string): TcpMessagingSettings;
	static GetDefaultObject(): TcpMessagingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TcpMessagingSettings;
	static C(Other: UObject): TcpMessagingSettings;
}

declare class UdpMessagingSettings extends UObject { 
	EnableTransport: boolean;
	UnicastEndpoint: string;
	MulticastEndpoint: string;
	MulticastTimeToLive: number;
	StaticEndpoints: string[];
	EnableTunnel: boolean;
	TunnelUnicastEndpoint: string;
	TunnelMulticastEndpoint: string;
	RemoteTunnelEndpoints: string[];
	static Load(ResourceName: string): UdpMessagingSettings;
	static Find(Outer: UObject, ResourceName: string): UdpMessagingSettings;
	static GetDefaultObject(): UdpMessagingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UdpMessagingSettings;
	static C(Other: UObject): UdpMessagingSettings;
}

declare type ELocationAccuracy = 'LA_ThreeKilometers' | 'LA_OneKilometer' | 'LA_HundredMeters' | 'LA_TenMeters' | 'LA_Best' | 'LA_Navigation';
declare var ELocationAccuracy : { LA_ThreeKilometers:'LA_ThreeKilometers',LA_OneKilometer:'LA_OneKilometer',LA_HundredMeters:'LA_HundredMeters',LA_TenMeters:'LA_TenMeters',LA_Best:'LA_Best',LA_Navigation:'LA_Navigation', };
declare class LocationServicesData { 
	Timestamp: number;
	Longitude: number;
	Latitude: number;
	HorizontalAccuracy: number;
	VerticalAccuracy: number;
	Altitude: number;
	clone() : LocationServicesData;
	static C(Other: UObject): LocationServicesData;
	static GetLastKnownLocation(): LocationServicesData;
}

declare class LocationServicesImpl extends UObject { 
	OnLocationChanged: UnrealEngineMulticastDelegate<(LocationData: LocationServicesData) => void>;
	static Load(ResourceName: string): LocationServicesImpl;
	static Find(Outer: UObject, ResourceName: string): LocationServicesImpl;
	static GetDefaultObject(): LocationServicesImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServicesImpl;
	static C(Other: UObject): LocationServicesImpl;
}

declare class LocationServices extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LocationServices;
	static Find(Outer: UObject, ResourceName: string): LocationServices;
	static GetDefaultObject(): LocationServices;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServices;
	static StopLocationServices(): boolean;
	static StartLocationServices(): boolean;
	static IsLocationAccuracyAvailable(Accuracy: Accuracy): boolean;
	static InitLocationServices(Accuracy: Accuracy,UpdateFrequency: number,MinDistanceFilter: number): boolean;
	static GetLocationServicesImpl(): LocationServicesImpl;
	static GetLastKnownLocation(): LocationServicesData;
	static AreLocationServicesEnabled(): boolean;
	static C(Other: UObject): LocationServices;
}

declare class TireConfigMaterialFriction { 
	PhysicalMaterial: PhysicalMaterial;
	FrictionScale: number;
	clone() : TireConfigMaterialFriction;
	static C(Other: UObject): TireConfigMaterialFriction;
}

declare class TireConfig extends DataAsset { 
	FrictionScale: number;
	TireFrictionScales: TireConfigMaterialFriction[];
	static Load(ResourceName: string): TireConfig;
	static Find(Outer: UObject, ResourceName: string): TireConfig;
	static GetDefaultObject(): TireConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireConfig;
	static C(Other: UObject): TireConfig;
}

declare class VehicleWheel extends UObject { 
	CollisionMesh: StaticMesh;
	bDontCreateShape: boolean;
	bAutoAdjustCollisionSize: boolean;
	Offset: Vector;
	ShapeRadius: number;
	ShapeWidth: number;
	Mass: number;
	DampingRate: number;
	SteerAngle: number;
	bAffectedByHandbrake: boolean;
	TireType: TireType;
	TireConfig: TireConfig;
	LatStiffMaxLoad: number;
	LatStiffValue: number;
	LongStiffValue: number;
	SuspensionForceOffset: number;
	SuspensionMaxRaise: number;
	SuspensionMaxDrop: number;
	SuspensionNaturalFrequency: number;
	SuspensionDampingRatio: number;
	MaxBrakeTorque: number;
	MaxHandBrakeTorque: number;
	VehicleSim: WheeledVehicleMovementComponent;
	WheelIndex: number;
	DebugLongSlip: number;
	DebugLatSlip: number;
	DebugNormalizedTireLoad: number;
	DebugWheelTorque: number;
	DebugLongForce: number;
	DebugLatForce: number;
	Location: Vector;
	OldLocation: Vector;
	Velocity: Vector;
	static Load(ResourceName: string): VehicleWheel;
	static Find(Outer: UObject, ResourceName: string): VehicleWheel;
	static GetDefaultObject(): VehicleWheel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleWheel;
	GetSuspensionOffset(): number;
	GetSteerAngle(): number;
	GetRotationAngle(): number;
	static C(Other: UObject): VehicleWheel;
}

declare class WheelSetup { 
	WheelClass: UnrealEngineClass;
	BoneName: string;
	AdditionalOffset: Vector;
	clone() : WheelSetup;
	static C(Other: UObject): WheelSetup;
}

declare class ReplicatedVehicleState { 
	SteeringInput: number;
	ThrottleInput: number;
	BrakeInput: number;
	HandbrakeInput: number;
	CurrentGear: number;
	clone() : ReplicatedVehicleState;
	static C(Other: UObject): ReplicatedVehicleState;
}

declare class VehicleInputRate { 
	RiseRate: number;
	FallRate: number;
	clone() : VehicleInputRate;
	static C(Other: UObject): VehicleInputRate;
}

declare class WheeledVehicleMovementComponent extends PawnMovementComponent { 
	bDeprecatedSpringOffsetMode: boolean;
	WheelSetups: WheelSetup[];
	Mass: number;
	DragCoefficient: number;
	ChassisWidth: number;
	ChassisHeight: number;
	bReverseAsBrake: boolean;
	DragArea: number;
	EstimatedMaxEngineSpeed: number;
	MaxEngineRPM: number;
	DebugDragMagnitude: number;
	InertiaTensorScale: Vector;
	MinNormalizedTireLoad: number;
	MinNormalizedTireLoadFiltered: number;
	MaxNormalizedTireLoad: number;
	MaxNormalizedTireLoadFiltered: number;
	ThresholdLongitudinalSpeed: number;
	LowForwardSpeedSubStepCount: number;
	HighForwardSpeedSubStepCount: number;
	Wheels: VehicleWheel[];
	bUseRVOAvoidance: boolean;
	RVOAvoidanceRadius: number;
	RVOAvoidanceHeight: number;
	AvoidanceConsiderationRadius: number;
	RVOSteeringStep: number;
	RVOThrottleStep: number;
	AvoidanceUID: number;
	AvoidanceGroup: NavAvoidanceMask;
	GroupsToAvoid: NavAvoidanceMask;
	GroupsToIgnore: NavAvoidanceMask;
	AvoidanceWeight: number;
	PendingLaunchVelocity: Vector;
	ReplicatedState: ReplicatedVehicleState;
	RawSteeringInput: number;
	RawThrottleInput: number;
	RawBrakeInput: number;
	bRawHandbrakeInput: boolean;
	bRawGearUpInput: boolean;
	bRawGearDownInput: boolean;
	SteeringInput: number;
	ThrottleInput: number;
	BrakeInput: number;
	HandbrakeInput: number;
	IdleBrakeInput: number;
	StopThreshold: number;
	WrongDirectionThreshold: number;
	ThrottleInputRate: VehicleInputRate;
	BrakeInputRate: VehicleInputRate;
	HandbrakeInputRate: VehicleInputRate;
	SteeringInputRate: VehicleInputRate;
	bWasAvoidanceUpdated: boolean;
	static Load(ResourceName: string): WheeledVehicleMovementComponent;
	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent;
	static GetDefaultObject(): WheeledVehicleMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent;
	SetUseAutoGears(bUseAuto: boolean): void;
	SetThrottleInput(Throttle: number): void;
	SetTargetGear(GearNum: number,bImmediate: boolean): void;
	SetSteeringInput(Steering: number): void;
	SetHandbrakeInput(bNewHandbrake: boolean): void;
	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
	SetGroupsToIgnore(GroupFlags: number): void;
	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
	SetGroupsToAvoid(GroupFlags: number): void;
	SetGearUp(bNewGearUp: boolean): void;
	SetGearDown(bNewGearDown: boolean): void;
	SetBrakeInput(Brake: number): void;
	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
	SetAvoidanceGroup(GroupFlags: number): void;
	SetAvoidanceEnabled(bEnable: boolean): void;
	ServerUpdateState(InSteeringInput: number,InThrottleInput: number,InBrakeInput: number,InHandbrakeInput: number,CurrentGear: number): void;
	GetUseAutoGears(): boolean;
	GetTargetGear(): number;
	GetForwardSpeed(): number;
	GetEngineRotationSpeed(): number;
	GetEngineMaxRotationSpeed(): number;
	GetCurrentGear(): number;
	static C(Other: UObject): WheeledVehicleMovementComponent;
}

declare class WheeledVehicle extends Pawn { 
	Mesh: SkeletalMeshComponent;
	VehicleMovement: WheeledVehicleMovementComponent;
	static GetDefaultObject(): WheeledVehicle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicle;
	static C(Other: UObject): WheeledVehicle;
}

declare class VehicleAnimInstance extends AnimInstance { 
	WheeledVehicleMovementComponent: WheeledVehicleMovementComponent;
	static Load(ResourceName: string): VehicleAnimInstance;
	static Find(Outer: UObject, ResourceName: string): VehicleAnimInstance;
	static GetDefaultObject(): VehicleAnimInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleAnimInstance;
	GetVehicle(): WheeledVehicle;
	static C(Other: UObject): VehicleAnimInstance;
}

declare class SimpleWheeledVehicleMovementComponent extends WheeledVehicleMovementComponent { 
	static Load(ResourceName: string): SimpleWheeledVehicleMovementComponent;
	static Find(Outer: UObject, ResourceName: string): SimpleWheeledVehicleMovementComponent;
	static GetDefaultObject(): SimpleWheeledVehicleMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleWheeledVehicleMovementComponent;
	SetSteerAngle(SteerAngle: number,WheelIndex: number): void;
	SetDriveTorque(DriveTorque: number,WheelIndex: number): void;
	SetBrakeTorque(BrakeTorque: number,WheelIndex: number): void;
	static C(Other: UObject): SimpleWheeledVehicleMovementComponent;
}

declare class VehicleEngineData { 
	TorqueCurve: RuntimeFloatCurve;
	MaxRPM: number;
	MOI: number;
	DampingRateFullThrottle: number;
	DampingRateZeroThrottleClutchEngaged: number;
	DampingRateZeroThrottleClutchDisengaged: number;
	clone() : VehicleEngineData;
	static C(Other: UObject): VehicleEngineData;
}

declare type EVehicleDifferential4W = 'LimitedSlip_4W' | 'LimitedSlip_FrontDrive' | 'LimitedSlip_RearDrive' | 'Open_4W' | 'Open_FrontDrive' | 'Open_RearDrive';
declare var EVehicleDifferential4W : { LimitedSlip_4W:'LimitedSlip_4W',LimitedSlip_FrontDrive:'LimitedSlip_FrontDrive',LimitedSlip_RearDrive:'LimitedSlip_RearDrive',Open_4W:'Open_4W',Open_FrontDrive:'Open_FrontDrive',Open_RearDrive:'Open_RearDrive', };
declare class VehicleDifferential4WData { 
	DifferentialType: EVehicleDifferential4W;
	FrontRearSplit: number;
	FrontLeftRightSplit: number;
	RearLeftRightSplit: number;
	CentreBias: number;
	FrontBias: number;
	RearBias: number;
	clone() : VehicleDifferential4WData;
	static C(Other: UObject): VehicleDifferential4WData;
}

declare class VehicleGearData { 
	Ratio: number;
	DownRatio: number;
	UpRatio: number;
	clone() : VehicleGearData;
	static C(Other: UObject): VehicleGearData;
}

declare class VehicleTransmissionData { 
	bUseGearAutoBox: boolean;
	GearSwitchTime: number;
	GearAutoBoxLatency: number;
	FinalRatio: number;
	ForwardGears: VehicleGearData[];
	ReverseGearRatio: number;
	NeutralGearUpRatio: number;
	ClutchStrength: number;
	clone() : VehicleTransmissionData;
	static C(Other: UObject): VehicleTransmissionData;
}

declare class WheeledVehicleMovementComponent4W extends WheeledVehicleMovementComponent { 
	EngineSetup: VehicleEngineData;
	DifferentialSetup: VehicleDifferential4WData;
	TransmissionSetup: VehicleTransmissionData;
	SteeringCurve: RuntimeFloatCurve;
	AckermannAccuracy: number;
	static Load(ResourceName: string): WheeledVehicleMovementComponent4W;
	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent4W;
	static GetDefaultObject(): WheeledVehicleMovementComponent4W;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent4W;
	static C(Other: UObject): WheeledVehicleMovementComponent4W;
}

declare class AnimNode_WheelHandler extends AnimNode_SkeletalControlBase { 
	clone() : AnimNode_WheelHandler;
	static C(Other: UObject): AnimNode_WheelHandler;
}

declare class AnimGraphNode_WheelHandler extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_WheelHandler;
	static Load(ResourceName: string): AnimGraphNode_WheelHandler;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_WheelHandler;
	static GetDefaultObject(): AnimGraphNode_WheelHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_WheelHandler;
	static C(Other: UObject): AnimGraphNode_WheelHandler;
}

declare class FlipbookEditorSettings extends UObject { 
	BackgroundColor: Color;
	bShowGridByDefault: boolean;
	static Load(ResourceName: string): FlipbookEditorSettings;
	static Find(Outer: UObject, ResourceName: string): FlipbookEditorSettings;
	static GetDefaultObject(): FlipbookEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FlipbookEditorSettings;
	static C(Other: UObject): FlipbookEditorSettings;
}

declare type ESpriteExtractMode = 'Auto' | 'Grid';
declare var ESpriteExtractMode : { Auto:'Auto',Grid:'Grid', };
declare class PaperExtractSpritesSettings extends UObject { 
	SpriteExtractMode: SpriteExtractMode;
	OutlineColor: LinearColor;
	ViewportTextureTint: LinearColor;
	BackgroundColor: LinearColor;
	NamingTemplate: string;
	NamingStartIndex: number;
	static Load(ResourceName: string): PaperExtractSpritesSettings;
	static Find(Outer: UObject, ResourceName: string): PaperExtractSpritesSettings;
	static GetDefaultObject(): PaperExtractSpritesSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpritesSettings;
	static C(Other: UObject): PaperExtractSpritesSettings;
}

declare class PaperExtractSpriteGridSettings extends UObject { 
	CellWidth: number;
	CellHeight: number;
	NumCellsX: number;
	NumCellsY: number;
	MarginX: number;
	MarginY: number;
	SpacingX: number;
	SpacingY: number;
	static Load(ResourceName: string): PaperExtractSpriteGridSettings;
	static Find(Outer: UObject, ResourceName: string): PaperExtractSpriteGridSettings;
	static GetDefaultObject(): PaperExtractSpriteGridSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpriteGridSettings;
	static C(Other: UObject): PaperExtractSpriteGridSettings;
}

declare class PaperFlipbookActorFactory extends ActorFactory { 
	static Load(ResourceName: string): PaperFlipbookActorFactory;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookActorFactory;
	static GetDefaultObject(): PaperFlipbookActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookActorFactory;
	static C(Other: UObject): PaperFlipbookActorFactory;
}

declare class PaperFlipbookFactory extends Factory { 
	static Load(ResourceName: string): PaperFlipbookFactory;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookFactory;
	static GetDefaultObject(): PaperFlipbookFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookFactory;
	static C(Other: UObject): PaperFlipbookFactory;
}

declare class PaperImporterSettings extends UObject { 
	bPickBestMaterialWhenCreatingSprites: boolean;
	bPickBestMaterialWhenCreatingTileMaps: boolean;
	bAnalysisCanUseOpaque: boolean;
	DefaultPixelsPerUnrealUnit: number;
	NormalMapTextureSuffixes: string[];
	BaseMapTextureSuffixes: string[];
	DefaultSpriteTextureGroup: TextureGroup;
	bOverrideTextureCompression: boolean;
	DefaultSpriteTextureCompression: TextureCompressionSettings;
	UnlitDefaultMaskedMaterialName: StringAssetReference;
	UnlitDefaultTranslucentMaterialName: StringAssetReference;
	UnlitDefaultOpaqueMaterialName: StringAssetReference;
	LitDefaultMaskedMaterialName: StringAssetReference;
	LitDefaultTranslucentMaterialName: StringAssetReference;
	LitDefaultOpaqueMaterialName: StringAssetReference;
	static Load(ResourceName: string): PaperImporterSettings;
	static Find(Outer: UObject, ResourceName: string): PaperImporterSettings;
	static GetDefaultObject(): PaperImporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperImporterSettings;
	static C(Other: UObject): PaperImporterSettings;
}

declare class PaperSpriteActorFactory extends ActorFactory { 
	static Load(ResourceName: string): PaperSpriteActorFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteActorFactory;
	static GetDefaultObject(): PaperSpriteActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteActorFactory;
	static C(Other: UObject): PaperSpriteActorFactory;
}

declare class PaperSpriteAtlasFactory extends Factory { 
	static Load(ResourceName: string): PaperSpriteAtlasFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteAtlasFactory;
	static GetDefaultObject(): PaperSpriteAtlasFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteAtlasFactory;
	static C(Other: UObject): PaperSpriteAtlasFactory;
}

declare class PaperSpriteFactory extends Factory { 
	static Load(ResourceName: string): PaperSpriteFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteFactory;
	static GetDefaultObject(): PaperSpriteFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteFactory;
	static C(Other: UObject): PaperSpriteFactory;
}

declare class PaperSpriteThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): PaperSpriteThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteThumbnailRenderer;
	static GetDefaultObject(): PaperSpriteThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteThumbnailRenderer;
	static C(Other: UObject): PaperSpriteThumbnailRenderer;
}

declare class PaperFlipbookThumbnailRenderer extends PaperSpriteThumbnailRenderer { 
	static Load(ResourceName: string): PaperFlipbookThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookThumbnailRenderer;
	static GetDefaultObject(): PaperFlipbookThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookThumbnailRenderer;
	static C(Other: UObject): PaperFlipbookThumbnailRenderer;
}

declare class PaperTileMapFactory extends Factory { 
	static Load(ResourceName: string): PaperTileMapFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTileMapFactory;
	static GetDefaultObject(): PaperTileMapFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapFactory;
	static C(Other: UObject): PaperTileMapFactory;
}

declare class PaperTileMapPromotionFactory extends Factory { 
	AssetToRename: PaperTileMap;
	static Load(ResourceName: string): PaperTileMapPromotionFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTileMapPromotionFactory;
	static GetDefaultObject(): PaperTileMapPromotionFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapPromotionFactory;
	static C(Other: UObject): PaperTileMapPromotionFactory;
}

declare class PaperTileSetFactory extends Factory { 
	static Load(ResourceName: string): PaperTileSetFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTileSetFactory;
	static GetDefaultObject(): PaperTileSetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileSetFactory;
	static C(Other: UObject): PaperTileSetFactory;
}

declare class PaperTileSetThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): PaperTileSetThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PaperTileSetThumbnailRenderer;
	static GetDefaultObject(): PaperTileSetThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileSetThumbnailRenderer;
	static C(Other: UObject): PaperTileSetThumbnailRenderer;
}

declare class SpriteEditorSettings extends UObject { 
	BackgroundColor: Color;
	bShowGridByDefault: boolean;
	static Load(ResourceName: string): SpriteEditorSettings;
	static Find(Outer: UObject, ResourceName: string): SpriteEditorSettings;
	static GetDefaultObject(): SpriteEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpriteEditorSettings;
	static C(Other: UObject): SpriteEditorSettings;
}

declare class TerrainSplineActorFactory extends ActorFactory { 
	static Load(ResourceName: string): TerrainSplineActorFactory;
	static Find(Outer: UObject, ResourceName: string): TerrainSplineActorFactory;
	static GetDefaultObject(): TerrainSplineActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TerrainSplineActorFactory;
	static C(Other: UObject): TerrainSplineActorFactory;
}

declare class TileMapActorFactory extends ActorFactory { 
	static Load(ResourceName: string): TileMapActorFactory;
	static Find(Outer: UObject, ResourceName: string): TileMapActorFactory;
	static GetDefaultObject(): TileMapActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapActorFactory;
	static C(Other: UObject): TileMapActorFactory;
}

declare class TileSetImportMapping { 
	SourceName: string;
	ImportedTileSet: any;
	ImportedTexture: any;
	clone() : TileSetImportMapping;
	static C(Other: UObject): TileSetImportMapping;
}

declare class TileMapAssetImportData extends AssetImportData { 
	TileSetMap: TileSetImportMapping[];
	static Load(ResourceName: string): TileMapAssetImportData;
	static Find(Outer: UObject, ResourceName: string): TileMapAssetImportData;
	static GetDefaultObject(): TileMapAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapAssetImportData;
	static C(Other: UObject): TileMapAssetImportData;
}

declare class TileMapEditorSettings extends UObject { 
	DefaultBackgroundColor: Color;
	bShowGridByDefault: boolean;
	static Load(ResourceName: string): TileMapEditorSettings;
	static Find(Outer: UObject, ResourceName: string): TileMapEditorSettings;
	static GetDefaultObject(): TileMapEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapEditorSettings;
	static C(Other: UObject): TileMapEditorSettings;
}

declare class TileSetEditorSettings extends UObject { 
	DefaultBackgroundColor: Color;
	bShowGridByDefault: boolean;
	ExtrusionAmount: number;
	bPadToPowerOf2: boolean;
	bFillWithTransparentBlack: boolean;
	static Load(ResourceName: string): TileSetEditorSettings;
	static Find(Outer: UObject, ResourceName: string): TileSetEditorSettings;
	static GetDefaultObject(): TileSetEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileSetEditorSettings;
	static C(Other: UObject): TileSetEditorSettings;
}

declare class TileSheetPaddingFactory extends Factory { 
	SourceTileSet: PaperTileSet;
	ExtrusionAmount: number;
	bPadToPowerOf2: boolean;
	bFillWithTransparentBlack: boolean;
	static Load(ResourceName: string): TileSheetPaddingFactory;
	static Find(Outer: UObject, ResourceName: string): TileSheetPaddingFactory;
	static GetDefaultObject(): TileSheetPaddingFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileSheetPaddingFactory;
	static C(Other: UObject): TileSheetPaddingFactory;
}

declare class InternationalizationExportSettings extends UObject { 
	CulturesToGenerate: string[];
	CommandletClass: string;
	SourcePath: string;
	DestinationPath: string;
	PortableObjectName: string;
	ManifestName: string;
	ArchiveName: string;
	bExportLoc: boolean;
	bImportLoc: boolean;
	bUseCultureDirectory: boolean;
	static Load(ResourceName: string): InternationalizationExportSettings;
	static Find(Outer: UObject, ResourceName: string): InternationalizationExportSettings;
	static GetDefaultObject(): InternationalizationExportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationExportSettings;
	static C(Other: UObject): InternationalizationExportSettings;
}

declare class TranslationPickerSettings extends UObject { 
	bSubmitTranslationPickerChangesToLocalizationService: boolean;
	static Load(ResourceName: string): TranslationPickerSettings;
	static Find(Outer: UObject, ResourceName: string): TranslationPickerSettings;
	static GetDefaultObject(): TranslationPickerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationPickerSettings;
	static C(Other: UObject): TranslationPickerSettings;
}

declare class TranslationChange { 
	Version: string;
	DateAndTime: DateTime;
	Source: string;
	Translation: string;
	clone() : TranslationChange;
	static C(Other: UObject): TranslationChange;
}

declare class TranslationContextInfo { 
	Key: string;
	Context: string;
	Changes: TranslationChange[];
	clone() : TranslationContextInfo;
	static C(Other: UObject): TranslationContextInfo;
}

declare class TranslationUnit extends UObject { 
	Namespace: string;
	Key: string;
	Source: string;
	Translation: string;
	Contexts: TranslationContextInfo[];
	HasBeenReviewed: boolean;
	TranslationBeforeImport: string;
	LocresPath: string;
	static Load(ResourceName: string): TranslationUnit;
	static Find(Outer: UObject, ResourceName: string): TranslationUnit;
	static GetDefaultObject(): TranslationUnit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationUnit;
	static C(Other: UObject): TranslationUnit;
}

declare class PixelInspectorView extends UObject { 
	FinalColor: LinearColor;
	SceneColor: LinearColor;
	Luminance: number;
	HdrColor: LinearColor;
	Normal: Vector;
	PerObjectGBufferData: number;
	Metallic: number;
	Specular: number;
	Roughness: number;
	MaterialShadingModel: EMaterialShadingModel;
	SelectiveOutputMask: number;
	BaseColor: LinearColor;
	IndirectIrradiance: number;
	AmbientOcclusion: number;
	SubSurfaceColor: LinearColor;
	SubsurfaceProfile: Vector;
	Opacity: number;
	ClearCoat: number;
	ClearCoatRoughness: number;
	WorldNormal: Vector;
	BackLit: number;
	Cloth: number;
	EyeTangent: Vector;
	IrisMask: number;
	IrisDistance: number;
	static Load(ResourceName: string): PixelInspectorView;
	static Find(Outer: UObject, ResourceName: string): PixelInspectorView;
	static GetDefaultObject(): PixelInspectorView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PixelInspectorView;
	static C(Other: UObject): PixelInspectorView;
}

declare class PaperSpriteSheet extends UObject { 
	SpriteNames: string[];
	Sprites: any[];
	TextureName: string;
	Texture: Texture2D;
	NormalMapTextureName: string;
	NormalMapTexture: Texture2D;
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): PaperSpriteSheet;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteSheet;
	static GetDefaultObject(): PaperSpriteSheet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteSheet;
	static C(Other: UObject): PaperSpriteSheet;
}

declare class PaperSpriteSheetImportFactory extends Factory { 
	static Load(ResourceName: string): PaperSpriteSheetImportFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteSheetImportFactory;
	static GetDefaultObject(): PaperSpriteSheetImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteSheetImportFactory;
	static C(Other: UObject): PaperSpriteSheetImportFactory;
}

declare class PaperSpriteSheetReimportFactory extends PaperSpriteSheetImportFactory { 
	static Load(ResourceName: string): PaperSpriteSheetReimportFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteSheetReimportFactory;
	static GetDefaultObject(): PaperSpriteSheetReimportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteSheetReimportFactory;
	static C(Other: UObject): PaperSpriteSheetReimportFactory;
}

declare class PaperTiledImporterFactory extends Factory { 
	static Load(ResourceName: string): PaperTiledImporterFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTiledImporterFactory;
	static GetDefaultObject(): PaperTiledImporterFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTiledImporterFactory;
	static C(Other: UObject): PaperTiledImporterFactory;
}

declare class LightPropagationVolumeBlendableFactory extends Factory { 
	static Load(ResourceName: string): LightPropagationVolumeBlendableFactory;
	static Find(Outer: UObject, ResourceName: string): LightPropagationVolumeBlendableFactory;
	static GetDefaultObject(): LightPropagationVolumeBlendableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightPropagationVolumeBlendableFactory;
	static C(Other: UObject): LightPropagationVolumeBlendableFactory;
}

declare class MyPluginStruct { 
	TestString: string;
	clone() : MyPluginStruct;
	static C(Other: UObject): MyPluginStruct;
}

declare class MyPluginObject extends UObject { 
	MyStruct: MyPluginStruct;
	static Load(ResourceName: string): MyPluginObject;
	static Find(Outer: UObject, ResourceName: string): MyPluginObject;
	static GetDefaultObject(): MyPluginObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MyPluginObject;
	static C(Other: UObject): MyPluginObject;
}

declare class PluginMetadataObject extends UObject { 
	Version: number;
	VersionName: string;
	FriendlyName: string;
	Description: string;
	Category: string;
	CreatedBy: string;
	CreatedByURL: string;
	DocsURL: string;
	MarketplaceURL: string;
	SupportURL: string;
	bCanContainContent: boolean;
	bIsBetaVersion: boolean;
	static Load(ResourceName: string): PluginMetadataObject;
	static Find(Outer: UObject, ResourceName: string): PluginMetadataObject;
	static GetDefaultObject(): PluginMetadataObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginMetadataObject;
	static C(Other: UObject): PluginMetadataObject;
}

declare class SpeedTreeImportFactory extends Factory { 
	static Load(ResourceName: string): SpeedTreeImportFactory;
	static Find(Outer: UObject, ResourceName: string): SpeedTreeImportFactory;
	static GetDefaultObject(): SpeedTreeImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpeedTreeImportFactory;
	static C(Other: UObject): SpeedTreeImportFactory;
}

declare class ReimportSpeedTreeFactory extends SpeedTreeImportFactory { 
	static Load(ResourceName: string): ReimportSpeedTreeFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSpeedTreeFactory;
	static GetDefaultObject(): ReimportSpeedTreeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSpeedTreeFactory;
	static C(Other: UObject): ReimportSpeedTreeFactory;
}

declare type ETutorialContent = 'None' | 'Text' | 'UDNExcerpt' | 'RichText';
declare var ETutorialContent : { None:'None',Text:'Text',UDNExcerpt:'UDNExcerpt',RichText:'RichText', };
declare class TutorialContent { 
	Type: ETutorialContent;
	Content: string;
	ExcerptName: string;
	Text: string;
	clone() : TutorialContent;
	static C(Other: UObject): TutorialContent;
}

declare type ETutorialAnchorIdentifier = 'None' | 'NamedWidget' | 'Asset';
declare var ETutorialAnchorIdentifier : { None:'None',NamedWidget:'NamedWidget',Asset:'Asset', };
declare class TutorialContentAnchor { 
	Type: ETutorialAnchorIdentifier;
	WrapperIdentifier: string;
	Asset: StringAssetReference;
	bDrawHighlight: boolean;
	TabToFocusOrOpen: string;
	FriendlyName: string;
	GUIDString: string;
	OuterName: string;
	clone() : TutorialContentAnchor;
	static C(Other: UObject): TutorialContentAnchor;
}

declare class TutorialWidgetContent { 
	Content: TutorialContent;
	WidgetAnchor: TutorialContentAnchor;
	HorizontalAlignment: EHorizontalAlignment;
	VerticalAlignment: EVerticalAlignment;
	Offset: Vector2D;
	ContentWidth: number;
	bAutoFocus: boolean;
	clone() : TutorialWidgetContent;
	static C(Other: UObject): TutorialWidgetContent;
}

declare class TutorialStage { 
	Name: string;
	Content: TutorialContent;
	WidgetContent: TutorialWidgetContent[];
	NextButtonText: string;
	BackButtonText: string;
	PlatformsToTest: string[];
	bInvertPlatformTest: boolean;
	clone() : TutorialStage;
	static C(Other: UObject): TutorialStage;
}

declare class EditorTutorial extends UObject { 
	Title: string;
	SortOrder: number;
	Icon: string;
	Texture: Texture2D;
	Category: string;
	SummaryContent: TutorialContent;
	Stages: TutorialStage[];
	PreviousTutorial: StringClassReference;
	NextTutorial: StringClassReference;
	bIsStandalone: boolean;
	AssetToUse: StringAssetReference;
	ImportPath: string;
	bHideInBrowser: boolean;
	SearchTags: string;
	static Load(ResourceName: string): EditorTutorial;
	static Find(Outer: UObject, ResourceName: string): EditorTutorial;
	static GetDefaultObject(): EditorTutorial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorTutorial;
	static SetEngineFolderVisibilty(bNewVisibility: boolean): void;
	static OpenAsset(Asset: UObject): void;
	OnTutorialStageStarted(StageName: string): void;
	OnTutorialStageEnded(StageName: string): void;
	OnTutorialLaunched(): void;
	OnTutorialClosed(): void;
	static GoToPreviousTutorialStage(): void;
	static GoToNextTutorialStage(): void;
	static GetEngineFolderVisibilty(): boolean;
	GetActorReference(PathToActor: string): Actor;
	static BeginTutorial(TutorialToStart: EditorTutorial,bRestart: boolean): void;
	static C(Other: UObject): EditorTutorial;
}

declare class EditorTutorialFactory extends Factory { 
	static Load(ResourceName: string): EditorTutorialFactory;
	static Find(Outer: UObject, ResourceName: string): EditorTutorialFactory;
	static GetDefaultObject(): EditorTutorialFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorTutorialFactory;
	static C(Other: UObject): EditorTutorialFactory;
}

declare class EditorTutorialImportFactory extends Factory { 
	static Load(ResourceName: string): EditorTutorialImportFactory;
	static Find(Outer: UObject, ResourceName: string): EditorTutorialImportFactory;
	static GetDefaultObject(): EditorTutorialImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorTutorialImportFactory;
	static C(Other: UObject): EditorTutorialImportFactory;
}

declare class TutorialCategory { 
	Identifier: string;
	Title: string;
	SortOrder: number;
	Description: string;
	Icon: string;
	Texture: StringAssetReference;
	clone() : TutorialCategory;
	static C(Other: UObject): TutorialCategory;
}

declare class TutorialContext { 
	Context: string;
	BrowserFilter: string;
	AttractTutorial: StringClassReference;
	LaunchTutorial: StringClassReference;
	clone() : TutorialContext;
	static C(Other: UObject): TutorialContext;
}

declare class EditorTutorialSettings extends UObject { 
	bDisableAllTutorialAlerts: boolean;
	Categories: TutorialCategory[];
	StartupTutorial: StringClassReference;
	TutorialContexts: TutorialContext[];
	static Load(ResourceName: string): EditorTutorialSettings;
	static Find(Outer: UObject, ResourceName: string): EditorTutorialSettings;
	static GetDefaultObject(): EditorTutorialSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorTutorialSettings;
	static C(Other: UObject): EditorTutorialSettings;
}

declare class TutorialSettings extends UObject { 
	Categories: TutorialCategory[];
	StartupTutorial: StringClassReference;
	static Load(ResourceName: string): TutorialSettings;
	static Find(Outer: UObject, ResourceName: string): TutorialSettings;
	static GetDefaultObject(): TutorialSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TutorialSettings;
	static C(Other: UObject): TutorialSettings;
}

declare class TutorialProgress { 
	Tutorial: StringClassReference;
	CurrentStage: number;
	bUserDismissed: boolean;
	clone() : TutorialProgress;
	static C(Other: UObject): TutorialProgress;
}

declare class TutorialStateSettings extends UObject { 
	TutorialsProgress: TutorialProgress[];
	bDismissedAllTutorials: boolean;
	static Load(ResourceName: string): TutorialStateSettings;
	static Find(Outer: UObject, ResourceName: string): TutorialStateSettings;
	static GetDefaultObject(): TutorialStateSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TutorialStateSettings;
	static C(Other: UObject): TutorialStateSettings;
}

declare type ESearchEngine = 'Google' | 'Bing';
declare var ESearchEngine : { Google:'Google',Bing:'Bing', };
declare class SuperSearchSettings extends DeveloperSettings { 
	SearchEngine: SearchEngine;
	static Load(ResourceName: string): SuperSearchSettings;
	static Find(Outer: UObject, ResourceName: string): SuperSearchSettings;
	static GetDefaultObject(): SuperSearchSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SuperSearchSettings;
	static C(Other: UObject): SuperSearchSettings;
}

declare class GeometryCacheTrack extends UObject { 
	static Load(ResourceName: string): GeometryCacheTrack;
	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack;
	static GetDefaultObject(): GeometryCacheTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack;
	static C(Other: UObject): GeometryCacheTrack;
}

declare class GeometryCache extends UObject { 
	AssetImportData: AssetImportData;
	ThumbnailInfo: ThumbnailInfo;
	Materials: MaterialInterface[];
	Tracks: GeometryCacheTrack[];
	static Load(ResourceName: string): GeometryCache;
	static Find(Outer: UObject, ResourceName: string): GeometryCache;
	static GetDefaultObject(): GeometryCache;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCache;
	static C(Other: UObject): GeometryCache;
}

declare class GeometryCacheComponent extends MeshComponent { 
	GeometryCache: GeometryCache;
	bRunning: boolean;
	bLooping: boolean;
	StartTimeOffset: number;
	PlaybackSpeed: number;
	NumTracks: number;
	ElapsedTime: number;
	static Load(ResourceName: string): GeometryCacheComponent;
	static Find(Outer: UObject, ResourceName: string): GeometryCacheComponent;
	static GetDefaultObject(): GeometryCacheComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheComponent;
	Stop(): void;
	SetPlaybackSpeed(NewPlaybackSpeed: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetGeometryCache(NewGeomCache: GeometryCache): boolean;
	PlayReversedFromEnd(): void;
	PlayReversed(): void;
	PlayFromStart(): void;
	Play(): void;
	Pause(): void;
	IsPlayingReversed(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetPlaybackSpeed(): number;
	static C(Other: UObject): GeometryCacheComponent;
}

declare class GeometryCacheActor extends Actor { 
	GeometryCacheComponent: GeometryCacheComponent;
	static GetDefaultObject(): GeometryCacheActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheActor;
	GetGeometryCacheComponent(): GeometryCacheComponent;
	static C(Other: UObject): GeometryCacheActor;
}

declare class GeometryCacheMeshData { 
	clone() : GeometryCacheMeshData;
	static C(Other: UObject): GeometryCacheMeshData;
}

declare class GeometryCacheTrack_FlipbookAnimation extends GeometryCacheTrack { 
	NumMeshSamples: any;
	static Load(ResourceName: string): GeometryCacheTrack_FlipbookAnimation;
	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_FlipbookAnimation;
	static GetDefaultObject(): GeometryCacheTrack_FlipbookAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_FlipbookAnimation;
	AddMeshSample(MeshData: GeometryCacheMeshData,SampleTime: number): void;
	static C(Other: UObject): GeometryCacheTrack_FlipbookAnimation;
}

declare class GeometryCacheTrack_TransformAnimation extends GeometryCacheTrack { 
	static Load(ResourceName: string): GeometryCacheTrack_TransformAnimation;
	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_TransformAnimation;
	static GetDefaultObject(): GeometryCacheTrack_TransformAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_TransformAnimation;
	SetMesh(NewMeshData: GeometryCacheMeshData): void;
	static C(Other: UObject): GeometryCacheTrack_TransformAnimation;
}

declare class GeometryCacheTrack_TransformGroupAnimation extends GeometryCacheTrack { 
	static Load(ResourceName: string): GeometryCacheTrack_TransformGroupAnimation;
	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_TransformGroupAnimation;
	static GetDefaultObject(): GeometryCacheTrack_TransformGroupAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_TransformGroupAnimation;
	SetMesh(NewMeshData: GeometryCacheMeshData): void;
	static C(Other: UObject): GeometryCacheTrack_TransformGroupAnimation;
}

declare class AbcAssetImportData extends AssetImportData { 
	static Load(ResourceName: string): AbcAssetImportData;
	static Find(Outer: UObject, ResourceName: string): AbcAssetImportData;
	static GetDefaultObject(): AbcAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbcAssetImportData;
	static C(Other: UObject): AbcAssetImportData;
}

declare type EAlembicImportType = 'StaticMesh' | 'GeometryCache' | 'Skeletal';
declare var EAlembicImportType : { StaticMesh:'StaticMesh',GeometryCache:'GeometryCache',Skeletal:'Skeletal', };
declare type EAlembicSamplingType = 'PerFrame' | 'PerXFrames' | 'PerTimeStep';
declare var EAlembicSamplingType : { PerFrame:'PerFrame',PerXFrames:'PerXFrames',PerTimeStep:'PerTimeStep', };
declare class AbcSamplingSettings { 
	SamplingType: SamplingType;
	FrameSteps: any;
	TimeSteps: number;
	FrameStart: any;
	FrameEnd: any;
	bSkipEmpty: boolean;
	clone() : AbcSamplingSettings;
	static C(Other: UObject): AbcSamplingSettings;
}

declare class AbcNormalGenerationSettings { 
	bForceOneSmoothingGroupPerObject: boolean;
	HardEdgeAngleThreshold: number;
	bRecomputeNormals: boolean;
	bIgnoreDegenerateTriangles: boolean;
	clone() : AbcNormalGenerationSettings;
	static C(Other: UObject): AbcNormalGenerationSettings;
}

declare type EBaseCalculationType = 'PercentageBased' | 'FixedNumber' | 'EBaseCalculationType_MAX';
declare var EBaseCalculationType : { PercentageBased:'PercentageBased',FixedNumber:'FixedNumber',EBaseCalculationType_MAX:'EBaseCalculationType_MAX', };
declare class AbcCompressionSettings { 
	bMergeMeshes: boolean;
	bBakeMatrixAnimation: boolean;
	BaseCalculationType: BaseCalculationType;
	PercentageOfTotalBases: number;
	MaxNumberOfBases: number;
	MinimumNumberOfVertexInfluencePercentage: number;
	clone() : AbcCompressionSettings;
	static C(Other: UObject): AbcCompressionSettings;
}

declare class AbcMaterialSettings { 
	bCreateMaterials: boolean;
	clone() : AbcMaterialSettings;
	static C(Other: UObject): AbcMaterialSettings;
}

declare class AbcStaticMeshSettings { 
	bMergeMeshes: boolean;
	bPropagateMatrixTransformations: boolean;
	clone() : AbcStaticMeshSettings;
	static C(Other: UObject): AbcStaticMeshSettings;
}

declare type EAbcConversionPreset = 'Maya' | 'Max' | 'Custom';
declare var EAbcConversionPreset : { Maya:'Maya',Max:'Max',Custom:'Custom', };
declare class AbcConversionSettings { 
	Preset: Preset;
	bFlipU: boolean;
	bFlipV: boolean;
	Scale: Vector;
	Rotation: Vector;
	clone() : AbcConversionSettings;
	static C(Other: UObject): AbcConversionSettings;
}

declare class AbcImportSettings extends UObject { 
	ImportType: ImportType;
	SamplingSettings: AbcSamplingSettings;
	NormalGenerationSettings: AbcNormalGenerationSettings;
	CompressionSettings: AbcCompressionSettings;
	MaterialSettings: AbcMaterialSettings;
	StaticMeshSettings: AbcStaticMeshSettings;
	ConversionSettings: AbcConversionSettings;
	static Load(ResourceName: string): AbcImportSettings;
	static Find(Outer: UObject, ResourceName: string): AbcImportSettings;
	static GetDefaultObject(): AbcImportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbcImportSettings;
	static C(Other: UObject): AbcImportSettings;
}

declare class AlembicTestCommandlet extends Commandlet { 
	static Load(ResourceName: string): AlembicTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): AlembicTestCommandlet;
	static GetDefaultObject(): AlembicTestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AlembicTestCommandlet;
	static C(Other: UObject): AlembicTestCommandlet;
}

declare class AlembicImportFactory extends Factory { 
	ImportSettings: AbcImportSettings;
	static Load(ResourceName: string): AlembicImportFactory;
	static Find(Outer: UObject, ResourceName: string): AlembicImportFactory;
	static GetDefaultObject(): AlembicImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AlembicImportFactory;
	static C(Other: UObject): AlembicImportFactory;
}

declare class ActorFactoryGeometryCache extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryGeometryCache;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryGeometryCache;
	static GetDefaultObject(): ActorFactoryGeometryCache;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryGeometryCache;
	static C(Other: UObject): ActorFactoryGeometryCache;
}

declare class GeometryCacheThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): GeometryCacheThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): GeometryCacheThumbnailRenderer;
	static GetDefaultObject(): GeometryCacheThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheThumbnailRenderer;
	static C(Other: UObject): GeometryCacheThumbnailRenderer;
}

declare class WebSocketConnection extends NetConnection { 
	static Load(ResourceName: string): WebSocketConnection;
	static Find(Outer: UObject, ResourceName: string): WebSocketConnection;
	static GetDefaultObject(): WebSocketConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebSocketConnection;
	static C(Other: UObject): WebSocketConnection;
}

declare class WebSocketNetDriver extends NetDriver { 
	WebSocketPort: number;
	static Load(ResourceName: string): WebSocketNetDriver;
	static Find(Outer: UObject, ResourceName: string): WebSocketNetDriver;
	static GetDefaultObject(): WebSocketNetDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebSocketNetDriver;
	static C(Other: UObject): WebSocketNetDriver;
}

declare class JavascriptSlateEdNode { 
	clone() : JavascriptSlateEdNode;
	static C(Other: UObject): JavascriptSlateEdNode;
	AddPinToHoverSet(Pin: JavascriptEdGraphPin): void;
	RemovePinFromHoverSet(Pin: JavascriptEdGraphPin): void;
	static AddPinToHoverSet(InSlateEdNode: JavascriptSlateEdNode,Pin: JavascriptEdGraphPin): void;
	static RemovePinFromHoverSet(InSlateNode: JavascriptSlateEdNode,Pin: JavascriptEdGraphPin): void;
}

declare class JavascriptGraphEdNode extends EdGraphNode { 
	BackgroundColor: SlateColor;
	GraphNode: UObject;
	Bidirectional: boolean;
	PriorityOrder: number;
	static Load(ResourceName: string): JavascriptGraphEdNode;
	static Find(Outer: UObject, ResourceName: string): JavascriptGraphEdNode;
	static GetDefaultObject(): JavascriptGraphEdNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEdNode;
	CreatePin(Dir: EEdGraphPinDirection,PinCategory: string,PinSubCategory: string,PinSubCategoryObject: UObject,bIsArray: boolean,bIsReference: boolean,PinName: string,bIsConst: boolean): JavascriptEdGraphPin;
	static C(Other: UObject): JavascriptGraphEdNode;
}

declare class JavascriptNodeCreator { 
	UNode: JavascriptGraphEdNode;
	clone() : JavascriptNodeCreator;
	static C(Other: UObject): JavascriptNodeCreator;
	Finalize(): {Creator: JavascriptNodeCreator};
	static Finalize(Creator?: JavascriptNodeCreator): {Creator: JavascriptNodeCreator};
}

declare class JavascriptGraphEdGraph extends EdGraph { 
	static Load(ResourceName: string): JavascriptGraphEdGraph;
	static Find(Outer: UObject, ResourceName: string): JavascriptGraphEdGraph;
	static GetDefaultObject(): JavascriptGraphEdGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEdGraph;
	RebuildGenericGraph(): void;
	static C(Other: UObject): JavascriptGraphEdGraph;
	NodeCreator(): JavascriptNodeCreator;
	static NodeCreator(Graph: JavascriptGraphEdGraph): JavascriptNodeCreator;
}

declare class JavascriptConnectionParams { 
	WireColor: LinearColor;
	AssociatedPin1: JavascriptEdGraphPin;
	AssociatedPin2: JavascriptEdGraphPin;
	WireThickness: number;
	bDrawBubbles: boolean;
	bUserFlag1: boolean;
	bUserFlag2: boolean;
	StartDirection: EEdGraphPinDirection;
	EndDirection: EEdGraphPinDirection;
	clone() : JavascriptConnectionParams;
	static C(Other: UObject): JavascriptConnectionParams;
}

declare class JavascriptGraphConnectionDrawingPolicyContainer { 
	clone() : JavascriptGraphConnectionDrawingPolicyContainer;
	static C(Other: UObject): JavascriptGraphConnectionDrawingPolicyContainer;
	ApplyHoverDeemphasis(OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Thickness: number,WireColor: LinearColor): void;
	DetermineWiringStyle(OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Params?: JavascriptConnectionParams): {Params: JavascriptConnectionParams};
	DrawConnection(A: Vector2D,B: Vector2D,Params: JavascriptConnectionParams): void;
	DrawSplineWithArrow(StartAnchorPoint: Vector2D,EndAnchorPoint: Vector2D,Params: JavascriptConnectionParams): void;
	GetHorveredPinNum(): number;
	IsContainedHoveredPins(Pin: JavascriptEdGraphPin): boolean;
	MakeRotatedBox(ArrowDrawPos: Vector2D,AngleInRadians: number,WireColor: LinearColor): void;
	static ApplyHoverDeemphasis(Container: JavascriptGraphConnectionDrawingPolicyContainer,OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Thickness: number,WireColor: LinearColor): void;
	static DetermineWiringStyle(Container: JavascriptGraphConnectionDrawingPolicyContainer,OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Params?: JavascriptConnectionParams): {Params: JavascriptConnectionParams};
	static DrawConnection(Container: JavascriptGraphConnectionDrawingPolicyContainer,A: Vector2D,B: Vector2D,Params: JavascriptConnectionParams): void;
	static DrawSplineWithArrow(Container: JavascriptGraphConnectionDrawingPolicyContainer,StartAnchorPoint: Vector2D,EndAnchorPoint: Vector2D,Params: JavascriptConnectionParams): void;
	static GetHorveredPinNum(Container: JavascriptGraphConnectionDrawingPolicyContainer): number;
	static IsContainedHoveredPins(Container: JavascriptGraphConnectionDrawingPolicyContainer,Pin: JavascriptEdGraphPin): boolean;
	static MakeRotatedBox(Container: JavascriptGraphConnectionDrawingPolicyContainer,ArrowDrawPos: Vector2D,AngleInRadians: number,WireColor: LinearColor): void;
}

declare class JavascriptPinWidget { 
	clone() : JavascriptPinWidget;
	static C(Other: UObject): JavascriptPinWidget;
}

declare class JavascriptArrangedWidget { 
	clone() : JavascriptArrangedWidget;
	static C(Other: UObject): JavascriptArrangedWidget;
}

declare class JavascriptDetermineLinkGeometryContainer { 
	clone() : JavascriptDetermineLinkGeometryContainer;
	static C(Other: UObject): JavascriptDetermineLinkGeometryContainer;
	FindPinGeometries(PinWidget: JavascriptPinWidget): JavascriptArrangedWidget;
	FindPinToPinWidgetMap(Pin: JavascriptEdGraphPin): JavascriptPinWidget;
	GetArrangedNodes(UNode: EdGraphNode): JavascriptArrangedWidget;
	GetOutputPinWidget(): JavascriptPinWidget;
	static FindPinGeometries(Container: JavascriptDetermineLinkGeometryContainer,PinWidget: JavascriptPinWidget): JavascriptArrangedWidget;
	static FindPinToPinWidgetMap(Container: JavascriptDetermineLinkGeometryContainer,Pin: JavascriptEdGraphPin): JavascriptPinWidget;
	static GetArrangedNodes(Container: JavascriptDetermineLinkGeometryContainer,UNode: EdGraphNode): JavascriptArrangedWidget;
	static GetOutputPinWidget(Container: JavascriptDetermineLinkGeometryContainer): JavascriptPinWidget;
}

declare class JavascriptGraphEditorLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptGraphEditorLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptGraphEditorLibrary;
	static GetDefaultObject(): JavascriptGraphEditorLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEditorLibrary;
	static TryConnection(Schema: EdGraphSchema,A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
	static SetNodeMetaData(Schema: EdGraphSchema,UNode: EdGraphNode,KeyValue: string): boolean;
	static RemovePinFromHoverSet(InSlateNode: JavascriptSlateEdNode,Pin: JavascriptEdGraphPin): void;
	static NodeCreator(Graph: JavascriptGraphEdGraph): JavascriptNodeCreator;
	static MakeRotatedBox(Container: JavascriptGraphConnectionDrawingPolicyContainer,ArrowDrawPos: Vector2D,AngleInRadians: number,WireColor: LinearColor): void;
	static MakeLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
	static IsValid(A: JavascriptEdGraphPin): boolean;
	static IsContainedHoveredPins(Container: JavascriptGraphConnectionDrawingPolicyContainer,Pin: JavascriptEdGraphPin): boolean;
	static GetPins(UNode: EdGraphNode): JavascriptEdGraphPin[];
	static GetPinName(A: JavascriptEdGraphPin): string;
	static GetOwningNode(A: JavascriptEdGraphPin): EdGraphNode;
	static GetOutputPinWidget(Container: JavascriptDetermineLinkGeometryContainer): JavascriptPinWidget;
	static GetLinkedTo(A: JavascriptEdGraphPin): JavascriptEdGraphPin[];
	static GetHorveredPinNum(Container: JavascriptGraphConnectionDrawingPolicyContainer): number;
	static GetDirection(A: JavascriptEdGraphPin): EEdGraphPinDirection;
	static GetDefaultObject(): JavascriptEdGraphPin;
	static GetArrangedNodes(Container: JavascriptDetermineLinkGeometryContainer,UNode: EdGraphNode): JavascriptArrangedWidget;
	static FindPinToPinWidgetMap(Container: JavascriptDetermineLinkGeometryContainer,Pin: JavascriptEdGraphPin): JavascriptPinWidget;
	static FindPinGeometries(Container: JavascriptDetermineLinkGeometryContainer,PinWidget: JavascriptPinWidget): JavascriptArrangedWidget;
	static FindPin(UNode: EdGraphNode,PinName: string,Direction: EEdGraphPinDirection): JavascriptEdGraphPin;
	static FindClosestPointOnGeom(Geom: Geometry,TestPoint: Vector2D): Vector2D;
	static Finalize(Creator?: JavascriptNodeCreator): {Creator: JavascriptNodeCreator};
	static DrawSplineWithArrow(Container: JavascriptGraphConnectionDrawingPolicyContainer,StartAnchorPoint: Vector2D,EndAnchorPoint: Vector2D,Params: JavascriptConnectionParams): void;
	static DrawConnection(Container: JavascriptGraphConnectionDrawingPolicyContainer,A: Vector2D,B: Vector2D,Params: JavascriptConnectionParams): void;
	static DetermineWiringStyle(Container: JavascriptGraphConnectionDrawingPolicyContainer,OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Params?: JavascriptConnectionParams): {Params: JavascriptConnectionParams};
	static DestroyNode(UNode: EdGraphNode): void;
	static CenterOf(Geom: Geometry): Vector2D;
	static CanUserDeleteNode(UNode: EdGraphNode): boolean;
	static CanDuplicateNode(UNode: EdGraphNode): boolean;
	static BreakLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
	static BreakAllPinLinks(A: JavascriptEdGraphPin): void;
	static AutowireNewNode(UNode: EdGraphNode,FromPin: JavascriptEdGraphPin): void;
	static ApplyHoverDeemphasis(Container: JavascriptGraphConnectionDrawingPolicyContainer,OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Thickness: number,WireColor: LinearColor): void;
	static AddPinToHoverSet(InSlateEdNode: JavascriptSlateEdNode,Pin: JavascriptEdGraphPin): void;
	static C(Other: UObject): JavascriptGraphEditorLibrary;
}

declare class JavascriptPerformSecondPassLayoutContainer { 
	PrevNode: EdGraphNode;
	NextNode: EdGraphNode;
	NodeIndex: number;
	MaxNodes: number;
	clone() : JavascriptPerformSecondPassLayoutContainer;
	static C(Other: UObject): JavascriptPerformSecondPassLayoutContainer;
}

declare type EGraphSchemaGetStringQuery = 'Description' | 'Title';
declare var EGraphSchemaGetStringQuery : { Description:'Description',Title:'Title', };
declare class JavascriptGraphMenuBuilder extends JavascriptMenuBuilder { 
	Graph: EdGraph;
	GraphNode: EdGraphNode;
	GraphPin: JavascriptEdGraphPin;
	bIsDebugging: boolean;
	clone() : JavascriptGraphMenuBuilder;
	static C(Other: UObject): JavascriptGraphMenuBuilder;
}

declare type ECanCreateConnectionResponse = 'CONNECT_RESPONSE_MAKE' | 'CONNECT_RESPONSE_DISALLOW' | 'CONNECT_RESPONSE_BREAK_OTHERS_A' | 'CONNECT_RESPONSE_BREAK_OTHERS_B' | 'CONNECT_RESPONSE_BREAK_OTHERS_AB' | 'CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE';
declare var ECanCreateConnectionResponse : { CONNECT_RESPONSE_MAKE:'CONNECT_RESPONSE_MAKE',CONNECT_RESPONSE_DISALLOW:'CONNECT_RESPONSE_DISALLOW',CONNECT_RESPONSE_BREAK_OTHERS_A:'CONNECT_RESPONSE_BREAK_OTHERS_A',CONNECT_RESPONSE_BREAK_OTHERS_B:'CONNECT_RESPONSE_BREAK_OTHERS_B',CONNECT_RESPONSE_BREAK_OTHERS_AB:'CONNECT_RESPONSE_BREAK_OTHERS_AB',CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE:'CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE', };
declare class JavascriptPinConnectionResponse { 
	Message: string;
	Response: ECanCreateConnectionResponse;
	clone() : JavascriptPinConnectionResponse;
	static C(Other: UObject): JavascriptPinConnectionResponse;
}

declare class EdGraphSchemaAction { 
	MenuDescription: string;
	TooltipDescription: string;
	Category: string;
	Keywords: string;
	Grouping: number;
	SectionID: number;
	MenuDescriptionArray: string[];
	FullSearchTitlesArray: string[];
	FullSearchKeywordsArray: string[];
	FullSearchCategoryArray: string[];
	SearchText: string;
	clone() : EdGraphSchemaAction;
	static C(Other: UObject): EdGraphSchemaAction;
}

declare class PerformActionContext { 
	ParentGraph: EdGraph;
	FromPins: JavascriptEdGraphPin[];
	Location: Vector2D;
	bSelectNewNode: boolean;
	clone() : PerformActionContext;
	static C(Other: UObject): PerformActionContext;
}

declare class JavascriptGraphAssetGraphSchema extends EdGraphSchema { 
	OnPinConnectionListChanged: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => void>;
	OnTryCreateConnection: UnrealEngineDelegate<(PinA: JavascriptEdGraphPin, PinB: JavascriptEdGraphPin) => void>;
	OnMouseEnter: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, SlateEdNode: JavascriptSlateEdNode) => void>;
	OnMouseLeave: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, SlateEdNode: JavascriptSlateEdNode) => void>;
	OnPerformSecondPassLayout: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptPerformSecondPassLayoutContainer>;
	OnRequiresSecondPassLayout: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
	OnSkipMoveTo: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
	OnUsingCustomContent: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
	OnGetSlateBrushName: UnrealEngineDelegate<(bHovered: boolean) => string>;
	OnGetLabelWidget: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
	OnGetActualPinWidget: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
	OnGetPinStatusIndicator: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
	OnDisableMakePins: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
	OnUsingDefaultPin: UnrealEngineDelegate<() => boolean>;
	OnUsingNodeWidgetMap: UnrealEngineDelegate<() => boolean>;
	OnDetermineWiringStyle: UnrealEngineDelegate<(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer) => void>;
	OnComputeSplineTangent: UnrealEngineDelegate<(A: Vector2D, B: Vector2D) => Vector2D>;
	OnDrawSplineWithArrow: UnrealEngineDelegate<(A: Vector2D, B: Vector2D, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer, ArrowRadius: Vector2D) => void>;
	OnDrawSplineWithArrow_Geom: UnrealEngineDelegate<(A: Geometry, B: Geometry, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer) => void>;
	OnDrawPreviewConnector: UnrealEngineDelegate<(PinGeometry: Geometry, StartPoint: Vector2D, EndPoint: Vector2D, Pin: JavascriptEdGraphPin, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer) => void>;
	OnTakeWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
	OnTakeTitleWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
	OnTakeErrorReportingWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
	OnGetString: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, Query: Query) => string>;
	OnBuildMenu: UnrealEngineDelegate<(Builder: JavascriptGraphMenuBuilder) => void>;
	OnAllocateDefaultPins: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) => void>;
	OnCreatePin: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
	OnCanCreateConnection: UnrealEngineDelegate<(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin) => JavascriptPinConnectionResponse>;
	OnPerformAction: UnrealEngineDelegate<(Action: EdGraphSchemaAction, Context: PerformActionContext) => EdGraphNode>;
	OnContextActions: UnrealEngineDelegate<() => EdGraphSchemaAction[]>;
	OnGetPinTypeColor: UnrealEngineDelegate<(PinType: EdGraphPinType) => LinearColor>;
	OnNodeConnectionListChanged: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) => void>;
	OnCreateAutomaticConversionNodeAndConnections: UnrealEngineDelegate<(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin) => void>;
	OnDetermineLinkGeometry: UnrealEngineDelegate<(OutPin: JavascriptEdGraphPin, InputPin: JavascriptEdGraphPin, StartWidgetGeometry: JavascriptArrangedWidget, EndWidgetGeometry: JavascriptArrangedWidget, Container: JavascriptDetermineLinkGeometryContainer) => void>;
	static Load(ResourceName: string): JavascriptGraphAssetGraphSchema;
	static Find(Outer: UObject, ResourceName: string): JavascriptGraphAssetGraphSchema;
	static GetDefaultObject(): JavascriptGraphAssetGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphAssetGraphSchema;
	BreakSinglePinLink(SourcePin: JavascriptEdGraphPin,TargetPin: JavascriptEdGraphPin): void;
	BreakPinLinks(TargetPin: JavascriptEdGraphPin,bSendsNodeNotifcation: boolean): void;
	BreakNodeLinks(TargetNode: EdGraphNode): void;
	static C(Other: UObject): JavascriptGraphAssetGraphSchema;
}

declare class JavascriptGraphAppearanceInfo { 
	CornerImage: SlateBrush;
	CornerText: string;
	PIENotifyText: string;
	ReadOnlyText: string;
	InstructionText: string;
	clone() : JavascriptGraphAppearanceInfo;
	static C(Other: UObject): JavascriptGraphAppearanceInfo;
}

declare class JavascriptGraphEditorWidget extends Widget { 
	EdGraph: JavascriptGraphEdGraph;
	OnNodeDoubleClicked: UnrealEngineDelegate<(UNode: EdGraphNode) => void>;
	OnDropActor: UnrealEngineDelegate<(Actors: Actor[], Graph: EdGraph, Point: Vector2D) => void>;
	OnDisallowedPinConnection: UnrealEngineDelegate<(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin) => void>;
	OnSelectedNodesChanged: UnrealEngineDelegate<(Set: UObject[]) => void>;
	AppearanceInfo: JavascriptGraphAppearanceInfo;
	CommandList: JavascriptUICommandList;
	static Load(ResourceName: string): JavascriptGraphEditorWidget;
	static Find(Outer: UObject, ResourceName: string): JavascriptGraphEditorWidget;
	static GetDefaultObject(): JavascriptGraphEditorWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEditorWidget;
	SetViewLocation(Location: Vector2D,ZoomAmount: number): void;
	SetNodeSelection(UNode: EdGraphNode,bSelect: boolean): void;
	SetGraph(InEdGraph: JavascriptGraphEdGraph): void;
	SelectAllNodes(): void;
	static NewGraph(ParentScope: UObject): JavascriptGraphEdGraph;
	JumpToPin(JumpToMe: JavascriptEdGraphPin): void;
	JumpToNode(JumpToMe: EdGraphNode,bRequestRename: boolean,bSelectNode: boolean): void;
	GetViewLocation(OutLocation?: Vector2D,OutZoomAmount?: number): {OutLocation: Vector2D, OutZoomAmount: number};
	GetSelectedNodes(): UObject[];
	ClearSelectionSet(): void;
	static C(Other: UObject): JavascriptGraphEditorWidget;
}

declare class JavascriptAssetData { 
	ObjectPath: string;
	PackageName: string;
	PackagePath: string;
	GroupNames: string;
	AssetName: string;
	AssetClass: string;
	ChunkIDs: number[];
	PackageFlags: number;
	clone() : JavascriptAssetData;
	static C(Other: UObject): JavascriptAssetData;
	GetAllTags(OutArray?: string[]): {OutArray: string[]};
	GetAsset(): UObject;
	GetClass(): UnrealEngineClass;
	GetPackage(): Package;
	GetTagValue(Name: string,OutValue?: string): {OutValue: string, $: boolean};
	IsAssetLoaded(): boolean;
	static GetAllTags(AssetData: JavascriptAssetData,OutArray?: string[]): {OutArray: string[]};
	static GetAsset(AssetData: JavascriptAssetData): UObject;
	static GetClass(AssetData: JavascriptAssetData): UnrealEngineClass;
	static GetPackage(AssetData: JavascriptAssetData): Package;
	static GetTagValue(AssetData: JavascriptAssetData,Name: string,OutValue?: string): {OutValue: string, $: boolean};
	static IsAssetLoaded(AssetData: JavascriptAssetData): boolean;
}

declare class JavascriptEditorGlobalDelegates extends UObject { 
	static Load(ResourceName: string): JavascriptEditorGlobalDelegates;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorGlobalDelegates;
	static GetDefaultObject(): JavascriptEditorGlobalDelegates;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorGlobalDelegates;
	WorldChange(): void;
	UnbindAll(): void;
	Unbind(Key: string): void;
	SurfProps(): void;
	SingleStepPIE(bIsSimulating: boolean): void;
	SelectedProps(): void;
	ResumePIE(bIsSimulating: boolean): void;
	RefreshPrimitiveStatsBrowser(): void;
	RefreshLayerBrowser(): void;
	RefreshEditor(): void;
	RefreshAllBrowsers(): void;
	RedrawAllViewports(): void;
	PropertySelectionChange(): void;
	PreSaveWorld_Friendly(SaveFlags: number,World: World): void;
	PreBeginPIE(bIsSimulating: boolean): void;
	PostSaveWorld_Friendly(SaveFlags: number,World: World,bSuccess: boolean): void;
	PostLandscapeLayerUpdated(): void;
	OnShutdownPostPackagesSaved(): void;
	OnPathRemoved(Path: string): void;
	OnPathAdded(Path: string): void;
	OnObjectReimported(UObject: UObject): void;
	OnNewAssetCreated(InFactory: Factory): void;
	OnNewActorsDropped(DroppedObjects: UObject[],OutNewActors: Actor[]): void;
	OnMapOpened(Filename: string,bAsTemplate: boolean): void;
	OnLightingBuildStarted(): void;
	OnLightingBuildKept(): void;
	OnInMemoryAssetDeleted(InObject: UObject): void;
	OnInMemoryAssetCreated(InObject: UObject): void;
	OnGridSnappingChanged(bGridEnabled: boolean,GridSize: number): void;
	OnFocusViewportOnActors(Actors: Actor[]): void;
	OnFinishPickingBlueprintClass(InClass: UnrealEngineClass): void;
	OnFilesLoaded(): void;
	OnFileLoadProgressUpdated_Friendly(NumTotalAssets: number,NumAssetsProcessedByAssetRegistry: number,NumAssetsPendingDataLoad: number,bIsDiscoveringAssetFiles: boolean): void;
	OnEditorCameraMoved(ViewLocation: Vector,ViewRotation: Rotator,ViewportType: ELevelViewportType,ViewIndex: number): void;
	OnDollyPerspectiveCamera(Drag: Vector,ViewIndex: number): void;
	OnConfigureNewAssetProperties(InFactory: Factory): void;
	OnClassPackageLoadedOrUnloaded(): void;
	OnBlueprintReinstanced(): void;
	OnBlueprintPreCompile(Blueprint: Blueprint): void;
	OnBlueprintCompiled(): void;
	OnAssetsPreDelete(Assets: UObject[]): void;
	OnAssetsDeleted(Classes: UnrealEngineClass[]): void;
	OnAssetRenamed_Friendly(AssetData: JavascriptAssetData,Name: string): void;
	OnAssetRemoved_Friendly(AssetData: JavascriptAssetData): void;
	OnAssetReimport(InCreatedObject: UObject): void;
	OnAssetPreImport_Friendly(InFactory: Factory,InClass: UnrealEngineClass,InParent: UObject,Name: string,Type: string): void;
	OnAssetPostImport(InFactory: Factory,InCreatedObject: UObject): void;
	OnAssetAdded_Friendly(AssetData: JavascriptAssetData): void;
	OnApplyObjectToActor(ObjectToApply: UObject,Actor: Actor): void;
	OnAddLevelToWorld(Level: Level): void;
	OnActionAxisMappingsChanged(): void;
	NewCurrentLevel(): void;
	MapChange_Friendly(MapChangeFlags: number): void;
	LoadSelectedAssetsIfNeeded(): void;
	LayerChange(): void;
	FitTextureToSurface(World: World): void;
	EndPIE(bIsSimulating: boolean): void;
	DisplayLoadErrors(): void;
	CleanseEditor(): void;
	ChangeEditorMode(NewMode: string): void;
	Bind(Key: string): void;
	BeginPIE(bIsSimulating: boolean): void;
	ActorPropertiesChange(): void;
	static C(Other: UObject): JavascriptEditorGlobalDelegates;
}

declare class JavascriptInputEventState { 
	clone() : JavascriptInputEventState;
	static C(Other: UObject): JavascriptInputEventState;
	GetInputEvent(): EInputEvent;
	GetKey(): Key;
	IsAltButtonEvent(): boolean;
	IsAltButtonPressed(): boolean;
	IsAnyMouseButtonDown(): boolean;
	IsButtonPressed(InKey: Key): boolean;
	IsCtrlButtonEvent(): boolean;
	IsCtrlButtonPressed(): boolean;
	IsLeftMouseButtonPressed(): boolean;
	IsMiddleMouseButtonPressed(): boolean;
	IsMouseButtonEvent(): boolean;
	IsRightMouseButtonPressed(): boolean;
	IsShiftButtonEvent(): boolean;
	IsShiftButtonPressed(): boolean;
	IsSpaceBarPressed(): boolean;
	static GetInputEvent(InputEvent: JavascriptInputEventState): EInputEvent;
	static GetKey(InputEvent: JavascriptInputEventState): Key;
	static IsAltButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsAltButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsAnyMouseButtonDown(InputEvent: JavascriptInputEventState): boolean;
	static IsButtonPressed(InputEvent: JavascriptInputEventState,InKey: Key): boolean;
	static IsCtrlButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsCtrlButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsLeftMouseButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsMiddleMouseButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsMouseButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsRightMouseButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsShiftButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsShiftButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsSpaceBarPressed(InputEvent: JavascriptInputEventState): boolean;
}

declare class JavascriptInputEventStateLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptInputEventStateLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptInputEventStateLibrary;
	static GetDefaultObject(): JavascriptInputEventStateLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptInputEventStateLibrary;
	static IsSpaceBarPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsShiftButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsShiftButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsRightMouseButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsMouseButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsMiddleMouseButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsLeftMouseButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsCtrlButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsCtrlButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static IsButtonPressed(InputEvent: JavascriptInputEventState,InKey: Key): boolean;
	static IsAnyMouseButtonDown(InputEvent: JavascriptInputEventState): boolean;
	static IsAltButtonPressed(InputEvent: JavascriptInputEventState): boolean;
	static IsAltButtonEvent(InputEvent: JavascriptInputEventState): boolean;
	static GetKey(InputEvent: JavascriptInputEventState): Key;
	static GetInputEvent(InputEvent: JavascriptInputEventState): EInputEvent;
	static C(Other: UObject): JavascriptInputEventStateLibrary;
}

declare class JavascriptPDI { 
	clone() : JavascriptPDI;
	static C(Other: UObject): JavascriptPDI;
	DrawArc(Base: Vector,X: Vector,Y: Vector,MinAngle: number,MaxAngle: number,Radius: number,Sections: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	DrawCircle(Base: Vector,X: Vector,Y: Vector,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawConnectedArrow(ArrowToWorld: Transform,Color: LinearColor,ArrowHeight: number,ArrowWidth: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,NumSpokes: number): void;
	DrawDashedLine(Start: Vector,End: Vector,Color: LinearColor,DashSize: number,DepthPriority: ESceneDepthPriorityGroup,DepthBias: number): void;
	DrawDirectionalArrow(ArrowToWorld: Transform,InColor: LinearColor,Length: number,ArrowSize: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number): void;
	DrawOrientedWireBox(Base: Vector,X: Vector,Y: Vector,Z: Vector,Extent: Vector,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawPolygon(Verts: Vector[],InColor: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	DrawWireBox(Box: Box,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireBox2(Matrix: Transform,Box: Box,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireCapsule(Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireChoppedCone(Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,TopRadius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup): void;
	DrawWireCone(Verts?: Vector[],Transform?: Transform,ConeRadius?: number,ConeAngle?: number,ConeSides?: number,Color?: LinearColor,DepthPriority?: ESceneDepthPriorityGroup,Thickness?: number,DepthBias?: number,bScreenSpace?: boolean): {Verts: Vector[]};
	DrawWireCylinder(Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireDiamond(Transform: Transform,Size: number,InColor: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	DrawWireSphere(Base: Vector,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireSphere2(Transform: Transform,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireSphereAutoSides(Base: Vector,Color: LinearColor,Radius: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireSphereAutoSides2(Transform: Transform,Color: LinearColor,Radius: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	DrawWireSphereCappedCone(Transform: Transform,ConeRadius: number,ConeAngle: number,ConeSides: number,ArcFrequency: number,CapSegments: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	DrawWireStar(Position: Vector,Size: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	SetHitProxy(Name: string): void;
	static DrawArc(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,MinAngle: number,MaxAngle: number,Radius: number,Sections: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawCircle(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawConnectedArrow(PDI: JavascriptPDI,ArrowToWorld: Transform,Color: LinearColor,ArrowHeight: number,ArrowWidth: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,NumSpokes: number): void;
	static DrawDashedLine(PDI: JavascriptPDI,Start: Vector,End: Vector,Color: LinearColor,DashSize: number,DepthPriority: ESceneDepthPriorityGroup,DepthBias: number): void;
	static DrawDirectionalArrow(PDI: JavascriptPDI,ArrowToWorld: Transform,InColor: LinearColor,Length: number,ArrowSize: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number): void;
	static DrawOrientedWireBox(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Extent: Vector,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawPolygon(PDI: JavascriptPDI,Verts: Vector[],InColor: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireBox(PDI: JavascriptPDI,Box: Box,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireBox2(PDI: JavascriptPDI,Matrix: Transform,Box: Box,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireCapsule(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireChoppedCone(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,TopRadius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireCone(PDI: JavascriptPDI,Verts?: Vector[],Transform?: Transform,ConeRadius?: number,ConeAngle?: number,ConeSides?: number,Color?: LinearColor,DepthPriority?: ESceneDepthPriorityGroup,Thickness?: number,DepthBias?: number,bScreenSpace?: boolean): {Verts: Vector[]};
	static DrawWireCylinder(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireDiamond(PDI: JavascriptPDI,Transform: Transform,Size: number,InColor: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireSphere(PDI: JavascriptPDI,Base: Vector,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphere2(PDI: JavascriptPDI,Transform: Transform,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphereAutoSides(PDI: JavascriptPDI,Base: Vector,Color: LinearColor,Radius: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphereAutoSides2(PDI: JavascriptPDI,Transform: Transform,Color: LinearColor,Radius: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphereCappedCone(PDI: JavascriptPDI,Transform: Transform,ConeRadius: number,ConeAngle: number,ConeSides: number,ArcFrequency: number,CapSegments: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireStar(PDI: JavascriptPDI,Position: Vector,Size: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static SetHitProxy(PDI: JavascriptPDI,Name: string): void;
}

declare class JavascriptExtensibilityManager { 
	clone() : JavascriptExtensibilityManager;
	static C(Other: UObject): JavascriptExtensibilityManager;
	AddExtender(Extender: JavascriptExtender): void;
	RemoveExtender(Extender: JavascriptExtender): void;
	static AddExtender(Manager: JavascriptExtensibilityManager,Extender: JavascriptExtender): void;
	static RemoveExtender(Manager: JavascriptExtensibilityManager,Extender: JavascriptExtender): void;
	static GetMenuExtensibilityManager(What: string): JavascriptExtensibilityManager;
	static GetToolBarExtensibilityManager(What: string): JavascriptExtensibilityManager;
}

declare class JavascriptViewportClick { 
	clone() : JavascriptViewportClick;
	static C(Other: UObject): JavascriptViewportClick;
	GetClickPos(): IntPoint;
	GetDirection(): Vector;
	GetEvent(): EInputEvent;
	GetKey(): Key;
	GetOrigin(): Vector;
	IsAltDown(): boolean;
	IsControlDown(): boolean;
	IsShiftDown(): boolean;
	static GetClickPos(Click: JavascriptViewportClick): IntPoint;
	static GetDirection(Click: JavascriptViewportClick): Vector;
	static GetEvent(Click: JavascriptViewportClick): EInputEvent;
	static GetKey(Click: JavascriptViewportClick): Key;
	static GetOrigin(Click: JavascriptViewportClick): Vector;
	static IsAltDown(Click: JavascriptViewportClick): boolean;
	static IsControlDown(Click: JavascriptViewportClick): boolean;
	static IsShiftDown(Click: JavascriptViewportClick): boolean;
}

declare class JavascriptHitProxy { 
	clone() : JavascriptHitProxy;
	static C(Other: UObject): JavascriptHitProxy;
	GetActor(): Actor;
	GetName(): string;
	static GetActor(Proxy: JavascriptHitProxy): Actor;
	static GetName(Proxy: JavascriptHitProxy): string;
}

declare class JavascriptWorkspaceItem { 
	clone() : JavascriptWorkspaceItem;
	static C(Other: UObject): JavascriptWorkspaceItem;
	AddGroup(DisplayName: string): JavascriptWorkspaceItem;
	static AddGroup(Parent: JavascriptWorkspaceItem,DisplayName: string): JavascriptWorkspaceItem;
	static GetGroup(Name: string): JavascriptWorkspaceItem;
}

declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptEditorLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorLibrary;
	static GetDefaultObject(): JavascriptEditorLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorLibrary;
	static UpdateModelComponents(Level: Level): void;
	static ToggleSelect(USelection: USelection,InObject: UObject): void;
	static SetIsTemporarilyHiddenInEditor(Actor: Actor,bIsHidden: boolean): void;
	static SetHitProxy(PDI: JavascriptPDI,Name: string): void;
	static SetHeightmapDataFromMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static SetFolderPath_Recursively(Actor: Actor,NewFolderPath: string): void;
	static SetFolderPath(Actor: Actor,NewFolderPath: string): void;
	static SetAlphamapDataFromMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: PaintingRestriction): void;
	static SetActorLabel(Actor: Actor,NewActorLabel: string,bMarkDirty: boolean): void;
	static Select(USelection: USelection,InObject: UObject): void;
	static SavePackage(Package: Package,FileName: string): boolean;
	static RequestEndPlayMapInPIE(): void;
	static RemoveLevelInstance(World: World): void;
	static RemoveExtender(Manager: JavascriptExtensibilityManager,Extender: JavascriptExtender): void;
	static PostEditChange(InObject: UObject): void;
	static OpenPopupWindow(Widget: Widget,PopupDesiredSize: Vector2D,HeadingText: string): void;
	static ModifyObject(UObject: UObject,bAlwaysMarkDirty: boolean): void;
	static MarkPackageDirty(InObject: UObject): boolean;
	static IsShiftDown(Click: JavascriptViewportClick): boolean;
	static IsControlDown(Click: JavascriptViewportClick): boolean;
	static IsAssetLoaded(AssetData: JavascriptAssetData): boolean;
	static IsAltDown(Click: JavascriptViewportClick): boolean;
	static IsActorLabelEditable(Actor: Actor): boolean;
	static IsActive(Transactor: Transactor): boolean;
	static InvalidateModelGeometry(World: World,InLevel: Level): void;
	static GetTransaction(Transactor: Transactor,QueueIndex: number): JavascriptTransaction;
	static GetToolBarExtensibilityManager(What: string): JavascriptExtensibilityManager;
	static GetTitle(Transaction: JavascriptTransaction): string;
	static GetTagValue(AssetData: JavascriptAssetData,Name: string,OutValue?: string): {OutValue: string, $: boolean};
	static GetSelectedObjects(USelection: USelection,Out?: UObject[]): {Out: UObject[], $: number};
	static GetRootWindow(): JavascriptSlateWidget;
	static GetQueueLength(Transactor: Transactor): number;
	static GetPrimaryObject(Transaction: JavascriptTransaction): UObject;
	static GetPackage(AssetData: JavascriptAssetData): Package;
	static GetOrigin(Click: JavascriptViewportClick): Vector;
	static GetName(Proxy: JavascriptHitProxy): string;
	static GetMenuExtensibilityManager(What: string): JavascriptExtensibilityManager;
	static GetLayerInfoByName(LandscapeInfo: LandscapeInfo,LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	static GetLandscapeInfo(Landscape: Landscape,bSpawnNewActor: boolean): LandscapeInfo;
	static GetLandscapeExtent(LandscapeInfo: LandscapeInfo,MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	static GetKey(Click: JavascriptViewportClick): Key;
	static GetHeightmapDataToMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetGroup(Name: string): JavascriptWorkspaceItem;
	static GetFolderPath(Actor: Actor): string;
	static GetEvent(Click: JavascriptViewportClick): EInputEvent;
	static GetDirection(Click: JavascriptViewportClick): Vector;
	static GetDefaultBrush(World: World): Brush;
	static GetContext(Transaction: JavascriptTransaction): string;
	static GetClickPos(Click: JavascriptViewportClick): IntPoint;
	static GetClass(AssetData: JavascriptAssetData): UnrealEngineClass;
	static GetAsset(AssetData: JavascriptAssetData): UObject;
	static GetAlphamapDataToMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetAllTags(AssetData: JavascriptAssetData,OutArray?: string[]): {OutArray: string[]};
	static GetActorLabel(Actor: Actor): string;
	static GetActor(Proxy: JavascriptHitProxy): Actor;
	static FindWorldInPackage(Package: Package): World;
	static ExportNavigation(InWorld: World,Path: string): string;
	static EditorDestroyActor(World: World,Actor: Actor,bShouldModifyLevel: boolean): boolean;
	static EditorAddModalWindow(Widget: JavascriptSlateWidget): void;
	static DrawWireStar(PDI: JavascriptPDI,Position: Vector,Size: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireSphereCappedCone(PDI: JavascriptPDI,Transform: Transform,ConeRadius: number,ConeAngle: number,ConeSides: number,ArcFrequency: number,CapSegments: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireSphereAutoSides2(PDI: JavascriptPDI,Transform: Transform,Color: LinearColor,Radius: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphereAutoSides(PDI: JavascriptPDI,Base: Vector,Color: LinearColor,Radius: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphere2(PDI: JavascriptPDI,Transform: Transform,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireSphere(PDI: JavascriptPDI,Base: Vector,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireDiamond(PDI: JavascriptPDI,Transform: Transform,Size: number,InColor: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireCylinder(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireCone(PDI: JavascriptPDI,Verts?: Vector[],Transform?: Transform,ConeRadius?: number,ConeAngle?: number,ConeSides?: number,Color?: LinearColor,DepthPriority?: ESceneDepthPriorityGroup,Thickness?: number,DepthBias?: number,bScreenSpace?: boolean): {Verts: Vector[]};
	static DrawWireChoppedCone(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,TopRadius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawWireCapsule(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Color: LinearColor,Radius: number,HalfHeight: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireBox2(PDI: JavascriptPDI,Matrix: Transform,Box: Box,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawWireBox(PDI: JavascriptPDI,Box: Box,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawPolygon(PDI: JavascriptPDI,Verts: Vector[],InColor: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DrawOrientedWireBox(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Z: Vector,Extent: Vector,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawDirectionalArrow(PDI: JavascriptPDI,ArrowToWorld: Transform,InColor: LinearColor,Length: number,ArrowSize: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number): void;
	static DrawDashedLine(PDI: JavascriptPDI,Start: Vector,End: Vector,Color: LinearColor,DashSize: number,DepthPriority: ESceneDepthPriorityGroup,DepthBias: number): void;
	static DrawConnectedArrow(PDI: JavascriptPDI,ArrowToWorld: Transform,Color: LinearColor,ArrowHeight: number,ArrowWidth: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,NumSpokes: number): void;
	static DrawCircle(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,Color: LinearColor,Radius: number,NumSides: number,DepthPriority: ESceneDepthPriorityGroup,Thickness: number,DepthBias: number,bScreenSpace: boolean): void;
	static DrawArc(PDI: JavascriptPDI,Base: Vector,X: Vector,Y: Vector,MinAngle: number,MaxAngle: number,Radius: number,Sections: number,Color: LinearColor,DepthPriority: ESceneDepthPriorityGroup): void;
	static DeselectAll(USelection: USelection,InClass: UnrealEngineClass): void;
	static Deselect(USelection: USelection,InObject: UObject): void;
	static DeletePackage(Package: Package): boolean;
	static csgAdd(DefaultBrush: Brush,PolyFlags: number,BrushType: EBrushType): Brush;
	static CreatePropertyEditorToolkit(ObjectsForPropertiesMenu: UObject[]): void;
	static CreateBrushForVolumeActor(NewActor: Volume,BrushBuilder: BrushBuilder): void;
	static ClearActorLabel(Actor: Actor): void;
	static Build(Builder: BrushBuilder,InWorld: World,InBrush: Brush): boolean;
	static BroadcastHotReload(): void;
	static BroadcastAssetCreated(NewAsset: UObject): void;
	static AddWhitelistedObject(InObject: UObject): void;
	static AddGroup(Parent: JavascriptWorkspaceItem,DisplayName: string): JavascriptWorkspaceItem;
	static AddExtender(Manager: JavascriptExtensibilityManager,Extender: JavascriptExtender): void;
	static C(Other: UObject): JavascriptEditorLibrary;
}

declare type EJavasriptTabActivationCause = 'UserClickedOnTab' | 'SetDirectly';
declare var EJavasriptTabActivationCause : { UserClickedOnTab:'UserClickedOnTab',SetDirectly:'SetDirectly', };
declare type EJavascriptTabRole = 'MajorTab' | 'PanelTab' | 'NomadTab' | 'DocumentTab';
declare var EJavascriptTabRole : { MajorTab:'MajorTab',PanelTab:'PanelTab',NomadTab:'NomadTab',DocumentTab:'DocumentTab', };
declare class JavascriptEditorTab extends UObject { 
	OnSpawnTab: UnrealEngineDelegate<(Context: UObject) => Widget>;
	OnCloseTab: UnrealEngineDelegate<(Widget: Widget) => void>;
	OnTabActivatedCallback: UnrealEngineDelegate<(TabId: string, Cause: EJavasriptTabActivationCause) => void>;
	Group: JavascriptWorkspaceItem;
	TabId: string;
	DisplayName: string;
	bIsNomad: boolean;
	Role: EJavascriptTabRole;
	static Load(ResourceName: string): JavascriptEditorTab;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorTab;
	static GetDefaultObject(): JavascriptEditorTab;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorTab;
	Discard(): void;
	Commit(): void;
	CloseTab(Widget: Widget): void;
	static C(Other: UObject): JavascriptEditorTab;
}

declare class JavascriptMenuExtension { 
	ExtensionHook: string;
	HookPosition: EJavascriptExtensionHook;
	clone() : JavascriptMenuExtension;
	static C(Other: UObject): JavascriptMenuExtension;
}

declare class JavascriptUIExtender extends UObject { 
	MenuExtensions: JavascriptMenuExtension[];
	ToolbarExtensions: JavascriptMenuExtension[];
	OnHook: UnrealEngineDelegate<(Hook: string) => void>;
	static Load(ResourceName: string): JavascriptUIExtender;
	static Find(Outer: UObject, ResourceName: string): JavascriptUIExtender;
	static GetDefaultObject(): JavascriptUIExtender;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUIExtender;
	static GetTopCommandList(): JavascriptUICommandList;
	static EndSection(): void;
	static Bind(Commands: JavascriptUICommands): void;
	static BeginSection(Name: string,Text: string): void;
	static AddToolBarButton(Commands: JavascriptUICommands,Id: string): void;
	static AddMenuSeparator(): void;
	static AddMenuEntry(Commands: JavascriptUICommands,Id: string): void;
	static C(Other: UObject): JavascriptUIExtender;
}

declare class JavascriptAssetEditorToolkit extends UObject { 
	ToolkitFName: string;
	Layout: string;
	BaseToolkitName: string;
	ToolkitName: string;
	WorldCentricTabColorScale: LinearColor;
	WorldCentricTabPrefix: string;
	Tabs: JavascriptEditorTab[];
	Commands: JavascriptUICommands;
	MenuExtender: JavascriptUIExtender;
	ToolbarExtender: JavascriptUIExtender;
	TestArray: number[];
	static Load(ResourceName: string): JavascriptAssetEditorToolkit;
	static Find(Outer: UObject, ResourceName: string): JavascriptAssetEditorToolkit;
	static GetDefaultObject(): JavascriptAssetEditorToolkit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptAssetEditorToolkit;
	Refresh(): void;
	Discard(): void;
	Commit(): void;
	static C(Other: UObject): JavascriptAssetEditorToolkit;
}

declare class JavascriptAssetTypeActions extends UObject { 
	ActionsName: string;
	Color: Color;
	SupportedClass: UnrealEngineClass;
	Editor: JavascriptAssetEditorToolkit;
	Actions: JavascriptUIExtender;
	static Load(ResourceName: string): JavascriptAssetTypeActions;
	static Find(Outer: UObject, ResourceName: string): JavascriptAssetTypeActions;
	static GetDefaultObject(): JavascriptAssetTypeActions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptAssetTypeActions;
	Refresh(): void;
	Discard(): void;
	Commit(): void;
	static C(Other: UObject): JavascriptAssetTypeActions;
}

declare class JavascriptCommandlet extends Commandlet { 
	CmdLineTokens: string[];
	CmdLineSwitches: string[];
	static Load(ResourceName: string): JavascriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): JavascriptCommandlet;
	static GetDefaultObject(): JavascriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptCommandlet;
	static C(Other: UObject): JavascriptCommandlet;
}

declare class JavascriptEditorEngineLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptEditorEngineLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorEngineLibrary;
	static GetDefaultObject(): JavascriptEditorEngineLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorEngineLibrary;
	static SetMaterial(Engine: EditorEngine,InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
	static SelectNone(Engine: EditorEngine,bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	static SelectGroup(Engine: EditorEngine,InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	static SelectComponent(Engine: EditorEngine,Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	static SelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	static RedrawAllViewports(Engine: EditorEngine,bInvalidateHitProxies: boolean): void;
	static RebuildStaticNavigableGeometry(Engine: EditorEngine,Level: Level): void;
	static RebuildLevel(Engine: EditorEngine,Level: Level): void;
	static GetSurfaces(Brush: Brush,Surfaces?: number[]): {Surfaces: number[]};
	static GetSelectedSet(Engine: EditorEngine,Class: UnrealEngineClass): USelection;
	static GetSelectedObjects(Engine: EditorEngine): USelection;
	static GetSelectedComponents(Engine: EditorEngine): USelection;
	static GetPIEWorld(Engine: Engine): World;
	static GetLongPackagePath(InPackage: Package): string;
	static GetEditorWorld(Engine: Engine): World;
	static FindBrushBuilder(Engine: EditorEngine,BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	static Exec(Engine: EditorEngine,InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	static DuplicateAsset(AssetName: string,PackagePath: string,OriginalObject: UObject): UObject;
	static DeleteObjectsUnchecked(ObjectsToDelete: UObject[]): number;
	static CanSelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	static bspBrushCSG(Engine: EditorEngine,Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	static C(Other: UObject): JavascriptEditorEngineLibrary;
}

declare class JavascriptEditorInputProcessor extends UObject { 
	static Load(ResourceName: string): JavascriptEditorInputProcessor;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorInputProcessor;
	static GetDefaultObject(): JavascriptEditorInputProcessor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorInputProcessor;
	HandleMouseMoveEvent(InPointerEvent: UPointerEvent): boolean;
	HandleKeyUpEvent(InKeyEvent: KeyEvent): boolean;
	HandleKeyDownEvent(InKeyEvent: KeyEvent): boolean;
	HandleAnalogInputEvent(InKeyEvent: AnalogInputEvent): boolean;
	Activate(bEnable: boolean): void;
	static C(Other: UObject): JavascriptEditorInputProcessor;
}

declare class JavascriptEditorPopupWindow extends UObject { 
	Widget: Widget;
	static Load(ResourceName: string): JavascriptEditorPopupWindow;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorPopupWindow;
	static GetDefaultObject(): JavascriptEditorPopupWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorPopupWindow;
	Open(Heading: string,DesiredSize: Vector2D): boolean;
	OnDismissed(): void;
	static C(Other: UObject): JavascriptEditorPopupWindow;
}

declare class JavascriptEditorTabManager extends Widget { 
	Layout: string;
	Tabs: JavascriptEditorTab[];
	static Load(ResourceName: string): JavascriptEditorTabManager;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorTabManager;
	static GetDefaultObject(): JavascriptEditorTabManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorTabManager;
	static C(Other: UObject): JavascriptEditorTabManager;
}

declare class JavascriptEditorTick extends UObject { 
	OnTick: UnrealEngineDelegate<(DeltaSeconds: number) => void>;
	static Load(ResourceName: string): JavascriptEditorTick;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorTick;
	static GetDefaultObject(): JavascriptEditorTick;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorTick;
	GetEngine(): EditorEngine;
	ForceTick(DeltaTime: number): void;
	static C(Other: UObject): JavascriptEditorTick;
}

declare class JavascriptEditorToolbar extends Widget { 
	OnHook: UnrealEngineDelegate<() => JavascriptMenuBuilder>;
	static Load(ResourceName: string): JavascriptEditorToolbar;
	static Find(Outer: UObject, ResourceName: string): JavascriptEditorToolbar;
	static GetDefaultObject(): JavascriptEditorToolbar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorToolbar;
	static C(Other: UObject): JavascriptEditorToolbar;
}

