@file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS")
package ue


import kotlin.js.*
import org.khronos.webgl.*
import org.w3c.dom.*
import org.w3c.dom.events.*
import org.w3c.dom.parsing.*
import org.w3c.dom.svg.*
import org.w3c.dom.url.*
import org.w3c.fetch.*
import org.w3c.files.*
import org.w3c.notifications.*
import org.w3c.performance.*
import org.w3c.workers.*
import org.w3c.xhr.*

external fun gc()

typealias UnrealEngineClass = Any

typealias timeout_handle = Any

external fun setTimeout(fn: (milliseconds: Number) -> Unit, timeout: Number): timeout_handle

external fun clearTimeout(handle: timeout_handle)

external open class UnrealEngineMulticastDelegate<T> {
    open fun Add(fn: T)
    open fun Remove(fn: T)
}

external open class UnrealEngineDelegate<T> {
    open fun Add(fn: T)
    open fun Remove(fn: T)
}

external open class Process {
    open fun nextTick(fn: (number: Any) -> Unit)
}

external var process: Process

external open class Memory {
    open fun exec(ab: ArrayBuffer, fn: (ab: ArrayBuffer) -> Unit)
    open fun access(obj: JavascriptMemoryObject): ArrayBuffer
}

external var memory: Memory

external var GEngine: Engine

external var GWorld: World

//external var Root: dynamic /* JavascriptComponent | Any */

external object ECastToControlRigBlueprintCases {
    var CastSucceeded: String /* "CastSucceeded" */
    var CastFailed: String /* "CastFailed" */
    var ECastToControlRigBlueprintCases_MAX: String /* "ECastToControlRigBlueprintCases_MAX" */
}

external interface `T$0` {
    var InGuid: Guid
}

external open class Guid {
    open var A: Number
    open var B: Number
    open var C: Number
    open var D: Number
    open fun clone(): Guid
    open fun ToString(): String
    open fun Equal(B: Guid): Boolean
    open fun InvalidateGuid(): `T$0`
    open fun IsValidGuid(): Boolean
    open fun NotEqual(B: Guid): Boolean

    companion object {
        fun C(Other: UObject): Guid
        fun C(Other: Any): Guid
        fun ToString(InGuid: Guid): String
        fun Equal(A: Guid, B: Guid): Boolean
        fun InvalidateGuid(InGuid: Guid = definedExternally): `T$0`
        fun IsValidGuid(InGuid: Guid): Boolean
        fun NotEqual(A: Guid, B: Guid): Boolean
        fun NewGuid(): Guid
    }
}

external open class BlueprintCore : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SkeletonGeneratedClass: UnrealEngineClass
    open var GeneratedClass: UnrealEngineClass
    open var bLegacyNeedToPurgeSkelRefs: Boolean
    open var BlueprintGuid: Guid

    companion object {
        fun Load(ResourceName: String): BlueprintCore
        fun Find(Outer: UObject, ResourceName: String): BlueprintCore
        fun GetDefaultObject(): BlueprintCore
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlueprintCore
        fun C(Other: UObject): BlueprintCore
        fun C(Other: Any): BlueprintCore
    }
}

external object EBlueprintType {
    var BPTYPE_Normal: String /* "BPTYPE_Normal" */
    var BPTYPE_Const: String /* "BPTYPE_Const" */
    var BPTYPE_MacroLibrary: String /* "BPTYPE_MacroLibrary" */
    var BPTYPE_Interface: String /* "BPTYPE_Interface" */
    var BPTYPE_LevelScript: String /* "BPTYPE_LevelScript" */
    var BPTYPE_FunctionLibrary: String /* "BPTYPE_FunctionLibrary" */
    var BPTYPE_MAX: String /* "BPTYPE_MAX" */
}

external object EBlueprintNativizationFlag {
    var Disabled: String /* "Disabled" */
    var Dependency: String /* "Dependency" */
    var ExplicitlyEnabled: String /* "ExplicitlyEnabled" */
    var EBlueprintNativizationFlag_MAX: String /* "EBlueprintNativizationFlag_MAX" */
}

external object EBlueprintCompileMode {
    var Default: String /* "Default" */
    var Development: String /* "Development" */
    var FinalRelease: String /* "FinalRelease" */
    var EBlueprintCompileMode_MAX: String /* "EBlueprintCompileMode_MAX" */
}

external object EBlueprintStatus {
    var BS_Unknown: String /* "BS_Unknown" */
    var BS_Dirty: String /* "BS_Dirty" */
    var BS_Error: String /* "BS_Error" */
    var BS_UpToDate: String /* "BS_UpToDate" */
    var BS_BeingCreated: String /* "BS_BeingCreated" */
    var BS_UpToDateWithWarnings: String /* "BS_UpToDateWithWarnings" */
    var BS_MAX: String /* "BS_MAX" */
}

external object ETickingGroup {
    var TG_PrePhysics: String /* "TG_PrePhysics" */
    var TG_StartPhysics: String /* "TG_StartPhysics" */
    var TG_DuringPhysics: String /* "TG_DuringPhysics" */
    var TG_EndPhysics: String /* "TG_EndPhysics" */
    var TG_PostPhysics: String /* "TG_PostPhysics" */
    var TG_PostUpdateWork: String /* "TG_PostUpdateWork" */
    var TG_LastDemotable: String /* "TG_LastDemotable" */
    var TG_NewlySpawned: String /* "TG_NewlySpawned" */
    var TG_MAX: String /* "TG_MAX" */
}

external open class TickFunction {
    open var TickGroup: String /* "TG_PrePhysics" | "TG_StartPhysics" | "TG_DuringPhysics" | "TG_EndPhysics" | "TG_PostPhysics" | "TG_PostUpdateWork" | "TG_LastDemotable" | "TG_NewlySpawned" | "TG_MAX" */
    open var EndTickGroup: String /* "TG_PrePhysics" | "TG_StartPhysics" | "TG_DuringPhysics" | "TG_EndPhysics" | "TG_PostPhysics" | "TG_PostUpdateWork" | "TG_LastDemotable" | "TG_NewlySpawned" | "TG_MAX" */
    open var bTickEvenWhenPaused: Boolean
    open var bCanEverTick: Boolean
    open var bStartWithTickEnabled: Boolean
    open var bAllowTickOnDedicatedServer: Boolean
    open var TickInterval: Number
    open fun clone(): TickFunction

    companion object {
        fun C(Other: UObject): TickFunction
        fun C(Other: Any): TickFunction
    }
}

external open class ActorComponentTickFunction : TickFunction {
    override fun clone(): ActorComponentTickFunction

    companion object {
        fun C(Other: UObject): ActorComponentTickFunction
        fun C(Other: Any): ActorComponentTickFunction
    }
}

external open class AssetUserData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AssetUserData
        fun Find(Outer: UObject, ResourceName: String): AssetUserData
        fun GetDefaultObject(): AssetUserData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetUserData
        fun C(Other: UObject): AssetUserData
        fun C(Other: Any): AssetUserData
    }
}

external object EComponentCreationMethod {
    var Native: String /* "Native" */
    var SimpleConstructionScript: String /* "SimpleConstructionScript" */
    var UserConstructionScript: String /* "UserConstructionScript" */
    var Instance: String /* "Instance" */
    var EComponentCreationMethod_MAX: String /* "EComponentCreationMethod_MAX" */
}

external open class SimpleMemberReference {
    open var MemberParent: UObject
    open var MemberName: String
    open var MemberGuid: Guid
    open fun clone(): SimpleMemberReference

    companion object {
        fun C(Other: UObject): SimpleMemberReference
        fun C(Other: Any): SimpleMemberReference
    }
}

external open class ActorTickFunction : TickFunction {
    override fun clone(): ActorTickFunction

    companion object {
        fun C(Other: UObject): ActorTickFunction
        fun C(Other: Any): ActorTickFunction
    }
}

external object EActorUpdateOverlapsMethod {
    var UseConfigDefault: String /* "UseConfigDefault" */
    var AlwaysUpdate: String /* "AlwaysUpdate" */
    var OnlyUpdateMovable: String /* "OnlyUpdateMovable" */
    var NeverUpdate: String /* "NeverUpdate" */
    var EActorUpdateOverlapsMethod_MAX: String /* "EActorUpdateOverlapsMethod_MAX" */
}

external object ENetRole {
    var ROLE_None: String /* "ROLE_None" */
    var ROLE_SimulatedProxy: String /* "ROLE_SimulatedProxy" */
    var ROLE_AutonomousProxy: String /* "ROLE_AutonomousProxy" */
    var ROLE_Authority: String /* "ROLE_Authority" */
    var ROLE_MAX: String /* "ROLE_MAX" */
}

external open class IntPoint {
    open var X: Number
    open var Y: Number
    open fun clone(): IntPoint
    open fun ToString(): String
    open fun Add_IntPointInt(B: Number): IntPoint
    open fun Add_IntPointIntPoint(B: IntPoint): IntPoint
    open fun ToVector2D(): Vector2D
    open fun Divide_IntPointInt(B: Number): IntPoint
    open fun Divide_IntPointIntPoint(B: IntPoint): IntPoint
    open fun Equal(B: IntPoint): Boolean
    open fun Multiply_IntPointInt(B: Number): IntPoint
    open fun Multiply_IntPointIntPoint(B: IntPoint): IntPoint
    open fun NotEqual(B: IntPoint): Boolean
    open fun Subtract_IntPointInt(B: Number): IntPoint
    open fun Subtract_IntPointIntPoint(B: IntPoint): IntPoint
    open fun ResizeXRCamera(): IntPoint

    companion object {
        fun C(Other: UObject): IntPoint
        fun C(Other: Any): IntPoint
        fun ToString(InIntPoint: IntPoint): String
        fun Add_IntPointInt(A: IntPoint, B: Number): IntPoint
        fun Add_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint
        fun ToVector2D(InIntPoint: IntPoint): Vector2D
        fun Divide_IntPointInt(A: IntPoint, B: Number): IntPoint
        fun Divide_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint
        fun Equal(A: IntPoint, B: IntPoint): Boolean
        fun Multiply_IntPointInt(A: IntPoint, B: Number): IntPoint
        fun Multiply_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint
        fun NotEqual(A: IntPoint, B: IntPoint): Boolean
        fun Subtract_IntPointInt(A: IntPoint, B: Number): IntPoint
        fun Subtract_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint
        fun ResizeXRCamera(InSize: IntPoint): IntPoint
        fun IntPoint_Down(): IntPoint
        fun IntPoint_Left(): IntPoint
        fun IntPoint_One(): IntPoint
        fun IntPoint_Right(): IntPoint
        fun IntPoint_Up(): IntPoint
        fun IntPoint_Zero(): IntPoint
    }
}

external open class Box2D {
    open var Min: Vector2D
    open var Max: Vector2D
    open var bIsValid: Number
    open fun clone(): Box2D

    companion object {
        fun C(Other: UObject): Box2D
        fun C(Other: Any): Box2D
    }
}

external object EARLineTraceChannels {
    var None: String /* "None" */
    var FeaturePoint: String /* "FeaturePoint" */
    var GroundPlane: String /* "GroundPlane" */
    var PlaneUsingExtent: String /* "PlaneUsingExtent" */
    var PlaneUsingBoundaryPolygon: String /* "PlaneUsingBoundaryPolygon" */
    var EARLineTraceChannels_MAX: String /* "EARLineTraceChannels_MAX" */
}

external object EEasingFunc {
    var Linear: String /* "Linear" */
    var Step: String /* "Step" */
    var SinusoidalIn: String /* "SinusoidalIn" */
    var SinusoidalOut: String /* "SinusoidalOut" */
    var SinusoidalInOut: String /* "SinusoidalInOut" */
    var EaseIn: String /* "EaseIn" */
    var EaseOut: String /* "EaseOut" */
    var EaseInOut: String /* "EaseInOut" */
    var ExpoIn: String /* "ExpoIn" */
    var ExpoOut: String /* "ExpoOut" */
    var ExpoInOut: String /* "ExpoInOut" */
    var CircularIn: String /* "CircularIn" */
    var CircularOut: String /* "CircularOut" */
    var CircularInOut: String /* "CircularInOut" */
    var EEasingFunc_MAX: String /* "EEasingFunc_MAX" */
}

external interface `T$1` {
    var InitialSeed: Number
}

external interface `T$2` {
    var Stream: RandomStream
}

external open class RandomStream {
    open var InitialSeed: Number
    open var Seed: Number
    open fun clone(): RandomStream
    open fun BreakRandomStream(InitialSeed: Number = definedExternally): `T$1`
    open fun RandomBoolFromStream(): Boolean
    open fun RandomFloatFromStream(): Number
    open fun RandomUnitVectorFromStream(): Vector
    open fun ResetRandomStream()
    open fun SeedRandomStream(): `T$2`
    open fun SetRandomStreamSeed(NewSeed: Number = definedExternally): `T$2`

    companion object {
        fun C(Other: UObject): RandomStream
        fun C(Other: Any): RandomStream
        fun BreakRandomStream(InRandomStream: RandomStream, InitialSeed: Number = definedExternally): `T$1`
        fun RandomBoolFromStream(Stream: RandomStream): Boolean
        fun RandomFloatFromStream(Stream: RandomStream): Number
        fun RandomUnitVectorFromStream(Stream: RandomStream): Vector
        fun ResetRandomStream(Stream: RandomStream)
        fun SeedRandomStream(Stream: RandomStream = definedExternally): `T$2`
        fun SetRandomStreamSeed(Stream: RandomStream = definedExternally, NewSeed: Number = definedExternally): `T$2`
        fun MakeRandomStream(InitialSeed: Number): RandomStream
    }
}

external interface `T$3` {
    var Roll: Number
    var Pitch: Number
    var Yaw: Number
}

external interface `T$4` {
    var X: Vector
    var Y: Vector
    var Z: Vector
}

external interface `T$5` {
    var DeviceRotation: Rotator
    var DevicePosition: Vector
}

external open class Rotator {
    open var Pitch: Number
    open var Yaw: Number
    open var Roll: Number
    open fun clone(): Rotator
    open fun ToText(): String
    open fun ToString(): String
    open fun BreakRotator(Roll: Number = definedExternally, Pitch: Number = definedExternally, Yaw: Number = definedExternally): `T$3`
    open fun BreakRotIntoAxes(X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
    open fun CombineRotators(B: Rotator): Rotator
    open fun ToQuaternion(): Quat
    open fun ToTransform(): Transform
    open fun GetRotationXVector(): Vector
    open fun DynamicWeightedMovingAverageRotator(PreviousSample: Rotator, MaxDistance: Number, MinWeight: Number, MaxWeight: Number): Rotator
    open fun Equal(B: Rotator, ErrorTolerance: Number): Boolean
    open fun GetAxes(X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
    open fun GetForwardVector(): Vector
    open fun GetRightVector(): Vector
    open fun GetUpVector(): Vector
    open fun ScaleRotator(B: Number): Rotator
    open fun InvertRotator(): Rotator
    open fun Delta(B: Rotator): Rotator
    open fun NotEqual(B: Rotator, ErrorTolerance: Number): Boolean
    open fun Ease(B: Rotator, Alpha: Number, bShortestPath: Boolean, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Rotator
    open fun RInterpTo(Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
    open fun RInterpTo_Constant(Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
    open fun Lerp(B: Rotator, Alpha: Number, bShortestPath: Boolean): Rotator
    open fun SelectRotator(B: Rotator, bPickA: Boolean): Rotator
    open fun WeightedMovingAverageRotator(PreviousSample: Rotator, Weight: Number): Rotator
    open fun IsValidAIRotation(): Boolean
    open fun GetOrientationAndPosition(DevicePosition: Vector = definedExternally): `T$5`

    companion object {
        fun C(Other: UObject): Rotator
        fun C(Other: Any): Rotator
        fun ToText(InRot: Rotator): String
        fun ToString(InRot: Rotator): String
        fun BreakRotator(InRot: Rotator, Roll: Number = definedExternally, Pitch: Number = definedExternally, Yaw: Number = definedExternally): `T$3`
        fun BreakRotIntoAxes(InRot: Rotator, X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
        fun CombineRotators(A: Rotator, B: Rotator): Rotator
        fun ToQuaternion(InRot: Rotator): Quat
        fun ToTransform(InRotator: Rotator): Transform
        fun GetRotationXVector(InRot: Rotator): Vector
        fun DynamicWeightedMovingAverageRotator(CurrentSample: Rotator, PreviousSample: Rotator, MaxDistance: Number, MinWeight: Number, MaxWeight: Number): Rotator
        fun Equal(A: Rotator, B: Rotator, ErrorTolerance: Number): Boolean
        fun GetAxes(A: Rotator, X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
        fun GetForwardVector(InRot: Rotator): Vector
        fun GetRightVector(InRot: Rotator): Vector
        fun GetUpVector(InRot: Rotator): Vector
        fun ScaleRotator(A: Rotator, B: Number): Rotator
        fun InvertRotator(A: Rotator): Rotator
        fun Delta(A: Rotator, B: Rotator): Rotator
        fun NotEqual(A: Rotator, B: Rotator, ErrorTolerance: Number): Boolean
        fun Ease(A: Rotator, B: Rotator, Alpha: Number, bShortestPath: Boolean, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Rotator
        fun RInterpTo(Current: Rotator, Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
        fun RInterpTo_Constant(Current: Rotator, Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
        fun Lerp(A: Rotator, B: Rotator, Alpha: Number, bShortestPath: Boolean): Rotator
        fun SelectRotator(A: Rotator, B: Rotator, bPickA: Boolean): Rotator
        fun WeightedMovingAverageRotator(CurrentSample: Rotator, PreviousSample: Rotator, Weight: Number): Rotator
        fun IsValidAIRotation(Rotation: Rotator): Boolean
        fun GetOrientationAndPosition(DeviceRotation: Rotator = definedExternally, DevicePosition: Vector = definedExternally): `T$5`
        fun MakeRotator(Roll: Number, Pitch: Number, Yaw: Number): Rotator
        fun RandomRotator(bRoll: Boolean): Rotator
        fun RandomRotatorFromStream(bRoll: Boolean, Stream: RandomStream): Rotator
    }
}

external interface `T$6` {
    var SpringState: QuaternionSpringState
}

external open class QuaternionSpringState {
    open fun clone(): QuaternionSpringState
    open fun ResetQuaternionSpringState(): `T$6`
    open fun SetQuaternionSpringStateAngularVelocity(AngularVelocity: Vector = definedExternally): `T$6`

    companion object {
        fun C(Other: UObject): QuaternionSpringState
        fun C(Other: Any): QuaternionSpringState
        fun ResetQuaternionSpringState(SpringState: QuaternionSpringState = definedExternally): `T$6`
        fun SetQuaternionSpringStateAngularVelocity(SpringState: QuaternionSpringState = definedExternally, AngularVelocity: Vector = definedExternally): `T$6`
    }
}

external interface `T$7` {
    var X: Number
    var Y: Number
    var Z: Number
    var W: Number
}

external interface `T$8` {
    var A: Quat
}

external interface `T$9` {
    var Q: Quat
}

external interface `T$10` {
    var SpringState: QuaternionSpringState
    var `$`: Quat
}

external open class Quat {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open var W: Number
    open fun clone(): Quat
    open fun Add_QuatQuat(B: Quat): Quat
    open fun BreakQuat(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$7`
    open fun Equal(B: Quat, Tolerance: Number): Boolean
    open fun Multiply_QuatQuat(B: Quat): Quat
    open fun NotEqual(B: Quat, ErrorTolerance: Number): Boolean
    open fun AngularDistance(B: Quat): Number
    open fun EnsureShortestArcTo(B: Quat = definedExternally): `T$8`
    open fun Euler(): Vector
    open fun Exp(): Quat
    open fun Angle(): Number
    open fun AxisX(): Vector
    open fun AxisY(): Vector
    open fun AxisZ(): Vector
    open fun RotationAxis(): Vector
    open fun Inversed(): Quat
    open fun IsFinite(): Boolean
    open fun IsIdentity(Tolerance: Number): Boolean
    open fun Quat_IsNonFinite(): Boolean
    open fun IsNormalized(): Boolean
    open fun Log(): Quat
    open fun Normalize(Tolerance: Number = definedExternally): `T$9`
    open fun Normalized(Tolerance: Number): Quat
    open fun RotateVector(V: Vector): Vector
    open fun ToRotator(): Rotator
    open fun SetComponents(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$9`
    open fun SetfromEuler(Euler: Vector = definedExternally): `T$9`
    open fun Size(): Number
    open fun SizeSquared(): Number
    open fun UnrotateVector(V: Vector): Vector
    open fun VectorForward(): Vector
    open fun VectorRight(): Vector
    open fun VectorUp(): Vector
    open fun QuaternionSpringInterp(Target: Quat, SpringState: QuaternionSpringState = definedExternally, Stiffness: Number = definedExternally, CriticalDampingFactor: Number = definedExternally, DeltaTime: Number = definedExternally, Mass: Number = definedExternally, TargetVelocityAmount: Number = definedExternally, bInitializeFromTarget: Boolean = definedExternally): `T$10`
    open fun Subtract_QuatQuat(B: Quat): Quat

    companion object {
        fun C(Other: UObject): Quat
        fun C(Other: Any): Quat
        fun Add_QuatQuat(A: Quat, B: Quat): Quat
        fun BreakQuat(InQuat: Quat, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$7`
        fun Equal(A: Quat, B: Quat, Tolerance: Number): Boolean
        fun Multiply_QuatQuat(A: Quat, B: Quat): Quat
        fun NotEqual(A: Quat, B: Quat, ErrorTolerance: Number): Boolean
        fun AngularDistance(A: Quat, B: Quat): Number
        fun EnsureShortestArcTo(A: Quat = definedExternally, B: Quat = definedExternally): `T$8`
        fun Euler(Q: Quat): Vector
        fun Exp(Q: Quat): Quat
        fun Angle(Q: Quat): Number
        fun AxisX(Q: Quat): Vector
        fun AxisY(Q: Quat): Vector
        fun AxisZ(Q: Quat): Vector
        fun RotationAxis(Q: Quat): Vector
        fun Inversed(Q: Quat): Quat
        fun IsFinite(Q: Quat): Boolean
        fun IsIdentity(Q: Quat, Tolerance: Number): Boolean
        fun Quat_IsNonFinite(Q: Quat): Boolean
        fun IsNormalized(Q: Quat): Boolean
        fun Log(Q: Quat): Quat
        fun Normalize(Q: Quat = definedExternally, Tolerance: Number = definedExternally): `T$9`
        fun Normalized(Q: Quat, Tolerance: Number): Quat
        fun RotateVector(Q: Quat, V: Vector): Vector
        fun ToRotator(Q: Quat): Rotator
        fun SetComponents(Q: Quat = definedExternally, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$9`
        fun SetfromEuler(Q: Quat = definedExternally, Euler: Vector = definedExternally): `T$9`
        fun Size(Q: Quat): Number
        fun SizeSquared(Q: Quat): Number
        fun UnrotateVector(Q: Quat, V: Vector): Vector
        fun VectorForward(Q: Quat): Vector
        fun VectorRight(Q: Quat): Vector
        fun VectorUp(Q: Quat): Vector
        fun QuaternionSpringInterp(Current: Quat, Target: Quat, SpringState: QuaternionSpringState = definedExternally, Stiffness: Number = definedExternally, CriticalDampingFactor: Number = definedExternally, DeltaTime: Number = definedExternally, Mass: Number = definedExternally, TargetVelocityAmount: Number = definedExternally, bInitializeFromTarget: Boolean = definedExternally): `T$10`
        fun Subtract_QuatQuat(A: Quat, B: Quat): Quat
        fun MakeQuat(X: Number, Y: Number, Z: Number, W: Number): Quat
        fun Quat_Identity(): Quat
    }
}

external open class Plane : Vector {
    open var W: Number
    override fun clone(): Plane

    companion object {
        fun C(Other: UObject): Plane
        fun C(Other: Any): Plane
    }
}

external object EMatrixColumns {
    var First: String /* "First" */
    var Second: String /* "Second" */
    var Third: String /* "Third" */
    var Fourth: String /* "Fourth" */
    var EMatrixColumns_MAX: String /* "EMatrixColumns_MAX" */
}

external object EAxis {
    var None: String /* "None" */
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var EAxis_MAX: String /* "EAxis_MAX" */
}

external interface `T$11` {
    var X: Number
    var Y: Number
    var Z: Number
    var W: Number
}

external interface `T$12` {
    var A: Vector4
}

external open class Vector4 {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open var W: Number
    open fun clone(): Vector4
    open fun Add_Vector4Vector4(B: Vector4): Vector4
    open fun BreakVector4(X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally, W: Any = definedExternally): `T$11`
    open fun ToQuaternion(): Quat
    open fun ToRotation(): Rotator
    open fun ToVector(): Vector
    open fun Divide_Vector4Vector4(B: Vector4): Vector4
    open fun Equal(B: Vector4, ErrorTolerance: Number): Boolean
    open fun EqualExactly(B: Vector4): Boolean
    open fun Multiply_Vector4Vector4(B: Vector4): Vector4
    open fun NotEqual(B: Vector4, ErrorTolerance: Number): Boolean
    open fun NotEqualExactly(B: Vector4): Boolean
    open fun Subtract_Vector4Vector4(B: Vector4): Vector4
    open fun Vector4_Assign(InVector: Vector4 = definedExternally): `T$12`
    open fun CrossProductXYZ(B: Vector4): Vector4
    open fun DotProduct(B: Vector4): Any
    open fun DotProductXYZ(B: Vector4): Any
    open fun Vector4_IsNAN(): Boolean
    open fun Vector4_IsNearlyZero3(Tolerance: Number): Boolean
    open fun IsNormalXYZ(): Boolean
    open fun IsUnitXYZ(SquaredLenthTolerance: Number): Boolean
    open fun Vector4_IsZero(): Boolean
    open fun Vector4_MirrorByVector3(SurfaceNormal: Vector4): Vector4
    open fun Negated(): Vector4
    open fun NormalizeXYZ(Tolerance: Number): Vector4
    open fun NormalizeInPlaceXYZ(Tolerance: Number = definedExternally): `T$12`
    open fun NormalUnsafeXYZ(): Vector4
    open fun Vector4_Set(X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally, W: Any = definedExternally): `T$12`
    open fun Length(): Any
    open fun LengthXYZ(): Any
    open fun LengthSquared(): Any
    open fun LengthXYZSquared(): Any

    companion object {
        fun C(Other: UObject): Vector4
        fun C(Other: Any): Vector4
        fun Add_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun BreakVector4(InVec: Vector4, X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally, W: Any = definedExternally): `T$11`
        fun ToQuaternion(InVec: Vector4): Quat
        fun ToRotation(InVec: Vector4): Rotator
        fun ToVector(InVector4: Vector4): Vector
        fun Divide_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun Equal(A: Vector4, B: Vector4, ErrorTolerance: Number): Boolean
        fun EqualExactly(A: Vector4, B: Vector4): Boolean
        fun Multiply_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun NotEqual(A: Vector4, B: Vector4, ErrorTolerance: Number): Boolean
        fun NotEqualExactly(A: Vector4, B: Vector4): Boolean
        fun Subtract_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun Vector4_Assign(A: Vector4 = definedExternally, InVector: Vector4 = definedExternally): `T$12`
        fun CrossProductXYZ(A: Vector4, B: Vector4): Vector4
        fun DotProduct(A: Vector4, B: Vector4): Any
        fun DotProductXYZ(A: Vector4, B: Vector4): Any
        fun Vector4_IsNAN(A: Vector4): Boolean
        fun Vector4_IsNearlyZero3(A: Vector4, Tolerance: Number): Boolean
        fun IsNormalXYZ(A: Vector4): Boolean
        fun IsUnitXYZ(A: Vector4, SquaredLenthTolerance: Number): Boolean
        fun Vector4_IsZero(A: Vector4): Boolean
        fun Vector4_MirrorByVector3(Direction: Vector4, SurfaceNormal: Vector4): Vector4
        fun Negated(A: Vector4): Vector4
        fun NormalizeXYZ(A: Vector4, Tolerance: Number): Vector4
        fun NormalizeInPlaceXYZ(A: Vector4 = definedExternally, Tolerance: Number = definedExternally): `T$12`
        fun NormalUnsafeXYZ(A: Vector4): Vector4
        fun Vector4_Set(A: Vector4 = definedExternally, X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally, W: Any = definedExternally): `T$12`
        fun Length(A: Vector4): Any
        fun LengthXYZ(A: Vector4): Any
        fun LengthSquared(A: Vector4): Any
        fun LengthXYZSquared(A: Vector4): Any
        fun MakeVector4(X: Any, Y: Any, Z: Any, W: Any): Vector4
        fun Vector4_Zero(): Vector4
    }
}

external interface `T$13` {
    var OutPlane: Plane
    var `$`: Boolean
}

external interface `T$14` {
    var M: Matrix
}

external open class Matrix {
    open var XPlane: Plane
    open var YPlane: Plane
    open var ZPlane: Plane
    open var WPlane: Plane
    open fun clone(): Matrix
    open fun ToString(): String
    open fun Add_MatrixMatrix(B: Matrix): Matrix
    open fun ToRotator(): Rotator
    open fun ToTransform(): Transform
    open fun Equal(B: Matrix, Tolerance: Number): Boolean
    open fun ApplyScale(Scale: Number): Matrix
    open fun ConcatenateTranslation(Translation: Vector): Matrix
    open fun ContainsNaN(): Boolean
    open fun GetColumn(Column: String /* "First" | "Second" | "Third" | "Fourth" | "EMatrixColumns_MAX" */): Vector
    open fun GetDeterminant(): Number
    open fun GetFrustumBottomPlane(OutPlane: Plane = definedExternally): `T$13`
    open fun GetFrustumFarPlane(OutPlane: Plane = definedExternally): `T$13`
    open fun GetFrustumLeftPlane(OutPlane: Plane = definedExternally): `T$13`
    open fun GetFrustumNearPlane(OutPlane: Plane = definedExternally): `T$13`
    open fun GetFrustumRightPlane(OutPlane: Plane = definedExternally): `T$13`
    open fun GetFrustumTopPlane(OutPlane: Plane = definedExternally): `T$13`
    open fun GetInverse(): Matrix
    open fun GetMatrixWithoutScale(Tolerance: Number): Matrix
    open fun GetMaximumAxisScale(): Number
    open fun GetOrigin(): Vector
    open fun GetRotator(): Rotator
    open fun GetRotationDeterminant(): Number
    open fun GetScaledAxes(X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
    open fun GetScaledAxis(Axis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */): Vector
    open fun GetScaleVector(Tolerance: Number): Vector
    open fun GetTransposeAdjoint(): Matrix
    open fun GetTransposed(): Matrix
    open fun GetUnitAxes(X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
    open fun GetUnitAxis(Axis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */): Vector
    open fun InverseTransformPosition(V: Vector): Vector
    open fun InverseTransformVector(V: Vector): Vector
    open fun Mirror(MirrorAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */, FlipAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */): Matrix
    open fun RemoveScaling(Tolerance: Number = definedExternally): `T$14`
    open fun RemoveTranslation(): Matrix
    open fun ScaleTranslation(Scale3D: Vector): Matrix
    open fun SetAxis(Axis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */ = definedExternally, AxisVector: Vector = definedExternally): `T$14`
    open fun SetColumn(Column: String /* "First" | "Second" | "Third" | "Fourth" | "EMatrixColumns_MAX" */ = definedExternally, Value: Vector = definedExternally): `T$14`
    open fun SetOrigin(NewOrigin: Vector = definedExternally): `T$14`
    open fun ToQuat(): Quat
    open fun TransformPosition(V: Vector): Vector4
    open fun TransformVector(V: Vector): Vector4
    open fun TransformVector4(V: Vector4): Vector4
    open fun Multiply_MatrixFloat(B: Any): Matrix
    open fun Multiply_MatrixMatrix(B: Matrix): Matrix
    open fun NotEqual(B: Matrix, Tolerance: Number): Boolean
    open fun TransformVector4byMatrix(Vec4: Vector4): Vector4

    companion object {
        fun C(Other: UObject): Matrix
        fun C(Other: Any): Matrix
        fun ToString(InMatrix: Matrix): String
        fun Add_MatrixMatrix(A: Matrix, B: Matrix): Matrix
        fun ToRotator(InMatrix: Matrix): Rotator
        fun ToTransform(InMatrix: Matrix): Transform
        fun Equal(A: Matrix, B: Matrix, Tolerance: Number): Boolean
        fun ApplyScale(M: Matrix, Scale: Number): Matrix
        fun ConcatenateTranslation(M: Matrix, Translation: Vector): Matrix
        fun ContainsNaN(M: Matrix): Boolean
        fun GetColumn(M: Matrix, Column: String /* "First" | "Second" | "Third" | "Fourth" | "EMatrixColumns_MAX" */): Vector
        fun GetDeterminant(M: Matrix): Number
        fun GetFrustumBottomPlane(M: Matrix, OutPlane: Plane = definedExternally): `T$13`
        fun GetFrustumFarPlane(M: Matrix, OutPlane: Plane = definedExternally): `T$13`
        fun GetFrustumLeftPlane(M: Matrix, OutPlane: Plane = definedExternally): `T$13`
        fun GetFrustumNearPlane(M: Matrix, OutPlane: Plane = definedExternally): `T$13`
        fun GetFrustumRightPlane(M: Matrix, OutPlane: Plane = definedExternally): `T$13`
        fun GetFrustumTopPlane(M: Matrix, OutPlane: Plane = definedExternally): `T$13`
        fun GetInverse(M: Matrix): Matrix
        fun GetMatrixWithoutScale(M: Matrix, Tolerance: Number): Matrix
        fun GetMaximumAxisScale(M: Matrix): Number
        fun GetOrigin(InMatrix: Matrix): Vector
        fun GetRotator(M: Matrix): Rotator
        fun GetRotationDeterminant(M: Matrix): Number
        fun GetScaledAxes(M: Matrix, X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
        fun GetScaledAxis(M: Matrix, Axis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */): Vector
        fun GetScaleVector(M: Matrix, Tolerance: Number): Vector
        fun GetTransposeAdjoint(M: Matrix): Matrix
        fun GetTransposed(M: Matrix): Matrix
        fun GetUnitAxes(M: Matrix, X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$4`
        fun GetUnitAxis(M: Matrix, Axis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */): Vector
        fun InverseTransformPosition(M: Matrix, V: Vector): Vector
        fun InverseTransformVector(M: Matrix, V: Vector): Vector
        fun Mirror(M: Matrix, MirrorAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */, FlipAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */): Matrix
        fun RemoveScaling(M: Matrix = definedExternally, Tolerance: Number = definedExternally): `T$14`
        fun RemoveTranslation(M: Matrix): Matrix
        fun ScaleTranslation(M: Matrix, Scale3D: Vector): Matrix
        fun SetAxis(M: Matrix = definedExternally, Axis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */ = definedExternally, AxisVector: Vector = definedExternally): `T$14`
        fun SetColumn(M: Matrix = definedExternally, Column: String /* "First" | "Second" | "Third" | "Fourth" | "EMatrixColumns_MAX" */ = definedExternally, Value: Vector = definedExternally): `T$14`
        fun SetOrigin(M: Matrix = definedExternally, NewOrigin: Vector = definedExternally): `T$14`
        fun ToQuat(M: Matrix): Quat
        fun TransformPosition(M: Matrix, V: Vector): Vector4
        fun TransformVector(M: Matrix, V: Vector): Vector4
        fun TransformVector4(M: Matrix, V: Vector4): Vector4
        fun Multiply_MatrixFloat(A: Matrix, B: Any): Matrix
        fun Multiply_MatrixMatrix(A: Matrix, B: Matrix): Matrix
        fun NotEqual(A: Matrix, B: Matrix, Tolerance: Number): Boolean
        fun TransformVector4byMatrix(Matrix: Matrix, Vec4: Vector4): Vector4
        fun Identity(): Matrix
    }
}

external object ELerpInterpolationMode {
    var QuatInterp: String /* "QuatInterp" */
    var EulerInterp: String /* "EulerInterp" */
    var DualQuatInterp: String /* "DualQuatInterp" */
    var ELerpInterpolationMode_MAX: String /* "ELerpInterpolationMode_MAX" */
}

external interface `T$15` {
    var Location: Vector
    var Rotation: Rotator
    var Scale: Vector
}

external interface `T$16` {
    var AlignmentTransform: Transform
}

external open class Transform {
    open var Rotation: Quat
    open var Translation: Vector
    open var Scale3D: Vector
    open fun clone(): Transform
    open fun ToText(): String
    open fun ToString(): String
    open fun BreakTransform(Location: Vector = definedExternally, Rotation: Rotator = definedExternally, Scale: Vector = definedExternally): `T$15`
    open fun ComposeTransforms(B: Transform): Transform
    open fun ToMatrix(): Matrix
    open fun ConvertTransformToRelative(ParentTransform: Transform): Transform
    open fun Equal(B: Transform): Boolean
    open fun FindRelativeLookAtRotation(TargetLocation: Vector): Rotator
    open fun InverseTransformDirection(Direction: Vector): Vector
    open fun InverseTransformLocation(Location: Vector): Vector
    open fun InverseTransformRotation(Rotation: Rotator): Rotator
    open fun InvertTransform(): Transform
    open fun MakeRelativeTransform(RelativeTo: Transform): Transform
    open fun NearlyEqual(B: Transform, LocationTolerance: Number, RotationTolerance: Number, Scale3DTolerance: Number): Boolean
    open fun SelectTransform(B: Transform, bPickA: Boolean): Transform
    open fun Ease(B: Transform, Alpha: Number, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Transform
    open fun TInterpTo(Target: Transform, DeltaTime: Number, InterpSpeed: Number): Transform
    open fun Lerp(B: Transform, Alpha: Number, InterpMode: String /* "QuatInterp" | "EulerInterp" | "DualQuatInterp" | "ELerpInterpolationMode_MAX" */): Transform
    open fun Determinant(): Number
    open fun TransformDirection(Direction: Vector): Vector
    open fun TransformLocation(Location: Vector): Vector
    open fun TransformRotation(Rotation: Rotator): Rotator
    open fun LookAtFunction(TargetPosition: Vector, LookAtVector: Vector, bUseUpVector: Boolean, UpVector: Vector, ClampConeInDegree: Number): Transform
    open fun CalibrateExternalTrackingToHMD()
    open fun UpdateExternalTrackingHMDPosition()
    open fun AddTrackedPointWithName(PointName: String, bDeletePointsWithSameName: Boolean): Boolean
    open fun CalculateAlignmentTransform(TransformInSecondCoordinateSystem: Transform, AlignmentTransform: Transform = definedExternally): `T$16`
    open fun SetARAlignmentTransform()

    companion object {
        fun C(Other: UObject): Transform
        fun C(Other: Any): Transform
        fun ToText(InTrans: Transform): String
        fun ToString(InTrans: Transform): String
        fun BreakTransform(InTransform: Transform, Location: Vector = definedExternally, Rotation: Rotator = definedExternally, Scale: Vector = definedExternally): `T$15`
        fun ComposeTransforms(A: Transform, B: Transform): Transform
        fun ToMatrix(Transform: Transform): Matrix
        fun ConvertTransformToRelative(Transform: Transform, ParentTransform: Transform): Transform
        fun Equal(A: Transform, B: Transform): Boolean
        fun FindRelativeLookAtRotation(StartTransform: Transform, TargetLocation: Vector): Rotator
        fun InverseTransformDirection(T: Transform, Direction: Vector): Vector
        fun InverseTransformLocation(T: Transform, Location: Vector): Vector
        fun InverseTransformRotation(T: Transform, Rotation: Rotator): Rotator
        fun InvertTransform(T: Transform): Transform
        fun MakeRelativeTransform(A: Transform, RelativeTo: Transform): Transform
        fun NearlyEqual(A: Transform, B: Transform, LocationTolerance: Number, RotationTolerance: Number, Scale3DTolerance: Number): Boolean
        fun SelectTransform(A: Transform, B: Transform, bPickA: Boolean): Transform
        fun Ease(A: Transform, B: Transform, Alpha: Number, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Transform
        fun TInterpTo(Current: Transform, Target: Transform, DeltaTime: Number, InterpSpeed: Number): Transform
        fun Lerp(A: Transform, B: Transform, Alpha: Number, InterpMode: String /* "QuatInterp" | "EulerInterp" | "DualQuatInterp" | "ELerpInterpolationMode_MAX" */): Transform
        fun Determinant(Transform: Transform): Number
        fun TransformDirection(T: Transform, Direction: Vector): Vector
        fun TransformLocation(T: Transform, Location: Vector): Vector
        fun TransformRotation(T: Transform, Rotation: Rotator): Rotator
        fun LookAtFunction(CurrentTransform: Transform, TargetPosition: Vector, LookAtVector: Vector, bUseUpVector: Boolean, UpVector: Vector, ClampConeInDegree: Number): Transform
        fun CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform)
        fun UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform)
        fun AddTrackedPointWithName(WorldTransform: Transform, PointName: String, bDeletePointsWithSameName: Boolean): Boolean
        fun CalculateAlignmentTransform(TransformInFirstCoordinateSystem: Transform, TransformInSecondCoordinateSystem: Transform, AlignmentTransform: Transform = definedExternally): `T$16`
        fun SetARAlignmentTransform(InAlignmentTransform: Transform)
        fun GetAlignmentTransform(): Transform
    }
}

external object EARTrackingState {
    var Unknown: String /* "Unknown" */
    var Tracking: String /* "Tracking" */
    var NotTracking: String /* "NotTracking" */
    var StoppedTracking: String /* "StoppedTracking" */
    var EARTrackingState_MAX: String /* "EARTrackingState_MAX" */
}

external object EComponentMobility {
    var Static: String /* "Static" */
    var Stationary: String /* "Stationary" */
    var Movable: String /* "Movable" */
    var EComponentMobility_MAX: String /* "EComponentMobility_MAX" */
}

external object EDetailMode {
    var DM_Low: String /* "DM_Low" */
    var DM_Medium: String /* "DM_Medium" */
    var DM_High: String /* "DM_High" */
    var DM_MAX: String /* "DM_MAX" */
}

external object EBrushType {
    var Brush_Default: String /* "Brush_Default" */
    var Brush_Add: String /* "Brush_Add" */
    var Brush_Subtract: String /* "Brush_Subtract" */
    var Brush_MAX: String /* "Brush_MAX" */
}

external interface `T$17` {
    var R: Number
    var G: Number
    var B: Number
    var A: Number
}

external interface `T$18` {
    var RGB: LinearColor
}

external interface `T$19` {
    var InOutColor: LinearColor
}

external interface `T$20` {
    var H: Number
    var S: Number
    var V: Number
    var A: Number
}

external interface `T$21` {
    var HSV: LinearColor
}

external open class LinearColor {
    open var R: Number
    open var G: Number
    open var B: Number
    open var A: Number
    open fun clone(): LinearColor
    open fun ToText(): String
    open fun ToString(): String
    open fun Add_LinearColorLinearColor(B: LinearColor): LinearColor
    open fun BreakColor(R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$17`
    open fun Interpolate(Target: LinearColor, DeltaTime: Number, InterpSpeed: Number): LinearColor
    open fun ToColor(InUseSRGB: Boolean): Color
    open fun ToVector(): Vector
    open fun Divide_LinearColorLinearColor(B: LinearColor): LinearColor
    open fun Equal(B: LinearColor): Boolean
    open fun HSVtoRGB(RGB: LinearColor = definedExternally): `T$18`
    open fun HSVtoRGBlinearcolor(): LinearColor
    open fun Desaturate(InDesaturation: Number): LinearColor
    open fun Distance(C2: LinearColor): Number
    open fun Luminance(): Number
    open fun Max(): Number
    open fun Min(): Number
    open fun NearEqual(B: LinearColor, Tolerance: Number): Boolean
    open fun LinearColor_Quantize(): Color
    open fun LinearColor_QuantizeRound(): Color
    open fun LinearColor_Set(InColor: LinearColor = definedExternally): `T$19`
    open fun LinearColor_SetFromHSV(H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$19`
    open fun LinearColor_SetFromPow22(InColor: Color = definedExternally): `T$19`
    open fun LinearColor_SetFromSRGB(InSRGB: Color = definedExternally): `T$19`
    open fun LinearColor_SetRandomHue(): `T$19`
    open fun LinearColor_SetRGBA(R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$19`
    open fun LinearColor_SetTemperature(InTemperature: Number = definedExternally): `T$19`
    open fun NewOpacity(InOpacity: Number): LinearColor
    open fun ToRGBE(): Color
    open fun Lerp(B: LinearColor, Alpha: Number): LinearColor
    open fun LerpUsingHSV(B: LinearColor, Alpha: Number): LinearColor
    open fun Multiply_LinearColorFloat(B: Number): LinearColor
    open fun Multiply_LinearColorLinearColor(B: LinearColor): LinearColor
    open fun NotEqual(B: LinearColor): Boolean
    open fun RGBtoHSV(): LinearColor
    open fun RGBToHSV(H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$20`
    open fun RGBtoHSV(HSV: LinearColor = definedExternally): `T$21`
    open fun SelectColor(B: LinearColor, bPickA: Boolean): LinearColor
    open fun Subtract_LinearColorLinearColor(B: LinearColor): LinearColor

    companion object {
        fun C(Other: UObject): LinearColor
        fun C(Other: Any): LinearColor
        fun ToText(InColor: LinearColor): String
        fun ToString(InColor: LinearColor): String
        fun Add_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun BreakColor(InColor: LinearColor, R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$17`
        fun Interpolate(Current: LinearColor, Target: LinearColor, DeltaTime: Number, InterpSpeed: Number): LinearColor
        fun ToColor(InLinearColor: LinearColor, InUseSRGB: Boolean): Color
        fun ToVector(InLinearColor: LinearColor): Vector
        fun Divide_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun Equal(A: LinearColor, B: LinearColor): Boolean
        fun HSVtoRGB(HSV: LinearColor, RGB: LinearColor = definedExternally): `T$18`
        fun HSVtoRGBlinearcolor(HSV: LinearColor): LinearColor
        fun Desaturate(InColor: LinearColor, InDesaturation: Number): LinearColor
        fun Distance(C1: LinearColor, C2: LinearColor): Number
        fun Luminance(InColor: LinearColor): Number
        fun Max(InColor: LinearColor): Number
        fun Min(InColor: LinearColor): Number
        fun NearEqual(A: LinearColor, B: LinearColor, Tolerance: Number): Boolean
        fun LinearColor_Quantize(InColor: LinearColor): Color
        fun LinearColor_QuantizeRound(InColor: LinearColor): Color
        fun LinearColor_Set(InOutColor: LinearColor = definedExternally, InColor: LinearColor = definedExternally): `T$19`
        fun LinearColor_SetFromHSV(InOutColor: LinearColor = definedExternally, H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$19`
        fun LinearColor_SetFromPow22(InOutColor: LinearColor = definedExternally, InColor: Color = definedExternally): `T$19`
        fun LinearColor_SetFromSRGB(InOutColor: LinearColor = definedExternally, InSRGB: Color = definedExternally): `T$19`
        fun LinearColor_SetRandomHue(InOutColor: LinearColor = definedExternally): `T$19`
        fun LinearColor_SetRGBA(InOutColor: LinearColor = definedExternally, R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$19`
        fun LinearColor_SetTemperature(InOutColor: LinearColor = definedExternally, InTemperature: Number = definedExternally): `T$19`
        fun NewOpacity(InColor: LinearColor, InOpacity: Number): LinearColor
        fun ToRGBE(InLinearColor: LinearColor): Color
        fun Lerp(A: LinearColor, B: LinearColor, Alpha: Number): LinearColor
        fun LerpUsingHSV(A: LinearColor, B: LinearColor, Alpha: Number): LinearColor
        fun Multiply_LinearColorFloat(A: LinearColor, B: Number): LinearColor
        fun Multiply_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun NotEqual(A: LinearColor, B: LinearColor): Boolean
        fun RGBtoHSV(RGB: LinearColor): LinearColor
        fun RGBToHSV(InColor: LinearColor, H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$20`
        fun RGBtoHSV(RGB: LinearColor, HSV: LinearColor = definedExternally): `T$21`
        fun SelectColor(A: LinearColor, B: LinearColor, bPickA: Boolean): LinearColor
        fun Subtract_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun ToLinearColor(InDouble: Any): LinearColor
        fun ToLinearColor(InFloat: Number): LinearColor
        fun HSVToRGB(H: Number, S: Number, V: Number, A: Number): LinearColor
        fun LinearColor_Black(): LinearColor
        fun LinearColor_Blue(): LinearColor
        fun LinearColor_Gray(): LinearColor
        fun LinearColor_Green(): LinearColor
        fun LinearColor_Red(): LinearColor
        fun LinearColor_Transparent(): LinearColor
        fun LinearColor_White(): LinearColor
        fun LinearColor_Yellow(): LinearColor
        fun MakeColor(R: Number, G: Number, B: Number, A: Number): LinearColor
    }
}

external open class Color {
    open var B: Number
    open var G: Number
    open var R: Number
    open var A: Number
    open fun clone(): Color
    open fun ToLinearColor(): LinearColor

    companion object {
        fun C(Other: UObject): Color
        fun C(Other: Any): Color
        fun ToLinearColor(InColor: Color): LinearColor
    }
}

external open class Model : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Model
        fun Find(Outer: UObject, ResourceName: String): Model
        fun GetDefaultObject(): Model
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Model
        fun C(Other: UObject): Model
        fun C(Other: Any): Model
    }
}

external object EPhysicsType {
    var PhysType_Default: String /* "PhysType_Default" */
    var PhysType_Kinematic: String /* "PhysType_Kinematic" */
    var PhysType_Simulated: String /* "PhysType_Simulated" */
    var PhysType_MAX: String /* "PhysType_MAX" */
}

external object ECollisionTraceFlag {
    var CTF_UseDefault: String /* "CTF_UseDefault" */
    var CTF_UseSimpleAndComplex: String /* "CTF_UseSimpleAndComplex" */
    var CTF_UseSimpleAsComplex: String /* "CTF_UseSimpleAsComplex" */
    var CTF_UseComplexAsSimple: String /* "CTF_UseComplexAsSimple" */
    var CTF_MAX: String /* "CTF_MAX" */
}

external object EBodyCollisionResponse {
    var BodyCollision_Enabled: String /* "BodyCollision_Enabled" */
    var BodyCollision_Disabled: String /* "BodyCollision_Disabled" */
    var BodyCollision_MAX: String /* "BodyCollision_MAX" */
}

external open class BodySetupCore : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BoneName: String
    open var PhysicsType: String /* "PhysType_Default" | "PhysType_Kinematic" | "PhysType_Simulated" | "PhysType_MAX" */
    open var CollisionTraceFlag: String /* "CTF_UseDefault" | "CTF_UseSimpleAndComplex" | "CTF_UseSimpleAsComplex" | "CTF_UseComplexAsSimple" | "CTF_MAX" */
    open var CollisionReponse: String /* "BodyCollision_Enabled" | "BodyCollision_Disabled" | "BodyCollision_MAX" */

    companion object {
        fun Load(ResourceName: String): BodySetupCore
        fun Find(Outer: UObject, ResourceName: String): BodySetupCore
        fun GetDefaultObject(): BodySetupCore
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BodySetupCore
        fun C(Other: UObject): BodySetupCore
        fun C(Other: Any): BodySetupCore
    }
}

external object ECollisionEnabled {
    var NoCollision: String /* "NoCollision" */
    var QueryOnly: String /* "QueryOnly" */
    var PhysicsOnly: String /* "PhysicsOnly" */
    var QueryAndPhysics: String /* "QueryAndPhysics" */
    var ECollisionEnabled_MAX: String /* "ECollisionEnabled_MAX" */
}

external open class KShapeElem {
    open var RestOffset: Number
    open var bIsGenerated: Boolean
    open var Name: String
    open var bContributeToMass: Boolean
    open var CollisionEnabled: String /* "NoCollision" | "QueryOnly" | "PhysicsOnly" | "QueryAndPhysics" | "ECollisionEnabled_MAX" */
    open fun clone(): KShapeElem

    companion object {
        fun C(Other: UObject): KShapeElem
        fun C(Other: Any): KShapeElem
    }
}

external open class KSphereElem : KShapeElem {
    open var TM: Matrix
    open var Center: Vector
    open var Radius: Number
    override fun clone(): KSphereElem

    companion object {
        fun C(Other: UObject): KSphereElem
        fun C(Other: Any): KSphereElem
    }
}

external open class KBoxElem : KShapeElem {
    open var TM: Matrix
    open var Orientation: Quat
    open var Center: Vector
    open var Rotation: Rotator
    open var X: Number
    open var Y: Number
    open var Z: Number
    override fun clone(): KBoxElem

    companion object {
        fun C(Other: UObject): KBoxElem
        fun C(Other: Any): KBoxElem
    }
}

external open class KSphylElem : KShapeElem {
    open var TM: Matrix
    open var Orientation: Quat
    open var Center: Vector
    open var Rotation: Rotator
    open var Radius: Number
    open var Length: Number
    override fun clone(): KSphylElem

    companion object {
        fun C(Other: UObject): KSphylElem
        fun C(Other: Any): KSphylElem
    }
}

external open class Box {
    open var Min: Vector
    open var Max: Vector
    open var IsValid: Number
    open fun clone(): Box

    companion object {
        fun C(Other: UObject): Box
        fun C(Other: Any): Box
    }
}

external open class KConvexElem : KShapeElem {
    open var VertexData: Array<Vector>
    open var IndexData: Array<Number>
    open var ElemBox: Box
    open var Transform: Transform
    override fun clone(): KConvexElem

    companion object {
        fun C(Other: UObject): KConvexElem
        fun C(Other: Any): KConvexElem
    }
}

external open class KTaperedCapsuleElem : KShapeElem {
    open var Center: Vector
    open var Rotation: Rotator
    open var Radius0: Number
    open var Radius1: Number
    open var Length: Number
    override fun clone(): KTaperedCapsuleElem

    companion object {
        fun C(Other: UObject): KTaperedCapsuleElem
        fun C(Other: Any): KTaperedCapsuleElem
    }
}

external open class KAggregateGeom {
    open var SphereElems: Array<KSphereElem>
    open var BoxElems: Array<KBoxElem>
    open var SphylElems: Array<KSphylElem>
    open var ConvexElems: Array<KConvexElem>
    open var TaperedCapsuleElems: Array<KTaperedCapsuleElem>
    open fun clone(): KAggregateGeom

    companion object {
        fun C(Other: UObject): KAggregateGeom
        fun C(Other: Any): KAggregateGeom
    }
}

external object EFrictionCombineMode {
    var Average: String /* "Average" */
    var Min: String /* "Min" */
    var Multiply: String /* "Multiply" */
    var Max: String /* "Max" */
    var EFrictionCombineMode_MAX: String /* "EFrictionCombineMode_MAX" */
}

external open class PhysicalMaterialPropertyBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PhysicalMaterialPropertyBase
        fun Find(Outer: UObject, ResourceName: String): PhysicalMaterialPropertyBase
        fun GetDefaultObject(): PhysicalMaterialPropertyBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicalMaterialPropertyBase
        fun C(Other: UObject): PhysicalMaterialPropertyBase
        fun C(Other: Any): PhysicalMaterialPropertyBase
    }
}

external object EPhysicalSurface {
    var SurfaceType_Default: String /* "SurfaceType_Default" */
    var SurfaceType1: String /* "SurfaceType1" */
    var SurfaceType2: String /* "SurfaceType2" */
    var SurfaceType3: String /* "SurfaceType3" */
    var SurfaceType4: String /* "SurfaceType4" */
    var SurfaceType5: String /* "SurfaceType5" */
    var SurfaceType6: String /* "SurfaceType6" */
    var SurfaceType7: String /* "SurfaceType7" */
    var SurfaceType8: String /* "SurfaceType8" */
    var SurfaceType9: String /* "SurfaceType9" */
    var SurfaceType10: String /* "SurfaceType10" */
    var SurfaceType11: String /* "SurfaceType11" */
    var SurfaceType12: String /* "SurfaceType12" */
    var SurfaceType13: String /* "SurfaceType13" */
    var SurfaceType14: String /* "SurfaceType14" */
    var SurfaceType15: String /* "SurfaceType15" */
    var SurfaceType16: String /* "SurfaceType16" */
    var SurfaceType17: String /* "SurfaceType17" */
    var SurfaceType18: String /* "SurfaceType18" */
    var SurfaceType19: String /* "SurfaceType19" */
    var SurfaceType20: String /* "SurfaceType20" */
    var SurfaceType21: String /* "SurfaceType21" */
    var SurfaceType22: String /* "SurfaceType22" */
    var SurfaceType23: String /* "SurfaceType23" */
    var SurfaceType24: String /* "SurfaceType24" */
    var SurfaceType25: String /* "SurfaceType25" */
    var SurfaceType26: String /* "SurfaceType26" */
    var SurfaceType27: String /* "SurfaceType27" */
    var SurfaceType28: String /* "SurfaceType28" */
    var SurfaceType29: String /* "SurfaceType29" */
    var SurfaceType30: String /* "SurfaceType30" */
    var SurfaceType31: String /* "SurfaceType31" */
    var SurfaceType32: String /* "SurfaceType32" */
    var SurfaceType33: String /* "SurfaceType33" */
    var SurfaceType34: String /* "SurfaceType34" */
    var SurfaceType35: String /* "SurfaceType35" */
    var SurfaceType36: String /* "SurfaceType36" */
    var SurfaceType37: String /* "SurfaceType37" */
    var SurfaceType38: String /* "SurfaceType38" */
    var SurfaceType39: String /* "SurfaceType39" */
    var SurfaceType40: String /* "SurfaceType40" */
    var SurfaceType41: String /* "SurfaceType41" */
    var SurfaceType42: String /* "SurfaceType42" */
    var SurfaceType43: String /* "SurfaceType43" */
    var SurfaceType44: String /* "SurfaceType44" */
    var SurfaceType45: String /* "SurfaceType45" */
    var SurfaceType46: String /* "SurfaceType46" */
    var SurfaceType47: String /* "SurfaceType47" */
    var SurfaceType48: String /* "SurfaceType48" */
    var SurfaceType49: String /* "SurfaceType49" */
    var SurfaceType50: String /* "SurfaceType50" */
    var SurfaceType51: String /* "SurfaceType51" */
    var SurfaceType52: String /* "SurfaceType52" */
    var SurfaceType53: String /* "SurfaceType53" */
    var SurfaceType54: String /* "SurfaceType54" */
    var SurfaceType55: String /* "SurfaceType55" */
    var SurfaceType56: String /* "SurfaceType56" */
    var SurfaceType57: String /* "SurfaceType57" */
    var SurfaceType58: String /* "SurfaceType58" */
    var SurfaceType59: String /* "SurfaceType59" */
    var SurfaceType60: String /* "SurfaceType60" */
    var SurfaceType61: String /* "SurfaceType61" */
    var SurfaceType62: String /* "SurfaceType62" */
    var SurfaceType_Max: String /* "SurfaceType_Max" */
    var EPhysicalSurface_MAX: String /* "EPhysicalSurface_MAX" */
}

external open class PhysicalMaterial : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Friction: Number
    open var StaticFriction: Number
    open var FrictionCombineMode: String /* "Average" | "Min" | "Multiply" | "Max" | "EFrictionCombineMode_MAX" */
    open var bOverrideFrictionCombineMode: Boolean
    open var Restitution: Number
    open var RestitutionCombineMode: String /* "Average" | "Min" | "Multiply" | "Max" | "EFrictionCombineMode_MAX" */
    open var bOverrideRestitutionCombineMode: Boolean
    open var Density: Number
    open var SleepLinearVelocityThreshold: Number
    open var SleepAngularVelocityThreshold: Number
    open var SleepCounterThreshold: Number
    open var RaiseMassToPower: Number
    open var DestructibleDamageThresholdScale: Number
    open var PhysicalMaterialProperty: PhysicalMaterialPropertyBase
    open var SurfaceType: String /* "SurfaceType_Default" | "SurfaceType1" | "SurfaceType2" | "SurfaceType3" | "SurfaceType4" | "SurfaceType5" | "SurfaceType6" | "SurfaceType7" | "SurfaceType8" | "SurfaceType9" | "SurfaceType10" | "SurfaceType11" | "SurfaceType12" | "SurfaceType13" | "SurfaceType14" | "SurfaceType15" | "SurfaceType16" | "SurfaceType17" | "SurfaceType18" | "SurfaceType19" | "SurfaceType20" | "SurfaceType21" | "SurfaceType22" | "SurfaceType23" | "SurfaceType24" | "SurfaceType25" | "SurfaceType26" | "SurfaceType27" | "SurfaceType28" | "SurfaceType29" | "SurfaceType30" | "SurfaceType31" | "SurfaceType32" | "SurfaceType33" | "SurfaceType34" | "SurfaceType35" | "SurfaceType36" | "SurfaceType37" | "SurfaceType38" | "SurfaceType39" | "SurfaceType40" | "SurfaceType41" | "SurfaceType42" | "SurfaceType43" | "SurfaceType44" | "SurfaceType45" | "SurfaceType46" | "SurfaceType47" | "SurfaceType48" | "SurfaceType49" | "SurfaceType50" | "SurfaceType51" | "SurfaceType52" | "SurfaceType53" | "SurfaceType54" | "SurfaceType55" | "SurfaceType56" | "SurfaceType57" | "SurfaceType58" | "SurfaceType59" | "SurfaceType60" | "SurfaceType61" | "SurfaceType62" | "SurfaceType_Max" | "EPhysicalSurface_MAX" */

    companion object {
        fun Load(ResourceName: String): PhysicalMaterial
        fun Find(Outer: UObject, ResourceName: String): PhysicalMaterial
        fun GetDefaultObject(): PhysicalMaterial
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicalMaterial
        fun C(Other: UObject): PhysicalMaterial
        fun C(Other: Any): PhysicalMaterial
    }
}

external object EWalkableSlopeBehavior {
    var WalkableSlope_Default: String /* "WalkableSlope_Default" */
    var WalkableSlope_Increase: String /* "WalkableSlope_Increase" */
    var WalkableSlope_Decrease: String /* "WalkableSlope_Decrease" */
    var WalkableSlope_Unwalkable: String /* "WalkableSlope_Unwalkable" */
    var WalkableSlope_Max: String /* "WalkableSlope_Max" */
}

external open class WalkableSlopeOverride {
    open var WalkableSlopeBehavior: String /* "WalkableSlope_Default" | "WalkableSlope_Increase" | "WalkableSlope_Decrease" | "WalkableSlope_Unwalkable" | "WalkableSlope_Max" */
    open var WalkableSlopeAngle: Number
    open fun clone(): WalkableSlopeOverride

    companion object {
        fun C(Other: UObject): WalkableSlopeOverride
        fun C(Other: Any): WalkableSlopeOverride
    }
}

external open class BodyInstanceCore {
    open var bSimulatePhysics: Boolean
    open var bOverrideMass: Boolean
    open var bEnableGravity: Boolean
    open var bAutoWeld: Boolean
    open var bStartAwake: Boolean
    open var bGenerateWakeEvents: Boolean
    open var bUpdateMassWhenScaleChanges: Boolean
    open fun clone(): BodyInstanceCore

    companion object {
        fun C(Other: UObject): BodyInstanceCore
        fun C(Other: Any): BodyInstanceCore
    }
}

external object ECollisionChannel {
    var ECC_WorldStatic: String /* "ECC_WorldStatic" */
    var ECC_WorldDynamic: String /* "ECC_WorldDynamic" */
    var ECC_Pawn: String /* "ECC_Pawn" */
    var ECC_Visibility: String /* "ECC_Visibility" */
    var ECC_Camera: String /* "ECC_Camera" */
    var ECC_PhysicsBody: String /* "ECC_PhysicsBody" */
    var ECC_Vehicle: String /* "ECC_Vehicle" */
    var ECC_Destructible: String /* "ECC_Destructible" */
    var ECC_EngineTraceChannel1: String /* "ECC_EngineTraceChannel1" */
    var ECC_EngineTraceChannel2: String /* "ECC_EngineTraceChannel2" */
    var ECC_EngineTraceChannel3: String /* "ECC_EngineTraceChannel3" */
    var ECC_EngineTraceChannel4: String /* "ECC_EngineTraceChannel4" */
    var ECC_EngineTraceChannel5: String /* "ECC_EngineTraceChannel5" */
    var ECC_EngineTraceChannel6: String /* "ECC_EngineTraceChannel6" */
    var ECC_GameTraceChannel1: String /* "ECC_GameTraceChannel1" */
    var ECC_GameTraceChannel2: String /* "ECC_GameTraceChannel2" */
    var ECC_GameTraceChannel3: String /* "ECC_GameTraceChannel3" */
    var ECC_GameTraceChannel4: String /* "ECC_GameTraceChannel4" */
    var ECC_GameTraceChannel5: String /* "ECC_GameTraceChannel5" */
    var ECC_GameTraceChannel6: String /* "ECC_GameTraceChannel6" */
    var ECC_GameTraceChannel7: String /* "ECC_GameTraceChannel7" */
    var ECC_GameTraceChannel8: String /* "ECC_GameTraceChannel8" */
    var ECC_GameTraceChannel9: String /* "ECC_GameTraceChannel9" */
    var ECC_GameTraceChannel10: String /* "ECC_GameTraceChannel10" */
    var ECC_GameTraceChannel11: String /* "ECC_GameTraceChannel11" */
    var ECC_GameTraceChannel12: String /* "ECC_GameTraceChannel12" */
    var ECC_GameTraceChannel13: String /* "ECC_GameTraceChannel13" */
    var ECC_GameTraceChannel14: String /* "ECC_GameTraceChannel14" */
    var ECC_GameTraceChannel15: String /* "ECC_GameTraceChannel15" */
    var ECC_GameTraceChannel16: String /* "ECC_GameTraceChannel16" */
    var ECC_GameTraceChannel17: String /* "ECC_GameTraceChannel17" */
    var ECC_GameTraceChannel18: String /* "ECC_GameTraceChannel18" */
    var ECC_OverlapAll_Deprecated: String /* "ECC_OverlapAll_Deprecated" */
    var ECC_MAX: String /* "ECC_MAX" */
}

external object ESleepFamily {
    var Normal: String /* "Normal" */
    var Sensitive: String /* "Sensitive" */
    var Custom: String /* "Custom" */
    var ESleepFamily_MAX: String /* "ESleepFamily_MAX" */
}

external object EDOFMode {
    var Default: String /* "Default" */
    var SixDOF: String /* "SixDOF" */
    var YZPlane: String /* "YZPlane" */
    var XZPlane: String /* "XZPlane" */
    var XYPlane: String /* "XYPlane" */
    var CustomPlane: String /* "CustomPlane" */
    var None: String /* "None" */
    var EDOFMode_MAX: String /* "EDOFMode_MAX" */
}

external object ECollisionResponse {
    var ECR_Ignore: String /* "ECR_Ignore" */
    var ECR_Overlap: String /* "ECR_Overlap" */
    var ECR_Block: String /* "ECR_Block" */
    var ECR_MAX: String /* "ECR_MAX" */
}

external open class CollisionResponseContainer {
    open var WorldStatic: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var WorldDynamic: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Pawn: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Visibility: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Camera: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var PhysicsBody: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Vehicle: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Destructible: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel1: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel2: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel3: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel4: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel5: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel6: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel1: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel2: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel3: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel4: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel5: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel6: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel7: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel8: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel9: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel10: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel11: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel12: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel13: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel14: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel15: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel16: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel17: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel18: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open fun clone(): CollisionResponseContainer

    companion object {
        fun C(Other: UObject): CollisionResponseContainer
        fun C(Other: Any): CollisionResponseContainer
    }
}

external open class ResponseChannel {
    open var Channel: String
    open var Response: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open fun clone(): ResponseChannel

    companion object {
        fun C(Other: UObject): ResponseChannel
        fun C(Other: Any): ResponseChannel
    }
}

external open class CollisionResponse {
    open var ResponseToChannels: CollisionResponseContainer
    open var ResponseArray: Array<ResponseChannel>
    open fun clone(): CollisionResponse

    companion object {
        fun C(Other: UObject): CollisionResponse
        fun C(Other: Any): CollisionResponse
    }
}

external open class BodyInstance : BodyInstanceCore {
    open var ObjectType: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var CollisionEnabled: String /* "NoCollision" | "QueryOnly" | "PhysicsOnly" | "QueryAndPhysics" | "ECollisionEnabled_MAX" */
    open var SleepFamily: String /* "Normal" | "Sensitive" | "Custom" | "ESleepFamily_MAX" */
    open var DOFMode: String /* "Default" | "SixDOF" | "YZPlane" | "XZPlane" | "XYPlane" | "CustomPlane" | "None" | "EDOFMode_MAX" */
    open var bUseCCD: Boolean
    open var bIgnoreAnalyticCollisions: Boolean
    open var bNotifyRigidBodyCollision: Boolean
    open var bSmoothEdgeCollisions: Boolean
    open var bLockTranslation: Boolean
    open var bLockRotation: Boolean
    open var bLockXTranslation: Boolean
    open var bLockYTranslation: Boolean
    open var bLockZTranslation: Boolean
    open var bLockXRotation: Boolean
    open var bLockYRotation: Boolean
    open var bLockZRotation: Boolean
    open var bOverrideMaxAngularVelocity: Boolean
    open var bOverrideMaxDepenetrationVelocity: Boolean
    open var bOverrideWalkableSlopeOnInstance: Boolean
    open var bInterpolateWhenSubStepping: Boolean
    open var ResponseToChannels: CollisionResponseContainer
    open var CollisionProfileName: String
    open var PositionSolverIterationCount: Number
    open var VelocitySolverIterationCount: Number
    open var CollisionResponses: CollisionResponse
    open var MaxDepenetrationVelocity: Number
    open var MassInKgOverride: Number
    open var LinearDamping: Number
    open var AngularDamping: Number
    open var CustomDOFPlaneNormal: Vector
    open var COMNudge: Vector
    open var MassScale: Number
    open var InertiaTensorScale: Vector
    open var WalkableSlopeOverride: WalkableSlopeOverride
    open var PhysMaterialOverride: PhysicalMaterial
    open var MaxAngularVelocity: Number
    open var CustomSleepThresholdMultiplier: Number
    open var StabilizationThresholdMultiplier: Number
    open var PhysicsBlendWeight: Number
    override fun clone(): BodyInstance

    companion object {
        fun C(Other: UObject): BodyInstance
        fun C(Other: Any): BodyInstance
    }
}

external open class BodySetup : BodySetupCore {
    constructor()
    constructor(Outer: UObject)
    open var AggGeom: KAggregateGeom
    open var bAlwaysFullAnimWeight: Boolean
    open var bConsiderForBounds: Boolean
    open var bMeshCollideAll: Boolean
    open var bDoubleSidedGeometry: Boolean
    open var bGenerateNonMirroredCollision: Boolean
    open var bSharedCookedData: Boolean
    open var bGenerateMirroredCollision: Boolean
    open var bSupportUVsAndFaceRemap: Boolean
    open var bNeverNeedsCookedCollisionData: Boolean
    open var PhysMaterial: PhysicalMaterial
    open var WalkableSlopeOverride: WalkableSlopeOverride
    open var BuildScale: Number
    open var DefaultInstance: BodyInstance
    open var BuildScale3D: Vector

    companion object {
        fun Load(ResourceName: String): BodySetup
        fun Find(Outer: UObject, ResourceName: String): BodySetup
        fun GetDefaultObject(): BodySetup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BodySetup
        fun C(Other: UObject): BodySetup
        fun C(Other: Any): BodySetup
    }
}

external open class BrushComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var Brush: Model
    open var BrushBodySetup: BodySetup
    open var PrePivot: Vector

    companion object {
        fun Load(ResourceName: String): BrushComponent
        fun Find(Outer: UObject, ResourceName: String): BrushComponent
        fun GetDefaultObject(): BrushComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BrushComponent
        fun C(Other: UObject): BrushComponent
        fun C(Other: Any): BrushComponent
    }
}

external open class BuilderPoly {
    open var VertexIndices: Array<Number>
    open var Direction: Number
    open var ItemName: String
    open var PolyFlags: Number
    open fun clone(): BuilderPoly

    companion object {
        fun C(Other: UObject): BuilderPoly
        fun C(Other: Any): BuilderPoly
    }
}

external open class LayerActorStats {
    open var Type: UnrealEngineClass
    open var Total: Number
    open fun clone(): LayerActorStats

    companion object {
        fun C(Other: UObject): LayerActorStats
        fun C(Other: Any): LayerActorStats
    }
}

external open class Layer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LayerName: String
    open var bIsVisible: Boolean
    open var ActorStats: Array<LayerActorStats>

    companion object {
        fun Load(ResourceName: String): Layer
        fun Find(Outer: UObject, ResourceName: String): Layer
        fun GetDefaultObject(): Layer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Layer
        fun C(Other: UObject): Layer
        fun C(Other: Any): Layer
    }
}

external open class ThumbnailInfo : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ThumbnailInfo
        fun Find(Outer: UObject, ResourceName: String): ThumbnailInfo
        fun GetDefaultObject(): ThumbnailInfo
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ThumbnailInfo
        fun C(Other: UObject): ThumbnailInfo
        fun C(Other: Any): ThumbnailInfo
    }
}

external open class ModelComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var ModelBodySetup: BodySetup

    companion object {
        fun Load(ResourceName: String): ModelComponent
        fun Find(Outer: UObject, ResourceName: String): ModelComponent
        fun GetDefaultObject(): ModelComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ModelComponent
        fun C(Other: UObject): ModelComponent
        fun C(Other: Any): ModelComponent
    }
}

external open class LevelActorContainer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Actors: Array<Actor>

    companion object {
        fun Load(ResourceName: String): LevelActorContainer
        fun Find(Outer: UObject, ResourceName: String): LevelActorContainer
        fun GetDefaultObject(): LevelActorContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelActorContainer
        fun C(Other: UObject): LevelActorContainer
        fun C(Other: Any): LevelActorContainer
    }
}

external open class LevelScriptBlueprint : Blueprint {
    constructor()
    constructor(Outer: UObject)
    open var FriendlyName: String

    companion object {
        fun Load(ResourceName: String): LevelScriptBlueprint
        fun Find(Outer: UObject, ResourceName: String): LevelScriptBlueprint
        fun GetDefaultObject(): LevelScriptBlueprint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelScriptBlueprint
        fun C(Other: UObject): LevelScriptBlueprint
        fun C(Other: Any): LevelScriptBlueprint
    }
}

external open class IntVector {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open fun clone(): IntVector
    open fun ToString(): String
    open fun ToVector(): Vector

    companion object {
        fun C(Other: UObject): IntVector
        fun C(Other: Any): IntVector
        fun ToString(InIntVec: IntVector): String
        fun ToVector(InIntVector: IntVector): Vector
        fun ToIntVector(inInt: Number): IntVector
    }
}

external open class LevelScriptActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var bInputEnabled: Boolean
    open fun WorldOriginLocationChanged(OldOriginLocation: IntVector, NewOriginLocation: IntVector)
    open fun SetCinematicMode(bCinematicMode: Boolean, bHidePlayer: Boolean, bAffectsHUD: Boolean, bAffectsMovement: Boolean, bAffectsTurning: Boolean)
    open fun RemoteEvent(EventName: String): Boolean
    open fun LevelReset()

    companion object {
        fun GetDefaultObject(): LevelScriptActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelScriptActor
        fun C(Other: UObject): LevelScriptActor
        fun C(Other: Any): LevelScriptActor
    }
}

external open class NavAreaBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavAreaBase
        fun Find(Outer: UObject, ResourceName: String): NavAreaBase
        fun GetDefaultObject(): NavAreaBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavAreaBase
        fun C(Other: UObject): NavAreaBase
        fun C(Other: Any): NavAreaBase
    }
}

external open class ShapeComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var ShapeBodySetup: BodySetup
    open var AreaClass: UnrealEngineClass
    open var ShapeColor: Color
    open var bDrawOnlyIfSelected: Boolean
    open var bShouldCollideWhenPlacing: Boolean
    open var bDynamicObstacle: Boolean

    companion object {
        fun Load(ResourceName: String): ShapeComponent
        fun Find(Outer: UObject, ResourceName: String): ShapeComponent
        fun GetDefaultObject(): ShapeComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ShapeComponent
        fun C(Other: UObject): ShapeComponent
        fun C(Other: Any): ShapeComponent
    }
}

external interface `T$22` {
    var OutRadius: Number
    var OutHalfHeightWithoutHemisphere: Number
}

external interface `T$23` {
    var OutRadius: Number
    var OutHalfHeight: Number
}

external open class CapsuleComponent : ShapeComponent {
    constructor()
    constructor(Outer: UObject)
    open var CapsuleHalfHeight: Number
    open var CapsuleRadius: Number
    open var CapsuleHeight: Number
    open fun SetCapsuleSize(InRadius: Number, InHalfHeight: Number, bUpdateOverlaps: Boolean)
    open fun SetCapsuleRadius(Radius: Number, bUpdateOverlaps: Boolean)
    open fun SetCapsuleHalfHeight(HalfHeight: Number, bUpdateOverlaps: Boolean)
    open fun GetUnscaledCapsuleSize_WithoutHemisphere(OutRadius: Number = definedExternally, OutHalfHeightWithoutHemisphere: Number = definedExternally): `T$22`
    open fun GetUnscaledCapsuleSize(OutRadius: Number = definedExternally, OutHalfHeight: Number = definedExternally): `T$23`
    open fun GetUnscaledCapsuleRadius(): Number
    open fun GetUnscaledCapsuleHalfHeight_WithoutHemisphere(): Number
    open fun GetUnscaledCapsuleHalfHeight(): Number
    open fun GetShapeScale(): Number
    open fun GetScaledCapsuleSize_WithoutHemisphere(OutRadius: Number = definedExternally, OutHalfHeightWithoutHemisphere: Number = definedExternally): `T$22`
    open fun GetScaledCapsuleSize(OutRadius: Number = definedExternally, OutHalfHeight: Number = definedExternally): `T$23`
    open fun GetScaledCapsuleRadius(): Number
    open fun GetScaledCapsuleHalfHeight_WithoutHemisphere(): Number
    open fun GetScaledCapsuleHalfHeight(): Number

    companion object {
        fun Load(ResourceName: String): CapsuleComponent
        fun Find(Outer: UObject, ResourceName: String): CapsuleComponent
        fun GetDefaultObject(): CapsuleComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CapsuleComponent
        fun C(Other: UObject): CapsuleComponent
        fun C(Other: Any): CapsuleComponent
    }
}

external open class PerQualityLevelInt {
    open var Default: Number
    open var PerQuality: Any
    open fun clone(): PerQualityLevelInt

    companion object {
        fun C(Other: UObject): PerQualityLevelInt
        fun C(Other: Any): PerQualityLevelInt
    }
}

external open class StreamableRenderAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ForceMipLevelsToBeResidentTimestamp: Any
    open var NumCinematicMipLevels: Number
    open var NoRefStreamingLODBias: PerQualityLevelInt
    open var StreamingIndex: Number
    open var CachedCombinedLODBias: Number
    open var NeverStream: Boolean
    open var bGlobalForceMipLevelsToBeResident: Boolean
    open var bHasStreamingUpdatePending: Boolean
    open var bForceMiplevelsToBeResident: Boolean
    open var bIgnoreStreamingMipBias: Boolean
    open var bUseCinematicMipLevels: Boolean
    open fun SetForceMipLevelsToBeResident(Seconds: Number, CinematicLODGroupMask: Number)

    companion object {
        fun Load(ResourceName: String): StreamableRenderAsset
        fun Find(Outer: UObject, ResourceName: String): StreamableRenderAsset
        fun GetDefaultObject(): StreamableRenderAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StreamableRenderAsset
        fun C(Other: UObject): StreamableRenderAsset
        fun C(Other: Any): StreamableRenderAsset
    }
}

external object ETextureSourceCompressionFormat {
    var TSCF_None: String /* "TSCF_None" */
    var TSCF_PNG: String /* "TSCF_PNG" */
    var TSCF_JPEG: String /* "TSCF_JPEG" */
    var TSCF_MAX: String /* "TSCF_MAX" */
}

external object ETextureSourceFormat {
    var TSF_Invalid: String /* "TSF_Invalid" */
    var TSF_G8: String /* "TSF_G8" */
    var TSF_BGRA8: String /* "TSF_BGRA8" */
    var TSF_BGRE8: String /* "TSF_BGRE8" */
    var TSF_RGBA16: String /* "TSF_RGBA16" */
    var TSF_RGBA16F: String /* "TSF_RGBA16F" */
    var TSF_RGBA8: String /* "TSF_RGBA8" */
    var TSF_RGBE8: String /* "TSF_RGBE8" */
    var TSF_G16: String /* "TSF_G16" */
    var TSF_MAX: String /* "TSF_MAX" */
}

external open class TextureSourceBlock {
    open var BlockX: Number
    open var BlockY: Number
    open var SizeX: Number
    open var SizeY: Number
    open var NumSlices: Number
    open var NumMips: Number
    open fun clone(): TextureSourceBlock

    companion object {
        fun C(Other: UObject): TextureSourceBlock
        fun C(Other: Any): TextureSourceBlock
    }
}

external open class TextureSource {
    open var ID: Guid
    open var BaseBlockX: Number
    open var BaseBlockY: Number
    open var SizeX: Number
    open var SizeY: Number
    open var NumSlices: Number
    open var NumMips: Number
    open var NumLayers: Number
    open var bPNGCompressed: Boolean
    open var bLongLatCubemap: Boolean
    open var CompressionFormat: String /* "TSCF_None" | "TSCF_PNG" | "TSCF_JPEG" | "TSCF_MAX" */
    open var bGuidIsHash: Boolean
    open var Format: String /* "TSF_Invalid" | "TSF_G8" | "TSF_BGRA8" | "TSF_BGRE8" | "TSF_RGBA16" | "TSF_RGBA16F" | "TSF_RGBA8" | "TSF_RGBE8" | "TSF_G16" | "TSF_MAX" */
    open var LayerFormat: Array<String /* "TSF_Invalid" | "TSF_G8" | "TSF_BGRA8" | "TSF_BGRE8" | "TSF_RGBA16" | "TSF_RGBA16F" | "TSF_RGBA8" | "TSF_RGBE8" | "TSF_G16" | "TSF_MAX" */>
    open var Blocks: Array<TextureSourceBlock>
    open var BlockDataOffsets: Array<Any>
    open fun clone(): TextureSource

    companion object {
        fun C(Other: UObject): TextureSource
        fun C(Other: Any): TextureSource
    }
}

external open class AssetImportInfo {
    open fun clone(): AssetImportInfo

    companion object {
        fun C(Other: UObject): AssetImportInfo
        fun C(Other: Any): AssetImportInfo
    }
}

external open class AssetImportData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var SourceData: AssetImportInfo
    open fun ScriptedAddFilename(InPath: String, index: Number, SourceFileLabel: String)
    open fun GetFirstFilename(): String
    open fun ExtractFilenames(): Array<String>

    companion object {
        fun Load(ResourceName: String): AssetImportData
        fun Find(Outer: UObject, ResourceName: String): AssetImportData
        fun GetDefaultObject(): AssetImportData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetImportData
        fun C(Other: UObject): AssetImportData
        fun C(Other: Any): AssetImportData
    }
}

external object ETextureLossyCompressionAmount {
    var TLCA_Default: String /* "TLCA_Default" */
    var TLCA_None: String /* "TLCA_None" */
    var TLCA_Lowest: String /* "TLCA_Lowest" */
    var TLCA_Low: String /* "TLCA_Low" */
    var TLCA_Medium: String /* "TLCA_Medium" */
    var TLCA_High: String /* "TLCA_High" */
    var TLCA_Highest: String /* "TLCA_Highest" */
    var TLCA_MAX: String /* "TLCA_MAX" */
}

external object ETextureCompressionQuality {
    var TCQ_Default: String /* "TCQ_Default" */
    var TCQ_Lowest: String /* "TCQ_Lowest" */
    var TCQ_Low: String /* "TCQ_Low" */
    var TCQ_Medium: String /* "TCQ_Medium" */
    var TCQ_High: String /* "TCQ_High" */
    var TCQ_Highest: String /* "TCQ_Highest" */
    var TCQ_MAX: String /* "TCQ_MAX" */
}

external object ETexturePowerOfTwoSetting {
    var None: String /* "None" */
    var PadToPowerOfTwo: String /* "PadToPowerOfTwo" */
    var PadToSquarePowerOfTwo: String /* "PadToSquarePowerOfTwo" */
    var ETexturePowerOfTwoSetting_MAX: String /* "ETexturePowerOfTwoSetting_MAX" */
}

external object TextureMipGenSettings {
    var TMGS_FromTextureGroup: String /* "TMGS_FromTextureGroup" */
    var TMGS_SimpleAverage: String /* "TMGS_SimpleAverage" */
    var TMGS_Sharpen0: String /* "TMGS_Sharpen0" */
    var TMGS_Sharpen1: String /* "TMGS_Sharpen1" */
    var TMGS_Sharpen2: String /* "TMGS_Sharpen2" */
    var TMGS_Sharpen3: String /* "TMGS_Sharpen3" */
    var TMGS_Sharpen4: String /* "TMGS_Sharpen4" */
    var TMGS_Sharpen5: String /* "TMGS_Sharpen5" */
    var TMGS_Sharpen6: String /* "TMGS_Sharpen6" */
    var TMGS_Sharpen7: String /* "TMGS_Sharpen7" */
    var TMGS_Sharpen8: String /* "TMGS_Sharpen8" */
    var TMGS_Sharpen9: String /* "TMGS_Sharpen9" */
    var TMGS_Sharpen10: String /* "TMGS_Sharpen10" */
    var TMGS_NoMipmaps: String /* "TMGS_NoMipmaps" */
    var TMGS_LeaveExistingMips: String /* "TMGS_LeaveExistingMips" */
    var TMGS_Blur1: String /* "TMGS_Blur1" */
    var TMGS_Blur2: String /* "TMGS_Blur2" */
    var TMGS_Blur3: String /* "TMGS_Blur3" */
    var TMGS_Blur4: String /* "TMGS_Blur4" */
    var TMGS_Blur5: String /* "TMGS_Blur5" */
    var TMGS_Unfiltered: String /* "TMGS_Unfiltered" */
    var TMGS_Angular: String /* "TMGS_Angular" */
    var TMGS_MAX: String /* "TMGS_MAX" */
}

external object ECompositeTextureMode {
    var CTM_Disabled: String /* "CTM_Disabled" */
    var CTM_NormalRoughnessToRed: String /* "CTM_NormalRoughnessToRed" */
    var CTM_NormalRoughnessToGreen: String /* "CTM_NormalRoughnessToGreen" */
    var CTM_NormalRoughnessToBlue: String /* "CTM_NormalRoughnessToBlue" */
    var CTM_NormalRoughnessToAlpha: String /* "CTM_NormalRoughnessToAlpha" */
    var CTM_MAX: String /* "CTM_MAX" */
}

external object TextureCompressionSettings {
    var TC_Default: String /* "TC_Default" */
    var TC_Normalmap: String /* "TC_Normalmap" */
    var TC_Masks: String /* "TC_Masks" */
    var TC_Grayscale: String /* "TC_Grayscale" */
    var TC_Displacementmap: String /* "TC_Displacementmap" */
    var TC_VectorDisplacementmap: String /* "TC_VectorDisplacementmap" */
    var TC_HDR: String /* "TC_HDR" */
    var TC_EditorIcon: String /* "TC_EditorIcon" */
    var TC_Alpha: String /* "TC_Alpha" */
    var TC_DistanceFieldFont: String /* "TC_DistanceFieldFont" */
    var TC_HDR_Compressed: String /* "TC_HDR_Compressed" */
    var TC_BC7: String /* "TC_BC7" */
    var TC_HalfFloat: String /* "TC_HalfFloat" */
    var TC_LQ: String /* "TC_LQ" */
    var TC_EncodedReflectionCapture: String /* "TC_EncodedReflectionCapture" */
    var TC_MAX: String /* "TC_MAX" */
}

external open class TextureFormatSettings {
    open var CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_HalfFloat" | "TC_LQ" | "TC_EncodedReflectionCapture" | "TC_MAX" */
    open var CompressionNoAlpha: Boolean
    open var CompressionForceAlpha: Boolean
    open var CompressionNone: Boolean
    open var CompressionYCoCg: Boolean
    open var sRGB: Boolean
    open fun clone(): TextureFormatSettings

    companion object {
        fun C(Other: UObject): TextureFormatSettings
        fun C(Other: Any): TextureFormatSettings
    }
}

external object TextureFilter {
    var TF_Nearest: String /* "TF_Nearest" */
    var TF_Bilinear: String /* "TF_Bilinear" */
    var TF_Trilinear: String /* "TF_Trilinear" */
    var TF_Default: String /* "TF_Default" */
    var TF_MAX: String /* "TF_MAX" */
}

external object ETextureMipLoadOptions {
    var Default: String /* "Default" */
    var AllMips: String /* "AllMips" */
    var OnlyFirstMip: String /* "OnlyFirstMip" */
    var ETextureMipLoadOptions_MAX: String /* "ETextureMipLoadOptions_MAX" */
}

external object TextureGroup {
    var TEXTUREGROUP_World: String /* "TEXTUREGROUP_World" */
    var TEXTUREGROUP_WorldNormalMap: String /* "TEXTUREGROUP_WorldNormalMap" */
    var TEXTUREGROUP_WorldSpecular: String /* "TEXTUREGROUP_WorldSpecular" */
    var TEXTUREGROUP_Character: String /* "TEXTUREGROUP_Character" */
    var TEXTUREGROUP_CharacterNormalMap: String /* "TEXTUREGROUP_CharacterNormalMap" */
    var TEXTUREGROUP_CharacterSpecular: String /* "TEXTUREGROUP_CharacterSpecular" */
    var TEXTUREGROUP_Weapon: String /* "TEXTUREGROUP_Weapon" */
    var TEXTUREGROUP_WeaponNormalMap: String /* "TEXTUREGROUP_WeaponNormalMap" */
    var TEXTUREGROUP_WeaponSpecular: String /* "TEXTUREGROUP_WeaponSpecular" */
    var TEXTUREGROUP_Vehicle: String /* "TEXTUREGROUP_Vehicle" */
    var TEXTUREGROUP_VehicleNormalMap: String /* "TEXTUREGROUP_VehicleNormalMap" */
    var TEXTUREGROUP_VehicleSpecular: String /* "TEXTUREGROUP_VehicleSpecular" */
    var TEXTUREGROUP_Cinematic: String /* "TEXTUREGROUP_Cinematic" */
    var TEXTUREGROUP_Effects: String /* "TEXTUREGROUP_Effects" */
    var TEXTUREGROUP_EffectsNotFiltered: String /* "TEXTUREGROUP_EffectsNotFiltered" */
    var TEXTUREGROUP_Skybox: String /* "TEXTUREGROUP_Skybox" */
    var TEXTUREGROUP_UI: String /* "TEXTUREGROUP_UI" */
    var TEXTUREGROUP_Lightmap: String /* "TEXTUREGROUP_Lightmap" */
    var TEXTUREGROUP_RenderTarget: String /* "TEXTUREGROUP_RenderTarget" */
    var TEXTUREGROUP_MobileFlattened: String /* "TEXTUREGROUP_MobileFlattened" */
    var TEXTUREGROUP_ProcBuilding_Face: String /* "TEXTUREGROUP_ProcBuilding_Face" */
    var TEXTUREGROUP_ProcBuilding_LightMap: String /* "TEXTUREGROUP_ProcBuilding_LightMap" */
    var TEXTUREGROUP_Shadowmap: String /* "TEXTUREGROUP_Shadowmap" */
    var TEXTUREGROUP_ColorLookupTable: String /* "TEXTUREGROUP_ColorLookupTable" */
    var TEXTUREGROUP_Terrain_Heightmap: String /* "TEXTUREGROUP_Terrain_Heightmap" */
    var TEXTUREGROUP_Terrain_Weightmap: String /* "TEXTUREGROUP_Terrain_Weightmap" */
    var TEXTUREGROUP_Bokeh: String /* "TEXTUREGROUP_Bokeh" */
    var TEXTUREGROUP_IESLightProfile: String /* "TEXTUREGROUP_IESLightProfile" */
    var TEXTUREGROUP_Pixels2D: String /* "TEXTUREGROUP_Pixels2D" */
    var TEXTUREGROUP_HierarchicalLOD: String /* "TEXTUREGROUP_HierarchicalLOD" */
    var TEXTUREGROUP_Impostor: String /* "TEXTUREGROUP_Impostor" */
    var TEXTUREGROUP_ImpostorNormalDepth: String /* "TEXTUREGROUP_ImpostorNormalDepth" */
    var TEXTUREGROUP_8BitData: String /* "TEXTUREGROUP_8BitData" */
    var TEXTUREGROUP_16BitData: String /* "TEXTUREGROUP_16BitData" */
    var TEXTUREGROUP_Project01: String /* "TEXTUREGROUP_Project01" */
    var TEXTUREGROUP_Project02: String /* "TEXTUREGROUP_Project02" */
    var TEXTUREGROUP_Project03: String /* "TEXTUREGROUP_Project03" */
    var TEXTUREGROUP_Project04: String /* "TEXTUREGROUP_Project04" */
    var TEXTUREGROUP_Project05: String /* "TEXTUREGROUP_Project05" */
    var TEXTUREGROUP_Project06: String /* "TEXTUREGROUP_Project06" */
    var TEXTUREGROUP_Project07: String /* "TEXTUREGROUP_Project07" */
    var TEXTUREGROUP_Project08: String /* "TEXTUREGROUP_Project08" */
    var TEXTUREGROUP_Project09: String /* "TEXTUREGROUP_Project09" */
    var TEXTUREGROUP_Project10: String /* "TEXTUREGROUP_Project10" */
    var TEXTUREGROUP_Project11: String /* "TEXTUREGROUP_Project11" */
    var TEXTUREGROUP_Project12: String /* "TEXTUREGROUP_Project12" */
    var TEXTUREGROUP_Project13: String /* "TEXTUREGROUP_Project13" */
    var TEXTUREGROUP_Project14: String /* "TEXTUREGROUP_Project14" */
    var TEXTUREGROUP_Project15: String /* "TEXTUREGROUP_Project15" */
    var TEXTUREGROUP_Project16: String /* "TEXTUREGROUP_Project16" */
    var TEXTUREGROUP_MAX: String /* "TEXTUREGROUP_MAX" */
}

external open class PerPlatformFloat {
    open var Default: Number
    open var PerPlatform: Any
    open fun clone(): PerPlatformFloat

    companion object {
        fun C(Other: UObject): PerPlatformFloat
        fun C(Other: Any): PerPlatformFloat
    }
}

external object ETextureDownscaleOptions {
    var Default: String /* "Default" */
    var Unfiltered: String /* "Unfiltered" */
    var SimpleAverage: String /* "SimpleAverage" */
    var Sharpen0: String /* "Sharpen0" */
    var Sharpen1: String /* "Sharpen1" */
    var Sharpen2: String /* "Sharpen2" */
    var Sharpen3: String /* "Sharpen3" */
    var Sharpen4: String /* "Sharpen4" */
    var Sharpen5: String /* "Sharpen5" */
    var Sharpen6: String /* "Sharpen6" */
    var Sharpen7: String /* "Sharpen7" */
    var Sharpen8: String /* "Sharpen8" */
    var Sharpen9: String /* "Sharpen9" */
    var Sharpen10: String /* "Sharpen10" */
    var ETextureDownscaleOptions_MAX: String /* "ETextureDownscaleOptions_MAX" */
}

external object ETextureSourceEncoding {
    var TSE_None: String /* "TSE_None" */
    var TSE_Linear: String /* "TSE_Linear" */
    var TSE_sRGB: String /* "TSE_sRGB" */
    var TSE_ST2084: String /* "TSE_ST2084" */
    var TSE_Gamma22: String /* "TSE_Gamma22" */
    var TSE_BT1886: String /* "TSE_BT1886" */
    var TSE_Gamma26: String /* "TSE_Gamma26" */
    var TSE_Cineon: String /* "TSE_Cineon" */
    var TSE_REDLog: String /* "TSE_REDLog" */
    var TSE_REDLog3G10: String /* "TSE_REDLog3G10" */
    var TSE_SLog1: String /* "TSE_SLog1" */
    var TSE_SLog2: String /* "TSE_SLog2" */
    var TSE_SLog3: String /* "TSE_SLog3" */
    var TSE_AlexaV3LogC: String /* "TSE_AlexaV3LogC" */
    var TSE_CanonLog: String /* "TSE_CanonLog" */
    var TSE_ProTune: String /* "TSE_ProTune" */
    var TSE_VLog: String /* "TSE_VLog" */
    var TSE_MAX: String /* "TSE_MAX" */
}

external object ETextureColorSpace {
    var TCS_None: String /* "TCS_None" */
    var TCS_sRGB: String /* "TCS_sRGB" */
    var TCS_Rec2020: String /* "TCS_Rec2020" */
    var TCS_ACESAP0: String /* "TCS_ACESAP0" */
    var TCS_ACESAP1: String /* "TCS_ACESAP1" */
    var TCS_P3DCI: String /* "TCS_P3DCI" */
    var TCS_P3D65: String /* "TCS_P3D65" */
    var TCS_REDWideGamut: String /* "TCS_REDWideGamut" */
    var TCS_SonySGamut3: String /* "TCS_SonySGamut3" */
    var TCS_SonySGamut3Cine: String /* "TCS_SonySGamut3Cine" */
    var TCS_AlexaWideGamut: String /* "TCS_AlexaWideGamut" */
    var TCS_CanonCinemaGamut: String /* "TCS_CanonCinemaGamut" */
    var TCS_GoProProtuneNative: String /* "TCS_GoProProtuneNative" */
    var TCS_PanasonicVGamut: String /* "TCS_PanasonicVGamut" */
    var TCS_Custom: String /* "TCS_Custom" */
    var TCS_MAX: String /* "TCS_MAX" */
}

external object ETextureChromaticAdaptationMethod {
    var TCAM_None: String /* "TCAM_None" */
    var TCAM_Bradford: String /* "TCAM_Bradford" */
    var TCAM_CAT02: String /* "TCAM_CAT02" */
    var TCAM_MAX: String /* "TCAM_MAX" */
}

external open class TextureSourceColorSettings {
    open var EncodingOverride: String /* "TSE_None" | "TSE_Linear" | "TSE_sRGB" | "TSE_ST2084" | "TSE_Gamma22" | "TSE_BT1886" | "TSE_Gamma26" | "TSE_Cineon" | "TSE_REDLog" | "TSE_REDLog3G10" | "TSE_SLog1" | "TSE_SLog2" | "TSE_SLog3" | "TSE_AlexaV3LogC" | "TSE_CanonLog" | "TSE_ProTune" | "TSE_VLog" | "TSE_MAX" */
    open var ColorSpace: String /* "TCS_None" | "TCS_sRGB" | "TCS_Rec2020" | "TCS_ACESAP0" | "TCS_ACESAP1" | "TCS_P3DCI" | "TCS_P3D65" | "TCS_REDWideGamut" | "TCS_SonySGamut3" | "TCS_SonySGamut3Cine" | "TCS_AlexaWideGamut" | "TCS_CanonCinemaGamut" | "TCS_GoProProtuneNative" | "TCS_PanasonicVGamut" | "TCS_Custom" | "TCS_MAX" */
    open var RedChromaticityCoordinate: Vector2D
    open var GreenChromaticityCoordinate: Vector2D
    open var BlueChromaticityCoordinate: Vector2D
    open var WhiteChromaticityCoordinate: Vector2D
    open var ChromaticAdaptationMethod: String /* "TCAM_None" | "TCAM_Bradford" | "TCAM_CAT02" | "TCAM_MAX" */
    open fun clone(): TextureSourceColorSettings

    companion object {
        fun C(Other: UObject): TextureSourceColorSettings
        fun C(Other: Any): TextureSourceColorSettings
    }
}

external object EDesiredImageFormat {
    var PNG: String /* "PNG" */
    var JPG: String /* "JPG" */
    var BMP: String /* "BMP" */
    var EXR: String /* "EXR" */
    var EDesiredImageFormat_MAX: String /* "EDesiredImageFormat_MAX" */
}

external open class ImageWriteOptions {
    open var Format: String /* "PNG" | "JPG" | "BMP" | "EXR" | "EDesiredImageFormat_MAX" */
    open var OnComplete: UnrealEngineDelegate<(bSuccess: Boolean) -> Unit>
    open var CompressionQuality: Number
    open var bOverwriteFile: Boolean
    open var bAsync: Boolean
    open fun clone(): ImageWriteOptions

    companion object {
        fun C(Other: UObject): ImageWriteOptions
        fun C(Other: Any): ImageWriteOptions
    }
}

external open class Texture : StreamableRenderAsset {
    constructor()
    constructor(Outer: UObject)
    open var Source: TextureSource
    open var LightingGuid: Guid
    open var SourceFilePath: String
    open var AssetImportData: AssetImportData
    open var AdjustBrightness: Number
    open var AdjustBrightnessCurve: Number
    open var AdjustVibrance: Number
    open var AdjustSaturation: Number
    open var AdjustRGBCurve: Number
    open var AdjustHue: Number
    open var AdjustMinAlpha: Number
    open var AdjustMaxAlpha: Number
    open var CompressionNoAlpha: Boolean
    open var CompressionNone: Boolean
    open var DeferCompression: Boolean
    open var LossyCompressionAmount: String /* "TLCA_Default" | "TLCA_None" | "TLCA_Lowest" | "TLCA_Low" | "TLCA_Medium" | "TLCA_High" | "TLCA_Highest" | "TLCA_MAX" */
    open var OodleTextureSdkVersion: String
    open var MaxTextureSize: Number
    open var CompressionQuality: String /* "TCQ_Default" | "TCQ_Lowest" | "TCQ_Low" | "TCQ_Medium" | "TCQ_High" | "TCQ_Highest" | "TCQ_MAX" */
    open var bDitherMipMapAlpha: Boolean
    open var bDoScaleMipsForAlphaCoverage: Boolean
    open var AlphaCoverageThresholds: Vector4
    open var bPreserveBorder: Boolean
    open var bFlipGreenChannel: Boolean
    open var PowerOfTwoMode: String /* "None" | "PadToPowerOfTwo" | "PadToSquarePowerOfTwo" | "ETexturePowerOfTwoSetting_MAX" */
    open var PaddingColor: Color
    open var bChromaKeyTexture: Boolean
    open var ChromaKeyThreshold: Number
    open var ChromaKeyColor: Color
    open var MipGenSettings: String /* "TMGS_FromTextureGroup" | "TMGS_SimpleAverage" | "TMGS_Sharpen0" | "TMGS_Sharpen1" | "TMGS_Sharpen2" | "TMGS_Sharpen3" | "TMGS_Sharpen4" | "TMGS_Sharpen5" | "TMGS_Sharpen6" | "TMGS_Sharpen7" | "TMGS_Sharpen8" | "TMGS_Sharpen9" | "TMGS_Sharpen10" | "TMGS_NoMipmaps" | "TMGS_LeaveExistingMips" | "TMGS_Blur1" | "TMGS_Blur2" | "TMGS_Blur3" | "TMGS_Blur4" | "TMGS_Blur5" | "TMGS_Unfiltered" | "TMGS_Angular" | "TMGS_MAX" */
    open var CompositeTexture: Texture
    open var CompositeTextureMode: String /* "CTM_Disabled" | "CTM_NormalRoughnessToRed" | "CTM_NormalRoughnessToGreen" | "CTM_NormalRoughnessToBlue" | "CTM_NormalRoughnessToAlpha" | "CTM_MAX" */
    open var CompositePower: Number
    open var LayerFormatSettings: Array<TextureFormatSettings>
    open var LevelIndex: Number
    open var LODBias: Number
    open var CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_HalfFloat" | "TC_LQ" | "TC_EncodedReflectionCapture" | "TC_MAX" */
    open var Filter: String /* "TF_Nearest" | "TF_Bilinear" | "TF_Trilinear" | "TF_Default" | "TF_MAX" */
    open var MipLoadOptions: String /* "Default" | "AllMips" | "OnlyFirstMip" | "ETextureMipLoadOptions_MAX" */
    open var LODGroup: String /* "TEXTUREGROUP_World" | "TEXTUREGROUP_WorldNormalMap" | "TEXTUREGROUP_WorldSpecular" | "TEXTUREGROUP_Character" | "TEXTUREGROUP_CharacterNormalMap" | "TEXTUREGROUP_CharacterSpecular" | "TEXTUREGROUP_Weapon" | "TEXTUREGROUP_WeaponNormalMap" | "TEXTUREGROUP_WeaponSpecular" | "TEXTUREGROUP_Vehicle" | "TEXTUREGROUP_VehicleNormalMap" | "TEXTUREGROUP_VehicleSpecular" | "TEXTUREGROUP_Cinematic" | "TEXTUREGROUP_Effects" | "TEXTUREGROUP_EffectsNotFiltered" | "TEXTUREGROUP_Skybox" | "TEXTUREGROUP_UI" | "TEXTUREGROUP_Lightmap" | "TEXTUREGROUP_RenderTarget" | "TEXTUREGROUP_MobileFlattened" | "TEXTUREGROUP_ProcBuilding_Face" | "TEXTUREGROUP_ProcBuilding_LightMap" | "TEXTUREGROUP_Shadowmap" | "TEXTUREGROUP_ColorLookupTable" | "TEXTUREGROUP_Terrain_Heightmap" | "TEXTUREGROUP_Terrain_Weightmap" | "TEXTUREGROUP_Bokeh" | "TEXTUREGROUP_IESLightProfile" | "TEXTUREGROUP_Pixels2D" | "TEXTUREGROUP_HierarchicalLOD" | "TEXTUREGROUP_Impostor" | "TEXTUREGROUP_ImpostorNormalDepth" | "TEXTUREGROUP_8BitData" | "TEXTUREGROUP_16BitData" | "TEXTUREGROUP_Project01" | "TEXTUREGROUP_Project02" | "TEXTUREGROUP_Project03" | "TEXTUREGROUP_Project04" | "TEXTUREGROUP_Project05" | "TEXTUREGROUP_Project06" | "TEXTUREGROUP_Project07" | "TEXTUREGROUP_Project08" | "TEXTUREGROUP_Project09" | "TEXTUREGROUP_Project10" | "TEXTUREGROUP_Project11" | "TEXTUREGROUP_Project12" | "TEXTUREGROUP_Project13" | "TEXTUREGROUP_Project14" | "TEXTUREGROUP_Project15" | "TEXTUREGROUP_Project16" | "TEXTUREGROUP_MAX" */
    open var Downscale: PerPlatformFloat
    open var DownscaleOptions: String /* "Default" | "Unfiltered" | "SimpleAverage" | "Sharpen0" | "Sharpen1" | "Sharpen2" | "Sharpen3" | "Sharpen4" | "Sharpen5" | "Sharpen6" | "Sharpen7" | "Sharpen8" | "Sharpen9" | "Sharpen10" | "ETextureDownscaleOptions_MAX" */
    open var sRGB: Boolean
    open var SourceColorSettings: TextureSourceColorSettings
    open var bUseLegacyGamma: Boolean
    open var bNoTiling: Boolean
    open var VirtualTextureStreaming: Boolean
    open var CompressionYCoCg: Boolean
    open var bNotOfflineProcessed: Boolean
    open var bAsyncResourceReleaseHasBeenStarted: Boolean
    open var AssetUserData: Array<AssetUserData>
    open fun SetSplashScreen(Scale: Vector2D, Offset: Vector, bShowLoadingMovie: Boolean, bShowOnSet: Boolean)
    open fun ExportToDisk(Filename: String, Options: ImageWriteOptions)
    open fun AddLoadingScreenSplash(Translation: Vector, Rotation: Rotator, Size: Vector2D, DeltaRotation: Rotator, bClearBeforeAdd: Boolean)
    open fun SetLoadingScreen(Scale: Vector2D, Offset: Vector, bShowLoadingMovie: Boolean, bShowOnSet: Boolean)
    open fun SetSpectatorScreenTexture()

    companion object {
        fun Load(ResourceName: String): Texture
        fun Find(Outer: UObject, ResourceName: String): Texture
        fun GetDefaultObject(): Texture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Texture
        fun C(Other: UObject): Texture
        fun C(Other: Any): Texture
        fun SetSplashScreen(Texture: Texture, Scale: Vector2D, Offset: Vector, bShowLoadingMovie: Boolean, bShowOnSet: Boolean)
        fun ExportToDisk(Texture: Texture, Filename: String, Options: ImageWriteOptions)
        fun AddLoadingScreenSplash(Texture: Texture, Translation: Vector, Rotation: Rotator, Size: Vector2D, DeltaRotation: Rotator, bClearBeforeAdd: Boolean)
        fun SetLoadingScreen(Texture: Texture, Scale: Vector2D, Offset: Vector, bShowLoadingMovie: Boolean, bShowOnSet: Boolean)
        fun SetSpectatorScreenTexture(InTexture: Texture)
    }
}

external object TextureAddress {
    var TA_Wrap: String /* "TA_Wrap" */
    var TA_Clamp: String /* "TA_Clamp" */
    var TA_Mirror: String /* "TA_Mirror" */
    var TA_MAX: String /* "TA_MAX" */
}

external object EImportanceWeight {
    var Luminance: String /* "Luminance" */
    var Red: String /* "Red" */
    var Green: String /* "Green" */
    var Blue: String /* "Blue" */
    var Alpha: String /* "Alpha" */
    var EImportanceWeight_MAX: String /* "EImportanceWeight_MAX" */
}

external interface `T$24` {
    var Texture: Texture2D
    var WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */
}

external interface `T$25` {
    var SamplePosition: Vector2D
    var SampleColor: LinearColor
    var SampleIntensity: Number
    var SampleSize: Number
}

external open class ImportanceTexture {
    open var Size: IntPoint
    open var NumMips: Number
    open var MarginalCDF: Array<Number>
    open var ConditionalCDF: Array<Number>
    open var TextureData: Array<Color>
    open var Texture: Any
    open var Weighting: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */
    open fun clone(): ImportanceTexture
    open fun BreakImportanceTexture(Texture: Texture2D = definedExternally, WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */ = definedExternally): `T$24`
    open fun ImportanceSample(Rand: Vector2D, Samples: Number, Intensity: Number, SamplePosition: Vector2D = definedExternally, SampleColor: LinearColor = definedExternally, SampleIntensity: Number = definedExternally, SampleSize: Number = definedExternally): `T$25`

    companion object {
        fun C(Other: UObject): ImportanceTexture
        fun C(Other: Any): ImportanceTexture
        fun BreakImportanceTexture(ImportanceTexture: ImportanceTexture, Texture: Texture2D = definedExternally, WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */ = definedExternally): `T$24`
        fun ImportanceSample(Texture: ImportanceTexture, Rand: Vector2D, Samples: Number, Intensity: Number, SamplePosition: Vector2D = definedExternally, SampleColor: LinearColor = definedExternally, SampleIntensity: Number = definedExternally, SampleSize: Number = definedExternally): `T$25`
    }
}

external open class Margin {
    open var Left: Number
    open var Top: Number
    open var Right: Number
    open var Bottom: Number
    open fun clone(): Margin

    companion object {
        fun C(Other: UObject): Margin
        fun C(Other: Any): Margin
    }
}

external object ESlateColorStylingMode {
    var UseColor_Specified: String /* "UseColor_Specified" */
    var UseColor_ColorTable: String /* "UseColor_ColorTable" */
    var UseColor_Foreground: String /* "UseColor_Foreground" */
    var UseColor_Foreground_Subdued: String /* "UseColor_Foreground_Subdued" */
    var UseColor_UseStyle: String /* "UseColor_UseStyle" */
    var UseColor_MAX: String /* "UseColor_MAX" */
}

external open class SlateColor {
    open var SpecifiedColor: LinearColor
    open var ColorUseRule: String /* "UseColor_Specified" | "UseColor_ColorTable" | "UseColor_Foreground" | "UseColor_Foreground_Subdued" | "UseColor_UseStyle" | "UseColor_MAX" */
    open fun clone(): SlateColor

    companion object {
        fun C(Other: UObject): SlateColor
        fun C(Other: Any): SlateColor
        fun SlateColor_UseForeground(): SlateColor
        fun SlateColor_UseSubduedForeground(): SlateColor
    }
}

external object ESlateBrushRoundingType {
    var FixedRadius: String /* "FixedRadius" */
    var HalfHeightRadius: String /* "HalfHeightRadius" */
    var ESlateBrushRoundingType_MAX: String /* "ESlateBrushRoundingType_MAX" */
}

external open class SlateBrushOutlineSettings {
    open var CornerRadii: Vector4
    open var Color: SlateColor
    open var Width: Number
    open var RoundingType: String /* "FixedRadius" | "HalfHeightRadius" | "ESlateBrushRoundingType_MAX" */
    open var bUseBrushTransparency: Boolean
    open fun clone(): SlateBrushOutlineSettings

    companion object {
        fun C(Other: UObject): SlateBrushOutlineSettings
        fun C(Other: Any): SlateBrushOutlineSettings
    }
}

external open class Vector2f {
    open var X: Number
    open var Y: Number
    open fun clone(): Vector2f

    companion object {
        fun C(Other: UObject): Vector2f
        fun C(Other: Any): Vector2f
    }
}

external open class Box2f {
    open var Min: Vector2f
    open var Max: Vector2f
    open var bIsValid: Number
    open fun clone(): Box2f

    companion object {
        fun C(Other: UObject): Box2f
        fun C(Other: Any): Box2f
    }
}

external object ESlateBrushDrawType {
    var NoDrawType: String /* "NoDrawType" */
    var Box: String /* "Box" */
    var Border: String /* "Border" */
    var Image: String /* "Image" */
    var RoundedBox: String /* "RoundedBox" */
    var ESlateBrushDrawType_MAX: String /* "ESlateBrushDrawType_MAX" */
}

external object ESlateBrushTileType {
    var NoTile: String /* "NoTile" */
    var Horizontal: String /* "Horizontal" */
    var Vertical: String /* "Vertical" */
    var Both: String /* "Both" */
    var ESlateBrushTileType_MAX: String /* "ESlateBrushTileType_MAX" */
}

external object ESlateBrushMirrorType {
    var NoMirror: String /* "NoMirror" */
    var Horizontal: String /* "Horizontal" */
    var Vertical: String /* "Vertical" */
    var Both: String /* "Both" */
    var ESlateBrushMirrorType_MAX: String /* "ESlateBrushMirrorType_MAX" */
}

external object ESlateBrushImageType {
    var NoImage: String /* "NoImage" */
    var FullColor: String /* "FullColor" */
    var Linear: String /* "Linear" */
    var Vector: String /* "Vector" */
    var ESlateBrushImageType_MAX: String /* "ESlateBrushImageType_MAX" */
}

external open class SubsurfaceProfileStruct {
    open var SurfaceAlbedo: LinearColor
    open var MeanFreePathColor: LinearColor
    open var MeanFreePathDistance: Number
    open var WorldUnitScale: Number
    open var bEnableBurley: Boolean
    open var Tint: LinearColor
    open var ScatterRadius: Number
    open var SubsurfaceColor: LinearColor
    open var FalloffColor: LinearColor
    open var BoundaryColorBleed: LinearColor
    open var ExtinctionScale: Number
    open var NormalScale: Number
    open var ScatteringDistribution: Number
    open var IOR: Number
    open var Roughness0: Number
    open var Roughness1: Number
    open var LobeMix: Number
    open var TransmissionTintColor: LinearColor
    open fun clone(): SubsurfaceProfileStruct

    companion object {
        fun C(Other: UObject): SubsurfaceProfileStruct
        fun C(Other: Any): SubsurfaceProfileStruct
    }
}

external open class SubsurfaceProfile : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Settings: SubsurfaceProfileStruct

    companion object {
        fun Load(ResourceName: String): SubsurfaceProfile
        fun Find(Outer: UObject, ResourceName: String): SubsurfaceProfile
        fun GetDefaultObject(): SubsurfaceProfile
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SubsurfaceProfile
        fun C(Other: UObject): SubsurfaceProfile
        fun C(Other: Any): SubsurfaceProfile
    }
}

external open class LightmassMaterialInterfaceSettings {
    open var EmissiveBoost: Number
    open var DiffuseBoost: Number
    open var ExportResolutionScale: Number
    open var bCastShadowAsMasked: Boolean
    open var bOverrideCastShadowAsMasked: Boolean
    open var bOverrideEmissiveBoost: Boolean
    open var bOverrideDiffuseBoost: Boolean
    open var bOverrideExportResolutionScale: Boolean
    open fun clone(): LightmassMaterialInterfaceSettings

    companion object {
        fun C(Other: UObject): LightmassMaterialInterfaceSettings
        fun C(Other: Any): LightmassMaterialInterfaceSettings
    }
}

external interface `T$26` {
    var PathString: String
}

external open class SoftObjectPath {
    open var AssetPathName: String
    open var SubPathString: String
    open fun clone(): SoftObjectPath
    open fun BreakSoftObjectPath(PathString: String = definedExternally): `T$26`
    open fun ToSoftObjectReference(): UObject

    companion object {
        fun C(Other: UObject): SoftObjectPath
        fun C(Other: Any): SoftObjectPath
        fun BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath, PathString: String = definedExternally): `T$26`
        fun ToSoftObjectReference(SoftObjectPath: SoftObjectPath): UObject
        fun MakeSoftObjectPath(PathString: String): SoftObjectPath
    }
}

external open class MaterialTextureInfo {
    open var SamplingScale: Number
    open var UVChannelIndex: Number
    open var TextureName: String
    open var TextureReference: SoftObjectPath
    open var TextureIndex: Number
    open fun clone(): MaterialTextureInfo

    companion object {
        fun C(Other: UObject): MaterialTextureInfo
        fun C(Other: Any): MaterialTextureInfo
    }
}

external open class PhysicalMaterialMask : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AssetImportData: AssetImportData
    open var MaskTexture: Texture
    open var UVChannelIndex: Number
    open var AddressX: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressY: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */

    companion object {
        fun Load(ResourceName: String): PhysicalMaterialMask
        fun Find(Outer: UObject, ResourceName: String): PhysicalMaterialMask
        fun GetDefaultObject(): PhysicalMaterialMask
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicalMaterialMask
        fun C(Other: UObject): PhysicalMaterialMask
        fun C(Other: Any): PhysicalMaterialMask
    }
}

external object EMaterialParameterAssociation {
    var LayerParameter: String /* "LayerParameter" */
    var BlendParameter: String /* "BlendParameter" */
    var GlobalParameter: String /* "GlobalParameter" */
    var EMaterialParameterAssociation_MAX: String /* "EMaterialParameterAssociation_MAX" */
}

external object EMaterialFunctionUsage {
    var Default: String /* "Default" */
    var MaterialLayer: String /* "MaterialLayer" */
    var MaterialLayerBlend: String /* "MaterialLayerBlend" */
    var EMaterialFunctionUsage_MAX: String /* "EMaterialFunctionUsage_MAX" */
}

external object EEdGraphPinDirection {
    var EGPD_Input: String /* "EGPD_Input" */
    var EGPD_Output: String /* "EGPD_Output" */
    var EGPD_MAX: String /* "EGPD_MAX" */
}

external open class EdGraphTerminalType {
    open var TerminalCategory: String
    open var TerminalSubCategory: String
    open var TerminalSubCategoryObject: Any
    open var bTerminalIsConst: Boolean
    open var bTerminalIsWeakPointer: Boolean
    open var bTerminalIsUObjectWrapper: Boolean
    open fun clone(): EdGraphTerminalType

    companion object {
        fun C(Other: UObject): EdGraphTerminalType
        fun C(Other: Any): EdGraphTerminalType
    }
}

external object EPinContainerType {
    var None: String /* "None" */
    var Array: String /* "Array" */
    var Set: String /* "Set" */
    var Map: String /* "Map" */
    var EPinContainerType_MAX: String /* "EPinContainerType_MAX" */
}

external open class EdGraphPinType {
    open var PinCategory: String
    open var PinSubCategory: String
    open var PinSubCategoryObject: Any
    open var PinSubCategoryMemberReference: SimpleMemberReference
    open var PinValueType: EdGraphTerminalType
    open var ContainerType: String /* "None" | "Array" | "Set" | "Map" | "EPinContainerType_MAX" */
    open var bIsArray: Boolean
    open var bIsReference: Boolean
    open var bIsConst: Boolean
    open var bIsWeakPointer: Boolean
    open var bIsUObjectWrapper: Boolean
    open var bSerializeAsSinglePrecisionFloat: Boolean
    open fun clone(): EdGraphPinType

    companion object {
        fun C(Other: UObject): EdGraphPinType
        fun C(Other: Any): EdGraphPinType
    }
}

external open class EdGraphPin_Deprecated : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PinName: String
    open var PinFriendlyName: String
    open var PinToolTip: String
    open var Direction: String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */
    open var PinType: EdGraphPinType
    open var DefaultValue: String
    open var AutogeneratedDefaultValue: String
    open var DefaultObject: UObject
    open var DefaultTextValue: String
    open var LinkedTo: Array<EdGraphPin_Deprecated>
    open var SubPins: Array<EdGraphPin_Deprecated>
    open var ParentPin: EdGraphPin_Deprecated
    open var ReferencePassThroughConnection: EdGraphPin_Deprecated
    open var bHidden: Boolean
    open var bNotConnectable: Boolean
    open var bDefaultValueIsReadOnly: Boolean
    open var bDefaultValueIsIgnored: Boolean
    open var bIsDiffing: Boolean
    open var bAdvancedView: Boolean
    open var bDisplayAsMutableRef: Boolean
    open var PersistentGuid: Guid

    companion object {
        fun Load(ResourceName: String): EdGraphPin_Deprecated
        fun Find(Outer: UObject, ResourceName: String): EdGraphPin_Deprecated
        fun GetDefaultObject(): EdGraphPin_Deprecated
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraphPin_Deprecated
        fun C(Other: UObject): EdGraphPin_Deprecated
        fun C(Other: Any): EdGraphPin_Deprecated
    }
}

external object ENodeAdvancedPins {
    var NoPins: String /* "NoPins" */
    var Shown: String /* "Shown" */
    var Hidden: String /* "Hidden" */
    var ENodeAdvancedPins_MAX: String /* "ENodeAdvancedPins_MAX" */
}

external object ENodeEnabledState {
    var Enabled: String /* "Enabled" */
    var Disabled: String /* "Disabled" */
    var DevelopmentOnly: String /* "DevelopmentOnly" */
    var ENodeEnabledState_MAX: String /* "ENodeEnabledState_MAX" */
}

external object EJavascriptPinContainerType {
    var None: String /* "None" */
    var Array: String /* "Array" */
    var Set: String /* "Set" */
    var Map: String /* "Map" */
    var EJavascriptPinContainerType_MAX: String /* "EJavascriptPinContainerType_MAX" */
}

external open class JavascriptEdGraphPin {
    open fun clone(): JavascriptEdGraphPin
    open fun BreakAllPinLinks()
    open fun BreakLinkTo(B: JavascriptEdGraphPin)
    open fun GetDirection(): String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */
    open fun GetLinkedPinNum(): Number
    open fun GetLinkedTo(): Array<JavascriptEdGraphPin>
    open fun GetOwningNode(): EdGraphNode
    open fun GetParentPin(): JavascriptEdGraphPin
    open fun GetPinContainerType(): String /* "None" | "Array" | "Set" | "Map" | "EJavascriptPinContainerType_MAX" */
    open fun GetPinGUID(): Guid
    open fun GetPinIndex(): Number
    open fun GetPinName(): String
    open fun GetPinRefObject(): UObject
    open fun GetPinType(): EdGraphPinType
    open fun GetSubPins(): Array<JavascriptEdGraphPin>
    open fun IsPinHidden(): Boolean
    open fun IsValidAssetData(): Boolean
    open fun MakeLinkTo(B: JavascriptEdGraphPin)
    open fun SetParentPin(Parent: JavascriptEdGraphPin)
    open fun SetPinAdvancedView(bAdvancedView: Boolean)
    open fun SetPinContainerType(ContainerType: String /* "None" | "Array" | "Set" | "Map" | "EJavascriptPinContainerType_MAX" */)
    open fun SetPinHidden(bHidden: Boolean)
    open fun SetPinInfo(InPinName: String, InPinToolTip: String)
    open fun SetPinRefObject(InObject: UObject)
    open fun SetPinType(PinType: EdGraphPinType)

    companion object {
        fun C(Other: UObject): JavascriptEdGraphPin
        fun C(Other: Any): JavascriptEdGraphPin
        fun BreakAllPinLinks(A: JavascriptEdGraphPin)
        fun BreakLinkTo(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin)
        fun GetDirection(A: JavascriptEdGraphPin): String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */
        fun GetLinkedPinNum(A: JavascriptEdGraphPin): Number
        fun GetLinkedTo(A: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>
        fun GetOwningNode(A: JavascriptEdGraphPin): EdGraphNode
        fun GetParentPin(A: JavascriptEdGraphPin): JavascriptEdGraphPin
        fun GetPinContainerType(A: JavascriptEdGraphPin): String /* "None" | "Array" | "Set" | "Map" | "EJavascriptPinContainerType_MAX" */
        fun GetPinGUID(A: JavascriptEdGraphPin): Guid
        fun GetPinIndex(A: JavascriptEdGraphPin): Number
        fun GetPinName(A: JavascriptEdGraphPin): String
        fun GetPinRefObject(InPin: JavascriptEdGraphPin): UObject
        fun GetPinType(A: JavascriptEdGraphPin): EdGraphPinType
        fun GetSubPins(A: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>
        fun IsPinHidden(A: JavascriptEdGraphPin): Boolean
        fun IsValid(A: JavascriptEdGraphPin): Boolean
        fun MakeLinkTo(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin)
        fun SetParentPin(A: JavascriptEdGraphPin, Parent: JavascriptEdGraphPin)
        fun SetPinAdvancedView(A: JavascriptEdGraphPin, bAdvancedView: Boolean)
        fun SetPinContainerType(A: JavascriptEdGraphPin, ContainerType: String /* "None" | "Array" | "Set" | "Map" | "EJavascriptPinContainerType_MAX" */)
        fun SetPinHidden(A: JavascriptEdGraphPin, bHidden: Boolean)
        fun SetPinInfo(A: JavascriptEdGraphPin, InPinName: String, InPinToolTip: String)
        fun SetPinRefObject(InPin: JavascriptEdGraphPin, InObject: UObject)
        fun SetPinType(Pin: JavascriptEdGraphPin, PinType: EdGraphPinType)
        fun GetDefaultObject(): JavascriptEdGraphPin
    }
}

external open class EdGraphNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DeprecatedPins: Array<EdGraphPin_Deprecated>
    open var NodePosX: Number
    open var NodePosY: Number
    open var NodeWidth: Number
    open var NodeHeight: Number
    open var AdvancedPinDisplay: String /* "NoPins" | "Shown" | "Hidden" | "ENodeAdvancedPins_MAX" */
    open var EnabledState: String /* "Enabled" | "Disabled" | "DevelopmentOnly" | "ENodeEnabledState_MAX" */
    open var bDisplayAsDisabled: Boolean
    open var bUserSetEnabledState: Boolean
    open var bIsNodeEnabled: Boolean
    open var bCanResizeNode: Boolean
    open var bHasCompilerMessage: Boolean
    open var bCommentBubblePinned: Boolean
    open var bCommentBubbleVisible: Boolean
    open var bCommentBubbleMakeVisible: Boolean
    open var bCanRenameNode: Boolean
    open var NodeUpgradeMessage: String
    open var NodeComment: String
    open var ErrorType: Number
    open var ErrorMsg: String
    open var NodeGuid: Guid
    open fun AutowireNewNode(FromPin: JavascriptEdGraphPin)
    open fun CanDuplicateNode(): Boolean
    open fun CanUserDeleteNode(): Boolean
    open fun DestroyNode()
    open fun FindPin(PinName: String, Direction: String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */): JavascriptEdGraphPin
    open fun GetPins(): Array<JavascriptEdGraphPin>
    open fun ResizeNode(NewSize: Vector2D)

    companion object {
        fun Load(ResourceName: String): EdGraphNode
        fun Find(Outer: UObject, ResourceName: String): EdGraphNode
        fun GetDefaultObject(): EdGraphNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraphNode
        fun C(Other: UObject): EdGraphNode
        fun C(Other: Any): EdGraphNode
        fun AutowireNewNode(UNode: EdGraphNode, FromPin: JavascriptEdGraphPin)
        fun CanDuplicateNode(UNode: EdGraphNode): Boolean
        fun CanUserDeleteNode(UNode: EdGraphNode): Boolean
        fun DestroyNode(UNode: EdGraphNode)
        fun FindPin(UNode: EdGraphNode, PinName: String, Direction: String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */): JavascriptEdGraphPin
        fun GetPins(UNode: EdGraphNode): Array<JavascriptEdGraphPin>
        fun ResizeNode(UNode: EdGraphNode, NewSize: Vector2D)
    }
}

external open class MaterialExpressionComment : MaterialExpression {
    constructor()
    constructor(Outer: UObject)
    open var SizeX: Number
    open var SizeY: Number
    open var text: String
    open var CommentColor: LinearColor
    open var FontSize: Number

    companion object {
        fun Load(ResourceName: String): MaterialExpressionComment
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionComment
        fun GetDefaultObject(): MaterialExpressionComment
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionComment
        fun C(Other: UObject): MaterialExpressionComment
        fun C(Other: Any): MaterialExpressionComment
    }
}

external open class ExpressionInput {
    open var Expression: MaterialExpression
    open var OutputIndex: Number
    open var InputName: String
    open var mask: Number
    open var MaskR: Number
    open var MaskG: Number
    open var MaskB: Number
    open var MaskA: Number
    open var ExpressionName: String
    open fun clone(): ExpressionInput

    companion object {
        fun C(Other: UObject): ExpressionInput
        fun C(Other: Any): ExpressionInput
    }
}

external object EFunctionInputType {
    var FunctionInput_Scalar: String /* "FunctionInput_Scalar" */
    var FunctionInput_Vector2: String /* "FunctionInput_Vector2" */
    var FunctionInput_Vector3: String /* "FunctionInput_Vector3" */
    var FunctionInput_Vector4: String /* "FunctionInput_Vector4" */
    var FunctionInput_Texture2D: String /* "FunctionInput_Texture2D" */
    var FunctionInput_TextureCube: String /* "FunctionInput_TextureCube" */
    var FunctionInput_Texture2DArray: String /* "FunctionInput_Texture2DArray" */
    var FunctionInput_VolumeTexture: String /* "FunctionInput_VolumeTexture" */
    var FunctionInput_StaticBool: String /* "FunctionInput_StaticBool" */
    var FunctionInput_MaterialAttributes: String /* "FunctionInput_MaterialAttributes" */
    var FunctionInput_TextureExternal: String /* "FunctionInput_TextureExternal" */
    var FunctionInput_MAX: String /* "FunctionInput_MAX" */
}

external open class MaterialExpressionFunctionInput : MaterialExpression {
    constructor()
    constructor(Outer: UObject)
    open var Preview: ExpressionInput
    open var InputName: String
    open var Description: String
    open var ID: Guid
    open var InputType: String /* "FunctionInput_Scalar" | "FunctionInput_Vector2" | "FunctionInput_Vector3" | "FunctionInput_Vector4" | "FunctionInput_Texture2D" | "FunctionInput_TextureCube" | "FunctionInput_Texture2DArray" | "FunctionInput_VolumeTexture" | "FunctionInput_StaticBool" | "FunctionInput_MaterialAttributes" | "FunctionInput_TextureExternal" | "FunctionInput_MAX" */
    open var PreviewValue: Vector4
    open var bUsePreviewValueAsDefault: Boolean
    open var SortPriority: Number
    open var bCompilingFunctionPreview: Boolean

    companion object {
        fun Load(ResourceName: String): MaterialExpressionFunctionInput
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionFunctionInput
        fun GetDefaultObject(): MaterialExpressionFunctionInput
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionFunctionInput
        fun C(Other: UObject): MaterialExpressionFunctionInput
        fun C(Other: Any): MaterialExpressionFunctionInput
    }
}

external open class FunctionExpressionInput {
    open var ExpressionInput: MaterialExpressionFunctionInput
    open var ExpressionInputId: Guid
    open var Input: ExpressionInput
    open fun clone(): FunctionExpressionInput

    companion object {
        fun C(Other: UObject): FunctionExpressionInput
        fun C(Other: Any): FunctionExpressionInput
    }
}

external open class MaterialExpressionFunctionOutput : MaterialExpression {
    constructor()
    constructor(Outer: UObject)
    open var OutputName: String
    open var Description: String
    open var SortPriority: Number
    open var A: ExpressionInput
    open var bLastPreviewed: Boolean
    open var ID: Guid

    companion object {
        fun Load(ResourceName: String): MaterialExpressionFunctionOutput
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionFunctionOutput
        fun GetDefaultObject(): MaterialExpressionFunctionOutput
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionFunctionOutput
        fun C(Other: UObject): MaterialExpressionFunctionOutput
        fun C(Other: Any): MaterialExpressionFunctionOutput
    }
}

external open class ExpressionOutput {
    open var OutputName: String
    open var mask: Number
    open var MaskR: Number
    open var MaskG: Number
    open var MaskB: Number
    open var MaskA: Number
    open fun clone(): ExpressionOutput

    companion object {
        fun C(Other: UObject): ExpressionOutput
        fun C(Other: Any): ExpressionOutput
    }
}

external open class FunctionExpressionOutput {
    open var ExpressionOutput: MaterialExpressionFunctionOutput
    open var ExpressionOutputId: Guid
    open var Output: ExpressionOutput
    open fun clone(): FunctionExpressionOutput

    companion object {
        fun C(Other: UObject): FunctionExpressionOutput
        fun C(Other: Any): FunctionExpressionOutput
    }
}

external open class MaterialParameterInfo {
    open var Name: String
    open var Association: String /* "LayerParameter" | "BlendParameter" | "GlobalParameter" | "EMaterialParameterAssociation_MAX" */
    open var index: Number
    open fun clone(): MaterialParameterInfo

    companion object {
        fun C(Other: UObject): MaterialParameterInfo
        fun C(Other: Any): MaterialParameterInfo
    }
}

external open class MaterialExpressionMaterialFunctionCall : MaterialExpression {
    constructor()
    constructor(Outer: UObject)
    open var MaterialFunction: MaterialFunctionInterface
    open var FunctionInputs: Array<FunctionExpressionInput>
    open var FunctionOutputs: Array<FunctionExpressionOutput>
    open var FunctionParameterInfo: MaterialParameterInfo
    open fun SetMaterialFunction(NewMaterialFunction: MaterialFunctionInterface): Boolean

    companion object {
        fun Load(ResourceName: String): MaterialExpressionMaterialFunctionCall
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionMaterialFunctionCall
        fun GetDefaultObject(): MaterialExpressionMaterialFunctionCall
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionMaterialFunctionCall
        fun C(Other: UObject): MaterialExpressionMaterialFunctionCall
        fun C(Other: Any): MaterialExpressionMaterialFunctionCall
    }
}

external object EBlendMode {
    var BLEND_Opaque: String /* "BLEND_Opaque" */
    var BLEND_Masked: String /* "BLEND_Masked" */
    var BLEND_Translucent: String /* "BLEND_Translucent" */
    var BLEND_Additive: String /* "BLEND_Additive" */
    var BLEND_Modulate: String /* "BLEND_Modulate" */
    var BLEND_AlphaComposite: String /* "BLEND_AlphaComposite" */
    var BLEND_AlphaHoldout: String /* "BLEND_AlphaHoldout" */
    var BLEND_MAX: String /* "BLEND_MAX" */
}

external open class MaterialFunction : MaterialFunctionInterface {
    constructor()
    constructor(Outer: UObject)
    open var ParentFunction: MaterialFunction
    open var Description: String
    open var FunctionExpressions: Array<MaterialExpression>
    open var bExposeToLibrary: Boolean
    open var bPrefixParameterNames: Boolean
    open var LibraryCategories: Array<String>
    open var LibraryCategoriesText: Array<String>
    open var FunctionEditorComments: Array<MaterialExpressionComment>
    open var PreviewMaterial: Material
    open var DependentFunctionExpressionCandidates: Array<MaterialExpressionMaterialFunctionCall>
    open var PreviewBlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var bReentrantFlag: Boolean
    open fun CreateMaterialExpressionInFunction(ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
    open fun DeleteAllMaterialExpressionsInFunction()
    open fun DeleteMaterialExpressionInFunction(Expression: MaterialExpression)
    open fun GetNumMaterialExpressionsInFunction(): Number
    open fun LayoutMaterialFunctionExpressions()

    companion object {
        fun Load(ResourceName: String): MaterialFunction
        fun Find(Outer: UObject, ResourceName: String): MaterialFunction
        fun GetDefaultObject(): MaterialFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialFunction
        fun C(Other: UObject): MaterialFunction
        fun C(Other: Any): MaterialFunction
        fun CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction, ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
        fun DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction)
        fun DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction, Expression: MaterialExpression)
        fun GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): Number
        fun LayoutMaterialFunctionExpressions(MaterialFunction: MaterialFunction)
    }
}

external object EMaterialProperty {
    var MP_EmissiveColor: String /* "MP_EmissiveColor" */
    var MP_Opacity: String /* "MP_Opacity" */
    var MP_OpacityMask: String /* "MP_OpacityMask" */
    var MP_DiffuseColor: String /* "MP_DiffuseColor" */
    var MP_SpecularColor: String /* "MP_SpecularColor" */
    var MP_BaseColor: String /* "MP_BaseColor" */
    var MP_Metallic: String /* "MP_Metallic" */
    var MP_Specular: String /* "MP_Specular" */
    var MP_Roughness: String /* "MP_Roughness" */
    var MP_Anisotropy: String /* "MP_Anisotropy" */
    var MP_Normal: String /* "MP_Normal" */
    var MP_Tangent: String /* "MP_Tangent" */
    var MP_WorldPositionOffset: String /* "MP_WorldPositionOffset" */
    var MP_WorldDisplacement_DEPRECATED: String /* "MP_WorldDisplacement_DEPRECATED" */
    var MP_TessellationMultiplier_DEPRECATED: String /* "MP_TessellationMultiplier_DEPRECATED" */
    var MP_SubsurfaceColor: String /* "MP_SubsurfaceColor" */
    var MP_CustomData0: String /* "MP_CustomData0" */
    var MP_CustomData1: String /* "MP_CustomData1" */
    var MP_AmbientOcclusion: String /* "MP_AmbientOcclusion" */
    var MP_Refraction: String /* "MP_Refraction" */
    var MP_CustomizedUVs0: String /* "MP_CustomizedUVs0" */
    var MP_CustomizedUVs1: String /* "MP_CustomizedUVs1" */
    var MP_CustomizedUVs2: String /* "MP_CustomizedUVs2" */
    var MP_CustomizedUVs3: String /* "MP_CustomizedUVs3" */
    var MP_CustomizedUVs4: String /* "MP_CustomizedUVs4" */
    var MP_CustomizedUVs5: String /* "MP_CustomizedUVs5" */
    var MP_CustomizedUVs6: String /* "MP_CustomizedUVs6" */
    var MP_CustomizedUVs7: String /* "MP_CustomizedUVs7" */
    var MP_PixelDepthOffset: String /* "MP_PixelDepthOffset" */
    var MP_ShadingModel: String /* "MP_ShadingModel" */
    var MP_FrontMaterial: String /* "MP_FrontMaterial" */
    var MP_MaterialAttributes: String /* "MP_MaterialAttributes" */
    var MP_CustomOutput: String /* "MP_CustomOutput" */
    var MP_MAX: String /* "MP_MAX" */
}

external open class MaterialExpression : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaterialExpressionEditorX: Number
    open var MaterialExpressionEditorY: Number
    open var GraphNode: EdGraphNode
    open var SubgraphExpression: MaterialExpression
    open var MaterialExpressionGuid: Guid
    open var Material: Material
    open var UFunction: MaterialFunction
    open var Desc: String
    open var bRealtimePreview: Boolean
    open var bNeedToUpdatePreview: Boolean
    open var bIsParameterExpression: Boolean
    open var bCommentBubbleVisible: Boolean
    open var bShowOutputNameOnPin: Boolean
    open var bShowMaskColorsOnPin: Boolean
    open var bHidePreviewWindow: Boolean
    open var bCollapsed: Boolean
    open var bShaderInputData: Boolean
    open var bShowInputs: Boolean
    open var bShowOutputs: Boolean
    open var MenuCategories: Array<String>
    open var Outputs: Array<ExpressionOutput>
    open fun ConnectMaterialExpressions(FromOutputName: String, ToExpression: MaterialExpression, ToInputName: String): Boolean
    open fun ConnectMaterialProperty(FromOutputName: String, Property: String /* "MP_EmissiveColor" | "MP_Opacity" | "MP_OpacityMask" | "MP_DiffuseColor" | "MP_SpecularColor" | "MP_BaseColor" | "MP_Metallic" | "MP_Specular" | "MP_Roughness" | "MP_Anisotropy" | "MP_Normal" | "MP_Tangent" | "MP_WorldPositionOffset" | "MP_WorldDisplacement_DEPRECATED" | "MP_TessellationMultiplier_DEPRECATED" | "MP_SubsurfaceColor" | "MP_CustomData0" | "MP_CustomData1" | "MP_AmbientOcclusion" | "MP_Refraction" | "MP_CustomizedUVs0" | "MP_CustomizedUVs1" | "MP_CustomizedUVs2" | "MP_CustomizedUVs3" | "MP_CustomizedUVs4" | "MP_CustomizedUVs5" | "MP_CustomizedUVs6" | "MP_CustomizedUVs7" | "MP_PixelDepthOffset" | "MP_ShadingModel" | "MP_FrontMaterial" | "MP_MaterialAttributes" | "MP_CustomOutput" | "MP_MAX" */): Boolean

    companion object {
        fun Load(ResourceName: String): MaterialExpression
        fun Find(Outer: UObject, ResourceName: String): MaterialExpression
        fun GetDefaultObject(): MaterialExpression
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpression
        fun C(Other: UObject): MaterialExpression
        fun C(Other: Any): MaterialExpression
        fun ConnectMaterialExpressions(FromExpression: MaterialExpression, FromOutputName: String, ToExpression: MaterialExpression, ToInputName: String): Boolean
        fun ConnectMaterialProperty(FromExpression: MaterialExpression, FromOutputName: String, Property: String /* "MP_EmissiveColor" | "MP_Opacity" | "MP_OpacityMask" | "MP_DiffuseColor" | "MP_SpecularColor" | "MP_BaseColor" | "MP_Metallic" | "MP_Specular" | "MP_Roughness" | "MP_Anisotropy" | "MP_Normal" | "MP_Tangent" | "MP_WorldPositionOffset" | "MP_WorldDisplacement_DEPRECATED" | "MP_TessellationMultiplier_DEPRECATED" | "MP_SubsurfaceColor" | "MP_CustomData0" | "MP_CustomData1" | "MP_AmbientOcclusion" | "MP_Refraction" | "MP_CustomizedUVs0" | "MP_CustomizedUVs1" | "MP_CustomizedUVs2" | "MP_CustomizedUVs3" | "MP_CustomizedUVs4" | "MP_CustomizedUVs5" | "MP_CustomizedUVs6" | "MP_CustomizedUVs7" | "MP_PixelDepthOffset" | "MP_ShadingModel" | "MP_FrontMaterial" | "MP_MaterialAttributes" | "MP_CustomOutput" | "MP_MAX" */): Boolean
    }
}

external open class MaterialInput {
    open var Expression: MaterialExpression
    open var OutputIndex: Number
    open var InputName: String
    open var mask: Number
    open var MaskR: Number
    open var MaskG: Number
    open var MaskB: Number
    open var MaskA: Number
    open var ExpressionName: String
    open fun clone(): MaterialInput

    companion object {
        fun C(Other: UObject): MaterialInput
        fun C(Other: Any): MaterialInput
    }
}

external open class ColorMaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var Constant: Color
    override fun clone(): ColorMaterialInput

    companion object {
        fun C(Other: UObject): ColorMaterialInput
        fun C(Other: Any): ColorMaterialInput
    }
}

external open class ScalarMaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var Constant: Number
    override fun clone(): ScalarMaterialInput

    companion object {
        fun C(Other: UObject): ScalarMaterialInput
        fun C(Other: Any): ScalarMaterialInput
    }
}

external interface `T$27` {
    var X: Number
    var Y: Number
    var Z: Number
}

external open class Vector3f {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open fun clone(): Vector3f
    open fun ToString(): String
    open fun BreakVector3f(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally): `T$27`

    companion object {
        fun C(Other: UObject): Vector3f
        fun C(Other: Any): Vector3f
        fun ToString(InVec: Vector3f): String
        fun BreakVector3f(InVec: Vector3f, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally): `T$27`
    }
}

external open class VectorMaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var Constant: Vector3f
    override fun clone(): VectorMaterialInput

    companion object {
        fun C(Other: UObject): VectorMaterialInput
        fun C(Other: Any): VectorMaterialInput
    }
}

external object EMaterialDomain {
    var MD_Surface: String /* "MD_Surface" */
    var MD_DeferredDecal: String /* "MD_DeferredDecal" */
    var MD_LightFunction: String /* "MD_LightFunction" */
    var MD_Volume: String /* "MD_Volume" */
    var MD_PostProcess: String /* "MD_PostProcess" */
    var MD_UI: String /* "MD_UI" */
    var MD_RuntimeVirtualTexture: String /* "MD_RuntimeVirtualTexture" */
    var MD_MAX: String /* "MD_MAX" */
}

external object EDecalBlendMode {
    var DBM_Translucent: String /* "DBM_Translucent" */
    var DBM_Stain: String /* "DBM_Stain" */
    var DBM_Normal: String /* "DBM_Normal" */
    var DBM_Emissive: String /* "DBM_Emissive" */
    var DBM_DBuffer_ColorNormalRoughness: String /* "DBM_DBuffer_ColorNormalRoughness" */
    var DBM_DBuffer_Color: String /* "DBM_DBuffer_Color" */
    var DBM_DBuffer_ColorNormal: String /* "DBM_DBuffer_ColorNormal" */
    var DBM_DBuffer_ColorRoughness: String /* "DBM_DBuffer_ColorRoughness" */
    var DBM_DBuffer_Normal: String /* "DBM_DBuffer_Normal" */
    var DBM_DBuffer_NormalRoughness: String /* "DBM_DBuffer_NormalRoughness" */
    var DBM_DBuffer_Roughness: String /* "DBM_DBuffer_Roughness" */
    var DBM_DBuffer_Emissive: String /* "DBM_DBuffer_Emissive" */
    var DBM_DBuffer_AlphaComposite: String /* "DBM_DBuffer_AlphaComposite" */
    var DBM_DBuffer_EmissiveAlphaComposite: String /* "DBM_DBuffer_EmissiveAlphaComposite" */
    var DBM_Volumetric_DistanceFunction: String /* "DBM_Volumetric_DistanceFunction" */
    var DBM_AlphaComposite: String /* "DBM_AlphaComposite" */
    var DBM_AmbientOcclusion: String /* "DBM_AmbientOcclusion" */
    var DBM_MAX: String /* "DBM_MAX" */
}

external object EMaterialDecalResponse {
    var MDR_None: String /* "MDR_None" */
    var MDR_ColorNormalRoughness: String /* "MDR_ColorNormalRoughness" */
    var MDR_Color: String /* "MDR_Color" */
    var MDR_ColorNormal: String /* "MDR_ColorNormal" */
    var MDR_ColorRoughness: String /* "MDR_ColorRoughness" */
    var MDR_Normal: String /* "MDR_Normal" */
    var MDR_NormalRoughness: String /* "MDR_NormalRoughness" */
    var MDR_Roughness: String /* "MDR_Roughness" */
    var MDR_MAX: String /* "MDR_MAX" */
}

external object EMaterialShadingModel {
    var MSM_Unlit: String /* "MSM_Unlit" */
    var MSM_DefaultLit: String /* "MSM_DefaultLit" */
    var MSM_Subsurface: String /* "MSM_Subsurface" */
    var MSM_PreintegratedSkin: String /* "MSM_PreintegratedSkin" */
    var MSM_ClearCoat: String /* "MSM_ClearCoat" */
    var MSM_SubsurfaceProfile: String /* "MSM_SubsurfaceProfile" */
    var MSM_TwoSidedFoliage: String /* "MSM_TwoSidedFoliage" */
    var MSM_Hair: String /* "MSM_Hair" */
    var MSM_Cloth: String /* "MSM_Cloth" */
    var MSM_Eye: String /* "MSM_Eye" */
    var MSM_SingleLayerWater: String /* "MSM_SingleLayerWater" */
    var MSM_ThinTranslucent: String /* "MSM_ThinTranslucent" */
    var MSM_Strata: String /* "MSM_Strata" */
    var MSM_NUM: String /* "MSM_NUM" */
    var MSM_FromMaterialExpression: String /* "MSM_FromMaterialExpression" */
    var MSM_MAX: String /* "MSM_MAX" */
}

external open class MaterialShadingModelField {
    open var ShadingModelField: Any
    open fun clone(): MaterialShadingModelField

    companion object {
        fun C(Other: UObject): MaterialShadingModelField
        fun C(Other: Any): MaterialShadingModelField
    }
}

external open class Vector2MaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var ConstantX: Number
    open var ConstantY: Number
    override fun clone(): Vector2MaterialInput

    companion object {
        fun C(Other: UObject): Vector2MaterialInput
        fun C(Other: Any): Vector2MaterialInput
    }
}

external open class MaterialAttributesInput : ExpressionInput {
    open var PropertyConnectedBitmask: Number
    override fun clone(): MaterialAttributesInput

    companion object {
        fun C(Other: UObject): MaterialAttributesInput
        fun C(Other: Any): MaterialAttributesInput
    }
}

external open class ShadingModelMaterialInput : MaterialInput {
    override fun clone(): ShadingModelMaterialInput

    companion object {
        fun C(Other: UObject): ShadingModelMaterialInput
        fun C(Other: Any): ShadingModelMaterialInput
    }
}

external open class StrataMaterialInput : MaterialInput {
    override fun clone(): StrataMaterialInput

    companion object {
        fun C(Other: UObject): StrataMaterialInput
        fun C(Other: Any): StrataMaterialInput
    }
}

external object EMaterialTranslucencyPass {
    var MTP_BeforeDOF: String /* "MTP_BeforeDOF" */
    var MTP_AfterDOF: String /* "MTP_AfterDOF" */
    var MTP_AfterMotionBlur: String /* "MTP_AfterMotionBlur" */
    var MTP_MAX: String /* "MTP_MAX" */
}

external object ETranslucencyLightingMode {
    var TLM_VolumetricNonDirectional: String /* "TLM_VolumetricNonDirectional" */
    var TLM_VolumetricDirectional: String /* "TLM_VolumetricDirectional" */
    var TLM_VolumetricPerVertexNonDirectional: String /* "TLM_VolumetricPerVertexNonDirectional" */
    var TLM_VolumetricPerVertexDirectional: String /* "TLM_VolumetricPerVertexDirectional" */
    var TLM_Surface: String /* "TLM_Surface" */
    var TLM_SurfacePerPixelLighting: String /* "TLM_SurfacePerPixelLighting" */
    var TLM_MAX: String /* "TLM_MAX" */
}

external object EMaterialFloatPrecisionMode {
    var MFPM_Default: String /* "MFPM_Default" */
    var MFPM_Full_MaterialExpressionOnly: String /* "MFPM_Full_MaterialExpressionOnly" */
    var MFPM_Full: String /* "MFPM_Full" */
    var MFPM_Half: String /* "MFPM_Half" */
    var MFPM_MAX: String /* "MFPM_MAX" */
}

external object EMaterialShadingRate {
    var MSR_1x1: String /* "MSR_1x1" */
    var MSR_2x1: String /* "MSR_2x1" */
    var MSR_1x2: String /* "MSR_1x2" */
    var MSR_2x2: String /* "MSR_2x2" */
    var MSR_4x2: String /* "MSR_4x2" */
    var MSR_2x4: String /* "MSR_2x4" */
    var MSR_4x4: String /* "MSR_4x4" */
    var MSR_Count: String /* "MSR_Count" */
    var MSR_MAX: String /* "MSR_MAX" */
}

external open class ExpressionExecOutput {
    open var Expression: MaterialExpression
    open fun clone(): ExpressionExecOutput

    companion object {
        fun C(Other: UObject): ExpressionExecOutput
        fun C(Other: Any): ExpressionExecOutput
    }
}

external open class MaterialExpressionExecBegin : MaterialExpression {
    constructor()
    constructor(Outer: UObject)
    open var exec: ExpressionExecOutput

    companion object {
        fun Load(ResourceName: String): MaterialExpressionExecBegin
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionExecBegin
        fun GetDefaultObject(): MaterialExpressionExecBegin
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionExecBegin
        fun C(Other: UObject): MaterialExpressionExecBegin
        fun C(Other: Any): MaterialExpressionExecBegin
    }
}

external open class MaterialExpressionExecEnd : MaterialExpression {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MaterialExpressionExecEnd
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionExecEnd
        fun GetDefaultObject(): MaterialExpressionExecEnd
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionExecEnd
        fun C(Other: UObject): MaterialExpressionExecEnd
        fun C(Other: Any): MaterialExpressionExecEnd
    }
}

external open class ParameterGroupData {
    open var GroupName: String
    open var GroupSortPriority: Number
    open fun clone(): ParameterGroupData

    companion object {
        fun C(Other: UObject): ParameterGroupData
        fun C(Other: Any): ParameterGroupData
    }
}

external object EBlendableLocation {
    var BL_AfterTonemapping: String /* "BL_AfterTonemapping" */
    var BL_BeforeTonemapping: String /* "BL_BeforeTonemapping" */
    var BL_BeforeTranslucency: String /* "BL_BeforeTranslucency" */
    var BL_ReplacingTonemapper: String /* "BL_ReplacingTonemapper" */
    var BL_SSRInput: String /* "BL_SSRInput" */
    var BL_MAX: String /* "BL_MAX" */
}

external object EMaterialStencilCompare {
    var MSC_Less: String /* "MSC_Less" */
    var MSC_LessEqual: String /* "MSC_LessEqual" */
    var MSC_Greater: String /* "MSC_Greater" */
    var MSC_GreaterEqual: String /* "MSC_GreaterEqual" */
    var MSC_Equal: String /* "MSC_Equal" */
    var MSC_NotEqual: String /* "MSC_NotEqual" */
    var MSC_Never: String /* "MSC_Never" */
    var MSC_Always: String /* "MSC_Always" */
    var MSC_Count: String /* "MSC_Count" */
    var MSC_MAX: String /* "MSC_MAX" */
}

external object ERefractionMode {
    var RM_IndexOfRefraction: String /* "RM_IndexOfRefraction" */
    var RM_PixelNormalOffset: String /* "RM_PixelNormalOffset" */
    var RM_MAX: String /* "RM_MAX" */
}

external object EMaterialUsage {
    var MATUSAGE_SkeletalMesh: String /* "MATUSAGE_SkeletalMesh" */
    var MATUSAGE_ParticleSprites: String /* "MATUSAGE_ParticleSprites" */
    var MATUSAGE_BeamTrails: String /* "MATUSAGE_BeamTrails" */
    var MATUSAGE_MeshParticles: String /* "MATUSAGE_MeshParticles" */
    var MATUSAGE_StaticLighting: String /* "MATUSAGE_StaticLighting" */
    var MATUSAGE_MorphTargets: String /* "MATUSAGE_MorphTargets" */
    var MATUSAGE_SplineMesh: String /* "MATUSAGE_SplineMesh" */
    var MATUSAGE_InstancedStaticMeshes: String /* "MATUSAGE_InstancedStaticMeshes" */
    var MATUSAGE_GeometryCollections: String /* "MATUSAGE_GeometryCollections" */
    var MATUSAGE_Clothing: String /* "MATUSAGE_Clothing" */
    var MATUSAGE_NiagaraSprites: String /* "MATUSAGE_NiagaraSprites" */
    var MATUSAGE_NiagaraRibbons: String /* "MATUSAGE_NiagaraRibbons" */
    var MATUSAGE_NiagaraMeshParticles: String /* "MATUSAGE_NiagaraMeshParticles" */
    var MATUSAGE_GeometryCache: String /* "MATUSAGE_GeometryCache" */
    var MATUSAGE_Water: String /* "MATUSAGE_Water" */
    var MATUSAGE_HairStrands: String /* "MATUSAGE_HairStrands" */
    var MATUSAGE_LidarPointCloud: String /* "MATUSAGE_LidarPointCloud" */
    var MATUSAGE_VirtualHeightfieldMesh: String /* "MATUSAGE_VirtualHeightfieldMesh" */
    var MATUSAGE_Nanite: String /* "MATUSAGE_Nanite" */
    var MATUSAGE_MAX: String /* "MATUSAGE_MAX" */
}

external interface `T$28` {
    var bNeedsRecompile: Boolean
    var `$`: Boolean
}

external open class Material : MaterialInterface {
    constructor()
    constructor(Outer: UObject)
    open var PhysMaterial: PhysicalMaterial
    open var PhysMaterialMask: PhysicalMaterialMask
    open var PhysicalMaterialMap: PhysicalMaterial
    open var DiffuseColor: ColorMaterialInput
    open var SpecularColor: ColorMaterialInput
    open var BaseColor: ColorMaterialInput
    open var Metallic: ScalarMaterialInput
    open var Specular: ScalarMaterialInput
    open var Roughness: ScalarMaterialInput
    open var Anisotropy: ScalarMaterialInput
    open var Normal: VectorMaterialInput
    open var Tangent: VectorMaterialInput
    open var EmissiveColor: ColorMaterialInput
    open var Opacity: ScalarMaterialInput
    open var OpacityMask: ScalarMaterialInput
    open var MaterialDomain: String /* "MD_Surface" | "MD_DeferredDecal" | "MD_LightFunction" | "MD_Volume" | "MD_PostProcess" | "MD_UI" | "MD_RuntimeVirtualTexture" | "MD_MAX" */
    open var BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var DecalBlendMode: String /* "DBM_Translucent" | "DBM_Stain" | "DBM_Normal" | "DBM_Emissive" | "DBM_DBuffer_ColorNormalRoughness" | "DBM_DBuffer_Color" | "DBM_DBuffer_ColorNormal" | "DBM_DBuffer_ColorRoughness" | "DBM_DBuffer_Normal" | "DBM_DBuffer_NormalRoughness" | "DBM_DBuffer_Roughness" | "DBM_DBuffer_Emissive" | "DBM_DBuffer_AlphaComposite" | "DBM_DBuffer_EmissiveAlphaComposite" | "DBM_Volumetric_DistanceFunction" | "DBM_AlphaComposite" | "DBM_AmbientOcclusion" | "DBM_MAX" */
    open var MaterialDecalResponse: String /* "MDR_None" | "MDR_ColorNormalRoughness" | "MDR_Color" | "MDR_ColorNormal" | "MDR_ColorRoughness" | "MDR_Normal" | "MDR_NormalRoughness" | "MDR_Roughness" | "MDR_MAX" */
    open var ShadingModel: String /* "MSM_Unlit" | "MSM_DefaultLit" | "MSM_Subsurface" | "MSM_PreintegratedSkin" | "MSM_ClearCoat" | "MSM_SubsurfaceProfile" | "MSM_TwoSidedFoliage" | "MSM_Hair" | "MSM_Cloth" | "MSM_Eye" | "MSM_SingleLayerWater" | "MSM_ThinTranslucent" | "MSM_Strata" | "MSM_NUM" | "MSM_FromMaterialExpression" | "MSM_MAX" */
    open var bCastDynamicShadowAsMasked: Boolean
    open var ShadingModels: MaterialShadingModelField
    open var UsedShadingModels: String
    open var OpacityMaskClipValue: Number
    open var WorldPositionOffset: VectorMaterialInput
    open var SubsurfaceColor: ColorMaterialInput
    open var ClearCoat: ScalarMaterialInput
    open var ClearCoatRoughness: ScalarMaterialInput
    open var AmbientOcclusion: ScalarMaterialInput
    open var Refraction: ScalarMaterialInput
    open var CustomizedUVs: Vector2MaterialInput
    open var MaterialAttributes: MaterialAttributesInput
    open var PixelDepthOffset: ScalarMaterialInput
    open var ShadingModelFromMaterialExpression: ShadingModelMaterialInput
    open var FrontMaterial: StrataMaterialInput
    open var bEnableSeparateTranslucency: Boolean
    open var bEnableResponsiveAA: Boolean
    open var bScreenSpaceReflections: Boolean
    open var bContactShadows: Boolean
    open var TwoSided: Boolean
    open var DitheredLODTransition: Boolean
    open var DitherOpacityMask: Boolean
    open var bAllowNegativeEmissiveColor: Boolean
    open var TranslucencyPass: String /* "MTP_BeforeDOF" | "MTP_AfterDOF" | "MTP_AfterMotionBlur" | "MTP_MAX" */
    open var TranslucencyLightingMode: String /* "TLM_VolumetricNonDirectional" | "TLM_VolumetricDirectional" | "TLM_VolumetricPerVertexNonDirectional" | "TLM_VolumetricPerVertexDirectional" | "TLM_Surface" | "TLM_SurfacePerPixelLighting" | "TLM_MAX" */
    open var bEnableMobileSeparateTranslucency: Boolean
    open var NumCustomizedUVs: Number
    open var TranslucencyDirectionalLightingIntensity: Number
    open var TranslucentShadowDensityScale: Number
    open var TranslucentSelfShadowDensityScale: Number
    open var TranslucentSelfShadowSecondDensityScale: Number
    open var TranslucentSelfShadowSecondOpacity: Number
    open var TranslucentBackscatteringExponent: Number
    open var TranslucentMultipleScatteringExtinction: LinearColor
    open var TranslucentShadowStartOffset: Number
    open var bDisableDepthTest: Boolean
    open var bWriteOnlyAlpha: Boolean
    open var bGenerateSphericalParticleNormals: Boolean
    open var bTangentSpaceNormal: Boolean
    open var bUseEmissiveForDynamicAreaLighting: Boolean
    open var bUsedAsSpecialEngineMaterial: Boolean
    open var bUsedWithSkeletalMesh: Boolean
    open var bUsedWithEditorCompositing: Boolean
    open var bUsedWithParticleSprites: Boolean
    open var bUsedWithBeamTrails: Boolean
    open var bUsedWithMeshParticles: Boolean
    open var bUsedWithNiagaraSprites: Boolean
    open var bUsedWithNiagaraRibbons: Boolean
    open var bUsedWithNiagaraMeshParticles: Boolean
    open var bUsedWithGeometryCache: Boolean
    open var bUsedWithStaticLighting: Boolean
    open var bUsedWithMorphTargets: Boolean
    open var bUsedWithSplineMeshes: Boolean
    open var bUsedWithInstancedStaticMeshes: Boolean
    open var bUsedWithGeometryCollections: Boolean
    open var bUsesDistortion: Boolean
    open var bUsedWithClothing: Boolean
    open var bUsedWithWater: Boolean
    open var bUsedWithHairStrands: Boolean
    open var bUsedWithLidarPointCloud: Boolean
    open var bUsedWithVirtualHeightfieldMesh: Boolean
    open var bUsedWithNanite: Boolean
    open var bUsedWithUI: Boolean
    open var bAutomaticallySetUsageInEditor: Boolean
    open var bFullyRough: Boolean
    open var bUseFullPrecision: Boolean
    open var FloatPrecisionMode: String /* "MFPM_Default" | "MFPM_Full_MaterialExpressionOnly" | "MFPM_Full" | "MFPM_Half" | "MFPM_MAX" */
    open var bUseLightmapDirectionality: Boolean
    open var bMobileEnableHighQualityBRDF: Boolean
    open var bUseAlphaToCoverage: Boolean
    open var bForwardRenderUsePreintegratedGFForSimpleIBL: Boolean
    open var bUseHQForwardReflections: Boolean
    open var bForwardBlendsSkyLightCubemaps: Boolean
    open var bUsePlanarForwardReflections: Boolean
    open var bNormalCurvatureToRoughness: Boolean
    open var AllowTranslucentCustomDepthWrites: Boolean
    open var Wireframe: Boolean
    open var ShadingRate: String /* "MSR_1x1" | "MSR_2x1" | "MSR_1x2" | "MSR_2x2" | "MSR_4x2" | "MSR_2x4" | "MSR_4x4" | "MSR_Count" | "MSR_MAX" */
    open var EditorX: Number
    open var EditorY: Number
    open var EditorPitch: Number
    open var EditorYaw: Number
    open var Expressions: Array<MaterialExpression>
    open var EditorComments: Array<MaterialExpressionComment>
    open var ExpressionExecBegin: MaterialExpressionExecBegin
    open var ExpressionExecEnd: MaterialExpressionExecEnd
    open var ParameterGroupData: Array<ParameterGroupData>
    open var bCanMaskedBeAssumedOpaque: Boolean
    open var bIsMasked: Boolean
    open var bIsPreviewMaterial: Boolean
    open var bIsFunctionPreviewMaterial: Boolean
    open var bUseMaterialAttributes: Boolean
    open var bEnableExecWire: Boolean
    open var bEnableNewHLSLGenerator: Boolean
    open var bCastRayTracedShadows: Boolean
    open var bUseTranslucencyVertexFog: Boolean
    open var bApplyCloudFogging: Boolean
    open var bIsSky: Boolean
    open var bComputeFogPerPixel: Boolean
    open var bOutputTranslucentVelocity: Boolean
    open var bAllowDevelopmentShaderCompile: Boolean
    open var bIsMaterialEditorStatsMaterial: Boolean
    open var BlendableLocation: String /* "BL_AfterTonemapping" | "BL_BeforeTonemapping" | "BL_BeforeTranslucency" | "BL_ReplacingTonemapper" | "BL_SSRInput" | "BL_MAX" */
    open var BlendableOutputAlpha: Boolean
    open var bEnableStencilTest: Boolean
    open var StencilCompare: String /* "MSC_Less" | "MSC_LessEqual" | "MSC_Greater" | "MSC_GreaterEqual" | "MSC_Equal" | "MSC_NotEqual" | "MSC_Never" | "MSC_Always" | "MSC_Count" | "MSC_MAX" */
    open var StencilRefValue: Number
    open var RefractionMode: String /* "RM_IndexOfRefraction" | "RM_PixelNormalOffset" | "RM_MAX" */
    open var BlendablePriority: Number
    open var bIsBlendable: Boolean
    open var UsageFlagWarnings: Any
    open var RefractionDepthBias: Number
    open var StateId: Guid
    open var bSavedCachedExpressionData: Boolean
    open var ReferencedTextureGuids: Array<Guid>
    open fun CreateMaterialExpression(ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
    open fun DeleteAllMaterialExpressions()
    open fun DeleteMaterialExpression(Expression: MaterialExpression)
    open fun DuplicateMaterialExpression(MaterialFunction: MaterialFunction, Expression: MaterialExpression): MaterialExpression
    open fun GetInputsForMaterialExpression(MaterialExpression: MaterialExpression): Array<MaterialExpression>
    open fun GetMaterialDefaultScalarParameterValue(ParameterName: String): Number
    open fun GetMaterialDefaultStaticSwitchParameterValue(ParameterName: String): Boolean
    open fun GetMaterialDefaultTextureParameterValue(ParameterName: String): Texture
    open fun GetMaterialDefaultVectorParameterValue(ParameterName: String): LinearColor
    open fun GetMaterialPropertyInputNode(Property: String /* "MP_EmissiveColor" | "MP_Opacity" | "MP_OpacityMask" | "MP_DiffuseColor" | "MP_SpecularColor" | "MP_BaseColor" | "MP_Metallic" | "MP_Specular" | "MP_Roughness" | "MP_Anisotropy" | "MP_Normal" | "MP_Tangent" | "MP_WorldPositionOffset" | "MP_WorldDisplacement_DEPRECATED" | "MP_TessellationMultiplier_DEPRECATED" | "MP_SubsurfaceColor" | "MP_CustomData0" | "MP_CustomData1" | "MP_AmbientOcclusion" | "MP_Refraction" | "MP_CustomizedUVs0" | "MP_CustomizedUVs1" | "MP_CustomizedUVs2" | "MP_CustomizedUVs3" | "MP_CustomizedUVs4" | "MP_CustomizedUVs5" | "MP_CustomizedUVs6" | "MP_CustomizedUVs7" | "MP_PixelDepthOffset" | "MP_ShadingModel" | "MP_FrontMaterial" | "MP_MaterialAttributes" | "MP_CustomOutput" | "MP_MAX" */): MaterialExpression
    open fun GetMaterialSelectedNodes(): Any
    open fun GetNumMaterialExpressions(): Number
    open fun GetUsedTextures(): Array<Texture>
    open fun HasMaterialUsage(Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_Water" | "MATUSAGE_HairStrands" | "MATUSAGE_LidarPointCloud" | "MATUSAGE_VirtualHeightfieldMesh" | "MATUSAGE_Nanite" | "MATUSAGE_MAX" */): Boolean
    open fun LayoutMaterialExpressions()
    open fun RecompileMaterial()
    open fun SetMaterialUsage(Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_Water" | "MATUSAGE_HairStrands" | "MATUSAGE_LidarPointCloud" | "MATUSAGE_VirtualHeightfieldMesh" | "MATUSAGE_Nanite" | "MATUSAGE_MAX" */, bNeedsRecompile: Boolean = definedExternally): `T$28`

    companion object {
        fun Load(ResourceName: String): Material
        fun Find(Outer: UObject, ResourceName: String): Material
        fun GetDefaultObject(): Material
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Material
        fun C(Other: UObject): Material
        fun C(Other: Any): Material
        fun CreateMaterialExpression(Material: Material, ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
        fun DeleteAllMaterialExpressions(Material: Material)
        fun DeleteMaterialExpression(Material: Material, Expression: MaterialExpression)
        fun DuplicateMaterialExpression(Material: Material, MaterialFunction: MaterialFunction, Expression: MaterialExpression): MaterialExpression
        fun GetInputsForMaterialExpression(Material: Material, MaterialExpression: MaterialExpression): Array<MaterialExpression>
        fun GetMaterialDefaultScalarParameterValue(Material: Material, ParameterName: String): Number
        fun GetMaterialDefaultStaticSwitchParameterValue(Material: Material, ParameterName: String): Boolean
        fun GetMaterialDefaultTextureParameterValue(Material: Material, ParameterName: String): Texture
        fun GetMaterialDefaultVectorParameterValue(Material: Material, ParameterName: String): LinearColor
        fun GetMaterialPropertyInputNode(Material: Material, Property: String /* "MP_EmissiveColor" | "MP_Opacity" | "MP_OpacityMask" | "MP_DiffuseColor" | "MP_SpecularColor" | "MP_BaseColor" | "MP_Metallic" | "MP_Specular" | "MP_Roughness" | "MP_Anisotropy" | "MP_Normal" | "MP_Tangent" | "MP_WorldPositionOffset" | "MP_WorldDisplacement_DEPRECATED" | "MP_TessellationMultiplier_DEPRECATED" | "MP_SubsurfaceColor" | "MP_CustomData0" | "MP_CustomData1" | "MP_AmbientOcclusion" | "MP_Refraction" | "MP_CustomizedUVs0" | "MP_CustomizedUVs1" | "MP_CustomizedUVs2" | "MP_CustomizedUVs3" | "MP_CustomizedUVs4" | "MP_CustomizedUVs5" | "MP_CustomizedUVs6" | "MP_CustomizedUVs7" | "MP_PixelDepthOffset" | "MP_ShadingModel" | "MP_FrontMaterial" | "MP_MaterialAttributes" | "MP_CustomOutput" | "MP_MAX" */): MaterialExpression
        fun GetMaterialSelectedNodes(Material: Material): Any
        fun GetNumMaterialExpressions(Material: Material): Number
        fun GetUsedTextures(Material: Material): Array<Texture>
        fun HasMaterialUsage(Material: Material, Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_Water" | "MATUSAGE_HairStrands" | "MATUSAGE_LidarPointCloud" | "MATUSAGE_VirtualHeightfieldMesh" | "MATUSAGE_Nanite" | "MATUSAGE_MAX" */): Boolean
        fun LayoutMaterialExpressions(Material: Material)
        fun RecompileMaterial(Material: Material)
        fun SetMaterialUsage(Material: Material, Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_Water" | "MATUSAGE_HairStrands" | "MATUSAGE_LidarPointCloud" | "MATUSAGE_VirtualHeightfieldMesh" | "MATUSAGE_Nanite" | "MATUSAGE_MAX" */, bNeedsRecompile: Boolean = definedExternally): `T$28`
    }
}

external open class MaterialFunctionInterface : UObject {
    constructor()
    constructor(Outer: UObject)
    open var StateId: Guid
    open var MaterialFunctionUsage: String /* "Default" | "MaterialLayer" | "MaterialLayerBlend" | "EMaterialFunctionUsage_MAX" */
    open var CombinedInputTypes: Any
    open var CombinedOutputTypes: Any
    open var ThumbnailInfo: ThumbnailInfo
    open fun UpdateMaterialFunction(PreviewMaterial: Material)

    companion object {
        fun Load(ResourceName: String): MaterialFunctionInterface
        fun Find(Outer: UObject, ResourceName: String): MaterialFunctionInterface
        fun GetDefaultObject(): MaterialFunctionInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialFunctionInterface
        fun C(Other: UObject): MaterialFunctionInterface
        fun C(Other: Any): MaterialFunctionInterface
        fun UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface, PreviewMaterial: Material)
    }
}

external object EAttachLocation {
    var KeepRelativeOffset: String /* "KeepRelativeOffset" */
    var KeepWorldPosition: String /* "KeepWorldPosition" */
    var SnapToTarget: String /* "SnapToTarget" */
    var SnapToTargetIncludingScale: String /* "SnapToTargetIncludingScale" */
    var EAttachLocation_MAX: String /* "EAttachLocation_MAX" */
}

external interface `T$29` {
    var MinValue: Number
    var MaxValue: Number
}

external interface `T$30` {
    var MinTime: Number
    var MaxTime: Number
}

external open class CurveBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AssetImportData: AssetImportData
    open var ImportPath: String
    open fun GetValueRange(MinValue: Number = definedExternally, MaxValue: Number = definedExternally): `T$29`
    open fun GetTimeRange(MinTime: Number = definedExternally, MaxTime: Number = definedExternally): `T$30`

    companion object {
        fun Load(ResourceName: String): CurveBase
        fun Find(Outer: UObject, ResourceName: String): CurveBase
        fun GetDefaultObject(): CurveBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveBase
        fun C(Other: UObject): CurveBase
        fun C(Other: Any): CurveBase
    }
}

external open class KeyHandleMap {
    open fun clone(): KeyHandleMap

    companion object {
        fun C(Other: UObject): KeyHandleMap
        fun C(Other: Any): KeyHandleMap
    }
}

external open class IndexedCurve {
    open var KeyHandlesToIndices: KeyHandleMap
    open fun clone(): IndexedCurve

    companion object {
        fun C(Other: UObject): IndexedCurve
        fun C(Other: Any): IndexedCurve
    }
}

external object ERichCurveExtrapolation {
    var RCCE_Cycle: String /* "RCCE_Cycle" */
    var RCCE_CycleWithOffset: String /* "RCCE_CycleWithOffset" */
    var RCCE_Oscillate: String /* "RCCE_Oscillate" */
    var RCCE_Linear: String /* "RCCE_Linear" */
    var RCCE_Constant: String /* "RCCE_Constant" */
    var RCCE_None: String /* "RCCE_None" */
    var RCCE_MAX: String /* "RCCE_MAX" */
}

external open class RealCurve : IndexedCurve {
    open var DefaultValue: Number
    open var PreInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var PostInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    override fun clone(): RealCurve

    companion object {
        fun C(Other: UObject): RealCurve
        fun C(Other: Any): RealCurve
    }
}

external object ERichCurveInterpMode {
    var RCIM_Linear: String /* "RCIM_Linear" */
    var RCIM_Constant: String /* "RCIM_Constant" */
    var RCIM_Cubic: String /* "RCIM_Cubic" */
    var RCIM_None: String /* "RCIM_None" */
    var RCIM_MAX: String /* "RCIM_MAX" */
}

external object ERichCurveTangentMode {
    var RCTM_Auto: String /* "RCTM_Auto" */
    var RCTM_User: String /* "RCTM_User" */
    var RCTM_Break: String /* "RCTM_Break" */
    var RCTM_None: String /* "RCTM_None" */
    var RCTM_MAX: String /* "RCTM_MAX" */
}

external object ERichCurveTangentWeightMode {
    var RCTWM_WeightedNone: String /* "RCTWM_WeightedNone" */
    var RCTWM_WeightedArrive: String /* "RCTWM_WeightedArrive" */
    var RCTWM_WeightedLeave: String /* "RCTWM_WeightedLeave" */
    var RCTWM_WeightedBoth: String /* "RCTWM_WeightedBoth" */
    var RCTWM_MAX: String /* "RCTWM_MAX" */
}

external open class RichCurveKey {
    open var InterpMode: String /* "RCIM_Linear" | "RCIM_Constant" | "RCIM_Cubic" | "RCIM_None" | "RCIM_MAX" */
    open var TangentMode: String /* "RCTM_Auto" | "RCTM_User" | "RCTM_Break" | "RCTM_None" | "RCTM_MAX" */
    open var TangentWeightMode: String /* "RCTWM_WeightedNone" | "RCTWM_WeightedArrive" | "RCTWM_WeightedLeave" | "RCTWM_WeightedBoth" | "RCTWM_MAX" */
    open var Time: Number
    open var Value: Number
    open var ArriveTangent: Number
    open var ArriveTangentWeight: Number
    open var LeaveTangent: Number
    open var LeaveTangentWeight: Number
    open fun clone(): RichCurveKey

    companion object {
        fun C(Other: UObject): RichCurveKey
        fun C(Other: Any): RichCurveKey
    }
}

external open class RichCurve : RealCurve {
    open var Keys: Array<RichCurveKey>
    override fun clone(): RichCurve

    companion object {
        fun C(Other: UObject): RichCurve
        fun C(Other: Any): RichCurve
    }
}

external open class CurveLinearColor : CurveBase {
    constructor()
    constructor(Outer: UObject)
    open var FloatCurves: RichCurve
    open var AdjustHue: Number
    open var AdjustSaturation: Number
    open var AdjustBrightness: Number
    open var AdjustBrightnessCurve: Number
    open var AdjustVibrance: Number
    open var AdjustMinAlpha: Number
    open var AdjustMaxAlpha: Number
    open fun GetUnadjustedLinearColorValue(InTime: Number): LinearColor
    open fun GetLinearColorValue(InTime: Number): LinearColor
    open fun GetClampedLinearColorValue(InTime: Number): LinearColor

    companion object {
        fun Load(ResourceName: String): CurveLinearColor
        fun Find(Outer: UObject, ResourceName: String): CurveLinearColor
        fun GetDefaultObject(): CurveLinearColor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveLinearColor
        fun C(Other: UObject): CurveLinearColor
        fun C(Other: Any): CurveLinearColor
    }
}

external open class CurveAtlasColorAdjustments {
    open var bChromaKeyTexture: Boolean
    open var AdjustBrightness: Number
    open var AdjustBrightnessCurve: Number
    open var AdjustVibrance: Number
    open var AdjustSaturation: Number
    open var AdjustRGBCurve: Number
    open var AdjustHue: Number
    open var AdjustMinAlpha: Number
    open var AdjustMaxAlpha: Number
    open fun clone(): CurveAtlasColorAdjustments

    companion object {
        fun C(Other: UObject): CurveAtlasColorAdjustments
        fun C(Other: Any): CurveAtlasColorAdjustments
    }
}

external interface `T$31` {
    var position: Number
    var `$`: Boolean
}

external open class CurveLinearColorAtlas : Texture2D {
    constructor()
    constructor(Outer: UObject)
    open var bIsDirty: Boolean
    open var TextureSize: Any
    open var bSquareResolution: Boolean
    open var TextureHeight: Any
    open var GradientCurves: Array<CurveLinearColor>
    open var bDisableAllAdjustments: Boolean
    open var bHasCachedColorAdjustments: Boolean
    open var CachedColorAdjustments: CurveAtlasColorAdjustments
    open fun GetCurvePosition(InCurve: CurveLinearColor, position: Number = definedExternally): `T$31`

    companion object {
        fun Load(ResourceName: String): CurveLinearColorAtlas
        fun Find(Outer: UObject, ResourceName: String): CurveLinearColorAtlas
        fun GetDefaultObject(): CurveLinearColorAtlas
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveLinearColorAtlas
        fun C(Other: UObject): CurveLinearColorAtlas
        fun C(Other: Any): CurveLinearColorAtlas
    }
}

external open class ScalarParameterAtlasInstanceData {
    open var bIsUsedAsAtlasPosition: Boolean
    open var Curve: CurveLinearColor
    open var Atlas: CurveLinearColorAtlas
    open fun clone(): ScalarParameterAtlasInstanceData

    companion object {
        fun C(Other: UObject): ScalarParameterAtlasInstanceData
        fun C(Other: Any): ScalarParameterAtlasInstanceData
    }
}

external open class ScalarParameterValue {
    open var ParameterName: String
    open var AtlasData: ScalarParameterAtlasInstanceData
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: Number
    open var ExpressionGUID: Guid
    open fun clone(): ScalarParameterValue

    companion object {
        fun C(Other: UObject): ScalarParameterValue
        fun C(Other: Any): ScalarParameterValue
    }
}

external open class VectorParameterValue {
    open var ParameterName: String
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: LinearColor
    open var ExpressionGUID: Guid
    open fun clone(): VectorParameterValue

    companion object {
        fun C(Other: UObject): VectorParameterValue
        fun C(Other: Any): VectorParameterValue
    }
}

external open class Vector4d {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open var W: Number
    open fun clone(): Vector4d

    companion object {
        fun C(Other: UObject): Vector4d
        fun C(Other: Any): Vector4d
    }
}

external open class DoubleVectorParameterValue {
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: Vector4d
    open var ExpressionGUID: Guid
    open fun clone(): DoubleVectorParameterValue

    companion object {
        fun C(Other: UObject): DoubleVectorParameterValue
        fun C(Other: Any): DoubleVectorParameterValue
    }
}

external open class TextureParameterValue {
    open var ParameterName: String
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: Texture
    open var ExpressionGUID: Guid
    open fun clone(): TextureParameterValue

    companion object {
        fun C(Other: UObject): TextureParameterValue
        fun C(Other: Any): TextureParameterValue
    }
}

external object ERuntimeVirtualTextureMaterialType {
    var BaseColor: String /* "BaseColor" */
    var BaseColor_Normal_DEPRECATED: String /* "BaseColor_Normal_DEPRECATED" */
    var BaseColor_Normal_Roughness: String /* "BaseColor_Normal_Roughness" */
    var BaseColor_Normal_Specular: String /* "BaseColor_Normal_Specular" */
    var BaseColor_Normal_Specular_YCoCg: String /* "BaseColor_Normal_Specular_YCoCg" */
    var BaseColor_Normal_Specular_Mask_YCoCg: String /* "BaseColor_Normal_Specular_Mask_YCoCg" */
    var WorldHeight: String /* "WorldHeight" */
    var Count: String /* "Count" */
    var ERuntimeVirtualTextureMaterialType_MAX: String /* "ERuntimeVirtualTextureMaterialType_MAX" */
}

external open class RuntimeVirtualTextureStreamingProxy : Texture2D {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): RuntimeVirtualTextureStreamingProxy
        fun Find(Outer: UObject, ResourceName: String): RuntimeVirtualTextureStreamingProxy
        fun GetDefaultObject(): RuntimeVirtualTextureStreamingProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RuntimeVirtualTextureStreamingProxy
        fun C(Other: UObject): RuntimeVirtualTextureStreamingProxy
        fun C(Other: Any): RuntimeVirtualTextureStreamingProxy
    }
}

external open class RuntimeVirtualTexture : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TileCount: Number
    open var TileSize: Number
    open var TileBorderSize: Number
    open var MaterialType: String /* "BaseColor" | "BaseColor_Normal_DEPRECATED" | "BaseColor_Normal_Roughness" | "BaseColor_Normal_Specular" | "BaseColor_Normal_Specular_YCoCg" | "BaseColor_Normal_Specular_Mask_YCoCg" | "WorldHeight" | "Count" | "ERuntimeVirtualTextureMaterialType_MAX" */
    open var bCompressTextures: Boolean
    open var bUseLowQualityCompression: Boolean
    open var bClearTextures: Boolean
    open var bSinglePhysicalSpace: Boolean
    open var bPrivateSpace: Boolean
    open var bAdaptive: Boolean
    open var bContinuousUpdate: Boolean
    open var RemoveLowMips: Number
    open var LODGroup: String /* "TEXTUREGROUP_World" | "TEXTUREGROUP_WorldNormalMap" | "TEXTUREGROUP_WorldSpecular" | "TEXTUREGROUP_Character" | "TEXTUREGROUP_CharacterNormalMap" | "TEXTUREGROUP_CharacterSpecular" | "TEXTUREGROUP_Weapon" | "TEXTUREGROUP_WeaponNormalMap" | "TEXTUREGROUP_WeaponSpecular" | "TEXTUREGROUP_Vehicle" | "TEXTUREGROUP_VehicleNormalMap" | "TEXTUREGROUP_VehicleSpecular" | "TEXTUREGROUP_Cinematic" | "TEXTUREGROUP_Effects" | "TEXTUREGROUP_EffectsNotFiltered" | "TEXTUREGROUP_Skybox" | "TEXTUREGROUP_UI" | "TEXTUREGROUP_Lightmap" | "TEXTUREGROUP_RenderTarget" | "TEXTUREGROUP_MobileFlattened" | "TEXTUREGROUP_ProcBuilding_Face" | "TEXTUREGROUP_ProcBuilding_LightMap" | "TEXTUREGROUP_Shadowmap" | "TEXTUREGROUP_ColorLookupTable" | "TEXTUREGROUP_Terrain_Heightmap" | "TEXTUREGROUP_Terrain_Weightmap" | "TEXTUREGROUP_Bokeh" | "TEXTUREGROUP_IESLightProfile" | "TEXTUREGROUP_Pixels2D" | "TEXTUREGROUP_HierarchicalLOD" | "TEXTUREGROUP_Impostor" | "TEXTUREGROUP_ImpostorNormalDepth" | "TEXTUREGROUP_8BitData" | "TEXTUREGROUP_16BitData" | "TEXTUREGROUP_Project01" | "TEXTUREGROUP_Project02" | "TEXTUREGROUP_Project03" | "TEXTUREGROUP_Project04" | "TEXTUREGROUP_Project05" | "TEXTUREGROUP_Project06" | "TEXTUREGROUP_Project07" | "TEXTUREGROUP_Project08" | "TEXTUREGROUP_Project09" | "TEXTUREGROUP_Project10" | "TEXTUREGROUP_Project11" | "TEXTUREGROUP_Project12" | "TEXTUREGROUP_Project13" | "TEXTUREGROUP_Project14" | "TEXTUREGROUP_Project15" | "TEXTUREGROUP_Project16" | "TEXTUREGROUP_MAX" */
    open var Size: Number
    open var StreamingTexture: RuntimeVirtualTextureStreamingProxy
    open fun GetTileSize(): Number
    open fun GetTileCount(): Number
    open fun GetTileBorderSize(): Number
    open fun GetSize(): Number
    open fun GetPageTableSize(): Number

    companion object {
        fun Load(ResourceName: String): RuntimeVirtualTexture
        fun Find(Outer: UObject, ResourceName: String): RuntimeVirtualTexture
        fun GetDefaultObject(): RuntimeVirtualTexture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RuntimeVirtualTexture
        fun C(Other: UObject): RuntimeVirtualTexture
        fun C(Other: Any): RuntimeVirtualTexture
    }
}

external open class RuntimeVirtualTextureParameterValue {
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: RuntimeVirtualTexture
    open var ExpressionGUID: Guid
    open fun clone(): RuntimeVirtualTextureParameterValue

    companion object {
        fun C(Other: UObject): RuntimeVirtualTextureParameterValue
        fun C(Other: Any): RuntimeVirtualTextureParameterValue
    }
}

external object EFontCacheType {
    var Offline: String /* "Offline" */
    var Runtime: String /* "Runtime" */
    var EFontCacheType_MAX: String /* "EFontCacheType_MAX" */
}

external open class FontCharacter {
    open var StartU: Number
    open var StartV: Number
    open var USize: Number
    open var VSize: Number
    open var TextureIndex: Number
    open var VerticalOffset: Number
    open fun clone(): FontCharacter

    companion object {
        fun C(Other: UObject): FontCharacter
        fun C(Other: Any): FontCharacter
    }
}

external object EFontImportCharacterSet {
    var FontICS_Default: String /* "FontICS_Default" */
    var FontICS_Ansi: String /* "FontICS_Ansi" */
    var FontICS_Symbol: String /* "FontICS_Symbol" */
    var FontICS_MAX: String /* "FontICS_MAX" */
}

external open class FontImportOptionsData {
    open var FontName: String
    open var Height: Number
    open var bEnableAntialiasing: Boolean
    open var bEnableBold: Boolean
    open var bEnableItalic: Boolean
    open var bEnableUnderline: Boolean
    open var bAlphaOnly: Boolean
    open var CharacterSet: String /* "FontICS_Default" | "FontICS_Ansi" | "FontICS_Symbol" | "FontICS_MAX" */
    open var Chars: String
    open var UnicodeRange: String
    open var CharsFilePath: String
    open var CharsFileWildcard: String
    open var bCreatePrintableOnly: Boolean
    open var bIncludeASCIIRange: Boolean
    open var ForegroundColor: LinearColor
    open var bEnableDropShadow: Boolean
    open var TexturePageWidth: Number
    open var TexturePageMaxHeight: Number
    open var XPadding: Number
    open var YPadding: Number
    open var ExtendBoxTop: Number
    open var ExtendBoxBottom: Number
    open var ExtendBoxRight: Number
    open var ExtendBoxLeft: Number
    open var bEnableLegacyMode: Boolean
    open var Kerning: Number
    open var bUseDistanceFieldAlpha: Boolean
    open var DistanceFieldScaleFactor: Number
    open var DistanceFieldScanRadiusScale: Number
    open fun clone(): FontImportOptionsData

    companion object {
        fun C(Other: UObject): FontImportOptionsData
        fun C(Other: Any): FontImportOptionsData
    }
}

external object EFontHinting {
    var Default: String /* "Default" */
    var Auto: String /* "Auto" */
    var AutoLight: String /* "AutoLight" */
    var Monochrome: String /* "Monochrome" */
    var None: String /* "None" */
    var EFontHinting_MAX: String /* "EFontHinting_MAX" */
}

external object EFontLoadingPolicy {
    var LazyLoad: String /* "LazyLoad" */
    var Stream: String /* "Stream" */
    var Inline: String /* "Inline" */
    var EFontLoadingPolicy_MAX: String /* "EFontLoadingPolicy_MAX" */
}

external open class FontBulkData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FontBulkData
        fun Find(Outer: UObject, ResourceName: String): FontBulkData
        fun GetDefaultObject(): FontBulkData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FontBulkData
        fun C(Other: UObject): FontBulkData
        fun C(Other: Any): FontBulkData
    }
}

external open class FontData {
    open var FontFilename: String
    open var Hinting: String /* "Default" | "Auto" | "AutoLight" | "Monochrome" | "None" | "EFontHinting_MAX" */
    open var LoadingPolicy: String /* "LazyLoad" | "Stream" | "Inline" | "EFontLoadingPolicy_MAX" */
    open var SubFaceIndex: Number
    open var FontFaceAsset: UObject
    open var BulkDataPtr: FontBulkData
    open var FontData: Array<Number>
    open fun clone(): FontData

    companion object {
        fun C(Other: UObject): FontData
        fun C(Other: Any): FontData
    }
}

external open class TypefaceEntry {
    open var Name: String
    open var Font: FontData
    open fun clone(): TypefaceEntry

    companion object {
        fun C(Other: UObject): TypefaceEntry
        fun C(Other: Any): TypefaceEntry
    }
}

external open class Typeface {
    open var Fonts: Array<TypefaceEntry>
    open fun clone(): Typeface

    companion object {
        fun C(Other: UObject): Typeface
        fun C(Other: Any): Typeface
    }
}

external open class CompositeFallbackFont {
    open var Typeface: Typeface
    open var ScalingFactor: Number
    open fun clone(): CompositeFallbackFont

    companion object {
        fun C(Other: UObject): CompositeFallbackFont
        fun C(Other: Any): CompositeFallbackFont
    }
}

external object ERangeBoundTypes {
    var Exclusive: String /* "Exclusive" */
    var Inclusive: String /* "Inclusive" */
    var Open: String /* "Open" */
    var ERangeBoundTypes_MAX: String /* "ERangeBoundTypes_MAX" */
}

external open class Int32RangeBound {
    open var Type: String /* "Exclusive" | "Inclusive" | "Open" | "ERangeBoundTypes_MAX" */
    open var Value: Number
    open fun clone(): Int32RangeBound

    companion object {
        fun C(Other: UObject): Int32RangeBound
        fun C(Other: Any): Int32RangeBound
    }
}

external open class Int32Range {
    open var LowerBound: Int32RangeBound
    open var UpperBound: Int32RangeBound
    open fun clone(): Int32Range

    companion object {
        fun C(Other: UObject): Int32Range
        fun C(Other: Any): Int32Range
    }
}

external open class CompositeSubFont : CompositeFallbackFont {
    open var CharacterRanges: Array<Int32Range>
    open var Cultures: String
    open var EditorName: String
    override fun clone(): CompositeSubFont

    companion object {
        fun C(Other: UObject): CompositeSubFont
        fun C(Other: Any): CompositeSubFont
    }
}

external open class CompositeFont {
    open var DefaultTypeface: Typeface
    open var FallbackTypeface: CompositeFallbackFont
    open var SubTypefaces: Array<CompositeSubFont>
    open fun clone(): CompositeFont

    companion object {
        fun C(Other: UObject): CompositeFont
        fun C(Other: Any): CompositeFont
    }
}

external open class Font : UObject {
    constructor()
    constructor(Outer: UObject)
    open var FontCacheType: String /* "Offline" | "Runtime" | "EFontCacheType_MAX" */
    open var Characters: Array<FontCharacter>
    open var Textures: Array<Texture2D>
    open var IsRemapped: Number
    open var EmScale: Number
    open var Ascent: Number
    open var Descent: Number
    open var Leading: Number
    open var Kerning: Number
    open var ImportOptions: FontImportOptionsData
    open var NumCharacters: Number
    open var MaxCharHeight: Array<Number>
    open var ScalingFactor: Number
    open var LegacyFontSize: Number
    open var LegacyFontName: String
    open var CompositeFont: CompositeFont

    companion object {
        fun Load(ResourceName: String): Font
        fun Find(Outer: UObject, ResourceName: String): Font
        fun GetDefaultObject(): Font
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Font
        fun C(Other: UObject): Font
        fun C(Other: Any): Font
    }
}

external open class FontParameterValue {
    open var ParameterName: String
    open var ParameterInfo: MaterialParameterInfo
    open var FontValue: Font
    open var FontPage: Number
    open var ExpressionGUID: Guid
    open fun clone(): FontParameterValue

    companion object {
        fun C(Other: UObject): FontParameterValue
        fun C(Other: Any): FontParameterValue
    }
}

external open class MaterialInstanceBasePropertyOverrides {
    open var bOverride_OpacityMaskClipValue: Boolean
    open var bOverride_BlendMode: Boolean
    open var bOverride_ShadingModel: Boolean
    open var bOverride_DitheredLODTransition: Boolean
    open var bOverride_CastDynamicShadowAsMasked: Boolean
    open var bOverride_TwoSided: Boolean
    open var bOverride_OutputTranslucentVelocity: Boolean
    open var TwoSided: Boolean
    open var DitheredLODTransition: Boolean
    open var bCastDynamicShadowAsMasked: Boolean
    open var bOutputTranslucentVelocity: Boolean
    open var BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var ShadingModel: String /* "MSM_Unlit" | "MSM_DefaultLit" | "MSM_Subsurface" | "MSM_PreintegratedSkin" | "MSM_ClearCoat" | "MSM_SubsurfaceProfile" | "MSM_TwoSidedFoliage" | "MSM_Hair" | "MSM_Cloth" | "MSM_Eye" | "MSM_SingleLayerWater" | "MSM_ThinTranslucent" | "MSM_Strata" | "MSM_NUM" | "MSM_FromMaterialExpression" | "MSM_MAX" */
    open var OpacityMaskClipValue: Number
    open fun clone(): MaterialInstanceBasePropertyOverrides

    companion object {
        fun C(Other: UObject): MaterialInstanceBasePropertyOverrides
        fun C(Other: Any): MaterialInstanceBasePropertyOverrides
    }
}

external open class StaticParameterBase {
    open var ParameterInfo: MaterialParameterInfo
    open var bOverride: Boolean
    open var ExpressionGUID: Guid
    open fun clone(): StaticParameterBase

    companion object {
        fun C(Other: UObject): StaticParameterBase
        fun C(Other: Any): StaticParameterBase
    }
}

external open class StaticSwitchParameter : StaticParameterBase {
    open var Value: Boolean
    override fun clone(): StaticSwitchParameter

    companion object {
        fun C(Other: UObject): StaticSwitchParameter
        fun C(Other: Any): StaticSwitchParameter
    }
}

external open class StaticComponentMaskParameter : StaticParameterBase {
    open var R: Boolean
    open var G: Boolean
    open var B: Boolean
    open var A: Boolean
    override fun clone(): StaticComponentMaskParameter

    companion object {
        fun C(Other: UObject): StaticComponentMaskParameter
        fun C(Other: Any): StaticComponentMaskParameter
    }
}

external open class StaticTerrainLayerWeightParameter {
    open var ParameterInfo: MaterialParameterInfo
    open var ExpressionGUID: Guid
    open var bOverride: Boolean
    open var LayerName: String
    open var WeightmapIndex: Number
    open var bWeightBasedBlend: Boolean
    open fun clone(): StaticTerrainLayerWeightParameter

    companion object {
        fun C(Other: UObject): StaticTerrainLayerWeightParameter
        fun C(Other: Any): StaticTerrainLayerWeightParameter
    }
}

external object EMaterialLayerLinkState {
    var Uninitialized: String /* "Uninitialized" */
    var LinkedToParent: String /* "LinkedToParent" */
    var UnlinkedFromParent: String /* "UnlinkedFromParent" */
    var NotFromParent: String /* "NotFromParent" */
    var EMaterialLayerLinkState_MAX: String /* "EMaterialLayerLinkState_MAX" */
}

external open class MaterialLayersFunctions {
    open var Layers: Array<MaterialFunctionInterface>
    open var Blends: Array<MaterialFunctionInterface>
    open var LayerStates: Array<Boolean>
    open var LayerNames: Array<String>
    open var RestrictToLayerRelatives: Array<Boolean>
    open var RestrictToBlendRelatives: Array<Boolean>
    open var LayerGuids: Array<Guid>
    open var LayerLinkStates: Array<String /* "Uninitialized" | "LinkedToParent" | "UnlinkedFromParent" | "NotFromParent" | "EMaterialLayerLinkState_MAX" */>
    open var DeletedParentLayerGuids: Array<Guid>
    open fun clone(): MaterialLayersFunctions

    companion object {
        fun C(Other: UObject): MaterialLayersFunctions
        fun C(Other: Any): MaterialLayersFunctions
    }
}

external open class StaticMaterialLayersParameter : StaticParameterBase {
    open var Value: MaterialLayersFunctions
    override fun clone(): StaticMaterialLayersParameter

    companion object {
        fun C(Other: UObject): StaticMaterialLayersParameter
        fun C(Other: Any): StaticMaterialLayersParameter
    }
}

external open class StaticParameterSet {
    open var StaticSwitchParameters: Array<StaticSwitchParameter>
    open var StaticComponentMaskParameters: Array<StaticComponentMaskParameter>
    open var TerrainLayerWeightParameters: Array<StaticTerrainLayerWeightParameter>
    open var MaterialLayers: MaterialLayersFunctions
    open var bHasMaterialLayers: Boolean
    open var MaterialLayersParameters: Array<StaticMaterialLayersParameter>
    open fun clone(): StaticParameterSet

    companion object {
        fun C(Other: UObject): StaticParameterSet
        fun C(Other: Any): StaticParameterSet
    }
}

external open class MaterialInstance : MaterialInterface {
    constructor()
    constructor(Outer: UObject)
    open var PhysMaterial: PhysicalMaterial
    open var PhysicalMaterialMap: PhysicalMaterial
    open var Parent: MaterialInterface
    open var bHasStaticPermutationResource: Boolean
    open var bOverrideSubsurfaceProfile: Boolean
    open var ScalarParameterValues: Array<ScalarParameterValue>
    open var VectorParameterValues: Array<VectorParameterValue>
    open var DoubleVectorParameterValues: Array<DoubleVectorParameterValue>
    open var TextureParameterValues: Array<TextureParameterValue>
    open var RuntimeVirtualTextureParameterValues: Array<RuntimeVirtualTextureParameterValue>
    open var FontParameterValues: Array<FontParameterValue>
    open var bOverrideBaseProperties: Boolean
    open var BasePropertyOverrides: MaterialInstanceBasePropertyOverrides
    open var ReferencedTextureGuids: Array<Guid>
    open var StaticParameters: StaticParameterSet
    open var bSavedCachedData: Boolean

    companion object {
        fun Load(ResourceName: String): MaterialInstance
        fun Find(Outer: UObject, ResourceName: String): MaterialInstance
        fun GetDefaultObject(): MaterialInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialInstance
        fun C(Other: UObject): MaterialInstance
        fun C(Other: Any): MaterialInstance
    }
}

external open class MaterialInstanceDynamic : MaterialInstance {
    constructor()
    constructor(Outer: UObject)
    open fun SetVectorParameterValueByInfo(ParameterInfo: MaterialParameterInfo, Value: LinearColor)
    open fun SetVectorParameterValue(ParameterName: String, Value: LinearColor)
    open fun SetTextureParameterValueByInfo(ParameterInfo: MaterialParameterInfo, Value: Texture)
    open fun SetTextureParameterValue(ParameterName: String, Value: Texture)
    open fun SetScalarParameterValueByInfo(ParameterInfo: MaterialParameterInfo, Value: Number)
    open fun SetScalarParameterValue(ParameterName: String, Value: Number)
    open fun SetRuntimeVirtualTextureParameterValueByInfo(ParameterInfo: MaterialParameterInfo, Value: RuntimeVirtualTexture)
    open fun SetRuntimeVirtualTextureParameterValue(ParameterName: String, Value: RuntimeVirtualTexture)
    open fun SetDoubleVectorParameterValue(ParameterName: String, Value: Vector)
    open fun InterpolateMaterialInstanceParameters(SourceA: MaterialInstance, SourceB: MaterialInstance, Alpha: Number)
    open fun GetVectorParameterValueByInfo(ParameterInfo: MaterialParameterInfo): LinearColor
    open fun GetVectorParameterValue(ParameterName: String): LinearColor
    open fun GetTextureParameterValueByInfo(ParameterInfo: MaterialParameterInfo): Texture
    open fun GetTextureParameterValue(ParameterName: String): Texture
    open fun GetScalarParameterValueByInfo(ParameterInfo: MaterialParameterInfo): Number
    open fun GetScalarParameterValue(ParameterName: String): Number
    open fun CopyMaterialInstanceParameters(Source: MaterialInterface, bQuickParametersOnly: Boolean)
    open fun CopyParameterOverrides(MaterialInstance: MaterialInstance)
    open fun CopyInterpParameters(Source: MaterialInstance)

    companion object {
        fun Load(ResourceName: String): MaterialInstanceDynamic
        fun Find(Outer: UObject, ResourceName: String): MaterialInstanceDynamic
        fun GetDefaultObject(): MaterialInstanceDynamic
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialInstanceDynamic
        fun C(Other: UObject): MaterialInstanceDynamic
        fun C(Other: Any): MaterialInstanceDynamic
    }
}

external open class DecalComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var DecalMaterial: MaterialInterface
    open var SortOrder: Number
    open var FadeScreenSize: Number
    open var FadeStartDelay: Number
    open var FadeDuration: Number
    open var FadeInDuration: Number
    open var FadeInStartDelay: Number
    open var bDestroyOwnerAfterFade: Boolean
    open var DecalSize: Vector
    open fun SetSortOrder(Value: Number)
    open fun SetFadeScreenSize(NewFadeScreenSize: Number)
    open fun SetFadeOut(StartDelay: Number, Duration: Number, DestroyOwnerAfterFade: Boolean)
    open fun SetFadeIn(StartDelay: Number, Duaration: Number)
    open fun SetDecalMaterial(NewDecalMaterial: MaterialInterface)
    open fun GetFadeStartDelay(): Number
    open fun GetFadeInStartDelay(): Number
    open fun GetFadeInDuration(): Number
    open fun GetFadeDuration(): Number
    open fun GetDecalMaterial(): MaterialInterface
    open fun CreateDynamicMaterialInstance(): MaterialInstanceDynamic

    companion object {
        fun Load(ResourceName: String): DecalComponent
        fun Find(Outer: UObject, ResourceName: String): DecalComponent
        fun GetDefaultObject(): DecalComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DecalComponent
        fun C(Other: UObject): DecalComponent
        fun C(Other: Any): DecalComponent
    }
}

external open class AssetData {
    open var ObjectPath: String
    open var PackageName: String
    open var PackagePath: String
    open var AssetName: String
    open var AssetClass: String
    open fun clone(): AssetData

    companion object {
        fun C(Other: UObject): AssetData
        fun C(Other: Any): AssetData
        fun FindAssetData(AssetPath: String): AssetData
    }
}

external open class MaterialStatistics {
    open var NumVertexShaderInstructions: Number
    open var NumPixelShaderInstructions: Number
    open var NumSamplers: Number
    open var NumVertexTextureSamples: Number
    open var NumPixelTextureSamples: Number
    open var NumVirtualTextureSamples: Number
    open var NumUVScalars: Number
    open var NumInterpolatorScalars: Number
    open fun clone(): MaterialStatistics

    companion object {
        fun C(Other: UObject): MaterialStatistics
        fun C(Other: Any): MaterialStatistics
    }
}

external interface `T$32` {
    var ChildInstances: Array<AssetData>
}

external interface `T$33` {
    var ParameterNames: Array<String>
}

external interface `T$34` {
    var ParameterSource: SoftObjectPath
    var `$`: Boolean
}

external interface `T$35` {
    var ParameterNames: Array<String>
}

external interface `T$36` {
    var ParameterNames: Array<String>
}

external interface `T$37` {
    var ParameterNames: Array<String>
}

external interface `T$38` {
    var ChildInstances: Array<AssetData>
}

external interface `T$39` {
    var ParameterNames: Array<String>
}

external interface `T$40` {
    var ParameterNames: Array<String>
}

external interface `T$41` {
    var ParameterNames: Array<String>
}

external interface `T$42` {
    var ParameterNames: Array<String>
}

external open class MaterialInterface : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SubsurfaceProfile: SubsurfaceProfile
    open var LightmassSettings: LightmassMaterialInterfaceSettings
    open var bTextureStreamingDataSorted: Boolean
    open var TextureStreamingDataVersion: Number
    open var TextureStreamingData: Array<MaterialTextureInfo>
    open var AssetUserData: Array<AssetUserData>
    open var TextureStreamingDataMissingEntries: Array<MaterialTextureInfo>
    open var PreviewMesh: SoftObjectPath
    open var ThumbnailInfo: ThumbnailInfo
    open var LayerParameterExpansion: Any
    open var ParameterOverviewExpansion: Any
    open var AssetImportData: AssetImportData
    open var LightingGuid: Guid
    open fun SetForceMipLevelsToBeResident(OverrideForceMiplevelsToBeResident: Boolean, bForceMiplevelsToBeResidentValue: Boolean, ForceDuration: Number, CinematicTextureGroups: Number, bFastResponse: Boolean)
    open fun GetPhysicalMaterialMask(): PhysicalMaterialMask
    open fun GetPhysicalMaterialFromMap(index: Number): PhysicalMaterial
    open fun GetPhysicalMaterial(): PhysicalMaterial
    open fun GetParameterInfo(Association: String /* "LayerParameter" | "BlendParameter" | "GlobalParameter" | "EMaterialParameterAssociation_MAX" */, ParameterName: String, LayerFunction: MaterialFunctionInterface): MaterialParameterInfo
    open fun GetBaseMaterial(): Material
    open fun SpawnDecalAttached(DecalSize: Vector, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, LifeSpan: Number): DecalComponent
    open fun MakeBrushFromMaterial(Width: Number, Height: Number): SlateBrush
    open fun GetChildInstances(ChildInstances: Array<AssetData> = definedExternally): `T$32`
    open fun GetScalarParameterNames(ParameterNames: Array<String> = definedExternally): `T$33`
    open fun GetScalarParameterSource(ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
    open fun GetStaticSwitchParameterNames(ParameterNames: Array<String> = definedExternally): `T$35`
    open fun GetStaticSwitchParameterSource(ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
    open fun GetStatistics(): MaterialStatistics
    open fun GetTextureParameterNames(ParameterNames: Array<String> = definedExternally): `T$36`
    open fun GetTextureParameterSource(ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
    open fun GetVectorParameterNames(ParameterNames: Array<String> = definedExternally): `T$37`
    open fun GetVectorParameterSource(ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`

    companion object {
        fun Load(ResourceName: String): MaterialInterface
        fun Find(Outer: UObject, ResourceName: String): MaterialInterface
        fun GetDefaultObject(): MaterialInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialInterface
        fun C(Other: UObject): MaterialInterface
        fun C(Other: Any): MaterialInterface
        fun SpawnDecalAttached(DecalMaterial: MaterialInterface, DecalSize: Vector, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, LifeSpan: Number): DecalComponent
        fun MakeBrushFromMaterial(Material: MaterialInterface, Width: Number, Height: Number): SlateBrush
        fun GetChildInstances(Parent: MaterialInterface, ChildInstances: Array<AssetData> = definedExternally): `T$38`
        fun GetScalarParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$39`
        fun GetScalarParameterSource(Material: MaterialInterface, ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
        fun GetStaticSwitchParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$40`
        fun GetStaticSwitchParameterSource(Material: MaterialInterface, ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
        fun GetStatistics(Material: MaterialInterface): MaterialStatistics
        fun GetTextureParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$41`
        fun GetTextureParameterSource(Material: MaterialInterface, ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
        fun GetVectorParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$42`
        fun GetVectorParameterSource(Material: MaterialInterface, ParameterName: String, ParameterSource: SoftObjectPath = definedExternally): `T$34`
    }
}

external interface `T$43` {
    var Brush: SlateBrush
    var `$`: MaterialInstanceDynamic
}

external interface `T$44` {
    var Brush: SlateBrush
}

external open class SlateBrush {
    open var ImageSize: Vector2D
    open var Margin: Margin
    open var Tint: LinearColor
    open var TintColor: SlateColor
    open var OutlineSettings: SlateBrushOutlineSettings
    open var ResourceObject: UObject
    open var ResourceName: String
    open var UVRegion: Box2f
    open var DrawAs: String /* "NoDrawType" | "Box" | "Border" | "Image" | "RoundedBox" | "ESlateBrushDrawType_MAX" */
    open var Tiling: String /* "NoTile" | "Horizontal" | "Vertical" | "Both" | "ESlateBrushTileType_MAX" */
    open var Mirroring: String /* "NoMirror" | "Horizontal" | "Vertical" | "Both" | "ESlateBrushMirrorType_MAX" */
    open var ImageType: String /* "NoImage" | "FullColor" | "Linear" | "Vector" | "ESlateBrushImageType_MAX" */
    open var bIsDynamicallyLoaded: Boolean
    open var bHasUObject: Boolean
    open fun clone(): SlateBrush
    open fun GetBrushResource(): UObject
    open fun GetBrushResourceAsMaterial(): MaterialInterface
    open fun GetBrushResourceAsTexture2D(): Texture2D
    open fun GetDynamicMaterial(): `T$43`
    open fun SetBrushResourceToMaterial(Material: MaterialInterface = definedExternally): `T$44`
    open fun SetBrushResourceToTexture(Texture: Texture2D = definedExternally): `T$44`
    open fun Equal(B: SlateBrush): Boolean

    companion object {
        fun C(Other: UObject): SlateBrush
        fun C(Other: Any): SlateBrush
        fun GetBrushResource(Brush: SlateBrush): UObject
        fun GetBrushResourceAsMaterial(Brush: SlateBrush): MaterialInterface
        fun GetBrushResourceAsTexture2D(Brush: SlateBrush): Texture2D
        fun GetDynamicMaterial(Brush: SlateBrush = definedExternally): `T$43`
        fun SetBrushResourceToMaterial(Brush: SlateBrush = definedExternally, Material: MaterialInterface = definedExternally): `T$44`
        fun SetBrushResourceToTexture(Brush: SlateBrush = definedExternally, Texture: Texture2D = definedExternally): `T$44`
        fun Equal(A: SlateBrush, B: SlateBrush): Boolean
        fun NoResourceBrush(): SlateBrush
    }
}

external open class Texture2D : Texture {
    constructor()
    constructor(Outer: UObject)
    open var FirstResourceMemMip: Number
    open var bTemporarilyDisableStreaming: Boolean
    open var bHasBeenPaintedInEditor: Boolean
    open var AddressX: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressY: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var ImportedSize: IntPoint
    open fun GetSizeY(): Number
    open fun GetSizeX(): Number
    open fun MakeImportanceTexture(WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */): ImportanceTexture
    open fun MakeBrushFromTexture(Width: Number, Height: Number): SlateBrush

    companion object {
        fun Load(ResourceName: String): Texture2D
        fun Find(Outer: UObject, ResourceName: String): Texture2D
        fun GetDefaultObject(): Texture2D
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Texture2D
        fun C(Other: UObject): Texture2D
        fun C(Other: Any): Texture2D
        fun MakeImportanceTexture(Texture: Texture2D, WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */): ImportanceTexture
        fun MakeBrushFromTexture(Texture: Texture2D, Width: Number, Height: Number): SlateBrush
    }
}

external open class SpriteCategoryInfo {
    open var Category: String
    open var DisplayName: String
    open var Description: String
    open fun clone(): SpriteCategoryInfo

    companion object {
        fun C(Other: UObject): SpriteCategoryInfo
        fun C(Other: Any): SpriteCategoryInfo
    }
}

external open class BillboardComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var Sprite: Texture2D
    open var bIsScreenSizeScaled: Boolean
    open var ScreenSize: Number
    open var U: Number
    open var UL: Number
    open var V: Number
    open var VL: Number
    open var OpacityMaskRefVal: Number
    open var SpriteCategoryName: String
    open var SpriteInfo: SpriteCategoryInfo
    open var bUseInEditorScaling: Boolean
    open fun SetUV(NewU: Number, NewUL: Number, NewV: Number, NewVL: Number)
    open fun SetSpriteAndUV(NewSprite: Texture2D, NewU: Number, NewUL: Number, NewV: Number, NewVL: Number)
    open fun SetSprite(NewSprite: Texture2D)
    open fun SetOpacityMaskRefVal(RefVal: Number)

    companion object {
        fun Load(ResourceName: String): BillboardComponent
        fun Find(Outer: UObject, ResourceName: String): BillboardComponent
        fun GetDefaultObject(): BillboardComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BillboardComponent
        fun C(Other: UObject): BillboardComponent
        fun C(Other: Any): BillboardComponent
    }
}

external open class NavigationObjectBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var CapsuleComponent: CapsuleComponent
    open var GoodSprite: BillboardComponent
    open var BadSprite: BillboardComponent
    open var bIsPIEPlayerStart: Boolean

    companion object {
        fun GetDefaultObject(): NavigationObjectBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationObjectBase
        fun C(Other: UObject): NavigationObjectBase
        fun C(Other: Any): NavigationObjectBase
    }
}

external open class NavigationDataChunk : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NavigationDataName: String

    companion object {
        fun Load(ResourceName: String): NavigationDataChunk
        fun Find(Outer: UObject, ResourceName: String): NavigationDataChunk
        fun GetDefaultObject(): NavigationDataChunk
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationDataChunk
        fun C(Other: UObject): NavigationDataChunk
        fun C(Other: Any): NavigationDataChunk
    }
}

external object ELightingBuildQuality {
    var Quality_Preview: String /* "Quality_Preview" */
    var Quality_Medium: String /* "Quality_Medium" */
    var Quality_High: String /* "Quality_High" */
    var Quality_Production: String /* "Quality_Production" */
    var Quality_MAX: String /* "Quality_MAX" */
}

external open class MapBuildDataRegistry : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LevelLightingQuality: String /* "Quality_Preview" | "Quality_Medium" | "Quality_High" | "Quality_Production" | "Quality_MAX" */

    companion object {
        fun Load(ResourceName: String): MapBuildDataRegistry
        fun Find(Outer: UObject, ResourceName: String): MapBuildDataRegistry
        fun GetDefaultObject(): MapBuildDataRegistry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MapBuildDataRegistry
        fun C(Other: UObject): MapBuildDataRegistry
        fun C(Other: Any): MapBuildDataRegistry
    }
}

external object ETextureSizingType {
    var TextureSizingType_UseSingleTextureSize: String /* "TextureSizingType_UseSingleTextureSize" */
    var TextureSizingType_UseAutomaticBiasedSizes: String /* "TextureSizingType_UseAutomaticBiasedSizes" */
    var TextureSizingType_UseManualOverrideTextureSize: String /* "TextureSizingType_UseManualOverrideTextureSize" */
    var TextureSizingType_UseSimplygonAutomaticSizing: String /* "TextureSizingType_UseSimplygonAutomaticSizing" */
    var TextureSizingType_AutomaticFromTexelDensity: String /* "TextureSizingType_AutomaticFromTexelDensity" */
    var TextureSizingType_AutomaticFromMeshScreenSize: String /* "TextureSizingType_AutomaticFromMeshScreenSize" */
    var TextureSizingType_AutomaticFromMeshDrawDistance: String /* "TextureSizingType_AutomaticFromMeshDrawDistance" */
    var TextureSizingType_MAX: String /* "TextureSizingType_MAX" */
}

external object EMaterialMergeType {
    var MaterialMergeType_Default: String /* "MaterialMergeType_Default" */
    var MaterialMergeType_Simplygon: String /* "MaterialMergeType_Simplygon" */
    var MaterialMergeType_MAX: String /* "MaterialMergeType_MAX" */
}

external open class MaterialProxySettings {
    open var TextureSizingType: String /* "TextureSizingType_UseSingleTextureSize" | "TextureSizingType_UseAutomaticBiasedSizes" | "TextureSizingType_UseManualOverrideTextureSize" | "TextureSizingType_UseSimplygonAutomaticSizing" | "TextureSizingType_AutomaticFromTexelDensity" | "TextureSizingType_AutomaticFromMeshScreenSize" | "TextureSizingType_AutomaticFromMeshDrawDistance" | "TextureSizingType_MAX" */
    open var TextureSize: IntPoint
    open var TargetTexelDensityPerMeter: Number
    open var MeshMaxScreenSizePercent: Number
    open var MeshMinDrawDistance: Number
    open var GutterSpace: Number
    open var MetallicConstant: Number
    open var RoughnessConstant: Number
    open var AnisotropyConstant: Number
    open var SpecularConstant: Number
    open var OpacityConstant: Number
    open var OpacityMaskConstant: Number
    open var AmbientOcclusionConstant: Number
    open var MaterialMergeType: String /* "MaterialMergeType_Default" | "MaterialMergeType_Simplygon" | "MaterialMergeType_MAX" */
    open var BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var bAllowTwoSidedMaterial: Boolean
    open var bNormalMap: Boolean
    open var bTangentMap: Boolean
    open var bMetallicMap: Boolean
    open var bRoughnessMap: Boolean
    open var bAnisotropyMap: Boolean
    open var bSpecularMap: Boolean
    open var bEmissiveMap: Boolean
    open var bOpacityMap: Boolean
    open var bOpacityMaskMap: Boolean
    open var bAmbientOcclusionMap: Boolean
    open var DiffuseTextureSize: IntPoint
    open var NormalTextureSize: IntPoint
    open var TangentTextureSize: IntPoint
    open var MetallicTextureSize: IntPoint
    open var RoughnessTextureSize: IntPoint
    open var AnisotropyTextureSize: IntPoint
    open var SpecularTextureSize: IntPoint
    open var EmissiveTextureSize: IntPoint
    open var OpacityTextureSize: IntPoint
    open var OpacityMaskTextureSize: IntPoint
    open var AmbientOcclusionTextureSize: IntPoint
    open fun clone(): MaterialProxySettings

    companion object {
        fun C(Other: UObject): MaterialProxySettings
        fun C(Other: Any): MaterialProxySettings
    }
}

external open class LevelSimplificationDetails {
    open var bCreatePackagePerAsset: Boolean
    open var DetailsPercentage: Number
    open var StaticMeshMaterialSettings: MaterialProxySettings
    open var bOverrideLandscapeExportLOD: Boolean
    open var LandscapeExportLOD: Number
    open var LandscapeMaterialSettings: MaterialProxySettings
    open var bBakeFoliageToLandscape: Boolean
    open var bBakeGrassToLandscape: Boolean
    open var bGenerateMeshNormalMap: Boolean
    open var bGenerateMeshMetallicMap: Boolean
    open var bGenerateMeshRoughnessMap: Boolean
    open var bGenerateMeshSpecularMap: Boolean
    open var bGenerateLandscapeNormalMap: Boolean
    open var bGenerateLandscapeMetallicMap: Boolean
    open var bGenerateLandscapeRoughnessMap: Boolean
    open var bGenerateLandscapeSpecularMap: Boolean
    open fun clone(): LevelSimplificationDetails

    companion object {
        fun C(Other: UObject): LevelSimplificationDetails
        fun C(Other: Any): LevelSimplificationDetails
    }
}

external object EActorPackagingScheme {
    var Original: String /* "Original" */
    var Reduced: String /* "Reduced" */
    var EActorPackagingScheme_MAX: String /* "EActorPackagingScheme_MAX" */
}

external open class Info(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var SpriteComponent: BillboardComponent

    companion object {
        fun GetDefaultObject(): Info
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Info
        fun C(Other: UObject): Info
        fun C(Other: Any): Info
    }
}

external object EVisibilityAggressiveness {
    var VIS_LeastAggressive: String /* "VIS_LeastAggressive" */
    var VIS_ModeratelyAggressive: String /* "VIS_ModeratelyAggressive" */
    var VIS_MostAggressive: String /* "VIS_MostAggressive" */
    var VIS_Max: String /* "VIS_Max" */
}

external open class Field : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun HasMetaData(Key: String): Boolean
    open fun GetMetaData(Key: String): String

    companion object {
        fun Load(ResourceName: String): Field
        fun Find(Outer: UObject, ResourceName: String): Field
        fun GetDefaultObject(): Field
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Field
        fun C(Other: UObject): Field
        fun C(Other: Any): Field
        fun HasMetaData(Field: Field, Key: String): Boolean
        fun GetMetaData(Field: Field, Key: String): String
    }
}

external open class Struct : Field {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Struct
        fun Find(Outer: UObject, ResourceName: String): Struct
        fun GetDefaultObject(): Struct
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Struct
        fun C(Other: UObject): Struct
        fun C(Other: Any): Struct
    }
}

external open class DynamicBlueprintBinding : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DynamicBlueprintBinding
        fun Find(Outer: UObject, ResourceName: String): DynamicBlueprintBinding
        fun GetDefaultObject(): DynamicBlueprintBinding
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DynamicBlueprintBinding
        fun C(Other: UObject): DynamicBlueprintBinding
        fun C(Other: Any): DynamicBlueprintBinding
    }
}

external open class DatasmithAssetUserData : AssetUserData {
    constructor()
    constructor(Outer: UObject)
    open var MetaData: Any
    open var ObjectTemplates: Any

    companion object {
        fun Load(ResourceName: String): DatasmithAssetUserData
        fun Find(Outer: UObject, ResourceName: String): DatasmithAssetUserData
        fun GetDefaultObject(): DatasmithAssetUserData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DatasmithAssetUserData
        fun C(Other: UObject): DatasmithAssetUserData
        fun C(Other: Any): DatasmithAssetUserData
    }
}

external open class Subsystem : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Subsystem
        fun Find(Outer: UObject, ResourceName: String): Subsystem
        fun GetDefaultObject(): Subsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Subsystem
        fun C(Other: UObject): Subsystem
        fun C(Other: Any): Subsystem
    }
}

external open class DynamicSubsystem : Subsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DynamicSubsystem
        fun Find(Outer: UObject, ResourceName: String): DynamicSubsystem
        fun GetDefaultObject(): DynamicSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DynamicSubsystem
        fun C(Other: UObject): DynamicSubsystem
        fun C(Other: Any): DynamicSubsystem
    }
}

external open class EngineSubsystem : DynamicSubsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EngineSubsystem
        fun Find(Outer: UObject, ResourceName: String): EngineSubsystem
        fun GetDefaultObject(): EngineSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EngineSubsystem
        fun C(Other: UObject): EngineSubsystem
        fun C(Other: Any): EngineSubsystem
    }
}

external object EDataLayerRuntimeState {
    var Unloaded: String /* "Unloaded" */
    var Loaded: String /* "Loaded" */
    var Activated: String /* "Activated" */
    var EDataLayerRuntimeState_MAX: String /* "EDataLayerRuntimeState_MAX" */
}

external object EDataLayerState {
    var Unloaded: String /* "Unloaded" */
    var Loaded: String /* "Loaded" */
    var Activated: String /* "Activated" */
    var EDataLayerState_MAX: String /* "EDataLayerState_MAX" */
}

external open class ActorDataLayer {
    open var Name: String
    open fun clone(): ActorDataLayer

    companion object {
        fun C(Other: UObject): ActorDataLayer
        fun C(Other: Any): ActorDataLayer
    }
}

external open class DataLayer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bIsInitiallyActive: Boolean
    open var bIsVisible: Boolean
    open var bIsInitiallyVisible: Boolean
    open var bIsInitiallyLoadedInEditor: Boolean
    open var bIsLoadedInEditor: Boolean
    open var bIsLoadedInEditorChangedByUserOperation: Boolean
    open var bIsLocked: Boolean
    open var DataLayerLabel: String
    open var bIsRuntime: Boolean
    open var InitialRuntimeState: String /* "Unloaded" | "Loaded" | "Activated" | "EDataLayerRuntimeState_MAX" */
    open var DebugColor: Color
    open var Parent: DataLayer
    open var Children: Array<DataLayer>
    open fun IsVisible(): Boolean
    open fun IsRuntime(): Boolean
    open fun IsInitiallyVisible(): Boolean
    open fun IsInitiallyActive(): Boolean
    open fun IsEffectiveVisible(): Boolean
    open fun IsDynamicallyLoaded(): Boolean
    open fun GetInitialState(): String /* "Unloaded" | "Loaded" | "Activated" | "EDataLayerState_MAX" */
    open fun GetInitialRuntimeState(): String /* "Unloaded" | "Loaded" | "Activated" | "EDataLayerRuntimeState_MAX" */
    open fun GetDebugColor(): Color
    open fun GetDataLayerLabel(): String
    open fun Equals(ActorDataLayer: ActorDataLayer): Boolean

    companion object {
        fun Load(ResourceName: String): DataLayer
        fun Find(Outer: UObject, ResourceName: String): DataLayer
        fun GetDefaultObject(): DataLayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DataLayer
        fun C(Other: UObject): DataLayer
        fun C(Other: Any): DataLayer
    }
}

external open class ActorInstanceHandle {
    open var Actor: Actor?
    open fun clone(): ActorInstanceHandle

    companion object {
        fun C(Other: UObject): ActorInstanceHandle
        fun C(Other: Any): ActorInstanceHandle
    }
}

external interface `T$45` {
    var OutPrimaryAssetIdList: Array<PrimaryAssetId>
}

external interface `T$46` {
    var OutPrimaryAssetIdList: Array<PrimaryAssetId>
}

external open class PrimaryAssetType {
    open var Name: String
    open fun clone(): PrimaryAssetType
    open fun ToString(): String
    open fun Equal(B: PrimaryAssetType): Boolean
    open fun GetPrimaryAssetIdList(OutPrimaryAssetIdList: Array<PrimaryAssetId> = definedExternally): `T$45`
    open fun IsValidPrimaryAssetType(): Boolean
    open fun NotEqual(B: PrimaryAssetType): Boolean

    companion object {
        fun C(Other: UObject): PrimaryAssetType
        fun C(Other: Any): PrimaryAssetType
        fun ToString(PrimaryAssetType: PrimaryAssetType): String
        fun Equal(A: PrimaryAssetType, B: PrimaryAssetType): Boolean
        fun GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType, OutPrimaryAssetIdList: Array<PrimaryAssetId> = definedExternally): `T$46`
        fun IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): Boolean
        fun NotEqual(A: PrimaryAssetType, B: PrimaryAssetType): Boolean
    }
}

external interface `T$47` {
    var OutBundles: Array<String>
    var `$`: Boolean
}

external interface `T$48` {
    var OutBundles: Array<String>
    var `$`: Boolean
}

external open class PrimaryAssetId {
    open var PrimaryAssetType: PrimaryAssetType
    open var PrimaryAssetName: String
    open fun clone(): PrimaryAssetId
    open fun ToString(): String
    open fun Equal(B: PrimaryAssetId): Boolean
    open fun GetClassFromPrimaryAssetId(): UnrealEngineClass
    open fun GetCurrentBundleState(bForceCurrentState: Boolean, OutBundles: Array<String> = definedExternally): `T$47`
    open fun GetObjectFromPrimaryAssetId(): UObject
    open fun GetSoftClassReferenceFromPrimaryAssetId(): Class
    open fun GetSoftObjectReferenceFromPrimaryAssetId(): UObject
    open fun IsValidPrimaryAssetId(): Boolean
    open fun NotEqual(B: PrimaryAssetId): Boolean
    open fun UnloadPrimaryAsset()

    companion object {
        fun C(Other: UObject): PrimaryAssetId
        fun C(Other: Any): PrimaryAssetId
        fun ToString(PrimaryAssetId: PrimaryAssetId): String
        fun Equal(A: PrimaryAssetId, B: PrimaryAssetId): Boolean
        fun GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UnrealEngineClass
        fun GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId, bForceCurrentState: Boolean, OutBundles: Array<String> = definedExternally): `T$48`
        fun GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject
        fun GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Class
        fun GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject
        fun IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Boolean
        fun NotEqual(A: PrimaryAssetId, B: PrimaryAssetId): Boolean
        fun UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId)
    }
}

external open class SaveGame : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun SaveGameToSlot(SlotName: String, UserIndex: Number): Boolean

    companion object {
        fun Load(ResourceName: String): SaveGame
        fun Find(Outer: UObject, ResourceName: String): SaveGame
        fun GetDefaultObject(): SaveGame
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SaveGame
        fun C(Other: UObject): SaveGame
        fun C(Other: Any): SaveGame
        fun SaveGameToSlot(SaveGameObject: SaveGame, SlotName: String, UserIndex: Number): Boolean
    }
}

external object EInterfaceValidResult {
    var Valid: String /* "Valid" */
    var Invalid: String /* "Invalid" */
    var EInterfaceValidResult_MAX: String /* "EInterfaceValidResult_MAX" */
}

external interface `T$49` {
    var Result: String /* "Valid" | "Invalid" | "EInterfaceValidResult_MAX" */
}

external open class CameraLensInterfaceClassSupport {
    open var Class: UnrealEngineClass
    open fun clone(): CameraLensInterfaceClassSupport
    open fun GetInterfaceClass(): UnrealEngineClass
    open fun IsValidCameraLensClass(Result: String /* "Valid" | "Invalid" | "EInterfaceValidResult_MAX" */ = definedExternally): `T$49`

    companion object {
        fun C(Other: UObject): CameraLensInterfaceClassSupport
        fun C(Other: Any): CameraLensInterfaceClassSupport
        fun GetInterfaceClass(CameraLens: CameraLensInterfaceClassSupport): UnrealEngineClass
        fun IsValidCameraLensClass(CameraLens: CameraLensInterfaceClassSupport, Result: String /* "Valid" | "Invalid" | "EInterfaceValidResult_MAX" */ = definedExternally): `T$49`
    }
}

external open class EditorSubsystem : DynamicSubsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EditorSubsystem
        fun Find(Outer: UObject, ResourceName: String): EditorSubsystem
        fun GetDefaultObject(): EditorSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditorSubsystem
        fun C(Other: UObject): EditorSubsystem
        fun C(Other: Any): EditorSubsystem
    }
}

external open class Visual : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Visual
        fun Find(Outer: UObject, ResourceName: String): Visual
        fun GetDefaultObject(): Visual
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Visual
        fun C(Other: UObject): Visual
        fun C(Other: Any): Visual
    }
}

external open class PanelWidget : Widget {
    constructor()
    constructor(Outer: UObject)
    open var Slots: Array<PanelSlot>
    open fun RemoveChildAt(index: Number): Boolean
    open fun RemoveChild(Content: Widget): Boolean
    open fun HasChild(Content: Widget): Boolean
    open fun HasAnyChildren(): Boolean
    open fun GetChildrenCount(): Number
    open fun GetChildIndex(Content: Widget): Number
    open fun GetChildAt(index: Number): Widget
    open fun GetAllChildren(): Array<Widget>
    open fun ClearChildren()
    open fun AddChild(Content: Widget): PanelSlot

    companion object {
        fun Load(ResourceName: String): PanelWidget
        fun Find(Outer: UObject, ResourceName: String): PanelWidget
        fun GetDefaultObject(): PanelWidget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PanelWidget
        fun C(Other: UObject): PanelWidget
        fun C(Other: Any): PanelWidget
    }
}

external open class PanelSlot : Visual {
    constructor()
    constructor(Outer: UObject)
    open var Parent: PanelWidget
    open var Content: Widget

    companion object {
        fun Load(ResourceName: String): PanelSlot
        fun Find(Outer: UObject, ResourceName: String): PanelSlot
        fun GetDefaultObject(): PanelSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PanelSlot
        fun C(Other: UObject): PanelSlot
        fun C(Other: Any): PanelSlot
    }
}

external object ESlateVisibility {
    var Visible: String /* "Visible" */
    var Collapsed: String /* "Collapsed" */
    var Hidden: String /* "Hidden" */
    var HitTestInvisible: String /* "HitTestInvisible" */
    var SelfHitTestInvisible: String /* "SelfHitTestInvisible" */
    var ESlateVisibility_MAX: String /* "ESlateVisibility_MAX" */
}

external open class WidgetTransform {
    open var Translation: Vector2D
    open var Scale: Vector2D
    open var Shear: Vector2D
    open var Angle: Number
    open fun clone(): WidgetTransform

    companion object {
        fun C(Other: UObject): WidgetTransform
        fun C(Other: Any): WidgetTransform
    }
}

external object EFlowDirectionPreference {
    var Inherit: String /* "Inherit" */
    var Culture: String /* "Culture" */
    var LeftToRight: String /* "LeftToRight" */
    var RightToLeft: String /* "RightToLeft" */
    var EFlowDirectionPreference_MAX: String /* "EFlowDirectionPreference_MAX" */
}

external object ESlateAccessibleBehavior {
    var NotAccessible: String /* "NotAccessible" */
    var Auto: String /* "Auto" */
    var Summary: String /* "Summary" */
    var Custom: String /* "Custom" */
    var ToolTip: String /* "ToolTip" */
    var ESlateAccessibleBehavior_MAX: String /* "ESlateAccessibleBehavior_MAX" */
}

external open class SlateAccessibleWidgetData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bCanChildrenBeAccessible: Boolean
    open var AccessibleBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleSummaryBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleText: String
    open var AccessibleTextDelegate: UnrealEngineDelegate<() -> String>
    open var AccessibleSummaryText: String
    open var AccessibleSummaryTextDelegate: UnrealEngineDelegate<() -> String>

    companion object {
        fun Load(ResourceName: String): SlateAccessibleWidgetData
        fun Find(Outer: UObject, ResourceName: String): SlateAccessibleWidgetData
        fun GetDefaultObject(): SlateAccessibleWidgetData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateAccessibleWidgetData
        fun C(Other: UObject): SlateAccessibleWidgetData
        fun C(Other: Any): SlateAccessibleWidgetData
    }
}

external object EMouseCursor {
    var None: String /* "None" */
    var Default: String /* "Default" */
    var TextEditBeam: String /* "TextEditBeam" */
    var ResizeLeftRight: String /* "ResizeLeftRight" */
    var ResizeUpDown: String /* "ResizeUpDown" */
    var ResizeSouthEast: String /* "ResizeSouthEast" */
    var ResizeSouthWest: String /* "ResizeSouthWest" */
    var CardinalCross: String /* "CardinalCross" */
    var Crosshairs: String /* "Crosshairs" */
    var Hand: String /* "Hand" */
    var GrabHand: String /* "GrabHand" */
    var GrabHandClosed: String /* "GrabHandClosed" */
    var SlashedCircle: String /* "SlashedCircle" */
    var EyeDropper: String /* "EyeDropper" */
    var EMouseCursor_MAX: String /* "EMouseCursor_MAX" */
}

external object EWidgetClipping {
    var Inherit: String /* "Inherit" */
    var ClipToBounds: String /* "ClipToBounds" */
    var ClipToBoundsWithoutIntersecting: String /* "ClipToBoundsWithoutIntersecting" */
    var ClipToBoundsAlways: String /* "ClipToBoundsAlways" */
    var OnDemand: String /* "OnDemand" */
    var EWidgetClipping_MAX: String /* "EWidgetClipping_MAX" */
}

external object EUINavigationRule {
    var Escape: String /* "Escape" */
    var Explicit: String /* "Explicit" */
    var Wrap: String /* "Wrap" */
    var Stop: String /* "Stop" */
    var Custom: String /* "Custom" */
    var CustomBoundary: String /* "CustomBoundary" */
    var Invalid: String /* "Invalid" */
    var EUINavigationRule_MAX: String /* "EUINavigationRule_MAX" */
}

external object EUINavigation {
    var Left: String /* "Left" */
    var Right: String /* "Right" */
    var Up: String /* "Up" */
    var Down: String /* "Down" */
    var Next: String /* "Next" */
    var Previous: String /* "Previous" */
    var Num: String /* "Num" */
    var Invalid: String /* "Invalid" */
    var EUINavigation_MAX: String /* "EUINavigation_MAX" */
}

external open class WidgetNavigationData {
    open var Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */
    open var WidgetToFocus: String
    open var Widget: Any
    open var CustomDelegate: UnrealEngineDelegate<(Navigation: String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */) -> Widget>
    open fun clone(): WidgetNavigationData

    companion object {
        fun C(Other: UObject): WidgetNavigationData
        fun C(Other: Any): WidgetNavigationData
    }
}

external open class WidgetNavigation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Up: WidgetNavigationData
    open var Down: WidgetNavigationData
    open var Left: WidgetNavigationData
    open var Right: WidgetNavigationData
    open var Next: WidgetNavigationData
    open var Previous: WidgetNavigationData

    companion object {
        fun Load(ResourceName: String): WidgetNavigation
        fun Find(Outer: UObject, ResourceName: String): WidgetNavigation
        fun GetDefaultObject(): WidgetNavigation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetNavigation
        fun C(Other: UObject): WidgetNavigation
        fun C(Other: Any): WidgetNavigation
    }
}

external open class PropertyPathSegment {
    open var Name: String
    open var ArrayIndex: Number
    open var struct: Struct
    open fun clone(): PropertyPathSegment

    companion object {
        fun C(Other: UObject): PropertyPathSegment
        fun C(Other: Any): PropertyPathSegment
    }
}

external open class UFunction : Struct {
    constructor()
    constructor(Outer: UObject)
    open fun GetFunctionParmsSize(): Number

    companion object {
        fun Load(ResourceName: String): UFunction
        fun Find(Outer: UObject, ResourceName: String): UFunction
        fun GetDefaultObject(): UFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UFunction
        fun C(Other: UObject): UFunction
        fun C(Other: Any): UFunction
        fun GetFunctionParmsSize(UFunction: UFunction): Number
    }
}

external open class CachedPropertyPath {
    open var Segments: Array<PropertyPathSegment>
    open var CachedFunction: UFunction
    open fun clone(): CachedPropertyPath

    companion object {
        fun C(Other: UObject): CachedPropertyPath
        fun C(Other: Any): CachedPropertyPath
    }
}

external open class DynamicPropertyPath : CachedPropertyPath {
    override fun clone(): DynamicPropertyPath

    companion object {
        fun C(Other: UObject): DynamicPropertyPath
        fun C(Other: Any): DynamicPropertyPath
    }
}

external open class PropertyBinding : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SourceObject: Any
    open var SourcePath: DynamicPropertyPath
    open var DestinationProperty: String

    companion object {
        fun Load(ResourceName: String): PropertyBinding
        fun Find(Outer: UObject, ResourceName: String): PropertyBinding
        fun GetDefaultObject(): PropertyBinding
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PropertyBinding
        fun C(Other: UObject): PropertyBinding
        fun C(Other: Any): PropertyBinding
    }
}

external open class LocalMessage : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LocalMessage
        fun Find(Outer: UObject, ResourceName: String): LocalMessage
        fun GetDefaultObject(): LocalMessage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalMessage
        fun C(Other: UObject): LocalMessage
        fun C(Other: Any): LocalMessage
    }
}

external open class UniqueNetIdWrapper {
    open fun clone(): UniqueNetIdWrapper

    companion object {
        fun C(Other: UObject): UniqueNetIdWrapper
        fun C(Other: Any): UniqueNetIdWrapper
    }
}

external open class UniqueNetIdRepl : UniqueNetIdWrapper {
    open var ReplicationBytes: Array<Number>
    override fun clone(): UniqueNetIdRepl

    companion object {
        fun C(Other: UObject): UniqueNetIdRepl
        fun C(Other: Any): UniqueNetIdRepl
    }
}

external object EAutoReceiveInput {
    var Disabled: String /* "Disabled" */
    var Player0: String /* "Player0" */
    var Player1: String /* "Player1" */
    var Player2: String /* "Player2" */
    var Player3: String /* "Player3" */
    var Player4: String /* "Player4" */
    var Player5: String /* "Player5" */
    var Player6: String /* "Player6" */
    var Player7: String /* "Player7" */
    var EAutoReceiveInput_MAX: String /* "EAutoReceiveInput_MAX" */
}

external object EAutoPossessAI {
    var Disabled: String /* "Disabled" */
    var PlacedInWorld: String /* "PlacedInWorld" */
    var Spawned: String /* "Spawned" */
    var PlacedInWorldOrSpawned: String /* "PlacedInWorldOrSpawned" */
    var EAutoPossessAI_MAX: String /* "EAutoPossessAI_MAX" */
}

external object EPlaneConstraintAxisSetting {
    var Custom: String /* "Custom" */
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var UseGlobalPhysicsSetting: String /* "UseGlobalPhysicsSetting" */
    var EPlaneConstraintAxisSetting_MAX: String /* "EPlaneConstraintAxisSetting_MAX" */
}

external interface `T$50` {
    var X: Number
    var Y: Number
    var Z: Number
}

external open class Vector_NetQuantize : Vector {
    override fun clone(): Vector_NetQuantize
    open fun BreakVector_NetQuantize(X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`

    companion object {
        fun C(Other: UObject): Vector_NetQuantize
        fun C(Other: Any): Vector_NetQuantize
        fun BreakVector_NetQuantize(InVec: Vector_NetQuantize, X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`
        fun MakeVector_NetQuantize(X: Any, Y: Any, Z: Any): Vector_NetQuantize
    }
}

external open class Vector_NetQuantizeNormal : Vector {
    override fun clone(): Vector_NetQuantizeNormal
    open fun BreakVector_NetQuantizeNormal(X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`

    companion object {
        fun C(Other: UObject): Vector_NetQuantizeNormal
        fun C(Other: Any): Vector_NetQuantizeNormal
        fun BreakVector_NetQuantizeNormal(InVec: Vector_NetQuantizeNormal, X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`
        fun MakeVector_NetQuantizeNormal(X: Any, Y: Any, Z: Any): Vector_NetQuantizeNormal
    }
}

external interface `T$51` {
    var bBlockingHit: Boolean
    var bInitialOverlap: Boolean
    var Time: Number
    var Distance: Number
    var Location: Vector
    var ImpactPoint: Vector
    var Normal: Vector
    var ImpactNormal: Vector
    var PhysMat: PhysicalMaterial
    var HitActor: Actor
    var HitComponent: PrimitiveComponent
    var HitBoneName: String
    var BoneName: String
    var HitItem: Number
    var ElementIndex: Number
    var FaceIndex: Number
    var TraceStart: Vector
    var TraceEnd: Vector
}

external interface `T$52` {
    var UV: Vector2D
    var `$`: Boolean
}

external open class HitResult {
    open var FaceIndex: Number
    open var Time: Number
    open var Distance: Number
    open var Location: Vector_NetQuantize
    open var ImpactPoint: Vector_NetQuantize
    open var Normal: Vector_NetQuantizeNormal
    open var ImpactNormal: Vector_NetQuantizeNormal
    open var TraceStart: Vector_NetQuantize
    open var TraceEnd: Vector_NetQuantize
    open var PenetrationDepth: Number
    open var MyItem: Number
    open var Item: Number
    open var ElementIndex: Number
    open var bBlockingHit: Boolean
    open var bStartPenetrating: Boolean
    open var PhysMaterial: Any
    open var HitObjectHandle: ActorInstanceHandle
    open var Component: Any
    open var BoneName: String
    open var MyBoneName: String
    open fun clone(): HitResult
    open fun BreakHitResult(bBlockingHit: Boolean = definedExternally, bInitialOverlap: Boolean = definedExternally, Time: Number = definedExternally, Distance: Number = definedExternally, Location: Vector = definedExternally, ImpactPoint: Vector = definedExternally, Normal: Vector = definedExternally, ImpactNormal: Vector = definedExternally, PhysMat: PhysicalMaterial = definedExternally, HitActor: Actor = definedExternally, HitComponent: PrimitiveComponent = definedExternally, HitBoneName: String = definedExternally, BoneName: String = definedExternally, HitItem: Number = definedExternally, ElementIndex: Number = definedExternally, FaceIndex: Number = definedExternally, TraceStart: Vector = definedExternally, TraceEnd: Vector = definedExternally): `T$51`
    open fun FindCollisionUV(UVChannel: Number, UV: Vector2D = definedExternally): `T$52`
    open fun GetSurfaceType(): String /* "SurfaceType_Default" | "SurfaceType1" | "SurfaceType2" | "SurfaceType3" | "SurfaceType4" | "SurfaceType5" | "SurfaceType6" | "SurfaceType7" | "SurfaceType8" | "SurfaceType9" | "SurfaceType10" | "SurfaceType11" | "SurfaceType12" | "SurfaceType13" | "SurfaceType14" | "SurfaceType15" | "SurfaceType16" | "SurfaceType17" | "SurfaceType18" | "SurfaceType19" | "SurfaceType20" | "SurfaceType21" | "SurfaceType22" | "SurfaceType23" | "SurfaceType24" | "SurfaceType25" | "SurfaceType26" | "SurfaceType27" | "SurfaceType28" | "SurfaceType29" | "SurfaceType30" | "SurfaceType31" | "SurfaceType32" | "SurfaceType33" | "SurfaceType34" | "SurfaceType35" | "SurfaceType36" | "SurfaceType37" | "SurfaceType38" | "SurfaceType39" | "SurfaceType40" | "SurfaceType41" | "SurfaceType42" | "SurfaceType43" | "SurfaceType44" | "SurfaceType45" | "SurfaceType46" | "SurfaceType47" | "SurfaceType48" | "SurfaceType49" | "SurfaceType50" | "SurfaceType51" | "SurfaceType52" | "SurfaceType53" | "SurfaceType54" | "SurfaceType55" | "SurfaceType56" | "SurfaceType57" | "SurfaceType58" | "SurfaceType59" | "SurfaceType60" | "SurfaceType61" | "SurfaceType62" | "SurfaceType_Max" | "EPhysicalSurface_MAX" */

    companion object {
        fun C(Other: UObject): HitResult
        fun C(Other: Any): HitResult
        fun BreakHitResult(Hit: HitResult, bBlockingHit: Boolean = definedExternally, bInitialOverlap: Boolean = definedExternally, Time: Number = definedExternally, Distance: Number = definedExternally, Location: Vector = definedExternally, ImpactPoint: Vector = definedExternally, Normal: Vector = definedExternally, ImpactNormal: Vector = definedExternally, PhysMat: PhysicalMaterial = definedExternally, HitActor: Actor = definedExternally, HitComponent: PrimitiveComponent = definedExternally, HitBoneName: String = definedExternally, BoneName: String = definedExternally, HitItem: Number = definedExternally, ElementIndex: Number = definedExternally, FaceIndex: Number = definedExternally, TraceStart: Vector = definedExternally, TraceEnd: Vector = definedExternally): `T$51`
        fun FindCollisionUV(Hit: HitResult, UVChannel: Number, UV: Vector2D = definedExternally): `T$52`
        fun GetSurfaceType(Hit: HitResult): String /* "SurfaceType_Default" | "SurfaceType1" | "SurfaceType2" | "SurfaceType3" | "SurfaceType4" | "SurfaceType5" | "SurfaceType6" | "SurfaceType7" | "SurfaceType8" | "SurfaceType9" | "SurfaceType10" | "SurfaceType11" | "SurfaceType12" | "SurfaceType13" | "SurfaceType14" | "SurfaceType15" | "SurfaceType16" | "SurfaceType17" | "SurfaceType18" | "SurfaceType19" | "SurfaceType20" | "SurfaceType21" | "SurfaceType22" | "SurfaceType23" | "SurfaceType24" | "SurfaceType25" | "SurfaceType26" | "SurfaceType27" | "SurfaceType28" | "SurfaceType29" | "SurfaceType30" | "SurfaceType31" | "SurfaceType32" | "SurfaceType33" | "SurfaceType34" | "SurfaceType35" | "SurfaceType36" | "SurfaceType37" | "SurfaceType38" | "SurfaceType39" | "SurfaceType40" | "SurfaceType41" | "SurfaceType42" | "SurfaceType43" | "SurfaceType44" | "SurfaceType45" | "SurfaceType46" | "SurfaceType47" | "SurfaceType48" | "SurfaceType49" | "SurfaceType50" | "SurfaceType51" | "SurfaceType52" | "SurfaceType53" | "SurfaceType54" | "SurfaceType55" | "SurfaceType56" | "SurfaceType57" | "SurfaceType58" | "SurfaceType59" | "SurfaceType60" | "SurfaceType61" | "SurfaceType62" | "SurfaceType_Max" | "EPhysicalSurface_MAX" */
        fun MakeHitResult(bBlockingHit: Boolean, bInitialOverlap: Boolean, Time: Number, Distance: Number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: String, BoneName: String, HitItem: Number, ElementIndex: Number, FaceIndex: Number, TraceStart: Vector, TraceEnd: Vector): HitResult
    }
}

external interface `T$53` {
    var OutHit: HitResult
    var `$`: Boolean
}

external open class MovementComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var UpdatedComponent: SceneComponent
    open var UpdatedPrimitive: PrimitiveComponent
    open var Velocity: Vector
    open var PlaneConstraintNormal: Vector
    open var PlaneConstraintOrigin: Vector
    open var bUpdateOnlyIfRendered: Boolean
    open var bAutoUpdateTickRegistration: Boolean
    open var bTickBeforeOwner: Boolean
    open var bAutoRegisterUpdatedComponent: Boolean
    open var bConstrainToPlane: Boolean
    open var bSnapToPlaneAtStart: Boolean
    open var bAutoRegisterPhysicsVolumeUpdates: Boolean
    open var bComponentShouldUpdatePhysicsVolume: Boolean
    open var PlaneConstraintAxisSetting: String /* "Custom" | "X" | "Y" | "Z" | "UseGlobalPhysicsSetting" | "EPlaneConstraintAxisSetting_MAX" */
    open fun StopMovementImmediately()
    open fun SnapUpdatedComponentToPlane()
    open fun SetUpdatedComponent(NewUpdatedComponent: SceneComponent)
    open fun SetPlaneConstraintOrigin(PlaneOrigin: Vector)
    open fun SetPlaneConstraintNormal(PlaneNormal: Vector)
    open fun SetPlaneConstraintFromVectors(Forward: Vector, Up: Vector)
    open fun SetPlaneConstraintEnabled(bEnabled: Boolean)
    open fun SetPlaneConstraintAxisSetting(NewAxisSetting: String /* "Custom" | "X" | "Y" | "Z" | "UseGlobalPhysicsSetting" | "EPlaneConstraintAxisSetting_MAX" */)
    open fun PhysicsVolumeChanged(NewVolume: PhysicsVolume)
    open fun MoveUpdatedComponent(Delta: Vector, NewRotation: Rotator, OutHit: HitResult = definedExternally, bSweep: Boolean = definedExternally, bTeleport: Boolean = definedExternally): `T$53`
    open fun IsExceedingMaxSpeed(MaxSpeed: Number): Boolean
    open fun GetPlaneConstraintOrigin(): Vector
    open fun GetPlaneConstraintNormal(): Vector
    open fun GetPlaneConstraintAxisSetting(): String /* "Custom" | "X" | "Y" | "Z" | "UseGlobalPhysicsSetting" | "EPlaneConstraintAxisSetting_MAX" */
    open fun GetPhysicsVolume(): PhysicsVolume
    open fun GetMaxSpeed(): Number
    open fun GetGravityZ(): Number
    open fun ConstrainNormalToPlane(Normal: Vector): Vector
    open fun ConstrainLocationToPlane(Location: Vector): Vector
    open fun ConstrainDirectionToPlane(Direction: Vector): Vector

    companion object {
        fun Load(ResourceName: String): MovementComponent
        fun Find(Outer: UObject, ResourceName: String): MovementComponent
        fun GetDefaultObject(): MovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovementComponent
        fun C(Other: UObject): MovementComponent
        fun C(Other: Any): MovementComponent
    }
}

external open class MovementProperties {
    open var bCanCrouch: Boolean
    open var bCanJump: Boolean
    open var bCanWalk: Boolean
    open var bCanSwim: Boolean
    open var bCanFly: Boolean
    open fun clone(): MovementProperties

    companion object {
        fun C(Other: UObject): MovementProperties
        fun C(Other: Any): MovementProperties
    }
}

external open class SoftClassPath : SoftObjectPath {
    override fun clone(): SoftClassPath
    open fun BreakSoftClassPath(PathString: String = definedExternally): `T$26`
    open fun ToSoftClassReference(): Class

    companion object {
        fun C(Other: UObject): SoftClassPath
        fun C(Other: Any): SoftClassPath
        fun BreakSoftClassPath(InSoftClassPath: SoftClassPath, PathString: String = definedExternally): `T$26`
        fun ToSoftClassReference(SoftClassPath: SoftClassPath): Class
        fun MakeSoftClassPath(PathString: String): SoftClassPath
    }
}

external open class NavAgentProperties : MovementProperties {
    open var AgentRadius: Number
    open var AgentHeight: Number
    open var AgentStepHeight: Number
    open var NavWalkingSearchHeightScale: Number
    open var PreferredNavData: SoftClassPath
    override fun clone(): NavAgentProperties

    companion object {
        fun C(Other: UObject): NavAgentProperties
        fun C(Other: Any): NavAgentProperties
    }
}

external open class NavMovementComponent : MovementComponent {
    constructor()
    constructor(Outer: UObject)
    open var NavAgentProps: NavAgentProperties
    open var FixedPathBrakingDistance: Number
    open var bUpdateNavAgentWithOwnersCollision: Boolean
    open var bUseAccelerationForPaths: Boolean
    open var bUseFixedBrakingDistanceForPaths: Boolean
    open var MovementState: MovementProperties
    open var PathFollowingComp: UObject
    open fun StopMovementKeepPathing()
    open fun StopActiveMovement()
    open fun IsSwimming(): Boolean
    open fun IsMovingOnGround(): Boolean
    open fun IsFlying(): Boolean
    open fun IsFalling(): Boolean
    open fun IsCrouching(): Boolean

    companion object {
        fun Load(ResourceName: String): NavMovementComponent
        fun Find(Outer: UObject, ResourceName: String): NavMovementComponent
        fun GetDefaultObject(): NavMovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavMovementComponent
        fun C(Other: UObject): NavMovementComponent
        fun C(Other: Any): NavMovementComponent
    }
}

external open class PawnMovementComponent : NavMovementComponent {
    constructor()
    constructor(Outer: UObject)
    open var PawnOwner: Pawn
    open fun IsMoveInputIgnored(): Boolean
    open fun GetPendingInputVector(): Vector
    open fun GetPawnOwner(): Pawn
    open fun GetLastInputVector(): Vector
    open fun ConsumeInputVector(): Vector
    open fun AddInputVector(WorldVector: Vector, bForce: Boolean)

    companion object {
        fun Load(ResourceName: String): PawnMovementComponent
        fun Find(Outer: UObject, ResourceName: String): PawnMovementComponent
        fun GetDefaultObject(): PawnMovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PawnMovementComponent
        fun C(Other: UObject): PawnMovementComponent
        fun C(Other: Any): PawnMovementComponent
    }
}

external open class Pawn(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var bUseControllerRotationPitch: Boolean
    open var bUseControllerRotationYaw: Boolean
    open var bUseControllerRotationRoll: Boolean
    open var bCanAffectNavigationGeneration: Boolean
    open var bIsLocalViewTarget: Boolean
    open var BaseEyeHeight: Number
    open var AutoPossessPlayer: String /* "Disabled" | "Player0" | "Player1" | "Player2" | "Player3" | "Player4" | "Player5" | "Player6" | "Player7" | "EAutoReceiveInput_MAX" */
    open var AutoPossessAI: String /* "Disabled" | "PlacedInWorld" | "Spawned" | "PlacedInWorldOrSpawned" | "EAutoPossessAI_MAX" */
    open var RemoteViewPitch: Number
    open var AIControllerClass: UnrealEngineClass
    open var PlayerState: PlayerState
    open var LastHitBy: Controller
    open var Controller: Controller
    open var PreviousController: Controller
    open var ReceiveControllerChangedDelegate: UnrealEngineMulticastDelegate<(Pawn: Pawn, OldController: Controller, NewController: Controller) -> Unit>
    open var ReceiveRestartedDelegate: UnrealEngineMulticastDelegate<(Pawn: Pawn) -> Unit>
    open var ControlInputVector: Vector
    open var LastControlInputVector: Vector
    open fun SpawnDefaultController()
    open fun SetCanAffectNavigationGeneration(bNewValue: Boolean, bForceUpdate: Boolean)
    open fun Unpossessed(OldController: Controller)
    open fun ReceiveRestarted()
    open fun Possessed(NewController: Controller)
    open fun ReceiveControllerChanged(OldController: Controller, NewController: Controller)
    open fun PawnMakeNoise(Loudness: Number, NoiseLocation: Vector, bUseNoiseMakerLocation: Boolean, NoiseMaker: Actor)
    open fun OnRep_PlayerState()
    open fun OnRep_Controller()
    open fun IsPlayerControlled(): Boolean
    open fun IsPawnControlled(): Boolean
    open fun IsMoveInputIgnored(): Boolean
    open fun IsLocallyViewed(): Boolean
    open fun IsLocallyControlled(): Boolean
    open fun IsControlled(): Boolean
    open fun IsBotControlled(): Boolean
    open fun GetPendingMovementInputVector(): Vector
    open fun GetNavAgentLocation(): Vector
    open fun GetMovementComponent(): PawnMovementComponent
    open fun GetLocalViewingPlayerController(): PlayerController
    open fun GetLastMovementInputVector(): Vector
    open fun GetControlRotation(): Rotator
    open fun GetController(): Controller
    open fun GetBaseAimRotation(): Rotator
    open fun DetachFromControllerPendingDestroy()
    open fun ConsumeMovementInputVector(): Vector
    open fun AddMovementInput(WorldDirection: Vector, ScaleValue: Number, bForce: Boolean)
    open fun AddControllerYawInput(Val: Number)
    open fun AddControllerRollInput(Val: Number)
    open fun AddControllerPitchInput(Val: Number)
    open fun SendAIMessage(Message: String, MessageSource: UObject, bSuccess: Boolean)

    companion object {
        fun GetDefaultObject(): Pawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Pawn
        fun GetMovementBaseActor(Pawn: Pawn): Actor
        fun C(Other: UObject): Pawn
        fun C(Other: Any): Pawn
        fun SendAIMessage(Target: Pawn, Message: String, MessageSource: UObject, bSuccess: Boolean)
    }
}

external open class PlayerState(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var Score: Number
    open var PlayerId: Number
    open var CompressedPing: Number
    open var bShouldUpdateReplicatedPing: Boolean
    open var bIsSpectator: Boolean
    open var bOnlySpectator: Boolean
    open var bIsABot: Boolean
    open var bIsInactive: Boolean
    open var bFromPreviousLevel: Boolean
    open var StartTime: Number
    open var EngineMessageClass: UnrealEngineClass
    open var SavedNetworkAddress: String
    open var UniqueId: UniqueNetIdRepl
    open var OnPawnSet: UnrealEngineMulticastDelegate<(Player: PlayerState, NewPawn: Pawn, OldPawn: Pawn) -> Unit>
    open var PawnPrivate: Pawn
    open var PlayerNamePrivate: String
    open fun OverrideWith(OldPlayerState: PlayerState)
    open fun CopyProperties(NewPlayerState: PlayerState)
    open fun OnRep_UniqueId()
    open fun OnRep_Score()
    open fun OnRep_PlayerName()
    open fun OnRep_PlayerId()
    open fun OnRep_bIsInactive()
    open fun OnPawnPrivateDestroyed(InActor: Actor)
    open fun IsOnlyASpectator(): Boolean
    open fun GetPlayerName(): String
    open fun GetPlayerController(): PlayerController
    open fun GetPingInMilliseconds(): Number
    open fun GetPawn(): Pawn
    open fun GetUniqueNetId(): UniqueNetIdRepl

    companion object {
        fun GetDefaultObject(): PlayerState
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerState
        fun C(Other: UObject): PlayerState
        fun C(Other: Any): PlayerState
    }
}

external open class DamageType : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bCausedByWorld: Boolean
    open var bScaleMomentumByMass: Boolean
    open var bRadialDamageVelChange: Boolean
    open var DamageImpulse: Number
    open var DestructibleImpulse: Number
    open var DestructibleDamageSpreadScale: Number
    open var DamageFalloff: Number

    companion object {
        fun Load(ResourceName: String): DamageType
        fun Find(Outer: UObject, ResourceName: String): DamageType
        fun GetDefaultObject(): DamageType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DamageType
        fun C(Other: UObject): DamageType
        fun C(Other: Any): DamageType
    }
}

external open class MeshComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var OverrideMaterials: Array<MaterialInterface>
    open var bEnableMaterialParameterCaching: Boolean
    open fun SetVectorParameterValueOnMaterials(ParameterName: String, ParameterValue: Vector)
    open fun SetScalarParameterValueOnMaterials(ParameterName: String, ParameterValue: Number)
    open fun PrestreamTextures(Seconds: Number, bPrioritizeCharacterTextures: Boolean, CinematicTextureGroups: Number)
    open fun IsMaterialSlotNameValid(MaterialSlotName: String): Boolean
    open fun GetMaterialSlotNames(): Array<String>
    open fun GetMaterials(): Array<MaterialInterface>
    open fun GetMaterialIndex(MaterialSlotName: String): Number

    companion object {
        fun Load(ResourceName: String): MeshComponent
        fun Find(Outer: UObject, ResourceName: String): MeshComponent
        fun GetDefaultObject(): MeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshComponent
        fun C(Other: UObject): MeshComponent
        fun C(Other: Any): MeshComponent
    }
}

external open class SkeletalMeshEditorData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SkeletalMeshEditorData
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshEditorData
        fun GetDefaultObject(): SkeletalMeshEditorData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshEditorData
        fun C(Other: UObject): SkeletalMeshEditorData
        fun C(Other: Any): SkeletalMeshEditorData
    }
}

external object EBoneTranslationRetargetingMode {
    var Animation: String /* "Animation" */
    var Skeleton: String /* "Skeleton" */
    var AnimationScaled: String /* "AnimationScaled" */
    var AnimationRelative: String /* "AnimationRelative" */
    var OrientAndScale: String /* "OrientAndScale" */
    var EBoneTranslationRetargetingMode_MAX: String /* "EBoneTranslationRetargetingMode_MAX" */
}

external open class BoneNode {
    open var Name: String
    open var ParentIndex: Number
    open var TranslationRetargetingMode: String /* "Animation" | "Skeleton" | "AnimationScaled" | "AnimationRelative" | "OrientAndScale" | "EBoneTranslationRetargetingMode_MAX" */
    open fun clone(): BoneNode

    companion object {
        fun C(Other: UObject): BoneNode
        fun C(Other: Any): BoneNode
    }
}

external open class VirtualBone {
    open var SourceBoneName: String
    open var TargetBoneName: String
    open var VirtualBoneName: String
    open fun clone(): VirtualBone

    companion object {
        fun C(Other: UObject): VirtualBone
        fun C(Other: Any): VirtualBone
    }
}

external open class SkeletalMeshSocket : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SocketName: String
    open var BoneName: String
    open var RelativeLocation: Vector
    open var RelativeRotation: Rotator
    open var RelativeScale: Vector
    open var bForceAlwaysAnimated: Boolean
    open fun InitializeSocketFromLocation(SkelComp: SkeletalMeshComponent, WorldLocation: Vector, WorldNormal: Vector)
    open fun GetSocketLocation(SkelComp: SkeletalMeshComponent): Vector

    companion object {
        fun Load(ResourceName: String): SkeletalMeshSocket
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshSocket
        fun GetDefaultObject(): SkeletalMeshSocket
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshSocket
        fun C(Other: UObject): SkeletalMeshSocket
        fun C(Other: Any): SkeletalMeshSocket
    }
}

external open class SmartNameContainer {
    open fun clone(): SmartNameContainer

    companion object {
        fun C(Other: UObject): SmartNameContainer
        fun C(Other: Any): SmartNameContainer
    }
}

external open class BoneReference {
    open var BoneName: String
    open fun clone(): BoneReference

    companion object {
        fun C(Other: UObject): BoneReference
        fun C(Other: Any): BoneReference
    }
}

external open class BlendProfileBoneEntry {
    open var BoneReference: BoneReference
    open var BlendScale: Number
    open fun clone(): BlendProfileBoneEntry

    companion object {
        fun C(Other: UObject): BlendProfileBoneEntry
        fun C(Other: Any): BlendProfileBoneEntry
    }
}

external object EBlendProfileMode {
    var TimeFactor: String /* "TimeFactor" */
    var WeightFactor: String /* "WeightFactor" */
    var BlendMask: String /* "BlendMask" */
    var EBlendProfileMode_MAX: String /* "EBlendProfileMode_MAX" */
}

external open class BlendProfile : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OwningSkeleton: Skeleton
    open var ProfileEntries: Array<BlendProfileBoneEntry>
    open var Mode: String /* "TimeFactor" | "WeightFactor" | "BlendMask" | "EBlendProfileMode_MAX" */

    companion object {
        fun Load(ResourceName: String): BlendProfile
        fun Find(Outer: UObject, ResourceName: String): BlendProfile
        fun GetDefaultObject(): BlendProfile
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlendProfile
        fun C(Other: UObject): BlendProfile
        fun C(Other: Any): BlendProfile
    }
}

external open class AnimSlotGroup {
    open var GroupName: String
    open var SlotNames: Array<String>
    open fun clone(): AnimSlotGroup

    companion object {
        fun C(Other: UObject): AnimSlotGroup
        fun C(Other: Any): AnimSlotGroup
    }
}

external open class DataAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NativeClass: UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): DataAsset
        fun Find(Outer: UObject, ResourceName: String): DataAsset
        fun GetDefaultObject(): DataAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DataAsset
        fun C(Other: UObject): DataAsset
        fun C(Other: Any): DataAsset
    }
}

external object EConstraintTransform {
    var Absolute: String /* "Absolute" */
    var Relative: String /* "Relative" */
    var EConstraintTransform_MAX: String /* "EConstraintTransform_MAX" */
}

external open class RigTransformConstraint {
    open var TranformType: String /* "Absolute" | "Relative" | "EConstraintTransform_MAX" */
    open var ParentSpace: String
    open var Weight: Number
    open fun clone(): RigTransformConstraint

    companion object {
        fun C(Other: UObject): RigTransformConstraint
        fun C(Other: Any): RigTransformConstraint
    }
}

external open class TransformBaseConstraint {
    open var TransformConstraints: Array<RigTransformConstraint>
    open fun clone(): TransformBaseConstraint

    companion object {
        fun C(Other: UObject): TransformBaseConstraint
        fun C(Other: Any): TransformBaseConstraint
    }
}

external open class TransformBase {
    open var UNode: String
    open var Constraints: TransformBaseConstraint
    open fun clone(): TransformBase

    companion object {
        fun C(Other: UObject): TransformBase
        fun C(Other: Any): TransformBase
    }
}

external open class UNode {
    open var Name: String
    open var ParentName: String
    open var Transform: Transform
    open var DisplayName: String
    open var bAdvanced: Boolean
    open fun clone(): UNode

    companion object {
        fun C(Other: UObject): UNode
        fun C(Other: Any): UNode
    }
}

external open class Rig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TransformBases: Array<TransformBase>
    open var Nodes: Array<UNode>

    companion object {
        fun Load(ResourceName: String): Rig
        fun Find(Outer: UObject, ResourceName: String): Rig
        fun GetDefaultObject(): Rig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Rig
        fun C(Other: UObject): Rig
        fun C(Other: Any): Rig
    }
}

external open class NameMapping {
    open var NodeName: String
    open var BoneName: String
    open fun clone(): NameMapping

    companion object {
        fun C(Other: UObject): NameMapping
        fun C(Other: Any): NameMapping
    }
}

external open class RigConfiguration {
    open var Rig: Rig
    open var BoneMappingTable: Array<NameMapping>
    open fun clone(): RigConfiguration

    companion object {
        fun C(Other: UObject): RigConfiguration
        fun C(Other: Any): RigConfiguration
    }
}

external open class PreviewAttachedObjectPair {
    open var AttachedObject: UObject
    open var UObject: UObject
    open var AttachedTo: String
    open fun clone(): PreviewAttachedObjectPair

    companion object {
        fun C(Other: UObject): PreviewAttachedObjectPair
        fun C(Other: Any): PreviewAttachedObjectPair
    }
}

external open class PreviewAssetAttachContainer {
    open var AttachedObjects: Array<PreviewAttachedObjectPair>
    open fun clone(): PreviewAssetAttachContainer

    companion object {
        fun C(Other: UObject): PreviewAssetAttachContainer
        fun C(Other: Any): PreviewAssetAttachContainer
    }
}

external object ERawCurveTrackTypes {
    var RCT_Float: String /* "RCT_Float" */
    var RCT_Vector: String /* "RCT_Vector" */
    var RCT_Transform: String /* "RCT_Transform" */
    var RCT_MAX: String /* "RCT_MAX" */
}

external object ETransformCurveChannel {
    var Position: String /* "Position" */
    var Rotation: String /* "Rotation" */
    var Scale: String /* "Scale" */
    var Invalid: String /* "Invalid" */
    var ETransformCurveChannel_MAX: String /* "ETransformCurveChannel_MAX" */
}

external object EVectorCurveChannel {
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var Invalid: String /* "Invalid" */
    var EVectorCurveChannel_MAX: String /* "EVectorCurveChannel_MAX" */
}

external interface `T$54` {
    var Identifier: AnimationCurveIdentifier
    var `$`: String
}

external interface `T$55` {
    var InOutIdentifier: AnimationCurveIdentifier
    var `$`: Boolean
}

external interface `T$56` {
    var Identifier: AnimationCurveIdentifier
    var `$`: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */
}

external interface `T$57` {
    var Identifier: AnimationCurveIdentifier
    var `$`: Boolean
}

external open class AnimationCurveIdentifier {
    open fun clone(): AnimationCurveIdentifier
    open fun GetName(): `T$54`
    open fun GetTransformChildCurveIdentifier(Channel: String /* "Position" | "Rotation" | "Scale" | "Invalid" | "ETransformCurveChannel_MAX" */ = definedExternally, Axis: String /* "X" | "Y" | "Z" | "Invalid" | "EVectorCurveChannel_MAX" */ = definedExternally): `T$55`
    open fun GetType(): `T$56`
    open fun IsValid(): `T$57`

    companion object {
        fun C(Other: UObject): AnimationCurveIdentifier
        fun C(Other: Any): AnimationCurveIdentifier
        fun GetName(Identifier: AnimationCurveIdentifier = definedExternally): `T$54`
        fun GetTransformChildCurveIdentifier(InOutIdentifier: AnimationCurveIdentifier = definedExternally, Channel: String /* "Position" | "Rotation" | "Scale" | "Invalid" | "ETransformCurveChannel_MAX" */ = definedExternally, Axis: String /* "X" | "Y" | "Z" | "Invalid" | "EVectorCurveChannel_MAX" */ = definedExternally): `T$55`
        fun GetType(Identifier: AnimationCurveIdentifier = definedExternally): `T$56`
        fun IsValid(Identifier: AnimationCurveIdentifier = definedExternally): `T$57`
    }
}

external open class AnimGroupInfo {
    open var Name: String
    open var Color: LinearColor
    open fun clone(): AnimGroupInfo

    companion object {
        fun C(Other: UObject): AnimGroupInfo
        fun C(Other: Any): AnimGroupInfo
    }
}

external open class AnimMetaData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AnimMetaData
        fun Find(Outer: UObject, ResourceName: String): AnimMetaData
        fun GetDefaultObject(): AnimMetaData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimMetaData
        fun C(Other: UObject): AnimMetaData
        fun C(Other: Any): AnimMetaData
    }
}

external open class AssetMapping {
    open var SourceAsset: AnimationAsset
    open var TargetAsset: AnimationAsset
    open fun clone(): AssetMapping

    companion object {
        fun C(Other: UObject): AssetMapping
        fun C(Other: Any): AssetMapping
    }
}

external open class AssetMappingTable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MappedAssets: Array<AssetMapping>

    companion object {
        fun Load(ResourceName: String): AssetMappingTable
        fun Find(Outer: UObject, ResourceName: String): AssetMappingTable
        fun GetDefaultObject(): AssetMappingTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetMappingTable
        fun C(Other: UObject): AssetMappingTable
        fun C(Other: Any): AssetMappingTable
    }
}

external open class SmartName {
    open var DisplayName: String
    open fun clone(): SmartName

    companion object {
        fun C(Other: UObject): SmartName
        fun C(Other: Any): SmartName
    }
}

external open class PoseAssetInfluence {
    open var PoseIndex: Number
    open var BoneTransformIndex: Number
    open fun clone(): PoseAssetInfluence

    companion object {
        fun C(Other: UObject): PoseAssetInfluence
        fun C(Other: Any): PoseAssetInfluence
    }
}

external open class PoseAssetInfluences {
    open var Influences: Array<PoseAssetInfluence>
    open fun clone(): PoseAssetInfluences

    companion object {
        fun C(Other: UObject): PoseAssetInfluences
        fun C(Other: Any): PoseAssetInfluences
    }
}

external open class PoseData {
    open var SourceLocalSpacePose: Array<Transform>
    open var SourceCurveData: Array<Number>
    open var LocalSpacePose: Array<Transform>
    open var CurveData: Array<Number>
    open fun clone(): PoseData

    companion object {
        fun C(Other: UObject): PoseData
        fun C(Other: Any): PoseData
    }
}

external open class AnimCurveBase {
    open var LastObservedName: String
    open var Name: SmartName
    open var Color: LinearColor
    open var CurveTypeFlags: Number
    open fun clone(): AnimCurveBase

    companion object {
        fun C(Other: UObject): AnimCurveBase
        fun C(Other: Any): AnimCurveBase
    }
}

external open class PoseDataContainer {
    open var PoseNames: Array<SmartName>
    open var Tracks: Array<String>
    open var TrackBoneIndices: Array<Number>
    open var TrackPoseInfluenceIndices: Array<PoseAssetInfluences>
    open var Poses: Array<PoseData>
    open var Curves: Array<AnimCurveBase>
    open fun clone(): PoseDataContainer

    companion object {
        fun C(Other: UObject): PoseDataContainer
        fun C(Other: Any): PoseDataContainer
    }
}

external open class AnimCompositeBase : AnimSequenceBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AnimCompositeBase
        fun Find(Outer: UObject, ResourceName: String): AnimCompositeBase
        fun GetDefaultObject(): AnimCompositeBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCompositeBase
        fun C(Other: UObject): AnimCompositeBase
        fun C(Other: Any): AnimCompositeBase
    }
}

external object EMontageBlendMode {
    var Standard: String /* "Standard" */
    var Inertialization: String /* "Inertialization" */
    var EMontageBlendMode_MAX: String /* "EMontageBlendMode_MAX" */
}

external open class CurveFloat : CurveBase {
    constructor()
    constructor(Outer: UObject)
    open var FloatCurve: RichCurve
    open var bIsEventCurve: Boolean
    open fun GetFloatValue(InTime: Number): Number

    companion object {
        fun Load(ResourceName: String): CurveFloat
        fun Find(Outer: UObject, ResourceName: String): CurveFloat
        fun GetDefaultObject(): CurveFloat
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveFloat
        fun C(Other: UObject): CurveFloat
        fun C(Other: Any): CurveFloat
    }
}

external object EAlphaBlendOption {
    var Linear: String /* "Linear" */
    var Cubic: String /* "Cubic" */
    var HermiteCubic: String /* "HermiteCubic" */
    var Sinusoidal: String /* "Sinusoidal" */
    var QuadraticInOut: String /* "QuadraticInOut" */
    var CubicInOut: String /* "CubicInOut" */
    var QuarticInOut: String /* "QuarticInOut" */
    var QuinticInOut: String /* "QuinticInOut" */
    var CircularIn: String /* "CircularIn" */
    var CircularOut: String /* "CircularOut" */
    var CircularInOut: String /* "CircularInOut" */
    var ExpIn: String /* "ExpIn" */
    var ExpOut: String /* "ExpOut" */
    var ExpInOut: String /* "ExpInOut" */
    var Custom: String /* "Custom" */
    var EAlphaBlendOption_MAX: String /* "EAlphaBlendOption_MAX" */
}

external open class AlphaBlend {
    open var CustomCurve: CurveFloat
    open var BlendTime: Number
    open var BlendOption: String /* "Linear" | "Cubic" | "HermiteCubic" | "Sinusoidal" | "QuadraticInOut" | "CubicInOut" | "QuarticInOut" | "QuinticInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "ExpIn" | "ExpOut" | "ExpInOut" | "Custom" | "EAlphaBlendOption_MAX" */
    open fun clone(): AlphaBlend

    companion object {
        fun C(Other: UObject): AlphaBlend
        fun C(Other: Any): AlphaBlend
    }
}

external open class AnimSyncMarker {
    open var MarkerName: String
    open var Time: Number
    open var TrackIndex: Number
    open var Guid: Guid
    open fun clone(): AnimSyncMarker

    companion object {
        fun C(Other: UObject): AnimSyncMarker
        fun C(Other: Any): AnimSyncMarker
    }
}

external open class MarkerSyncData {
    open var AuthoredSyncMarkers: Array<AnimSyncMarker>
    open fun clone(): MarkerSyncData

    companion object {
        fun C(Other: UObject): MarkerSyncData
        fun C(Other: Any): MarkerSyncData
    }
}

external open class CompositeSection : AnimLinkableElement {
    open var SectionName: String
    open var StartTime: Number
    open var NextSectionName: String
    open var MetaData: Array<AnimMetaData>
    override fun clone(): CompositeSection

    companion object {
        fun C(Other: UObject): CompositeSection
        fun C(Other: Any): CompositeSection
    }
}

external open class AnimSegment {
    open var AnimReference: AnimSequenceBase
    open var StartPos: Number
    open var AnimStartTime: Number
    open var AnimEndTime: Number
    open var AnimPlayRate: Number
    open var LoopingCount: Number
    open fun clone(): AnimSegment

    companion object {
        fun C(Other: UObject): AnimSegment
        fun C(Other: Any): AnimSegment
    }
}

external open class AnimTrack {
    open var AnimSegments: Array<AnimSegment>
    open fun clone(): AnimTrack

    companion object {
        fun C(Other: UObject): AnimTrack
        fun C(Other: Any): AnimTrack
    }
}

external open class SlotAnimationTrack {
    open var SlotName: String
    open var AnimTrack: AnimTrack
    open fun clone(): SlotAnimationTrack

    companion object {
        fun C(Other: UObject): SlotAnimationTrack
        fun C(Other: Any): SlotAnimationTrack
    }
}

external open class BranchingPoint : AnimLinkableElement {
    open var EventName: String
    open var DisplayTime: Number
    open var TriggerTimeOffset: Number
    override fun clone(): BranchingPoint

    companion object {
        fun C(Other: UObject): BranchingPoint
        fun C(Other: Any): BranchingPoint
    }
}

external object ERootMotionRootLock {
    var RefPose: String /* "RefPose" */
    var AnimFirstFrame: String /* "AnimFirstFrame" */
    var Zero: String /* "Zero" */
    var ERootMotionRootLock_MAX: String /* "ERootMotionRootLock_MAX" */
}

external object EAnimNotifyEventType {
    var Begin: String /* "Begin" */
    var End: String /* "End" */
    var EAnimNotifyEventType_MAX: String /* "EAnimNotifyEventType_MAX" */
}

external open class BranchingPointMarker {
    open var NotifyIndex: Number
    open var TriggerTime: Number
    open var NotifyEventType: String /* "Begin" | "End" | "EAnimNotifyEventType_MAX" */
    open fun clone(): BranchingPointMarker

    companion object {
        fun C(Other: UObject): BranchingPointMarker
        fun C(Other: Any): BranchingPointMarker
    }
}

external open class TimeStretchCurveMarker {
    open var Time: Number
    open var Alpha: Number
    open fun clone(): TimeStretchCurveMarker

    companion object {
        fun C(Other: UObject): TimeStretchCurveMarker
        fun C(Other: Any): TimeStretchCurveMarker
    }
}

external open class TimeStretchCurve {
    open var SamplingRate: Number
    open var CurveValueMinPrecision: Number
    open var Markers: Array<TimeStretchCurveMarker>
    open var Sum_dT_i_by_C_i: Number
    open fun clone(): TimeStretchCurve

    companion object {
        fun C(Other: UObject): TimeStretchCurve
        fun C(Other: Any): TimeStretchCurve
    }
}

external open class AlphaBlendArgs {
    open var CustomCurve: CurveFloat
    open var BlendTime: Number
    open var BlendOption: String /* "Linear" | "Cubic" | "HermiteCubic" | "Sinusoidal" | "QuadraticInOut" | "CubicInOut" | "QuarticInOut" | "QuinticInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "ExpIn" | "ExpOut" | "ExpInOut" | "Custom" | "EAlphaBlendOption_MAX" */
    open fun clone(): AlphaBlendArgs

    companion object {
        fun C(Other: UObject): AlphaBlendArgs
        fun C(Other: Any): AlphaBlendArgs
    }
}

external open class MontageBlendSettings {
    open var BlendProfile: BlendProfile
    open var Blend: AlphaBlendArgs
    open var BlendMode: String /* "Standard" | "Inertialization" | "EMontageBlendMode_MAX" */
    open fun clone(): MontageBlendSettings

    companion object {
        fun C(Other: UObject): MontageBlendSettings
        fun C(Other: Any): MontageBlendSettings
    }
}

external open class AnimMontage : AnimCompositeBase {
    constructor()
    constructor(Outer: UObject)
    open var BlendModeIn: String /* "Standard" | "Inertialization" | "EMontageBlendMode_MAX" */
    open var BlendModeOut: String /* "Standard" | "Inertialization" | "EMontageBlendMode_MAX" */
    open var BlendIn: AlphaBlend
    open var BlendInTime: Number
    open var BlendOut: AlphaBlend
    open var BlendOutTime: Number
    open var BlendOutTriggerTime: Number
    open var SyncGroup: String
    open var SyncSlotIndex: Number
    open var MarkerData: MarkerSyncData
    open var CompositeSections: Array<CompositeSection>
    open var SlotAnimTracks: Array<SlotAnimationTrack>
    open var BranchingPoints: Array<BranchingPoint>
    open var bEnableRootMotionTranslation: Boolean
    open var bEnableRootMotionRotation: Boolean
    open var bEnableAutoBlendOut: Boolean
    open var BlendProfileIn: BlendProfile
    open var BlendProfileOut: BlendProfile
    open var RootMotionRootLock: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */
    open var PreviewBasePose: AnimSequence
    open var BranchingPointMarkers: Array<BranchingPointMarker>
    open var BranchingPointStateNotifyIndices: Array<Number>
    open var TimeStretchCurve: TimeStretchCurve
    open var TimeStretchCurveName: String
    open fun IsValidSectionName(InSectionName: String): Boolean
    open fun GetDefaultBlendOutTime(): Number
    open fun GetDefaultBlendInTime(): Number
    open fun GetBlendOutArgs(): AlphaBlendArgs
    open fun GetBlendInArgs(): AlphaBlendArgs

    companion object {
        fun Load(ResourceName: String): AnimMontage
        fun Find(Outer: UObject, ResourceName: String): AnimMontage
        fun GetDefaultObject(): AnimMontage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimMontage
        fun CreateSlotAnimationAsDynamicMontage_WithBlendSettings(Asset: AnimSequenceBase, SlotNodeName: String, BlendInSettings: MontageBlendSettings, BlendOutSettings: MontageBlendSettings, InPlayRate: Number, LoopCount: Number, InBlendOutTriggerTime: Number): AnimMontage
        fun C(Other: UObject): AnimMontage
        fun C(Other: Any): AnimMontage
    }
}

external object EAnimLinkMethod {
    var Absolute: String /* "Absolute" */
    var Relative: String /* "Relative" */
    var Proportional: String /* "Proportional" */
    var EAnimLinkMethod_MAX: String /* "EAnimLinkMethod_MAX" */
}

external open class AnimLinkableElement {
    open var LinkedMontage: AnimMontage
    open var SlotIndex: Number
    open var SegmentIndex: Number
    open var LinkMethod: String /* "Absolute" | "Relative" | "Proportional" | "EAnimLinkMethod_MAX" */
    open var CachedLinkMethod: String /* "Absolute" | "Relative" | "Proportional" | "EAnimLinkMethod_MAX" */
    open var SegmentBeginTime: Number
    open var SegmentLength: Number
    open var LinkValue: Number
    open var LinkedSequence: AnimSequenceBase
    open fun clone(): AnimLinkableElement

    companion object {
        fun C(Other: UObject): AnimLinkableElement
        fun C(Other: Any): AnimLinkableElement
    }
}

external open class ScriptStruct : Struct {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ScriptStruct
        fun Find(Outer: UObject, ResourceName: String): ScriptStruct
        fun GetDefaultObject(): ScriptStruct
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScriptStruct
        fun C(Other: UObject): ScriptStruct
        fun C(Other: Any): ScriptStruct
    }
}

external open class TableRowBase {
    open fun clone(): TableRowBase

    companion object {
        fun C(Other: UObject): TableRowBase
        fun C(Other: Any): TableRowBase
    }
}

external interface `T$58` {
    var OutRow: TableRowBase
    var `$`: Boolean
}

external interface `T$59` {
    var OutRowNames: Array<String>
}

external interface `T$60` {
    var OutRowNames: Array<String>
}

external open class DataTable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RowStruct: ScriptStruct
    open var bStripFromClientBuilds: Boolean
    open var bIgnoreExtraFields: Boolean
    open var bIgnoreMissingFields: Boolean
    open var ImportKeyField: String
    open var AssetImportData: AssetImportData
    open var ImportPath: String
    open var RowStructName: String
    open var RowsSerializedWithTags: Array<Number>
    open var TemporarilyReferencedObjects: Any
    open fun GetDataTableAsJSON(InDTExportFlags: Number): String
    open fun DoesDataTableRowExist(RowName: String): Boolean
    open fun FillDataTableFromCSVFile(CSVFilePath: String): Boolean
    open fun FillDataTableFromCSVString(CSVString: String): Boolean
    open fun FillDataTableFromJSONFile(JSONFilePath: String, ImportRowStruct: ScriptStruct): Boolean
    open fun FillDataTableFromJSONString(JsonString: String): Boolean
    open fun GetDataTableColumnAsString(PropertyName: String): Array<String>
    open fun GetDataTableRowFromName(RowName: String, OutRow: TableRowBase = definedExternally): `T$58`
    open fun GetDataTableRowNames(OutRowNames: Array<String> = definedExternally): `T$59`

    companion object {
        fun Load(ResourceName: String): DataTable
        fun Find(Outer: UObject, ResourceName: String): DataTable
        fun GetDefaultObject(): DataTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DataTable
        fun C(Other: UObject): DataTable
        fun C(Other: Any): DataTable
        fun GetDataTableAsJSON(InDataTable: DataTable, InDTExportFlags: Number): String
        fun DoesDataTableRowExist(Table: DataTable, RowName: String): Boolean
        fun FillDataTableFromCSVFile(DataTable: DataTable, CSVFilePath: String): Boolean
        fun FillDataTableFromCSVString(DataTable: DataTable, CSVString: String): Boolean
        fun FillDataTableFromJSONFile(DataTable: DataTable, JSONFilePath: String, ImportRowStruct: ScriptStruct): Boolean
        fun FillDataTableFromJSONString(DataTable: DataTable, JsonString: String): Boolean
        fun GetDataTableColumnAsString(DataTable: DataTable, PropertyName: String): Array<String>
        fun GetDataTableRowFromName(Table: DataTable, RowName: String, OutRow: TableRowBase = definedExternally): `T$58`
        fun GetDataTableRowNames(Table: DataTable, OutRowNames: Array<String> = definedExternally): `T$60`
    }
}

external object EMirrorFindReplaceMethod {
    var Prefix: String /* "Prefix" */
    var Suffix: String /* "Suffix" */
    var RegularExpression: String /* "RegularExpression" */
    var EMirrorFindReplaceMethod_MAX: String /* "EMirrorFindReplaceMethod_MAX" */
}

external open class MirrorFindReplaceExpression {
    open var FindExpression: String
    open var ReplaceExpression: String
    open var FindReplaceMethod: String /* "Prefix" | "Suffix" | "RegularExpression" | "EMirrorFindReplaceMethod_MAX" */
    open fun clone(): MirrorFindReplaceExpression

    companion object {
        fun C(Other: UObject): MirrorFindReplaceExpression
        fun C(Other: Any): MirrorFindReplaceExpression
    }
}

external open class MirrorDataTable : DataTable {
    constructor()
    constructor(Outer: UObject)
    open var MirrorFindReplaceExpressions: Array<MirrorFindReplaceExpression>
    open var MirrorAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var Skeleton: Skeleton

    companion object {
        fun Load(ResourceName: String): MirrorDataTable
        fun Find(Outer: UObject, ResourceName: String): MirrorDataTable
        fun GetDefaultObject(): MirrorDataTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MirrorDataTable
        fun C(Other: UObject): MirrorDataTable
        fun C(Other: Any): MirrorDataTable
    }
}

external object ERootMotionMode {
    var NoRootMotionExtraction: String /* "NoRootMotionExtraction" */
    var IgnoreRootMotion: String /* "IgnoreRootMotion" */
    var RootMotionFromEverything: String /* "RootMotionFromEverything" */
    var RootMotionFromMontagesOnly: String /* "RootMotionFromMontagesOnly" */
    var ERootMotionMode_MAX: String /* "ERootMotionMode_MAX" */
}

external open class AnimNotifyQueue {
    open var AnimNotifies: Array<AnimNotifyEventReference>
    open var UnfilteredMontageAnimNotifies: Any
    open fun clone(): AnimNotifyQueue

    companion object {
        fun C(Other: UObject): AnimNotifyQueue
        fun C(Other: Any): AnimNotifyQueue
    }
}

external open class AnimNotifyState : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NotifyColor: Color
    open var bShouldFireInEditor: Boolean
    open fun Received_NotifyTick(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase, FrameDeltaTime: Number, EventReference: AnimNotifyEventReference): Boolean
    open fun Received_NotifyEnd(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase, EventReference: AnimNotifyEventReference): Boolean
    open fun Received_NotifyBegin(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase, TotalDuration: Number, EventReference: AnimNotifyEventReference): Boolean
    open fun GetNotifyName(): String
    open fun GetDefaultTriggerWeightThreshold(): Number

    companion object {
        fun Load(ResourceName: String): AnimNotifyState
        fun Find(Outer: UObject, ResourceName: String): AnimNotifyState
        fun GetDefaultObject(): AnimNotifyState
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimNotifyState
        fun C(Other: UObject): AnimNotifyState
        fun C(Other: Any): AnimNotifyState
    }
}

external open class PoseSnapshot {
    open var LocalTransforms: Array<Transform>
    open var BoneNames: Array<String>
    open var SkeletalMeshName: String
    open var SnapshotName: String
    open var bIsValid: Boolean
    open fun clone(): PoseSnapshot

    companion object {
        fun C(Other: UObject): PoseSnapshot
        fun C(Other: Any): PoseSnapshot
    }
}

external object ETeleportType {
    var None: String /* "None" */
    var TeleportPhysics: String /* "TeleportPhysics" */
    var ResetPhysics: String /* "ResetPhysics" */
    var ETeleportType_MAX: String /* "ETeleportType_MAX" */
}

external object EMontagePlayReturnType {
    var MontageLength: String /* "MontageLength" */
    var Duration: String /* "Duration" */
    var EMontagePlayReturnType_MAX: String /* "EMontagePlayReturnType_MAX" */
}

external open class MarkerSyncAnimPosition {
    open var PreviousMarkerName: String
    open var NextMarkerName: String
    open var PositionBetweenMarkers: Number
    open fun clone(): MarkerSyncAnimPosition

    companion object {
        fun C(Other: UObject): MarkerSyncAnimPosition
        fun C(Other: Any): MarkerSyncAnimPosition
    }
}

external object EAnimCurveType {
    var AttributeCurve: String /* "AttributeCurve" */
    var MaterialCurve: String /* "MaterialCurve" */
    var MorphTargetCurve: String /* "MorphTargetCurve" */
    var MaxAnimCurveType: String /* "MaxAnimCurveType" */
    var EAnimCurveType_MAX: String /* "EAnimCurveType_MAX" */
}

external open class CachedAnimStateData {
    open var StateMachineName: String
    open var StateName: String
    open fun clone(): CachedAnimStateData

    companion object {
        fun C(Other: UObject): CachedAnimStateData
        fun C(Other: Any): CachedAnimStateData
    }
}

external object EAnimNodeReferenceConversionResult {
    var Succeeded: String /* "Succeeded" */
    var Failed: String /* "Failed" */
    var EAnimNodeReferenceConversionResult_MAX: String /* "EAnimNodeReferenceConversionResult_MAX" */
}

external open class SkeletalControlReference : AnimNodeReference {
    override fun clone(): SkeletalControlReference
    open fun GetAlpha(): Number
    open fun SetAlpha(Alpha: Number): SkeletalControlReference

    companion object {
        fun C(Other: UObject): SkeletalControlReference
        fun C(Other: Any): SkeletalControlReference
        fun GetAlpha(SkeletalControl: SkeletalControlReference): Number
        fun SetAlpha(SkeletalControl: SkeletalControlReference, Alpha: Number): SkeletalControlReference
    }
}

external interface `T$61` {
    var SequenceBase: AnimSequenceBase
    var `$`: SequencePlayerReference
}

external open class SequencePlayerReference : AnimNodeReference {
    override fun clone(): SequencePlayerReference
    open fun GetAccumulatedTime(): Number
    open fun GetLoopAnimation(): Boolean
    open fun GetPlayRate(): Number
    open fun GetSequence(SequenceBase: AnimSequenceBase = definedExternally): `T$61`
    open fun GetSequence(): AnimSequenceBase
    open fun GetStartPosition(): Number
    open fun SetAccumulatedTime(Time: Number): SequencePlayerReference
    open fun SetPlayRate(PlayRate: Number): SequencePlayerReference
    open fun SetSequence(Sequence: AnimSequenceBase): SequencePlayerReference
    open fun SetStartPosition(StartPosition: Number): SequencePlayerReference

    companion object {
        fun C(Other: UObject): SequencePlayerReference
        fun C(Other: Any): SequencePlayerReference
        fun GetAccumulatedTime(SequencePlayer: SequencePlayerReference): Number
        fun GetLoopAnimation(SequencePlayer: SequencePlayerReference): Boolean
        fun GetPlayRate(SequencePlayer: SequencePlayerReference): Number
        fun GetSequence(SequencePlayer: SequencePlayerReference, SequenceBase: AnimSequenceBase = definedExternally): `T$61`
        fun GetSequence(SequencePlayer: SequencePlayerReference): AnimSequenceBase
        fun GetStartPosition(SequencePlayer: SequencePlayerReference): Number
        fun SetAccumulatedTime(SequencePlayer: SequencePlayerReference, Time: Number): SequencePlayerReference
        fun SetPlayRate(SequencePlayer: SequencePlayerReference, PlayRate: Number): SequencePlayerReference
        fun SetSequence(SequencePlayer: SequencePlayerReference, Sequence: AnimSequenceBase): SequencePlayerReference
        fun SetStartPosition(SequencePlayer: SequencePlayerReference, StartPosition: Number): SequencePlayerReference
    }
}

external open class SequenceEvaluatorReference : AnimNodeReference {
    override fun clone(): SequenceEvaluatorReference
    open fun GetAccumulatedTime(): Number
    open fun GetSequence(): AnimSequenceBase
    open fun SetExplicitTime(Time: Number): SequenceEvaluatorReference
    open fun SetSequence(Sequence: AnimSequenceBase): SequenceEvaluatorReference

    companion object {
        fun C(Other: UObject): SequenceEvaluatorReference
        fun C(Other: Any): SequenceEvaluatorReference
        fun GetAccumulatedTime(SequenceEvaluator: SequenceEvaluatorReference): Number
        fun GetSequence(SequenceEvaluator: SequenceEvaluatorReference): AnimSequenceBase
        fun SetExplicitTime(SequenceEvaluator: SequenceEvaluatorReference, Time: Number): SequenceEvaluatorReference
        fun SetSequence(SequenceEvaluator: SequenceEvaluatorReference, Sequence: AnimSequenceBase): SequenceEvaluatorReference
    }
}

external open class LinkedAnimGraphReference : AnimNodeReference {
    override fun clone(): LinkedAnimGraphReference
    open fun GetLinkedAnimInstance(): AnimInstance
    open fun HasLinkedAnimInstance(): Boolean

    companion object {
        fun C(Other: UObject): LinkedAnimGraphReference
        fun C(Other: Any): LinkedAnimGraphReference
        fun GetLinkedAnimInstance(UNode: LinkedAnimGraphReference): AnimInstance
        fun HasLinkedAnimInstance(UNode: LinkedAnimGraphReference): Boolean
    }
}

external open class AnimationStateResultReference : AnimNodeReference {
    override fun clone(): AnimationStateResultReference

    companion object {
        fun C(Other: UObject): AnimationStateResultReference
        fun C(Other: Any): AnimationStateResultReference
    }
}

external interface `T$62` {
    var Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */
    var `$`: SkeletalControlReference
}

external interface `T$63` {
    var SkeletalControl: SkeletalControlReference
    var Result: Boolean
}

external interface `T$64` {
    var Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */
    var `$`: SequencePlayerReference
}

external interface `T$65` {
    var SequencePlayer: SequencePlayerReference
    var Result: Boolean
}

external interface `T$66` {
    var Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */
    var `$`: SequenceEvaluatorReference
}

external interface `T$67` {
    var SequenceEvaluator: SequenceEvaluatorReference
    var Result: Boolean
}

external interface `T$68` {
    var Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */
    var `$`: LinkedAnimGraphReference
}

external interface `T$69` {
    var LinkedAnimGraph: LinkedAnimGraphReference
    var Result: Boolean
}

external interface `T$70` {
    var AnimationState: AnimationStateResultReference
    var Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */
}

external interface `T$71` {
    var AnimationState: AnimationStateResultReference
    var Result: Boolean
}

external open class AnimNodeReference {
    open fun clone(): AnimNodeReference
    open fun ConvertToSkeletalControl(Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$62`
    open fun ConverttoSkeletalControl(SkeletalControl: SkeletalControlReference = definedExternally, Result: Boolean = definedExternally): `T$63`
    open fun ConvertToSequencePlayer(Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$64`
    open fun ConverttoSequencePlayer(SequencePlayer: SequencePlayerReference = definedExternally, Result: Boolean = definedExternally): `T$65`
    open fun ConvertToSequenceEvaluator(Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$66`
    open fun ConverttoSequenceEvaluator(SequenceEvaluator: SequenceEvaluatorReference = definedExternally, Result: Boolean = definedExternally): `T$67`
    open fun ConvertToLinkedAnimGraph(Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$68`
    open fun ConverttoLinkedAnimGraph(LinkedAnimGraph: LinkedAnimGraphReference = definedExternally, Result: Boolean = definedExternally): `T$69`
    open fun ConverttoAnimationState(AnimationState: AnimationStateResultReference = definedExternally, Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$70`
    open fun ConverttoAnimationState(AnimationState: AnimationStateResultReference = definedExternally, Result: Boolean = definedExternally): `T$71`

    companion object {
        fun C(Other: UObject): AnimNodeReference
        fun C(Other: Any): AnimNodeReference
        fun ConvertToSkeletalControl(UNode: AnimNodeReference, Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$62`
        fun ConverttoSkeletalControl(UNode: AnimNodeReference, SkeletalControl: SkeletalControlReference = definedExternally, Result: Boolean = definedExternally): `T$63`
        fun ConvertToSequencePlayer(UNode: AnimNodeReference, Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$64`
        fun ConverttoSequencePlayer(UNode: AnimNodeReference, SequencePlayer: SequencePlayerReference = definedExternally, Result: Boolean = definedExternally): `T$65`
        fun ConvertToSequenceEvaluator(UNode: AnimNodeReference, Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$66`
        fun ConverttoSequenceEvaluator(UNode: AnimNodeReference, SequenceEvaluator: SequenceEvaluatorReference = definedExternally, Result: Boolean = definedExternally): `T$67`
        fun ConvertToLinkedAnimGraph(UNode: AnimNodeReference, Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$68`
        fun ConverttoLinkedAnimGraph(UNode: AnimNodeReference, LinkedAnimGraph: LinkedAnimGraphReference = definedExternally, Result: Boolean = definedExternally): `T$69`
        fun ConverttoAnimationState(UNode: AnimNodeReference, AnimationState: AnimationStateResultReference = definedExternally, Result: String /* "Succeeded" | "Failed" | "EAnimNodeReferenceConversionResult_MAX" */ = definedExternally): `T$70`
        fun ConverttoAnimationState(UNode: AnimNodeReference, AnimationState: AnimationStateResultReference = definedExternally, Result: Boolean = definedExternally): `T$71`
    }
}

external interface `T$72` {
    var Snapshot: PoseSnapshot
}

external interface `T$73` {
    var OutMarkerTime: Number
    var `$`: Boolean
}

external interface `T$74` {
    var OutLinkedInstances: Array<AnimInstance>
}

external interface `T$75` {
    var OutLinkedInstances: Array<AnimInstance>
}

external interface `T$76` {
    var OutNames: Array<String>
}

external interface `T$77` {
    var OutNames: Array<String>
}

external open class AnimInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CurrentSkeleton: Skeleton
    open var RootMotionMode: String /* "NoRootMotionExtraction" | "IgnoreRootMotion" | "RootMotionFromEverything" | "RootMotionFromMontagesOnly" | "ERootMotionMode_MAX" */
    open var bUseMultiThreadedAnimationUpdate: Boolean
    open var bUsingCopyPoseFromMesh: Boolean
    open var bReceiveNotifiesFromLinkedInstances: Boolean
    open var bPropagateNotifiesToLinkedInstances: Boolean
    open var bUseMainInstanceMontageEvaluationData: Boolean
    open var bQueueMontageEvents: Boolean
    open var OnMontageBlendingOut: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: Boolean) -> Unit>
    open var OnMontageStarted: UnrealEngineMulticastDelegate<(Montage: AnimMontage) -> Unit>
    open var OnMontageEnded: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: Boolean) -> Unit>
    open var OnAllMontageInstancesEnded: UnrealEngineMulticastDelegate<() -> Unit>
    open var PostCompileValidationClassName: SoftClassPath
    open var NotifyQueue: AnimNotifyQueue
    open var ActiveAnimNotifyState: Array<AnimNotifyEvent>
    open var ActiveAnimNotifyEventReference: Array<AnimNotifyEventReference>
    open fun WasAnimNotifyTriggeredInStateMachine(MachineIndex: Number, AnimNotifyType: UnrealEngineClass): Boolean
    open fun WasAnimNotifyTriggeredInSourceState(MachineIndex: Number, StateIndex: Number, AnimNotifyType: UnrealEngineClass): Boolean
    open fun WasAnimNotifyTriggeredInAnyState(AnimNotifyType: UnrealEngineClass): Boolean
    open fun WasAnimNotifyStateActiveInStateMachine(MachineIndex: Number, AnimNotifyStateType: UnrealEngineClass): Boolean
    open fun WasAnimNotifyStateActiveInSourceState(MachineIndex: Number, StateIndex: Number, AnimNotifyStateType: UnrealEngineClass): Boolean
    open fun WasAnimNotifyStateActiveInAnyState(AnimNotifyStateType: UnrealEngineClass): Boolean
    open fun WasAnimNotifyNameTriggeredInStateMachine(MachineIndex: Number, NotifyName: String): Boolean
    open fun WasAnimNotifyNameTriggeredInSourceState(MachineIndex: Number, StateIndex: Number, NotifyName: String): Boolean
    open fun WasAnimNotifyNameTriggeredInAnyState(NotifyName: String): Boolean
    open fun UnlockAIResources(bUnlockMovement: Boolean, UnlockAILogic: Boolean)
    open fun UnlinkAnimClassLayers(InClass: UnrealEngineClass)
    open fun TryGetPawnOwner(): Pawn
    open fun StopSlotAnimation(InBlendOutTime: Number, SlotNodeName: String)
    open fun SnapshotPose(Snapshot: PoseSnapshot = definedExternally): `T$72`
    open fun SetUseMainInstanceMontageEvaluationData(bSet: Boolean)
    open fun SetRootMotionMode(Value: String /* "NoRootMotionExtraction" | "IgnoreRootMotion" | "RootMotionFromEverything" | "RootMotionFromMontagesOnly" | "ERootMotionMode_MAX" */)
    open fun SetReceiveNotifiesFromLinkedInstances(bSet: Boolean)
    open fun SetPropagateNotifiesToLinkedInstances(bSet: Boolean)
    open fun SetMorphTarget(MorphTargetName: String, Value: Number)
    open fun SavePoseSnapshot(SnapshotName: String)
    open fun ResetDynamics(InTeleportType: String /* "None" | "TeleportPhysics" | "ResetPhysics" | "ETeleportType_MAX" */)
    open fun RequestSlotGroupInertialization(InSlotGroupName: String, Duration: Number)
    open fun RemovePoseSnapshot(SnapshotName: String)
    open fun PlaySlotAnimationAsDynamicMontage_WithBlendSettings(Asset: AnimSequenceBase, SlotNodeName: String, BlendInSettings: MontageBlendSettings, BlendOutSettings: MontageBlendSettings, InPlayRate: Number, LoopCount: Number, BlendOutTriggerTime: Number, InTimeToStartMontageAt: Number): AnimMontage
    open fun PlaySlotAnimationAsDynamicMontage_WithBlendArgs(Asset: AnimSequenceBase, SlotNodeName: String, BlendIn: AlphaBlendArgs, BlendOut: AlphaBlendArgs, InPlayRate: Number, LoopCount: Number, BlendOutTriggerTime: Number, InTimeToStartMontageAt: Number): AnimMontage
    open fun PlaySlotAnimationAsDynamicMontage(Asset: AnimSequenceBase, SlotNodeName: String, BlendInTime: Number, BlendOutTime: Number, InPlayRate: Number, LoopCount: Number, BlendOutTriggerTime: Number, InTimeToStartMontageAt: Number): AnimMontage
    open fun MontageSync_StopFollowing(MontageFollower: AnimMontage)
    open fun MontageSync_Follow(MontageFollower: AnimMontage, OtherAnimInstance: AnimInstance, MontageLeader: AnimMontage)
    open fun Montage_StopWithBlendSettings(BlendOutSettings: MontageBlendSettings, Montage: AnimMontage)
    open fun Montage_StopWithBlendOut(BlendOut: AlphaBlendArgs, Montage: AnimMontage)
    open fun Montage_StopGroupByName(InBlendOutTime: Number, GroupName: String)
    open fun Montage_Stop(InBlendOutTime: Number, Montage: AnimMontage)
    open fun Montage_SetPosition(Montage: AnimMontage, NewPosition: Number)
    open fun Montage_SetPlayRate(Montage: AnimMontage, NewPlayRate: Number)
    open fun Montage_SetNextSection(SectionNameToChange: String, NextSection: String, Montage: AnimMontage)
    open fun Montage_Resume(Montage: AnimMontage)
    open fun Montage_PlayWithBlendSettings(MontageToPlay: AnimMontage, BlendInSettings: MontageBlendSettings, InPlayRate: Number, ReturnValueType: String /* "MontageLength" | "Duration" | "EMontagePlayReturnType_MAX" */, InTimeToStartMontageAt: Number, bStopAllMontages: Boolean): Number
    open fun Montage_PlayWithBlendIn(MontageToPlay: AnimMontage, BlendIn: AlphaBlendArgs, InPlayRate: Number, ReturnValueType: String /* "MontageLength" | "Duration" | "EMontagePlayReturnType_MAX" */, InTimeToStartMontageAt: Number, bStopAllMontages: Boolean): Number
    open fun Montage_Play(MontageToPlay: AnimMontage, InPlayRate: Number, ReturnValueType: String /* "MontageLength" | "Duration" | "EMontagePlayReturnType_MAX" */, InTimeToStartMontageAt: Number, bStopAllMontages: Boolean): Number
    open fun Montage_Pause(Montage: AnimMontage)
    open fun Montage_JumpToSectionsEnd(SectionName: String, Montage: AnimMontage)
    open fun Montage_JumpToSection(SectionName: String, Montage: AnimMontage)
    open fun Montage_IsPlaying(Montage: AnimMontage): Boolean
    open fun Montage_IsActive(Montage: AnimMontage): Boolean
    open fun Montage_GetPosition(Montage: AnimMontage): Number
    open fun Montage_GetPlayRate(Montage: AnimMontage): Number
    open fun Montage_GetIsStopped(Montage: AnimMontage): Boolean
    open fun Montage_GetCurrentSection(Montage: AnimMontage): String
    open fun Montage_GetBlendTime(Montage: AnimMontage): Number
    open fun LockAIResources(bLockMovement: Boolean, LockAILogic: Boolean)
    open fun LinkAnimGraphByTag(InTag: String, InClass: UnrealEngineClass)
    open fun LinkAnimClassLayers(InClass: UnrealEngineClass)
    open fun IsUsingMainInstanceMontageEvaluationData(): Boolean
    open fun IsSyncGroupBetweenMarkers(InSyncGroupName: String, PreviousMarker: String, NextMarker: String, bRespectMarkerOrder: Boolean): Boolean
    open fun IsPlayingSlotAnimation(Asset: AnimSequenceBase, SlotNodeName: String): Boolean
    open fun IsAnyMontagePlaying(): Boolean
    open fun HasMarkerBeenHitThisFrame(SyncGroup: String, MarkerName: String): Boolean
    open fun GetTimeToClosestMarker(SyncGroup: String, MarkerName: String, OutMarkerTime: Number = definedExternally): `T$73`
    open fun GetSyncGroupPosition(InSyncGroupName: String): MarkerSyncAnimPosition
    open fun GetRelevantAnimTimeRemainingFraction(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimTimeRemaining(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimTimeFraction(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimTime(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimLength(MachineIndex: Number, StateIndex: Number): Number
    open fun GetReceiveNotifiesFromLinkedInstances(): Boolean
    open fun GetPropagateNotifiesToLinkedInstances(): Boolean
    open fun GetOwningComponent(): SkeletalMeshComponent
    open fun GetOwningActor(): Actor
    open fun GetLinkedAnimLayerInstancesByGroup(InGroup: String, OutLinkedInstances: Array<AnimInstance> = definedExternally): `T$74`
    open fun GetLinkedAnimLayerInstanceByGroupAndClass(InGroup: String, InClass: UnrealEngineClass): AnimInstance
    open fun GetLinkedAnimLayerInstanceByGroup(InGroup: String): AnimInstance
    open fun GetLinkedAnimLayerInstanceByClass(InClass: UnrealEngineClass): AnimInstance
    open fun GetLinkedAnimGraphInstancesByTag(InTag: String, OutLinkedInstances: Array<AnimInstance> = definedExternally): `T$75`
    open fun GetLinkedAnimGraphInstanceByTag(InTag: String): AnimInstance
    open fun GetTransitionTimeElapsed(MachineIndex: Number, TransitionIndex: Number): Number
    open fun GetTransitionCrossfadeDuration(MachineIndex: Number, TransitionIndex: Number): Number
    open fun StateWeight(MachineIndex: Number, StateIndex: Number): Number
    open fun MachineWeight(MachineIndex: Number): Number
    open fun CurrentStateTime(MachineIndex: Number): Number
    open fun TimeRemaining(AssetPlayerIndex: Number): Number
    open fun CurrentTime(AssetPlayerIndex: Number): Number
    open fun Length(AssetPlayerIndex: Number): Number
    open fun GetDeltaSeconds(): Number
    open fun GetCurveValue(CurveName: String): Number
    open fun GetCurrentStateName(MachineIndex: Number): String
    open fun GetCurrentActiveMontage(): AnimMontage
    open fun GetAllCurveNames(OutNames: Array<String> = definedExternally): `T$76`
    open fun GetActiveCurveNames(CurveType: String /* "AttributeCurve" | "MaterialCurve" | "MorphTargetCurve" | "MaxAnimCurveType" | "EAnimCurveType_MAX" */, OutNames: Array<String> = definedExternally): `T$77`
    open fun ClearMorphTargets()
    open fun CalculateDirection(Velocity: Vector, BaseRotation: Rotator): Number
    open fun BlueprintUpdateAnimation(DeltaTimeX: Number)
    open fun BlueprintThreadSafeUpdateAnimation(DeltaTime: Number)
    open fun BlueprintPostEvaluateAnimation()
    open fun BlueprintLinkedAnimationLayersInitialized()
    open fun BlueprintInitializeAnimation()
    open fun BlueprintBeginPlay()
    open fun StateMachine_GetGlobalWeight(CachedAnimStateData: CachedAnimStateData): Number
    open fun StateMachine_GetLocalWeight(CachedAnimStateData: CachedAnimStateData): Number
    open fun StateMachine_IsStateRelevant(CachedAnimStateData: CachedAnimStateData): Boolean
    open fun GetAnimNodeReference(index: Number): AnimNodeReference
    open fun LockAIResourcesWithAnimation(bLockMovement: Boolean, LockAILogic: Boolean)
    open fun UnlockAIResourcesWithAnimation(bUnlockMovement: Boolean, UnlockAILogic: Boolean)

    companion object {
        fun Load(ResourceName: String): AnimInstance
        fun Find(Outer: UObject, ResourceName: String): AnimInstance
        fun GetDefaultObject(): AnimInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimInstance
        fun C(Other: UObject): AnimInstance
        fun C(Other: Any): AnimInstance
        fun StateMachine_GetGlobalWeight(InAnimInstance: AnimInstance, CachedAnimStateData: CachedAnimStateData): Number
        fun StateMachine_GetLocalWeight(InAnimInstance: AnimInstance, CachedAnimStateData: CachedAnimStateData): Number
        fun StateMachine_IsStateRelevant(InAnimInstance: AnimInstance, CachedAnimStateData: CachedAnimStateData): Boolean
        fun GetAnimNodeReference(Instance: AnimInstance, index: Number): AnimNodeReference
        fun LockAIResourcesWithAnimation(AnimInstance: AnimInstance, bLockMovement: Boolean, LockAILogic: Boolean)
        fun UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance, bUnlockMovement: Boolean, UnlockAILogic: Boolean)
    }
}

external open class AnimNotifyEventReference {
    open var MirrorTable: MirrorDataTable
    open var NotifySource: UObject
    open fun clone(): AnimNotifyEventReference
    open fun IsTriggeredByState(AnimInstance: AnimInstance, StateName: String): Boolean
    open fun IsTriggeredByStateInStateMachine(AnimInstance: AnimInstance, StateMachineName: String, StateName: String): Boolean
    open fun IsTriggeredByStateMachine(AnimInstance: AnimInstance, StateMachineName: String): Boolean
    open fun GetMirrorDataTable(): MirrorDataTable
    open fun IsTriggeredByMirroredAnimation(): Boolean

    companion object {
        fun C(Other: UObject): AnimNotifyEventReference
        fun C(Other: Any): AnimNotifyEventReference
        fun IsTriggeredByState(EventReference: AnimNotifyEventReference, AnimInstance: AnimInstance, StateName: String): Boolean
        fun IsTriggeredByStateInStateMachine(EventReference: AnimNotifyEventReference, AnimInstance: AnimInstance, StateMachineName: String, StateName: String): Boolean
        fun IsTriggeredByStateMachine(EventReference: AnimNotifyEventReference, AnimInstance: AnimInstance, StateMachineName: String): Boolean
        fun GetMirrorDataTable(EventReference: AnimNotifyEventReference): MirrorDataTable
        fun IsTriggeredByMirroredAnimation(EventReference: AnimNotifyEventReference): Boolean
    }
}

external open class AnimNotify : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NotifyColor: Color
    open var bShouldFireInEditor: Boolean
    open fun Received_Notify(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase, EventReference: AnimNotifyEventReference): Boolean
    open fun GetNotifyName(): String
    open fun GetDefaultTriggerWeightThreshold(): Number

    companion object {
        fun Load(ResourceName: String): AnimNotify
        fun Find(Outer: UObject, ResourceName: String): AnimNotify
        fun GetDefaultObject(): AnimNotify
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimNotify
        fun C(Other: UObject): AnimNotify
        fun C(Other: Any): AnimNotify
    }
}

external object EMontageNotifyTickType {
    var Queued: String /* "Queued" */
    var BranchingPoint: String /* "BranchingPoint" */
    var EMontageNotifyTickType_MAX: String /* "EMontageNotifyTickType_MAX" */
}

external object ENotifyFilterType {
    var NoFiltering: String /* "NoFiltering" */
    var LOD: String /* "LOD" */
    var ENotifyFilterType_MAX: String /* "ENotifyFilterType_MAX" */
}

external open class AnimNotifyEvent : AnimLinkableElement {
    open var DisplayTime: Number
    open var TriggerTimeOffset: Number
    open var EndTriggerTimeOffset: Number
    open var TriggerWeightThreshold: Number
    open var NotifyName: String
    open var Notify: AnimNotify
    open var NotifyStateClass: AnimNotifyState
    open var Duration: Number
    open var EndLink: AnimLinkableElement
    open var bConvertedFromBranchingPoint: Boolean
    open var MontageTickType: String /* "Queued" | "BranchingPoint" | "EMontageNotifyTickType_MAX" */
    open var NotifyTriggerChance: Number
    open var NotifyFilterType: String /* "NoFiltering" | "LOD" | "ENotifyFilterType_MAX" */
    open var NotifyFilterLOD: Number
    open var bTriggerOnDedicatedServer: Boolean
    open var bTriggerOnFollower: Boolean
    open var NotifyColor: Color
    open var Guid: Guid
    open var TrackIndex: Number
    override fun clone(): AnimNotifyEvent
    open fun GetAnimNotifyEventDuration(): Number
    open fun GetAnimNotifyEventTriggerTime(): Number

    companion object {
        fun C(Other: UObject): AnimNotifyEvent
        fun C(Other: Any): AnimNotifyEvent
        fun GetAnimNotifyEventDuration(NotifyEvent: AnimNotifyEvent): Number
        fun GetAnimNotifyEventTriggerTime(NotifyEvent: AnimNotifyEvent): Number
    }
}

external open class FloatCurve : AnimCurveBase {
    open var FloatCurve: RichCurve
    override fun clone(): FloatCurve

    companion object {
        fun C(Other: UObject): FloatCurve
        fun C(Other: Any): FloatCurve
    }
}

external open class VectorCurve : AnimCurveBase {
    open var FloatCurves: RichCurve
    override fun clone(): VectorCurve

    companion object {
        fun C(Other: UObject): VectorCurve
        fun C(Other: Any): VectorCurve
    }
}

external open class TransformCurve : AnimCurveBase {
    open var TranslationCurve: VectorCurve
    open var RotationCurve: VectorCurve
    open var ScaleCurve: VectorCurve
    override fun clone(): TransformCurve

    companion object {
        fun C(Other: UObject): TransformCurve
        fun C(Other: Any): TransformCurve
    }
}

external open class RawCurveTracks {
    open var FloatCurves: Array<FloatCurve>
    open var VectorCurves: Array<VectorCurve>
    open var TransformCurves: Array<TransformCurve>
    open fun clone(): RawCurveTracks

    companion object {
        fun C(Other: UObject): RawCurveTracks
        fun C(Other: Any): RawCurveTracks
    }
}

external open class AnimNotifyTrack {
    open var TrackName: String
    open var TrackColor: LinearColor
    open fun clone(): AnimNotifyTrack

    companion object {
        fun C(Other: UObject): AnimNotifyTrack
        fun C(Other: Any): AnimNotifyTrack
    }
}

external object EAnimDataModelNotifyType {
    var BracketOpened: String /* "BracketOpened" */
    var BracketClosed: String /* "BracketClosed" */
    var TrackAdded: String /* "TrackAdded" */
    var TrackChanged: String /* "TrackChanged" */
    var TrackRemoved: String /* "TrackRemoved" */
    var SequenceLengthChanged: String /* "SequenceLengthChanged" */
    var FrameRateChanged: String /* "FrameRateChanged" */
    var CurveAdded: String /* "CurveAdded" */
    var CurveChanged: String /* "CurveChanged" */
    var CurveRemoved: String /* "CurveRemoved" */
    var CurveFlagsChanged: String /* "CurveFlagsChanged" */
    var CurveRenamed: String /* "CurveRenamed" */
    var CurveScaled: String /* "CurveScaled" */
    var CurveColorChanged: String /* "CurveColorChanged" */
    var AttributeAdded: String /* "AttributeAdded" */
    var AttributeRemoved: String /* "AttributeRemoved" */
    var AttributeChanged: String /* "AttributeChanged" */
    var Populated: String /* "Populated" */
    var Reset: String /* "Reset" */
    var Invalid: String /* "Invalid" */
    var EAnimDataModelNotifyType_MAX: String /* "EAnimDataModelNotifyType_MAX" */
}

external open class EmptyPayload {
    open fun clone(): EmptyPayload

    companion object {
        fun C(Other: UObject): EmptyPayload
        fun C(Other: Any): EmptyPayload
    }
}

external interface `T$78` {
    var OutPayload: EmptyPayload
}

external open class AnimDataModelNotifPayload {
    open fun clone(): AnimDataModelNotifPayload
    open fun CopyPayload(ExpectedStruct: ScriptStruct, OutPayload: EmptyPayload = definedExternally): `T$78`
    open fun GetPayload(): EmptyPayload

    companion object {
        fun C(Other: UObject): AnimDataModelNotifPayload
        fun C(Other: Any): AnimDataModelNotifPayload
        fun CopyPayload(Payload: AnimDataModelNotifPayload, ExpectedStruct: ScriptStruct, OutPayload: EmptyPayload = definedExternally): `T$78`
        fun GetPayload(Payload: AnimDataModelNotifPayload): EmptyPayload
    }
}

external open class Quat4f {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open var W: Number
    open fun clone(): Quat4f

    companion object {
        fun C(Other: UObject): Quat4f
        fun C(Other: Any): Quat4f
    }
}

external open class RawAnimSequenceTrack {
    open var PosKeys: Array<Vector3f>
    open var RotKeys: Array<Quat4f>
    open var ScaleKeys: Array<Vector3f>
    open fun clone(): RawAnimSequenceTrack
    open fun GetPositionalKeys(): Array<Vector>
    open fun GetRotationalKeys(): Array<Quat>
    open fun GetScaleKeys(): Array<Vector>

    companion object {
        fun C(Other: UObject): RawAnimSequenceTrack
        fun C(Other: Any): RawAnimSequenceTrack
        fun GetPositionalKeys(Track: RawAnimSequenceTrack): Array<Vector>
        fun GetRotationalKeys(Track: RawAnimSequenceTrack): Array<Quat>
        fun GetScaleKeys(Track: RawAnimSequenceTrack): Array<Vector>
    }
}

external open class BoneAnimationTrack {
    open var InternalTrackData: RawAnimSequenceTrack
    open var BoneTreeIndex: Number
    open var Name: String
    open fun clone(): BoneAnimationTrack

    companion object {
        fun C(Other: UObject): BoneAnimationTrack
        fun C(Other: Any): BoneAnimationTrack
    }
}

external interface `T$79` {
    var Numerator: Number
    var Denominator: Number
}

external open class FrameRate {
    open var Numerator: Number
    open var Denominator: Number
    open fun clone(): FrameRate
    open fun BreakFrameRate(Numerator: Number = definedExternally, Denominator: Number = definedExternally): `T$79`
    open fun FrameRateToSeconds(): Number
    open fun IsValidFrameRate(): Boolean
    open fun IsMultipleOf(OtherFramerate: FrameRate): Boolean

    companion object {
        fun C(Other: UObject): FrameRate
        fun C(Other: Any): FrameRate
        fun BreakFrameRate(InFrameRate: FrameRate, Numerator: Number = definedExternally, Denominator: Number = definedExternally): `T$79`
        fun FrameRateToSeconds(InFrameRate: FrameRate): Number
        fun IsValidFrameRate(InFrameRate: FrameRate): Boolean
        fun IsMultipleOf(InFrameRate: FrameRate, OtherFramerate: FrameRate): Boolean
        fun MakeFrameRate(Numerator: Number, Denominator: Number): FrameRate
        fun GetTimecodeFrameRate(): FrameRate
    }
}

external open class AnimationCurveData {
    open var FloatCurves: Array<FloatCurve>
    open var TransformCurves: Array<TransformCurve>
    open fun clone(): AnimationCurveData

    companion object {
        fun C(Other: UObject): AnimationCurveData
        fun C(Other: Any): AnimationCurveData
    }
}

external interface `T$80` {
    var Identifier: AnimationAttributeIdentifier
    var `$`: Boolean
}

external open class AnimationAttributeIdentifier {
    open var Name: String
    open var BoneName: String
    open var BoneIndex: Number
    open var ScriptStruct: ScriptStruct
    open var ScriptStructPath: SoftObjectPath
    open fun clone(): AnimationAttributeIdentifier
    open fun IsValid(): `T$80`

    companion object {
        fun C(Other: UObject): AnimationAttributeIdentifier
        fun C(Other: Any): AnimationAttributeIdentifier
        fun IsValid(Identifier: AnimationAttributeIdentifier = definedExternally): `T$80`
    }
}

external open class AttributeKey {
    open var Time: Number
    open fun clone(): AttributeKey

    companion object {
        fun C(Other: UObject): AttributeKey
        fun C(Other: Any): AttributeKey
    }
}

external open class AttributeCurve : IndexedCurve {
    open var Keys: Array<AttributeKey>
    open var ScriptStructPath: SoftObjectPath
    open var ScriptStruct: ScriptStruct
    open var bShouldInterpolate: Boolean
    override fun clone(): AttributeCurve

    companion object {
        fun C(Other: UObject): AttributeCurve
        fun C(Other: Any): AttributeCurve
    }
}

external open class AnimatedBoneAttribute {
    open var Identifier: AnimationAttributeIdentifier
    open var Curve: AttributeCurve
    open fun clone(): AnimatedBoneAttribute

    companion object {
        fun C(Other: UObject): AnimatedBoneAttribute
        fun C(Other: Any): AnimatedBoneAttribute
    }
}

external open class TrackToSkeletonMap {
    open var BoneTreeIndex: Number
    open fun clone(): TrackToSkeletonMap

    companion object {
        fun C(Other: UObject): TrackToSkeletonMap
        fun C(Other: Any): TrackToSkeletonMap
    }
}

external interface `T$81` {
    var OutNames: Array<String>
}

external open class AnimDataModel : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BracketCounter: Number
    open var ModifiedEventDynamic: UnrealEngineMulticastDelegate<(NotifType: String /* "BracketOpened" | "BracketClosed" | "TrackAdded" | "TrackChanged" | "TrackRemoved" | "SequenceLengthChanged" | "FrameRateChanged" | "CurveAdded" | "CurveChanged" | "CurveRemoved" | "CurveFlagsChanged" | "CurveRenamed" | "CurveScaled" | "CurveColorChanged" | "AttributeAdded" | "AttributeRemoved" | "AttributeChanged" | "Populated" | "Reset" | "Invalid" | "EAnimDataModelNotifyType_MAX" */, Model: AnimDataModel, Payload: AnimDataModelNotifPayload) -> Unit>
    open var BoneAnimationTracks: Array<BoneAnimationTrack>
    open var PlayLength: Number
    open var FrameRate: FrameRate
    open var NumberOfFrames: Number
    open var NumberOfKeys: Number
    open var CurveData: AnimationCurveData
    open var AnimatedBoneAttributes: Array<AnimatedBoneAttribute>
    open var RawAnimationTracks: Array<RawAnimSequenceTrack>
    open var RawAnimationTrackNames: Array<String>
    open var RawAnimationTrackSkeletonMappings: Array<TrackToSkeletonMap>
    open var RawCurveTracks: RawCurveTracks
    open fun IsValidBoneTrackIndex(TrackIndex: Number): Boolean
    open fun GetPlayLength(): Number
    open fun GetNumBoneTracks(): Number
    open fun GetNumberOfTransformCurves(): Number
    open fun GetNumberOfKeys(): Number
    open fun GetNumberOfFrames(): Number
    open fun GetNumberOfFloatCurves(): Number
    open fun GetFrameRate(): FrameRate
    open fun GetBoneTrackNames(OutNames: Array<String> = definedExternally): `T$81`
    open fun GetBoneTrackIndexByName(TrackName: String): Number
    open fun GetBoneTrackIndex(Track: BoneAnimationTrack): Number
    open fun GetBoneTrackByName(TrackName: String): BoneAnimationTrack
    open fun GetBoneTrackByIndex(TrackIndex: Number): BoneAnimationTrack
    open fun GetBoneAnimationTracks(): Array<BoneAnimationTrack>
    open fun GetAnimationSequence(): AnimSequence

    companion object {
        fun Load(ResourceName: String): AnimDataModel
        fun Find(Outer: UObject, ResourceName: String): AnimDataModel
        fun GetDefaultObject(): AnimDataModel
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimDataModel
        fun C(Other: UObject): AnimDataModel
        fun C(Other: Any): AnimDataModel
    }
}

external object EAnimDataEvalType {
    var Source: String /* "Source" */
    var Raw: String /* "Raw" */
    var Compressed: String /* "Compressed" */
    var EAnimDataEvalType_MAX: String /* "EAnimDataEvalType_MAX" */
}

external open class AnimPoseEvaluationOptions {
    open var EvaluationType: String /* "Source" | "Raw" | "Compressed" | "EAnimDataEvalType_MAX" */
    open var bShouldRetarget: Boolean
    open var bExtractRootMotion: Boolean
    open var OptionalSkeletalMesh: SkeletalMesh
    open fun clone(): AnimPoseEvaluationOptions

    companion object {
        fun C(Other: UObject): AnimPoseEvaluationOptions
        fun C(Other: Any): AnimPoseEvaluationOptions
    }
}

external open class FrameNumber {
    open var Value: Number
    open fun clone(): FrameNumber
    open fun MakeQualifiedFrameTime(FrameRate: FrameRate, SubFrame: Number): QualifiedFrameTime
    open fun Add_FrameNumberFrameNumber(B: FrameNumber): FrameNumber
    open fun Add_FrameNumberInteger(B: Number): FrameNumber
    open fun FrameNumbertoInteger(): Number
    open fun Divide_FrameNumberInteger(B: Number): FrameNumber
    open fun Multiply_FrameNumberInteger(B: Number): FrameNumber
    open fun Subtract_FrameNumberFrameNumber(B: FrameNumber): FrameNumber
    open fun Subtract_FrameNumberInteger(B: Number): FrameNumber

    companion object {
        fun C(Other: UObject): FrameNumber
        fun C(Other: Any): FrameNumber
        fun MakeQualifiedFrameTime(Frame: FrameNumber, FrameRate: FrameRate, SubFrame: Number): QualifiedFrameTime
        fun Add_FrameNumberFrameNumber(A: FrameNumber, B: FrameNumber): FrameNumber
        fun Add_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
        fun FrameNumbertoInteger(InFrameNumber: FrameNumber): Number
        fun Divide_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
        fun Multiply_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
        fun Subtract_FrameNumberFrameNumber(A: FrameNumber, B: FrameNumber): FrameNumber
        fun Subtract_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
    }
}

external open class FrameTime {
    open var FrameNumber: FrameNumber
    open var SubFrame: Number
    open fun clone(): FrameTime
    open fun SnapFrameTime(SourceRate: FrameRate, SnapToRate: FrameRate): FrameTime
    open fun TransformFrameTime(SourceRate: FrameRate, DestinationRate: FrameRate): FrameTime

    companion object {
        fun C(Other: UObject): FrameTime
        fun C(Other: Any): FrameTime
        fun SnapFrameTime(SourceTime: FrameTime, SourceRate: FrameRate, SnapToRate: FrameRate): FrameTime
        fun TransformFrameTime(SourceTime: FrameTime, SourceRate: FrameRate, DestinationRate: FrameRate): FrameTime
        fun Multiply_SecondsFrameRate(TimeInSeconds: Number, FrameRate: FrameRate): FrameTime
    }
}

external interface `T$82` {
    var Frame: FrameNumber
    var FrameRate: FrameRate
    var SubFrame: Number
}

external open class QualifiedFrameTime {
    open var Time: FrameTime
    open var Rate: FrameRate
    open fun clone(): QualifiedFrameTime
    open fun BreakQualifiedFrameTime(Frame: FrameNumber = definedExternally, FrameRate: FrameRate = definedExternally, SubFrame: Number = definedExternally): `T$82`
    open fun QualifiedFrameTimeToSeconds(): Number

    companion object {
        fun C(Other: UObject): QualifiedFrameTime
        fun C(Other: Any): QualifiedFrameTime
        fun BreakQualifiedFrameTime(InFrameTime: QualifiedFrameTime, Frame: FrameNumber = definedExternally, FrameRate: FrameRate = definedExternally, SubFrame: Number = definedExternally): `T$82`
        fun QualifiedFrameTimeToSeconds(InFrameTime: QualifiedFrameTime): Number
    }
}

external interface `T$83` {
    var Pose: AnimPose
}

external interface `T$84` {
    var OutQualifiedFrameTime: QualifiedFrameTime
    var `$`: Boolean
}

external interface `T$85` {
    var BonePath: Array<String>
}

external interface `T$86` {
    var EventNames: Array<String>
}

external interface `T$87` {
    var NotifyEvents: Array<AnimNotifyEvent>
}

external interface `T$88` {
    var Events: Array<AnimNotifyEvent>
}

external interface `T$89` {
    var TrackNames: Array<String>
}

external interface `T$90` {
    var TrackNames: Array<String>
}

external interface `T$91` {
    var Pose: Transform
}

external interface `T$92` {
    var Poses: Array<Transform>
}

external interface `T$93` {
    var Poses: Array<Transform>
}

external interface `T$94` {
    var Frame: Number
}

external interface `T$95` {
    var NumFrames: Number
}

external interface `T$96` {
    var NumKeys: Number
}

external interface `T$97` {
    var RateScale: Number
}

external interface `T$98` {
    var PositionKeys: Array<Vector>
    var RotationKeys: Array<Quat>
    var ScalingKeys: Array<Vector>
}

external interface `T$99` {
    var PositionData: Array<Vector>
}

external interface `T$100` {
    var RotationData: Array<Quat>
}

external interface `T$101` {
    var ScaleData: Array<Vector>
}

external interface `T$102` {
    var Length: Number
}

external interface `T$103` {
    var Time: Number
}

external interface `T$104` {
    var IsValid: Boolean
}

external interface `T$105` {
    var BonePath: Array<String>
}

external interface `T$106` {
    var EventNames: Array<String>
}

external interface `T$107` {
    var NotifyEvents: Array<AnimNotifyEvent>
}

external interface `T$108` {
    var Events: Array<AnimNotifyEvent>
}

external interface `T$109` {
    var TrackNames: Array<String>
}

external interface `T$110` {
    var TrackNames: Array<String>
}

external interface `T$111` {
    var Poses: Array<Transform>
}

external interface `T$112` {
    var Poses: Array<Transform>
}

external interface `T$113` {
    var PositionKeys: Array<Vector>
    var RotationKeys: Array<Quat>
    var ScalingKeys: Array<Vector>
}

external interface `T$114` {
    var PositionData: Array<Vector>
}

external interface `T$115` {
    var RotationData: Array<Quat>
}

external interface `T$116` {
    var ScaleData: Array<Vector>
}

external open class AnimSequenceBase : AnimationAsset {
    constructor()
    constructor(Outer: UObject)
    open var Notifies: Array<AnimNotifyEvent>
    open var SequenceLength: Number
    open var RateScale: Number
    open var RawCurveData: RawCurveTracks
    open var AnimNotifyTracks: Array<AnimNotifyTrack>
    open var DataModel: AnimDataModel
    open var Controller: Any
    open fun ReplaceAnimNotifyClass(NotifyName: String, NewNotifyName: String, NewNotifyClass: UObject): Number
    open fun AddTransformAttribute(AttributeName: String, BoneName: String, Keys: Array<Number>, Values: Array<Transform>): Boolean
    open fun GetAnimPoseAtFrame(FrameIndex: Number, EvaluationOptions: AnimPoseEvaluationOptions, Pose: AnimPose = definedExternally): `T$83`
    open fun GetAnimPoseAtTime(Time: Number, EvaluationOptions: AnimPoseEvaluationOptions, Pose: AnimPose = definedExternally): `T$83`
    open fun AddAnimationNotifyEvent(NotifyTrackName: String, StartTime: Number, NotifyClass: UnrealEngineClass): AnimNotify
    open fun AddAnimationNotifyEventObject(StartTime: Number, Notify: AnimNotify, NotifyTrackName: String)
    open fun AddAnimationNotifyStateEvent(NotifyTrackName: String, StartTime: Number, Duration: Number, NotifyStateClass: UnrealEngineClass): AnimNotifyState
    open fun AddAnimationNotifyStateEventObject(StartTime: Number, Duration: Number, NotifyState: AnimNotifyState, NotifyTrackName: String)
    open fun AddAnimationNotifyTrack(NotifyTrackName: String, TrackColor: LinearColor)
    open fun CopyAnimNotifiesFromSequence(DestinationAnimationSequenceBase: AnimSequenceBase, bDeleteExistingNotifies: Boolean)
    open fun EvaluateRootBoneTimecodeAttributesAtTime(EvalTime: Number, OutQualifiedFrameTime: QualifiedFrameTime = definedExternally): `T$84`
    open fun FindBonePathToRoot(BoneName: String, BonePath: Array<String> = definedExternally): `T$85`
    open fun GetAnimationNotifyEventNames(EventNames: Array<String> = definedExternally): `T$86`
    open fun GetAnimationNotifyEvents(NotifyEvents: Array<AnimNotifyEvent> = definedExternally): `T$87`
    open fun GetAnimationNotifyEventsForTrack(NotifyTrackName: String, Events: Array<AnimNotifyEvent> = definedExternally): `T$88`
    open fun GetAnimationNotifyTrackNames(TrackNames: Array<String> = definedExternally): `T$89`
    open fun GetAnimationTrackNames(TrackNames: Array<String> = definedExternally): `T$90`
    open fun GetBonePoseForFrame(BoneName: String, Frame: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$91`
    open fun GetBonePoseForTime(BoneName: String, Time: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$91`
    open fun GetBonePosesForFrame(BoneNames: Array<String>, Frame: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$92`
    open fun GetBonePosesForTime(BoneNames: Array<String>, Time: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$93`
    open fun GetFrameAtTime(Time: Number, Frame: Number = definedExternally): `T$94`
    open fun GetNumFrames(NumFrames: Number = definedExternally): `T$95`
    open fun GetNumKeys(NumKeys: Number = definedExternally): `T$96`
    open fun GetRateScale(RateScale: Number = definedExternally): `T$97`
    open fun GetRawTrackData(TrackName: String, PositionKeys: Array<Vector> = definedExternally, RotationKeys: Array<Quat> = definedExternally, ScalingKeys: Array<Vector> = definedExternally): `T$98`
    open fun GetRawTrackPositionData(TrackName: String, PositionData: Array<Vector> = definedExternally): `T$99`
    open fun GetRawTrackRotationData(TrackName: String, RotationData: Array<Quat> = definedExternally): `T$100`
    open fun GetRawTrackScaleData(TrackName: String, ScaleData: Array<Vector> = definedExternally): `T$101`
    open fun GetSequenceLength(Length: Number = definedExternally): `T$102`
    open fun GetTimeAtFrame(Frame: Number, Time: Number = definedExternally): `T$103`
    open fun IsValidAnimNotifyTrackName(NotifyTrackName: String): Boolean
    open fun IsValidRawAnimationTrackName(TrackName: String): Boolean
    open fun IsValidTime(Time: Number, IsValid: Boolean = definedExternally): `T$104`
    open fun RemoveAllAnimationNotifyTracks()
    open fun RemoveAnimationNotifyEventsByName(NotifyName: String): Number
    open fun RemoveAnimationNotifyEventsByTrack(NotifyTrackName: String): Number
    open fun RemoveAnimationNotifyTrack(NotifyTrackName: String)
    open fun ReplaceAnimNotifies(OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyReplaced: UnrealEngineDelegate<(OldNotify: AnimNotify, NewNotify: AnimNotify) -> Unit>)
    open fun ReplaceAnimNotifyStates(OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyStateReplaced: UnrealEngineDelegate<(OldNotifyState: AnimNotifyState, NewNotifyState: AnimNotifyState) -> Unit>)
    open fun SetRateScale(RateScale: Number)

    companion object {
        fun Load(ResourceName: String): AnimSequenceBase
        fun Find(Outer: UObject, ResourceName: String): AnimSequenceBase
        fun GetDefaultObject(): AnimSequenceBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimSequenceBase
        fun C(Other: UObject): AnimSequenceBase
        fun C(Other: Any): AnimSequenceBase
        fun ReplaceAnimNotifyClass(Sequence: AnimSequenceBase, NotifyName: String, NewNotifyName: String, NewNotifyClass: UObject): Number
        fun AddTransformAttribute(AnimSequenceBase: AnimSequenceBase, AttributeName: String, BoneName: String, Keys: Array<Number>, Values: Array<Transform>): Boolean
        fun GetAnimPoseAtFrame(AnimationSequenceBase: AnimSequenceBase, FrameIndex: Number, EvaluationOptions: AnimPoseEvaluationOptions, Pose: AnimPose = definedExternally): `T$83`
        fun GetAnimPoseAtTime(AnimationSequenceBase: AnimSequenceBase, Time: Number, EvaluationOptions: AnimPoseEvaluationOptions, Pose: AnimPose = definedExternally): `T$83`
        fun AddAnimationNotifyEvent(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String, StartTime: Number, NotifyClass: UnrealEngineClass): AnimNotify
        fun AddAnimationNotifyEventObject(AnimationSequenceBase: AnimSequenceBase, StartTime: Number, Notify: AnimNotify, NotifyTrackName: String)
        fun AddAnimationNotifyStateEvent(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String, StartTime: Number, Duration: Number, NotifyStateClass: UnrealEngineClass): AnimNotifyState
        fun AddAnimationNotifyStateEventObject(AnimationSequenceBase: AnimSequenceBase, StartTime: Number, Duration: Number, NotifyState: AnimNotifyState, NotifyTrackName: String)
        fun AddAnimationNotifyTrack(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String, TrackColor: LinearColor)
        fun CopyAnimNotifiesFromSequence(SourceAnimationSequenceBase: AnimSequenceBase, DestinationAnimationSequenceBase: AnimSequenceBase, bDeleteExistingNotifies: Boolean)
        fun EvaluateRootBoneTimecodeAttributesAtTime(AnimationSequenceBase: AnimSequenceBase, EvalTime: Number, OutQualifiedFrameTime: QualifiedFrameTime = definedExternally): `T$84`
        fun FindBonePathToRoot(AnimationSequenceBase: AnimSequenceBase, BoneName: String, BonePath: Array<String> = definedExternally): `T$105`
        fun GetAnimationNotifyEventNames(AnimationSequenceBase: AnimSequenceBase, EventNames: Array<String> = definedExternally): `T$106`
        fun GetAnimationNotifyEvents(AnimationSequenceBase: AnimSequenceBase, NotifyEvents: Array<AnimNotifyEvent> = definedExternally): `T$107`
        fun GetAnimationNotifyEventsForTrack(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String, Events: Array<AnimNotifyEvent> = definedExternally): `T$108`
        fun GetAnimationNotifyTrackNames(AnimationSequenceBase: AnimSequenceBase, TrackNames: Array<String> = definedExternally): `T$109`
        fun GetAnimationTrackNames(AnimationSequenceBase: AnimSequenceBase, TrackNames: Array<String> = definedExternally): `T$110`
        fun GetBonePoseForFrame(AnimationSequenceBase: AnimSequenceBase, BoneName: String, Frame: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$91`
        fun GetBonePoseForTime(AnimationSequenceBase: AnimSequenceBase, BoneName: String, Time: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$91`
        fun GetBonePosesForFrame(AnimationSequenceBase: AnimSequenceBase, BoneNames: Array<String>, Frame: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$111`
        fun GetBonePosesForTime(AnimationSequenceBase: AnimSequenceBase, BoneNames: Array<String>, Time: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$112`
        fun GetFrameAtTime(AnimationSequenceBase: AnimSequenceBase, Time: Number, Frame: Number = definedExternally): `T$94`
        fun GetNumFrames(AnimationSequenceBase: AnimSequenceBase, NumFrames: Number = definedExternally): `T$95`
        fun GetNumKeys(AnimationSequenceBase: AnimSequenceBase, NumKeys: Number = definedExternally): `T$96`
        fun GetRateScale(AnimationSequenceBase: AnimSequenceBase, RateScale: Number = definedExternally): `T$97`
        fun GetRawTrackData(AnimationSequenceBase: AnimSequenceBase, TrackName: String, PositionKeys: Array<Vector> = definedExternally, RotationKeys: Array<Quat> = definedExternally, ScalingKeys: Array<Vector> = definedExternally): `T$113`
        fun GetRawTrackPositionData(AnimationSequenceBase: AnimSequenceBase, TrackName: String, PositionData: Array<Vector> = definedExternally): `T$114`
        fun GetRawTrackRotationData(AnimationSequenceBase: AnimSequenceBase, TrackName: String, RotationData: Array<Quat> = definedExternally): `T$115`
        fun GetRawTrackScaleData(AnimationSequenceBase: AnimSequenceBase, TrackName: String, ScaleData: Array<Vector> = definedExternally): `T$116`
        fun GetSequenceLength(AnimationSequenceBase: AnimSequenceBase, Length: Number = definedExternally): `T$102`
        fun GetTimeAtFrame(AnimationSequenceBase: AnimSequenceBase, Frame: Number, Time: Number = definedExternally): `T$103`
        fun IsValidAnimNotifyTrackName(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String): Boolean
        fun IsValidRawAnimationTrackName(AnimationSequenceBase: AnimSequenceBase, TrackName: String): Boolean
        fun IsValidTime(AnimationSequenceBase: AnimSequenceBase, Time: Number, IsValid: Boolean = definedExternally): `T$104`
        fun RemoveAllAnimationNotifyTracks(AnimationSequenceBase: AnimSequenceBase)
        fun RemoveAnimationNotifyEventsByName(AnimationSequenceBase: AnimSequenceBase, NotifyName: String): Number
        fun RemoveAnimationNotifyEventsByTrack(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String): Number
        fun RemoveAnimationNotifyTrack(AnimationSequenceBase: AnimSequenceBase, NotifyTrackName: String)
        fun ReplaceAnimNotifies(AnimationSequenceBase: AnimSequenceBase, OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyReplaced: UnrealEngineDelegate<(OldNotify: AnimNotify, NewNotify: AnimNotify) -> Unit>)
        fun ReplaceAnimNotifyStates(AnimationSequenceBase: AnimSequenceBase, OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyStateReplaced: UnrealEngineDelegate<(OldNotifyState: AnimNotifyState, NewNotifyState: AnimNotifyState) -> Unit>)
        fun SetRateScale(AnimationSequenceBase: AnimSequenceBase, RateScale: Number)
    }
}

external open class AnimBoneCompressionCodec : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Description: String

    companion object {
        fun Load(ResourceName: String): AnimBoneCompressionCodec
        fun Find(Outer: UObject, ResourceName: String): AnimBoneCompressionCodec
        fun GetDefaultObject(): AnimBoneCompressionCodec
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimBoneCompressionCodec
        fun C(Other: UObject): AnimBoneCompressionCodec
        fun C(Other: Any): AnimBoneCompressionCodec
    }
}

external open class AnimBoneCompressionSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Codecs: Array<AnimBoneCompressionCodec>
    open var ErrorThreshold: Number
    open var bForceBelowThreshold: Boolean

    companion object {
        fun Load(ResourceName: String): AnimBoneCompressionSettings
        fun Find(Outer: UObject, ResourceName: String): AnimBoneCompressionSettings
        fun GetDefaultObject(): AnimBoneCompressionSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimBoneCompressionSettings
        fun C(Other: UObject): AnimBoneCompressionSettings
        fun C(Other: Any): AnimBoneCompressionSettings
    }
}

external open class AnimCurveCompressionCodec : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AnimCurveCompressionCodec
        fun Find(Outer: UObject, ResourceName: String): AnimCurveCompressionCodec
        fun GetDefaultObject(): AnimCurveCompressionCodec
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCurveCompressionCodec
        fun C(Other: UObject): AnimCurveCompressionCodec
        fun C(Other: Any): AnimCurveCompressionCodec
    }
}

external open class AnimCurveCompressionSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Codec: AnimCurveCompressionCodec

    companion object {
        fun Load(ResourceName: String): AnimCurveCompressionSettings
        fun Find(Outer: UObject, ResourceName: String): AnimCurveCompressionSettings
        fun GetDefaultObject(): AnimCurveCompressionSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCurveCompressionSettings
        fun C(Other: UObject): AnimCurveCompressionSettings
        fun C(Other: Any): AnimCurveCompressionSettings
    }
}

external object EAdditiveAnimationType {
    var AAT_None: String /* "AAT_None" */
    var AAT_LocalSpaceBase: String /* "AAT_LocalSpaceBase" */
    var AAT_RotationOffsetMeshSpace: String /* "AAT_RotationOffsetMeshSpace" */
    var AAT_MAX: String /* "AAT_MAX" */
}

external object EAdditiveBasePoseType {
    var ABPT_None: String /* "ABPT_None" */
    var ABPT_RefPose: String /* "ABPT_RefPose" */
    var ABPT_AnimScaled: String /* "ABPT_AnimScaled" */
    var ABPT_AnimFrame: String /* "ABPT_AnimFrame" */
    var ABPT_LocalAnimFrame: String /* "ABPT_LocalAnimFrame" */
    var ABPT_MAX: String /* "ABPT_MAX" */
}

external object EAnimInterpolationType {
    var Linear: String /* "Linear" */
    var Step: String /* "Step" */
    var EAnimInterpolationType_MAX: String /* "EAnimInterpolationType_MAX" */
}

external open class CustomAttribute {
    open var Name: String
    open var VariantType: Number
    open var Times: Array<Number>
    open fun clone(): CustomAttribute

    companion object {
        fun C(Other: UObject): CustomAttribute
        fun C(Other: Any): CustomAttribute
    }
}

external open class CustomAttributePerBoneData {
    open var BoneTreeIndex: Number
    open var Attributes: Array<CustomAttribute>
    open fun clone(): CustomAttributePerBoneData

    companion object {
        fun C(Other: UObject): CustomAttributePerBoneData
        fun C(Other: Any): CustomAttributePerBoneData
    }
}

external interface `T$117` {
    var VirtualBoneName: String
}

external interface `T$118` {
    var bExists: Boolean
}

external interface `T$119` {
    var AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */
}

external interface `T$120` {
    var AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_LocalAnimFrame" | "ABPT_MAX" */
}

external interface `T$121` {
    var CurveNames: Array<String>
}

external interface `T$122` {
    var InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */
}

external interface `T$123` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$124` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$125` {
    var CompressionSettings: AnimBoneCompressionSettings
}

external interface `T$126` {
    var CompressionSettings: AnimCurveCompressionSettings
}

external interface `T$127` {
    var Times: Array<Number>
    var Values: Array<Number>
}

external interface `T$128` {
    var LockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */
}

external interface `T$129` {
    var Times: Array<Number>
    var Values: Array<Transform>
}

external interface `T$130` {
    var MarkerNames: Array<String>
}

external interface `T$131` {
    var Times: Array<Number>
    var Values: Array<Vector>
}

external interface `T$132` {
    var CurveNames: Array<String>
}

external interface `T$133` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$134` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$135` {
    var Times: Array<Number>
    var Values: Array<Number>
}

external interface `T$136` {
    var Times: Array<Number>
    var Values: Array<Transform>
}

external interface `T$137` {
    var MarkerNames: Array<String>
}

external interface `T$138` {
    var Times: Array<Number>
    var Values: Array<Vector>
}

external open class AnimSequence : AnimSequenceBase {
    constructor()
    constructor(Outer: UObject)
    open var ImportFileFramerate: Number
    open var ImportResampleFramerate: Number
    open var NumFrames: Number
    open var NumberOfKeys: Number
    open var SamplingFrameRate: FrameRate
    open var TrackToSkeletonMapTable: Array<TrackToSkeletonMap>
    open var RawDataGuid: Guid
    open var AnimationTrackNames: Array<String>
    open var bAllowFrameStripping: Boolean
    open var CompressionErrorThresholdScale: Number
    open var BoneCompressionSettings: AnimBoneCompressionSettings
    open var CurveCompressionSettings: AnimCurveCompressionSettings
    open var AdditiveAnimType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */
    open var RefPoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_LocalAnimFrame" | "ABPT_MAX" */
    open var RefFrameIndex: Number
    open var RefPoseSeq: AnimSequence
    open var RetargetSource: String
    open var RetargetSourceAsset: SkeletalMesh
    open var RetargetSourceAssetReferencePose: Array<Transform>
    open var Interpolation: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */
    open var bEnableRootMotion: Boolean
    open var RootMotionRootLock: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */
    open var bForceRootLock: Boolean
    open var bUseNormalizedRootMotionScale: Boolean
    open var bRootMotionSettingsCopiedFromMontage: Boolean
    open var CompressCommandletVersion: Number
    open var bDoNotOverrideCompression: Boolean
    open var AssetImportData: AssetImportData
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var bNeedsRebake: Boolean
    open var AuthoredSyncMarkers: Array<AnimSyncMarker>
    open var TargetFrameRate: FrameRate
    open var NumberOfSampledKeys: Number
    open var NumberOfSampledFrames: Number
    open var ResampledAnimationTrackData: Array<BoneAnimationTrack>
    open var PerBoneCustomAttributeData: Array<CustomAttributePerBoneData>
    open var AttributeCurves: Any
    open fun RemoveCustomAttribute(BoneName: String, AttributeName: String)
    open fun RemoveAllCustomAttributesForBone(BoneName: String)
    open fun RemoveAllCustomAttributes()
    open fun AddBoneStringCustomAttribute(BoneName: String, AttributeName: String, TimeKeys: Array<Number>, ValueKeys: Array<String>)
    open fun AddBoneIntegerCustomAttribute(BoneName: String, AttributeName: String, TimeKeys: Array<Number>, ValueKeys: Array<Number>)
    open fun AddBoneFloatCustomAttribute(BoneName: String, AttributeName: String, TimeKeys: Array<Number>, ValueKeys: Array<Number>)
    open fun AddAnimationSyncMarker(MarkerName: String, Time: Number, NotifyTrackName: String)
    open fun AddCurve(CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */, bMetaDataCurve: Boolean)
    open fun AddFloatCurveKey(CurveName: String, Time: Number, Value: Number)
    open fun AddFloatCurveKeys(CurveName: String, Times: Array<Number>, Values: Array<Number>)
    open fun AddTransformationCurveKey(CurveName: String, Time: Number, Transform: Transform)
    open fun AddTransformationCurveKeys(CurveName: String, Times: Array<Number>, Transforms: Array<Transform>)
    open fun AddVectorCurveKey(CurveName: String, Time: Number, Vector: Vector)
    open fun AddVectorCurveKeys(CurveName: String, Times: Array<Number>, Vectors: Array<Vector>)
    open fun AddVirtualBone(SourceBoneName: String, TargetBoneName: String, VirtualBoneName: String = definedExternally): `T$117`
    open fun DoesBoneNameExist(BoneName: String, bExists: Boolean = definedExternally): `T$118`
    open fun DoesCurveExist(CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): Boolean
    open fun FinalizeBoneAnimation()
    open fun GetAdditiveAnimationType(AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */ = definedExternally): `T$119`
    open fun GetAdditiveBasePoseType(AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_LocalAnimFrame" | "ABPT_MAX" */ = definedExternally): `T$120`
    open fun GetAnimationCurveNames(CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */, CurveNames: Array<String> = definedExternally): `T$121`
    open fun GetAnimationInterpolationType(InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */ = definedExternally): `T$122`
    open fun GetAnimationSyncMarkers(Markers: Array<AnimSyncMarker> = definedExternally): `T$123`
    open fun GetAnimationSyncMarkersForTrack(NotifyTrackName: String, Markers: Array<AnimSyncMarker> = definedExternally): `T$124`
    open fun GetBoneCompressionSettings(CompressionSettings: AnimBoneCompressionSettings = definedExternally): `T$125`
    open fun GetCurveCompressionSettings(CompressionSettings: AnimCurveCompressionSettings = definedExternally): `T$126`
    open fun GetFloatKeys(CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Number> = definedExternally): `T$127`
    open fun GetRootMotionLockType(LockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */ = definedExternally): `T$128`
    open fun GetTransformationKeys(CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Transform> = definedExternally): `T$129`
    open fun GetUniqueMarkerNames(MarkerNames: Array<String> = definedExternally): `T$130`
    open fun GetVectorKeys(CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Vector> = definedExternally): `T$131`
    open fun IsRootMotionEnabled(): Boolean
    open fun IsRootMotionLockForced(): Boolean
    open fun IsValidAnimationSyncMarkerName(MarkerName: String): Boolean
    open fun RemoveAllAnimationSyncMarkers()
    open fun RemoveAllBoneAnimation()
    open fun RemoveAllCurveData()
    open fun RemoveAllVirtualBones()
    open fun RemoveAnimationSyncMarkersByName(MarkerName: String): Number
    open fun RemoveAnimationSyncMarkersByTrack(NotifyTrackName: String): Number
    open fun RemoveBoneAnimation(BoneName: String, bIncludeChildren: Boolean, bFinalize: Boolean)
    open fun RemoveCurve(CurveName: String, bRemoveNameFromSkeleton: Boolean)
    open fun RemoveVirtualBone(VirtualBoneName: String)
    open fun RemoveVirtualBones(VirtualBoneNames: Array<String>)
    open fun SetAdditiveAnimationType(AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */)
    open fun SetAdditiveBasePoseType(AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_LocalAnimFrame" | "ABPT_MAX" */)
    open fun SetAnimationInterpolationType(InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */)
    open fun SetBoneCompressionSettings(CompressionSettings: AnimBoneCompressionSettings)
    open fun SetCurveCompressionSettings(CompressionSettings: AnimCurveCompressionSettings)
    open fun SetIsRootMotionLockForced(bForced: Boolean)
    open fun SetRootMotionEnabled(bEnabled: Boolean)
    open fun SetRootMotionLockType(RootMotionLockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */)

    companion object {
        fun Load(ResourceName: String): AnimSequence
        fun Find(Outer: UObject, ResourceName: String): AnimSequence
        fun GetDefaultObject(): AnimSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimSequence
        fun C(Other: UObject): AnimSequence
        fun C(Other: Any): AnimSequence
        fun AddAnimationSyncMarker(AnimationSequence: AnimSequence, MarkerName: String, Time: Number, NotifyTrackName: String)
        fun AddCurve(AnimationSequence: AnimSequence, CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */, bMetaDataCurve: Boolean)
        fun AddFloatCurveKey(AnimationSequence: AnimSequence, CurveName: String, Time: Number, Value: Number)
        fun AddFloatCurveKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number>, Values: Array<Number>)
        fun AddTransformationCurveKey(AnimationSequence: AnimSequence, CurveName: String, Time: Number, Transform: Transform)
        fun AddTransformationCurveKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number>, Transforms: Array<Transform>)
        fun AddVectorCurveKey(AnimationSequence: AnimSequence, CurveName: String, Time: Number, Vector: Vector)
        fun AddVectorCurveKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number>, Vectors: Array<Vector>)
        fun AddVirtualBone(AnimationSequence: AnimSequence, SourceBoneName: String, TargetBoneName: String, VirtualBoneName: String = definedExternally): `T$117`
        fun DoesBoneNameExist(AnimationSequence: AnimSequence, BoneName: String, bExists: Boolean = definedExternally): `T$118`
        fun DoesCurveExist(AnimationSequence: AnimSequence, CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): Boolean
        fun FinalizeBoneAnimation(AnimationSequence: AnimSequence)
        fun GetAdditiveAnimationType(AnimationSequence: AnimSequence, AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */ = definedExternally): `T$119`
        fun GetAdditiveBasePoseType(AnimationSequence: AnimSequence, AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_LocalAnimFrame" | "ABPT_MAX" */ = definedExternally): `T$120`
        fun GetAnimationCurveNames(AnimationSequence: AnimSequence, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */, CurveNames: Array<String> = definedExternally): `T$132`
        fun GetAnimationInterpolationType(AnimationSequence: AnimSequence, InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */ = definedExternally): `T$122`
        fun GetAnimationSyncMarkers(AnimationSequence: AnimSequence, Markers: Array<AnimSyncMarker> = definedExternally): `T$133`
        fun GetAnimationSyncMarkersForTrack(AnimationSequence: AnimSequence, NotifyTrackName: String, Markers: Array<AnimSyncMarker> = definedExternally): `T$134`
        fun GetBoneCompressionSettings(AnimationSequence: AnimSequence, CompressionSettings: AnimBoneCompressionSettings = definedExternally): `T$125`
        fun GetCurveCompressionSettings(AnimationSequence: AnimSequence, CompressionSettings: AnimCurveCompressionSettings = definedExternally): `T$126`
        fun GetFloatKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Number> = definedExternally): `T$135`
        fun GetRootMotionLockType(AnimationSequence: AnimSequence, LockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */ = definedExternally): `T$128`
        fun GetTransformationKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Transform> = definedExternally): `T$136`
        fun GetUniqueMarkerNames(AnimationSequence: AnimSequence, MarkerNames: Array<String> = definedExternally): `T$137`
        fun GetVectorKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Vector> = definedExternally): `T$138`
        fun IsRootMotionEnabled(AnimationSequence: AnimSequence): Boolean
        fun IsRootMotionLockForced(AnimationSequence: AnimSequence): Boolean
        fun IsValidAnimationSyncMarkerName(AnimationSequence: AnimSequence, MarkerName: String): Boolean
        fun RemoveAllAnimationSyncMarkers(AnimationSequence: AnimSequence)
        fun RemoveAllBoneAnimation(AnimationSequence: AnimSequence)
        fun RemoveAllCurveData(AnimationSequence: AnimSequence)
        fun RemoveAllVirtualBones(AnimationSequence: AnimSequence)
        fun RemoveAnimationSyncMarkersByName(AnimationSequence: AnimSequence, MarkerName: String): Number
        fun RemoveAnimationSyncMarkersByTrack(AnimationSequence: AnimSequence, NotifyTrackName: String): Number
        fun RemoveBoneAnimation(AnimationSequence: AnimSequence, BoneName: String, bIncludeChildren: Boolean, bFinalize: Boolean)
        fun RemoveCurve(AnimationSequence: AnimSequence, CurveName: String, bRemoveNameFromSkeleton: Boolean)
        fun RemoveVirtualBone(AnimationSequence: AnimSequence, VirtualBoneName: String)
        fun RemoveVirtualBones(AnimationSequence: AnimSequence, VirtualBoneNames: Array<String>)
        fun SetAdditiveAnimationType(AnimationSequence: AnimSequence, AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */)
        fun SetAdditiveBasePoseType(AnimationSequence: AnimSequence, AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_LocalAnimFrame" | "ABPT_MAX" */)
        fun SetAnimationInterpolationType(AnimationSequence: AnimSequence, InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */)
        fun SetBoneCompressionSettings(AnimationSequence: AnimSequence, CompressionSettings: AnimBoneCompressionSettings)
        fun SetCurveCompressionSettings(AnimationSequence: AnimSequence, CompressionSettings: AnimCurveCompressionSettings)
        fun SetIsRootMotionLockForced(AnimationSequence: AnimSequence, bForced: Boolean)
        fun SetRootMotionEnabled(AnimationSequence: AnimSequence, bEnabled: Boolean)
        fun SetRootMotionLockType(AnimationSequence: AnimSequence, RootMotionLockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */)
    }
}

external interface `T$139` {
    var PoseNames: Array<String>
}

external open class PoseAsset : AnimationAsset {
    constructor()
    constructor(Outer: UObject)
    open var PoseContainer: PoseDataContainer
    open var bAdditivePose: Boolean
    open var BasePoseIndex: Number
    open var RetargetSource: String
    open var RetargetSourceAsset: SkeletalMesh
    open var RetargetSourceAssetReferencePose: Array<Transform>
    open var SourceAnimation: AnimSequence
    open var SourceAnimationRawDataGUID: Guid
    open fun UpdatePoseFromAnimation(AnimSequence: AnimSequence)
    open fun RenamePose(OriginalPoseName: String, NewPoseName: String)
    open fun GetPoseNames(PoseNames: Array<String> = definedExternally): `T$139`

    companion object {
        fun Load(ResourceName: String): PoseAsset
        fun Find(Outer: UObject, ResourceName: String): PoseAsset
        fun GetDefaultObject(): PoseAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PoseAsset
        fun C(Other: UObject): PoseAsset
        fun C(Other: Any): PoseAsset
    }
}

external interface `T$140` {
    var MetaDataInstance: AnimMetaData
}

external interface `T$141` {
    var MetaData: Array<AnimMetaData>
}

external interface `T$142` {
    var MetaDataOfClass: Array<AnimMetaData>
}

external interface `T$143` {
    var MetaData: Array<AnimMetaData>
}

external interface `T$144` {
    var MetaDataOfClass: Array<AnimMetaData>
}

external open class AnimationAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Skeleton: Skeleton
    open var MetaData: Array<AnimMetaData>
    open var ParentAsset: AnimationAsset
    open var ChildrenAssets: Array<AnimationAsset>
    open var AssetMappingTable: AssetMappingTable
    open var AssetUserData: Array<AssetUserData>
    open var ThumbnailInfo: ThumbnailInfo
    open var PreviewPoseAsset: PoseAsset
    open var PreviewSkeletalMesh: SkeletalMesh
    open fun SetPreviewSkeletalMesh(PreviewMesh: SkeletalMesh)
    open fun GetPlayLength(): Number
    open fun CreateAttributeIdentifier(AttributeName: String, BoneName: String, AttributeType: ScriptStruct, bValidateExistsOnAsset: Boolean): AnimationAttributeIdentifier
    open fun GetSkeleton(): Skeleton
    open fun AddMetaData(MetaDataClass: UnrealEngineClass, MetaDataInstance: AnimMetaData = definedExternally): `T$140`
    open fun AddMetaDataObject(MetaDataObject: AnimMetaData)
    open fun ContainsMetaDataOfClass(MetaDataClass: UnrealEngineClass): Boolean
    open fun GetMetaData(MetaData: Array<AnimMetaData> = definedExternally): `T$141`
    open fun GetMetaDataOfClass(MetaDataClass: UnrealEngineClass, MetaDataOfClass: Array<AnimMetaData> = definedExternally): `T$142`
    open fun RemoveAllMetaData()
    open fun RemoveMetaData(MetaDataObject: AnimMetaData)
    open fun RemoveMetaDataOfClass(MetaDataClass: UnrealEngineClass)

    companion object {
        fun Load(ResourceName: String): AnimationAsset
        fun Find(Outer: UObject, ResourceName: String): AnimationAsset
        fun GetDefaultObject(): AnimationAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimationAsset
        fun C(Other: UObject): AnimationAsset
        fun C(Other: Any): AnimationAsset
        fun CreateAttributeIdentifier(AnimationAsset: AnimationAsset, AttributeName: String, BoneName: String, AttributeType: ScriptStruct, bValidateExistsOnAsset: Boolean): AnimationAttributeIdentifier
        fun GetSkeleton(InAsset: AnimationAsset): Skeleton
        fun AddMetaData(AnimationAsset: AnimationAsset, MetaDataClass: UnrealEngineClass, MetaDataInstance: AnimMetaData = definedExternally): `T$140`
        fun AddMetaDataObject(AnimationAsset: AnimationAsset, MetaDataObject: AnimMetaData)
        fun ContainsMetaDataOfClass(AnimationAsset: AnimationAsset, MetaDataClass: UnrealEngineClass): Boolean
        fun GetMetaData(AnimationAsset: AnimationAsset, MetaData: Array<AnimMetaData> = definedExternally): `T$143`
        fun GetMetaDataOfClass(AnimationAsset: AnimationAsset, MetaDataClass: UnrealEngineClass, MetaDataOfClass: Array<AnimMetaData> = definedExternally): `T$144`
        fun RemoveAllMetaData(AnimationAsset: AnimationAsset)
        fun RemoveMetaData(AnimationAsset: AnimationAsset, MetaDataObject: AnimMetaData)
        fun RemoveMetaDataOfClass(AnimationAsset: AnimationAsset, MetaDataClass: UnrealEngineClass)
    }
}

external open class AnimParentNodeAssetOverride {
    open var NewAsset: AnimationAsset
    open var ParentNodeGuid: Guid
    open fun clone(): AnimParentNodeAssetOverride

    companion object {
        fun C(Other: UObject): AnimParentNodeAssetOverride
        fun C(Other: Any): AnimParentNodeAssetOverride
    }
}

external open class PoseWatchFolder : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Label: String
    open var Parent: Any
    open var bIsVisible: Boolean
    open var bIsExpanded: Boolean

    companion object {
        fun Load(ResourceName: String): PoseWatchFolder
        fun Find(Outer: UObject, ResourceName: String): PoseWatchFolder
        fun GetDefaultObject(): PoseWatchFolder
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PoseWatchFolder
        fun C(Other: UObject): PoseWatchFolder
        fun C(Other: Any): PoseWatchFolder
    }
}

external open class PoseWatch : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UNode: Any
    open var bDeleteOnDeselection: Boolean
    open var bIsVisible: Boolean
    open var bIsEnabled: Boolean
    open var Color: Color
    open var Label: String
    open var Parent: Any

    companion object {
        fun Load(ResourceName: String): PoseWatch
        fun Find(Outer: UObject, ResourceName: String): PoseWatch
        fun GetDefaultObject(): PoseWatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PoseWatch
        fun C(Other: UObject): PoseWatch
        fun C(Other: Any): PoseWatch
    }
}

external object EPreviewAnimationBlueprintApplicationMethod {
    var LinkedLayers: String /* "LinkedLayers" */
    var LinkedAnimGraph: String /* "LinkedAnimGraph" */
    var EPreviewAnimationBlueprintApplicationMethod_MAX: String /* "EPreviewAnimationBlueprintApplicationMethod_MAX" */
}

external open class EdGraphSchema : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun SetNodeMetaData(UNode: EdGraphNode, KeyValue: String): Boolean
    open fun TryConnection(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin): Boolean

    companion object {
        fun Load(ResourceName: String): EdGraphSchema
        fun Find(Outer: UObject, ResourceName: String): EdGraphSchema
        fun GetDefaultObject(): EdGraphSchema
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraphSchema
        fun C(Other: UObject): EdGraphSchema
        fun C(Other: Any): EdGraphSchema
        fun SetNodeMetaData(Schema: EdGraphSchema, UNode: EdGraphNode, KeyValue: String): Boolean
        fun TryConnection(Schema: EdGraphSchema, A: JavascriptEdGraphPin, B: JavascriptEdGraphPin): Boolean
    }
}

external open class EdGraph : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Schema: UnrealEngineClass
    open var Nodes: Array<EdGraphNode>
    open var bEditable: Boolean
    open var bAllowDeletion: Boolean
    open var bAllowRenaming: Boolean
    open var SubGraphs: Array<EdGraph>
    open var GraphGuid: Guid
    open var InterfaceGuid: Guid
    open fun RenameGraph(NewNameStr: String)

    companion object {
        fun Load(ResourceName: String): EdGraph
        fun Find(Outer: UObject, ResourceName: String): EdGraph
        fun GetDefaultObject(): EdGraph
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraph
        fun C(Other: UObject): EdGraph
        fun C(Other: Any): EdGraph
        fun RenameGraph(Graph: EdGraph, NewNameStr: String)
    }
}

external open class AnimGraphBlendOptions {
    open var BlendInTime: Number
    open var BlendOutTime: Number
    open fun clone(): AnimGraphBlendOptions

    companion object {
        fun C(Other: UObject): AnimGraphBlendOptions
        fun C(Other: Any): AnimGraphBlendOptions
    }
}

external open class K2Node : EdGraphNode {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): K2Node
        fun Find(Outer: UObject, ResourceName: String): K2Node
        fun GetDefaultObject(): K2Node
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): K2Node
        fun C(Other: UObject): K2Node
        fun C(Other: Any): K2Node
    }
}

external open class OptionalPinFromProperty {
    open var PropertyName: String
    open var PropertyFriendlyName: String
    open var PropertyTooltip: String
    open var CategoryName: String
    open var bShowPin: Boolean
    open var bCanToggleVisibility: Boolean
    open var bPropertyIsCustomized: Boolean
    open var bHasOverridePin: Boolean
    open var bIsMarkedForAdvancedDisplay: Boolean
    open var bIsOverrideEnabled: Boolean
    open var bIsSetValuePinVisible: Boolean
    open var bIsOverridePinVisible: Boolean
    open fun clone(): OptionalPinFromProperty

    companion object {
        fun C(Other: UObject): OptionalPinFromProperty
        fun C(Other: Any): OptionalPinFromProperty
    }
}

external object EBlueprintUsage {
    var NoProperties: String /* "NoProperties" */
    var DoesNotUseBlueprint: String /* "DoesNotUseBlueprint" */
    var UsesBlueprint: String /* "UsesBlueprint" */
    var EBlueprintUsage_MAX: String /* "EBlueprintUsage_MAX" */
}

external open class MemberReference {
    open var MemberParent: UObject
    open var MemberScope: String
    open var MemberName: String
    open var MemberGuid: Guid
    open var bSelfContext: Boolean
    open var bWasDeprecated: Boolean
    open fun clone(): MemberReference

    companion object {
        fun C(Other: UObject): MemberReference
        fun C(Other: Any): MemberReference
    }
}

external open class AnimGraphNode_Base : K2Node {
    constructor()
    constructor(Outer: UObject)
    open var ShowPinForProperties: Array<OptionalPinFromProperty>
    open var PropertyBindings: Any
    open var AlwaysDynamicProperties: Any
    open var BlueprintUsage: String /* "NoProperties" | "DoesNotUseBlueprint" | "UsesBlueprint" | "EBlueprintUsage_MAX" */
    open var InitialUpdateFunction: MemberReference
    open var BecomeRelevantFunction: MemberReference
    open var UpdateFunction: MemberReference
    open var Tag: String

    companion object {
        fun Load(ResourceName: String): AnimGraphNode_Base
        fun Find(Outer: UObject, ResourceName: String): AnimGraphNode_Base
        fun GetDefaultObject(): AnimGraphNode_Base
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimGraphNode_Base
        fun C(Other: UObject): AnimGraphNode_Base
        fun C(Other: Any): AnimGraphNode_Base
    }
}

external interface `T$145` {
    var GraphNodes: Array<AnimGraphNode_Base>
}

external open class AnimationGraph : EdGraph {
    constructor()
    constructor(Outer: UObject)
    open var BlendOptions: AnimGraphBlendOptions
    open fun GetGraphNodesOfClass(NodeClass: UnrealEngineClass, GraphNodes: Array<AnimGraphNode_Base> = definedExternally, bIncludeChildClasses: Boolean = definedExternally): `T$145`

    companion object {
        fun Load(ResourceName: String): AnimationGraph
        fun Find(Outer: UObject, ResourceName: String): AnimationGraph
        fun GetDefaultObject(): AnimationGraph
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimationGraph
        fun C(Other: UObject): AnimationGraph
        fun C(Other: Any): AnimationGraph
    }
}

external interface `T$146` {
    var AnimationGraphs: Array<AnimationGraph>
}

external interface `T$147` {
    var GraphNodes: Array<AnimGraphNode_Base>
}

external interface `T$148` {
    var AnimationGraphs: Array<AnimationGraph>
}

external interface `T$149` {
    var GraphNodes: Array<AnimGraphNode_Base>
}

external open class AnimBlueprint : Blueprint {
    constructor()
    constructor(Outer: UObject)
    open var TargetSkeleton: Skeleton
    open var Groups: Array<AnimGroupInfo>
    open var bIsTemplate: Boolean
    open var bUseMultiThreadedAnimationUpdate: Boolean
    open var bWarnAboutBlueprintUsage: Boolean
    open var ParentAssetOverrides: Array<AnimParentNodeAssetOverride>
    open var PoseWatchFolders: Array<PoseWatchFolder>
    open var PoseWatches: Array<PoseWatch>
    open var PreviewSkeletalMesh: SkeletalMesh
    open var PreviewAnimationBlueprint: AnimBlueprint
    open var PreviewAnimationBlueprintApplicationMethod: String /* "LinkedLayers" | "LinkedAnimGraph" | "EPreviewAnimationBlueprintApplicationMethod_MAX" */
    open var PreviewAnimationBlueprintTag: String
    open fun GetAnimationGraphs(AnimationGraphs: Array<AnimationGraph> = definedExternally): `T$146`
    open fun GetNodesOfClass(NodeClass: UnrealEngineClass, GraphNodes: Array<AnimGraphNode_Base> = definedExternally, bIncludeChildClasses: Boolean = definedExternally): `T$147`

    companion object {
        fun Load(ResourceName: String): AnimBlueprint
        fun Find(Outer: UObject, ResourceName: String): AnimBlueprint
        fun GetDefaultObject(): AnimBlueprint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimBlueprint
        fun C(Other: UObject): AnimBlueprint
        fun C(Other: Any): AnimBlueprint
        fun GetAnimationGraphs(AnimationBlueprint: AnimBlueprint, AnimationGraphs: Array<AnimationGraph> = definedExternally): `T$148`
        fun GetNodesOfClass(AnimationBlueprint: AnimBlueprint, NodeClass: UnrealEngineClass, GraphNodes: Array<AnimGraphNode_Base> = definedExternally, bIncludeChildClasses: Boolean = definedExternally): `T$149`
    }
}

external object EAnimPoseSpaces {
    var Local: String /* "Local" */
    var World: String /* "World" */
    var EAnimPoseSpaces_MAX: String /* "EAnimPoseSpaces_MAX" */
}

external interface `T$150` {
    var OutPose: AnimPose
}

external interface `T$151` {
    var Bones: Array<String>
}

external interface `T$152` {
    var Bones: Array<String>
}

external open class AnimPose {
    open var BoneNames: Array<String>
    open var BoneIndices: Array<Number>
    open var ParentBoneIndices: Array<Number>
    open var LocalSpacePoses: Array<Transform>
    open var WorldSpacePoses: Array<Transform>
    open var RefLocalSpacePoses: Array<Transform>
    open var RefWorldSpacePoses: Array<Transform>
    open fun clone(): AnimPose
    open fun EvaluateAnimationBlueprintWithInputPose(TargetSkeletalMesh: SkeletalMesh, AnimationBlueprint: AnimBlueprint, OutPose: AnimPose = definedExternally): `T$150`
    open fun GetBoneNames(Bones: Array<String> = definedExternally): `T$151`
    open fun GetBonePose(BoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
    open fun GetRefBonePose(BoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
    open fun GetRefPoseRelativeTransform(FromBoneName: String, ToBoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
    open fun GetRelativeToRefPoseTransform(BoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
    open fun GetRelativeTransform(FromBoneName: String, ToBoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
    open fun IsValid(): Boolean
    open fun SetBonePose(Transform: Transform = definedExternally, BoneName: String = definedExternally, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */ = definedExternally): `T$83`

    companion object {
        fun C(Other: UObject): AnimPose
        fun C(Other: Any): AnimPose
        fun EvaluateAnimationBlueprintWithInputPose(InputPose: AnimPose, TargetSkeletalMesh: SkeletalMesh, AnimationBlueprint: AnimBlueprint, OutPose: AnimPose = definedExternally): `T$150`
        fun GetBoneNames(Pose: AnimPose, Bones: Array<String> = definedExternally): `T$152`
        fun GetBonePose(Pose: AnimPose, BoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
        fun GetRefBonePose(Pose: AnimPose, BoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
        fun GetRefPoseRelativeTransform(Pose: AnimPose, FromBoneName: String, ToBoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
        fun GetRelativeToRefPoseTransform(Pose: AnimPose, BoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
        fun GetRelativeTransform(Pose: AnimPose, FromBoneName: String, ToBoneName: String, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */): Transform
        fun IsValid(Pose: AnimPose): Boolean
        fun SetBonePose(Pose: AnimPose = definedExternally, Transform: Transform = definedExternally, BoneName: String = definedExternally, Space: String /* "Local" | "World" | "EAnimPoseSpaces_MAX" */ = definedExternally): `T$83`
    }
}

external open class Skeleton : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BoneTree: Array<BoneNode>
    open var RefLocalPoses: Array<Transform>
    open var VirtualBoneGuid: Guid
    open var VirtualBones: Array<VirtualBone>
    open var CompatibleSkeletons: Array<Skeleton>
    open var Sockets: Array<SkeletalMeshSocket>
    open var SmartNames: SmartNameContainer
    open var BlendProfiles: Array<BlendProfile>
    open var SlotGroups: Array<AnimSlotGroup>
    open var PreviewSkeletalMesh: SkeletalMesh
    open var AdditionalPreviewSkeletalMeshes: DataAsset
    open var RigConfig: RigConfiguration
    open var AnimationNotifies: Array<String>
    open var PreviewAttachedAssetContainer: PreviewAssetAttachContainer
    open var AssetUserData: Array<AssetUserData>
    open fun GetBlendProfile(InProfileName: String): BlendProfile
    open fun AddCompatibleSkeleton(SourceSkeleton: Skeleton)
    open fun FindCurveIdentifier(Name: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): AnimationCurveIdentifier
    open fun GetCurveIdentifier(Name: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): AnimationCurveIdentifier
    open fun GetCurveIdentifiers(CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): Array<AnimationCurveIdentifier>
    open fun GetReferencePose(OutPose: AnimPose = definedExternally): `T$150`
    open fun CopyAnimationCurveNamesToSkeleton(NewSkeleton: Skeleton, SequenceBase: AnimSequenceBase, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */)

    companion object {
        fun Load(ResourceName: String): Skeleton
        fun Find(Outer: UObject, ResourceName: String): Skeleton
        fun GetDefaultObject(): Skeleton
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Skeleton
        fun C(Other: UObject): Skeleton
        fun C(Other: Any): Skeleton
        fun FindCurveIdentifier(InSkeleton: Skeleton, Name: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): AnimationCurveIdentifier
        fun GetCurveIdentifier(InSkeleton: Skeleton, Name: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): AnimationCurveIdentifier
        fun GetCurveIdentifiers(InSkeleton: Skeleton, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): Array<AnimationCurveIdentifier>
        fun GetReferencePose(Skeleton: Skeleton, OutPose: AnimPose = definedExternally): `T$150`
        fun CopyAnimationCurveNamesToSkeleton(OldSkeleton: Skeleton, NewSkeleton: Skeleton, SequenceBase: AnimSequenceBase, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */)
    }
}

external interface `T$153` {
    var Origin: Vector
    var BoxExtent: Vector
    var SphereRadius: Number
}

external open class BoxSphereBounds {
    open var Origin: Vector
    open var BoxExtent: Vector
    open var SphereRadius: Any
    open fun clone(): BoxSphereBounds
    open fun BreakBoxSphereBounds(Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally, SphereRadius: Number = definedExternally): `T$153`

    companion object {
        fun C(Other: UObject): BoxSphereBounds
        fun C(Other: Any): BoxSphereBounds
        fun BreakBoxSphereBounds(InBoxSphereBounds: BoxSphereBounds, Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally, SphereRadius: Number = definedExternally): `T$153`
    }
}

external open class MeshUVChannelInfo {
    open var bInitialized: Boolean
    open var bOverrideDensities: Boolean
    open var LocalUVDensities: Number
    open fun clone(): MeshUVChannelInfo

    companion object {
        fun C(Other: UObject): MeshUVChannelInfo
        fun C(Other: Any): MeshUVChannelInfo
    }
}

external open class SkeletalMaterial {
    open var MaterialInterface: MaterialInterface
    open var MaterialSlotName: String
    open var bEnableShadowCasting: Boolean
    open var bRecomputeTangent: Boolean
    open var ImportedMaterialSlotName: String
    open var UVChannelData: MeshUVChannelInfo
    open fun clone(): SkeletalMaterial

    companion object {
        fun C(Other: UObject): SkeletalMaterial
        fun C(Other: Any): SkeletalMaterial
    }
}

external open class BoneMirrorInfo {
    open var SourceIndex: Number
    open var BoneFlipAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open fun clone(): BoneMirrorInfo

    companion object {
        fun C(Other: UObject): BoneMirrorInfo
        fun C(Other: Any): BoneMirrorInfo
    }
}

external open class SkeletalMeshBuildSettings {
    open var bRecomputeNormals: Boolean
    open var bRecomputeTangents: Boolean
    open var bUseMikkTSpace: Boolean
    open var bComputeWeightedNormals: Boolean
    open var bRemoveDegenerates: Boolean
    open var bUseHighPrecisionTangentBasis: Boolean
    open var bUseFullPrecisionUVs: Boolean
    open var bUseBackwardsCompatibleF16TruncUVs: Boolean
    open var ThresholdPosition: Number
    open var ThresholdTangentNormal: Number
    open var ThresholdUV: Number
    open var MorphThresholdPosition: Number
    open fun clone(): SkeletalMeshBuildSettings

    companion object {
        fun C(Other: UObject): SkeletalMeshBuildSettings
        fun C(Other: Any): SkeletalMeshBuildSettings
    }
}

external object SkeletalMeshTerminationCriterion {
    var SMTC_NumOfTriangles: String /* "SMTC_NumOfTriangles" */
    var SMTC_NumOfVerts: String /* "SMTC_NumOfVerts" */
    var SMTC_TriangleOrVert: String /* "SMTC_TriangleOrVert" */
    var SMTC_AbsNumOfTriangles: String /* "SMTC_AbsNumOfTriangles" */
    var SMTC_AbsNumOfVerts: String /* "SMTC_AbsNumOfVerts" */
    var SMTC_AbsTriangleOrVert: String /* "SMTC_AbsTriangleOrVert" */
    var SMTC_MAX: String /* "SMTC_MAX" */
}

external object SkeletalMeshOptimizationType {
    var SMOT_NumOfTriangles: String /* "SMOT_NumOfTriangles" */
    var SMOT_MaxDeviation: String /* "SMOT_MaxDeviation" */
    var SMOT_TriangleOrDeviation: String /* "SMOT_TriangleOrDeviation" */
    var SMOT_MAX: String /* "SMOT_MAX" */
}

external object SkeletalMeshOptimizationImportance {
    var SMOI_Off: String /* "SMOI_Off" */
    var SMOI_Lowest: String /* "SMOI_Lowest" */
    var SMOI_Low: String /* "SMOI_Low" */
    var SMOI_Normal: String /* "SMOI_Normal" */
    var SMOI_High: String /* "SMOI_High" */
    var SMOI_Highest: String /* "SMOI_Highest" */
    var SMOI_MAX: String /* "SMOI_MAX" */
}

external open class SkeletalMeshOptimizationSettings {
    open var TerminationCriterion: String /* "SMTC_NumOfTriangles" | "SMTC_NumOfVerts" | "SMTC_TriangleOrVert" | "SMTC_AbsNumOfTriangles" | "SMTC_AbsNumOfVerts" | "SMTC_AbsTriangleOrVert" | "SMTC_MAX" */
    open var NumOfTrianglesPercentage: Number
    open var NumOfVertPercentage: Number
    open var MaxNumOfTriangles: Any
    open var MaxNumOfVerts: Any
    open var MaxNumOfTrianglesPercentage: Any
    open var MaxNumOfVertsPercentage: Any
    open var MaxDeviationPercentage: Number
    open var ReductionMethod: String /* "SMOT_NumOfTriangles" | "SMOT_MaxDeviation" | "SMOT_TriangleOrDeviation" | "SMOT_MAX" */
    open var SilhouetteImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var TextureImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var ShadingImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var SkinningImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var bRemapMorphTargets: Boolean
    open var bRecalcNormals: Boolean
    open var WeldingThreshold: Number
    open var NormalsThreshold: Number
    open var MaxBonesPerVertex: Number
    open var bEnforceBoneBoundaries: Boolean
    open var bMergeCoincidentVertBones: Boolean
    open var VolumeImportance: Number
    open var bLockEdges: Boolean
    open var bLockColorBounaries: Boolean
    open var BaseLOD: Number
    open var BonesToRemove: Array<BoneReference>
    open var BakePose: AnimSequence
    open fun clone(): SkeletalMeshOptimizationSettings

    companion object {
        fun C(Other: UObject): SkeletalMeshOptimizationSettings
        fun C(Other: Any): SkeletalMeshOptimizationSettings
    }
}

external open class SectionReference {
    open var SectionIndex: Number
    open fun clone(): SectionReference

    companion object {
        fun C(Other: UObject): SectionReference
        fun C(Other: Any): SectionReference
    }
}

external object ESkinCacheUsage {
    var Auto: String /* "Auto" */
    var Disabled: String /* "Disabled" */
    var Enabled: String /* "Enabled" */
    var ESkinCacheUsage_MAX: String /* "ESkinCacheUsage_MAX" */
}

external open class SkeletalMeshLODInfo {
    open var ScreenSize: PerPlatformFloat
    open var LODHysteresis: Number
    open var LODMaterialMap: Array<Number>
    open var bEnableShadowCasting: Array<Boolean>
    open var RemovedBones: Array<String>
    open var BuildSettings: SkeletalMeshBuildSettings
    open var ReductionSettings: SkeletalMeshOptimizationSettings
    open var BonesToRemove: Array<BoneReference>
    open var BonesToPrioritize: Array<BoneReference>
    open var SectionsToPrioritize: Array<SectionReference>
    open var WeightOfPrioritization: Number
    open var BakePose: AnimSequence
    open var BakePoseOverride: AnimSequence
    open var SourceImportFilename: String
    open var SkinCacheUsage: String /* "Auto" | "Disabled" | "Enabled" | "ESkinCacheUsage_MAX" */
    open var MorphTargetPositionErrorTolerance: Number
    open var bHasBeenSimplified: Boolean
    open var bHasPerLODVertexColors: Boolean
    open var bAllowCPUAccess: Boolean
    open var bSupportUniformlyDistributedSampling: Boolean
    open var bImportWithBaseMesh: Boolean
    open fun clone(): SkeletalMeshLODInfo

    companion object {
        fun C(Other: UObject): SkeletalMeshLODInfo
        fun C(Other: Any): SkeletalMeshLODInfo
    }
}

external open class PerPlatformInt {
    open var Default: Number
    open var PerPlatform: Any
    open fun clone(): PerPlatformInt

    companion object {
        fun C(Other: UObject): PerPlatformInt
        fun C(Other: Any): PerPlatformInt
    }
}

external open class PerPlatformBool {
    open var Default: Boolean
    open var PerPlatform: Any
    open fun clone(): PerPlatformBool

    companion object {
        fun C(Other: UObject): PerPlatformBool
        fun C(Other: Any): PerPlatformBool
    }
}

external object EBoneFilterActionOption {
    var Remove: String /* "Remove" */
    var Keep: String /* "Keep" */
    var Invalid: String /* "Invalid" */
    var EBoneFilterActionOption_MAX: String /* "EBoneFilterActionOption_MAX" */
}

external open class BoneFilter {
    open var bExcludeSelf: Boolean
    open var BoneName: String
    open fun clone(): BoneFilter

    companion object {
        fun C(Other: UObject): BoneFilter
        fun C(Other: Any): BoneFilter
    }
}

external open class SkeletalMeshLODGroupSettings {
    open var ScreenSize: PerPlatformFloat
    open var LODHysteresis: Number
    open var BoneFilterActionOption: String /* "Remove" | "Keep" | "Invalid" | "EBoneFilterActionOption_MAX" */
    open var BoneList: Array<BoneFilter>
    open var BonesToPrioritize: Array<String>
    open var SectionsToPrioritize: Array<Number>
    open var WeightOfPrioritization: Number
    open var BakePose: AnimSequence
    open var ReductionSettings: SkeletalMeshOptimizationSettings
    open fun clone(): SkeletalMeshLODGroupSettings

    companion object {
        fun C(Other: UObject): SkeletalMeshLODGroupSettings
        fun C(Other: Any): SkeletalMeshLODGroupSettings
    }
}

external open class SkeletalMeshLODSettings : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var MinLOD: PerPlatformInt
    open var DisableBelowMinLodStripping: PerPlatformBool
    open var bOverrideLODStreamingSettings: Boolean
    open var bSupportLODStreaming: PerPlatformBool
    open var MaxNumStreamedLODs: PerPlatformInt
    open var MaxNumOptionalLODs: PerPlatformInt
    open var LODGroups: Array<SkeletalMeshLODGroupSettings>

    companion object {
        fun Load(ResourceName: String): SkeletalMeshLODSettings
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshLODSettings
        fun GetDefaultObject(): SkeletalMeshLODSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshLODSettings
        fun C(Other: UObject): SkeletalMeshLODSettings
        fun C(Other: Any): SkeletalMeshLODSettings
    }
}

external open class PhysicalAnimationData {
    open var BodyName: String
    open var bIsLocalSimulation: Boolean
    open var OrientationStrength: Number
    open var AngularVelocityStrength: Number
    open var PositionStrength: Number
    open var VelocityStrength: Number
    open var MaxLinearForce: Number
    open var MaxAngularForce: Number
    open fun clone(): PhysicalAnimationData

    companion object {
        fun C(Other: UObject): PhysicalAnimationData
        fun C(Other: Any): PhysicalAnimationData
    }
}

external open class PhysicalAnimationProfile {
    open var ProfileName: String
    open var PhysicalAnimationData: PhysicalAnimationData
    open fun clone(): PhysicalAnimationProfile

    companion object {
        fun C(Other: UObject): PhysicalAnimationProfile
        fun C(Other: Any): PhysicalAnimationProfile
    }
}

external open class SkeletalBodySetup : BodySetup {
    constructor()
    constructor(Outer: UObject)
    open var CurrentPhysicalAnimationProfile: PhysicalAnimationProfile
    open var bSkipScaleFromAnimation: Boolean
    open var PhysicalAnimationData: Array<PhysicalAnimationProfile>

    companion object {
        fun Load(ResourceName: String): SkeletalBodySetup
        fun Find(Outer: UObject, ResourceName: String): SkeletalBodySetup
        fun GetDefaultObject(): SkeletalBodySetup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalBodySetup
        fun C(Other: UObject): SkeletalBodySetup
        fun C(Other: Any): SkeletalBodySetup
    }
}

external open class ConstraintInstanceBase {
    open fun clone(): ConstraintInstanceBase

    companion object {
        fun C(Other: UObject): ConstraintInstanceBase
        fun C(Other: Any): ConstraintInstanceBase
    }
}

external open class ConstraintBaseParams {
    open var Stiffness: Number
    open var Damping: Number
    open var Restitution: Number
    open var ContactDistance: Number
    open var bSoftConstraint: Boolean
    open fun clone(): ConstraintBaseParams

    companion object {
        fun C(Other: UObject): ConstraintBaseParams
        fun C(Other: Any): ConstraintBaseParams
    }
}

external object ELinearConstraintMotion {
    var LCM_Free: String /* "LCM_Free" */
    var LCM_Limited: String /* "LCM_Limited" */
    var LCM_Locked: String /* "LCM_Locked" */
    var LCM_MAX: String /* "LCM_MAX" */
}

external open class LinearConstraint : ConstraintBaseParams {
    open var Limit: Number
    open var XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    override fun clone(): LinearConstraint

    companion object {
        fun C(Other: UObject): LinearConstraint
        fun C(Other: Any): LinearConstraint
    }
}

external object EAngularConstraintMotion {
    var ACM_Free: String /* "ACM_Free" */
    var ACM_Limited: String /* "ACM_Limited" */
    var ACM_Locked: String /* "ACM_Locked" */
    var ACM_MAX: String /* "ACM_MAX" */
}

external open class ConeConstraint : ConstraintBaseParams {
    open var Swing1LimitDegrees: Number
    open var Swing2LimitDegrees: Number
    open var Swing1Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var Swing2Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    override fun clone(): ConeConstraint

    companion object {
        fun C(Other: UObject): ConeConstraint
        fun C(Other: Any): ConeConstraint
    }
}

external open class TwistConstraint : ConstraintBaseParams {
    open var TwistLimitDegrees: Number
    open var TwistMotion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    override fun clone(): TwistConstraint

    companion object {
        fun C(Other: UObject): TwistConstraint
        fun C(Other: Any): TwistConstraint
    }
}

external open class ConstraintDrive {
    open var Stiffness: Number
    open var Damping: Number
    open var MaxForce: Number
    open var bEnablePositionDrive: Boolean
    open var bEnableVelocityDrive: Boolean
    open fun clone(): ConstraintDrive

    companion object {
        fun C(Other: UObject): ConstraintDrive
        fun C(Other: Any): ConstraintDrive
    }
}

external open class LinearDriveConstraint {
    open var PositionTarget: Vector
    open var VelocityTarget: Vector
    open var XDrive: ConstraintDrive
    open var YDrive: ConstraintDrive
    open var ZDrive: ConstraintDrive
    open var bEnablePositionDrive: Boolean
    open fun clone(): LinearDriveConstraint

    companion object {
        fun C(Other: UObject): LinearDriveConstraint
        fun C(Other: Any): LinearDriveConstraint
    }
}

external object EAngularDriveMode {
    var SLERP: String /* "SLERP" */
    var TwistAndSwing: String /* "TwistAndSwing" */
    var EAngularDriveMode_MAX: String /* "EAngularDriveMode_MAX" */
}

external open class AngularDriveConstraint {
    open var TwistDrive: ConstraintDrive
    open var SwingDrive: ConstraintDrive
    open var SlerpDrive: ConstraintDrive
    open var OrientationTarget: Rotator
    open var AngularVelocityTarget: Vector
    open var AngularDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */
    open fun clone(): AngularDriveConstraint

    companion object {
        fun C(Other: UObject): AngularDriveConstraint
        fun C(Other: Any): AngularDriveConstraint
    }
}

external object EConstraintPlasticityType {
    var CCPT_Free: String /* "CCPT_Free" */
    var CCPT_Shrink: String /* "CCPT_Shrink" */
    var CCPT_Grow: String /* "CCPT_Grow" */
    var CCPT_MAX: String /* "CCPT_MAX" */
}

external open class ConstraintProfileProperties {
    open var ProjectionLinearTolerance: Number
    open var ProjectionAngularTolerance: Number
    open var ProjectionLinearAlpha: Number
    open var ProjectionAngularAlpha: Number
    open var ShockPropagationAlpha: Number
    open var LinearBreakThreshold: Number
    open var LinearPlasticityThreshold: Number
    open var AngularBreakThreshold: Number
    open var AngularPlasticityThreshold: Number
    open var ContactTransferScale: Number
    open var LinearLimit: LinearConstraint
    open var ConeLimit: ConeConstraint
    open var TwistLimit: TwistConstraint
    open var LinearDrive: LinearDriveConstraint
    open var AngularDrive: AngularDriveConstraint
    open var bDisableCollision: Boolean
    open var bParentDominates: Boolean
    open var bEnableLinearProjection: Boolean
    open var bEnableAngularProjection: Boolean
    open var bEnableShockPropagation: Boolean
    open var bEnableProjection: Boolean
    open var bEnableSoftProjection: Boolean
    open var bAngularBreakable: Boolean
    open var bAngularPlasticity: Boolean
    open var bLinearBreakable: Boolean
    open var bLinearPlasticity: Boolean
    open var LinearPlasticityType: String /* "CCPT_Free" | "CCPT_Shrink" | "CCPT_Grow" | "CCPT_MAX" */
    open fun clone(): ConstraintProfileProperties

    companion object {
        fun C(Other: UObject): ConstraintProfileProperties
        fun C(Other: Any): ConstraintProfileProperties
    }
}

external open class ConstraintInstance : ConstraintInstanceBase {
    open var JointName: String
    open var ConstraintBone1: String
    open var ConstraintBone2: String
    open var Pos1: Vector
    open var PriAxis1: Vector
    open var SecAxis1: Vector
    open var Pos2: Vector
    open var PriAxis2: Vector
    open var SecAxis2: Vector
    open var AngularRotationOffset: Rotator
    open var bScaleLinearLimits: Boolean
    open var ProfileInstance: ConstraintProfileProperties
    open var bDisableCollision: Boolean
    open var bEnableProjection: Boolean
    open var ProjectionLinearTolerance: Number
    open var ProjectionAngularTolerance: Number
    open var LinearXMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearYMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearLimitSize: Number
    open var bLinearLimitSoft: Boolean
    open var LinearLimitStiffness: Number
    open var LinearLimitDamping: Number
    open var bLinearBreakable: Boolean
    open var LinearBreakThreshold: Number
    open var AngularSwing1Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularTwistMotion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularSwing2Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var bSwingLimitSoft: Boolean
    open var bTwistLimitSoft: Boolean
    open var Swing1LimitAngle: Number
    open var TwistLimitAngle: Number
    open var Swing2LimitAngle: Number
    open var SwingLimitStiffness: Number
    open var SwingLimitDamping: Number
    open var TwistLimitStiffness: Number
    open var TwistLimitDamping: Number
    open var bAngularBreakable: Boolean
    open var AngularBreakThreshold: Number
    open var bLinearXPositionDrive: Boolean
    open var bLinearXVelocityDrive: Boolean
    open var bLinearYPositionDrive: Boolean
    open var bLinearYVelocityDrive: Boolean
    open var bLinearZPositionDrive: Boolean
    open var bLinearZVelocityDrive: Boolean
    open var bLinearPositionDrive: Boolean
    open var bLinearVelocityDrive: Boolean
    open var LinearPositionTarget: Vector
    open var LinearVelocityTarget: Vector
    open var LinearDriveSpring: Number
    open var LinearDriveDamping: Number
    open var LinearDriveForceLimit: Number
    open var bSwingPositionDrive: Boolean
    open var bSwingVelocityDrive: Boolean
    open var bTwistPositionDrive: Boolean
    open var bTwistVelocityDrive: Boolean
    open var bAngularSlerpDrive: Boolean
    open var bAngularOrientationDrive: Boolean
    open var bEnableSwingDrive: Boolean
    open var bEnableTwistDrive: Boolean
    open var bAngularVelocityDrive: Boolean
    open var AngularPositionTarget: Quat
    open var AngularDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */
    open var AngularOrientationTarget: Rotator
    open var AngularVelocityTarget: Vector
    open var AngularDriveSpring: Number
    open var AngularDriveDamping: Number
    open var AngularDriveForceLimit: Number
    override fun clone(): ConstraintInstance

    companion object {
        fun C(Other: UObject): ConstraintInstance
        fun C(Other: Any): ConstraintInstance
    }
}

external open class PhysicsConstraintProfileHandle {
    open var ProfileProperties: ConstraintProfileProperties
    open var ProfileName: String
    open fun clone(): PhysicsConstraintProfileHandle

    companion object {
        fun C(Other: UObject): PhysicsConstraintProfileHandle
        fun C(Other: Any): PhysicsConstraintProfileHandle
    }
}

external open class PhysicsConstraintTemplate : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultInstance: ConstraintInstance
    open var ProfileHandles: Array<PhysicsConstraintProfileHandle>
    open var DefaultProfile: ConstraintProfileProperties
    open var JointName: String
    open var ConstraintBone1: String
    open var ConstraintBone2: String
    open var Pos1: Vector
    open var PriAxis1: Vector
    open var SecAxis1: Vector
    open var Pos2: Vector
    open var PriAxis2: Vector
    open var SecAxis2: Vector
    open var bEnableProjection: Boolean
    open var ProjectionLinearTolerance: Number
    open var ProjectionAngularTolerance: Number
    open var LinearXMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearYMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearLimitSize: Number
    open var bLinearLimitSoft: Boolean
    open var LinearLimitStiffness: Number
    open var LinearLimitDamping: Number
    open var bLinearBreakable: Boolean
    open var LinearBreakThreshold: Number
    open var AngularSwing1Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularSwing2Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularTwistMotion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var bSwingLimitSoft: Boolean
    open var bTwistLimitSoft: Boolean
    open var Swing1LimitAngle: Number
    open var Swing2LimitAngle: Number
    open var TwistLimitAngle: Number
    open var SwingLimitStiffness: Number
    open var SwingLimitDamping: Number
    open var TwistLimitStiffness: Number
    open var TwistLimitDamping: Number
    open var bAngularBreakable: Boolean
    open var AngularBreakThreshold: Number

    companion object {
        fun Load(ResourceName: String): PhysicsConstraintTemplate
        fun Find(Outer: UObject, ResourceName: String): PhysicsConstraintTemplate
        fun GetDefaultObject(): PhysicsConstraintTemplate
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsConstraintTemplate
        fun C(Other: UObject): PhysicsConstraintTemplate
        fun C(Other: Any): PhysicsConstraintTemplate
    }
}

external open class PhysicsAssetSolverSettings {
    open var PositionIterations: Number
    open var VelocityIterations: Number
    open var ProjectionIterations: Number
    open var CullDistance: Number
    open var MaxDepenetrationVelocity: Number
    open var FixedTimeStep: Number
    open fun clone(): PhysicsAssetSolverSettings

    companion object {
        fun C(Other: UObject): PhysicsAssetSolverSettings
        fun C(Other: Any): PhysicsAssetSolverSettings
    }
}

external open class SolverIterations {
    open var SolverIterations: Number
    open var JointIterations: Number
    open var CollisionIterations: Number
    open var SolverPushOutIterations: Number
    open var JointPushOutIterations: Number
    open var CollisionPushOutIterations: Number
    open fun clone(): SolverIterations

    companion object {
        fun C(Other: UObject): SolverIterations
        fun C(Other: Any): SolverIterations
    }
}

external object EPhysicsAssetSolverType {
    var RBAN: String /* "RBAN" */
    var World: String /* "World" */
    var EPhysicsAssetSolverType_MAX: String /* "EPhysicsAssetSolverType_MAX" */
}

external interface `T$154` {
    var Accessor: ConstraintInstanceAccessor
    var SourceAccessor: ConstraintInstanceAccessor
}

external interface `T$155` {
    var Accessor: ConstraintInstanceAccessor
    var bAngularBreakable: Boolean
    var AngularBreakThreshold: Number
}

external interface `T$156` {
    var Accessor: ConstraintInstanceAccessor
    var OutDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */
}

external interface `T$157` {
    var Accessor: ConstraintInstanceAccessor
    var OutPositionStrength: Number
    var OutVelocityStrength: Number
    var OutForceLimit: Number
}

external interface `T$158` {
    var Accessor: ConstraintInstanceAccessor
    var Swing1MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    var Swing1LimitAngle: Number
    var Swing2MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    var Swing2LimitAngle: Number
    var TwistMotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    var TwistLimitAngle: Number
}

external interface `T$159` {
    var Accessor: ConstraintInstanceAccessor
    var OutPosTarget: Rotator
}

external interface `T$160` {
    var Accessor: ConstraintInstanceAccessor
    var bAngularPlasticity: Boolean
    var AngularPlasticityThreshold: Number
}

external interface `T$161` {
    var Accessor: ConstraintInstanceAccessor
    var bSoftSwingLimit: Boolean
    var SwingLimitStiffness: Number
    var SwingLimitDamping: Number
    var SwingLimitRestitution: Number
    var SwingLimitContactDistance: Number
}

external interface `T$162` {
    var Accessor: ConstraintInstanceAccessor
    var bSoftTwistLimit: Boolean
    var TwistLimitStiffness: Number
    var TwistLimitDamping: Number
    var TwistLimitRestitution: Number
    var TwistLimitContactDistance: Number
}

external interface `T$163` {
    var Accessor: ConstraintInstanceAccessor
    var bOutEnableSLERP: Boolean
}

external interface `T$164` {
    var Accessor: ConstraintInstanceAccessor
    var bOutEnableTwistDrive: Boolean
    var bOutEnableSwingDrive: Boolean
}

external interface `T$165` {
    var Accessor: ConstraintInstanceAccessor
    var OutVelTarget: Vector
}

external interface `T$166` {
    var Accessor: ConstraintInstanceAccessor
    var ParentBody: String
    var ChildBody: String
}

external interface `T$167` {
    var Accessor: ConstraintInstanceAccessor
    var ContactTransferScale: Number
}

external interface `T$168` {
    var Accessor: ConstraintInstanceAccessor
    var `$`: Boolean
}

external interface `T$169` {
    var Accessor: ConstraintInstanceAccessor
    var bLinearBreakable: Boolean
    var LinearBreakThreshold: Number
}

external interface `T$170` {
    var Accessor: ConstraintInstanceAccessor
    var XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    var YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    var ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    var Limit: Number
}

external interface `T$171` {
    var Accessor: ConstraintInstanceAccessor
    var bLinearPlasticity: Boolean
    var LinearPlasticityThreshold: Number
    var PlasticityType: String /* "CCPT_Free" | "CCPT_Shrink" | "CCPT_Grow" | "CCPT_MAX" */
}

external interface `T$172` {
    var Accessor: ConstraintInstanceAccessor
    var bOutEnableDriveX: Boolean
    var bOutEnableDriveY: Boolean
    var bOutEnableDriveZ: Boolean
}

external interface `T$173` {
    var Accessor: ConstraintInstanceAccessor
    var OutPosTarget: Vector
}

external interface `T$174` {
    var Accessor: ConstraintInstanceAccessor
    var bSoftLinearLimit: Boolean
    var LinearLimitStiffness: Number
    var LinearLimitDamping: Number
    var LinearLimitRestitution: Number
    var LinearLimitContactDistance: Number
}

external interface `T$175` {
    var Accessor: ConstraintInstanceAccessor
    var bEnableProjection: Boolean
    var ProjectionLinearAlpha: Number
    var ProjectionAngularAlpha: Number
}

external interface `T$176` {
    var Accessor: ConstraintInstanceAccessor
}

external open class ConstraintInstanceAccessor {
    open var Owner: Any
    open var index: Any
    open fun clone(): ConstraintInstanceAccessor
    open fun CopyParams(SourceAccessor: ConstraintInstanceAccessor = definedExternally, bKeepPosition: Boolean = definedExternally, bKeepRotation: Boolean = definedExternally): `T$154`
    open fun GetAngularBreakable(bAngularBreakable: Boolean = definedExternally, AngularBreakThreshold: Number = definedExternally): `T$155`
    open fun GetAngularDriveMode(OutDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */ = definedExternally): `T$156`
    open fun GetAngularDriveParams(OutPositionStrength: Number = definedExternally, OutVelocityStrength: Number = definedExternally, OutForceLimit: Number = definedExternally): `T$157`
    open fun GetAngularLimits(Swing1MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing1LimitAngle: Number = definedExternally, Swing2MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing2LimitAngle: Number = definedExternally, TwistMotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, TwistLimitAngle: Number = definedExternally): `T$158`
    open fun GetAngularOrientationTarget(OutPosTarget: Rotator = definedExternally): `T$159`
    open fun GetAngularPlasticity(bAngularPlasticity: Boolean = definedExternally, AngularPlasticityThreshold: Number = definedExternally): `T$160`
    open fun GetAngularSoftSwingLimitParams(bSoftSwingLimit: Boolean = definedExternally, SwingLimitStiffness: Number = definedExternally, SwingLimitDamping: Number = definedExternally, SwingLimitRestitution: Number = definedExternally, SwingLimitContactDistance: Number = definedExternally): `T$161`
    open fun GetAngularSoftTwistLimitParams(bSoftTwistLimit: Boolean = definedExternally, TwistLimitStiffness: Number = definedExternally, TwistLimitDamping: Number = definedExternally, TwistLimitRestitution: Number = definedExternally, TwistLimitContactDistance: Number = definedExternally): `T$162`
    open fun GetAngularVelocityDriveSLERP(bOutEnableSLERP: Boolean = definedExternally): `T$163`
    open fun GetAngularVelocityDriveTwistAndSwing(bOutEnableTwistDrive: Boolean = definedExternally, bOutEnableSwingDrive: Boolean = definedExternally): `T$164`
    open fun GetAngularVelocityTarget(OutVelTarget: Vector = definedExternally): `T$165`
    open fun GetAttachedBodyNames(ParentBody: String = definedExternally, ChildBody: String = definedExternally): `T$166`
    open fun GetContactTransferScale(ContactTransferScale: Number = definedExternally): `T$167`
    open fun GetDisableCollsion(): `T$168`
    open fun GetLinearBreakable(bLinearBreakable: Boolean = definedExternally, LinearBreakThreshold: Number = definedExternally): `T$169`
    open fun GetLinearDriveParams(OutPositionStrength: Number = definedExternally, OutVelocityStrength: Number = definedExternally, OutForceLimit: Number = definedExternally): `T$157`
    open fun GetLinearLimits(XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, Limit: Number = definedExternally): `T$170`
    open fun GetLinearPlasticity(bLinearPlasticity: Boolean = definedExternally, LinearPlasticityThreshold: Number = definedExternally, PlasticityType: String /* "CCPT_Free" | "CCPT_Shrink" | "CCPT_Grow" | "CCPT_MAX" */ = definedExternally): `T$171`
    open fun GetLinearPositionDrive(bOutEnableDriveX: Boolean = definedExternally, bOutEnableDriveY: Boolean = definedExternally, bOutEnableDriveZ: Boolean = definedExternally): `T$172`
    open fun GetLinearPositionTarget(OutPosTarget: Vector = definedExternally): `T$173`
    open fun GetLinearSoftLimitParams(bSoftLinearLimit: Boolean = definedExternally, LinearLimitStiffness: Number = definedExternally, LinearLimitDamping: Number = definedExternally, LinearLimitRestitution: Number = definedExternally, LinearLimitContactDistance: Number = definedExternally): `T$174`
    open fun GetLinearVelocityDrive(bOutEnableDriveX: Boolean = definedExternally, bOutEnableDriveY: Boolean = definedExternally, bOutEnableDriveZ: Boolean = definedExternally): `T$172`
    open fun GetLinearVelocityTarget(OutVelTarget: Vector = definedExternally): `T$165`
    open fun GetOrientationDriveSLERP(bOutEnableSLERP: Boolean = definedExternally): `T$163`
    open fun GetOrientationDriveTwistAndSwing(bOutEnableTwistDrive: Boolean = definedExternally, bOutEnableSwingDrive: Boolean = definedExternally): `T$164`
    open fun GetParentDominates(): `T$168`
    open fun GetProjectionParams(bEnableProjection: Boolean = definedExternally, ProjectionLinearAlpha: Number = definedExternally, ProjectionAngularAlpha: Number = definedExternally): `T$175`
    open fun SetAngularBreakable(bAngularBreakable: Boolean = definedExternally, AngularBreakThreshold: Number = definedExternally): `T$176`
    open fun SetAngularDriveMode(DriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */ = definedExternally): `T$176`
    open fun SetAngularDriveParams(PositionStrength: Number = definedExternally, VelocityStrength: Number = definedExternally, InForceLimit: Number = definedExternally): `T$176`
    open fun SetAngularLimits(Swing1MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing1LimitAngle: Number = definedExternally, Swing2MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing2LimitAngle: Number = definedExternally, TwistMotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, TwistLimitAngle: Number = definedExternally): `T$176`
    open fun SetAngularOrientationTarget(InPosTarget: Rotator = definedExternally): `T$176`
    open fun SetAngularPlasticity(bAngularPlasticity: Boolean = definedExternally, AngularPlasticityThreshold: Number = definedExternally): `T$176`
    open fun SetAngularSoftSwingLimitParams(bSoftSwingLimit: Boolean = definedExternally, SwingLimitStiffness: Number = definedExternally, SwingLimitDamping: Number = definedExternally, SwingLimitRestitution: Number = definedExternally, SwingLimitContactDistance: Number = definedExternally): `T$176`
    open fun SetAngularSoftTwistLimitParams(bSoftTwistLimit: Boolean = definedExternally, TwistLimitStiffness: Number = definedExternally, TwistLimitDamping: Number = definedExternally, TwistLimitRestitution: Number = definedExternally, TwistLimitContactDistance: Number = definedExternally): `T$176`
    open fun SetAngularVelocityDriveSLERP(bEnableSLERP: Boolean = definedExternally): `T$176`
    open fun SetAngularVelocityDriveTwistAndSwing(bEnableTwistDrive: Boolean = definedExternally, bEnableSwingDrive: Boolean = definedExternally): `T$176`
    open fun SetAngularVelocityTarget(InVelTarget: Vector = definedExternally): `T$176`
    open fun SetContactTransferScale(ContactTransferScale: Number = definedExternally): `T$176`
    open fun SetDisableCollision(bDisableCollision: Boolean = definedExternally): `T$176`
    open fun SetLinearBreakable(bLinearBreakable: Boolean = definedExternally, LinearBreakThreshold: Number = definedExternally): `T$176`
    open fun SetLinearDriveParams(PositionStrength: Number = definedExternally, VelocityStrength: Number = definedExternally, InForceLimit: Number = definedExternally): `T$176`
    open fun SetLinearLimits(XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, Limit: Number = definedExternally): `T$176`
    open fun SetLinearPlasticity(bLinearPlasticity: Boolean = definedExternally, LinearPlasticityThreshold: Number = definedExternally, PlasticityType: String /* "CCPT_Free" | "CCPT_Shrink" | "CCPT_Grow" | "CCPT_MAX" */ = definedExternally): `T$176`
    open fun SetLinearPositionDrive(bEnableDriveX: Boolean = definedExternally, bEnableDriveY: Boolean = definedExternally, bEnableDriveZ: Boolean = definedExternally): `T$176`
    open fun SetLinearPositionTarget(InPosTarget: Vector = definedExternally): `T$176`
    open fun SetLinearSoftLimitParams(bSoftLinearLimit: Boolean = definedExternally, LinearLimitStiffness: Number = definedExternally, LinearLimitDamping: Number = definedExternally, LinearLimitRestitution: Number = definedExternally, LinearLimitContactDistance: Number = definedExternally): `T$176`
    open fun SetLinearVelocityDrive(bEnableDriveX: Boolean = definedExternally, bEnableDriveY: Boolean = definedExternally, bEnableDriveZ: Boolean = definedExternally): `T$176`
    open fun SetLinearVelocityTarget(InVelTarget: Vector = definedExternally): `T$176`
    open fun SetOrientationDriveSLERP(bEnableSLERP: Boolean = definedExternally): `T$176`
    open fun SetOrientationDriveTwistAndSwing(bEnableTwistDrive: Boolean = definedExternally, bEnableSwingDrive: Boolean = definedExternally): `T$176`
    open fun SetParentDominates(bParentDominates: Boolean = definedExternally): `T$176`
    open fun SetProjectionParams(bEnableProjection: Boolean = definedExternally, ProjectionLinearAlpha: Number = definedExternally, ProjectionAngularAlpha: Number = definedExternally): `T$176`

    companion object {
        fun C(Other: UObject): ConstraintInstanceAccessor
        fun C(Other: Any): ConstraintInstanceAccessor
        fun CopyParams(Accessor: ConstraintInstanceAccessor = definedExternally, SourceAccessor: ConstraintInstanceAccessor = definedExternally, bKeepPosition: Boolean = definedExternally, bKeepRotation: Boolean = definedExternally): `T$154`
        fun GetAngularBreakable(Accessor: ConstraintInstanceAccessor = definedExternally, bAngularBreakable: Boolean = definedExternally, AngularBreakThreshold: Number = definedExternally): `T$155`
        fun GetAngularDriveMode(Accessor: ConstraintInstanceAccessor = definedExternally, OutDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */ = definedExternally): `T$156`
        fun GetAngularDriveParams(Accessor: ConstraintInstanceAccessor = definedExternally, OutPositionStrength: Number = definedExternally, OutVelocityStrength: Number = definedExternally, OutForceLimit: Number = definedExternally): `T$157`
        fun GetAngularLimits(Accessor: ConstraintInstanceAccessor = definedExternally, Swing1MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing1LimitAngle: Number = definedExternally, Swing2MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing2LimitAngle: Number = definedExternally, TwistMotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, TwistLimitAngle: Number = definedExternally): `T$158`
        fun GetAngularOrientationTarget(Accessor: ConstraintInstanceAccessor = definedExternally, OutPosTarget: Rotator = definedExternally): `T$159`
        fun GetAngularPlasticity(Accessor: ConstraintInstanceAccessor = definedExternally, bAngularPlasticity: Boolean = definedExternally, AngularPlasticityThreshold: Number = definedExternally): `T$160`
        fun GetAngularSoftSwingLimitParams(Accessor: ConstraintInstanceAccessor = definedExternally, bSoftSwingLimit: Boolean = definedExternally, SwingLimitStiffness: Number = definedExternally, SwingLimitDamping: Number = definedExternally, SwingLimitRestitution: Number = definedExternally, SwingLimitContactDistance: Number = definedExternally): `T$161`
        fun GetAngularSoftTwistLimitParams(Accessor: ConstraintInstanceAccessor = definedExternally, bSoftTwistLimit: Boolean = definedExternally, TwistLimitStiffness: Number = definedExternally, TwistLimitDamping: Number = definedExternally, TwistLimitRestitution: Number = definedExternally, TwistLimitContactDistance: Number = definedExternally): `T$162`
        fun GetAngularVelocityDriveSLERP(Accessor: ConstraintInstanceAccessor = definedExternally, bOutEnableSLERP: Boolean = definedExternally): `T$163`
        fun GetAngularVelocityDriveTwistAndSwing(Accessor: ConstraintInstanceAccessor = definedExternally, bOutEnableTwistDrive: Boolean = definedExternally, bOutEnableSwingDrive: Boolean = definedExternally): `T$164`
        fun GetAngularVelocityTarget(Accessor: ConstraintInstanceAccessor = definedExternally, OutVelTarget: Vector = definedExternally): `T$165`
        fun GetAttachedBodyNames(Accessor: ConstraintInstanceAccessor = definedExternally, ParentBody: String = definedExternally, ChildBody: String = definedExternally): `T$166`
        fun GetContactTransferScale(Accessor: ConstraintInstanceAccessor = definedExternally, ContactTransferScale: Number = definedExternally): `T$167`
        fun GetDisableCollsion(Accessor: ConstraintInstanceAccessor = definedExternally): `T$168`
        fun GetLinearBreakable(Accessor: ConstraintInstanceAccessor = definedExternally, bLinearBreakable: Boolean = definedExternally, LinearBreakThreshold: Number = definedExternally): `T$169`
        fun GetLinearDriveParams(Accessor: ConstraintInstanceAccessor = definedExternally, OutPositionStrength: Number = definedExternally, OutVelocityStrength: Number = definedExternally, OutForceLimit: Number = definedExternally): `T$157`
        fun GetLinearLimits(Accessor: ConstraintInstanceAccessor = definedExternally, XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, Limit: Number = definedExternally): `T$170`
        fun GetLinearPlasticity(Accessor: ConstraintInstanceAccessor = definedExternally, bLinearPlasticity: Boolean = definedExternally, LinearPlasticityThreshold: Number = definedExternally, PlasticityType: String /* "CCPT_Free" | "CCPT_Shrink" | "CCPT_Grow" | "CCPT_MAX" */ = definedExternally): `T$171`
        fun GetLinearPositionDrive(Accessor: ConstraintInstanceAccessor = definedExternally, bOutEnableDriveX: Boolean = definedExternally, bOutEnableDriveY: Boolean = definedExternally, bOutEnableDriveZ: Boolean = definedExternally): `T$172`
        fun GetLinearPositionTarget(Accessor: ConstraintInstanceAccessor = definedExternally, OutPosTarget: Vector = definedExternally): `T$173`
        fun GetLinearSoftLimitParams(Accessor: ConstraintInstanceAccessor = definedExternally, bSoftLinearLimit: Boolean = definedExternally, LinearLimitStiffness: Number = definedExternally, LinearLimitDamping: Number = definedExternally, LinearLimitRestitution: Number = definedExternally, LinearLimitContactDistance: Number = definedExternally): `T$174`
        fun GetLinearVelocityDrive(Accessor: ConstraintInstanceAccessor = definedExternally, bOutEnableDriveX: Boolean = definedExternally, bOutEnableDriveY: Boolean = definedExternally, bOutEnableDriveZ: Boolean = definedExternally): `T$172`
        fun GetLinearVelocityTarget(Accessor: ConstraintInstanceAccessor = definedExternally, OutVelTarget: Vector = definedExternally): `T$165`
        fun GetOrientationDriveSLERP(Accessor: ConstraintInstanceAccessor = definedExternally, bOutEnableSLERP: Boolean = definedExternally): `T$163`
        fun GetOrientationDriveTwistAndSwing(Accessor: ConstraintInstanceAccessor = definedExternally, bOutEnableTwistDrive: Boolean = definedExternally, bOutEnableSwingDrive: Boolean = definedExternally): `T$164`
        fun GetParentDominates(Accessor: ConstraintInstanceAccessor = definedExternally): `T$168`
        fun GetProjectionParams(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableProjection: Boolean = definedExternally, ProjectionLinearAlpha: Number = definedExternally, ProjectionAngularAlpha: Number = definedExternally): `T$175`
        fun SetAngularBreakable(Accessor: ConstraintInstanceAccessor = definedExternally, bAngularBreakable: Boolean = definedExternally, AngularBreakThreshold: Number = definedExternally): `T$176`
        fun SetAngularDriveMode(Accessor: ConstraintInstanceAccessor = definedExternally, DriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */ = definedExternally): `T$176`
        fun SetAngularDriveParams(Accessor: ConstraintInstanceAccessor = definedExternally, PositionStrength: Number = definedExternally, VelocityStrength: Number = definedExternally, InForceLimit: Number = definedExternally): `T$176`
        fun SetAngularLimits(Accessor: ConstraintInstanceAccessor = definedExternally, Swing1MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing1LimitAngle: Number = definedExternally, Swing2MotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, Swing2LimitAngle: Number = definedExternally, TwistMotionType: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */ = definedExternally, TwistLimitAngle: Number = definedExternally): `T$176`
        fun SetAngularOrientationTarget(Accessor: ConstraintInstanceAccessor = definedExternally, InPosTarget: Rotator = definedExternally): `T$176`
        fun SetAngularPlasticity(Accessor: ConstraintInstanceAccessor = definedExternally, bAngularPlasticity: Boolean = definedExternally, AngularPlasticityThreshold: Number = definedExternally): `T$176`
        fun SetAngularSoftSwingLimitParams(Accessor: ConstraintInstanceAccessor = definedExternally, bSoftSwingLimit: Boolean = definedExternally, SwingLimitStiffness: Number = definedExternally, SwingLimitDamping: Number = definedExternally, SwingLimitRestitution: Number = definedExternally, SwingLimitContactDistance: Number = definedExternally): `T$176`
        fun SetAngularSoftTwistLimitParams(Accessor: ConstraintInstanceAccessor = definedExternally, bSoftTwistLimit: Boolean = definedExternally, TwistLimitStiffness: Number = definedExternally, TwistLimitDamping: Number = definedExternally, TwistLimitRestitution: Number = definedExternally, TwistLimitContactDistance: Number = definedExternally): `T$176`
        fun SetAngularVelocityDriveSLERP(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableSLERP: Boolean = definedExternally): `T$176`
        fun SetAngularVelocityDriveTwistAndSwing(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableTwistDrive: Boolean = definedExternally, bEnableSwingDrive: Boolean = definedExternally): `T$176`
        fun SetAngularVelocityTarget(Accessor: ConstraintInstanceAccessor = definedExternally, InVelTarget: Vector = definedExternally): `T$176`
        fun SetContactTransferScale(Accessor: ConstraintInstanceAccessor = definedExternally, ContactTransferScale: Number = definedExternally): `T$176`
        fun SetDisableCollision(Accessor: ConstraintInstanceAccessor = definedExternally, bDisableCollision: Boolean = definedExternally): `T$176`
        fun SetLinearBreakable(Accessor: ConstraintInstanceAccessor = definedExternally, bLinearBreakable: Boolean = definedExternally, LinearBreakThreshold: Number = definedExternally): `T$176`
        fun SetLinearDriveParams(Accessor: ConstraintInstanceAccessor = definedExternally, PositionStrength: Number = definedExternally, VelocityStrength: Number = definedExternally, InForceLimit: Number = definedExternally): `T$176`
        fun SetLinearLimits(Accessor: ConstraintInstanceAccessor = definedExternally, XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */ = definedExternally, Limit: Number = definedExternally): `T$176`
        fun SetLinearPlasticity(Accessor: ConstraintInstanceAccessor = definedExternally, bLinearPlasticity: Boolean = definedExternally, LinearPlasticityThreshold: Number = definedExternally, PlasticityType: String /* "CCPT_Free" | "CCPT_Shrink" | "CCPT_Grow" | "CCPT_MAX" */ = definedExternally): `T$176`
        fun SetLinearPositionDrive(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableDriveX: Boolean = definedExternally, bEnableDriveY: Boolean = definedExternally, bEnableDriveZ: Boolean = definedExternally): `T$176`
        fun SetLinearPositionTarget(Accessor: ConstraintInstanceAccessor = definedExternally, InPosTarget: Vector = definedExternally): `T$176`
        fun SetLinearSoftLimitParams(Accessor: ConstraintInstanceAccessor = definedExternally, bSoftLinearLimit: Boolean = definedExternally, LinearLimitStiffness: Number = definedExternally, LinearLimitDamping: Number = definedExternally, LinearLimitRestitution: Number = definedExternally, LinearLimitContactDistance: Number = definedExternally): `T$176`
        fun SetLinearVelocityDrive(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableDriveX: Boolean = definedExternally, bEnableDriveY: Boolean = definedExternally, bEnableDriveZ: Boolean = definedExternally): `T$176`
        fun SetLinearVelocityTarget(Accessor: ConstraintInstanceAccessor = definedExternally, InVelTarget: Vector = definedExternally): `T$176`
        fun SetOrientationDriveSLERP(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableSLERP: Boolean = definedExternally): `T$176`
        fun SetOrientationDriveTwistAndSwing(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableTwistDrive: Boolean = definedExternally, bEnableSwingDrive: Boolean = definedExternally): `T$176`
        fun SetParentDominates(Accessor: ConstraintInstanceAccessor = definedExternally, bParentDominates: Boolean = definedExternally): `T$176`
        fun SetProjectionParams(Accessor: ConstraintInstanceAccessor = definedExternally, bEnableProjection: Boolean = definedExternally, ProjectionLinearAlpha: Number = definedExternally, ProjectionAngularAlpha: Number = definedExternally): `T$176`
    }
}

external interface `T$177` {
    var OutConstraints: Array<ConstraintInstanceAccessor>
}

external open class PhysicsAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultSkelMesh: SkeletalMesh
    open var PreviewSkeletalMesh: SkeletalMesh
    open var PhysicalAnimationProfiles: Array<String>
    open var ConstraintProfiles: Array<String>
    open var CurrentPhysicalAnimationProfileName: String
    open var CurrentConstraintProfileName: String
    open var BoundsBodies: Array<Number>
    open var SkeletalBodySetups: Array<SkeletalBodySetup>
    open var ConstraintSetup: Array<PhysicsConstraintTemplate>
    open var SolverSettings: PhysicsAssetSolverSettings
    open var SolverIterations: SolverIterations
    open var SolverType: String /* "RBAN" | "World" | "EPhysicsAssetSolverType_MAX" */
    open var bNotForDedicatedServer: Boolean
    open var ThumbnailInfo: ThumbnailInfo
    open var BodySetup: Array<BodySetup>
    open fun GetConstraints(bIncludesTerminated: Boolean, OutConstraints: Array<ConstraintInstanceAccessor> = definedExternally): `T$177`
    open fun GetConstraintByName(ConstraintName: String): ConstraintInstanceAccessor
    open fun GetConstraintByBoneNames(Bone1Name: String, Bone2Name: String): ConstraintInstanceAccessor

    companion object {
        fun Load(ResourceName: String): PhysicsAsset
        fun Find(Outer: UObject, ResourceName: String): PhysicsAsset
        fun GetDefaultObject(): PhysicsAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsAsset
        fun C(Other: UObject): PhysicsAsset
        fun C(Other: Any): PhysicsAsset
    }
}

external open class NodeMappingContainer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SourceItems: Any
    open var TargetItems: Any
    open var SourceToTarget: Any
    open var SourceAsset: UObject
    open var TargetAsset: UObject

    companion object {
        fun Load(ResourceName: String): NodeMappingContainer
        fun Find(Outer: UObject, ResourceName: String): NodeMappingContainer
        fun GetDefaultObject(): NodeMappingContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NodeMappingContainer
        fun C(Other: UObject): NodeMappingContainer
        fun C(Other: Any): NodeMappingContainer
    }
}

external object EClothLODBiasMode {
    var MappingsToSameLOD: String /* "MappingsToSameLOD" */
    var MappingsToMinLOD: String /* "MappingsToMinLOD" */
    var MappingsToAnyLOD: String /* "MappingsToAnyLOD" */
    var EClothLODBiasMode_MAX: String /* "EClothLODBiasMode_MAX" */
}

external open class MorphTarget : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BaseSkelMesh: SkeletalMesh

    companion object {
        fun Load(ResourceName: String): MorphTarget
        fun Find(Outer: UObject, ResourceName: String): MorphTarget
        fun GetDefaultObject(): MorphTarget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MorphTarget
        fun C(Other: UObject): MorphTarget
        fun C(Other: Any): MorphTarget
    }
}

external open class ClothPhysicsProperties_Legacy {
    open var VerticalResistance: Number
    open var HorizontalResistance: Number
    open var BendResistance: Number
    open var ShearResistance: Number
    open var Friction: Number
    open var Damping: Number
    open var TetherStiffness: Number
    open var TetherLimit: Number
    open var Drag: Number
    open var StiffnessFrequency: Number
    open var GravityScale: Number
    open var MassScale: Number
    open var InertiaBlend: Number
    open var SelfCollisionThickness: Number
    open var SelfCollisionSquashScale: Number
    open var SelfCollisionStiffness: Number
    open var SolverFrequency: Number
    open var FiberCompression: Number
    open var FiberExpansion: Number
    open var FiberResistance: Number
    open fun clone(): ClothPhysicsProperties_Legacy

    companion object {
        fun C(Other: UObject): ClothPhysicsProperties_Legacy
        fun C(Other: Any): ClothPhysicsProperties_Legacy
    }
}

external open class ClothingAssetData_Legacy {
    open var AssetName: String
    open var ApexFileName: String
    open var bClothPropertiesChanged: Boolean
    open var PhysicsProperties: ClothPhysicsProperties_Legacy
    open fun clone(): ClothingAssetData_Legacy

    companion object {
        fun C(Other: UObject): ClothingAssetData_Legacy
        fun C(Other: Any): ClothingAssetData_Legacy
    }
}

external open class ClothingAssetBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ImportedFilePath: String
    open var AssetGuid: Guid

    companion object {
        fun Load(ResourceName: String): ClothingAssetBase
        fun Find(Outer: UObject, ResourceName: String): ClothingAssetBase
        fun GetDefaultObject(): ClothingAssetBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingAssetBase
        fun C(Other: UObject): ClothingAssetBase
        fun C(Other: Any): ClothingAssetBase
    }
}

external open class SkeletalMeshSamplingRegionMaterialFilter {
    open var MaterialName: String
    open fun clone(): SkeletalMeshSamplingRegionMaterialFilter

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegionMaterialFilter
        fun C(Other: Any): SkeletalMeshSamplingRegionMaterialFilter
    }
}

external open class SkeletalMeshSamplingRegionBoneFilter {
    open var BoneName: String
    open var bIncludeOrExclude: Boolean
    open var bApplyToChildren: Boolean
    open fun clone(): SkeletalMeshSamplingRegionBoneFilter

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegionBoneFilter
        fun C(Other: Any): SkeletalMeshSamplingRegionBoneFilter
    }
}

external open class SkeletalMeshSamplingRegion {
    open var Name: String
    open var LODIndex: Number
    open var bSupportUniformlyDistributedSampling: Boolean
    open var MaterialFilters: Array<SkeletalMeshSamplingRegionMaterialFilter>
    open var BoneFilters: Array<SkeletalMeshSamplingRegionBoneFilter>
    open fun clone(): SkeletalMeshSamplingRegion

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegion
        fun C(Other: Any): SkeletalMeshSamplingRegion
    }
}

external open class SkeletalMeshSamplingLODBuiltData {
    open fun clone(): SkeletalMeshSamplingLODBuiltData

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingLODBuiltData
        fun C(Other: Any): SkeletalMeshSamplingLODBuiltData
    }
}

external open class SkeletalMeshSamplingRegionBuiltData {
    open fun clone(): SkeletalMeshSamplingRegionBuiltData

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegionBuiltData
        fun C(Other: Any): SkeletalMeshSamplingRegionBuiltData
    }
}

external open class SkeletalMeshSamplingBuiltData {
    open var WholeMeshBuiltData: Array<SkeletalMeshSamplingLODBuiltData>
    open var RegionBuiltData: Array<SkeletalMeshSamplingRegionBuiltData>
    open fun clone(): SkeletalMeshSamplingBuiltData

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingBuiltData
        fun C(Other: Any): SkeletalMeshSamplingBuiltData
    }
}

external open class SkeletalMeshSamplingInfo {
    open var Regions: Array<SkeletalMeshSamplingRegion>
    open var BuiltData: SkeletalMeshSamplingBuiltData
    open fun clone(): SkeletalMeshSamplingInfo

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingInfo
        fun C(Other: Any): SkeletalMeshSamplingInfo
    }
}

external open class SkinWeightProfileInfo {
    open var Name: String
    open var DefaultProfile: PerPlatformBool
    open var DefaultProfileFromLODIndex: PerPlatformInt
    open var PerLODSourceFiles: Any
    open fun clone(): SkinWeightProfileInfo

    companion object {
        fun C(Other: UObject): SkinWeightProfileInfo
        fun C(Other: Any): SkinWeightProfileInfo
    }
}

external interface `T$178` {
    var OutTransform: Transform
    var OutBoneIndex: Number
    var OutIndex: Number
    var `$`: SkeletalMeshSocket
}

external interface `T$179` {
    var OutIndex: Number
    var `$`: SkeletalMeshSocket
}

external interface `T$180` {
    var OutBuildOptions: SkeletalMeshBuildSettings
}

external open class SkeletalMesh : StreamableRenderAsset {
    constructor()
    constructor(Outer: UObject)
    open var MeshEditorDataObject: SkeletalMeshEditorData
    open var Skeleton: Skeleton
    open var ImportedBounds: BoxSphereBounds
    open var ExtendedBounds: BoxSphereBounds
    open var PositiveBoundsExtension: Vector
    open var NegativeBoundsExtension: Vector
    open var Materials: Array<SkeletalMaterial>
    open var SkelMirrorTable: Array<BoneMirrorInfo>
    open var LODInfo: Array<SkeletalMeshLODInfo>
    open var MinLOD: PerPlatformInt
    open var DisableBelowMinLodStripping: PerPlatformBool
    open var bOverrideLODStreamingSettings: Boolean
    open var bSupportLODStreaming: PerPlatformBool
    open var MaxNumStreamedLODs: PerPlatformInt
    open var MaxNumOptionalLODs: PerPlatformInt
    open var LODSettings: SkeletalMeshLODSettings
    open var DefaultAnimatingRig: UObject
    open var SkelMirrorAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var SkelMirrorFlipAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var bUseFullPrecisionUVs: Boolean
    open var bUseHighPrecisionTangentBasis: Boolean
    open var bHasBeenSimplified: Boolean
    open var bHasVertexColors: Boolean
    open var bEnablePerPolyCollision: Boolean
    open var VertexColorGuid: Guid
    open var BodySetup: BodySetup
    open var PhysicsAsset: PhysicsAsset
    open var ShadowPhysicsAsset: PhysicsAsset
    open var NodeMappingData: Array<NodeMappingContainer>
    open var AssetImportData: AssetImportData
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var ThumbnailInfo: ThumbnailInfo
    open var bHasCustomDefaultEditorCamera: Boolean
    open var DefaultEditorCameraLocation: Vector
    open var DefaultEditorCameraRotation: Rotator
    open var DefaultEditorCameraLookAt: Vector
    open var DefaultEditorCameraOrthoZoom: Number
    open var PreviewAttachedAssetContainer: PreviewAssetAttachContainer
    open var bSupportRayTracing: Boolean
    open var RayTracingMinLOD: Number
    open var ClothLODBiasMode: String /* "MappingsToSameLOD" | "MappingsToMinLOD" | "MappingsToAnyLOD" | "EClothLODBiasMode_MAX" */
    open var MorphTargets: Array<MorphTarget>
    open var FloorOffset: Number
    open var RetargetBasePose: Array<Transform>
    open var ClothingAssets: Array<ClothingAssetData_Legacy>
    open var PostProcessAnimBlueprint: UnrealEngineClass
    open var MeshClothingAssets: Array<ClothingAssetBase>
    open var SamplingInfo: SkeletalMeshSamplingInfo
    open var AssetUserData: Array<AssetUserData>
    open var Sockets: Array<SkeletalMeshSocket>
    open var SkinWeightProfiles: Array<SkinWeightProfileInfo>
    open fun SetSkeleton(InSkeleton: Skeleton)
    open fun SetMorphTargets(InMorphTargets: Array<MorphTarget>)
    open fun SetMeshClothingAssets(InMeshClothingAssets: Array<ClothingAssetBase>)
    open fun SetMaterials(InMaterials: Array<SkeletalMaterial>)
    open fun SetLODSettings(InLODSettings: SkeletalMeshLODSettings)
    open fun SetDefaultAnimatingRig(InAnimatingRig: UObject)
    open fun NumSockets(): Number
    open fun GetAllMorphTargetNames(): Array<String>
    open fun IsSectionUsingCloth(InSectionIndex: Number, bCheckCorrespondingSections: Boolean): Boolean
    open fun GetSocketByIndex(index: Number): SkeletalMeshSocket
    open fun GetSkeleton(): Skeleton
    open fun GetShadowPhysicsAsset(): PhysicsAsset
    open fun GetPhysicsAsset(): PhysicsAsset
    open fun GetNodeMappingData(): Array<NodeMappingContainer>
    open fun GetNodeMappingContainer(SourceAsset: Blueprint): NodeMappingContainer
    open fun GetMorphTargets(): Array<MorphTarget>
    open fun GetMeshClothingAssets(): Array<ClothingAssetBase>
    open fun GetMaterials(): Array<SkeletalMaterial>
    open fun GetLODSettings(): SkeletalMeshLODSettings
    open fun GetImportedBounds(): BoxSphereBounds
    open fun GetDefaultAnimatingRig(): UObject
    open fun GetBounds(): BoxSphereBounds
    open fun FindSocketInfo(InSocketName: String, OutTransform: Transform = definedExternally, OutBoneIndex: Number = definedExternally, OutIndex: Number = definedExternally): `T$178`
    open fun FindSocketAndIndex(InSocketName: String, OutIndex: Number = definedExternally): `T$179`
    open fun FindSocket(InSocketName: String): SkeletalMeshSocket
    open fun GetPhysicsBodySetupFromMesh(InName: String): BodySetup
    open fun CreatePhysicsAsset(): PhysicsAsset
    open fun GetLodBuildSettings(LODIndex: Number, OutBuildOptions: SkeletalMeshBuildSettings = definedExternally): `T$180`
    open fun GetLODCount(): Number
    open fun GetNumVerts(LODIndex: Number): Number
    open fun ImportLOD(LODIndex: Number, SourceFilename: String): Number
    open fun RegenerateLOD(NewLODCount: Number, bRegenerateEvenIfImported: Boolean, bGenerateBaseLOD: Boolean): Boolean
    open fun ReimportAllCustomLODs(): Boolean
    open fun RemoveLODs(ToRemoveLODs: Array<Number>): Boolean
    open fun RenameSocket(OldName: String, NewName: String): Boolean
    open fun SetLodBuildSettings(LODIndex: Number, BuildOptions: SkeletalMeshBuildSettings)
    open fun StripLODGeometry(LODIndex: Number, TextureMask: Texture2D, Threshold: Number): Boolean

    companion object {
        fun Load(ResourceName: String): SkeletalMesh
        fun Find(Outer: UObject, ResourceName: String): SkeletalMesh
        fun GetDefaultObject(): SkeletalMesh
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMesh
        fun C(Other: UObject): SkeletalMesh
        fun C(Other: Any): SkeletalMesh
        fun GetPhysicsBodySetupFromMesh(InSkeletalMesh: SkeletalMesh, InName: String): BodySetup
        fun CreatePhysicsAsset(SkeletalMesh: SkeletalMesh): PhysicsAsset
        fun GetLodBuildSettings(SkeletalMesh: SkeletalMesh, LODIndex: Number, OutBuildOptions: SkeletalMeshBuildSettings = definedExternally): `T$180`
        fun GetLODCount(SkeletalMesh: SkeletalMesh): Number
        fun GetNumVerts(SkeletalMesh: SkeletalMesh, LODIndex: Number): Number
        fun ImportLOD(BaseMesh: SkeletalMesh, LODIndex: Number, SourceFilename: String): Number
        fun RegenerateLOD(SkeletalMesh: SkeletalMesh, NewLODCount: Number, bRegenerateEvenIfImported: Boolean, bGenerateBaseLOD: Boolean): Boolean
        fun ReimportAllCustomLODs(SkeletalMesh: SkeletalMesh): Boolean
        fun RemoveLODs(SkeletalMesh: SkeletalMesh, ToRemoveLODs: Array<Number>): Boolean
        fun RenameSocket(SkeletalMesh: SkeletalMesh, OldName: String, NewName: String): Boolean
        fun SetLodBuildSettings(SkeletalMesh: SkeletalMesh, LODIndex: Number, BuildOptions: SkeletalMeshBuildSettings)
        fun StripLODGeometry(SkeletalMesh: SkeletalMesh, LODIndex: Number, TextureMask: Texture2D, Threshold: Number): Boolean
    }
}

external open class MeshDeformer : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MeshDeformer
        fun Find(Outer: UObject, ResourceName: String): MeshDeformer
        fun GetDefaultObject(): MeshDeformer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshDeformer
        fun C(Other: UObject): MeshDeformer
        fun C(Other: Any): MeshDeformer
    }
}

external open class MeshDeformerInstance : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MeshDeformerInstance
        fun Find(Outer: UObject, ResourceName: String): MeshDeformerInstance
        fun GetDefaultObject(): MeshDeformerInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshDeformerInstance
        fun C(Other: UObject): MeshDeformerInstance
        fun C(Other: Any): MeshDeformerInstance
    }
}

external open class SkelMeshComponentLODInfo {
    open var HiddenMaterials: Array<Boolean>
    open fun clone(): SkelMeshComponentLODInfo

    companion object {
        fun C(Other: UObject): SkelMeshComponentLODInfo
        fun C(Other: Any): SkelMeshComponentLODInfo
    }
}

external object EVisibilityBasedAnimTickOption {
    var AlwaysTickPoseAndRefreshBones: String /* "AlwaysTickPoseAndRefreshBones" */
    var AlwaysTickPose: String /* "AlwaysTickPose" */
    var OnlyTickMontagesWhenNotRendered: String /* "OnlyTickMontagesWhenNotRendered" */
    var OnlyTickPoseWhenRendered: String /* "OnlyTickPoseWhenRendered" */
    var EVisibilityBasedAnimTickOption_MAX: String /* "EVisibilityBasedAnimTickOption_MAX" */
}

external interface `T$181` {
    var Bone0: Number
    var Weight0: Number
    var Bone1: Number
    var Weight1: Number
    var Bone2: Number
    var Weight2: Number
    var Bone3: Number
    var Weight3: Number
}

external open class SkelMeshSkinWeightInfo {
    open var Bones: Number
    open var Weights: Number
    open fun clone(): SkelMeshSkinWeightInfo
    open fun BreakSkinWeightInfo(Bone0: Number = definedExternally, Weight0: Number = definedExternally, Bone1: Number = definedExternally, Weight1: Number = definedExternally, Bone2: Number = definedExternally, Weight2: Number = definedExternally, Bone3: Number = definedExternally, Weight3: Number = definedExternally): `T$181`

    companion object {
        fun C(Other: UObject): SkelMeshSkinWeightInfo
        fun C(Other: Any): SkelMeshSkinWeightInfo
        fun BreakSkinWeightInfo(InWeight: SkelMeshSkinWeightInfo, Bone0: Number = definedExternally, Weight0: Number = definedExternally, Bone1: Number = definedExternally, Weight1: Number = definedExternally, Bone2: Number = definedExternally, Weight2: Number = definedExternally, Bone3: Number = definedExternally, Weight3: Number = definedExternally): `T$181`
        fun MakeSkinWeightInfo(Bone0: Number, Weight0: Number, Bone1: Number, Weight1: Number, Bone2: Number, Weight2: Number, Bone3: Number, Weight3: Number): SkelMeshSkinWeightInfo
    }
}

external object EPhysBodyOp {
    var PBO_None: String /* "PBO_None" */
    var PBO_Term: String /* "PBO_Term" */
    var PBO_MAX: String /* "PBO_MAX" */
}

external interface `T$182` {
    var OutPosition: Vector
    var OutRotation: Rotator
}

external interface `T$183` {
    var OutTwistAngle: Number
    var OutSwingAngle: Number
    var `$`: Boolean
}

external interface `T$184` {
    var BoneLocation: Vector
    var `$`: String
}

external open class SkinnedMeshComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var SkeletalMesh: SkeletalMesh
    open var MasterPoseComponent: Any
    open var SkinCacheUsage: Array<String /* "Auto" | "Disabled" | "Enabled" | "ESkinCacheUsage_MAX" */>
    open var MeshDeformer: MeshDeformer
    open var MeshDeformerInstance: MeshDeformerInstance
    open var WireframeColor: Color
    open var PhysicsAssetOverride: PhysicsAsset
    open var ForcedLodModel: Number
    open var MinLodModel: Number
    open var StreamingDistanceMultiplier: Number
    open var LODInfo: Array<SkelMeshComponentLODInfo>
    open var VisibilityBasedAnimTickOption: String /* "AlwaysTickPoseAndRefreshBones" | "AlwaysTickPose" | "OnlyTickMontagesWhenNotRendered" | "OnlyTickPoseWhenRendered" | "EVisibilityBasedAnimTickOption_MAX" */
    open var bOverrideMinLOD: Boolean
    open var bUseBoundsFromMasterPoseComponent: Boolean
    open var bForceWireframe: Boolean
    open var bDisplayBones: Boolean
    open var bDisableMorphTarget: Boolean
    open var bHideSkin: Boolean
    open var bPerBoneMotionBlur: Boolean
    open var bComponentUseFixedSkelBounds: Boolean
    open var bConsiderAllBodiesForBounds: Boolean
    open var bSyncAttachParentLOD: Boolean
    open var bCanHighlightSelectedSections: Boolean
    open var bRecentlyRendered: Boolean
    open var bCastCapsuleDirectShadow: Boolean
    open var bCastCapsuleIndirectShadow: Boolean
    open var bCPUSkinning: Boolean
    open var bEnableUpdateRateOptimizations: Boolean
    open var bDisplayDebugUpdateRateOptimizations: Boolean
    open var bRenderStatic: Boolean
    open var bIgnoreMasterPoseComponentLOD: Boolean
    open var bCachedLocalBoundsUpToDate: Boolean
    open var bCachedWorldSpaceBoundsUpToDate: Boolean
    open var bForceMeshObjectUpdate: Boolean
    open var CapsuleIndirectShadowMinVisibility: Number
    open var CachedWorldOrLocalSpaceBounds: BoxSphereBounds
    open var CachedWorldToLocalTransform: Matrix
    open fun UnloadSkinWeightProfile(InProfileName: String)
    open fun UnHideBoneByName(BoneName: String)
    open fun TransformToBoneSpace(BoneName: String, InPosition: Vector, InRotation: Rotator, OutPosition: Vector = definedExternally, OutRotation: Rotator = definedExternally): `T$182`
    open fun TransformFromBoneSpace(BoneName: String, InPosition: Vector, InRotation: Rotator, OutPosition: Vector = definedExternally, OutRotation: Rotator = definedExternally): `T$182`
    open fun ShowMaterialSection(MaterialID: Number, SectionIndex: Number, bShow: Boolean, LODIndex: Number)
    open fun ShowAllMaterialSections(LODIndex: Number)
    open fun SetVertexOffsetUsage(LODIndex: Number, Usage: Number)
    open fun SetVertexColorOverride(LODIndex: Number, VertexColors: Array<LinearColor>)
    open fun SetSkinWeightProfile(InProfileName: String): Boolean
    open fun SetSkinWeightOverride(LODIndex: Number, SkinWeights: Array<SkelMeshSkinWeightInfo>)
    open fun SetSkeletalMesh(NewMesh: SkeletalMesh, bReinitPose: Boolean)
    open fun SetRenderStatic(bNewValue: Boolean)
    open fun SetPreSkinningOffsets(LODIndex: Number, Offsets: Array<Vector>)
    open fun SetPostSkinningOffsets(LODIndex: Number, Offsets: Array<Vector>)
    open fun SetPhysicsAsset(NewPhysicsAsset: PhysicsAsset, bForceReInit: Boolean)
    open fun SetMinLOD(InNewMinLOD: Number)
    open fun SetMeshDeformer(InMeshDeformer: MeshDeformer)
    open fun SetMasterPoseComponent(NewMasterBoneComponent: SkinnedMeshComponent, bForceUpdate: Boolean)
    open fun SetForcedLOD(InNewForcedLOD: Number)
    open fun SetCastCapsuleIndirectShadow(bNewValue: Boolean)
    open fun SetCastCapsuleDirectShadow(bNewValue: Boolean)
    open fun SetCapsuleIndirectShadowMinVisibility(NewValue: Number)
    open fun IsUsingSkinWeightProfile(): Boolean
    open fun IsMaterialSectionShown(MaterialID: Number, LODIndex: Number): Boolean
    open fun IsBoneHiddenByName(BoneName: String): Boolean
    open fun HideBoneByName(BoneName: String, PhysBodyOption: String /* "PBO_None" | "PBO_Term" | "PBO_MAX" */)
    open fun GetVertexOffsetUsage(LODIndex: Number): Number
    open fun GetTwistAndSwingAngleOfDeltaRotationFromRefPose(BoneName: String, OutTwistAngle: Number = definedExternally, OutSwingAngle: Number = definedExternally): `T$183`
    open fun GetSocketBoneName(InSocketName: String): String
    open fun GetRefPoseTransform(BoneIndex: Number): Transform
    open fun GetRefPosePosition(BoneIndex: Number): Vector
    open fun GetParentBone(BoneName: String): String
    open fun GetNumLODs(): Number
    open fun GetNumBones(): Number
    open fun GetForcedLOD(): Number
    open fun GetDeltaTransformFromRefPose(BoneName: String, BaseName: String): Transform
    open fun GetCurrentSkinWeightProfileName(): String
    open fun GetBoneName(BoneIndex: Number): String
    open fun GetBoneIndex(BoneName: String): Number
    open fun FindClosestBone(TestLocation: Vector, BoneLocation: Vector = definedExternally, IgnoreScale: Number = definedExternally, bRequirePhysicsAsset: Boolean = definedExternally): `T$184`
    open fun ClearVertexColorOverride(LODIndex: Number)
    open fun ClearSkinWeightProfile()
    open fun ClearSkinWeightOverride(LODIndex: Number)
    open fun BoneIsChildOf(BoneName: String, ParentBoneName: String): Boolean

    companion object {
        fun Load(ResourceName: String): SkinnedMeshComponent
        fun Find(Outer: UObject, ResourceName: String): SkinnedMeshComponent
        fun GetDefaultObject(): SkinnedMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkinnedMeshComponent
        fun C(Other: UObject): SkinnedMeshComponent
        fun C(Other: Any): SkinnedMeshComponent
    }
}

external open class SingleAnimationPlayData {
    open var AnimToPlay: AnimationAsset
    open var bSavedLooping: Boolean
    open var bSavedPlaying: Boolean
    open var SavedPosition: Number
    open var SavedPlayRate: Number
    open fun clone(): SingleAnimationPlayData

    companion object {
        fun C(Other: UObject): SingleAnimationPlayData
        fun C(Other: Any): SingleAnimationPlayData
    }
}

external object EKinematicBonesUpdateToPhysics {
    var SkipSimulatingBones: String /* "SkipSimulatingBones" */
    var SkipAllBones: String /* "SkipAllBones" */
    var EKinematicBonesUpdateToPhysics_MAX: String /* "EKinematicBonesUpdateToPhysics_MAX" */
}

external object EPhysicsTransformUpdateMode {
    var SimulationUpatesComponentTransform: String /* "SimulationUpatesComponentTransform" */
    var ComponentTransformIsKinematic: String /* "ComponentTransformIsKinematic" */
    var EPhysicsTransformUpdateMode_MAX: String /* "EPhysicsTransformUpdateMode_MAX" */
}

external object EAnimationMode {
    var AnimationBlueprint: String /* "AnimationBlueprint" */
    var AnimationSingleNode: String /* "AnimationSingleNode" */
    var AnimationCustomMode: String /* "AnimationCustomMode" */
    var EAnimationMode_MAX: String /* "EAnimationMode_MAX" */
}

external open class ClothingSimulationFactory : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingSimulationFactory
        fun Find(Outer: UObject, ResourceName: String): ClothingSimulationFactory
        fun GetDefaultObject(): ClothingSimulationFactory
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingSimulationFactory
        fun C(Other: UObject): ClothingSimulationFactory
        fun C(Other: Any): ClothingSimulationFactory
    }
}

external open class ClothingInteractor : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingInteractor
        fun Find(Outer: UObject, ResourceName: String): ClothingInteractor
        fun GetDefaultObject(): ClothingInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingInteractor
        fun C(Other: UObject): ClothingInteractor
        fun C(Other: Any): ClothingInteractor
    }
}

external open class ClothingSimulationInteractor : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ClothingInteractors: Any
    open fun SetNumSubsteps(NumSubsteps: Number)
    open fun SetNumIterations(NumIterations: Number)
    open fun SetMaxNumIterations(MaxNumIterations: Number)
    open fun SetAnimDriveSpringStiffness(InStiffness: Number)
    open fun PhysicsAssetUpdated()
    open fun GetSimulationTime(): Number
    open fun GetNumSubsteps(): Number
    open fun GetNumKinematicParticles(): Number
    open fun GetNumIterations(): Number
    open fun GetNumDynamicParticles(): Number
    open fun GetNumCloths(): Number
    open fun GetClothingInteractor(ClothingAssetName: String): ClothingInteractor
    open fun EnableGravityOverride(InVector: Vector)
    open fun DisableGravityOverride()
    open fun ClothConfigUpdated()

    companion object {
        fun Load(ResourceName: String): ClothingSimulationInteractor
        fun Find(Outer: UObject, ResourceName: String): ClothingSimulationInteractor
        fun GetDefaultObject(): ClothingSimulationInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingSimulationInteractor
        fun C(Other: UObject): ClothingSimulationInteractor
        fun C(Other: Any): ClothingSimulationInteractor
    }
}

external object ECustomBoneAttributeLookup {
    var BoneOnly: String /* "BoneOnly" */
    var ImmediateParent: String /* "ImmediateParent" */
    var ParentHierarchy: String /* "ParentHierarchy" */
    var ECustomBoneAttributeLookup_MAX: String /* "ECustomBoneAttributeLookup_MAX" */
}

external object ERelativeTransformSpace {
    var RTS_World: String /* "RTS_World" */
    var RTS_Actor: String /* "RTS_Actor" */
    var RTS_Component: String /* "RTS_Component" */
    var RTS_ParentBoneSpace: String /* "RTS_ParentBoneSpace" */
    var RTS_MAX: String /* "RTS_MAX" */
}

external interface `T$185` {
    var ClosestWorldPosition: Vector
    var Normal: Vector
    var BoneName: String
    var Distance: Number
    var `$`: Boolean
}

external interface `T$186` {
    var OutValue: Transform
    var `$`: Boolean
}

external interface `T$187` {
    var OutValue: String
    var `$`: Boolean
}

external interface `T$188` {
    var OutLinkedInstances: Array<AnimInstance>
}

external interface `T$189` {
    var OutValue: Number
    var `$`: Boolean
}

external interface `T$190` {
    var Swing1Angle: Number
    var TwistAngle: Number
    var Swing2Angle: Number
}

external interface `T$191` {
    var OutConstraints: Array<ConstraintInstanceAccessor>
}

external interface `T$192` {
    var OutConstraints: Array<ConstraintInstanceAccessor>
}

external open class SkeletalMeshComponent : SkinnedMeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var AnimationBlueprint: AnimBlueprint
    open var AnimBlueprintGeneratedClass: UnrealEngineClass
    open var AnimClass: UnrealEngineClass
    open var AnimScriptInstance: AnimInstance
    open var SubInstances: Array<AnimInstance>
    open var PostProcessAnimInstance: AnimInstance
    open var AnimationData: SingleAnimationPlayData
    open var RootBoneTranslation: Vector
    open var LineCheckBoundsScale: Vector
    open var LinkedInstances: Array<AnimInstance>
    open var CachedBoneSpaceTransforms: Array<Transform>
    open var CachedComponentSpaceTransforms: Array<Transform>
    open var GlobalAnimRateScale: Number
    open var KinematicBonesUpdateType: String /* "SkipSimulatingBones" | "SkipAllBones" | "EKinematicBonesUpdateToPhysics_MAX" */
    open var PhysicsTransformUpdateMode: String /* "SimulationUpatesComponentTransform" | "ComponentTransformIsKinematic" | "EPhysicsTransformUpdateMode_MAX" */
    open var AnimationMode: String /* "AnimationBlueprint" | "AnimationSingleNode" | "AnimationCustomMode" | "EAnimationMode_MAX" */
    open var bDisablePostProcessBlueprint: Boolean
    open var bUpdateOverlapsOnAnimationFinalize: Boolean
    open var bHasValidBodies: Boolean
    open var bBlendPhysics: Boolean
    open var bEnablePhysicsOnDedicatedServer: Boolean
    open var bUpdateJointsFromAnimation: Boolean
    open var bAllowClothActors: Boolean
    open var bDisableClothSimulation: Boolean
    open var bDisableRigidBodyAnimNode: Boolean
    open var bAllowAnimCurveEvaluation: Boolean
    open var bDisableAnimCurves: Boolean
    open var bCollideWithEnvironment: Boolean
    open var bCollideWithAttachedChildren: Boolean
    open var bForceCollisionUpdate: Boolean
    open var bLocalSpaceSimulation: Boolean
    open var bResetAfterTeleport: Boolean
    open var bDeferKinematicBoneUpdate: Boolean
    open var bNoSkeletonUpdate: Boolean
    open var bPauseAnims: Boolean
    open var bUseRefPoseOnInitAnim: Boolean
    open var bEnablePerPolyCollision: Boolean
    open var bForceRefpose: Boolean
    open var bOnlyAllowAutonomousTickPose: Boolean
    open var bIsAutonomousTickPose: Boolean
    open var bOldForceRefPose: Boolean
    open var bShowPrePhysBones: Boolean
    open var bRequiredBonesUpToDate: Boolean
    open var bAnimTreeInitialised: Boolean
    open var bIncludeComponentLocationIntoBounds: Boolean
    open var bEnableLineCheckWithBounds: Boolean
    open var bPropagateCurvesToSlaves: Boolean
    open var bSkipKinematicUpdateWhenInterpolating: Boolean
    open var bSkipBoundsUpdateWhenInterpolating: Boolean
    open var bUpdateAnimationInEditor: Boolean
    open var bUpdateClothInEditor: Boolean
    open var bOverrideDefaultAnimatingRig: Boolean
    open var bNeedsQueuedAnimEventsDispatched: Boolean
    open var CachedAnimCurveUidVersion: Any
    open var ClothBlendWeight: Number
    open var bWaitForParallelClothTask: Boolean
    open var DisallowedAnimCurves: Array<String>
    open var BodySetup: BodySetup
    open var ClothMaxDistanceScale: Number
    open var OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: Number) -> Unit>
    open var OnPlasticDeformation: UnrealEngineMulticastDelegate<(ConstraintIndex: Number) -> Unit>
    open var ClothingSimulationFactory: UnrealEngineClass
    open var TeleportDistanceThreshold: Number
    open var TeleportRotationThreshold: Number
    open var LastPoseTickFrame: Any
    open var ClothingInteractor: ClothingSimulationInteractor
    open var OnAnimInitialized: UnrealEngineMulticastDelegate<() -> Unit>
    open var SequenceToPlay: AnimSequence
    open var AnimToPlay: AnimationAsset
    open var bDefaultLooping: Boolean
    open var bDefaultPlaying: Boolean
    open var DefaultPosition: Number
    open var DefaultPlayRate: Number
    open var DefaultAnimatingRigOverride: UObject
    open fun UnlinkAnimClassLayers(InClass: UnrealEngineClass)
    open fun UnbindClothFromMasterPoseComponent(bRestoreSimulationSpace: Boolean)
    open fun ToggleDisablePostProcessBlueprint()
    open fun TermBodiesBelow(ParentBoneName: String)
    open fun SuspendClothingSimulation()
    open fun Stop()
    open fun SnapshotPose(Snapshot: PoseSnapshot = definedExternally): `T$72`
    open fun SetUpdateClothInEditor(NewUpdateState: Boolean)
    open fun SetUpdateAnimationInEditor(NewUpdateState: Boolean)
    open fun SetTeleportRotationThreshold(Threshold: Number)
    open fun SetTeleportDistanceThreshold(Threshold: Number)
    open fun SetPosition(InPos: Number, bFireNotifies: Boolean)
    open fun SetPlayRate(Rate: Number)
    open fun SetPhysicsBlendWeight(PhysicsBlendWeight: Number)
    open fun SetNotifyRigidBodyCollisionBelow(bNewNotifyRigidBodyCollision: Boolean, BoneName: String, bIncludeSelf: Boolean)
    open fun SetMorphTarget(MorphTargetName: String, Value: Number, bRemoveZeroWeight: Boolean)
    open fun SetEnablePhysicsBlending(bNewBlendPhysics: Boolean)
    open fun SetEnableGravityOnAllBodiesBelow(bEnableGravity: Boolean, BoneName: String, bIncludeSelf: Boolean)
    open fun SetEnableBodyGravity(bEnableGravity: Boolean, BoneName: String)
    open fun SetDisablePostProcessBlueprint(bInDisablePostProcess: Boolean)
    open fun SetDisableAnimCurves(bInDisableAnimCurves: Boolean)
    open fun SetDefaultAnimatingRigOverride(InAnimatingRig: UObject)
    open fun SetConstraintProfileForAll(ProfileName: String, bDefaultIfNotFound: Boolean)
    open fun SetConstraintProfile(JointName: String, ProfileName: String, bDefaultIfNotFound: Boolean)
    open fun SetClothMaxDistanceScale(Scale: Number)
    open fun SetBodyNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: Boolean, BoneName: String)
    open fun SetAnimInstanceClass(NewClass: UnrealEngineClass)
    open fun SetAnimationMode(InAnimationMode: String /* "AnimationBlueprint" | "AnimationSingleNode" | "AnimationCustomMode" | "EAnimationMode_MAX" */)
    open fun SetAnimation(NewAnimToPlay: AnimationAsset)
    open fun SetAngularLimits(InBoneName: String, Swing1LimitAngle: Number, TwistLimitAngle: Number, Swing2LimitAngle: Number)
    open fun SetAllowRigidBodyAnimNode(bInAllow: Boolean, bReinitAnim: Boolean)
    open fun SetAllowedAnimCurvesEvaluation(List: Array<String>, bAllow: Boolean)
    open fun SetAllowClothActors(bInAllow: Boolean)
    open fun SetAllowAnimCurveEvaluation(bInAllow: Boolean)
    open fun SetAllMotorsAngularVelocityDrive(bEnableSwingDrive: Boolean, bEnableTwistDrive: Boolean, bSkipCustomPhysicsType: Boolean)
    open fun SetAllMotorsAngularPositionDrive(bEnableSwingDrive: Boolean, bEnableTwistDrive: Boolean, bSkipCustomPhysicsType: Boolean)
    open fun SetAllMotorsAngularDriveParams(InSpring: Number, InDamping: Number, InForceLimit: Number, bSkipCustomPhysicsType: Boolean)
    open fun SetAllBodiesSimulatePhysics(bNewSimulate: Boolean)
    open fun SetAllBodiesPhysicsBlendWeight(PhysicsBlendWeight: Number, bSkipCustomPhysicsType: Boolean)
    open fun SetAllBodiesBelowSimulatePhysics(InBoneName: String, bNewSimulate: Boolean, bIncludeSelf: Boolean)
    open fun SetAllBodiesBelowPhysicsDisabled(InBoneName: String, bDisabled: Boolean, bIncludeSelf: Boolean)
    open fun SetAllBodiesBelowPhysicsBlendWeight(InBoneName: String, PhysicsBlendWeight: Number, bSkipCustomPhysicsType: Boolean, bIncludeSelf: Boolean)
    open fun SetAllBodiesBelowLinearVelocity(InBoneName: String, LinearVelocity: Vector, bIncludeSelf: Boolean)
    open fun ResumeClothingSimulation()
    open fun ResetClothTeleportMode()
    open fun ResetAnimInstanceDynamics(InTeleportType: String /* "None" | "TeleportPhysics" | "ResetPhysics" | "ETeleportType_MAX" */)
    open fun ResetAllowedAnimCurveEvaluation()
    open fun ResetAllBodiesSimulatePhysics()
    open fun PlayAnimation(NewAnimToPlay: AnimationAsset, bLooping: Boolean)
    open fun Play(bLooping: Boolean)
    open fun OverrideAnimationData(InAnimToPlay: AnimationAsset, bIsLooping: Boolean, bIsPlaying: Boolean, position: Number, PlayRate: Number)
    open fun LinkAnimGraphByTag(InTag: String, InClass: UnrealEngineClass)
    open fun LinkAnimClassLayers(InClass: UnrealEngineClass)
    open fun GetClosestPointOnPhysicsAsset(WorldPosition: Vector, ClosestWorldPosition: Vector = definedExternally, Normal: Vector = definedExternally, BoneName: String = definedExternally, Distance: Number = definedExternally): `T$185`
    open fun IsPlaying(): Boolean
    open fun IsClothingSimulationSuspended(): Boolean
    open fun IsBodyGravityEnabled(BoneName: String): Boolean
    open fun HasValidAnimationInstance(): Boolean
    open fun GetTransformAttribute_Ref(BoneName: String, AttributeName: String, OutValue: Transform = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$186`
    open fun GetTransformAttribute(BoneName: String, AttributeName: String, DefaultValue: Transform, OutValue: Transform = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$186`
    open fun GetTeleportRotationThreshold(): Number
    open fun GetTeleportDistanceThreshold(): Number
    open fun GetStringAttribute_Ref(BoneName: String, AttributeName: String, OutValue: String = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$187`
    open fun GetStringAttribute(BoneName: String, AttributeName: String, DefaultValue: String, OutValue: String = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$187`
    open fun GetSkeletalCenterOfMass(): Vector
    open fun GetPostProcessInstance(): AnimInstance
    open fun GetPosition(): Number
    open fun GetPlayRate(): Number
    open fun GetMorphTarget(MorphTargetName: String): Number
    open fun GetLinkedAnimLayerInstanceByGroup(InGroup: String): AnimInstance
    open fun GetLinkedAnimLayerInstanceByClass(InClass: UnrealEngineClass): AnimInstance
    open fun GetLinkedAnimGraphInstancesByTag(InTag: String, OutLinkedInstances: Array<AnimInstance> = definedExternally): `T$188`
    open fun GetLinkedAnimGraphInstanceByTag(InTag: String): AnimInstance
    open fun GetIntegerAttribute_Ref(BoneName: String, AttributeName: String, OutValue: Number = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$189`
    open fun GetIntegerAttribute(BoneName: String, AttributeName: String, DefaultValue: Number, OutValue: Number = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$189`
    open fun GetFloatAttribute_Ref(BoneName: String, AttributeName: String, OutValue: Number = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$189`
    open fun GetFloatAttribute(BoneName: String, AttributeName: String, DefaultValue: Number, OutValue: Number = definedExternally, LookupType: String /* "BoneOnly" | "ImmediateParent" | "ParentHierarchy" | "ECustomBoneAttributeLookup_MAX" */ = definedExternally): `T$189`
    open fun GetDisablePostProcessBlueprint(): Boolean
    open fun GetDisableAnimCurves(): Boolean
    open fun GetDefaultAnimatingRigOverride(): UObject
    open fun GetDefaultAnimatingRig(): UObject
    open fun GetCurrentJointAngles(InBoneName: String, Swing1Angle: Number = definedExternally, TwistAngle: Number = definedExternally, Swing2Angle: Number = definedExternally): `T$190`
    open fun GetConstraintsFromBody(BodyName: String, bParentConstraints: Boolean, bChildConstraints: Boolean, bIncludesTerminated: Boolean, OutConstraints: Array<ConstraintInstanceAccessor> = definedExternally): `T$191`
    open fun GetConstraints(bIncludesTerminated: Boolean, OutConstraints: Array<ConstraintInstanceAccessor> = definedExternally): `T$192`
    open fun GetConstraintByName(ConstraintName: String, bIncludesTerminated: Boolean): ConstraintInstanceAccessor
    open fun GetClothMaxDistanceScale(): Number
    open fun GetClothingSimulationInteractor(): ClothingSimulationInteractor
    open fun GetBoneMass(BoneName: String, bScaleMass: Boolean): Number
    open fun GetBoneLinearVelocity(InBoneName: String): Vector
    open fun GetAnimInstance(): AnimInstance
    open fun GetAnimClass(): UnrealEngineClass
    open fun GetAnimationMode(): String /* "AnimationBlueprint" | "AnimationSingleNode" | "AnimationCustomMode" | "EAnimationMode_MAX" */
    open fun GetAllowRigidBodyAnimNode(): Boolean
    open fun GetAllowedAnimCurveEvaluate(): Boolean
    open fun GetAllowClothActors(): Boolean
    open fun ForceClothNextUpdateTeleportAndReset()
    open fun ForceClothNextUpdateTeleport()
    open fun FindConstraintBoneName(ConstraintIndex: Number): String
    open fun ClearMorphTargets()
    open fun BreakConstraint(Impulse: Vector, HitLocation: Vector, InBoneName: String)
    open fun BindClothToMasterPoseComponent()
    open fun AllowAnimCurveEvaluation(NameOfCurve: String, bAllow: Boolean)
    open fun AddImpulseToAllBodiesBelow(Impulse: Vector, BoneName: String, bVelChange: Boolean, bIncludeSelf: Boolean)
    open fun AddForceToAllBodiesBelow(Force: Vector, BoneName: String, bAccelChange: Boolean, bIncludeSelf: Boolean)
    open fun AccumulateAllBodiesBelowPhysicsBlendWeight(InBoneName: String, AddPhysicsBlendWeight: Number, bSkipCustomPhysicsType: Boolean)
    open fun GetPhysicsBodySetup(InName: String): BodySetup
    open fun GetDirectionBetweenSockets(SocketOrBoneNameFrom: String, SocketOrBoneNameTo: String): Vector
    open fun GetDistanceBetweenTwoSockets(SocketOrBoneNameA: String, SocketSpaceA: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, SocketOrBoneNameB: String, SocketSpaceB: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, bRemapRange: Boolean, InRangeMin: Number, InRangeMax: Number, OutRangeMin: Number, OutRangeMax: Number): Number

    companion object {
        fun Load(ResourceName: String): SkeletalMeshComponent
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshComponent
        fun GetDefaultObject(): SkeletalMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshComponent
        fun C(Other: UObject): SkeletalMeshComponent
        fun C(Other: Any): SkeletalMeshComponent
        fun GetPhysicsBodySetup(InSkeletalMeshComp: SkeletalMeshComponent, InName: String): BodySetup
        fun GetDirectionBetweenSockets(Component: SkeletalMeshComponent, SocketOrBoneNameFrom: String, SocketOrBoneNameTo: String): Vector
        fun GetDistanceBetweenTwoSockets(Component: SkeletalMeshComponent, SocketOrBoneNameA: String, SocketSpaceA: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, SocketOrBoneNameB: String, SocketSpaceB: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, bRemapRange: Boolean, InRangeMin: Number, InRangeMax: Number, OutRangeMin: Number, OutRangeMax: Number): Number
    }
}

external object EMovementMode {
    var MOVE_None: String /* "MOVE_None" */
    var MOVE_Walking: String /* "MOVE_Walking" */
    var MOVE_NavWalking: String /* "MOVE_NavWalking" */
    var MOVE_Falling: String /* "MOVE_Falling" */
    var MOVE_Swimming: String /* "MOVE_Swimming" */
    var MOVE_Flying: String /* "MOVE_Flying" */
    var MOVE_Custom: String /* "MOVE_Custom" */
    var MOVE_MAX: String /* "MOVE_MAX" */
}

external object ENetworkSmoothingMode {
    var Disabled: String /* "Disabled" */
    var Linear: String /* "Linear" */
    var Exponential: String /* "Exponential" */
    var Replay: String /* "Replay" */
    var ENetworkSmoothingMode_MAX: String /* "ENetworkSmoothingMode_MAX" */
}

external open class FindFloorResult {
    open var bBlockingHit: Boolean
    open var bWalkableFloor: Boolean
    open var bLineTrace: Boolean
    open var FloorDist: Number
    open var LineDist: Number
    open var HitResult: HitResult
    open fun clone(): FindFloorResult

    companion object {
        fun C(Other: UObject): FindFloorResult
        fun C(Other: Any): FindFloorResult
    }
}

external open class NavAvoidanceMask {
    open var bGroup0: Boolean
    open var bGroup1: Boolean
    open var bGroup2: Boolean
    open var bGroup3: Boolean
    open var bGroup4: Boolean
    open var bGroup5: Boolean
    open var bGroup6: Boolean
    open var bGroup7: Boolean
    open var bGroup8: Boolean
    open var bGroup9: Boolean
    open var bGroup10: Boolean
    open var bGroup11: Boolean
    open var bGroup12: Boolean
    open var bGroup13: Boolean
    open var bGroup14: Boolean
    open var bGroup15: Boolean
    open var bGroup16: Boolean
    open var bGroup17: Boolean
    open var bGroup18: Boolean
    open var bGroup19: Boolean
    open var bGroup20: Boolean
    open var bGroup21: Boolean
    open var bGroup22: Boolean
    open var bGroup23: Boolean
    open var bGroup24: Boolean
    open var bGroup25: Boolean
    open var bGroup26: Boolean
    open var bGroup27: Boolean
    open var bGroup28: Boolean
    open var bGroup29: Boolean
    open var bGroup30: Boolean
    open var bGroup31: Boolean
    open fun clone(): NavAvoidanceMask

    companion object {
        fun C(Other: UObject): NavAvoidanceMask
        fun C(Other: Any): NavAvoidanceMask
    }
}

external open class CharacterMovementComponentPostPhysicsTickFunction : TickFunction {
    override fun clone(): CharacterMovementComponentPostPhysicsTickFunction

    companion object {
        fun C(Other: UObject): CharacterMovementComponentPostPhysicsTickFunction
        fun C(Other: Any): CharacterMovementComponentPostPhysicsTickFunction
    }
}

external open class RootMotionSourceSettings {
    open var Flags: Number
    open fun clone(): RootMotionSourceSettings

    companion object {
        fun C(Other: UObject): RootMotionSourceSettings
        fun C(Other: Any): RootMotionSourceSettings
    }
}

external open class Vector_NetQuantize10 : Vector {
    override fun clone(): Vector_NetQuantize10
    open fun BreakVector_NetQuantize10(X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`

    companion object {
        fun C(Other: UObject): Vector_NetQuantize10
        fun C(Other: Any): Vector_NetQuantize10
        fun BreakVector_NetQuantize10(InVec: Vector_NetQuantize10, X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`
        fun MakeVector_NetQuantize10(X: Any, Y: Any, Z: Any): Vector_NetQuantize10
    }
}

external open class RootMotionSourceGroup {
    open var bHasAdditiveSources: Boolean
    open var bHasOverrideSources: Boolean
    open var bHasOverrideSourcesWithIgnoreZAccumulate: Boolean
    open var bIsAdditiveVelocityApplied: Boolean
    open var LastAccumulatedSettings: RootMotionSourceSettings
    open var LastPreAdditiveVelocity: Vector_NetQuantize10
    open fun clone(): RootMotionSourceGroup

    companion object {
        fun C(Other: UObject): RootMotionSourceGroup
        fun C(Other: Any): RootMotionSourceGroup
    }
}

external open class RootMotionMovementParams {
    open var bHasRootMotion: Boolean
    open var BlendWeight: Number
    open var RootMotionTransform: Transform
    open fun clone(): RootMotionMovementParams

    companion object {
        fun C(Other: UObject): RootMotionMovementParams
        fun C(Other: Any): RootMotionMovementParams
    }
}

external interface `T$193` {
    var FloorResult: FindFloorResult
}

external open class CharacterMovementComponent : PawnMovementComponent {
    constructor()
    constructor(Outer: UObject)
    open var CharacterOwner: Character
    open var GravityScale: Number
    open var MaxStepHeight: Number
    open var JumpZVelocity: Number
    open var JumpOffJumpZFactor: Number
    open var WalkableFloorAngle: Number
    open var WalkableFloorZ: Number
    open var MovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var CustomMovementMode: Number
    open var NetworkSmoothingMode: String /* "Disabled" | "Linear" | "Exponential" | "Replay" | "ENetworkSmoothingMode_MAX" */
    open var GroundFriction: Number
    open var MaxWalkSpeed: Number
    open var MaxWalkSpeedCrouched: Number
    open var MaxSwimSpeed: Number
    open var MaxFlySpeed: Number
    open var MaxCustomMovementSpeed: Number
    open var MaxAcceleration: Number
    open var MinAnalogWalkSpeed: Number
    open var BrakingFrictionFactor: Number
    open var BrakingFriction: Number
    open var BrakingSubStepTime: Number
    open var BrakingDecelerationWalking: Number
    open var BrakingDecelerationFalling: Number
    open var BrakingDecelerationSwimming: Number
    open var BrakingDecelerationFlying: Number
    open var AirControl: Number
    open var AirControlBoostMultiplier: Number
    open var AirControlBoostVelocityThreshold: Number
    open var FallingLateralFriction: Number
    open var CrouchedHalfHeight: Number
    open var Buoyancy: Number
    open var PerchRadiusThreshold: Number
    open var PerchAdditionalHeight: Number
    open var RotationRate: Rotator
    open var bUseSeparateBrakingFriction: Boolean
    open var bApplyGravityWhileJumping: Boolean
    open var bUseControllerDesiredRotation: Boolean
    open var bOrientRotationToMovement: Boolean
    open var bSweepWhileNavWalking: Boolean
    open var bMovementInProgress: Boolean
    open var bEnableScopedMovementUpdates: Boolean
    open var bEnableServerDualMoveScopedMovementUpdates: Boolean
    open var bForceMaxAccel: Boolean
    open var bRunPhysicsWithNoController: Boolean
    open var bForceNextFloorCheck: Boolean
    open var bShrinkProxyCapsule: Boolean
    open var bCanWalkOffLedges: Boolean
    open var bCanWalkOffLedgesWhenCrouching: Boolean
    open var bNetworkSkipProxyPredictionOnNetUpdate: Boolean
    open var bNetworkAlwaysReplicateTransformUpdateTimestamp: Boolean
    open var bDeferUpdateMoveComponent: Boolean
    open var bEnablePhysicsInteraction: Boolean
    open var bTouchForceScaledToMass: Boolean
    open var bPushForceScaledToMass: Boolean
    open var bPushForceUsingZOffset: Boolean
    open var bScalePushForceToVelocity: Boolean
    open var DeferredUpdatedMoveComponent: SceneComponent
    open var MaxOutOfWaterStepHeight: Number
    open var OutofWaterZ: Number
    open var Mass: Number
    open var StandingDownwardForceScale: Number
    open var InitialPushForceFactor: Number
    open var PushForceFactor: Number
    open var PushForcePointZOffsetFactor: Number
    open var TouchForceFactor: Number
    open var MinTouchForce: Number
    open var MaxTouchForce: Number
    open var RepulsionForce: Number
    open var bForceBraking: Boolean
    open var CrouchedSpeedMultiplier: Number
    open var UpperImpactNormalScale: Number
    open var Acceleration: Vector
    open var LastUpdateRotation: Quat
    open var LastUpdateLocation: Vector
    open var LastUpdateVelocity: Vector
    open var ServerLastTransformUpdateTimeStamp: Number
    open var ServerLastClientGoodMoveAckTime: Number
    open var ServerLastClientAdjustmentTime: Number
    open var PendingImpulseToApply: Vector
    open var PendingForceToApply: Vector
    open var AnalogInputModifier: Number
    open var MaxSimulationTimeStep: Number
    open var MaxSimulationIterations: Number
    open var MaxJumpApexAttemptsPerSimulation: Number
    open var MaxDepenetrationWithGeometry: Number
    open var MaxDepenetrationWithGeometryAsProxy: Number
    open var MaxDepenetrationWithPawn: Number
    open var MaxDepenetrationWithPawnAsProxy: Number
    open var NetworkSimulatedSmoothLocationTime: Number
    open var NetworkSimulatedSmoothRotationTime: Number
    open var ListenServerNetworkSimulatedSmoothLocationTime: Number
    open var ListenServerNetworkSimulatedSmoothRotationTime: Number
    open var NetProxyShrinkRadius: Number
    open var NetProxyShrinkHalfHeight: Number
    open var NetworkMaxSmoothUpdateDistance: Number
    open var NetworkNoSmoothUpdateDistance: Number
    open var NetworkMinTimeBetweenClientAckGoodMoves: Number
    open var NetworkMinTimeBetweenClientAdjustments: Number
    open var NetworkMinTimeBetweenClientAdjustmentsLargeCorrection: Number
    open var NetworkLargeClientCorrectionDistance: Number
    open var LedgeCheckThreshold: Number
    open var JumpOutOfWaterPitch: Number
    open var CurrentFloor: FindFloorResult
    open var DefaultLandMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var DefaultWaterMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var GroundMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var bMaintainHorizontalGroundVelocity: Boolean
    open var bImpartBaseVelocityX: Boolean
    open var bImpartBaseVelocityY: Boolean
    open var bImpartBaseVelocityZ: Boolean
    open var bImpartBaseAngularVelocity: Boolean
    open var bJustTeleported: Boolean
    open var bNetworkUpdateReceived: Boolean
    open var bNetworkMovementModeChanged: Boolean
    open var bIgnoreClientMovementErrorChecksAndCorrection: Boolean
    open var bServerAcceptClientAuthoritativePosition: Boolean
    open var bNotifyApex: Boolean
    open var bCheatFlying: Boolean
    open var bWantsToCrouch: Boolean
    open var bCrouchMaintainsBaseLocation: Boolean
    open var bIgnoreBaseRotation: Boolean
    open var bFastAttachedMove: Boolean
    open var bAlwaysCheckFloor: Boolean
    open var bUseFlatBaseForFloorChecks: Boolean
    open var bPerformingJumpOff: Boolean
    open var bWantsToLeaveNavWalking: Boolean
    open var bUseRVOAvoidance: Boolean
    open var bRequestedMoveUseAcceleration: Boolean
    open var bWasSimulatingRootMotion: Boolean
    open var bAllowPhysicsRotationDuringAnimRootMotion: Boolean
    open var FormerBaseVelocityDecayHalfLife: Number
    open var bHasRequestedVelocity: Boolean
    open var bRequestedMoveWithMaxSpeed: Boolean
    open var bWasAvoidanceUpdated: Boolean
    open var bProjectNavMeshWalking: Boolean
    open var bProjectNavMeshOnBothWorldChannels: Boolean
    open var AvoidanceConsiderationRadius: Number
    open var RequestedVelocity: Vector
    open var AvoidanceUID: Number
    open var AvoidanceGroup: NavAvoidanceMask
    open var GroupsToAvoid: NavAvoidanceMask
    open var GroupsToIgnore: NavAvoidanceMask
    open var AvoidanceWeight: Number
    open var PendingLaunchVelocity: Vector
    open var NavMeshProjectionInterval: Number
    open var NavMeshProjectionTimer: Number
    open var NavMeshProjectionInterpSpeed: Number
    open var NavMeshProjectionHeightScaleUp: Number
    open var NavMeshProjectionHeightScaleDown: Number
    open var NavWalkingFloorDistTolerance: Number
    open var PostPhysicsTickFunction: CharacterMovementComponentPostPhysicsTickFunction
    open var MinTimeBetweenTimeStampResets: Number
    open var CurrentRootMotion: RootMotionSourceGroup
    open var ServerCorrectionRootMotion: RootMotionSourceGroup
    open var RootMotionParams: RootMotionMovementParams
    open var AnimRootMotionVelocity: Vector
    open fun SetWalkableFloorZ(InWalkableFloorZ: Number)
    open fun SetWalkableFloorAngle(InWalkableFloorAngle: Number)
    open fun SetMovementMode(NewMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, NewCustomMode: Number)
    open fun SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask)
    open fun SetGroupsToIgnore(GroupFlags: Number)
    open fun SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask)
    open fun SetGroupsToAvoid(GroupFlags: Number)
    open fun SetCrouchedHalfHeight(NewValue: Number)
    open fun SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask)
    open fun SetAvoidanceGroup(GroupFlags: Number)
    open fun SetAvoidanceEnabled(bEnable: Boolean)
    open fun GetWalkableFloorZ(): Number
    open fun GetWalkableFloorAngle(): Number
    open fun FindFloor(CapsuleLocation: Vector, FloorResult: FindFloorResult = definedExternally): `T$193`
    open fun ComputeFloorDistance(CapsuleLocation: Vector, LineDistance: Number, SweepDistance: Number, SweepRadius: Number, FloorResult: FindFloorResult = definedExternally): `T$193`
    open fun IsWalking(): Boolean
    open fun IsWalkable(Hit: HitResult): Boolean
    open fun GetValidPerchRadius(): Number
    open fun GetPerchRadiusThreshold(): Number
    open fun GetMovementBase(): PrimitiveComponent
    open fun GetMinAnalogSpeed(): Number
    open fun GetMaxJumpHeightWithJumpTime(): Number
    open fun GetMaxJumpHeight(): Number
    open fun GetMaxBrakingDeceleration(): Number
    open fun GetMaxAcceleration(): Number
    open fun GetLastUpdateVelocity(): Vector
    open fun GetLastUpdateRotation(): Rotator
    open fun GetLastUpdateLocation(): Vector
    open fun GetImpartedMovementBaseVelocity(): Vector
    open fun GetCurrentAcceleration(): Vector
    open fun GetCrouchedHalfHeight(): Number
    open fun GetCharacterOwner(): Character
    open fun GetAnalogInputModifier(): Number
    open fun DisableMovement()
    open fun ClearAccumulatedForces()
    open fun CapsuleTouched(OverlappedComp: PrimitiveComponent, Other: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: Number, bFromSweep: Boolean, SweepResult: HitResult)
    open fun CalcVelocity(DeltaTime: Number, Friction: Number, bFluid: Boolean, BrakingDeceleration: Number)
    open fun AddImpulse(Impulse: Vector, bVelocityChange: Boolean)
    open fun AddForce(Force: Vector)

    companion object {
        fun Load(ResourceName: String): CharacterMovementComponent
        fun Find(Outer: UObject, ResourceName: String): CharacterMovementComponent
        fun GetDefaultObject(): CharacterMovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CharacterMovementComponent
        fun C(Other: UObject): CharacterMovementComponent
        fun C(Other: Any): CharacterMovementComponent
    }
}

external open class ArrowComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var ArrowColor: Color
    open var ArrowSize: Number
    open var ArrowLength: Number
    open var ScreenSize: Number
    open var bIsScreenSizeScaled: Boolean
    open var bTreatAsASprite: Boolean
    open var SpriteCategoryName: String
    open var SpriteInfo: SpriteCategoryInfo
    open var bLightAttachment: Boolean
    open var bUseInEditorScaling: Boolean
    open fun SetArrowColor(NewColor: LinearColor)

    companion object {
        fun Load(ResourceName: String): ArrowComponent
        fun Find(Outer: UObject, ResourceName: String): ArrowComponent
        fun GetDefaultObject(): ArrowComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ArrowComponent
        fun C(Other: UObject): ArrowComponent
        fun C(Other: Any): ArrowComponent
    }
}

external open class Vector_NetQuantize100 : Vector {
    override fun clone(): Vector_NetQuantize100
    open fun BreakVector_NetQuantize100(X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`

    companion object {
        fun C(Other: UObject): Vector_NetQuantize100
        fun C(Other: Any): Vector_NetQuantize100
        fun BreakVector_NetQuantize100(InVec: Vector_NetQuantize100, X: Any = definedExternally, Y: Any = definedExternally, Z: Any = definedExternally): `T$50`
        fun MakeVector_NetQuantize100(X: Any, Y: Any, Z: Any): Vector_NetQuantize100
    }
}

external open class BasedMovementInfo {
    open var MovementBase: PrimitiveComponent
    open var BoneName: String
    open var Location: Vector_NetQuantize100
    open var Rotation: Rotator
    open var bServerHasBaseComponent: Boolean
    open var bRelativeRotation: Boolean
    open var bServerHasVelocity: Boolean
    open fun clone(): BasedMovementInfo

    companion object {
        fun C(Other: UObject): BasedMovementInfo
        fun C(Other: Any): BasedMovementInfo
    }
}

external open class RepRootMotionMontage {
    open var bIsActive: Boolean
    open var AnimMontage: AnimMontage
    open var position: Number
    open var Location: Vector_NetQuantize100
    open var Rotation: Rotator
    open var MovementBase: PrimitiveComponent
    open var MovementBaseBoneName: String
    open var bRelativePosition: Boolean
    open var bRelativeRotation: Boolean
    open var AuthoritativeRootMotion: RootMotionSourceGroup
    open var Acceleration: Vector_NetQuantize10
    open var LinearVelocity: Vector_NetQuantize10
    open fun clone(): RepRootMotionMontage

    companion object {
        fun C(Other: UObject): RepRootMotionMontage
        fun C(Other: Any): RepRootMotionMontage
    }
}

external open class SimulatedRootMotionReplicatedMove {
    open var Time: Number
    open var RootMotion: RepRootMotionMontage
    open fun clone(): SimulatedRootMotionReplicatedMove

    companion object {
        fun C(Other: UObject): SimulatedRootMotionReplicatedMove
        fun C(Other: Any): SimulatedRootMotionReplicatedMove
    }
}

external open class CharacterNetworkSerializationPackedBits {
    open fun clone(): CharacterNetworkSerializationPackedBits

    companion object {
        fun C(Other: UObject): CharacterNetworkSerializationPackedBits
        fun C(Other: Any): CharacterNetworkSerializationPackedBits
    }
}

external open class CharacterServerMovePackedBits : CharacterNetworkSerializationPackedBits {
    override fun clone(): CharacterServerMovePackedBits

    companion object {
        fun C(Other: UObject): CharacterServerMovePackedBits
        fun C(Other: Any): CharacterServerMovePackedBits
    }
}

external open class CharacterMoveResponsePackedBits : CharacterNetworkSerializationPackedBits {
    override fun clone(): CharacterMoveResponsePackedBits

    companion object {
        fun C(Other: UObject): CharacterMoveResponsePackedBits
        fun C(Other: Any): CharacterMoveResponsePackedBits
    }
}

external open class Character(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Pawn {
    open var Mesh: SkeletalMeshComponent
    open var CharacterMovement: CharacterMovementComponent
    open var CapsuleComponent: CapsuleComponent
    open var ArrowComponent: ArrowComponent
    open var BasedMovement: BasedMovementInfo
    open var ReplicatedBasedMovement: BasedMovementInfo
    open var AnimRootMotionTranslationScale: Number
    open var BaseTranslationOffset: Vector
    open var BaseRotationOffset: Quat
    open var ReplicatedServerLastTransformUpdateTimeStamp: Number
    open var ReplayLastTransformUpdateTimeStamp: Number
    open var ReplicatedMovementMode: Number
    open var bInBaseReplication: Boolean
    open var CrouchedEyeHeight: Number
    open var bIsCrouched: Boolean
    open var bProxyIsJumpForceApplied: Boolean
    open var bPressedJump: Boolean
    open var bClientUpdating: Boolean
    open var bClientWasFalling: Boolean
    open var bClientResimulateRootMotion: Boolean
    open var bClientResimulateRootMotionSources: Boolean
    open var bSimGravityDisabled: Boolean
    open var bClientCheckEncroachmentOnNetUpdate: Boolean
    open var bServerMoveIgnoreRootMotion: Boolean
    open var bWasJumping: Boolean
    open var JumpKeyHoldTime: Number
    open var JumpForceTimeRemaining: Number
    open var ProxyJumpForceStartedTime: Number
    open var JumpMaxHoldTime: Number
    open var JumpMaxCount: Number
    open var JumpCurrentCount: Number
    open var JumpCurrentCountPreJump: Number
    open var OnReachedJumpApex: UnrealEngineMulticastDelegate<() -> Unit>
    open var MovementModeChangedDelegate: UnrealEngineMulticastDelegate<(Character: Character, PrevMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, PreviousCustomMode: Number) -> Unit>
    open var OnCharacterMovementUpdated: UnrealEngineMulticastDelegate<(DeltaSeconds: Number, OldLocation: Vector, OldVelocity: Vector) -> Unit>
    open var SavedRootMotion: RootMotionSourceGroup
    open var ClientRootMotionParams: RootMotionMovementParams
    open var RootMotionRepMoves: Array<SimulatedRootMotionReplicatedMove>
    open var RepRootMotion: RepRootMotionMontage
    open fun UnCrouch(bClientSimulation: Boolean)
    open fun StopJumping()
    open fun StopAnimMontage(AnimMontage: AnimMontage)
    open fun ServerMovePacked(PackedBits: CharacterServerMovePackedBits)
    open fun ServerMoveOld(OldTimeStamp: Number, OldAccel: Vector_NetQuantize10, OldMoveFlags: Number)
    open fun ServerMoveNoBase(Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: Number, ClientRoll: Number, View: Any, ClientMovementMode: Number)
    open fun ServerMoveDualNoBase(TimeStamp0: Number, InAccel0: Vector_NetQuantize10, PendingFlags: Number, View0: Any, Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: Number, ClientRoll: Number, View: Any, ClientMovementMode: Number)
    open fun ServerMoveDualHybridRootMotion(TimeStamp0: Number, InAccel0: Vector_NetQuantize10, PendingFlags: Number, View0: Any, Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: Number, ClientRoll: Number, View: Any, ClientMovementBase: PrimitiveComponent, ClientBaseBoneName: String, ClientMovementMode: Number)
    open fun ServerMoveDual(TimeStamp0: Number, InAccel0: Vector_NetQuantize10, PendingFlags: Number, View0: Any, Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: Number, ClientRoll: Number, View: Any, ClientMovementBase: PrimitiveComponent, ClientBaseBoneName: String, ClientMovementMode: Number)
    open fun ServerMove(Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: Number, ClientRoll: Number, View: Any, ClientMovementBase: PrimitiveComponent, ClientBaseBoneName: String, ClientMovementMode: Number)
    open fun RootMotionDebugClientPrintOnScreen(InString: String)
    open fun PlayAnimMontage(AnimMontage: AnimMontage, InPlayRate: Number, StartSectionName: String): Number
    open fun OnWalkingOffLedge(PreviousFloorImpactNormal: Vector, PreviousFloorContactNormal: Vector, PreviousLocation: Vector, TimeDelta: Number)
    open fun OnRep_RootMotion()
    open fun OnRep_ReplicatedBasedMovement()
    open fun OnRep_ReplayLastTransformUpdateTimeStamp()
    open fun OnRep_IsCrouched()
    open fun OnLaunched(LaunchVelocity: Vector, bXYOverride: Boolean, bZOverride: Boolean)
    open fun OnLanded(Hit: HitResult)
    open fun OnJumped()
    open fun LaunchCharacter(LaunchVelocity: Vector, bXYOverride: Boolean, bZOverride: Boolean)
    open fun UpdateCustomMovement(DeltaTime: Number)
    open fun OnStartCrouch(HalfHeightAdjust: Number, ScaledHalfHeightAdjust: Number)
    open fun OnMovementModeChanged(PrevMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, NewMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, PrevCustomMode: Number, NewCustomMode: Number)
    open fun OnEndCrouch(HalfHeightAdjust: Number, ScaledHalfHeightAdjust: Number)
    open fun Jump()
    open fun IsPlayingAnimRootMotion(): Boolean
    open fun IsPlayingNetworkedRootMotionMontage(): Boolean
    open fun IsJumpProvidingForce(): Boolean
    open fun HasAnyRootMotion(): Boolean
    open fun GetCurrentMontage(): AnimMontage
    open fun GetBaseTranslationOffset(): Vector
    open fun GetBaseRotationOffset(): Rotator
    open fun GetAnimRootMotionTranslationScale(): Number
    open fun Crouch(bClientSimulation: Boolean)
    open fun ClientVeryShortAdjustPosition(Timestamp: Number, NewLoc: Vector, NewBase: PrimitiveComponent, NewBaseBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientMoveResponsePacked(PackedBits: CharacterMoveResponsePackedBits)
    open fun ClientCheatWalk()
    open fun ClientCheatGhost()
    open fun ClientCheatFly()
    open fun ClientAdjustRootMotionSourcePosition(Timestamp: Number, ServerRootMotion: RootMotionSourceGroup, bHasAnimRootMotion: Boolean, ServerMontageTrackPosition: Number, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: Number, ServerBase: PrimitiveComponent, ServerBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientAdjustRootMotionPosition(Timestamp: Number, ServerMontageTrackPosition: Number, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: Number, ServerBase: PrimitiveComponent, ServerBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientAdjustPosition(Timestamp: Number, NewLoc: Vector, NewVel: Vector, NewBase: PrimitiveComponent, NewBaseBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientAckGoodMove(Timestamp: Number)
    open fun CanJump(): Boolean
    open fun CanCrouch(): Boolean
    open fun CacheInitialMeshOffset(MeshRelativeLocation: Vector, MeshRelativeRotation: Rotator)

    companion object {
        fun GetDefaultObject(): Character
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Character
        fun C(Other: UObject): Character
        fun C(Other: Any): Character
    }
}

external object ENavPathEvent {
    var Cleared: String /* "Cleared" */
    var NewPath: String /* "NewPath" */
    var UpdatedDueToGoalMoved: String /* "UpdatedDueToGoalMoved" */
    var UpdatedDueToNavigationChanged: String /* "UpdatedDueToNavigationChanged" */
    var Invalidated: String /* "Invalidated" */
    var RePathFailed: String /* "RePathFailed" */
    var MetaPathUpdate: String /* "MetaPathUpdate" */
    var Custom: String /* "Custom" */
    var ENavPathEvent_MAX: String /* "ENavPathEvent_MAX" */
}

external object ENavigationOptionFlag {
    var Default: String /* "Default" */
    var Enable: String /* "Enable" */
    var Disable: String /* "Disable" */
    var MAX: String /* "MAX" */
}

external open class NavigationPath : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PathUpdatedNotifier: UnrealEngineMulticastDelegate<(AffectedPath: NavigationPath, PathEvent: String /* "Cleared" | "NewPath" | "UpdatedDueToGoalMoved" | "UpdatedDueToNavigationChanged" | "Invalidated" | "RePathFailed" | "MetaPathUpdate" | "Custom" | "ENavPathEvent_MAX" */) -> Unit>
    open var PathPoints: Array<Vector>
    open var RecalculateOnInvalidation: String /* "Default" | "Enable" | "Disable" | "MAX" */
    override fun IsValid(): Boolean
    open fun IsStringPulled(): Boolean
    open fun IsPartial(): Boolean
    open fun GetPathLength(): Number
    open fun GetPathCost(): Number
    open fun GetDebugString(): String
    open fun EnableRecalculationOnInvalidation(DoRecalculation: String /* "Default" | "Enable" | "Disable" | "MAX" */)
    open fun EnableDebugDrawing(bShouldDrawDebugData: Boolean, PathColor: LinearColor)

    companion object {
        fun Load(ResourceName: String): NavigationPath
        fun Find(Outer: UObject, ResourceName: String): NavigationPath
        fun GetDefaultObject(): NavigationPath
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationPath
        fun C(Other: UObject): NavigationPath
        fun C(Other: Any): NavigationPath
    }
}

external interface `T$194` {
    var Location: Vector
    var Rotation: Rotator
}

external open class Controller(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var PlayerState: PlayerState
    open var OnInstigatedAnyDamage: UnrealEngineMulticastDelegate<(Damage: Number, DamageType: DamageType, DamagedActor: Actor, DamageCauser: Actor) -> Unit>
    open var OnPossessedPawnChanged: UnrealEngineMulticastDelegate<(OldPawn: Pawn, NewPawn: Pawn) -> Unit>
    open var StateName: String
    open var Pawn: Pawn
    open var Character: Character
    open var TransformComponent: SceneComponent
    open var ControlRotation: Rotator
    open var bAttachToPawn: Boolean
    open fun UnPossess()
    open fun StopMovement()
    open fun SetInitialLocationAndRotation(NewLocation: Vector, NewRotation: Rotator)
    open fun SetIgnoreMoveInput(bNewMoveInput: Boolean)
    open fun SetIgnoreLookInput(bNewLookInput: Boolean)
    open fun SetControlRotation(NewRotation: Rotator)
    open fun ResetIgnoreMoveInput()
    open fun ResetIgnoreLookInput()
    open fun ResetIgnoreInputFlags()
    open fun OnUnPossess(UnpossessedPawn: Pawn)
    open fun OnPossess(PossessedPawn: Pawn)
    open fun ReceiveInstigatedAnyDamage(Damage: Number, DamageType: DamageType, DamagedActor: Actor, DamageCauser: Actor)
    open fun Possess(InPawn: Pawn)
    open fun OnRep_PlayerState()
    open fun OnRep_Pawn()
    open fun LineOfSightTo(Other: Actor, ViewPoint: Vector, bAlternateChecks: Boolean): Boolean
    open fun GetControlledPawn(): Pawn
    open fun IsPlayerController(): Boolean
    open fun IsMoveInputIgnored(): Boolean
    open fun IsLookInputIgnored(): Boolean
    open fun IsLocalPlayerController(): Boolean
    open fun IsLocalController(): Boolean
    open fun GetViewTarget(): Actor
    open fun GetPlayerViewPoint(Location: Vector = definedExternally, Rotation: Rotator = definedExternally): `T$194`
    open fun GetDesiredRotation(): Rotator
    open fun GetControlRotation(): Rotator
    open fun ClientSetRotation(NewRotation: Rotator, bResetCamera: Boolean)
    open fun ClientSetLocation(NewLocation: Vector, NewRotation: Rotator)
    open fun GetCurrentPath(): NavigationPath
    open fun GetCurrentPathIndex(): Number
    open fun GetCurrentPathPoints(): Array<Vector>
    open fun GetNextNavLinkIndex(): Number
    open fun SimpleMoveToActor_DEPRECATED(Goal: Actor)
    open fun SimpleMoveToLocation_DEPRECATED(Goal: Vector)

    companion object {
        fun GetDefaultObject(): Controller
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Controller
        fun C(Other: UObject): Controller
        fun C(Other: Any): Controller
        fun GetCurrentPath(Controller: Controller): NavigationPath
        fun GetCurrentPathIndex(Controller: Controller): Number
        fun GetCurrentPathPoints(Controller: Controller): Array<Vector>
        fun GetNextNavLinkIndex(Controller: Controller): Number
        fun SimpleMoveToActor(Controller: Controller, Goal: Actor)
        fun SimpleMoveToLocation(Controller: Controller, Goal: Vector)
    }
}

external open class Player : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PlayerController: PlayerController
    open var CurrentNetSpeed: Number
    open var ConfiguredInternetSpeed: Number
    open var ConfiguredLanSpeed: Number

    companion object {
        fun Load(ResourceName: String): Player
        fun Find(Outer: UObject, ResourceName: String): Player
        fun GetDefaultObject(): Player
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Player
        fun C(Other: UObject): Player
        fun C(Other: Any): Player
    }
}

external open class InterpTrackInst : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): InterpTrackInst
        fun Find(Outer: UObject, ResourceName: String): InterpTrackInst
        fun GetDefaultObject(): InterpTrackInst
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackInst
        fun C(Other: UObject): InterpTrackInst
        fun C(Other: Any): InterpTrackInst
    }
}

external open class InterpTrackInstDirector : InterpTrackInst {
    constructor()
    constructor(Outer: UObject)
    open var OldViewTarget: Actor

    companion object {
        fun Load(ResourceName: String): InterpTrackInstDirector
        fun Find(Outer: UObject, ResourceName: String): InterpTrackInstDirector
        fun GetDefaultObject(): InterpTrackInstDirector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackInstDirector
        fun C(Other: UObject): InterpTrackInstDirector
        fun C(Other: Any): InterpTrackInstDirector
    }
}

external open class ReporterBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReporterBase
        fun Find(Outer: UObject, ResourceName: String): ReporterBase
        fun GetDefaultObject(): ReporterBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReporterBase
        fun C(Other: UObject): ReporterBase
        fun C(Other: Any): ReporterBase
    }
}

external open class ReporterGraph : ReporterBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReporterGraph
        fun Find(Outer: UObject, ResourceName: String): ReporterGraph
        fun GetDefaultObject(): ReporterGraph
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReporterGraph
        fun C(Other: UObject): ReporterGraph
        fun C(Other: Any): ReporterGraph
    }
}

external open class CanvasUVTri {
    open var V0_Pos: Vector2D
    open var V0_UV: Vector2D
    open var V0_Color: LinearColor
    open var V1_Pos: Vector2D
    open var V1_UV: Vector2D
    open var V1_Color: LinearColor
    open var V2_Pos: Vector2D
    open var V2_UV: Vector2D
    open var V2_Color: LinearColor
    open fun clone(): CanvasUVTri

    companion object {
        fun C(Other: UObject): CanvasUVTri
        fun C(Other: Any): CanvasUVTri
    }
}

external interface `T$195` {
    var WorldOrigin: Vector
    var WorldDirection: Vector
}

external open class Canvas : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OrgX: Number
    open var OrgY: Number
    open var ClipX: Number
    open var ClipY: Number
    open var DrawColor: Color
    open var bCenterX: Boolean
    open var bCenterY: Boolean
    open var bNoSmooth: Boolean
    open var SizeX: Number
    open var SizeY: Number
    open var ColorModulate: Plane
    open var DefaultTexture: Texture2D
    open var GradientTexture0: Texture2D
    open var ReporterGraph: ReporterGraph
    open fun ClippedTextSize(RenderFont: Font, RenderText: String, Scale: Vector2D): Vector2D
    open fun WrappedTextSize(RenderFont: Font, RenderText: String): Vector2D
    open fun Project(WorldLocation: Vector): Vector
    open fun DrawTriangles(RenderTexture: Texture, Triangles: Array<CanvasUVTri>)
    open fun DrawTexture(RenderTexture: Texture, ScreenPosition: Vector2D, ScreenSize: Vector2D, CoordinatePosition: Vector2D, CoordinateSize: Vector2D, RenderColor: LinearColor, BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */, Rotation: Number, PivotPoint: Vector2D)
    open fun DrawText(RenderFont: Font, RenderText: String, ScreenPosition: Vector2D, Scale: Vector2D, RenderColor: LinearColor, Kerning: Number, ShadowColor: LinearColor, ShadowOffset: Vector2D, bCentreX: Boolean, bCentreY: Boolean, bOutlined: Boolean, OutlineColor: LinearColor)
    open fun DrawPolygon(RenderTexture: Texture, ScreenPosition: Vector2D, Radius: Vector2D, NumberOfSides: Number, RenderColor: LinearColor)
    open fun DrawMaterialTriangles(RenderMaterial: MaterialInterface, Triangles: Array<CanvasUVTri>)
    open fun DrawMaterial(RenderMaterial: MaterialInterface, ScreenPosition: Vector2D, ScreenSize: Vector2D, CoordinatePosition: Vector2D, CoordinateSize: Vector2D, Rotation: Number, PivotPoint: Vector2D)
    open fun DrawLine(ScreenPositionA: Vector2D, ScreenPositionB: Vector2D, Thickness: Number, RenderColor: LinearColor)
    open fun DrawBox(ScreenPosition: Vector2D, ScreenSize: Vector2D, Thickness: Number, RenderColor: LinearColor)
    open fun DrawBorder(BorderTexture: Texture, BackgroundTexture: Texture, LeftBorderTexture: Texture, RightBorderTexture: Texture, TopBorderTexture: Texture, BottomBorderTexture: Texture, ScreenPosition: Vector2D, ScreenSize: Vector2D, CoordinatePosition: Vector2D, CoordinateSize: Vector2D, RenderColor: LinearColor, BorderScale: Vector2D, BackgroundScale: Vector2D, Rotation: Number, PivotPoint: Vector2D, CornerSize: Vector2D)
    open fun Deproject(ScreenPosition: Vector2D, WorldOrigin: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$195`

    companion object {
        fun Load(ResourceName: String): Canvas
        fun Find(Outer: UObject, ResourceName: String): Canvas
        fun GetDefaultObject(): Canvas
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Canvas
        fun C(Other: UObject): Canvas
        fun C(Other: Any): Canvas
    }
}

external open class DebugTextInfo {
    open var SrcActor: Actor
    open var SrcActorOffset: Vector
    open var SrcActorDesiredOffset: Vector
    open var DebugText: String
    open var TimeRemaining: Number
    open var Duration: Number
    open var TextColor: Color
    open var bAbsoluteLocation: Boolean
    open var bKeepAttachedToActor: Boolean
    open var bDrawShadow: Boolean
    open var OrigActorLocation: Vector
    open var Font: Font
    open var FontScale: Number
    open fun clone(): DebugTextInfo

    companion object {
        fun C(Other: UObject): DebugTextInfo
        fun C(Other: Any): DebugTextInfo
    }
}

external interface `T$196` {
    var OutWidth: Number
    var OutHeight: Number
}

external interface `T$197` {
    var OutActors: Array<Actor>
}

external interface `T$198` {
    var WorldPosition: Vector
    var WorldDirection: Vector
}

external open class HUD(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var PlayerOwner: PlayerController
    open var bLostFocusPaused: Boolean
    open var bShowHUD: Boolean
    open var bShowDebugInfo: Boolean
    open var CurrentTargetIndex: Number
    open var bShowHitBoxDebugInfo: Boolean
    open var bShowOverlays: Boolean
    open var bEnableDebugTextShadow: Boolean
    open var PostRenderedActors: Array<Actor>
    open var DebugDisplay: Array<String>
    open var ToggledDebugCategories: Array<String>
    open var Canvas: Canvas
    open var DebugCanvas: Canvas
    open var DebugTextList: Array<DebugTextInfo>
    open var ShowDebugTargetDesiredClass: UnrealEngineClass
    open var ShowDebugTargetActor: Actor
    open fun ShowHUD()
    open fun ShowDebugToggleSubCategory(Category: String)
    open fun ShowDebugForReticleTargetToggle(DesiredClass: UnrealEngineClass)
    open fun ShowDebug(DebugType: String)
    open fun RemoveDebugText(SrcActor: Actor, bLeaveDurationText: Boolean)
    open fun RemoveAllDebugStrings()
    open fun HitBoxReleased(BoxName: String)
    open fun HitBoxEndCursorOver(BoxName: String)
    open fun HitBoxClicked(BoxName: String)
    open fun HitBoxBeginCursorOver(BoxName: String)
    open fun ReceiveDrawHUD(SizeX: Number, SizeY: Number)
    open fun Project(Location: Vector, bClampToZeroPlane: Boolean): Vector
    open fun PreviousDebugTarget()
    open fun NextDebugTarget()
    open fun GetTextSize(text: String, OutWidth: Number = definedExternally, OutHeight: Number = definedExternally, Font: Font = definedExternally, Scale: Number = definedExternally): `T$196`
    open fun GetOwningPlayerController(): PlayerController
    open fun GetOwningPawn(): Pawn
    open fun GetActorsInSelectionRectangle(ClassFilter: UnrealEngineClass, FirstPoint: Vector2D, SecondPoint: Vector2D, OutActors: Array<Actor> = definedExternally, bIncludeNonCollidingComponents: Boolean = definedExternally, bActorMustBeFullyEnclosed: Boolean = definedExternally): `T$197`
    open fun DrawTextureSimple(Texture: Texture, ScreenX: Number, ScreenY: Number, Scale: Number, bScalePosition: Boolean)
    open fun DrawTexture(Texture: Texture, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number, TextureU: Number, TextureV: Number, TextureUWidth: Number, TextureVHeight: Number, TintColor: LinearColor, BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */, Scale: Number, bScalePosition: Boolean, Rotation: Number, RotPivot: Vector2D)
    open fun DrawString(text: String, TextColor: LinearColor, ScreenX: Number, ScreenY: Number, Font: Font, Scale: Number, bScalePosition: Boolean)
    open fun DrawRect(RectColor: LinearColor, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number)
    open fun DrawMaterialTriangle(Material: MaterialInterface, V0_Pos: Vector2D, V1_Pos: Vector2D, V2_Pos: Vector2D, V0_UV: Vector2D, V1_UV: Vector2D, V2_UV: Vector2D, V0_Color: LinearColor, V1_Color: LinearColor, V2_Color: LinearColor)
    open fun DrawMaterialSimple(Material: MaterialInterface, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number, Scale: Number, bScalePosition: Boolean)
    open fun DrawMaterial(Material: MaterialInterface, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number, MaterialU: Number, MaterialV: Number, MaterialUWidth: Number, MaterialVHeight: Number, Scale: Number, bScalePosition: Boolean, Rotation: Number, RotPivot: Vector2D)
    open fun DrawLine(StartScreenX: Number, StartScreenY: Number, EndScreenX: Number, EndScreenY: Number, LineColor: LinearColor, LineThickness: Number)
    open fun Deproject(ScreenX: Number, ScreenY: Number, WorldPosition: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$198`
    open fun AddHitBox(position: Vector2D, Size: Vector2D, InName: String, bConsumesInput: Boolean, Priority: Number)
    open fun AddDebugText(DebugText: String, SrcActor: Actor, Duration: Number, Offset: Vector, DesiredOffset: Vector, TextColor: Color, bSkipOverwriteCheck: Boolean, bAbsoluteLocation: Boolean, bKeepAttachedToActor: Boolean, InFont: Font, FontScale: Number, bDrawShadow: Boolean)

    companion object {
        fun GetDefaultObject(): HUD
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HUD
        fun C(Other: UObject): HUD
        fun C(Other: Any): HUD
    }
}

external object ECameraProjectionMode {
    var Perspective: String /* "Perspective" */
    var Orthographic: String /* "Orthographic" */
    var ECameraProjectionMode_MAX: String /* "ECameraProjectionMode_MAX" */
}

external object EBloomMethod {
    var BM_SOG: String /* "BM_SOG" */
    var BM_FFT: String /* "BM_FFT" */
    var BM_MAX: String /* "BM_MAX" */
}

external object EAutoExposureMethod {
    var AEM_Histogram: String /* "AEM_Histogram" */
    var AEM_Basic: String /* "AEM_Basic" */
    var AEM_Manual: String /* "AEM_Manual" */
    var AEM_MAX: String /* "AEM_MAX" */
}

external object EDepthOfFieldMethod {
    var DOFM_BokehDOF: String /* "DOFM_BokehDOF" */
    var DOFM_Gaussian: String /* "DOFM_Gaussian" */
    var DOFM_CircleDOF: String /* "DOFM_CircleDOF" */
    var DOFM_MAX: String /* "DOFM_MAX" */
}

external object ETemperatureMethod {
    var TEMP_WhiteBalance: String /* "TEMP_WhiteBalance" */
    var TEMP_ColorTemperature: String /* "TEMP_ColorTemperature" */
    var TEMP_MAX: String /* "TEMP_MAX" */
}

external object EDynamicGlobalIlluminationMethod {
    var None: String /* "None" */
    var Lumen: String /* "Lumen" */
    var ScreenSpace: String /* "ScreenSpace" */
    var RayTraced: String /* "RayTraced" */
    var Plugin: String /* "Plugin" */
    var EDynamicGlobalIlluminationMethod_MAX: String /* "EDynamicGlobalIlluminationMethod_MAX" */
}

external object ERayTracingGlobalIlluminationType {
    var Disabled: String /* "Disabled" */
    var BruteForce: String /* "BruteForce" */
    var FinalGather: String /* "FinalGather" */
    var ERayTracingGlobalIlluminationType_MAX: String /* "ERayTracingGlobalIlluminationType_MAX" */
}

external object EReflectionMethod {
    var None: String /* "None" */
    var Lumen: String /* "Lumen" */
    var ScreenSpace: String /* "ScreenSpace" */
    var RayTraced: String /* "RayTraced" */
    var EReflectionMethod_MAX: String /* "EReflectionMethod_MAX" */
}

external object EReflectionsType {
    var ScreenSpace: String /* "ScreenSpace" */
    var RayTracing: String /* "RayTracing" */
    var EReflectionsType_MAX: String /* "EReflectionsType_MAX" */
}

external object ELumenRayLightingModeOverride {
    var Default: String /* "Default" */
    var SurfaceCache: String /* "SurfaceCache" */
    var HitLighting: String /* "HitLighting" */
    var ELumenRayLightingModeOverride_MAX: String /* "ELumenRayLightingModeOverride_MAX" */
}

external object EReflectedAndRefractedRayTracedShadows {
    var Disabled: String /* "Disabled" */
    var Hard_shadows: String /* "Hard_shadows" */
    var Area_shadows: String /* "Area_shadows" */
    var EReflectedAndRefractedRayTracedShadows_MAX: String /* "EReflectedAndRefractedRayTracedShadows_MAX" */
}

external open class TextureCube : Texture {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): TextureCube
        fun Find(Outer: UObject, ResourceName: String): TextureCube
        fun GetDefaultObject(): TextureCube
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureCube
        fun C(Other: UObject): TextureCube
        fun C(Other: Any): TextureCube
    }
}

external object ETranslucencyType {
    var Raster: String /* "Raster" */
    var RayTracing: String /* "RayTracing" */
    var ETranslucencyType_MAX: String /* "ETranslucencyType_MAX" */
}

external open class WeightedBlendable {
    open var Weight: Number
    open var UObject: UObject
    open fun clone(): WeightedBlendable

    companion object {
        fun C(Other: UObject): WeightedBlendable
        fun C(Other: Any): WeightedBlendable
    }
}

external open class WeightedBlendables {
    open var Array: Array<WeightedBlendable>
    open fun clone(): WeightedBlendables

    companion object {
        fun C(Other: UObject): WeightedBlendables
        fun C(Other: Any): WeightedBlendables
    }
}

external open class PostProcessSettings {
    open var bOverride_TemperatureType: Boolean
    open var bOverride_WhiteTemp: Boolean
    open var bOverride_WhiteTint: Boolean
    open var bOverride_ColorSaturation: Boolean
    open var bOverride_ColorContrast: Boolean
    open var bOverride_ColorGamma: Boolean
    open var bOverride_ColorGain: Boolean
    open var bOverride_ColorOffset: Boolean
    open var bOverride_ColorSaturationShadows: Boolean
    open var bOverride_ColorContrastShadows: Boolean
    open var bOverride_ColorGammaShadows: Boolean
    open var bOverride_ColorGainShadows: Boolean
    open var bOverride_ColorOffsetShadows: Boolean
    open var bOverride_ColorSaturationMidtones: Boolean
    open var bOverride_ColorContrastMidtones: Boolean
    open var bOverride_ColorGammaMidtones: Boolean
    open var bOverride_ColorGainMidtones: Boolean
    open var bOverride_ColorOffsetMidtones: Boolean
    open var bOverride_ColorSaturationHighlights: Boolean
    open var bOverride_ColorContrastHighlights: Boolean
    open var bOverride_ColorGammaHighlights: Boolean
    open var bOverride_ColorGainHighlights: Boolean
    open var bOverride_ColorOffsetHighlights: Boolean
    open var bOverride_ColorCorrectionShadowsMax: Boolean
    open var bOverride_ColorCorrectionHighlightsMin: Boolean
    open var bOverride_ColorCorrectionHighlightsMax: Boolean
    open var bOverride_BlueCorrection: Boolean
    open var bOverride_ExpandGamut: Boolean
    open var bOverride_ToneCurveAmount: Boolean
    open var bOverride_FilmSlope: Boolean
    open var bOverride_FilmToe: Boolean
    open var bOverride_FilmShoulder: Boolean
    open var bOverride_FilmBlackClip: Boolean
    open var bOverride_FilmWhiteClip: Boolean
    open var bOverride_SceneColorTint: Boolean
    open var bOverride_SceneFringeIntensity: Boolean
    open var bOverride_ChromaticAberrationStartOffset: Boolean
    open var bOverride_AmbientCubemapTint: Boolean
    open var bOverride_AmbientCubemapIntensity: Boolean
    open var bOverride_BloomMethod: Boolean
    open var bOverride_BloomIntensity: Boolean
    open var bOverride_BloomThreshold: Boolean
    open var bOverride_Bloom1Tint: Boolean
    open var bOverride_Bloom1Size: Boolean
    open var bOverride_Bloom2Size: Boolean
    open var bOverride_Bloom2Tint: Boolean
    open var bOverride_Bloom3Tint: Boolean
    open var bOverride_Bloom3Size: Boolean
    open var bOverride_Bloom4Tint: Boolean
    open var bOverride_Bloom4Size: Boolean
    open var bOverride_Bloom5Tint: Boolean
    open var bOverride_Bloom5Size: Boolean
    open var bOverride_Bloom6Tint: Boolean
    open var bOverride_Bloom6Size: Boolean
    open var bOverride_BloomSizeScale: Boolean
    open var bOverride_BloomConvolutionTexture: Boolean
    open var bOverride_BloomConvolutionScatterDispersion: Boolean
    open var bOverride_BloomConvolutionSize: Boolean
    open var bOverride_BloomConvolutionCenterUV: Boolean
    open var bOverride_BloomConvolutionPreFilter: Boolean
    open var bOverride_BloomConvolutionPreFilterMin: Boolean
    open var bOverride_BloomConvolutionPreFilterMax: Boolean
    open var bOverride_BloomConvolutionPreFilterMult: Boolean
    open var bOverride_BloomConvolutionBufferScale: Boolean
    open var bOverride_BloomDirtMaskIntensity: Boolean
    open var bOverride_BloomDirtMaskTint: Boolean
    open var bOverride_BloomDirtMask: Boolean
    open var bOverride_CameraShutterSpeed: Boolean
    open var bOverride_CameraISO: Boolean
    open var bOverride_AutoExposureMethod: Boolean
    open var bOverride_AutoExposureLowPercent: Boolean
    open var bOverride_AutoExposureHighPercent: Boolean
    open var bOverride_AutoExposureMinBrightness: Boolean
    open var bOverride_AutoExposureMaxBrightness: Boolean
    open var bOverride_AutoExposureCalibrationConstant: Boolean
    open var bOverride_AutoExposureSpeedUp: Boolean
    open var bOverride_AutoExposureSpeedDown: Boolean
    open var bOverride_AutoExposureBias: Boolean
    open var bOverride_AutoExposureBiasCurve: Boolean
    open var bOverride_AutoExposureMeterMask: Boolean
    open var bOverride_AutoExposureApplyPhysicalCameraExposure: Boolean
    open var bOverride_HistogramLogMin: Boolean
    open var bOverride_HistogramLogMax: Boolean
    open var bOverride_LocalExposureContrastScale: Boolean
    open var bOverride_LocalExposureDetailStrength: Boolean
    open var bOverride_LocalExposureBlurredLuminanceBlend: Boolean
    open var bOverride_LocalExposureBlurredLuminanceKernelSizePercent: Boolean
    open var bOverride_LocalExposureMiddleGreyBias: Boolean
    open var bOverride_LensFlareIntensity: Boolean
    open var bOverride_LensFlareTint: Boolean
    open var bOverride_LensFlareTints: Boolean
    open var bOverride_LensFlareBokehSize: Boolean
    open var bOverride_LensFlareBokehShape: Boolean
    open var bOverride_LensFlareThreshold: Boolean
    open var bOverride_VignetteIntensity: Boolean
    open var bOverride_GrainIntensity: Boolean
    open var bOverride_GrainJitter: Boolean
    open var bOverride_FilmGrainIntensity: Boolean
    open var bOverride_FilmGrainIntensityShadows: Boolean
    open var bOverride_FilmGrainIntensityMidtones: Boolean
    open var bOverride_FilmGrainIntensityHighlights: Boolean
    open var bOverride_FilmGrainShadowsMax: Boolean
    open var bOverride_FilmGrainHighlightsMin: Boolean
    open var bOverride_FilmGrainHighlightsMax: Boolean
    open var bOverride_FilmGrainTexelSize: Boolean
    open var bOverride_FilmGrainTexture: Boolean
    open var bOverride_AmbientOcclusionIntensity: Boolean
    open var bOverride_AmbientOcclusionStaticFraction: Boolean
    open var bOverride_AmbientOcclusionRadius: Boolean
    open var bOverride_AmbientOcclusionFadeDistance: Boolean
    open var bOverride_AmbientOcclusionFadeRadius: Boolean
    open var bOverride_AmbientOcclusionDistance: Boolean
    open var bOverride_AmbientOcclusionRadiusInWS: Boolean
    open var bOverride_AmbientOcclusionPower: Boolean
    open var bOverride_AmbientOcclusionBias: Boolean
    open var bOverride_AmbientOcclusionQuality: Boolean
    open var bOverride_AmbientOcclusionMipBlend: Boolean
    open var bOverride_AmbientOcclusionMipScale: Boolean
    open var bOverride_AmbientOcclusionMipThreshold: Boolean
    open var bOverride_AmbientOcclusionTemporalBlendWeight: Boolean
    open var bOverride_RayTracingAO: Boolean
    open var bOverride_RayTracingAOSamplesPerPixel: Boolean
    open var bOverride_RayTracingAOIntensity: Boolean
    open var bOverride_RayTracingAORadius: Boolean
    open var bOverride_LPVIntensity: Boolean
    open var bOverride_LPVDirectionalOcclusionIntensity: Boolean
    open var bOverride_LPVDirectionalOcclusionRadius: Boolean
    open var bOverride_LPVDiffuseOcclusionExponent: Boolean
    open var bOverride_LPVSpecularOcclusionExponent: Boolean
    open var bOverride_LPVDiffuseOcclusionIntensity: Boolean
    open var bOverride_LPVSpecularOcclusionIntensity: Boolean
    open var bOverride_LPVSize: Boolean
    open var bOverride_LPVSecondaryOcclusionIntensity: Boolean
    open var bOverride_LPVSecondaryBounceIntensity: Boolean
    open var bOverride_LPVGeometryVolumeBias: Boolean
    open var bOverride_LPVVplInjectionBias: Boolean
    open var bOverride_LPVEmissiveInjectionIntensity: Boolean
    open var bOverride_LPVFadeRange: Boolean
    open var bOverride_LPVDirectionalOcclusionFadeRange: Boolean
    open var bOverride_IndirectLightingColor: Boolean
    open var bOverride_IndirectLightingIntensity: Boolean
    open var bOverride_ColorGradingIntensity: Boolean
    open var bOverride_ColorGradingLUT: Boolean
    open var bOverride_DepthOfFieldFocalDistance: Boolean
    open var bOverride_DepthOfFieldFstop: Boolean
    open var bOverride_DepthOfFieldMinFstop: Boolean
    open var bOverride_DepthOfFieldBladeCount: Boolean
    open var bOverride_DepthOfFieldSensorWidth: Boolean
    open var bOverride_DepthOfFieldDepthBlurRadius: Boolean
    open var bOverride_DepthOfFieldDepthBlurAmount: Boolean
    open var bOverride_DepthOfFieldFocalRegion: Boolean
    open var bOverride_DepthOfFieldNearTransitionRegion: Boolean
    open var bOverride_DepthOfFieldFarTransitionRegion: Boolean
    open var bOverride_DepthOfFieldScale: Boolean
    open var bOverride_DepthOfFieldNearBlurSize: Boolean
    open var bOverride_DepthOfFieldFarBlurSize: Boolean
    open var bOverride_MobileHQGaussian: Boolean
    open var bOverride_DepthOfFieldOcclusion: Boolean
    open var bOverride_DepthOfFieldSkyFocusDistance: Boolean
    open var bOverride_DepthOfFieldVignetteSize: Boolean
    open var bOverride_MotionBlurAmount: Boolean
    open var bOverride_MotionBlurMax: Boolean
    open var bOverride_MotionBlurTargetFPS: Boolean
    open var bOverride_MotionBlurPerObjectSize: Boolean
    open var bOverride_ScreenPercentage: Boolean
    open var bOverride_ReflectionMethod: Boolean
    open var bOverride_LumenReflectionQuality: Boolean
    open var bOverride_ScreenSpaceReflectionIntensity: Boolean
    open var bOverride_ScreenSpaceReflectionQuality: Boolean
    open var bOverride_ScreenSpaceReflectionMaxRoughness: Boolean
    open var bOverride_ScreenSpaceReflectionRoughnessScale: Boolean
    open var bOverride_ReflectionsType: Boolean
    open var bOverride_RayTracingReflectionsMaxRoughness: Boolean
    open var bOverride_RayTracingReflectionsMaxBounces: Boolean
    open var bOverride_RayTracingReflectionsSamplesPerPixel: Boolean
    open var bOverride_RayTracingReflectionsShadows: Boolean
    open var bOverride_RayTracingReflectionsTranslucency: Boolean
    open var bOverride_TranslucencyType: Boolean
    open var bOverride_RayTracingTranslucencyMaxRoughness: Boolean
    open var bOverride_RayTracingTranslucencyRefractionRays: Boolean
    open var bOverride_RayTracingTranslucencySamplesPerPixel: Boolean
    open var bOverride_RayTracingTranslucencyShadows: Boolean
    open var bOverride_RayTracingTranslucencyRefraction: Boolean
    open var bOverride_DynamicGlobalIlluminationMethod: Boolean
    open var bOverride_LumenSceneLightingQuality: Boolean
    open var bOverride_LumenSceneDetail: Boolean
    open var bOverride_LumenSceneViewDistance: Boolean
    open var bOverride_LumenSceneLightingUpdateSpeed: Boolean
    open var bOverride_LumenFinalGatherQuality: Boolean
    open var bOverride_LumenFinalGatherLightingUpdateSpeed: Boolean
    open var bOverride_LumenMaxTraceDistance: Boolean
    open var bOverride_LumenRayLightingMode: Boolean
    open var bOverride_RayTracingGI: Boolean
    open var bOverride_RayTracingGIMaxBounces: Boolean
    open var bOverride_RayTracingGISamplesPerPixel: Boolean
    open var bOverride_PathTracingMaxBounces: Boolean
    open var bOverride_PathTracingSamplesPerPixel: Boolean
    open var bOverride_PathTracingFilterWidth: Boolean
    open var bOverride_PathTracingEnableEmissive: Boolean
    open var bOverride_PathTracingMaxPathExposure: Boolean
    open var bOverride_PathTracingEnableReferenceDOF: Boolean
    open var bOverride_PathTracingEnableDenoiser: Boolean
    open var bMobileHQGaussian: Boolean
    open var BloomMethod: String /* "BM_SOG" | "BM_FFT" | "BM_MAX" */
    open var AutoExposureMethod: String /* "AEM_Histogram" | "AEM_Basic" | "AEM_Manual" | "AEM_MAX" */
    open var DepthOfFieldMethod: String /* "DOFM_BokehDOF" | "DOFM_Gaussian" | "DOFM_CircleDOF" | "DOFM_MAX" */
    open var TemperatureType: String /* "TEMP_WhiteBalance" | "TEMP_ColorTemperature" | "TEMP_MAX" */
    open var WhiteTemp: Number
    open var WhiteTint: Number
    open var ColorSaturation: Vector4
    open var ColorContrast: Vector4
    open var ColorGamma: Vector4
    open var ColorGain: Vector4
    open var ColorOffset: Vector4
    open var ColorSaturationShadows: Vector4
    open var ColorContrastShadows: Vector4
    open var ColorGammaShadows: Vector4
    open var ColorGainShadows: Vector4
    open var ColorOffsetShadows: Vector4
    open var ColorSaturationMidtones: Vector4
    open var ColorContrastMidtones: Vector4
    open var ColorGammaMidtones: Vector4
    open var ColorGainMidtones: Vector4
    open var ColorOffsetMidtones: Vector4
    open var ColorSaturationHighlights: Vector4
    open var ColorContrastHighlights: Vector4
    open var ColorGammaHighlights: Vector4
    open var ColorGainHighlights: Vector4
    open var ColorOffsetHighlights: Vector4
    open var ColorCorrectionHighlightsMin: Number
    open var ColorCorrectionHighlightsMax: Number
    open var ColorCorrectionShadowsMax: Number
    open var BlueCorrection: Number
    open var ExpandGamut: Number
    open var ToneCurveAmount: Number
    open var FilmSlope: Number
    open var FilmToe: Number
    open var FilmShoulder: Number
    open var FilmBlackClip: Number
    open var FilmWhiteClip: Number
    open var SceneColorTint: LinearColor
    open var SceneFringeIntensity: Number
    open var ChromaticAberrationStartOffset: Number
    open var BloomIntensity: Number
    open var BloomThreshold: Number
    open var BloomSizeScale: Number
    open var Bloom1Size: Number
    open var Bloom2Size: Number
    open var Bloom3Size: Number
    open var Bloom4Size: Number
    open var Bloom5Size: Number
    open var Bloom6Size: Number
    open var Bloom1Tint: LinearColor
    open var Bloom2Tint: LinearColor
    open var Bloom3Tint: LinearColor
    open var Bloom4Tint: LinearColor
    open var Bloom5Tint: LinearColor
    open var Bloom6Tint: LinearColor
    open var BloomConvolutionScatterDispersion: Number
    open var BloomConvolutionSize: Number
    open var BloomConvolutionTexture: Texture2D
    open var BloomConvolutionCenterUV: Vector2D
    open var BloomConvolutionPreFilter: Vector3f
    open var BloomConvolutionPreFilterMin: Number
    open var BloomConvolutionPreFilterMax: Number
    open var BloomConvolutionPreFilterMult: Number
    open var BloomConvolutionBufferScale: Number
    open var BloomDirtMask: Texture
    open var BloomDirtMaskIntensity: Number
    open var BloomDirtMaskTint: LinearColor
    open var DynamicGlobalIlluminationMethod: String /* "None" | "Lumen" | "ScreenSpace" | "RayTraced" | "Plugin" | "EDynamicGlobalIlluminationMethod_MAX" */
    open var IndirectLightingColor: LinearColor
    open var IndirectLightingIntensity: Number
    open var RayTracingGI: Boolean
    open var LumenSceneLightingQuality: Number
    open var LumenSceneDetail: Number
    open var LumenSceneViewDistance: Number
    open var LumenSceneLightingUpdateSpeed: Number
    open var LumenFinalGatherQuality: Number
    open var LumenFinalGatherLightingUpdateSpeed: Number
    open var LumenMaxTraceDistance: Number
    open var RayTracingGIType: String /* "Disabled" | "BruteForce" | "FinalGather" | "ERayTracingGlobalIlluminationType_MAX" */
    open var RayTracingGIMaxBounces: Number
    open var RayTracingGISamplesPerPixel: Number
    open var ReflectionMethod: String /* "None" | "Lumen" | "ScreenSpace" | "RayTraced" | "EReflectionMethod_MAX" */
    open var ReflectionsType: String /* "ScreenSpace" | "RayTracing" | "EReflectionsType_MAX" */
    open var LumenReflectionQuality: Number
    open var LumenRayLightingMode: String /* "Default" | "SurfaceCache" | "HitLighting" | "ELumenRayLightingModeOverride_MAX" */
    open var ScreenSpaceReflectionIntensity: Number
    open var ScreenSpaceReflectionQuality: Number
    open var ScreenSpaceReflectionMaxRoughness: Number
    open var RayTracingReflectionsMaxRoughness: Number
    open var RayTracingReflectionsMaxBounces: Number
    open var RayTracingReflectionsSamplesPerPixel: Number
    open var RayTracingReflectionsShadows: String /* "Disabled" | "Hard_shadows" | "Area_shadows" | "EReflectedAndRefractedRayTracedShadows_MAX" */
    open var RayTracingReflectionsTranslucency: Boolean
    open var AmbientCubemapTint: LinearColor
    open var AmbientCubemapIntensity: Number
    open var AmbientCubemap: TextureCube
    open var CameraShutterSpeed: Number
    open var CameraISO: Number
    open var DepthOfFieldFstop: Number
    open var DepthOfFieldMinFstop: Number
    open var DepthOfFieldBladeCount: Number
    open var AutoExposureBias: Number
    open var AutoExposureBiasBackup: Number
    open var bOverride_AutoExposureBiasBackup: Boolean
    open var AutoExposureApplyPhysicalCameraExposure: Boolean
    open var AutoExposureBiasCurve: CurveFloat
    open var AutoExposureMeterMask: Texture
    open var AutoExposureLowPercent: Number
    open var AutoExposureHighPercent: Number
    open var AutoExposureMinBrightness: Number
    open var AutoExposureMaxBrightness: Number
    open var AutoExposureSpeedUp: Number
    open var AutoExposureSpeedDown: Number
    open var HistogramLogMin: Number
    open var HistogramLogMax: Number
    open var AutoExposureCalibrationConstant: Number
    open var LocalExposureContrastScale: Number
    open var LocalExposureDetailStrength: Number
    open var LocalExposureBlurredLuminanceBlend: Number
    open var LocalExposureBlurredLuminanceKernelSizePercent: Number
    open var LocalExposureMiddleGreyBias: Number
    open var LensFlareIntensity: Number
    open var LensFlareTint: LinearColor
    open var LensFlareBokehSize: Number
    open var LensFlareThreshold: Number
    open var LensFlareBokehShape: Texture
    open var LensFlareTints: LinearColor
    open var VignetteIntensity: Number
    open var GrainJitter: Number
    open var GrainIntensity: Number
    open var FilmGrainIntensity: Number
    open var FilmGrainIntensityShadows: Number
    open var FilmGrainIntensityMidtones: Number
    open var FilmGrainIntensityHighlights: Number
    open var FilmGrainShadowsMax: Number
    open var FilmGrainHighlightsMin: Number
    open var FilmGrainHighlightsMax: Number
    open var FilmGrainTexelSize: Number
    open var FilmGrainTexture: Texture2D
    open var AmbientOcclusionIntensity: Number
    open var AmbientOcclusionStaticFraction: Number
    open var AmbientOcclusionRadius: Number
    open var AmbientOcclusionRadiusInWS: Boolean
    open var AmbientOcclusionFadeDistance: Number
    open var AmbientOcclusionFadeRadius: Number
    open var AmbientOcclusionDistance: Number
    open var AmbientOcclusionPower: Number
    open var AmbientOcclusionBias: Number
    open var AmbientOcclusionQuality: Number
    open var AmbientOcclusionMipBlend: Number
    open var AmbientOcclusionMipScale: Number
    open var AmbientOcclusionMipThreshold: Number
    open var AmbientOcclusionTemporalBlendWeight: Number
    open var RayTracingAO: Boolean
    open var RayTracingAOSamplesPerPixel: Number
    open var RayTracingAOIntensity: Number
    open var RayTracingAORadius: Number
    open var ColorGradingIntensity: Number
    open var ColorGradingLUT: Texture
    open var DepthOfFieldSensorWidth: Number
    open var DepthOfFieldFocalDistance: Number
    open var DepthOfFieldDepthBlurAmount: Number
    open var DepthOfFieldDepthBlurRadius: Number
    open var DepthOfFieldFocalRegion: Number
    open var DepthOfFieldNearTransitionRegion: Number
    open var DepthOfFieldFarTransitionRegion: Number
    open var DepthOfFieldScale: Number
    open var DepthOfFieldNearBlurSize: Number
    open var DepthOfFieldFarBlurSize: Number
    open var DepthOfFieldOcclusion: Number
    open var DepthOfFieldSkyFocusDistance: Number
    open var DepthOfFieldVignetteSize: Number
    open var MotionBlurAmount: Number
    open var MotionBlurMax: Number
    open var MotionBlurTargetFPS: Number
    open var MotionBlurPerObjectSize: Number
    open var LPVIntensity: Number
    open var LPVVplInjectionBias: Number
    open var LPVSize: Number
    open var LPVSecondaryOcclusionIntensity: Number
    open var LPVSecondaryBounceIntensity: Number
    open var LPVGeometryVolumeBias: Number
    open var LPVEmissiveInjectionIntensity: Number
    open var LPVDirectionalOcclusionIntensity: Number
    open var LPVDirectionalOcclusionRadius: Number
    open var LPVDiffuseOcclusionExponent: Number
    open var LPVSpecularOcclusionExponent: Number
    open var LPVDiffuseOcclusionIntensity: Number
    open var LPVSpecularOcclusionIntensity: Number
    open var TranslucencyType: String /* "Raster" | "RayTracing" | "ETranslucencyType_MAX" */
    open var RayTracingTranslucencyMaxRoughness: Number
    open var RayTracingTranslucencyRefractionRays: Number
    open var RayTracingTranslucencySamplesPerPixel: Number
    open var RayTracingTranslucencyShadows: String /* "Disabled" | "Hard_shadows" | "Area_shadows" | "EReflectedAndRefractedRayTracedShadows_MAX" */
    open var RayTracingTranslucencyRefraction: Boolean
    open var PathTracingMaxBounces: Number
    open var PathTracingSamplesPerPixel: Number
    open var PathTracingFilterWidth: Number
    open var PathTracingEnableEmissive: Boolean
    open var PathTracingMaxPathExposure: Number
    open var PathTracingEnableReferenceDOF: Boolean
    open var PathTracingEnableDenoiser: Boolean
    open var LPVFadeRange: Number
    open var LPVDirectionalOcclusionFadeRange: Number
    open var ScreenPercentage: Number
    open var WeightedBlendables: WeightedBlendables
    open var Blendables: Array<UObject>
    open fun clone(): PostProcessSettings

    companion object {
        fun C(Other: UObject): PostProcessSettings
        fun C(Other: Any): PostProcessSettings
    }
}

external interface `T$199` {
    var ViewMatrix: Matrix
    var ProjectionMatrix: Matrix
    var ViewProjectionMatrix: Matrix
}

external open class MinimalViewInfo {
    open var Location: Vector
    open var Rotation: Rotator
    open var FOV: Number
    open var DesiredFOV: Number
    open var OrthoWidth: Number
    open var OrthoNearClipPlane: Number
    open var OrthoFarClipPlane: Number
    open var AspectRatio: Number
    open var bConstrainAspectRatio: Boolean
    open var bUseFieldOfViewForLOD: Boolean
    open var ProjectionMode: String /* "Perspective" | "Orthographic" | "ECameraProjectionMode_MAX" */
    open var PostProcessBlendWeight: Number
    open var PostProcessSettings: PostProcessSettings
    open var OffCenterProjectionOffset: Vector2D
    open fun clone(): MinimalViewInfo
    open fun CalculateProjectionMatrix(): Matrix
    open fun GetViewProjectionMatrix(ViewMatrix: Matrix = definedExternally, ProjectionMatrix: Matrix = definedExternally, ViewProjectionMatrix: Matrix = definedExternally): `T$199`

    companion object {
        fun C(Other: UObject): MinimalViewInfo
        fun C(Other: Any): MinimalViewInfo
        fun CalculateProjectionMatrix(MinimalViewInfo: MinimalViewInfo): Matrix
        fun GetViewProjectionMatrix(DesiredView: MinimalViewInfo, ViewMatrix: Matrix = definedExternally, ProjectionMatrix: Matrix = definedExternally, ViewProjectionMatrix: Matrix = definedExternally): `T$199`
    }
}

external open class CameraCacheEntry {
    open var Timestamp: Number
    open var POV: MinimalViewInfo
    open fun clone(): CameraCacheEntry

    companion object {
        fun C(Other: UObject): CameraCacheEntry
        fun C(Other: Any): CameraCacheEntry
    }
}

external open class TViewTarget {
    open var Target: Actor
    open var POV: MinimalViewInfo
    open var PlayerState: PlayerState
    open fun clone(): TViewTarget

    companion object {
        fun C(Other: UObject): TViewTarget
        fun C(Other: Any): TViewTarget
    }
}

external interface `T$200` {
    var PostProcessBlendWeight: Number
    var PostProcessSettings: PostProcessSettings
}

external interface `T$201` {
    var NewViewLocation: Vector
    var NewViewRotation: Rotator
    var NewFOV: Number
}

external open class CameraModifier : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bDebug: Boolean
    open var bExclusive: Boolean
    open var Priority: Number
    open var CameraOwner: PlayerCameraManager
    open var AlphaInTime: Number
    open var AlphaOutTime: Number
    open var Alpha: Number
    open fun OnCameraOwnerDestroyed(InOwner: Actor)
    open fun IsDisabled(): Boolean
    open fun GetViewTarget(): Actor
    open fun EnableModifier()
    open fun DisableModifier(bImmediate: Boolean)
    open fun BlueprintModifyPostProcess(DeltaTime: Number, PostProcessBlendWeight: Number = definedExternally, PostProcessSettings: PostProcessSettings = definedExternally): `T$200`
    open fun BlueprintModifyCamera(DeltaTime: Number, ViewLocation: Vector, ViewRotation: Rotator, FOV: Number, NewViewLocation: Vector = definedExternally, NewViewRotation: Rotator = definedExternally, NewFOV: Number = definedExternally): `T$201`

    companion object {
        fun Load(ResourceName: String): CameraModifier
        fun Find(Outer: UObject, ResourceName: String): CameraModifier
        fun GetDefaultObject(): CameraModifier
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraModifier
        fun C(Other: UObject): CameraModifier
        fun C(Other: Any): CameraModifier
    }
}

external open class CameraShakePattern : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): CameraShakePattern
        fun Find(Outer: UObject, ResourceName: String): CameraShakePattern
        fun GetDefaultObject(): CameraShakePattern
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraShakePattern
        fun C(Other: UObject): CameraShakePattern
        fun C(Other: Any): CameraShakePattern
    }
}

external object EInitialOscillatorOffset {
    var EOO_OffsetRandom: String /* "EOO_OffsetRandom" */
    var EOO_OffsetZero: String /* "EOO_OffsetZero" */
    var EOO_MAX: String /* "EOO_MAX" */
}

external object EOscillatorWaveform {
    var SineWave: String /* "SineWave" */
    var PerlinNoise: String /* "PerlinNoise" */
    var EOscillatorWaveform_MAX: String /* "EOscillatorWaveform_MAX" */
}

external open class FOscillator {
    open var Amplitude: Number
    open var Frequency: Number
    open var InitialOffset: String /* "EOO_OffsetRandom" | "EOO_OffsetZero" | "EOO_MAX" */
    open var Waveform: String /* "SineWave" | "PerlinNoise" | "EOscillatorWaveform_MAX" */
    open fun clone(): FOscillator

    companion object {
        fun C(Other: UObject): FOscillator
        fun C(Other: Any): FOscillator
    }
}

external open class ROscillator {
    open var Pitch: FOscillator
    open var Yaw: FOscillator
    open var Roll: FOscillator
    open fun clone(): ROscillator

    companion object {
        fun C(Other: UObject): ROscillator
        fun C(Other: Any): ROscillator
    }
}

external open class VOscillator {
    open var X: FOscillator
    open var Y: FOscillator
    open var Z: FOscillator
    open fun clone(): VOscillator

    companion object {
        fun C(Other: UObject): VOscillator
        fun C(Other: Any): VOscillator
    }
}

external open class SubTrackGroup {
    open var GroupName: String
    open var TrackIndices: Array<Number>
    open var bIsCollapsed: Boolean
    open var bIsSelected: Boolean
    open fun clone(): SubTrackGroup

    companion object {
        fun C(Other: UObject): SubTrackGroup
        fun C(Other: Any): SubTrackGroup
    }
}

external open class SupportedSubTrackInfo {
    open var SupportedClass: UnrealEngineClass
    open var SubTrackName: String
    open var GroupIndex: Number
    open fun clone(): SupportedSubTrackInfo

    companion object {
        fun C(Other: UObject): SupportedSubTrackInfo
        fun C(Other: Any): SupportedSubTrackInfo
    }
}

external object ETrackActiveCondition {
    var ETAC_Always: String /* "ETAC_Always" */
    var ETAC_GoreEnabled: String /* "ETAC_GoreEnabled" */
    var ETAC_GoreDisabled: String /* "ETAC_GoreDisabled" */
    var ETAC_MAX: String /* "ETAC_MAX" */
}

external open class InterpTrack : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SubTracks: Array<InterpTrack>
    open var SubTrackGroups: Array<SubTrackGroup>
    open var SupportedSubTracks: Array<SupportedSubTrackInfo>
    open var TrackInstClass: UnrealEngineClass
    open var ActiveCondition: String /* "ETAC_Always" | "ETAC_GoreEnabled" | "ETAC_GoreDisabled" | "ETAC_MAX" */
    open var TrackTitle: String
    open var bOnePerGroup: Boolean
    open var bDirGroupOnly: Boolean
    open var bDisableTrack: Boolean
    open var bIsSelected: Boolean
    open var TrackIcon: Texture2D
    open var bIsAnimControlTrack: Boolean
    open var bSubTrackOnly: Boolean
    open var bVisible: Boolean
    open var bIsRecording: Boolean
    open var bIsCollapsed: Boolean

    companion object {
        fun Load(ResourceName: String): InterpTrack
        fun Find(Outer: UObject, ResourceName: String): InterpTrack
        fun GetDefaultObject(): InterpTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrack
        fun C(Other: UObject): InterpTrack
        fun C(Other: Any): InterpTrack
    }
}

external open class InterpGroup : UObject {
    constructor()
    constructor(Outer: UObject)
    open var InterpTracks: Array<InterpTrack>
    open var GroupName: String
    open var GroupColor: Color
    open var bCollapsed: Boolean
    open var bVisible: Boolean
    open var bIsFolder: Boolean
    open var bIsParented: Boolean
    open var bIsSelected: Boolean

    companion object {
        fun Load(ResourceName: String): InterpGroup
        fun Find(Outer: UObject, ResourceName: String): InterpGroup
        fun GetDefaultObject(): InterpGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpGroup
        fun C(Other: UObject): InterpGroup
        fun C(Other: Any): InterpGroup
    }
}

external open class CameraAnim : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CameraInterpGroup: InterpGroup
    open var PreviewInterpGroup: InterpGroup
    open var AnimLength: Number
    open var BoundingBox: Box
    open var bRelativeToInitialTransform: Boolean
    open var bRelativeToInitialFOV: Boolean
    open var BaseFOV: Number
    open var BasePostProcessSettings: PostProcessSettings
    open var BasePostProcessBlendWeight: Number

    companion object {
        fun Load(ResourceName: String): CameraAnim
        fun Find(Outer: UObject, ResourceName: String): CameraAnim
        fun GetDefaultObject(): CameraAnim
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnim
        fun C(Other: UObject): CameraAnim
        fun C(Other: Any): CameraAnim
    }
}

external open class MovieSceneSignedObject : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Signature: Guid

    companion object {
        fun Load(ResourceName: String): MovieSceneSignedObject
        fun Find(Outer: UObject, ResourceName: String): MovieSceneSignedObject
        fun GetDefaultObject(): MovieSceneSignedObject
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneSignedObject
        fun C(Other: UObject): MovieSceneSignedObject
        fun C(Other: Any): MovieSceneSignedObject
    }
}

external open class MovieSceneEvaluationTemplateSerialNumber {
    open var Value: Any
    open fun clone(): MovieSceneEvaluationTemplateSerialNumber

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationTemplateSerialNumber
        fun C(Other: Any): MovieSceneEvaluationTemplateSerialNumber
    }
}

external open class MovieSceneTrackIdentifier {
    open var Value: Any
    open fun clone(): MovieSceneTrackIdentifier

    companion object {
        fun C(Other: UObject): MovieSceneTrackIdentifier
        fun C(Other: Any): MovieSceneTrackIdentifier
    }
}

external open class MovieSceneTemplateGenerationLedger {
    open var LastTrackIdentifier: MovieSceneTrackIdentifier
    open var TrackSignatureToTrackIdentifier: Any
    open var SubSectionRanges: Any
    open fun clone(): MovieSceneTemplateGenerationLedger

    companion object {
        fun C(Other: UObject): MovieSceneTemplateGenerationLedger
        fun C(Other: Any): MovieSceneTemplateGenerationLedger
    }
}

external open class MovieSceneEvaluationTemplate {
    open var Tracks: Any
    open var SequenceSignature: Guid
    open var TemplateSerialNumber: MovieSceneEvaluationTemplateSerialNumber
    open var TemplateLedger: MovieSceneTemplateGenerationLedger
    open fun clone(): MovieSceneEvaluationTemplate

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationTemplate
        fun C(Other: Any): MovieSceneEvaluationTemplate
    }
}

external open class MovieSceneSequenceID {
    open var Value: Any
    open fun clone(): MovieSceneSequenceID

    companion object {
        fun C(Other: UObject): MovieSceneSequenceID
        fun C(Other: Any): MovieSceneSequenceID
    }
}

external open class MovieSceneSequenceHierarchyNode {
    open var ParentID: MovieSceneSequenceID
    open var Children: Array<MovieSceneSequenceID>
    open fun clone(): MovieSceneSequenceHierarchyNode

    companion object {
        fun C(Other: UObject): MovieSceneSequenceHierarchyNode
        fun C(Other: Any): MovieSceneSequenceHierarchyNode
    }
}

external open class MovieSceneSubSequenceTree {
    open fun clone(): MovieSceneSubSequenceTree

    companion object {
        fun C(Other: UObject): MovieSceneSubSequenceTree
        fun C(Other: Any): MovieSceneSubSequenceTree
    }
}

external open class MovieSceneSequenceHierarchy {
    open var RootNode: MovieSceneSequenceHierarchyNode
    open var Tree: MovieSceneSubSequenceTree
    open var SubSequences: Any
    open var Hierarchy: Any
    open fun clone(): MovieSceneSequenceHierarchy

    companion object {
        fun C(Other: UObject): MovieSceneSequenceHierarchy
        fun C(Other: Any): MovieSceneSequenceHierarchy
    }
}

external open class MovieSceneEvaluationFieldEntityTree {
    open fun clone(): MovieSceneEvaluationFieldEntityTree

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldEntityTree
        fun C(Other: Any): MovieSceneEvaluationFieldEntityTree
    }
}

external open class MovieSceneEvaluationFieldEntityKey {
    open var EntityOwner: Any
    open var EntityID: Any
    open fun clone(): MovieSceneEvaluationFieldEntityKey

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldEntityKey
        fun C(Other: Any): MovieSceneEvaluationFieldEntityKey
    }
}

external open class MovieSceneEvaluationFieldEntity {
    open var Key: MovieSceneEvaluationFieldEntityKey
    open var SharedMetaDataIndex: Number
    open fun clone(): MovieSceneEvaluationFieldEntity

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldEntity
        fun C(Other: Any): MovieSceneEvaluationFieldEntity
    }
}

external object ESectionEvaluationFlags {
    var None: String /* "None" */
    var PreRoll: String /* "PreRoll" */
    var PostRoll: String /* "PostRoll" */
    var ESectionEvaluationFlags_MAX: String /* "ESectionEvaluationFlags_MAX" */
}

external open class MovieSceneEvaluationFieldEntityMetaData {
    open var OverrideBoundPropertyPath: String
    open var ForcedTime: FrameNumber
    open var Flags: String /* "None" | "PreRoll" | "PostRoll" | "ESectionEvaluationFlags_MAX" */
    open var bEvaluateInSequencePreRoll: Boolean
    open var bEvaluateInSequencePostRoll: Boolean
    open fun clone(): MovieSceneEvaluationFieldEntityMetaData

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldEntityMetaData
        fun C(Other: Any): MovieSceneEvaluationFieldEntityMetaData
    }
}

external open class MovieSceneEvaluationFieldSharedEntityMetaData {
    open var ObjectBindingID: Guid
    open fun clone(): MovieSceneEvaluationFieldSharedEntityMetaData

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldSharedEntityMetaData
        fun C(Other: Any): MovieSceneEvaluationFieldSharedEntityMetaData
    }
}

external open class MovieSceneEntityComponentField {
    open var PersistentEntityTree: MovieSceneEvaluationFieldEntityTree
    open var OneShotEntityTree: MovieSceneEvaluationFieldEntityTree
    open var Entities: Array<MovieSceneEvaluationFieldEntity>
    open var EntityMetaData: Array<MovieSceneEvaluationFieldEntityMetaData>
    open var SharedMetaData: Array<MovieSceneEvaluationFieldSharedEntityMetaData>
    open fun clone(): MovieSceneEntityComponentField

    companion object {
        fun C(Other: UObject): MovieSceneEntityComponentField
        fun C(Other: Any): MovieSceneEntityComponentField
    }
}

external open class MovieSceneFrameRange {
    open fun clone(): MovieSceneFrameRange

    companion object {
        fun C(Other: UObject): MovieSceneFrameRange
        fun C(Other: Any): MovieSceneFrameRange
    }
}

external open class MovieSceneEvaluationGroupLUTIndex {
    open var NumInitPtrs: Number
    open var NumEvalPtrs: Number
    open fun clone(): MovieSceneEvaluationGroupLUTIndex

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationGroupLUTIndex
        fun C(Other: Any): MovieSceneEvaluationGroupLUTIndex
    }
}

external open class MovieSceneEvaluationFieldTrackPtr {
    open var SequenceID: MovieSceneSequenceID
    open var TrackIdentifier: MovieSceneTrackIdentifier
    open fun clone(): MovieSceneEvaluationFieldTrackPtr

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldTrackPtr
        fun C(Other: Any): MovieSceneEvaluationFieldTrackPtr
    }
}

external open class MovieSceneFieldEntry_EvaluationTrack {
    open var TrackPtr: MovieSceneEvaluationFieldTrackPtr
    open var NumChildren: Any
    open fun clone(): MovieSceneFieldEntry_EvaluationTrack

    companion object {
        fun C(Other: UObject): MovieSceneFieldEntry_EvaluationTrack
        fun C(Other: Any): MovieSceneFieldEntry_EvaluationTrack
    }
}

external open class MovieSceneFieldEntry_ChildTemplate {
    open var ChildIndex: Any
    open var Flags: String /* "None" | "PreRoll" | "PostRoll" | "ESectionEvaluationFlags_MAX" */
    open var ForcedTime: FrameNumber
    open fun clone(): MovieSceneFieldEntry_ChildTemplate

    companion object {
        fun C(Other: UObject): MovieSceneFieldEntry_ChildTemplate
        fun C(Other: Any): MovieSceneFieldEntry_ChildTemplate
    }
}

external open class MovieSceneEvaluationGroup {
    open var LUTIndices: Array<MovieSceneEvaluationGroupLUTIndex>
    open var TrackLUT: Array<MovieSceneFieldEntry_EvaluationTrack>
    open var SectionLUT: Array<MovieSceneFieldEntry_ChildTemplate>
    open fun clone(): MovieSceneEvaluationGroup

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationGroup
        fun C(Other: Any): MovieSceneEvaluationGroup
    }
}

external open class MovieSceneEvaluationKey {
    open var SequenceID: MovieSceneSequenceID
    open var TrackIdentifier: MovieSceneTrackIdentifier
    open var SectionIndex: Any
    open fun clone(): MovieSceneEvaluationKey

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationKey
        fun C(Other: Any): MovieSceneEvaluationKey
    }
}

external open class MovieSceneOrderedEvaluationKey {
    open var Key: MovieSceneEvaluationKey
    open var SetupIndex: Any
    open var TearDownIndex: Any
    open fun clone(): MovieSceneOrderedEvaluationKey

    companion object {
        fun C(Other: UObject): MovieSceneOrderedEvaluationKey
        fun C(Other: Any): MovieSceneOrderedEvaluationKey
    }
}

external open class MovieSceneEvaluationMetaData {
    open var ActiveSequences: Array<MovieSceneSequenceID>
    open var ActiveEntities: Array<MovieSceneOrderedEvaluationKey>
    open fun clone(): MovieSceneEvaluationMetaData

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationMetaData
        fun C(Other: Any): MovieSceneEvaluationMetaData
    }
}

external open class MovieSceneEvaluationField {
    open var Signature: Guid
    open var Ranges: Array<MovieSceneFrameRange>
    open var Groups: Array<MovieSceneEvaluationGroup>
    open var MetaData: Array<MovieSceneEvaluationMetaData>
    open fun clone(): MovieSceneEvaluationField

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationField
        fun C(Other: Any): MovieSceneEvaluationField
    }
}

external open class MovieSceneSequenceCompilerMaskStruct {
    open var bHierarchy: Boolean
    open var bEvaluationTemplate: Boolean
    open var bEvaluationTemplateField: Boolean
    open var bEntityComponentField: Boolean
    open fun clone(): MovieSceneSequenceCompilerMaskStruct

    companion object {
        fun C(Other: UObject): MovieSceneSequenceCompilerMaskStruct
        fun C(Other: Any): MovieSceneSequenceCompilerMaskStruct
    }
}

external object EMovieSceneSequenceFlags {
    var None: String /* "None" */
    var Volatile: String /* "Volatile" */
    var BlockingEvaluation: String /* "BlockingEvaluation" */
    var InheritedFlags: String /* "InheritedFlags" */
    var EMovieSceneSequenceFlags_MAX: String /* "EMovieSceneSequenceFlags_MAX" */
}

external open class MovieSceneCompiledData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var EvaluationTemplate: MovieSceneEvaluationTemplate
    open var Hierarchy: MovieSceneSequenceHierarchy
    open var EntityComponentField: MovieSceneEntityComponentField
    open var TrackTemplateField: MovieSceneEvaluationField
    open var DeterminismFences: Array<FrameTime>
    open var CompiledSignature: Guid
    open var CompilerVersion: Guid
    open var AccumulatedMask: MovieSceneSequenceCompilerMaskStruct
    open var AllocatedMask: MovieSceneSequenceCompilerMaskStruct
    open var AccumulatedFlags: String /* "None" | "Volatile" | "BlockingEvaluation" | "InheritedFlags" | "EMovieSceneSequenceFlags_MAX" */

    companion object {
        fun Load(ResourceName: String): MovieSceneCompiledData
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCompiledData
        fun GetDefaultObject(): MovieSceneCompiledData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCompiledData
        fun C(Other: UObject): MovieSceneCompiledData
        fun C(Other: Any): MovieSceneCompiledData
    }
}

external object EMovieSceneCompletionMode {
    var KeepState: String /* "KeepState" */
    var RestoreState: String /* "RestoreState" */
    var ProjectDefault: String /* "ProjectDefault" */
    var EMovieSceneCompletionMode_MAX: String /* "EMovieSceneCompletionMode_MAX" */
}

external open class Timecode {
    open var Hours: Number
    open var Minutes: Number
    open var Seconds: Number
    open var Frames: Number
    open var bDropFrameFormat: Boolean
    open fun clone(): Timecode
    open fun TimecodeToString(bForceSignDisplay: Boolean): String

    companion object {
        fun C(Other: UObject): Timecode
        fun C(Other: Any): Timecode
        fun TimecodeToString(InTimecode: Timecode, bForceSignDisplay: Boolean): String
        fun GetTimecode(): Timecode
    }
}

external open class MovieSceneTimecodeSource {
    open var Timecode: Timecode
    open fun clone(): MovieSceneTimecodeSource

    companion object {
        fun C(Other: UObject): MovieSceneTimecodeSource
        fun C(Other: Any): MovieSceneTimecodeSource
    }
}

external object EMovieSceneObjectBindingSpace {
    var Local: String /* "Local" */
    var Root: String /* "Root" */
    var Unused: String /* "Unused" */
    var EMovieSceneObjectBindingSpace_MAX: String /* "EMovieSceneObjectBindingSpace_MAX" */
}

external open class MovieSceneObjectBindingID {
    open var Guid: Guid
    open var SequenceID: Number
    open var ResolveParentIndex: Number
    open var Space: String /* "Local" | "Root" | "Unused" | "EMovieSceneObjectBindingSpace_MAX" */
    open fun clone(): MovieSceneObjectBindingID
    open fun GetBoundObjects(): Array<UObject>

    companion object {
        fun C(Other: UObject): MovieSceneObjectBindingID
        fun C(Other: Any): MovieSceneObjectBindingID
        fun GetBoundObjects(ObjectBinding: MovieSceneObjectBindingID): Array<UObject>
    }
}

external open class MovieSceneSectionEvalOptions {
    open var bCanEditCompletionMode: Boolean
    open var CompletionMode: String /* "KeepState" | "RestoreState" | "ProjectDefault" | "EMovieSceneCompletionMode_MAX" */
    open fun clone(): MovieSceneSectionEvalOptions

    companion object {
        fun C(Other: UObject): MovieSceneSectionEvalOptions
        fun C(Other: Any): MovieSceneSectionEvalOptions
    }
}

external open class MovieSceneEasingSettings {
    open var AutoEaseInDuration: Number
    open var AutoEaseOutDuration: Number
    open var EaseIn: Any
    open var bManualEaseIn: Boolean
    open var ManualEaseInDuration: Number
    open var EaseOut: Any
    open var bManualEaseOut: Boolean
    open var ManualEaseOutDuration: Number
    open var AutoEaseInTime: Number
    open var AutoEaseOutTime: Number
    open var ManualEaseInTime: Number
    open var ManualEaseOutTime: Number
    open fun clone(): MovieSceneEasingSettings

    companion object {
        fun C(Other: UObject): MovieSceneEasingSettings
        fun C(Other: Any): MovieSceneEasingSettings
    }
}

external object EMovieSceneBlendType {
    var Invalid: String /* "Invalid" */
    var Absolute: String /* "Absolute" */
    var Additive: String /* "Additive" */
    var Relative: String /* "Relative" */
    var AdditiveFromBase: String /* "AdditiveFromBase" */
    var EMovieSceneBlendType_MAX: String /* "EMovieSceneBlendType_MAX" */
}

external open class OptionalMovieSceneBlendType {
    open var BlendType: String /* "Invalid" | "Absolute" | "Additive" | "Relative" | "AdditiveFromBase" | "EMovieSceneBlendType_MAX" */
    open var bIsValid: Boolean
    open fun clone(): OptionalMovieSceneBlendType

    companion object {
        fun C(Other: UObject): OptionalMovieSceneBlendType
        fun C(Other: Any): OptionalMovieSceneBlendType
    }
}

external object ESequenceTimeUnit {
    var DisplayRate: String /* "DisplayRate" */
    var TickResolution: String /* "TickResolution" */
    var ESequenceTimeUnit_MAX: String /* "ESequenceTimeUnit_MAX" */
}

external open class MovieSceneScriptingChannel : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChannelName: String

    companion object {
        fun Load(ResourceName: String): MovieSceneScriptingChannel
        fun Find(Outer: UObject, ResourceName: String): MovieSceneScriptingChannel
        fun GetDefaultObject(): MovieSceneScriptingChannel
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneScriptingChannel
        fun C(Other: UObject): MovieSceneScriptingChannel
        fun C(Other: Any): MovieSceneScriptingChannel
    }
}

external open class MovieSceneSection : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var EvalOptions: MovieSceneSectionEvalOptions
    open var Easing: MovieSceneEasingSettings
    open var SectionRange: MovieSceneFrameRange
    open var TimecodeSource: MovieSceneTimecodeSource
    open var PreRollFrames: FrameNumber
    open var PostRollFrames: FrameNumber
    open var RowIndex: Number
    open var OverlapPriority: Number
    open var bIsActive: Boolean
    open var bIsLocked: Boolean
    open var StartTime: Number
    open var EndTime: Number
    open var PrerollTime: Number
    open var PostrollTime: Number
    open var bIsInfinite: Boolean
    open var bSupportsInfiniteRange: Boolean
    open var BlendType: OptionalMovieSceneBlendType
    open fun SetRowIndex(NewRowIndex: Number)
    open fun SetPreRollFrames(InPreRollFrames: Number)
    open fun SetPostRollFrames(InPostRollFrames: Number)
    open fun SetOverlapPriority(NewPriority: Number)
    open fun SetIsLocked(bInIsLocked: Boolean)
    open fun SetIsActive(bInIsActive: Boolean)
    open fun SetCompletionMode(InCompletionMode: String /* "KeepState" | "RestoreState" | "ProjectDefault" | "EMovieSceneCompletionMode_MAX" */)
    open fun SetBlendType(InBlendType: String /* "Invalid" | "Absolute" | "Additive" | "Relative" | "AdditiveFromBase" | "EMovieSceneBlendType_MAX" */)
    open fun IsLocked(): Boolean
    open fun IsActive(): Boolean
    open fun GetRowIndex(): Number
    open fun GetPreRollFrames(): Number
    open fun GetPostRollFrames(): Number
    open fun GetOverlapPriority(): Number
    open fun GetCompletionMode(): String /* "KeepState" | "RestoreState" | "ProjectDefault" | "EMovieSceneCompletionMode_MAX" */
    open fun GetBlendType(): OptionalMovieSceneBlendType
    open fun LoadAnimSequenceIntoControlRigSection(AnimSequence: AnimSequence, SkelMeshComp: SkeletalMeshComponent, InStartFrame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bKeyReduce: Boolean, Tolerance: Number): Boolean
    open fun FindChannelsByType(ChannelType: UnrealEngineClass): Array<MovieSceneScriptingChannel>
    open fun GetAllChannels(): Array<MovieSceneScriptingChannel>
    open fun GetChannels(): Array<MovieSceneScriptingChannel>
    open fun GetChannelsByType(ChannelType: UnrealEngineClass): Array<MovieSceneScriptingChannel>
    open fun GetEndFrame(): Number
    open fun GetEndFrameSeconds(): Number
    open fun GetStartFrame(): Number
    open fun GetStartFrameSeconds(): Number
    open fun HasEndFrame(): Boolean
    open fun HasStartFrame(): Boolean
    open fun SetEndFrame(EndFrame: Number)
    open fun SetEndFrameBounded(bIsBounded: Boolean)
    open fun SetEndFrameSeconds(EndTime: Number)
    open fun SetRange(StartFrame: Number, EndFrame: Number)
    open fun SetRangeSeconds(StartTime: Number, EndTime: Number)
    open fun SetStartFrame(StartFrame: Number)
    open fun SetStartFrameBounded(bIsBounded: Boolean)
    open fun SetStartFrameSeconds(StartTime: Number)

    companion object {
        fun Load(ResourceName: String): MovieSceneSection
        fun Find(Outer: UObject, ResourceName: String): MovieSceneSection
        fun GetDefaultObject(): MovieSceneSection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneSection
        fun C(Other: UObject): MovieSceneSection
        fun C(Other: Any): MovieSceneSection
        fun LoadAnimSequenceIntoControlRigSection(MovieSceneSection: MovieSceneSection, AnimSequence: AnimSequence, SkelMeshComp: SkeletalMeshComponent, InStartFrame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bKeyReduce: Boolean, Tolerance: Number): Boolean
        fun FindChannelsByType(Section: MovieSceneSection, ChannelType: UnrealEngineClass): Array<MovieSceneScriptingChannel>
        fun GetAllChannels(Section: MovieSceneSection): Array<MovieSceneScriptingChannel>
        fun GetChannels(Section: MovieSceneSection): Array<MovieSceneScriptingChannel>
        fun GetChannelsByType(Section: MovieSceneSection, ChannelType: UnrealEngineClass): Array<MovieSceneScriptingChannel>
        fun GetEndFrame(Section: MovieSceneSection): Number
        fun GetEndFrameSeconds(Section: MovieSceneSection): Number
        fun GetStartFrame(Section: MovieSceneSection): Number
        fun GetStartFrameSeconds(Section: MovieSceneSection): Number
        fun HasEndFrame(Section: MovieSceneSection): Boolean
        fun HasStartFrame(Section: MovieSceneSection): Boolean
        fun SetEndFrame(Section: MovieSceneSection, EndFrame: Number)
        fun SetEndFrameBounded(Section: MovieSceneSection, bIsBounded: Boolean)
        fun SetEndFrameSeconds(Section: MovieSceneSection, EndTime: Number)
        fun SetRange(Section: MovieSceneSection, StartFrame: Number, EndFrame: Number)
        fun SetRangeSeconds(Section: MovieSceneSection, StartTime: Number, EndTime: Number)
        fun SetStartFrame(Section: MovieSceneSection, StartFrame: Number)
        fun SetStartFrameBounded(Section: MovieSceneSection, bIsBounded: Boolean)
        fun SetStartFrameSeconds(Section: MovieSceneSection, StartTime: Number)
    }
}

external open class MovieSceneEventSectionBase : MovieSceneSection {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MovieSceneEventSectionBase
        fun Find(Outer: UObject, ResourceName: String): MovieSceneEventSectionBase
        fun GetDefaultObject(): MovieSceneEventSectionBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneEventSectionBase
        fun C(Other: UObject): MovieSceneEventSectionBase
        fun C(Other: Any): MovieSceneEventSectionBase
    }
}

external open class K2Node_EditablePinBase : K2Node {
    constructor()
    constructor(Outer: UObject)
    open var bIsEditable: Boolean

    companion object {
        fun Load(ResourceName: String): K2Node_EditablePinBase
        fun Find(Outer: UObject, ResourceName: String): K2Node_EditablePinBase
        fun GetDefaultObject(): K2Node_EditablePinBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): K2Node_EditablePinBase
        fun C(Other: UObject): K2Node_EditablePinBase
        fun C(Other: Any): K2Node_EditablePinBase
    }
}

external open class K2Node_Event : K2Node_EditablePinBase {
    constructor()
    constructor(Outer: UObject)
    open var EventSignatureName: String
    open var EventSignatureClass: UnrealEngineClass
    open var EventReference: MemberReference
    open var bOverrideFunction: Boolean
    open var bInternalEvent: Boolean
    open var CustomFunctionName: String
    open var FunctionFlags: Any

    companion object {
        fun Load(ResourceName: String): K2Node_Event
        fun Find(Outer: UObject, ResourceName: String): K2Node_Event
        fun GetDefaultObject(): K2Node_Event
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): K2Node_Event
        fun C(Other: UObject): K2Node_Event
        fun C(Other: Any): K2Node_Event
    }
}

external open class KismetUserDeclaredFunctionMetadata {
    open var Tooltip: String
    open var Category: String
    open var Keywords: String
    open var CompactNodeTitle: String
    open var InstanceTitleColor: LinearColor
    open var DeprecationMessage: String
    open var bIsDeprecated: Boolean
    open var bCallInEditor: Boolean
    open var bThreadSafe: Boolean
    open var HasLatentFunctions: Any
    open fun clone(): KismetUserDeclaredFunctionMetadata

    companion object {
        fun C(Other: UObject): KismetUserDeclaredFunctionMetadata
        fun C(Other: Any): KismetUserDeclaredFunctionMetadata
    }
}

external open class K2Node_CustomEvent : K2Node_Event {
    constructor()
    constructor(Outer: UObject)
    open var DeprecationMessage: String
    open var bIsDeprecated: Boolean
    open var bCallInEditor: Boolean
    open var MetaData: KismetUserDeclaredFunctionMetadata

    companion object {
        fun Load(ResourceName: String): K2Node_CustomEvent
        fun Find(Outer: UObject, ResourceName: String): K2Node_CustomEvent
        fun GetDefaultObject(): K2Node_CustomEvent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): K2Node_CustomEvent
        fun C(Other: UObject): K2Node_CustomEvent
        fun C(Other: Any): K2Node_CustomEvent
    }
}

external open class SequencerQuickBindingResult {
    open var EventEndpoint: K2Node_CustomEvent
    open var PayloadNames: Array<String>
    open fun clone(): SequencerQuickBindingResult
    open fun IsEventEndpointValid(): Boolean

    companion object {
        fun C(Other: UObject): SequencerQuickBindingResult
        fun C(Other: Any): SequencerQuickBindingResult
        fun IsEventEndpointValid(InEndpoint: SequencerQuickBindingResult): Boolean
    }
}

external open class MovieSceneEventPtrs {
    open var UFunction: UFunction
    open var BoundObjectProperty: Any
    open fun clone(): MovieSceneEventPtrs

    companion object {
        fun C(Other: UObject): MovieSceneEventPtrs
        fun C(Other: Any): MovieSceneEventPtrs
    }
}

external open class MovieSceneEvent {
    open var Ptrs: MovieSceneEventPtrs
    open var PayloadVariables: Any
    open var CompiledFunctionName: String
    open var BoundObjectPinName: String
    open var WeakEndpoint: Any
    open var GraphGuid: Guid
    open var NodeGuid: Guid
    open var FunctionEntry: Any
    open fun clone(): MovieSceneEvent
    open fun GetBoundObjectPropertyClass(): UnrealEngineClass

    companion object {
        fun C(Other: UObject): MovieSceneEvent
        fun C(Other: Any): MovieSceneEvent
        fun GetBoundObjectPropertyClass(EventKey: MovieSceneEvent): UnrealEngineClass
    }
}

external open class MovieSceneMarkedFrame {
    open var FrameNumber: FrameNumber
    open var Label: String
    open var Color: LinearColor
    open var bIsDeterminismFence: Boolean
    open fun clone(): MovieSceneMarkedFrame

    companion object {
        fun C(Other: UObject): MovieSceneMarkedFrame
        fun C(Other: Any): MovieSceneMarkedFrame
    }
}

external open class MovieSceneTrackEvalOptions {
    open var bCanEvaluateNearestSection: Boolean
    open var bEvalNearestSection: Boolean
    open var bEvaluateInPreroll: Boolean
    open var bEvaluateInPostroll: Boolean
    open var bEvaluateNearestSection: Boolean
    open fun clone(): MovieSceneTrackEvalOptions

    companion object {
        fun C(Other: UObject): MovieSceneTrackEvalOptions
        fun C(Other: Any): MovieSceneTrackEvalOptions
    }
}

external open class MovieSceneTrackDisplayOptions {
    open var bShowVerticalFrames: Boolean
    open fun clone(): MovieSceneTrackDisplayOptions

    companion object {
        fun C(Other: UObject): MovieSceneTrackDisplayOptions
        fun C(Other: Any): MovieSceneTrackDisplayOptions
    }
}

external open class FrameNumberRangeBound {
    open var Type: String /* "Exclusive" | "Inclusive" | "Open" | "ERangeBoundTypes_MAX" */
    open var Value: FrameNumber
    open fun clone(): FrameNumberRangeBound

    companion object {
        fun C(Other: UObject): FrameNumberRangeBound
        fun C(Other: Any): FrameNumberRangeBound
    }
}

external open class FrameNumberRange {
    open var LowerBound: FrameNumberRangeBound
    open var UpperBound: FrameNumberRangeBound
    open fun clone(): FrameNumberRange

    companion object {
        fun C(Other: UObject): FrameNumberRange
        fun C(Other: Any): FrameNumberRange
    }
}

external open class MovieSceneTrackEvaluationFieldEntry {
    open var Section: MovieSceneSection
    open var Range: FrameNumberRange
    open var ForcedTime: FrameNumber
    open var Flags: String /* "None" | "PreRoll" | "PostRoll" | "ESectionEvaluationFlags_MAX" */
    open var LegacySortOrder: Any
    open fun clone(): MovieSceneTrackEvaluationFieldEntry

    companion object {
        fun C(Other: UObject): MovieSceneTrackEvaluationFieldEntry
        fun C(Other: Any): MovieSceneTrackEvaluationFieldEntry
    }
}

external open class MovieSceneTrackEvaluationField {
    open var Entries: Array<MovieSceneTrackEvaluationFieldEntry>
    open fun clone(): MovieSceneTrackEvaluationField

    companion object {
        fun C(Other: UObject): MovieSceneTrackEvaluationField
        fun C(Other: Any): MovieSceneTrackEvaluationField
    }
}

external open class MovieSceneTrack : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var EvalOptions: MovieSceneTrackEvalOptions
    open var DisplayOptions: MovieSceneTrackDisplayOptions
    open var bIsEvalDisabled: Boolean
    open var RowsDisabled: Array<Number>
    open var EvaluationFieldGuid: Guid
    open var EvaluationFieldVersion: Any
    open var EvaluationField: MovieSceneTrackEvaluationField
    open var ObjectBindingID: Guid
    open var TrackTint: Color
    open var SortingOrder: Number
    open var bSupportsDefaultSections: Boolean
    open fun AddSection(): MovieSceneSection
    open fun GetColorTint(): Color
    override fun GetDisplayName(): String
    open fun GetSections(): Array<MovieSceneSection>
    open fun GetSectionToKey(): MovieSceneSection
    open fun GetSortingOrder(): Number
    open fun GetTrackRowDisplayName(RowIndex: Number): String
    open fun RemoveSection(Section: MovieSceneSection)
    open fun SetColorTint(ColorTint: Color)
    open fun SetDisplayName(InName: String)
    open fun SetSectionToKey(Section: MovieSceneSection)
    open fun SetSortingOrder(SortingOrder: Number)
    open fun SetTrackRowDisplayName(InName: String, RowIndex: Number)

    companion object {
        fun Load(ResourceName: String): MovieSceneTrack
        fun Find(Outer: UObject, ResourceName: String): MovieSceneTrack
        fun GetDefaultObject(): MovieSceneTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneTrack
        fun C(Other: UObject): MovieSceneTrack
        fun C(Other: Any): MovieSceneTrack
        fun AddSection(Track: MovieSceneTrack): MovieSceneSection
        fun GetColorTint(Track: MovieSceneTrack): Color
        fun GetDisplayName(Track: MovieSceneTrack): String
        fun GetSections(Track: MovieSceneTrack): Array<MovieSceneSection>
        fun GetSectionToKey(Track: MovieSceneTrack): MovieSceneSection
        fun GetSortingOrder(Track: MovieSceneTrack): Number
        fun GetTrackRowDisplayName(Track: MovieSceneTrack, RowIndex: Number): String
        fun RemoveSection(Track: MovieSceneTrack, Section: MovieSceneSection)
        fun SetColorTint(Track: MovieSceneTrack, ColorTint: Color)
        fun SetDisplayName(Track: MovieSceneTrack, InName: String)
        fun SetSectionToKey(Track: MovieSceneTrack, Section: MovieSceneSection)
        fun SetSortingOrder(Track: MovieSceneTrack, SortingOrder: Number)
        fun SetTrackRowDisplayName(Track: MovieSceneTrack, InName: String, RowIndex: Number)
    }
}

external open class SequencerBindingProxy {
    open var BindingID: Guid
    open var Sequence: MovieSceneSequence
    open fun clone(): SequencerBindingProxy
    open fun GetBindingID(): MovieSceneObjectBindingID
    open fun AddTrack(TrackType: UnrealEngineClass): MovieSceneTrack
    open fun FindTracksByExactType(TrackType: UnrealEngineClass): Array<MovieSceneTrack>
    open fun FindTracksByType(TrackType: UnrealEngineClass): Array<MovieSceneTrack>
    open fun GetChildPossessables(): Array<SequencerBindingProxy>
    open fun GetDisplayName(): String
    open fun GetId(): Guid
    open fun GetName(): String
    open fun GetObjectTemplate(): UObject
    open fun GetParent(): SequencerBindingProxy
    open fun GetPossessedObjectClass(): UnrealEngineClass
    open fun GetTracks(): Array<MovieSceneTrack>
    open fun IsValid(): Boolean
    open fun MoveBindingContents(DestinationBindingId: SequencerBindingProxy)
    open fun Remove()
    open fun RemoveTrack(TrackToRemove: MovieSceneTrack)
    open fun SetDisplayName(InDisplayName: String)
    open fun SetName(InName: String)
    open fun SetParent(InParentBinding: SequencerBindingProxy)

    companion object {
        fun C(Other: UObject): SequencerBindingProxy
        fun C(Other: Any): SequencerBindingProxy
        fun GetBindingID(InBinding: SequencerBindingProxy): MovieSceneObjectBindingID
        fun AddTrack(InBinding: SequencerBindingProxy, TrackType: UnrealEngineClass): MovieSceneTrack
        fun FindTracksByExactType(InBinding: SequencerBindingProxy, TrackType: UnrealEngineClass): Array<MovieSceneTrack>
        fun FindTracksByType(InBinding: SequencerBindingProxy, TrackType: UnrealEngineClass): Array<MovieSceneTrack>
        fun GetChildPossessables(InBinding: SequencerBindingProxy): Array<SequencerBindingProxy>
        fun GetDisplayName(InBinding: SequencerBindingProxy): String
        fun GetId(InBinding: SequencerBindingProxy): Guid
        fun GetName(InBinding: SequencerBindingProxy): String
        fun GetObjectTemplate(InBinding: SequencerBindingProxy): UObject
        fun GetParent(InBinding: SequencerBindingProxy): SequencerBindingProxy
        fun GetPossessedObjectClass(InBinding: SequencerBindingProxy): UnrealEngineClass
        fun GetTracks(InBinding: SequencerBindingProxy): Array<MovieSceneTrack>
        fun IsValid(InBinding: SequencerBindingProxy): Boolean
        fun MoveBindingContents(SourceBindingId: SequencerBindingProxy, DestinationBindingId: SequencerBindingProxy)
        fun Remove(InBinding: SequencerBindingProxy)
        fun RemoveTrack(InBinding: SequencerBindingProxy, TrackToRemove: MovieSceneTrack)
        fun SetDisplayName(InBinding: SequencerBindingProxy, InDisplayName: String)
        fun SetName(InBinding: SequencerBindingProxy, InName: String)
        fun SetParent(InBinding: SequencerBindingProxy, InParentBinding: SequencerBindingProxy)
    }
}

external open class MovieSceneFolder : UObject {
    constructor()
    constructor(Outer: UObject)
    open var FolderName: String
    open var ChildFolders: Array<MovieSceneFolder>
    open var ChildMasterTracks: Array<MovieSceneTrack>
    open var ChildObjectBindingStrings: Array<String>
    open var FolderColor: Color
    open var SortingOrder: Number
    open fun AddChildFolder(FolderToAdd: MovieSceneFolder): Boolean
    open fun AddChildMasterTrack(InMasterTrack: MovieSceneTrack): Boolean
    open fun AddChildObjectBinding(InObjectBinding: SequencerBindingProxy): Boolean
    open fun GetChildFolders(): Array<MovieSceneFolder>
    open fun GetChildMasterTracks(): Array<MovieSceneTrack>
    open fun GetChildObjectBindings(): Array<SequencerBindingProxy>
    open fun GetFolderColor(): Color
    open fun GetFolderName(): String
    open fun RemoveChildFolder(FolderToRemove: MovieSceneFolder): Boolean
    open fun RemoveChildMasterTrack(InMasterTrack: MovieSceneTrack): Boolean
    open fun RemoveChildObjectBinding(InObjectBinding: SequencerBindingProxy): Boolean
    open fun SetFolderColor(InFolderColor: Color): Boolean
    open fun SetFolderName(InFolderName: String): Boolean

    companion object {
        fun Load(ResourceName: String): MovieSceneFolder
        fun Find(Outer: UObject, ResourceName: String): MovieSceneFolder
        fun GetDefaultObject(): MovieSceneFolder
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneFolder
        fun C(Other: UObject): MovieSceneFolder
        fun C(Other: Any): MovieSceneFolder
        fun AddChildFolder(TargetFolder: MovieSceneFolder, FolderToAdd: MovieSceneFolder): Boolean
        fun AddChildMasterTrack(Folder: MovieSceneFolder, InMasterTrack: MovieSceneTrack): Boolean
        fun AddChildObjectBinding(Folder: MovieSceneFolder, InObjectBinding: SequencerBindingProxy): Boolean
        fun GetChildFolders(Folder: MovieSceneFolder): Array<MovieSceneFolder>
        fun GetChildMasterTracks(Folder: MovieSceneFolder): Array<MovieSceneTrack>
        fun GetChildObjectBindings(Folder: MovieSceneFolder): Array<SequencerBindingProxy>
        fun GetFolderColor(Folder: MovieSceneFolder): Color
        fun GetFolderName(Folder: MovieSceneFolder): String
        fun RemoveChildFolder(TargetFolder: MovieSceneFolder, FolderToRemove: MovieSceneFolder): Boolean
        fun RemoveChildMasterTrack(Folder: MovieSceneFolder, InMasterTrack: MovieSceneTrack): Boolean
        fun RemoveChildObjectBinding(Folder: MovieSceneFolder, InObjectBinding: SequencerBindingProxy): Boolean
        fun SetFolderColor(Folder: MovieSceneFolder, InFolderColor: Color): Boolean
        fun SetFolderName(Folder: MovieSceneFolder, InFolderName: String): Boolean
    }
}

external object EUpdateClockSource {
    var Tick: String /* "Tick" */
    var Platform: String /* "Platform" */
    var Audio: String /* "Audio" */
    var RelativeTimecode: String /* "RelativeTimecode" */
    var Timecode: String /* "Timecode" */
    var PlayEveryFrame: String /* "PlayEveryFrame" */
    var Custom: String /* "Custom" */
    var EUpdateClockSource_MAX: String /* "EUpdateClockSource_MAX" */
}

external object EMovieSceneEvaluationType {
    var FrameLocked: String /* "FrameLocked" */
    var WithSubFrames: String /* "WithSubFrames" */
    var EMovieSceneEvaluationType_MAX: String /* "EMovieSceneEvaluationType_MAX" */
}

external object ESpawnOwnership {
    var InnerSequence: String /* "InnerSequence" */
    var MasterSequence: String /* "MasterSequence" */
    var External: String /* "External" */
    var ESpawnOwnership_MAX: String /* "ESpawnOwnership_MAX" */
}

external open class MovieSceneSpawnable {
    open var SpawnTransform: Transform
    open var Tags: Array<String>
    open var bContinuouslyRespawn: Boolean
    open var bNetAddressableName: Boolean
    open var bEvaluateTracksWhenNotSpawned: Boolean
    open var Guid: Guid
    open var Name: String
    open var ObjectTemplate: UObject
    open var ChildPossessables: Array<Guid>
    open var Ownership: String /* "InnerSequence" | "MasterSequence" | "External" | "ESpawnOwnership_MAX" */
    open var GeneratedClass: UnrealEngineClass
    open var LevelName: String
    open fun clone(): MovieSceneSpawnable

    companion object {
        fun C(Other: UObject): MovieSceneSpawnable
        fun C(Other: Any): MovieSceneSpawnable
    }
}

external open class MovieScenePossessable {
    open var Tags: Array<String>
    open var Guid: Guid
    open var Name: String
    open var PossessedObjectClass: Class
    open var ParentGuid: Guid
    open var SpawnableObjectBindingID: MovieSceneObjectBindingID
    open fun clone(): MovieScenePossessable

    companion object {
        fun C(Other: UObject): MovieScenePossessable
        fun C(Other: Any): MovieScenePossessable
    }
}

external open class MovieSceneBinding {
    open var ObjectGuid: Guid
    open var BindingName: String
    open var Tracks: Array<MovieSceneTrack>
    open var SortingOrder: Number
    open fun clone(): MovieSceneBinding

    companion object {
        fun C(Other: UObject): MovieSceneBinding
        fun C(Other: Any): MovieSceneBinding
    }
}

external open class FloatRangeBound {
    open var Type: String /* "Exclusive" | "Inclusive" | "Open" | "ERangeBoundTypes_MAX" */
    open var Value: Number
    open fun clone(): FloatRangeBound

    companion object {
        fun C(Other: UObject): FloatRangeBound
        fun C(Other: Any): FloatRangeBound
    }
}

external open class FloatRange {
    open var LowerBound: FloatRangeBound
    open var UpperBound: FloatRangeBound
    open fun clone(): FloatRange

    companion object {
        fun C(Other: UObject): FloatRange
        fun C(Other: Any): FloatRange
    }
}

external open class MovieSceneEditorData {
    open var ExpansionStates: Any
    open var PinnedNodes: Array<String>
    open var ViewStart: Any
    open var ViewEnd: Any
    open var WorkStart: Any
    open var WorkEnd: Any
    open var MarkedFrames: Any
    open var WorkingRange: FloatRange
    open var ViewRange: FloatRange
    open fun clone(): MovieSceneEditorData

    companion object {
        fun C(Other: UObject): MovieSceneEditorData
        fun C(Other: Any): MovieSceneEditorData
    }
}

external open class MovieSceneSectionGroup {
    open var Sections: Array<Any>
    open fun clone(): MovieSceneSectionGroup

    companion object {
        fun C(Other: UObject): MovieSceneSectionGroup
        fun C(Other: Any): MovieSceneSectionGroup
    }
}

external open class MovieSceneNodeGroup : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Name: String
    open var Nodes: Array<String>

    companion object {
        fun Load(ResourceName: String): MovieSceneNodeGroup
        fun Find(Outer: UObject, ResourceName: String): MovieSceneNodeGroup
        fun GetDefaultObject(): MovieSceneNodeGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneNodeGroup
        fun C(Other: UObject): MovieSceneNodeGroup
        fun C(Other: Any): MovieSceneNodeGroup
    }
}

external open class MovieSceneNodeGroupCollection : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NodeGroups: Array<MovieSceneNodeGroup>

    companion object {
        fun Load(ResourceName: String): MovieSceneNodeGroupCollection
        fun Find(Outer: UObject, ResourceName: String): MovieSceneNodeGroupCollection
        fun GetDefaultObject(): MovieSceneNodeGroupCollection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneNodeGroupCollection
        fun C(Other: UObject): MovieSceneNodeGroupCollection
        fun C(Other: Any): MovieSceneNodeGroupCollection
    }
}

external open class MovieScene : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var Spawnables: Array<MovieSceneSpawnable>
    open var Possessables: Array<MovieScenePossessable>
    open var ObjectBindings: Array<MovieSceneBinding>
    open var BindingGroups: Any
    open var MasterTracks: Array<MovieSceneTrack>
    open var CameraCutTrack: MovieSceneTrack
    open var SelectionRange: MovieSceneFrameRange
    open var PlaybackRange: MovieSceneFrameRange
    open var TickResolution: FrameRate
    open var DisplayRate: FrameRate
    open var EvaluationType: String /* "FrameLocked" | "WithSubFrames" | "EMovieSceneEvaluationType_MAX" */
    open var ClockSource: String /* "Tick" | "Platform" | "Audio" | "RelativeTimecode" | "Timecode" | "PlayEveryFrame" | "Custom" | "EUpdateClockSource_MAX" */
    open var CustomClockSourcePath: SoftObjectPath
    open var MarkedFrames: Array<MovieSceneMarkedFrame>
    open var bReadOnly: Boolean
    open var bPlaybackRangeLocked: Boolean
    open var ObjectsToDisplayNames: Any
    open var ObjectsToLabels: Any
    open var EditorData: MovieSceneEditorData
    open var RootFolders: Array<MovieSceneFolder>
    open var SoloNodes: Array<String>
    open var MuteNodes: Array<String>
    open var SectionGroups: Array<MovieSceneSectionGroup>
    open var NodeGroupCollection: MovieSceneNodeGroupCollection
    open var InTime: Number
    open var OutTime: Number
    open var StartTime: Number
    open var EndTime: Number
    open var bForceFixedFrameIntervalPlayback: Boolean
    open var FixedFrameInterval: Number

    companion object {
        fun Load(ResourceName: String): MovieScene
        fun Find(Outer: UObject, ResourceName: String): MovieScene
        fun GetDefaultObject(): MovieScene
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieScene
        fun C(Other: UObject): MovieScene
        fun C(Other: Any): MovieScene
    }
}

external interface `T$202` {
    var Range: SequencerScriptingRange
}

external open class SequencerScriptingRange {
    open var bHasStart: Boolean
    open var bHasEnd: Boolean
    open var InclusiveStart: Number
    open var ExclusiveEnd: Number
    open var InternalRate: FrameRate
    open fun clone(): SequencerScriptingRange
    open fun GetEndFrame(): Number
    open fun GetEndSeconds(): Number
    open fun GetStartFrame(): Number
    open fun GetStartSeconds(): Number
    open fun HasEnd(): Boolean
    open fun HasStart(): Boolean
    open fun RemoveEnd(): `T$202`
    open fun RemoveStart(): `T$202`
    open fun SetEndFrame(End: Number = definedExternally): `T$202`
    open fun SetEndSeconds(End: Number = definedExternally): `T$202`
    open fun SetStartFrame(Start: Number = definedExternally): `T$202`
    open fun SetStartSeconds(Start: Number = definedExternally): `T$202`

    companion object {
        fun C(Other: UObject): SequencerScriptingRange
        fun C(Other: Any): SequencerScriptingRange
        fun GetEndFrame(Range: SequencerScriptingRange): Number
        fun GetEndSeconds(Range: SequencerScriptingRange): Number
        fun GetStartFrame(Range: SequencerScriptingRange): Number
        fun GetStartSeconds(Range: SequencerScriptingRange): Number
        fun HasEnd(Range: SequencerScriptingRange): Boolean
        fun HasStart(Range: SequencerScriptingRange): Boolean
        fun RemoveEnd(Range: SequencerScriptingRange = definedExternally): `T$202`
        fun RemoveStart(Range: SequencerScriptingRange = definedExternally): `T$202`
        fun SetEndFrame(Range: SequencerScriptingRange = definedExternally, End: Number = definedExternally): `T$202`
        fun SetEndSeconds(Range: SequencerScriptingRange = definedExternally, End: Number = definedExternally): `T$202`
        fun SetStartFrame(Range: SequencerScriptingRange = definedExternally, Start: Number = definedExternally): `T$202`
        fun SetStartSeconds(Range: SequencerScriptingRange = definedExternally, Start: Number = definedExternally): `T$202`
    }
}

external open class MovieSceneSequence : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var CompiledData: MovieSceneCompiledData
    open var DefaultCompletionMode: String /* "KeepState" | "RestoreState" | "ProjectDefault" | "EMovieSceneCompletionMode_MAX" */
    open var bParentContextsAreSignificant: Boolean
    open var bPlayableDirectly: Boolean
    open var SequenceFlags: String /* "None" | "Volatile" | "BlockingEvaluation" | "InheritedFlags" | "EMovieSceneSequenceFlags_MAX" */
    open fun GetEarliestTimecodeSource(): MovieSceneTimecodeSource
    open fun FindBindingsByTag(InBindingName: String): Array<MovieSceneObjectBindingID>
    open fun FindBindingByTag(InBindingName: String): MovieSceneObjectBindingID
    open fun CreateEvent(InSection: MovieSceneEventSectionBase, InEndpoint: SequencerQuickBindingResult, InPayload: Array<String>): MovieSceneEvent
    open fun CreateQuickBinding(InObject: UObject, InFunctionName: String, bCallInEditor: Boolean): SequencerQuickBindingResult
    open fun AddMarkedFrame(InMarkedFrame: MovieSceneMarkedFrame): Number
    open fun AddMasterTrack(TrackType: UnrealEngineClass): MovieSceneTrack
    open fun AddPossessable(ObjectToPossess: UObject): SequencerBindingProxy
    open fun AddRootFolderToSequence(NewFolderName: String): MovieSceneFolder
    open fun AddSpawnableFromClass(ClassToSpawn: UnrealEngineClass): SequencerBindingProxy
    open fun AddSpawnableFromInstance(ObjectToSpawn: UObject): SequencerBindingProxy
    open fun DeleteMarkedFrame(DeleteIndex: Number)
    open fun DeleteMarkedFrames()
    open fun FindBindingById(BindingID: Guid): SequencerBindingProxy
    open fun FindBindingByName(Name: String): SequencerBindingProxy
    open fun FindMarkedFrameByFrameNumber(InFrameNumber: FrameNumber): Number
    open fun FindMarkedFrameByLabel(InLabel: String): Number
    open fun FindMasterTracksByExactType(TrackType: UnrealEngineClass): Array<MovieSceneTrack>
    open fun FindMasterTracksByType(TrackType: UnrealEngineClass): Array<MovieSceneTrack>
    open fun FindNextMarkedFrame(InFrameNumber: FrameNumber, bForward: Boolean): Number
    open fun GetBindings(): Array<SequencerBindingProxy>
    open fun GetClockSource(): String /* "Tick" | "Platform" | "Audio" | "RelativeTimecode" | "Timecode" | "PlayEveryFrame" | "Custom" | "EUpdateClockSource_MAX" */
    open fun GetDisplayRate(): FrameRate
    open fun GetEvaluationType(): String /* "FrameLocked" | "WithSubFrames" | "EMovieSceneEvaluationType_MAX" */
    open fun GetMarkedFrames(): Array<MovieSceneMarkedFrame>
    open fun GetMasterTracks(): Array<MovieSceneTrack>
    open fun GetMovieScene(): MovieScene
    open fun GetPlaybackEnd(): Number
    open fun GetPlaybackEndSeconds(): Number
    open fun GetPlaybackRange(): SequencerScriptingRange
    open fun GetPlaybackStart(): Number
    open fun GetPlaybackStartSeconds(): Number
    open fun GetPortableBindingID(DestinationSequence: MovieSceneSequence, InBinding: SequencerBindingProxy): MovieSceneObjectBindingID
    open fun GetPossessables(): Array<SequencerBindingProxy>
    open fun GetRootFoldersInSequence(): Array<MovieSceneFolder>
    open fun GetSpawnables(): Array<SequencerBindingProxy>
    open fun GetTickResolution(): FrameRate
    open fun GetTimecodeSource(): Timecode
    open fun GetViewRangeEnd(): Number
    open fun GetViewRangeStart(): Number
    open fun GetWorkRangeEnd(): Number
    open fun GetWorkRangeStart(): Number
    open fun IsReadOnly(): Boolean
    open fun LocateBoundObjects(InBinding: SequencerBindingProxy, Context: UObject): Array<UObject>
    open fun MakeBindingID(InBinding: SequencerBindingProxy, Space: String /* "Local" | "Root" | "Unused" | "EMovieSceneObjectBindingSpace_MAX" */): MovieSceneObjectBindingID
    open fun MakeRange(StartFrame: Number, Duration: Number): SequencerScriptingRange
    open fun MakeRangeSeconds(StartTime: Number, Duration: Number): SequencerScriptingRange
    open fun RemoveMasterTrack(MasterTrack: MovieSceneTrack): Boolean
    open fun ResolveBindingID(InObjectBindingID: MovieSceneObjectBindingID): SequencerBindingProxy
    open fun SetClockSource(InClockSource: String /* "Tick" | "Platform" | "Audio" | "RelativeTimecode" | "Timecode" | "PlayEveryFrame" | "Custom" | "EUpdateClockSource_MAX" */)
    open fun SetDisplayRate(DisplayRate: FrameRate)
    open fun SetEvaluationType(InEvaluationType: String /* "FrameLocked" | "WithSubFrames" | "EMovieSceneEvaluationType_MAX" */)
    open fun SetMarkedFrame(InMarkIndex: Number, InFrameNumber: FrameNumber)
    open fun SetPlaybackEnd(EndFrame: Number)
    open fun SetPlaybackEndSeconds(EndTime: Number)
    open fun SetPlaybackStart(StartFrame: Number)
    open fun SetPlaybackStartSeconds(StartTime: Number)
    open fun SetReadOnly(bInReadOnly: Boolean)
    open fun SetTickResolution(TickResolution: FrameRate)
    open fun SetTickResolutionDirectly(TickResolution: FrameRate)
    open fun SetViewRangeEnd(EndTimeInSeconds: Number)
    open fun SetViewRangeStart(StartTimeInSeconds: Number)
    open fun SetWorkRangeEnd(EndTimeInSeconds: Number)
    open fun SetWorkRangeStart(StartTimeInSeconds: Number)
    open fun SortMarkedFrames()

    companion object {
        fun Load(ResourceName: String): MovieSceneSequence
        fun Find(Outer: UObject, ResourceName: String): MovieSceneSequence
        fun GetDefaultObject(): MovieSceneSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneSequence
        fun C(Other: UObject): MovieSceneSequence
        fun C(Other: Any): MovieSceneSequence
        fun CreateEvent(InSequence: MovieSceneSequence, InSection: MovieSceneEventSectionBase, InEndpoint: SequencerQuickBindingResult, InPayload: Array<String>): MovieSceneEvent
        fun CreateQuickBinding(InSequence: MovieSceneSequence, InObject: UObject, InFunctionName: String, bCallInEditor: Boolean): SequencerQuickBindingResult
        fun AddMarkedFrame(Sequence: MovieSceneSequence, InMarkedFrame: MovieSceneMarkedFrame): Number
        fun AddMasterTrack(Sequence: MovieSceneSequence, TrackType: UnrealEngineClass): MovieSceneTrack
        fun AddPossessable(Sequence: MovieSceneSequence, ObjectToPossess: UObject): SequencerBindingProxy
        fun AddRootFolderToSequence(Sequence: MovieSceneSequence, NewFolderName: String): MovieSceneFolder
        fun AddSpawnableFromClass(Sequence: MovieSceneSequence, ClassToSpawn: UnrealEngineClass): SequencerBindingProxy
        fun AddSpawnableFromInstance(Sequence: MovieSceneSequence, ObjectToSpawn: UObject): SequencerBindingProxy
        fun DeleteMarkedFrame(Sequence: MovieSceneSequence, DeleteIndex: Number)
        fun DeleteMarkedFrames(Sequence: MovieSceneSequence)
        fun FindBindingById(Sequence: MovieSceneSequence, BindingID: Guid): SequencerBindingProxy
        fun FindBindingByName(Sequence: MovieSceneSequence, Name: String): SequencerBindingProxy
        fun FindMarkedFrameByFrameNumber(Sequence: MovieSceneSequence, InFrameNumber: FrameNumber): Number
        fun FindMarkedFrameByLabel(Sequence: MovieSceneSequence, InLabel: String): Number
        fun FindMasterTracksByExactType(Sequence: MovieSceneSequence, TrackType: UnrealEngineClass): Array<MovieSceneTrack>
        fun FindMasterTracksByType(Sequence: MovieSceneSequence, TrackType: UnrealEngineClass): Array<MovieSceneTrack>
        fun FindNextMarkedFrame(Sequence: MovieSceneSequence, InFrameNumber: FrameNumber, bForward: Boolean): Number
        fun GetBindings(Sequence: MovieSceneSequence): Array<SequencerBindingProxy>
        fun GetClockSource(InSequence: MovieSceneSequence): String /* "Tick" | "Platform" | "Audio" | "RelativeTimecode" | "Timecode" | "PlayEveryFrame" | "Custom" | "EUpdateClockSource_MAX" */
        fun GetDisplayRate(Sequence: MovieSceneSequence): FrameRate
        fun GetEvaluationType(InSequence: MovieSceneSequence): String /* "FrameLocked" | "WithSubFrames" | "EMovieSceneEvaluationType_MAX" */
        fun GetMarkedFrames(Sequence: MovieSceneSequence): Array<MovieSceneMarkedFrame>
        fun GetMasterTracks(Sequence: MovieSceneSequence): Array<MovieSceneTrack>
        fun GetMovieScene(Sequence: MovieSceneSequence): MovieScene
        fun GetPlaybackEnd(Sequence: MovieSceneSequence): Number
        fun GetPlaybackEndSeconds(Sequence: MovieSceneSequence): Number
        fun GetPlaybackRange(Sequence: MovieSceneSequence): SequencerScriptingRange
        fun GetPlaybackStart(Sequence: MovieSceneSequence): Number
        fun GetPlaybackStartSeconds(Sequence: MovieSceneSequence): Number
        fun GetPortableBindingID(MasterSequence: MovieSceneSequence, DestinationSequence: MovieSceneSequence, InBinding: SequencerBindingProxy): MovieSceneObjectBindingID
        fun GetPossessables(Sequence: MovieSceneSequence): Array<SequencerBindingProxy>
        fun GetRootFoldersInSequence(Sequence: MovieSceneSequence): Array<MovieSceneFolder>
        fun GetSpawnables(Sequence: MovieSceneSequence): Array<SequencerBindingProxy>
        fun GetTickResolution(Sequence: MovieSceneSequence): FrameRate
        fun GetTimecodeSource(Sequence: MovieSceneSequence): Timecode
        fun GetViewRangeEnd(InSequence: MovieSceneSequence): Number
        fun GetViewRangeStart(InSequence: MovieSceneSequence): Number
        fun GetWorkRangeEnd(InSequence: MovieSceneSequence): Number
        fun GetWorkRangeStart(InSequence: MovieSceneSequence): Number
        fun IsReadOnly(Sequence: MovieSceneSequence): Boolean
        fun LocateBoundObjects(Sequence: MovieSceneSequence, InBinding: SequencerBindingProxy, Context: UObject): Array<UObject>
        fun MakeBindingID(MasterSequence: MovieSceneSequence, InBinding: SequencerBindingProxy, Space: String /* "Local" | "Root" | "Unused" | "EMovieSceneObjectBindingSpace_MAX" */): MovieSceneObjectBindingID
        fun MakeRange(Sequence: MovieSceneSequence, StartFrame: Number, Duration: Number): SequencerScriptingRange
        fun MakeRangeSeconds(Sequence: MovieSceneSequence, StartTime: Number, Duration: Number): SequencerScriptingRange
        fun RemoveMasterTrack(Sequence: MovieSceneSequence, MasterTrack: MovieSceneTrack): Boolean
        fun ResolveBindingID(MasterSequence: MovieSceneSequence, InObjectBindingID: MovieSceneObjectBindingID): SequencerBindingProxy
        fun SetClockSource(InSequence: MovieSceneSequence, InClockSource: String /* "Tick" | "Platform" | "Audio" | "RelativeTimecode" | "Timecode" | "PlayEveryFrame" | "Custom" | "EUpdateClockSource_MAX" */)
        fun SetDisplayRate(Sequence: MovieSceneSequence, DisplayRate: FrameRate)
        fun SetEvaluationType(InSequence: MovieSceneSequence, InEvaluationType: String /* "FrameLocked" | "WithSubFrames" | "EMovieSceneEvaluationType_MAX" */)
        fun SetMarkedFrame(Sequence: MovieSceneSequence, InMarkIndex: Number, InFrameNumber: FrameNumber)
        fun SetPlaybackEnd(Sequence: MovieSceneSequence, EndFrame: Number)
        fun SetPlaybackEndSeconds(Sequence: MovieSceneSequence, EndTime: Number)
        fun SetPlaybackStart(Sequence: MovieSceneSequence, StartFrame: Number)
        fun SetPlaybackStartSeconds(Sequence: MovieSceneSequence, StartTime: Number)
        fun SetReadOnly(Sequence: MovieSceneSequence, bInReadOnly: Boolean)
        fun SetTickResolution(Sequence: MovieSceneSequence, TickResolution: FrameRate)
        fun SetTickResolutionDirectly(Sequence: MovieSceneSequence, TickResolution: FrameRate)
        fun SetViewRangeEnd(InSequence: MovieSceneSequence, EndTimeInSeconds: Number)
        fun SetViewRangeStart(InSequence: MovieSceneSequence, StartTimeInSeconds: Number)
        fun SetWorkRangeEnd(InSequence: MovieSceneSequence, EndTimeInSeconds: Number)
        fun SetWorkRangeStart(InSequence: MovieSceneSequence, StartTimeInSeconds: Number)
        fun SortMarkedFrames(Sequence: MovieSceneSequence)
    }
}

external open class TemplateSequence : MovieSceneSequence {
    constructor()
    constructor(Outer: UObject)
    open var MovieScene: MovieScene
    open var BoundActorClass: Class
    open var BoundPreviewActor: Actor
    open var BoundActorComponents: Any

    companion object {
        fun Load(ResourceName: String): TemplateSequence
        fun Find(Outer: UObject, ResourceName: String): TemplateSequence
        fun GetDefaultObject(): TemplateSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TemplateSequence
        fun C(Other: UObject): TemplateSequence
        fun C(Other: Any): TemplateSequence
    }
}

external open class CameraAnimationSequence : TemplateSequence {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): CameraAnimationSequence
        fun Find(Outer: UObject, ResourceName: String): CameraAnimationSequence
        fun GetDefaultObject(): CameraAnimationSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnimationSequence
        fun C(Other: UObject): CameraAnimationSequence
        fun C(Other: Any): CameraAnimationSequence
    }
}

external open class InterpGroupInst : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Group: InterpGroup
    open var GroupActor: Actor
    open var TrackInst: Array<InterpTrackInst>

    companion object {
        fun Load(ResourceName: String): InterpGroupInst
        fun Find(Outer: UObject, ResourceName: String): InterpGroupInst
        fun GetDefaultObject(): InterpGroupInst
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpGroupInst
        fun C(Other: UObject): InterpGroupInst
        fun C(Other: Any): InterpGroupInst
    }
}

external object EInterpCurveMode {
    var CIM_Linear: String /* "CIM_Linear" */
    var CIM_CurveAuto: String /* "CIM_CurveAuto" */
    var CIM_Constant: String /* "CIM_Constant" */
    var CIM_CurveUser: String /* "CIM_CurveUser" */
    var CIM_CurveBreak: String /* "CIM_CurveBreak" */
    var CIM_CurveAutoClamped: String /* "CIM_CurveAutoClamped" */
    var CIM_MAX: String /* "CIM_MAX" */
}

external open class InterpCurvePointVector {
    open var InVal: Number
    open var OutVal: Vector
    open var ArriveTangent: Vector
    open var LeaveTangent: Vector
    open var InterpMode: String /* "CIM_Linear" | "CIM_CurveAuto" | "CIM_Constant" | "CIM_CurveUser" | "CIM_CurveBreak" | "CIM_CurveAutoClamped" | "CIM_MAX" */
    open fun clone(): InterpCurvePointVector

    companion object {
        fun C(Other: UObject): InterpCurvePointVector
        fun C(Other: Any): InterpCurvePointVector
    }
}

external open class InterpCurveVector {
    open var Points: Array<InterpCurvePointVector>
    open var bIsLooped: Boolean
    open var LoopKeyOffset: Number
    open fun clone(): InterpCurveVector

    companion object {
        fun C(Other: UObject): InterpCurveVector
        fun C(Other: Any): InterpCurveVector
    }
}

external open class InterpLookupPoint {
    open var GroupName: String
    open var Time: Number
    open fun clone(): InterpLookupPoint

    companion object {
        fun C(Other: UObject): InterpLookupPoint
        fun C(Other: Any): InterpLookupPoint
    }
}

external open class InterpLookupTrack {
    open var Points: Array<InterpLookupPoint>
    open fun clone(): InterpLookupTrack

    companion object {
        fun C(Other: UObject): InterpLookupTrack
        fun C(Other: Any): InterpLookupTrack
    }
}

external object EInterpTrackMoveRotMode {
    var IMR_Keyframed: String /* "IMR_Keyframed" */
    var IMR_LookAtGroup: String /* "IMR_LookAtGroup" */
    var IMR_Ignore: String /* "IMR_Ignore" */
    var IMR_MAX: String /* "IMR_MAX" */
}

external open class InterpTrackMove : InterpTrack {
    constructor()
    constructor(Outer: UObject)
    open var PosTrack: InterpCurveVector
    open var EulerTrack: InterpCurveVector
    open var LookupTrack: InterpLookupTrack
    open var LookAtGroupName: String
    open var LinCurveTension: Number
    open var AngCurveTension: Number
    open var bUseQuatInterpolation: Boolean
    open var bShowArrowAtKeys: Boolean
    open var bDisableMovement: Boolean
    open var bShowTranslationOnCurveEd: Boolean
    open var bShowRotationOnCurveEd: Boolean
    open var bHide3DTrack: Boolean
    open var RotMode: String /* "IMR_Keyframed" | "IMR_LookAtGroup" | "IMR_Ignore" | "IMR_MAX" */

    companion object {
        fun Load(ResourceName: String): InterpTrackMove
        fun Find(Outer: UObject, ResourceName: String): InterpTrackMove
        fun GetDefaultObject(): InterpTrackMove
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackMove
        fun C(Other: UObject): InterpTrackMove
        fun C(Other: Any): InterpTrackMove
    }
}

external open class InterpTrackInstMove : InterpTrackInst {
    constructor()
    constructor(Outer: UObject)
    open var ResetLocation: Vector
    open var ResetRotation: Rotator

    companion object {
        fun Load(ResourceName: String): InterpTrackInstMove
        fun Find(Outer: UObject, ResourceName: String): InterpTrackInstMove
        fun GetDefaultObject(): InterpTrackInstMove
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackInstMove
        fun C(Other: UObject): InterpTrackInstMove
        fun C(Other: Any): InterpTrackInstMove
    }
}

external object ECameraShakePlaySpace {
    var CameraLocal: String /* "CameraLocal" */
    var World: String /* "World" */
    var UserDefined: String /* "UserDefined" */
    var ECameraShakePlaySpace_MAX: String /* "ECameraShakePlaySpace_MAX" */
}

external open class CameraAnimInst : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CamAnim: CameraAnim
    open var InterpGroupInst: InterpGroupInst
    open var PlayRate: Number
    open var MoveTrack: InterpTrackMove
    open var MoveInst: InterpTrackInstMove
    open var PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */
    open fun Stop(bImmediate: Boolean)
    open fun SetScale(NewDuration: Number)
    open fun SetDuration(NewDuration: Number)

    companion object {
        fun Load(ResourceName: String): CameraAnimInst
        fun Find(Outer: UObject, ResourceName: String): CameraAnimInst
        fun GetDefaultObject(): CameraAnimInst
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnimInst
        fun C(Other: UObject): CameraAnimInst
        fun C(Other: Any): CameraAnimInst
    }
}

external open class MovieSceneCompiledDataManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Hierarchies: Any
    open var TrackTemplates: Any
    open var TrackTemplateFields: Any
    open var EntityComponentFields: Any

    companion object {
        fun Load(ResourceName: String): MovieSceneCompiledDataManager
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCompiledDataManager
        fun GetDefaultObject(): MovieSceneCompiledDataManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCompiledDataManager
        fun C(Other: UObject): MovieSceneCompiledDataManager
        fun C(Other: Any): MovieSceneCompiledDataManager
    }
}

external open class MovieSceneEntitySystemGraphNodes {
    open fun clone(): MovieSceneEntitySystemGraphNodes

    companion object {
        fun C(Other: UObject): MovieSceneEntitySystemGraphNodes
        fun C(Other: Any): MovieSceneEntitySystemGraphNodes
    }
}

external open class MovieSceneEntitySystemGraph {
    open var Nodes: MovieSceneEntitySystemGraphNodes
    open fun clone(): MovieSceneEntitySystemGraph

    companion object {
        fun C(Other: UObject): MovieSceneEntitySystemGraph
        fun C(Other: Any): MovieSceneEntitySystemGraph
    }
}

external open class MovieSceneEntitySystemLinker : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SystemGraph: MovieSceneEntitySystemGraph

    companion object {
        fun Load(ResourceName: String): MovieSceneEntitySystemLinker
        fun Find(Outer: UObject, ResourceName: String): MovieSceneEntitySystemLinker
        fun GetDefaultObject(): MovieSceneEntitySystemLinker
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneEntitySystemLinker
        fun C(Other: UObject): MovieSceneEntitySystemLinker
        fun C(Other: Any): MovieSceneEntitySystemLinker
    }
}

external open class MovieSceneRootEvaluationTemplateInstance {
    open var WeakRootSequence: Any
    open var CompiledDataManager: MovieSceneCompiledDataManager
    open var EntitySystemLinker: MovieSceneEntitySystemLinker
    open var DirectorInstances: Any
    open fun clone(): MovieSceneRootEvaluationTemplateInstance

    companion object {
        fun C(Other: UObject): MovieSceneRootEvaluationTemplateInstance
        fun C(Other: Any): MovieSceneRootEvaluationTemplateInstance
    }
}

external open class CameraAnimationSequencePlayer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BoundObjectOverride: UObject
    open var Sequence: MovieSceneSequence
    open var RootTemplateInstance: MovieSceneRootEvaluationTemplateInstance

    companion object {
        fun Load(ResourceName: String): CameraAnimationSequencePlayer
        fun Find(Outer: UObject, ResourceName: String): CameraAnimationSequencePlayer
        fun GetDefaultObject(): CameraAnimationSequencePlayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnimationSequencePlayer
        fun C(Other: UObject): CameraAnimationSequencePlayer
        fun C(Other: Any): CameraAnimationSequencePlayer
    }
}

external open class CameraFilmbackSettings {
    open var SensorWidth: Number
    open var SensorHeight: Number
    open var SensorAspectRatio: Number
    open fun clone(): CameraFilmbackSettings

    companion object {
        fun C(Other: UObject): CameraFilmbackSettings
        fun C(Other: Any): CameraFilmbackSettings
    }
}

external open class CameraLensSettings {
    open var MinFocalLength: Number
    open var MaxFocalLength: Number
    open var MinFStop: Number
    open var MaxFStop: Number
    open var MinimumFocusDistance: Number
    open var DiaphragmBladeCount: Number
    open fun clone(): CameraLensSettings

    companion object {
        fun C(Other: UObject): CameraLensSettings
        fun C(Other: Any): CameraLensSettings
    }
}

external object ECameraFocusMethod {
    var DoNotOverride: String /* "DoNotOverride" */
    var Manual: String /* "Manual" */
    var Tracking: String /* "Tracking" */
    var Disable: String /* "Disable" */
    var MAX: String /* "MAX" */
}

external open class CameraTrackingFocusSettings {
    open var ActorToTrack: Actor
    open var RelativeOffset: Vector
    open var bDrawDebugTrackingFocusPoint: Boolean
    open fun clone(): CameraTrackingFocusSettings

    companion object {
        fun C(Other: UObject): CameraTrackingFocusSettings
        fun C(Other: Any): CameraTrackingFocusSettings
    }
}

external open class CameraFocusSettings {
    open var FocusMethod: String /* "DoNotOverride" | "Manual" | "Tracking" | "Disable" | "MAX" */
    open var ManualFocusDistance: Number
    open var TrackingFocusSettings: CameraTrackingFocusSettings
    open var bDrawDebugFocusPlane: Boolean
    open var DebugFocusPlaneColor: Color
    open var bSmoothFocusChanges: Boolean
    open var FocusSmoothingInterpSpeed: Number
    open var FocusOffset: Number
    open fun clone(): CameraFocusSettings

    companion object {
        fun C(Other: UObject): CameraFocusSettings
        fun C(Other: Any): CameraFocusSettings
    }
}

external open class CameraAnimationSequenceCameraStandIn : UObject {
    constructor()
    constructor(Outer: UObject)
    open var FieldOfView: Number
    open var bConstrainAspectRatio: Boolean
    open var AspectRatio: Number
    open var PostProcessSettings: PostProcessSettings
    open var PostProcessBlendWeight: Number
    open var Filmback: CameraFilmbackSettings
    open var LensSettings: CameraLensSettings
    open var FocusSettings: CameraFocusSettings
    open var CurrentFocalLength: Number
    open var CurrentAperture: Number
    open var CurrentFocusDistance: Number

    companion object {
        fun Load(ResourceName: String): CameraAnimationSequenceCameraStandIn
        fun Find(Outer: UObject, ResourceName: String): CameraAnimationSequenceCameraStandIn
        fun GetDefaultObject(): CameraAnimationSequenceCameraStandIn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnimationSequenceCameraStandIn
        fun C(Other: UObject): CameraAnimationSequenceCameraStandIn
        fun C(Other: Any): CameraAnimationSequenceCameraStandIn
    }
}

external open class SequenceCameraShakePattern : CameraShakePattern {
    constructor()
    constructor(Outer: UObject)
    open var Sequence: CameraAnimationSequence
    open var PlayRate: Number
    open var Scale: Number
    open var BlendInTime: Number
    open var BlendOutTime: Number
    open var RandomSegmentDuration: Number
    open var bRandomSegment: Boolean
    open var Player: CameraAnimationSequencePlayer
    open var CameraStandIn: CameraAnimationSequenceCameraStandIn

    companion object {
        fun Load(ResourceName: String): SequenceCameraShakePattern
        fun Find(Outer: UObject, ResourceName: String): SequenceCameraShakePattern
        fun GetDefaultObject(): SequenceCameraShakePattern
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequenceCameraShakePattern
        fun C(Other: UObject): SequenceCameraShakePattern
        fun C(Other: Any): SequenceCameraShakePattern
    }
}

external object ECameraShakeAttenuation {
    var Linear: String /* "Linear" */
    var Quadratic: String /* "Quadratic" */
    var ECameraShakeAttenuation_MAX: String /* "ECameraShakeAttenuation_MAX" */
}

external open class CameraShakeSourceComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var Attenuation: String /* "Linear" | "Quadratic" | "ECameraShakeAttenuation_MAX" */
    open var InnerAttenuationRadius: Number
    open var OuterAttenuationRadius: Number
    open var CameraShake: UnrealEngineClass
    open var bAutoStart: Boolean
    open var EditorSpriteTexture: Texture2D
    open var EditorSpriteTextureScale: Number
    open fun StopAllCameraShakesOfType(InCameraShake: UnrealEngineClass, bImmediately: Boolean)
    open fun StopAllCameraShakes(bImmediately: Boolean)
    open fun StartCameraShake(InCameraShake: UnrealEngineClass, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator)
    open fun Start()
    open fun GetAttenuationFactor(Location: Vector): Number

    companion object {
        fun Load(ResourceName: String): CameraShakeSourceComponent
        fun Find(Outer: UObject, ResourceName: String): CameraShakeSourceComponent
        fun GetDefaultObject(): CameraShakeSourceComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraShakeSourceComponent
        fun C(Other: UObject): CameraShakeSourceComponent
        fun C(Other: Any): CameraShakeSourceComponent
    }
}

external interface `T$203` {
    var ModifiedPOV: MinimalViewInfo
}

external open class MatineeCameraShake : CameraShakeBase {
    constructor()
    constructor(Outer: UObject)
    open var OscillationDuration: Number
    open var OscillationBlendInTime: Number
    open var OscillationBlendOutTime: Number
    open var RotOscillation: ROscillator
    open var LocOscillation: VOscillator
    open var FOVOscillation: FOscillator
    open var AnimPlayRate: Number
    open var AnimScale: Number
    open var AnimBlendInTime: Number
    open var AnimBlendOutTime: Number
    open var RandomAnimSegmentDuration: Number
    open var Anim: CameraAnim
    open var AnimSequence: CameraAnimationSequence
    open var bRandomAnimSegment: Boolean
    open var OscillatorTimeRemaining: Number
    open var AnimInst: CameraAnimInst
    open var SequenceShakePattern: SequenceCameraShakePattern
    open fun ReceiveStopShake(bImmediately: Boolean)
    open fun ReceivePlayShake(Scale: Number)
    open fun ReceiveIsFinished(): Boolean
    open fun BlueprintUpdateCameraShake(DeltaTime: Number, Alpha: Number, POV: MinimalViewInfo, ModifiedPOV: MinimalViewInfo = definedExternally): `T$203`

    companion object {
        fun Load(ResourceName: String): MatineeCameraShake
        fun Find(Outer: UObject, ResourceName: String): MatineeCameraShake
        fun GetDefaultObject(): MatineeCameraShake
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MatineeCameraShake
        fun StartMatineeCameraShakeFromSource(PlayerCameraManager: PlayerCameraManager, ShakeClass: UnrealEngineClass, SourceComponent: CameraShakeSourceComponent, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator): MatineeCameraShake
        fun StartMatineeCameraShake(PlayerCameraManager: PlayerCameraManager, ShakeClass: UnrealEngineClass, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator): MatineeCameraShake
        fun C(Other: UObject): MatineeCameraShake
        fun C(Other: Any): MatineeCameraShake
    }
}

external open class CameraShakeBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bSingleInstance: Boolean
    open var ShakeScale: Number
    open var RootShakePattern: CameraShakePattern
    open var CameraManager: PlayerCameraManager
    open fun SetRootShakePattern(InPattern: CameraShakePattern)
    open fun GetRootShakePattern(): CameraShakePattern
    open fun Conv_MatineeCameraShake(): MatineeCameraShake

    companion object {
        fun Load(ResourceName: String): CameraShakeBase
        fun Find(Outer: UObject, ResourceName: String): CameraShakeBase
        fun GetDefaultObject(): CameraShakeBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraShakeBase
        fun C(Other: UObject): CameraShakeBase
        fun C(Other: Any): CameraShakeBase
        fun Conv_MatineeCameraShake(CameraShake: CameraShakeBase): MatineeCameraShake
    }
}

external open class ActiveCameraShakeInfo {
    open var ShakeInstance: CameraShakeBase
    open var ShakeSource: Any
    open var bIsCustomInitialized: Boolean
    open fun clone(): ActiveCameraShakeInfo

    companion object {
        fun C(Other: UObject): ActiveCameraShakeInfo
        fun C(Other: Any): ActiveCameraShakeInfo
    }
}

external open class CameraModifier_CameraShake : CameraModifier {
    constructor()
    constructor(Outer: UObject)
    open var ActiveShakes: Array<ActiveCameraShakeInfo>
    open var ExpiredPooledShakesMap: Any
    open var SplitScreenShakeScale: Number

    companion object {
        fun Load(ResourceName: String): CameraModifier_CameraShake
        fun Find(Outer: UObject, ResourceName: String): CameraModifier_CameraShake
        fun GetDefaultObject(): CameraModifier_CameraShake
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraModifier_CameraShake
        fun C(Other: UObject): CameraModifier_CameraShake
        fun C(Other: Any): CameraModifier_CameraShake
    }
}

external open class ElementID {
    open var IDValue: Number
    open fun clone(): ElementID

    companion object {
        fun C(Other: UObject): ElementID
        fun C(Other: Any): ElementID
    }
}

external open class VertexID : ElementID {
    override fun clone(): VertexID

    companion object {
        fun C(Other: UObject): VertexID
        fun C(Other: Any): VertexID
    }
}

external open class PolygonID : ElementID {
    override fun clone(): PolygonID

    companion object {
        fun C(Other: UObject): PolygonID
        fun C(Other: Any): PolygonID
    }
}

external open class VertexInstanceID : ElementID {
    override fun clone(): VertexInstanceID

    companion object {
        fun C(Other: UObject): VertexInstanceID
        fun C(Other: Any): VertexInstanceID
    }
}

external open class PolygonGroupID : ElementID {
    override fun clone(): PolygonGroupID

    companion object {
        fun C(Other: UObject): PolygonGroupID
        fun C(Other: Any): PolygonGroupID
    }
}

external open class TriangleID : ElementID {
    override fun clone(): TriangleID

    companion object {
        fun C(Other: UObject): TriangleID
        fun C(Other: Any): TriangleID
    }
}

external open class EdgeID : ElementID {
    override fun clone(): EdgeID

    companion object {
        fun C(Other: UObject): EdgeID
        fun C(Other: Any): EdgeID
    }
}

external interface `T$204` {
    var OutVertexInstanceIDs: Array<VertexInstanceID>
}

external interface `T$205` {
    var OutConnectedTriangleIDs: Array<TriangleID>
}

external interface `T$206` {
    var OutConnectedPolygonIDs: Array<PolygonID>
}

external interface `T$207` {
    var OutConnectedTriangleIDs: Array<TriangleID>
}

external interface `T$208` {
    var OutConnectedPolygonIDs: Array<PolygonID>
}

external interface `T$209` {
    var OutEdgeIDs: Array<EdgeID>
}

external interface `T$210` {
    var OutAdjacentVertexIDs: Array<VertexID>
}

external interface `T$211` {
    var OutVertexIDs: Array<VertexID>
}

external interface `T$212` {
    var OutVertexInstanceIDs: Array<VertexInstanceID>
}

external interface `T$213` {
    var OutEdgeIDs: Array<EdgeID>
}

external interface `T$214` {
    var OutTriangleIDs: Array<TriangleID>
}

external interface `T$215` {
    var OutVertexIDs: Array<VertexID>
}

external interface `T$216` {
    var OutVertexInstanceIDs: Array<VertexInstanceID>
}

external interface `T$217` {
    var OutTriangleIDs: Array<TriangleID>
}

external interface `T$218` {
    var OutEdgeIDs: Array<EdgeID>
}

external interface `T$219` {
    var OutEdgeIDs: Array<EdgeID>
}

external interface `T$220` {
    var OutPolygonIDs: Array<PolygonID>
}

external interface `T$221` {
    var OutPolygonIDs: Array<PolygonID>
}

external interface `T$222` {
    var OutVertexIDs: Array<VertexID>
}

external interface `T$223` {
    var OutConnectedTriangleIDs: Array<TriangleID>
}

external interface `T$224` {
    var OutConnectedPolygonIDs: Array<PolygonID>
}

external interface `T$225` {
    var OrphanedVertices: Array<VertexID>
}

external interface `T$226` {
    var OrphanedEdges: Array<EdgeID>
    var OrphanedVertexInstances: Array<VertexInstanceID>
    var OrphanedPolygonGroupsPtr: Array<PolygonGroupID>
}

external interface `T$227` {
    var OrphanedEdges: Array<EdgeID>
    var OrphanedVertexInstances: Array<VertexInstanceID>
    var OrphanedPolygonGroups: Array<PolygonGroupID>
}

external interface `T$228` {
    var OrphanedVertices: Array<VertexID>
}

external interface `T$229` {
    var NewEdgeIDs: Array<EdgeID>
}

external interface `T$230` {
    var NewEdgeIDs: Array<EdgeID>
    var `$`: TriangleID
}

external interface `T$231` {
    var VertexInstanceIDs: Array<VertexInstanceID>
    var NewEdgeIDs: Array<EdgeID>
}

external interface `T$232` {
    var VertexInstanceIDs: Array<VertexInstanceID>
    var NewEdgeIDs: Array<EdgeID>
    var `$`: PolygonID
}

external open class MeshDescriptionBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun SetVertexPosition(VertexID: VertexID, position: Vector)
    open fun SetPolygonVertexInstances(PolygonID: PolygonID, VertexInstanceIDs: Array<VertexInstanceID>)
    open fun SetPolygonPolygonGroup(PolygonID: PolygonID, PolygonGroupID: PolygonGroupID)
    open fun ReversePolygonFacing(PolygonID: PolygonID)
    open fun ReserveNewVertices(NumberOfNewVertices: Number)
    open fun ReserveNewVertexInstances(NumberOfNewVertexInstances: Number)
    open fun ReserveNewTriangles(NumberOfNewTriangles: Number)
    open fun ReserveNewPolygons(NumberOfNewPolygons: Number)
    open fun ReserveNewPolygonGroups(NumberOfNewPolygonGroups: Number)
    open fun ReserveNewEdges(NumberOfNewEdges: Number)
    open fun IsVertexValid(VertexID: VertexID): Boolean
    open fun IsVertexOrphaned(VertexID: VertexID): Boolean
    open fun IsVertexInstanceValid(VertexInstanceID: VertexInstanceID): Boolean
    open fun IsTriangleValid(TriangleID: TriangleID): Boolean
    open fun IsTrianglePartOfNgon(TriangleID: TriangleID): Boolean
    open fun IsPolygonValid(PolygonID: PolygonID): Boolean
    open fun IsPolygonGroupValid(PolygonGroupID: PolygonGroupID): Boolean
    open fun IsEmpty(): Boolean
    open fun IsEdgeValid(EdgeID: EdgeID): Boolean
    open fun IsEdgeInternalToPolygon(EdgeID: EdgeID, PolygonID: PolygonID): Boolean
    open fun IsEdgeInternal(EdgeID: EdgeID): Boolean
    open fun GetVertexVertexInstances(VertexID: VertexID, OutVertexInstanceIDs: Array<VertexInstanceID> = definedExternally): `T$204`
    open fun GetVertexPosition(VertexID: VertexID): Vector
    open fun GetVertexPairEdge(VertexID0: VertexID, VertexID1: VertexID): EdgeID
    open fun GetVertexInstanceVertex(VertexInstanceID: VertexInstanceID): VertexID
    open fun GetVertexInstancePairEdge(VertexInstanceID0: VertexInstanceID, VertexInstanceID1: VertexInstanceID): EdgeID
    open fun GetVertexInstanceForTriangleVertex(TriangleID: TriangleID, VertexID: VertexID): VertexInstanceID
    open fun GetVertexInstanceForPolygonVertex(PolygonID: PolygonID, VertexID: VertexID): VertexInstanceID
    open fun GetVertexInstanceCount(): Number
    open fun GetVertexInstanceConnectedTriangles(VertexInstanceID: VertexInstanceID, OutConnectedTriangleIDs: Array<TriangleID> = definedExternally): `T$205`
    open fun GetVertexInstanceConnectedPolygons(VertexInstanceID: VertexInstanceID, OutConnectedPolygonIDs: Array<PolygonID> = definedExternally): `T$206`
    open fun GetVertexCount(): Number
    open fun GetVertexConnectedTriangles(VertexID: VertexID, OutConnectedTriangleIDs: Array<TriangleID> = definedExternally): `T$207`
    open fun GetVertexConnectedPolygons(VertexID: VertexID, OutConnectedPolygonIDs: Array<PolygonID> = definedExternally): `T$208`
    open fun GetVertexConnectedEdges(VertexID: VertexID, OutEdgeIDs: Array<EdgeID> = definedExternally): `T$209`
    open fun GetVertexAdjacentVertices(VertexID: VertexID, OutAdjacentVertexIDs: Array<VertexID> = definedExternally): `T$210`
    open fun GetTriangleVertices(TriangleID: TriangleID, OutVertexIDs: Array<VertexID> = definedExternally): `T$211`
    open fun GetTriangleVertexInstances(TriangleID: TriangleID, OutVertexInstanceIDs: Array<VertexInstanceID> = definedExternally): `T$212`
    open fun GetTriangleVertexInstance(TriangleID: TriangleID, index: Number): VertexInstanceID
    open fun GetTrianglePolygonGroup(TriangleID: TriangleID): PolygonGroupID
    open fun GetTrianglePolygon(TriangleID: TriangleID): PolygonID
    open fun GetTriangleEdges(TriangleID: TriangleID, OutEdgeIDs: Array<EdgeID> = definedExternally): `T$213`
    open fun GetTriangleCount(): Number
    open fun GetTriangleAdjacentTriangles(TriangleID: TriangleID, OutTriangleIDs: Array<TriangleID> = definedExternally): `T$214`
    open fun GetPolygonVertices(PolygonID: PolygonID, OutVertexIDs: Array<VertexID> = definedExternally): `T$215`
    open fun GetPolygonVertexInstances(PolygonID: PolygonID, OutVertexInstanceIDs: Array<VertexInstanceID> = definedExternally): `T$216`
    open fun GetPolygonTriangles(PolygonID: PolygonID, OutTriangleIDs: Array<TriangleID> = definedExternally): `T$217`
    open fun GetPolygonPolygonGroup(PolygonID: PolygonID): PolygonGroupID
    open fun GetPolygonPerimeterEdges(PolygonID: PolygonID, OutEdgeIDs: Array<EdgeID> = definedExternally): `T$218`
    open fun GetPolygonInternalEdges(PolygonID: PolygonID, OutEdgeIDs: Array<EdgeID> = definedExternally): `T$219`
    open fun GetPolygonGroupPolygons(PolygonGroupID: PolygonGroupID, OutPolygonIDs: Array<PolygonID> = definedExternally): `T$220`
    open fun GetPolygonGroupCount(): Number
    open fun GetPolygonCount(): Number
    open fun GetPolygonAdjacentPolygons(PolygonID: PolygonID, OutPolygonIDs: Array<PolygonID> = definedExternally): `T$221`
    open fun GetNumVertexVertexInstances(VertexID: VertexID): Number
    open fun GetNumVertexInstanceConnectedTriangles(VertexInstanceID: VertexInstanceID): Number
    open fun GetNumVertexInstanceConnectedPolygons(VertexInstanceID: VertexInstanceID): Number
    open fun GetNumVertexConnectedTriangles(VertexID: VertexID): Number
    open fun GetNumVertexConnectedPolygons(VertexID: VertexID): Number
    open fun GetNumVertexConnectedEdges(VertexID: VertexID): Number
    open fun GetNumPolygonVertices(PolygonID: PolygonID): Number
    open fun GetNumPolygonTriangles(PolygonID: PolygonID): Number
    open fun GetNumPolygonInternalEdges(PolygonID: PolygonID): Number
    open fun GetNumPolygonGroupPolygons(PolygonGroupID: PolygonGroupID): Number
    open fun GetNumEdgeConnectedTriangles(EdgeID: EdgeID): Number
    open fun GetNumEdgeConnectedPolygons(EdgeID: EdgeID): Number
    open fun GetEdgeVertices(EdgeID: EdgeID, OutVertexIDs: Array<VertexID> = definedExternally): `T$222`
    open fun GetEdgeVertex(EdgeID: EdgeID, VertexNumber: Number): VertexID
    open fun GetEdgeCount(): Number
    open fun GetEdgeConnectedTriangles(EdgeID: EdgeID, OutConnectedTriangleIDs: Array<TriangleID> = definedExternally): `T$223`
    open fun GetEdgeConnectedPolygons(EdgeID: EdgeID, OutConnectedPolygonIDs: Array<PolygonID> = definedExternally): `T$224`
    open fun Empty()
    open fun DeleteVertexInstance(VertexInstanceID: VertexInstanceID, OrphanedVertices: Array<VertexID> = definedExternally): `T$225`
    open fun DeleteVertex(VertexID: VertexID)
    open fun DeleteTriangle(TriangleID: TriangleID, OrphanedEdges: Array<EdgeID> = definedExternally, OrphanedVertexInstances: Array<VertexInstanceID> = definedExternally, OrphanedPolygonGroupsPtr: Array<PolygonGroupID> = definedExternally): `T$226`
    open fun DeletePolygonGroup(PolygonGroupID: PolygonGroupID)
    open fun DeletePolygon(PolygonID: PolygonID, OrphanedEdges: Array<EdgeID> = definedExternally, OrphanedVertexInstances: Array<VertexInstanceID> = definedExternally, OrphanedPolygonGroups: Array<PolygonGroupID> = definedExternally): `T$227`
    open fun DeleteEdge(EdgeID: EdgeID, OrphanedVertices: Array<VertexID> = definedExternally): `T$228`
    open fun CreateVertexWithID(VertexID: VertexID)
    open fun CreateVertexInstanceWithID(VertexInstanceID: VertexInstanceID, VertexID: VertexID)
    open fun CreateVertexInstance(VertexID: VertexID): VertexInstanceID
    open fun CreateVertex(): VertexID
    open fun CreateTriangleWithID(TriangleID: TriangleID, PolygonGroupID: PolygonGroupID, VertexInstanceIDs: Array<VertexInstanceID>, NewEdgeIDs: Array<EdgeID> = definedExternally): `T$229`
    open fun CreateTriangle(PolygonGroupID: PolygonGroupID, VertexInstanceIDs: Array<VertexInstanceID>, NewEdgeIDs: Array<EdgeID> = definedExternally): `T$230`
    open fun CreatePolygonWithID(PolygonID: PolygonID, PolygonGroupID: PolygonGroupID, VertexInstanceIDs: Array<VertexInstanceID> = definedExternally, NewEdgeIDs: Array<EdgeID> = definedExternally): `T$231`
    open fun CreatePolygonGroupWithID(PolygonGroupID: PolygonGroupID)
    open fun CreatePolygonGroup(): PolygonGroupID
    open fun CreatePolygon(PolygonGroupID: PolygonGroupID, VertexInstanceIDs: Array<VertexInstanceID> = definedExternally, NewEdgeIDs: Array<EdgeID> = definedExternally): `T$232`
    open fun CreateEdgeWithID(EdgeID: EdgeID, VertexID0: VertexID, VertexID1: VertexID)
    open fun CreateEdge(VertexID0: VertexID, VertexID1: VertexID): EdgeID
    open fun ComputePolygonTriangulation(PolygonID: PolygonID)

    companion object {
        fun Load(ResourceName: String): MeshDescriptionBase
        fun Find(Outer: UObject, ResourceName: String): MeshDescriptionBase
        fun GetDefaultObject(): MeshDescriptionBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshDescriptionBase
        fun C(Other: UObject): MeshDescriptionBase
        fun C(Other: Any): MeshDescriptionBase
    }
}

external open class MeshDescriptionBaseBulkData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PreallocatedMeshDescription: MeshDescriptionBase
    open var MeshDescription: MeshDescriptionBase

    companion object {
        fun Load(ResourceName: String): MeshDescriptionBaseBulkData
        fun Find(Outer: UObject, ResourceName: String): MeshDescriptionBaseBulkData
        fun GetDefaultObject(): MeshDescriptionBaseBulkData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshDescriptionBaseBulkData
        fun C(Other: UObject): MeshDescriptionBaseBulkData
        fun C(Other: Any): MeshDescriptionBaseBulkData
    }
}

external open class StaticMeshDescriptionBulkData : MeshDescriptionBaseBulkData {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): StaticMeshDescriptionBulkData
        fun Find(Outer: UObject, ResourceName: String): StaticMeshDescriptionBulkData
        fun GetDefaultObject(): StaticMeshDescriptionBulkData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshDescriptionBulkData
        fun C(Other: UObject): StaticMeshDescriptionBulkData
        fun C(Other: Any): StaticMeshDescriptionBulkData
    }
}

external open class MeshBuildSettings {
    open var bUseMikkTSpace: Boolean
    open var bRecomputeNormals: Boolean
    open var bRecomputeTangents: Boolean
    open var bComputeWeightedNormals: Boolean
    open var bRemoveDegenerates: Boolean
    open var bBuildReversedIndexBuffer: Boolean
    open var bUseHighPrecisionTangentBasis: Boolean
    open var bUseFullPrecisionUVs: Boolean
    open var bUseBackwardsCompatibleF16TruncUVs: Boolean
    open var bGenerateLightmapUVs: Boolean
    open var bGenerateDistanceFieldAsIfTwoSided: Boolean
    open var bSupportFaceRemap: Boolean
    open var MinLightmapResolution: Number
    open var SrcLightmapIndex: Number
    open var DstLightmapIndex: Number
    open var BuildScale: Number
    open var BuildScale3D: Vector
    open var DistanceFieldResolutionScale: Number
    open var DistanceFieldBias: Number
    open var DistanceFieldReplacementMesh: StaticMesh
    open var MaxLumenMeshCards: Number
    open fun clone(): MeshBuildSettings

    companion object {
        fun C(Other: UObject): MeshBuildSettings
        fun C(Other: Any): MeshBuildSettings
    }
}

external object EMeshFeatureImportance {
    var Off: String /* "Off" */
    var Lowest: String /* "Lowest" */
    var Low: String /* "Low" */
    var Normal: String /* "Normal" */
    var High: String /* "High" */
    var Highest: String /* "Highest" */
    var EMeshFeatureImportance_MAX: String /* "EMeshFeatureImportance_MAX" */
}

external object EStaticMeshReductionTerimationCriterion {
    var Triangles: String /* "Triangles" */
    var Vertices: String /* "Vertices" */
    var Any: String /* "Any" */
    var EStaticMeshReductionTerimationCriterion_MAX: String /* "EStaticMeshReductionTerimationCriterion_MAX" */
}

external open class MeshReductionSettings {
    open var PercentTriangles: Number
    open var PercentVertices: Number
    open var MaxDeviation: Number
    open var PixelError: Number
    open var WeldingThreshold: Number
    open var HardAngleThreshold: Number
    open var BaseLODModel: Number
    open var SilhouetteImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var TextureImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var ShadingImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var bRecalculateNormals: Boolean
    open var bGenerateUniqueLightmapUVs: Boolean
    open var bKeepSymmetry: Boolean
    open var bVisibilityAided: Boolean
    open var bCullOccluded: Boolean
    open var TerminationCriterion: String /* "Triangles" | "Vertices" | "Any" | "EStaticMeshReductionTerimationCriterion_MAX" */
    open var VisibilityAggressiveness: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var VertexColorImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open fun clone(): MeshReductionSettings

    companion object {
        fun C(Other: UObject): MeshReductionSettings
        fun C(Other: Any): MeshReductionSettings
    }
}

external open class StaticMeshSourceModel {
    open var StaticMeshDescriptionBulkData: StaticMeshDescriptionBulkData
    open var BuildSettings: MeshBuildSettings
    open var ReductionSettings: MeshReductionSettings
    open var LODDistance: Number
    open var ScreenSize: PerPlatformFloat
    open var SourceImportFilename: String
    open var bImportWithBaseMesh: Boolean
    open fun clone(): StaticMeshSourceModel

    companion object {
        fun C(Other: UObject): StaticMeshSourceModel
        fun C(Other: Any): StaticMeshSourceModel
    }
}

external open class MeshSectionInfoMap {
    open var Map: Any
    open fun clone(): MeshSectionInfoMap

    companion object {
        fun C(Other: UObject): MeshSectionInfoMap
        fun C(Other: Any): MeshSectionInfoMap
    }
}

external open class MaterialRemapIndex {
    open var ImportVersionKey: Any
    open var MaterialRemap: Array<Number>
    open fun clone(): MaterialRemapIndex

    companion object {
        fun C(Other: UObject): MaterialRemapIndex
        fun C(Other: Any): MaterialRemapIndex
    }
}

external open class MeshNaniteSettings {
    open var bEnabled: Boolean
    open var PositionPrecision: Number
    open var TargetMinimumResidencyInKB: Any
    open var KeepPercentTriangles: Number
    open var TrimRelativeError: Number
    open var FallbackPercentTriangles: Number
    open var FallbackRelativeError: Number
    open fun clone(): MeshNaniteSettings

    companion object {
        fun C(Other: UObject): MeshNaniteSettings
        fun C(Other: Any): MeshNaniteSettings
    }
}

external open class StaticMaterial {
    open var MaterialInterface: MaterialInterface
    open var MaterialSlotName: String
    open var ImportedMaterialSlotName: String
    open var UVChannelData: MeshUVChannelInfo
    open fun clone(): StaticMaterial

    companion object {
        fun C(Other: UObject): StaticMaterial
        fun C(Other: Any): StaticMaterial
    }
}

external open class AssetEditorOrbitCameraPosition {
    open var bIsSet: Boolean
    open var CamOrbitPoint: Vector
    open var CamOrbitZoom: Vector
    open var CamOrbitRotation: Rotator
    open fun clone(): AssetEditorOrbitCameraPosition

    companion object {
        fun C(Other: UObject): AssetEditorOrbitCameraPosition
        fun C(Other: Any): AssetEditorOrbitCameraPosition
    }
}

external open class StaticMeshSocket : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SocketName: String
    open var RelativeLocation: Vector
    open var RelativeRotation: Rotator
    open var RelativeScale: Vector
    open var Tag: String
    open var PreviewStaticMesh: StaticMesh
    open var bSocketCreatedAtImport: Boolean

    companion object {
        fun Load(ResourceName: String): StaticMeshSocket
        fun Find(Outer: UObject, ResourceName: String): StaticMeshSocket
        fun GetDefaultObject(): StaticMeshSocket
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshSocket
        fun C(Other: UObject): StaticMeshSocket
        fun C(Other: Any): StaticMeshSocket
    }
}

external open class NavCollisionBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bIsDynamicObstacle: Boolean

    companion object {
        fun Load(ResourceName: String): NavCollisionBase
        fun Find(Outer: UObject, ResourceName: String): NavCollisionBase
        fun GetDefaultObject(): NavCollisionBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavCollisionBase
        fun C(Other: UObject): NavCollisionBase
        fun C(Other: Any): NavCollisionBase
    }
}

external interface `T$233` {
    var PolygonID_PlusX: PolygonID
    var PolygonID_MinusX: PolygonID
    var PolygonID_PlusY: PolygonID
    var PolygonID_MinusY: PolygonID
    var PolygonID_PlusZ: PolygonID
    var PolygonID_MinusZ: PolygonID
}

external open class StaticMeshDescription : MeshDescriptionBase {
    constructor()
    constructor(Outer: UObject)
    open fun SetVertexInstanceUV(VertexInstanceID: VertexInstanceID, UV: Vector2D, UVIndex: Number)
    open fun SetPolygonGroupMaterialSlotName(PolygonGroupID: PolygonGroupID, SlotName: String)
    open fun GetVertexInstanceUV(VertexInstanceID: VertexInstanceID, UVIndex: Number): Vector2D
    open fun CreateCube(Center: Vector, HalfExtents: Vector, PolygonGroup: PolygonGroupID, PolygonID_PlusX: PolygonID = definedExternally, PolygonID_MinusX: PolygonID = definedExternally, PolygonID_PlusY: PolygonID = definedExternally, PolygonID_MinusY: PolygonID = definedExternally, PolygonID_PlusZ: PolygonID = definedExternally, PolygonID_MinusZ: PolygonID = definedExternally): `T$233`

    companion object {
        fun Load(ResourceName: String): StaticMeshDescription
        fun Find(Outer: UObject, ResourceName: String): StaticMeshDescription
        fun GetDefaultObject(): StaticMeshDescription
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshDescription
        fun C(Other: UObject): StaticMeshDescription
        fun C(Other: Any): StaticMeshDescription
    }
}

external open class MeshSectionInfo {
    open var MaterialIndex: Number
    open var bEnableCollision: Boolean
    open var bCastShadow: Boolean
    open var bVisibleInRayTracing: Boolean
    open var bForceOpaque: Boolean
    open fun clone(): MeshSectionInfo

    companion object {
        fun C(Other: UObject): MeshSectionInfo
        fun C(Other: Any): MeshSectionInfo
    }
}

external interface `T$234` {
    var RawMesh: JavascriptRawMesh
}

external open class JavascriptRawMesh {
    open var FaceMaterialIndices: Array<Number>
    open var FaceSmoothingMasks: Array<Any>
    open var VertexPositions: Array<Vector>
    open var WedgeIndices: Array<Any>
    open var WedgeTangentX: Array<Vector>
    open var WedgeTangentY: Array<Vector>
    open var WedgeTangentZ: Array<Vector>
    open var WedgeTexCoords_0: Array<Vector2D>
    open var WedgeTexCoords_1: Array<Vector2D>
    open var WedgeTexCoords_2: Array<Vector2D>
    open var WedgeTexCoords_3: Array<Vector2D>
    open var WedgeTexCoords_4: Array<Vector2D>
    open var WedgeTexCoords_5: Array<Vector2D>
    open var WedgeTexCoords_6: Array<Vector2D>
    open var WedgeTexCoords_7: Array<Vector2D>
    open var WedgeColors: Array<Color>
    open var MaterialIndexToImportIndex: Array<Number>
    open fun clone(): JavascriptRawMesh
    open fun CompactMaterialIndices(): `T$234`
    open fun Empty(): `T$234`
    open fun GetWedgePosition(WedgeIndex: Number): Vector
    open fun IsValid(): Boolean
    open fun IsValidOrFixable(): Boolean

    companion object {
        fun C(Other: UObject): JavascriptRawMesh
        fun C(Other: Any): JavascriptRawMesh
        fun CompactMaterialIndices(RawMesh: JavascriptRawMesh = definedExternally): `T$234`
        fun Empty(RawMesh: JavascriptRawMesh = definedExternally): `T$234`
        fun GetWedgePosition(RawMesh: JavascriptRawMesh, WedgeIndex: Number): Vector
        fun IsValid(RawMesh: JavascriptRawMesh): Boolean
        fun IsValidOrFixable(RawMesh: JavascriptRawMesh): Boolean
    }
}

external open class ProcMeshTangent {
    open var TangentX: Vector
    open var bFlipTangentY: Boolean
    open fun clone(): ProcMeshTangent

    companion object {
        fun C(Other: UObject): ProcMeshTangent
        fun C(Other: Any): ProcMeshTangent
    }
}

external object EScriptCollisionShapeType {
    var Box: String /* "Box" */
    var Sphere: String /* "Sphere" */
    var Capsule: String /* "Capsule" */
    var NDOP10_X: String /* "NDOP10_X" */
    var NDOP10_Y: String /* "NDOP10_Y" */
    var NDOP10_Z: String /* "NDOP10_Z" */
    var NDOP18: String /* "NDOP18" */
    var NDOP26: String /* "NDOP26" */
    var EScriptCollisionShapeType_MAX: String /* "EScriptCollisionShapeType_MAX" */
}

external open class StaticMeshReductionSettings {
    open var PercentTriangles: Number
    open var ScreenSize: Number
    open fun clone(): StaticMeshReductionSettings

    companion object {
        fun C(Other: UObject): StaticMeshReductionSettings
        fun C(Other: Any): StaticMeshReductionSettings
    }
}

external open class StaticMeshReductionOptions {
    open var bAutoComputeLODScreenSize: Boolean
    open var ReductionSettings: Array<StaticMeshReductionSettings>
    open fun clone(): StaticMeshReductionOptions

    companion object {
        fun C(Other: UObject): StaticMeshReductionOptions
        fun C(Other: Any): StaticMeshReductionOptions
    }
}

external interface `T$235` {
    var QualityLevelMinimumLODs: Any
}

external interface `T$236` {
    var PlatformMinimumLODs: Any
}

external interface `T$237` {
    var OutMesh: JavascriptRawMesh
}

external interface `T$238` {
    var InMesh: JavascriptRawMesh
}

external interface `T$239` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external interface `T$240` {
    var OutBuildOptions: MeshBuildSettings
}

external interface `T$241` {
    var OutReductionOptions: MeshReductionSettings
}

external interface `T$242` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external open class StaticMesh : StreamableRenderAsset {
    constructor()
    constructor(Outer: UObject)
    open var SourceModels: Array<StaticMeshSourceModel>
    open var HiResSourceModel: StaticMeshSourceModel
    open var SectionInfoMap: MeshSectionInfoMap
    open var OriginalSectionInfoMap: MeshSectionInfoMap
    open var LODGroup: String
    open var NumStreamedLODs: PerPlatformInt
    open var ImportVersion: Number
    open var MaterialRemapIndexPerImportVersion: Array<MaterialRemapIndex>
    open var LightmapUVVersion: Number
    open var bAutoComputeLODScreenSize: Boolean
    open var Materials: Array<MaterialInterface>
    open var NaniteSettings: MeshNaniteSettings
    open var MinQualityLevelLOD: PerQualityLevelInt
    open var MinLOD: PerPlatformInt
    open var StaticMaterials: Array<StaticMaterial>
    open var LightmapUVDensity: Number
    open var LightMapResolution: Number
    open var LightMapCoordinateIndex: Number
    open var DistanceFieldSelfShadowBias: Number
    open var BodySetup: BodySetup
    open var LODForCollision: Number
    open var bGenerateMeshDistanceField: Boolean
    open var bStripComplexCollisionForConsole: Boolean
    open var bHasNavigationData: Boolean
    open var bSupportUniformlyDistributedSampling: Boolean
    open var bSupportPhysicalMaterialMasks: Boolean
    open var bSupportRayTracing: Boolean
    open var bDoFastBuild: Boolean
    open var bIsBuiltAtRuntime: Boolean
    open var bAllowCPUAccess: Boolean
    open var bSupportGpuUniformlyDistributedSampling: Boolean
    open var AssetImportData: AssetImportData
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var ThumbnailInfo: ThumbnailInfo
    open var EditorCameraPosition: AssetEditorOrbitCameraPosition
    open var bCustomizedCollision: Boolean
    open var Sockets: Array<StaticMeshSocket>
    open var PositiveBoundsExtension: Vector
    open var NegativeBoundsExtension: Vector
    open var ExtendedBounds: BoxSphereBounds
    open var ElementToIgnoreForTexFactor: Number
    open var AssetUserData: Array<AssetUserData>
    open var EditableMesh: UObject
    open var ComplexCollisionMesh: StaticMesh
    open var NavCollision: NavCollisionBase
    open fun SetStaticMaterials(InStaticMaterials: Array<StaticMaterial>)
    open fun SetNumSourceModels(Num: Number)
    open fun SetMinimumLODForPlatforms(PlatformMinimumLODs: Any)
    open fun SetMinimumLODForPlatform(PlatformName: String, InMinLOD: Number)
    open fun SetMaterial(MaterialIndex: Number, NewMaterial: MaterialInterface)
    open fun RemoveSocket(Socket: StaticMeshSocket)
    open fun GetStaticMeshDescription(LODIndex: Number): StaticMeshDescription
    open fun GetStaticMaterials(): Array<StaticMaterial>
    open fun GetNumSections(InLOD: Number): Number
    open fun GetNumLODs(): Number
    open fun GetMinimumLODForQualityLevels(QualityLevelMinimumLODs: Any = definedExternally): `T$235`
    open fun GetMinimumLODForQualityLevel(QualityLevel: String): Number
    open fun GetMinimumLODForPlatforms(PlatformMinimumLODs: Any = definedExternally): `T$236`
    open fun GetMinimumLODForPlatform(PlatformName: String): Number
    open fun GetMaterialIndex(MaterialSlotName: String): Number
    open fun GetMaterial(MaterialIndex: Number): MaterialInterface
    open fun GetBounds(): BoxSphereBounds
    open fun GetBoundingBox(): Box
    open fun FindSocket(InSocketName: String): StaticMeshSocket
    open fun BuildFromStaticMeshDescriptions(StaticMeshDescriptions: Array<StaticMeshDescription>, bBuildSimpleCollision: Boolean, bFastBuild: Boolean)
    open fun AddSocket(Socket: StaticMeshSocket)
    open fun AddMaterial(Material: MaterialInterface): String
    open fun Build()
    open fun GetPhysicsBodySetupFromStaticMesh(): BodySetup
    open fun GetSectionInfo(LODIndex: Number, SectionIndex: Number): MeshSectionInfo
    open fun LoadRawMesh(SourceModelIndex: Number, OutMesh: JavascriptRawMesh = definedExternally): `T$237`
    open fun SaveRawMesh(SourceModelIndex: Number, InMesh: JavascriptRawMesh = definedExternally): `T$238`
    open fun SetSectionInfo(LODIndex: Number, SectionIndex: Number, Info: MeshSectionInfo)
    open fun GetSectionFromStaticMesh(LODIndex: Number, SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$239`
    open fun AddSimpleCollisions(ShapeType: String /* "Box" | "Sphere" | "Capsule" | "NDOP10_X" | "NDOP10_Y" | "NDOP10_Z" | "NDOP18" | "NDOP26" | "EScriptCollisionShapeType_MAX" */): Number
    open fun AddSimpleCollisionsWithNotification(ShapeType: String /* "Box" | "Sphere" | "Capsule" | "NDOP10_X" | "NDOP10_Y" | "NDOP10_Z" | "NDOP18" | "NDOP26" | "EScriptCollisionShapeType_MAX" */, bApplyChanges: Boolean): Number
    open fun AddUVChannel(LODIndex: Number): Boolean
    open fun EnableSectionCastShadow(bCastShadow: Boolean, LODIndex: Number, SectionIndex: Number)
    open fun EnableSectionCollision(bCollisionEnabled: Boolean, LODIndex: Number, SectionIndex: Number)
    open fun GenerateBoxUVChannel(LODIndex: Number, UVChannelIndex: Number, position: Vector, Orientation: Rotator, Size: Vector): Boolean
    open fun GenerateCylindricalUVChannel(LODIndex: Number, UVChannelIndex: Number, position: Vector, Orientation: Rotator, Tiling: Vector2D): Boolean
    open fun GeneratePlanarUVChannel(LODIndex: Number, UVChannelIndex: Number, position: Vector, Orientation: Rotator, Tiling: Vector2D): Boolean
    open fun GetCollisionComplexity(): String /* "CTF_UseDefault" | "CTF_UseSimpleAndComplex" | "CTF_UseSimpleAsComplex" | "CTF_UseComplexAsSimple" | "CTF_MAX" */
    open fun GetConvexCollisionCount(): Number
    open fun GetLodBuildSettings(LODIndex: Number, OutBuildOptions: MeshBuildSettings = definedExternally): `T$240`
    open fun GetLodCount(): Number
    open fun GetLodReductionSettings(LODIndex: Number, OutReductionOptions: MeshReductionSettings = definedExternally): `T$241`
    open fun GetLodScreenSizes(): Array<Number>
    open fun GetNumberMaterials(): Number
    open fun GetNumberVerts(LODIndex: Number): Number
    open fun GetNumUVChannels(LODIndex: Number): Number
    open fun GetSimpleCollisionCount(): Number
    open fun HasVertexColors(): Boolean
    open fun ImportLOD(LODIndex: Number, SourceFilename: String): Number
    open fun InsertUVChannel(LODIndex: Number, UVChannelIndex: Number): Boolean
    open fun IsSectionCollisionEnabled(LODIndex: Number, SectionIndex: Number): Boolean
    open fun ReimportAllCustomLODs(): Boolean
    open fun RemoveCollisions(): Boolean
    open fun RemoveCollisionsWithNotification(bApplyChanges: Boolean): Boolean
    open fun RemoveLods(): Boolean
    open fun RemoveUVChannel(LODIndex: Number, UVChannelIndex: Number): Boolean
    open fun SetAllowCPUAccess(bAllowCPUAccess: Boolean)
    open fun SetConvexDecompositionCollisions(HullCount: Number, MaxHullVerts: Number, HullPrecision: Number): Boolean
    open fun SetConvexDecompositionCollisionsWithNotification(HullCount: Number, MaxHullVerts: Number, HullPrecision: Number, bApplyChanges: Boolean): Boolean
    open fun SetGenerateLightmapUVs(bGenerateLightmapUVs: Boolean): Boolean
    open fun SetLodBuildSettings(LODIndex: Number, BuildOptions: MeshBuildSettings)
    open fun SetLodFromStaticMesh(DestinationLodIndex: Number, SourceStaticMesh: StaticMesh, SourceLodIndex: Number, bReuseExistingMaterialSlots: Boolean): Number
    open fun SetLodReductionSettings(LODIndex: Number, ReductionOptions: MeshReductionSettings)
    open fun SetLods(ReductionOptions: StaticMeshReductionOptions): Number
    open fun SetLodsWithNotification(ReductionOptions: StaticMeshReductionOptions, bApplyChanges: Boolean): Number

    companion object {
        fun Load(ResourceName: String): StaticMesh
        fun Find(Outer: UObject, ResourceName: String): StaticMesh
        fun GetDefaultObject(): StaticMesh
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMesh
        fun CreateStaticMeshDescription(Outer: UObject): StaticMeshDescription
        fun C(Other: UObject): StaticMesh
        fun C(Other: Any): StaticMesh
        fun Build(StaticMesh: StaticMesh)
        fun GetPhysicsBodySetupFromStaticMesh(InStaticMesh: StaticMesh): BodySetup
        fun GetSectionInfo(StaticMesh: StaticMesh, LODIndex: Number, SectionIndex: Number): MeshSectionInfo
        fun LoadRawMesh(StaticMesh: StaticMesh, SourceModelIndex: Number, OutMesh: JavascriptRawMesh = definedExternally): `T$237`
        fun SaveRawMesh(StaticMesh: StaticMesh, SourceModelIndex: Number, InMesh: JavascriptRawMesh = definedExternally): `T$238`
        fun SetSectionInfo(StaticMesh: StaticMesh, LODIndex: Number, SectionIndex: Number, Info: MeshSectionInfo)
        fun GetSectionFromStaticMesh(InMesh: StaticMesh, LODIndex: Number, SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$242`
        fun AddSimpleCollisions(StaticMesh: StaticMesh, ShapeType: String /* "Box" | "Sphere" | "Capsule" | "NDOP10_X" | "NDOP10_Y" | "NDOP10_Z" | "NDOP18" | "NDOP26" | "EScriptCollisionShapeType_MAX" */): Number
        fun AddSimpleCollisionsWithNotification(StaticMesh: StaticMesh, ShapeType: String /* "Box" | "Sphere" | "Capsule" | "NDOP10_X" | "NDOP10_Y" | "NDOP10_Z" | "NDOP18" | "NDOP26" | "EScriptCollisionShapeType_MAX" */, bApplyChanges: Boolean): Number
        fun AddUVChannel(StaticMesh: StaticMesh, LODIndex: Number): Boolean
        fun EnableSectionCastShadow(StaticMesh: StaticMesh, bCastShadow: Boolean, LODIndex: Number, SectionIndex: Number)
        fun EnableSectionCollision(StaticMesh: StaticMesh, bCollisionEnabled: Boolean, LODIndex: Number, SectionIndex: Number)
        fun GenerateBoxUVChannel(StaticMesh: StaticMesh, LODIndex: Number, UVChannelIndex: Number, position: Vector, Orientation: Rotator, Size: Vector): Boolean
        fun GenerateCylindricalUVChannel(StaticMesh: StaticMesh, LODIndex: Number, UVChannelIndex: Number, position: Vector, Orientation: Rotator, Tiling: Vector2D): Boolean
        fun GeneratePlanarUVChannel(StaticMesh: StaticMesh, LODIndex: Number, UVChannelIndex: Number, position: Vector, Orientation: Rotator, Tiling: Vector2D): Boolean
        fun GetCollisionComplexity(StaticMesh: StaticMesh): String /* "CTF_UseDefault" | "CTF_UseSimpleAndComplex" | "CTF_UseSimpleAsComplex" | "CTF_UseComplexAsSimple" | "CTF_MAX" */
        fun GetConvexCollisionCount(StaticMesh: StaticMesh): Number
        fun GetLodBuildSettings(StaticMesh: StaticMesh, LODIndex: Number, OutBuildOptions: MeshBuildSettings = definedExternally): `T$240`
        fun GetLodCount(StaticMesh: StaticMesh): Number
        fun GetLodReductionSettings(StaticMesh: StaticMesh, LODIndex: Number, OutReductionOptions: MeshReductionSettings = definedExternally): `T$241`
        fun GetLodScreenSizes(StaticMesh: StaticMesh): Array<Number>
        fun GetNumberMaterials(StaticMesh: StaticMesh): Number
        fun GetNumberVerts(StaticMesh: StaticMesh, LODIndex: Number): Number
        fun GetNumUVChannels(StaticMesh: StaticMesh, LODIndex: Number): Number
        fun GetSimpleCollisionCount(StaticMesh: StaticMesh): Number
        fun HasVertexColors(StaticMesh: StaticMesh): Boolean
        fun ImportLOD(BaseStaticMesh: StaticMesh, LODIndex: Number, SourceFilename: String): Number
        fun InsertUVChannel(StaticMesh: StaticMesh, LODIndex: Number, UVChannelIndex: Number): Boolean
        fun IsSectionCollisionEnabled(StaticMesh: StaticMesh, LODIndex: Number, SectionIndex: Number): Boolean
        fun ReimportAllCustomLODs(StaticMesh: StaticMesh): Boolean
        fun RemoveCollisions(StaticMesh: StaticMesh): Boolean
        fun RemoveCollisionsWithNotification(StaticMesh: StaticMesh, bApplyChanges: Boolean): Boolean
        fun RemoveLods(StaticMesh: StaticMesh): Boolean
        fun RemoveUVChannel(StaticMesh: StaticMesh, LODIndex: Number, UVChannelIndex: Number): Boolean
        fun SetAllowCPUAccess(StaticMesh: StaticMesh, bAllowCPUAccess: Boolean)
        fun SetConvexDecompositionCollisions(StaticMesh: StaticMesh, HullCount: Number, MaxHullVerts: Number, HullPrecision: Number): Boolean
        fun SetConvexDecompositionCollisionsWithNotification(StaticMesh: StaticMesh, HullCount: Number, MaxHullVerts: Number, HullPrecision: Number, bApplyChanges: Boolean): Boolean
        fun SetGenerateLightmapUVs(StaticMesh: StaticMesh, bGenerateLightmapUVs: Boolean): Boolean
        fun SetLodBuildSettings(StaticMesh: StaticMesh, LODIndex: Number, BuildOptions: MeshBuildSettings)
        fun SetLodFromStaticMesh(DestinationStaticMesh: StaticMesh, DestinationLodIndex: Number, SourceStaticMesh: StaticMesh, SourceLodIndex: Number, bReuseExistingMaterialSlots: Boolean): Number
        fun SetLodReductionSettings(StaticMesh: StaticMesh, LODIndex: Number, ReductionOptions: MeshReductionSettings)
        fun SetLods(StaticMesh: StaticMesh, ReductionOptions: StaticMeshReductionOptions): Number
        fun SetLodsWithNotification(StaticMesh: StaticMesh, ReductionOptions: StaticMeshReductionOptions, bApplyChanges: Boolean): Number
    }
}

external interface `T$243` {
    var DesiredView: MinimalViewInfo
}

external open class CameraComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var FieldOfView: Number
    open var OrthoWidth: Number
    open var OrthoNearClipPlane: Number
    open var OrthoFarClipPlane: Number
    open var AspectRatio: Number
    open var bConstrainAspectRatio: Boolean
    open var bUseFieldOfViewForLOD: Boolean
    open var bDrawFrustumAllowed: Boolean
    open var bCameraMeshHiddenInGame: Boolean
    open var bLockToHmd: Boolean
    open var bUsePawnControlRotation: Boolean
    open var ProjectionMode: String /* "Perspective" | "Orthographic" | "ECameraProjectionMode_MAX" */
    open var CameraMesh: StaticMesh
    open var PostProcessBlendWeight: Number
    open var PostProcessSettings: PostProcessSettings
    open var bUseControllerViewRotation: Boolean
    open fun SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD: Boolean)
    open fun SetProjectionMode(InProjectionMode: String /* "Perspective" | "Orthographic" | "ECameraProjectionMode_MAX" */)
    open fun SetPostProcessBlendWeight(InPostProcessBlendWeight: Number)
    open fun SetOrthoWidth(InOrthoWidth: Number)
    open fun SetOrthoNearClipPlane(InOrthoNearClipPlane: Number)
    open fun SetOrthoFarClipPlane(InOrthoFarClipPlane: Number)
    open fun SetFieldOfView(InFieldOfView: Number)
    open fun SetConstraintAspectRatio(bInConstrainAspectRatio: Boolean)
    open fun SetAspectRatio(InAspectRatio: Number)
    open fun OnCameraMeshHiddenChanged()
    open fun GetFilmbackText(): String
    open fun GetCameraView(DeltaTime: Number, DesiredView: MinimalViewInfo = definedExternally): `T$243`

    companion object {
        fun Load(ResourceName: String): CameraComponent
        fun Find(Outer: UObject, ResourceName: String): CameraComponent
        fun GetDefaultObject(): CameraComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraComponent
        fun C(Other: UObject): CameraComponent
        fun C(Other: Any): CameraComponent
    }
}

external open class CameraActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var AutoActivateForPlayer: String /* "Disabled" | "Player0" | "Player1" | "Player2" | "Player3" | "Player4" | "Player5" | "Player6" | "Player7" | "EAutoReceiveInput_MAX" */
    open var CameraComponent: CameraComponent
    open var SceneComponent: SceneComponent
    open var bConstrainAspectRatio: Boolean
    open var AspectRatio: Number
    open var FOVAngle: Number
    open var PostProcessBlendWeight: Number
    open var PostProcessSettings: PostProcessSettings
    open fun GetAutoActivatePlayerIndex(): Number
    open fun DrawDebugCamera(CameraColor: LinearColor, Duration: Number)

    companion object {
        fun GetDefaultObject(): CameraActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraActor
        fun C(Other: UObject): CameraActor
        fun C(Other: Any): CameraActor
        fun DrawDebugCamera(CameraActor: CameraActor, CameraColor: LinearColor, Duration: Number)
    }
}

external object EAttachmentRule {
    var KeepRelative: String /* "KeepRelative" */
    var KeepWorld: String /* "KeepWorld" */
    var SnapToTarget: String /* "SnapToTarget" */
    var EAttachmentRule_MAX: String /* "EAttachmentRule_MAX" */
}

external open class FXSystemAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaxPoolSize: Any
    open var PoolPrimeSize: Any

    companion object {
        fun Load(ResourceName: String): FXSystemAsset
        fun Find(Outer: UObject, ResourceName: String): FXSystemAsset
        fun GetDefaultObject(): FXSystemAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FXSystemAsset
        fun C(Other: UObject): FXSystemAsset
        fun C(Other: Any): FXSystemAsset
    }
}

external open class FXSystemComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open fun SetVectorParameter(ParameterName: String, Param: Vector)
    open fun SetUseAutoManageAttachment(bAutoManage: Boolean)
    open fun SetIntegerParameter(ParameterName: String, Param: Number)
    open fun SetFloatParameter(ParameterName: String, Param: Number)
    open fun SetEmitterEnable(EmitterName: String, bNewEnableState: Boolean)
    open fun SetColorParameter(ParameterName: String, Param: LinearColor)
    open fun SetBooleanParameter(ParameterName: String, Param: Boolean)
    open fun SetAutoAttachmentParameters(Parent: SceneComponent, SocketName: String, LocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */)
    open fun SetActorParameter(ParameterName: String, Param: Actor)
    open fun ReleaseToPool()
    open fun GetFXSystemAsset(): FXSystemAsset

    companion object {
        fun Load(ResourceName: String): FXSystemComponent
        fun Find(Outer: UObject, ResourceName: String): FXSystemComponent
        fun GetDefaultObject(): FXSystemComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FXSystemComponent
        fun C(Other: UObject): FXSystemComponent
        fun C(Other: Any): FXSystemComponent
    }
}

external object EEmitterRenderMode {
    var ERM_Normal: String /* "ERM_Normal" */
    var ERM_Point: String /* "ERM_Point" */
    var ERM_Cross: String /* "ERM_Cross" */
    var ERM_LightsOnly: String /* "ERM_LightsOnly" */
    var ERM_None: String /* "ERM_None" */
    var ERM_MAX: String /* "ERM_MAX" */
}

external object EParticleSignificanceLevel {
    var Low: String /* "Low" */
    var Medium: String /* "Medium" */
    var High: String /* "High" */
    var Critical: String /* "Critical" */
    var Num: String /* "Num" */
    var EParticleSignificanceLevel_MAX: String /* "EParticleSignificanceLevel_MAX" */
}

external open class ParticleModule : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bSpawnModule: Boolean
    open var bUpdateModule: Boolean
    open var bFinalUpdateModule: Boolean
    open var bUpdateForGPUEmitter: Boolean
    open var bCurvesAsColor: Boolean
    open var b3DDrawMode: Boolean
    open var bSupported3DDrawMode: Boolean
    open var bEnabled: Boolean
    open var bEditable: Boolean
    open var LODDuplicate: Boolean
    open var bSupportsRandomSeed: Boolean
    open var bRequiresLoopingNotification: Boolean
    open var LODValidity: Number
    open var ModuleEditorColor: Color

    companion object {
        fun Load(ResourceName: String): ParticleModule
        fun Find(Outer: UObject, ResourceName: String): ParticleModule
        fun GetDefaultObject(): ParticleModule
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModule
        fun C(Other: UObject): ParticleModule
        fun C(Other: Any): ParticleModule
    }
}

external object EParticleScreenAlignment {
    var PSA_FacingCameraPosition: String /* "PSA_FacingCameraPosition" */
    var PSA_Square: String /* "PSA_Square" */
    var PSA_Rectangle: String /* "PSA_Rectangle" */
    var PSA_Velocity: String /* "PSA_Velocity" */
    var PSA_AwayFromCenter: String /* "PSA_AwayFromCenter" */
    var PSA_TypeSpecific: String /* "PSA_TypeSpecific" */
    var PSA_FacingCameraDistanceBlend: String /* "PSA_FacingCameraDistanceBlend" */
    var PSA_MAX: String /* "PSA_MAX" */
}

external object EParticleSortMode {
    var PSORTMODE_None: String /* "PSORTMODE_None" */
    var PSORTMODE_ViewProjDepth: String /* "PSORTMODE_ViewProjDepth" */
    var PSORTMODE_DistanceToView: String /* "PSORTMODE_DistanceToView" */
    var PSORTMODE_Age_OldestFirst: String /* "PSORTMODE_Age_OldestFirst" */
    var PSORTMODE_Age_NewestFirst: String /* "PSORTMODE_Age_NewestFirst" */
    var PSORTMODE_MAX: String /* "PSORTMODE_MAX" */
}

external open class DistributionLookupTable {
    open var TimeScale: Number
    open var TimeBias: Number
    open var Values: Array<Number>
    open var Op: Number
    open var EntryCount: Number
    open var EntryStride: Number
    open var SubEntryStride: Number
    open var LockFlag: Number
    open fun clone(): DistributionLookupTable

    companion object {
        fun C(Other: UObject): DistributionLookupTable
        fun C(Other: Any): DistributionLookupTable
    }
}

external open class RawDistribution {
    open var Table: DistributionLookupTable
    open fun clone(): RawDistribution

    companion object {
        fun C(Other: UObject): RawDistribution
        fun C(Other: Any): RawDistribution
    }
}

external open class Distribution : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Distribution
        fun Find(Outer: UObject, ResourceName: String): Distribution
        fun GetDefaultObject(): Distribution
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Distribution
        fun C(Other: UObject): Distribution
        fun C(Other: Any): Distribution
    }
}

external open class DistributionFloat : Distribution {
    constructor()
    constructor(Outer: UObject)
    open var bCanBeBaked: Boolean
    open var bBakedDataSuccesfully: Boolean

    companion object {
        fun Load(ResourceName: String): DistributionFloat
        fun Find(Outer: UObject, ResourceName: String): DistributionFloat
        fun GetDefaultObject(): DistributionFloat
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DistributionFloat
        fun C(Other: UObject): DistributionFloat
        fun C(Other: Any): DistributionFloat
    }
}

external open class RawDistributionFloat : RawDistribution {
    open var MinValue: Number
    open var MaxValue: Number
    open var Distribution: DistributionFloat
    override fun clone(): RawDistributionFloat

    companion object {
        fun C(Other: UObject): RawDistributionFloat
        fun C(Other: Any): RawDistributionFloat
    }
}

external open class ParticleBurst {
    open var Count: Number
    open var CountLow: Number
    open var Time: Number
    open fun clone(): ParticleBurst

    companion object {
        fun C(Other: UObject): ParticleBurst
        fun C(Other: Any): ParticleBurst
    }
}

external object EParticleSubUVInterpMethod {
    var PSUVIM_None: String /* "PSUVIM_None" */
    var PSUVIM_Linear: String /* "PSUVIM_Linear" */
    var PSUVIM_Linear_Blend: String /* "PSUVIM_Linear_Blend" */
    var PSUVIM_Random: String /* "PSUVIM_Random" */
    var PSUVIM_Random_Blend: String /* "PSUVIM_Random_Blend" */
    var PSUVIM_MAX: String /* "PSUVIM_MAX" */
}

external object EParticleBurstMethod {
    var EPBM_Instant: String /* "EPBM_Instant" */
    var EPBM_Interpolated: String /* "EPBM_Interpolated" */
    var EPBM_MAX: String /* "EPBM_MAX" */
}

external object EOpacitySourceMode {
    var OSM_Alpha: String /* "OSM_Alpha" */
    var OSM_ColorBrightness: String /* "OSM_ColorBrightness" */
    var OSM_RedChannel: String /* "OSM_RedChannel" */
    var OSM_GreenChannel: String /* "OSM_GreenChannel" */
    var OSM_BlueChannel: String /* "OSM_BlueChannel" */
    var OSM_MAX: String /* "OSM_MAX" */
}

external object EEmitterNormalsMode {
    var ENM_CameraFacing: String /* "ENM_CameraFacing" */
    var ENM_Spherical: String /* "ENM_Spherical" */
    var ENM_Cylindrical: String /* "ENM_Cylindrical" */
    var ENM_MAX: String /* "ENM_MAX" */
}

external object EParticleUVFlipMode {
    var None: String /* "None" */
    var FlipUV: String /* "FlipUV" */
    var FlipUOnly: String /* "FlipUOnly" */
    var FlipVOnly: String /* "FlipVOnly" */
    var RandomFlipUV: String /* "RandomFlipUV" */
    var RandomFlipUOnly: String /* "RandomFlipUOnly" */
    var RandomFlipVOnly: String /* "RandomFlipVOnly" */
    var RandomFlipUVIndependent: String /* "RandomFlipUVIndependent" */
    var EParticleUVFlipMode_MAX: String /* "EParticleUVFlipMode_MAX" */
}

external object ESubUVBoundingVertexCount {
    var BVC_FourVertices: String /* "BVC_FourVertices" */
    var BVC_EightVertices: String /* "BVC_EightVertices" */
    var BVC_MAX: String /* "BVC_MAX" */
}

external open class ParticleModuleRequired : ParticleModule {
    constructor()
    constructor(Outer: UObject)
    open var Material: MaterialInterface
    open var MinFacingCameraBlendDistance: Number
    open var MaxFacingCameraBlendDistance: Number
    open var EmitterOrigin: Vector
    open var EmitterRotation: Rotator
    open var ScreenAlignment: String /* "PSA_FacingCameraPosition" | "PSA_Square" | "PSA_Rectangle" | "PSA_Velocity" | "PSA_AwayFromCenter" | "PSA_TypeSpecific" | "PSA_FacingCameraDistanceBlend" | "PSA_MAX" */
    open var bUseLocalSpace: Boolean
    open var bKillOnDeactivate: Boolean
    open var bKillOnCompleted: Boolean
    open var SortMode: String /* "PSORTMODE_None" | "PSORTMODE_ViewProjDepth" | "PSORTMODE_DistanceToView" | "PSORTMODE_Age_OldestFirst" | "PSORTMODE_Age_NewestFirst" | "PSORTMODE_MAX" */
    open var bUseLegacyEmitterTime: Boolean
    open var bRemoveHMDRoll: Boolean
    open var bSupportLargeWorldCoordinates: Boolean
    open var bEmitterDurationUseRange: Boolean
    open var EmitterDuration: Number
    open var SpawnRate: RawDistributionFloat
    open var BurstList: Array<ParticleBurst>
    open var EmitterDelay: Number
    open var EmitterDelayLow: Number
    open var bDelayFirstLoopOnly: Boolean
    open var InterpolationMethod: String /* "PSUVIM_None" | "PSUVIM_Linear" | "PSUVIM_Linear_Blend" | "PSUVIM_Random" | "PSUVIM_Random_Blend" | "PSUVIM_MAX" */
    open var bScaleUV: Boolean
    open var bEmitterDelayUseRange: Boolean
    open var ParticleBurstMethod: String /* "EPBM_Instant" | "EPBM_Interpolated" | "EPBM_MAX" */
    open var bOverrideSystemMacroUV: Boolean
    open var bUseMaxDrawCount: Boolean
    open var OpacitySourceMode: String /* "OSM_Alpha" | "OSM_ColorBrightness" | "OSM_RedChannel" | "OSM_GreenChannel" | "OSM_BlueChannel" | "OSM_MAX" */
    open var EmitterNormalsMode: String /* "ENM_CameraFacing" | "ENM_Spherical" | "ENM_Cylindrical" | "ENM_MAX" */
    open var bOrbitModuleAffectsVelocityAlignment: Boolean
    open var SubImages_Horizontal: Number
    open var SubImages_Vertical: Number
    open var RandomImageTime: Number
    open var RandomImageChanges: Number
    open var MacroUVPosition: Vector
    open var MacroUVRadius: Number
    open var UVFlippingMode: String /* "None" | "FlipUV" | "FlipUOnly" | "FlipVOnly" | "RandomFlipUV" | "RandomFlipUOnly" | "RandomFlipVOnly" | "RandomFlipUVIndependent" | "EParticleUVFlipMode_MAX" */
    open var BoundingMode: String /* "BVC_FourVertices" | "BVC_EightVertices" | "BVC_MAX" */
    open var bDurationRecalcEachLoop: Boolean
    open var NormalsSphereCenter: Vector
    open var AlphaThreshold: Number
    open var EmitterLoops: Number
    open var CutoutTexture: Texture2D
    open var MaxDrawCount: Number
    open var EmitterDurationLow: Number
    open var NormalsCylinderDirection: Vector
    open var NamedMaterialOverrides: Array<String>

    companion object {
        fun Load(ResourceName: String): ParticleModuleRequired
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleRequired
        fun GetDefaultObject(): ParticleModuleRequired
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleRequired
        fun C(Other: UObject): ParticleModuleRequired
        fun C(Other: Any): ParticleModuleRequired
    }
}

external open class ParticleModuleTypeDataBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ParticleModuleTypeDataBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleTypeDataBase
        fun GetDefaultObject(): ParticleModuleTypeDataBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleTypeDataBase
        fun C(Other: UObject): ParticleModuleTypeDataBase
        fun C(Other: Any): ParticleModuleTypeDataBase
    }
}

external open class ParticleModuleSpawnBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)
    open var bProcessSpawnRate: Boolean
    open var bProcessBurstList: Boolean

    companion object {
        fun Load(ResourceName: String): ParticleModuleSpawnBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleSpawnBase
        fun GetDefaultObject(): ParticleModuleSpawnBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleSpawnBase
        fun C(Other: UObject): ParticleModuleSpawnBase
        fun C(Other: Any): ParticleModuleSpawnBase
    }
}

external open class ParticleModuleSpawn : ParticleModuleSpawnBase {
    constructor()
    constructor(Outer: UObject)
    open var Rate: RawDistributionFloat
    open var RateScale: RawDistributionFloat
    open var ParticleBurstMethod: String /* "EPBM_Instant" | "EPBM_Interpolated" | "EPBM_MAX" */
    open var BurstList: Array<ParticleBurst>
    open var BurstScale: RawDistributionFloat
    open var bApplyGlobalSpawnRateScale: Boolean

    companion object {
        fun Load(ResourceName: String): ParticleModuleSpawn
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleSpawn
        fun GetDefaultObject(): ParticleModuleSpawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleSpawn
        fun C(Other: UObject): ParticleModuleSpawn
        fun C(Other: Any): ParticleModuleSpawn
    }
}

external open class ParticleModuleEventBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventBase
        fun GetDefaultObject(): ParticleModuleEventBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventBase
        fun C(Other: UObject): ParticleModuleEventBase
        fun C(Other: Any): ParticleModuleEventBase
    }
}

external object EParticleEventType {
    var EPET_Any: String /* "EPET_Any" */
    var EPET_Spawn: String /* "EPET_Spawn" */
    var EPET_Death: String /* "EPET_Death" */
    var EPET_Collision: String /* "EPET_Collision" */
    var EPET_Burst: String /* "EPET_Burst" */
    var EPET_Blueprint: String /* "EPET_Blueprint" */
    var EPET_MAX: String /* "EPET_MAX" */
}

external open class ParticleModuleEventSendToGame : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventSendToGame
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventSendToGame
        fun GetDefaultObject(): ParticleModuleEventSendToGame
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventSendToGame
        fun C(Other: UObject): ParticleModuleEventSendToGame
        fun C(Other: Any): ParticleModuleEventSendToGame
    }
}

external open class ParticleEvent_GenerateInfo {
    open var Type: String /* "EPET_Any" | "EPET_Spawn" | "EPET_Death" | "EPET_Collision" | "EPET_Burst" | "EPET_Blueprint" | "EPET_MAX" */
    open var Frequency: Number
    open var ParticleFrequency: Number
    open var FirstTimeOnly: Boolean
    open var LastTimeOnly: Boolean
    open var UseReflectedImpactVector: Boolean
    open var bUseOrbitOffset: Boolean
    open var CustomName: String
    open var ParticleModuleEventsToSendToGame: Array<ParticleModuleEventSendToGame>
    open fun clone(): ParticleEvent_GenerateInfo

    companion object {
        fun C(Other: UObject): ParticleEvent_GenerateInfo
        fun C(Other: Any): ParticleEvent_GenerateInfo
    }
}

external open class ParticleModuleEventGenerator : ParticleModuleEventBase {
    constructor()
    constructor(Outer: UObject)
    open var Events: Array<ParticleEvent_GenerateInfo>

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventGenerator
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventGenerator
        fun GetDefaultObject(): ParticleModuleEventGenerator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventGenerator
        fun C(Other: UObject): ParticleModuleEventGenerator
        fun C(Other: Any): ParticleModuleEventGenerator
    }
}

external open class ParticleModuleOrbitBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)
    open var bUseEmitterTime: Boolean

    companion object {
        fun Load(ResourceName: String): ParticleModuleOrbitBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleOrbitBase
        fun GetDefaultObject(): ParticleModuleOrbitBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleOrbitBase
        fun C(Other: UObject): ParticleModuleOrbitBase
        fun C(Other: Any): ParticleModuleOrbitBase
    }
}

external object EOrbitChainMode {
    var EOChainMode_Add: String /* "EOChainMode_Add" */
    var EOChainMode_Scale: String /* "EOChainMode_Scale" */
    var EOChainMode_Link: String /* "EOChainMode_Link" */
    var EOChainMode_MAX: String /* "EOChainMode_MAX" */
}

external open class DistributionVector : Distribution {
    constructor()
    constructor(Outer: UObject)
    open var bCanBeBaked: Boolean
    open var bIsDirty: Boolean
    open var bBakedDataSuccesfully: Boolean

    companion object {
        fun Load(ResourceName: String): DistributionVector
        fun Find(Outer: UObject, ResourceName: String): DistributionVector
        fun GetDefaultObject(): DistributionVector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DistributionVector
        fun C(Other: UObject): DistributionVector
        fun C(Other: Any): DistributionVector
    }
}

external open class RawDistributionVector : RawDistribution {
    open var MinValue: Number
    open var MaxValue: Number
    open var MinValueVec: Vector
    open var MaxValueVec: Vector
    open var Distribution: DistributionVector
    override fun clone(): RawDistributionVector

    companion object {
        fun C(Other: UObject): RawDistributionVector
        fun C(Other: Any): RawDistributionVector
    }
}

external open class OrbitOptions {
    open var bProcessDuringSpawn: Boolean
    open var bProcessDuringUpdate: Boolean
    open var bUseEmitterTime: Boolean
    open fun clone(): OrbitOptions

    companion object {
        fun C(Other: UObject): OrbitOptions
        fun C(Other: Any): OrbitOptions
    }
}

external open class ParticleModuleOrbit : ParticleModuleOrbitBase {
    constructor()
    constructor(Outer: UObject)
    open var ChainMode: String /* "EOChainMode_Add" | "EOChainMode_Scale" | "EOChainMode_Link" | "EOChainMode_MAX" */
    open var OffsetAmount: RawDistributionVector
    open var OffsetOptions: OrbitOptions
    open var RotationAmount: RawDistributionVector
    open var RotationOptions: OrbitOptions
    open var RotationRateAmount: RawDistributionVector
    open var RotationRateOptions: OrbitOptions

    companion object {
        fun Load(ResourceName: String): ParticleModuleOrbit
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleOrbit
        fun GetDefaultObject(): ParticleModuleOrbit
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleOrbit
        fun C(Other: UObject): ParticleModuleOrbit
        fun C(Other: Any): ParticleModuleOrbit
    }
}

external open class ParticleModuleEventReceiverBase : ParticleModuleEventBase {
    constructor()
    constructor(Outer: UObject)
    open var EventGeneratorType: String /* "EPET_Any" | "EPET_Spawn" | "EPET_Death" | "EPET_Collision" | "EPET_Burst" | "EPET_Blueprint" | "EPET_MAX" */
    open var EventName: String

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventReceiverBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventReceiverBase
        fun GetDefaultObject(): ParticleModuleEventReceiverBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventReceiverBase
        fun C(Other: UObject): ParticleModuleEventReceiverBase
        fun C(Other: Any): ParticleModuleEventReceiverBase
    }
}

external open class ParticleLODLevel : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Level: Number
    open var bEnabled: Boolean
    open var RequiredModule: ParticleModuleRequired
    open var Modules: Array<ParticleModule>
    open var TypeDataModule: ParticleModuleTypeDataBase
    open var SpawnModule: ParticleModuleSpawn
    open var EventGenerator: ParticleModuleEventGenerator
    open var SpawningModules: Array<ParticleModuleSpawnBase>
    open var SpawnModules: Array<ParticleModule>
    open var UpdateModules: Array<ParticleModule>
    open var OrbitModules: Array<ParticleModuleOrbit>
    open var EventReceiverModules: Array<ParticleModuleEventReceiverBase>
    open var ConvertedModules: Boolean
    open var PeakActiveParticles: Number

    companion object {
        fun Load(ResourceName: String): ParticleLODLevel
        fun Find(Outer: UObject, ResourceName: String): ParticleLODLevel
        fun GetDefaultObject(): ParticleLODLevel
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleLODLevel
        fun C(Other: UObject): ParticleLODLevel
        fun C(Other: Any): ParticleLODLevel
    }
}

external open class ParticleEmitter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var EmitterName: String
    open var SubUVDataOffset: Number
    open var EmitterRenderMode: String /* "ERM_Normal" | "ERM_Point" | "ERM_Cross" | "ERM_LightsOnly" | "ERM_None" | "ERM_MAX" */
    open var SignificanceLevel: String /* "Low" | "Medium" | "High" | "Critical" | "Num" | "EParticleSignificanceLevel_MAX" */
    open var bUseLegacySpawningBehavior: Boolean
    open var ConvertedModules: Boolean
    open var bIsSoloing: Boolean
    open var bCookedOut: Boolean
    open var bDisabledLODsKeepEmitterAlive: Boolean
    open var bDisableWhenInsignficant: Boolean
    open var bCollapsed: Boolean
    open var DetailMode: String /* "DM_Low" | "DM_Medium" | "DM_High" | "DM_MAX" */
    open var EmitterEditorColor: Color
    open var LODLevels: Array<ParticleLODLevel>
    open var PeakActiveParticles: Number
    open var InitialAllocationCount: Number
    open var QualityLevelSpawnRateScale: Number
    open var DetailModeBitmask: Any
    open var DetailModeDisplay: String

    companion object {
        fun Load(ResourceName: String): ParticleEmitter
        fun Find(Outer: UObject, ResourceName: String): ParticleEmitter
        fun GetDefaultObject(): ParticleEmitter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleEmitter
        fun C(Other: UObject): ParticleEmitter
        fun C(Other: Any): ParticleEmitter
    }
}

external open class CurveEdEntry {
    open var CurveObject: UObject
    open var CurveColor: Color
    open var CurveName: String
    open var bHideCurve: Number
    open var bColorCurve: Number
    open var bFloatingPointColorCurve: Number
    open var bClamp: Number
    open var ClampLow: Number
    open var ClampHigh: Number
    open fun clone(): CurveEdEntry

    companion object {
        fun C(Other: UObject): CurveEdEntry
        fun C(Other: Any): CurveEdEntry
    }
}

external open class CurveEdTab {
    open var TabName: String
    open var Curves: Array<CurveEdEntry>
    open var ViewStartInput: Number
    open var ViewEndInput: Number
    open var ViewStartOutput: Number
    open var ViewEndOutput: Number
    open fun clone(): CurveEdTab

    companion object {
        fun C(Other: UObject): CurveEdTab
        fun C(Other: Any): CurveEdTab
    }
}

external open class InterpCurveEdSetup : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Tabs: Array<CurveEdTab>
    open var ActiveTab: Number

    companion object {
        fun Load(ResourceName: String): InterpCurveEdSetup
        fun Find(Outer: UObject, ResourceName: String): InterpCurveEdSetup
        fun GetDefaultObject(): InterpCurveEdSetup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpCurveEdSetup
        fun C(Other: UObject): InterpCurveEdSetup
        fun C(Other: Any): InterpCurveEdSetup
    }
}

external open class ParticleSystemLOD {
    open fun clone(): ParticleSystemLOD

    companion object {
        fun C(Other: UObject): ParticleSystemLOD
        fun C(Other: Any): ParticleSystemLOD
    }
}

external object EParticleSystemUpdateMode {
    var EPSUM_RealTime: String /* "EPSUM_RealTime" */
    var EPSUM_FixedTime: String /* "EPSUM_FixedTime" */
    var EPSUM_MAX: String /* "EPSUM_MAX" */
}

external object ParticleSystemLODMethod {
    var PARTICLESYSTEMLODMETHOD_Automatic: String /* "PARTICLESYSTEMLODMETHOD_Automatic" */
    var PARTICLESYSTEMLODMETHOD_DirectSet: String /* "PARTICLESYSTEMLODMETHOD_DirectSet" */
    var PARTICLESYSTEMLODMETHOD_ActivateAutomatic: String /* "PARTICLESYSTEMLODMETHOD_ActivateAutomatic" */
    var PARTICLESYSTEMLODMETHOD_MAX: String /* "PARTICLESYSTEMLODMETHOD_MAX" */
}

external object EParticleSystemInsignificanceReaction {
    var Auto: String /* "Auto" */
    var Complete: String /* "Complete" */
    var DisableTick: String /* "DisableTick" */
    var DisableTickAndKill: String /* "DisableTickAndKill" */
    var Num: String /* "Num" */
    var EParticleSystemInsignificanceReaction_MAX: String /* "EParticleSystemInsignificanceReaction_MAX" */
}

external object EParticleSystemOcclusionBoundsMethod {
    var EPSOBM_None: String /* "EPSOBM_None" */
    var EPSOBM_ParticleBounds: String /* "EPSOBM_ParticleBounds" */
    var EPSOBM_CustomBounds: String /* "EPSOBM_CustomBounds" */
    var EPSOBM_MAX: String /* "EPSOBM_MAX" */
}

external open class LODSoloTrack {
    open var SoloEnableSetting: Array<Number>
    open fun clone(): LODSoloTrack

    companion object {
        fun C(Other: UObject): LODSoloTrack
        fun C(Other: Any): LODSoloTrack
    }
}

external open class NamedEmitterMaterial {
    open var Name: String
    open var Material: MaterialInterface
    open fun clone(): NamedEmitterMaterial

    companion object {
        fun C(Other: UObject): NamedEmitterMaterial
        fun C(Other: Any): NamedEmitterMaterial
    }
}

external object EPSCPoolMethod {
    var None: String /* "None" */
    var AutoRelease: String /* "AutoRelease" */
    var ManualRelease: String /* "ManualRelease" */
    var ManualRelease_OnComplete: String /* "ManualRelease_OnComplete" */
    var FreeInPool: String /* "FreeInPool" */
    var EPSCPoolMethod_MAX: String /* "EPSCPoolMethod_MAX" */
}

external open class ParticleSystem : FXSystemAsset {
    constructor()
    constructor(Outer: UObject)
    open var UpdateTime_FPS: Number
    open var UpdateTime_Delta: Number
    open var WarmupTime: Number
    open var WarmupTickRate: Number
    open var Emitters: Array<ParticleEmitter>
    open var PreviewComponent: ParticleSystemComponent
    open var ThumbnailAngle: Rotator
    open var ThumbnailDistance: Number
    open var ThumbnailWarmup: Number
    open var CurveEdSetup: InterpCurveEdSetup
    open var LODDistanceCheckTime: Number
    open var MacroUVRadius: Number
    open var LODDistances: Array<Number>
    open var EditorLODSetting: Number
    open var LODSettings: Array<ParticleSystemLOD>
    open var FixedRelativeBoundingBox: Box
    open var SecondsBeforeInactive: Number
    open var FloorMesh: String
    open var FloorPosition: Vector
    open var FloorRotation: Rotator
    open var FloorScale: Number
    open var FloorScale3D: Vector
    open var BackgroundColor: Color
    open var Delay: Number
    open var DelayLow: Number
    open var bOrientZAxisTowardCamera: Boolean
    open var bUseFixedRelativeBoundingBox: Boolean
    open var bShouldResetPeakCounts: Boolean
    open var bHasPhysics: Boolean
    open var bUseRealtimeThumbnail: Boolean
    open var ThumbnailImageOutOfDate: Boolean
    open var ThumbnailImage: Texture2D
    open var bUseDelayRange: Boolean
    open var bAllowManagedTicking: Boolean
    open var bAutoDeactivate: Boolean
    open var bRegenerateLODDuplicate: Boolean
    open var SystemUpdateMode: String /* "EPSUM_RealTime" | "EPSUM_FixedTime" | "EPSUM_MAX" */
    open var LODMethod: String /* "PARTICLESYSTEMLODMETHOD_Automatic" | "PARTICLESYSTEMLODMETHOD_DirectSet" | "PARTICLESYSTEMLODMETHOD_ActivateAutomatic" | "PARTICLESYSTEMLODMETHOD_MAX" */
    open var InsignificantReaction: String /* "Auto" | "Complete" | "DisableTick" | "DisableTickAndKill" | "Num" | "EParticleSystemInsignificanceReaction_MAX" */
    open var OcclusionBoundsMethod: String /* "EPSOBM_None" | "EPSOBM_ParticleBounds" | "EPSOBM_CustomBounds" | "EPSOBM_MAX" */
    open var MaxSignificanceLevel: String /* "Low" | "Medium" | "High" | "Critical" | "Num" | "EParticleSignificanceLevel_MAX" */
    open var MinTimeBetweenTicks: Any
    open var InsignificanceDelay: Number
    open var MacroUVPosition: Vector
    open var CustomOcclusionBounds: Box
    open var SoloTracking: Array<LODSoloTrack>
    open var NamedMaterialSlots: Array<NamedEmitterMaterial>
    open fun ContainsEmitterType(TypeData: UnrealEngineClass): Boolean
    open fun SpawnEmitterAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, Scale: Vector, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */, bAutoActivate: Boolean): ParticleSystemComponent

    companion object {
        fun Load(ResourceName: String): ParticleSystem
        fun Find(Outer: UObject, ResourceName: String): ParticleSystem
        fun GetDefaultObject(): ParticleSystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleSystem
        fun C(Other: UObject): ParticleSystem
        fun C(Other: Any): ParticleSystem
        fun SpawnEmitterAttached(EmitterTemplate: ParticleSystem, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, Scale: Vector, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */, bAutoActivate: Boolean): ParticleSystemComponent
    }
}

external object EParticleSysParamType {
    var PSPT_None: String /* "PSPT_None" */
    var PSPT_Scalar: String /* "PSPT_Scalar" */
    var PSPT_ScalarRand: String /* "PSPT_ScalarRand" */
    var PSPT_Vector: String /* "PSPT_Vector" */
    var PSPT_VectorRand: String /* "PSPT_VectorRand" */
    var PSPT_Color: String /* "PSPT_Color" */
    var PSPT_Actor: String /* "PSPT_Actor" */
    var PSPT_Material: String /* "PSPT_Material" */
    var PSPT_VectorUnitRand: String /* "PSPT_VectorUnitRand" */
    var PSPT_MAX: String /* "PSPT_MAX" */
}

external open class ParticleSysParam {
    open var Name: String
    open var ParamType: String /* "PSPT_None" | "PSPT_Scalar" | "PSPT_ScalarRand" | "PSPT_Vector" | "PSPT_VectorRand" | "PSPT_Color" | "PSPT_Actor" | "PSPT_Material" | "PSPT_VectorUnitRand" | "PSPT_MAX" */
    open var Scalar: Number
    open var Scalar_Low: Number
    open var Vector: Vector
    open var Vector_Low: Vector
    open var Color: Color
    open var Actor: Actor
    open var Material: MaterialInterface
    open fun clone(): ParticleSysParam

    companion object {
        fun C(Other: UObject): ParticleSysParam
        fun C(Other: Any): ParticleSysParam
    }
}

external open class ParticleSystemReplay : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ClipIDNumber: Number

    companion object {
        fun Load(ResourceName: String): ParticleSystemReplay
        fun Find(Outer: UObject, ResourceName: String): ParticleSystemReplay
        fun GetDefaultObject(): ParticleSystemReplay
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleSystemReplay
        fun C(Other: UObject): ParticleSystemReplay
        fun C(Other: Any): ParticleSystemReplay
    }
}

external object ETrailWidthMode {
    var ETrailWidthMode_FromCentre: String /* "ETrailWidthMode_FromCentre" */
    var ETrailWidthMode_FromFirst: String /* "ETrailWidthMode_FromFirst" */
    var ETrailWidthMode_FromSecond: String /* "ETrailWidthMode_FromSecond" */
    var ETrailWidthMode_MAX: String /* "ETrailWidthMode_MAX" */
}

external interface `T$244` {
    var OutTangentPoint: Vector
    var `$`: Boolean
}

external interface `T$245` {
    var OutTargetStrength: Number
    var `$`: Boolean
}

external interface `T$246` {
    var OutTargetPoint: Vector
    var `$`: Boolean
}

external interface `T$247` {
    var OutSourceStrength: Number
    var `$`: Boolean
}

external interface `T$248` {
    var OutSourcePoint: Vector
    var `$`: Boolean
}

external interface `T$249` {
    var OutEndPoint: Vector
    var `$`: Boolean
}

external open class ParticleSystemComponent : FXSystemComponent {
    constructor()
    constructor(Outer: UObject)
    open var Template: ParticleSystem
    open var EmitterMaterials: Array<MaterialInterface>
    open var SkelMeshComponents: Array<SkeletalMeshComponent>
    open var bResetOnDetach: Boolean
    open var bUpdateOnDedicatedServer: Boolean
    open var bAllowRecycling: Boolean
    open var bAutoManageAttachment: Boolean
    open var bAutoAttachWeldSimulatedBodies: Boolean
    open var bWarmingUp: Boolean
    open var bOverrideLODMethod: Boolean
    open var bSkipUpdateDynamicDataDuringTick: Boolean
    open var LODMethod: String /* "PARTICLESYSTEMLODMETHOD_Automatic" | "PARTICLESYSTEMLODMETHOD_DirectSet" | "PARTICLESYSTEMLODMETHOD_ActivateAutomatic" | "PARTICLESYSTEMLODMETHOD_MAX" */
    open var RequiredSignificance: String /* "Low" | "Medium" | "High" | "Critical" | "Num" | "EParticleSignificanceLevel_MAX" */
    open var InstanceParameters: Array<ParticleSysParam>
    open var OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, Location: Vector, Velocity: Vector) -> Unit>
    open var OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleCount: Number) -> Unit>
    open var OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector) -> Unit>
    open var OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: String, PhysMat: PhysicalMaterial) -> Unit>
    open var bOldPositionValid: Boolean
    open var OldPosition: Vector
    open var PartSysVelocity: Vector
    open var WarmupTime: Number
    open var WarmupTickRate: Number
    open var SecondsBeforeInactive: Number
    open var MaxTimeBeforeForceUpdateTransform: Number
    open var EditorLODLevel: Number
    open var EditorDetailMode: Number
    open var ReplayClips: Array<ParticleSystemReplay>
    open var CustomTimeDilation: Number
    open var AutoAttachParent: Any
    open var AutoAttachSocketName: String
    open var AutoAttachLocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */
    open var AutoAttachLocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachRotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var OnSystemFinished: UnrealEngineMulticastDelegate<(PSystem: ParticleSystemComponent) -> Unit>
    open fun SetTrailSourceData(InFirstSocketName: String, InSecondSocketName: String, InWidthMode: String /* "ETrailWidthMode_FromCentre" | "ETrailWidthMode_FromFirst" | "ETrailWidthMode_FromSecond" | "ETrailWidthMode_MAX" */, InWidth: Number)
    open fun SetTemplate(NewTemplate: ParticleSystem)
    open fun SetMaterialParameter(ParameterName: String, Param: MaterialInterface)
    open fun SetBeamTargetTangent(EmitterIndex: Number, NewTangentPoint: Vector, TargetIndex: Number)
    open fun SetBeamTargetStrength(EmitterIndex: Number, NewTargetStrength: Number, TargetIndex: Number)
    open fun SetBeamTargetPoint(EmitterIndex: Number, NewTargetPoint: Vector, TargetIndex: Number)
    open fun SetBeamSourceTangent(EmitterIndex: Number, NewTangentPoint: Vector, SourceIndex: Number)
    open fun SetBeamSourceStrength(EmitterIndex: Number, NewSourceStrength: Number, SourceIndex: Number)
    open fun SetBeamSourcePoint(EmitterIndex: Number, NewSourcePoint: Vector, SourceIndex: Number)
    open fun SetBeamEndPoint(EmitterIndex: Number, NewEndPoint: Vector)
    open fun SetAutoAttachParams(Parent: SceneComponent, SocketName: String, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */)
    open fun GetNumActiveParticles(): Number
    open fun GetNamedMaterial(InName: String): MaterialInterface
    open fun GetBeamTargetTangent(EmitterIndex: Number, TargetIndex: Number, OutTangentPoint: Vector = definedExternally): `T$244`
    open fun GetBeamTargetStrength(EmitterIndex: Number, TargetIndex: Number, OutTargetStrength: Number = definedExternally): `T$245`
    open fun GetBeamTargetPoint(EmitterIndex: Number, TargetIndex: Number, OutTargetPoint: Vector = definedExternally): `T$246`
    open fun GetBeamSourceTangent(EmitterIndex: Number, SourceIndex: Number, OutTangentPoint: Vector = definedExternally): `T$244`
    open fun GetBeamSourceStrength(EmitterIndex: Number, SourceIndex: Number, OutSourceStrength: Number = definedExternally): `T$247`
    open fun GetBeamSourcePoint(EmitterIndex: Number, SourceIndex: Number, OutSourcePoint: Vector = definedExternally): `T$248`
    open fun GetBeamEndPoint(EmitterIndex: Number, OutEndPoint: Vector = definedExternally): `T$249`
    open fun GenerateParticleEvent(InEventName: String, InEmitterTime: Number, InLocation: Vector, InDirection: Vector, InVelocity: Vector)
    open fun EndTrails()
    open fun CreateNamedDynamicMaterialInstance(InName: String, SourceMaterial: MaterialInterface): MaterialInstanceDynamic
    open fun BeginTrails(InFirstSocketName: String, InSecondSocketName: String, InWidthMode: String /* "ETrailWidthMode_FromCentre" | "ETrailWidthMode_FromFirst" | "ETrailWidthMode_FromSecond" | "ETrailWidthMode_MAX" */, InWidth: Number)

    companion object {
        fun Load(ResourceName: String): ParticleSystemComponent
        fun Find(Outer: UObject, ResourceName: String): ParticleSystemComponent
        fun GetDefaultObject(): ParticleSystemComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleSystemComponent
        fun C(Other: UObject): ParticleSystemComponent
        fun C(Other: Any): ParticleSystemComponent
    }
}

external open class Emitter(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var ParticleSystemComponent: ParticleSystemComponent
    open var bDestroyOnSystemFinish: Boolean
    open var bPostUpdateTickGroup: Boolean
    open var bCurrentlyActive: Boolean
    open var OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, Location: Vector, Velocity: Vector) -> Unit>
    open var OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleCount: Number) -> Unit>
    open var OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector) -> Unit>
    open var OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: String, PhysMat: PhysicalMaterial) -> Unit>
    open var SpriteComponent: BillboardComponent
    open var ArrowComponent: ArrowComponent
    open fun ToggleActive()
    open fun SetVectorParameter(ParameterName: String, Param: Vector)
    open fun SetTemplate(NewTemplate: ParticleSystem)
    open fun SetMaterialParameter(ParameterName: String, Param: MaterialInterface)
    open fun SetFloatParameter(ParameterName: String, Param: Number)
    open fun SetColorParameter(ParameterName: String, Param: LinearColor)
    open fun SetActorParameter(ParameterName: String, Param: Actor)
    open fun OnRep_bCurrentlyActive()
    open fun OnParticleSystemFinished(FinishedComponent: ParticleSystemComponent)
    open fun IsActive(): Boolean
    open fun Deactivate()
    open fun Activate()

    companion object {
        fun GetDefaultObject(): Emitter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Emitter
        fun C(Other: UObject): Emitter
        fun C(Other: Any): Emitter
    }
}

external open class EmitterCameraLensEffectBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Emitter {
    open var PS_CameraEffect: ParticleSystem
    open var BaseCamera: PlayerCameraManager
    open var RelativeTransform: Transform
    open var BaseFOV: Number
    open var bAllowMultipleInstances: Boolean
    open var bResetWhenRetriggered: Boolean
    open var EmittersToTreatAsSame: Array<UnrealEngineClass>
    open var DistFromCamera: Number

    companion object {
        fun GetDefaultObject(): EmitterCameraLensEffectBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EmitterCameraLensEffectBase
        fun C(Other: UObject): EmitterCameraLensEffectBase
        fun C(Other: Any): EmitterCameraLensEffectBase
    }
}

external interface `T$250` {
    var ResultCameraLocation: Vector
}

external interface `T$251` {
    var NewCameraLocation: Vector
    var NewCameraRotation: Rotator
    var NewCameraFOV: Number
    var `$`: Boolean
}

external open class PlayerCameraManager(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var PCOwner: PlayerController
    open var TransformComponent: SceneComponent
    open var DefaultFOV: Number
    open var DefaultOrthoWidth: Number
    open var DefaultAspectRatio: Number
    open var CameraCache: CameraCacheEntry
    open var LastFrameCameraCache: CameraCacheEntry
    open var ViewTarget: TViewTarget
    open var PendingViewTarget: TViewTarget
    open var CameraCachePrivate: CameraCacheEntry
    open var LastFrameCameraCachePrivate: CameraCacheEntry
    open var ModifierList: Array<CameraModifier>
    open var DefaultModifiers: Array<UnrealEngineClass>
    open var FreeCamDistance: Number
    open var FreeCamOffset: Vector
    open var ViewTargetOffset: Vector
    open var OnAudioFadeChangeEvent: UnrealEngineMulticastDelegate<(bFadeOut: Boolean, FadeTime: Number) -> Unit>
    open var CameraLensEffects: Array<Any>
    open var CachedCameraShakeMod: CameraModifier_CameraShake
    open var AnimInstPool: CameraAnimInst
    open var PostProcessBlendCache: Array<PostProcessSettings>
    open var ActiveAnims: Array<CameraAnimInst>
    open var FreeAnims: Array<CameraAnimInst>
    open var AnimCameraActor: CameraActor
    open var bIsOrthographic: Boolean
    open var bDefaultConstrainAspectRatio: Boolean
    open var bClientSimulatingViewTarget: Boolean
    open var bUseClientSideCameraUpdates: Boolean
    open var bGameCameraCutThisFrame: Boolean
    open var ViewPitchMin: Number
    open var ViewPitchMax: Number
    open var ViewYawMin: Number
    open var ViewYawMax: Number
    open var ViewRollMin: Number
    open var ViewRollMax: Number
    open var ServerUpdateCameraTimeout: Number
    open fun SwapPendingViewTargetWhenUsingClientSideCameraUpdates()
    open fun StopCameraShake(ShakeInstance: CameraShakeBase, bImmediately: Boolean)
    open fun StopCameraFade()
    open fun StopCameraAnimInst(AnimInst: CameraAnimInst, bImmediate: Boolean)
    open fun StopAllInstancesOfCameraShakeFromSource(Shake: UnrealEngineClass, SourceComponent: CameraShakeSourceComponent, bImmediately: Boolean)
    open fun StopAllInstancesOfCameraShake(Shake: UnrealEngineClass, bImmediately: Boolean)
    open fun StopAllInstancesOfCameraAnim(Anim: CameraAnim, bImmediate: Boolean)
    open fun StopAllCameraShakesFromSource(SourceComponent: CameraShakeSourceComponent, bImmediately: Boolean)
    open fun StopAllCameraShakes(bImmediately: Boolean)
    open fun StopAllCameraAnims(bImmediate: Boolean)
    open fun StartCameraShakeFromSource(ShakeClass: UnrealEngineClass, SourceComponent: CameraShakeSourceComponent, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator): CameraShakeBase
    open fun StartCameraShake(ShakeClass: UnrealEngineClass, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator): CameraShakeBase
    open fun StartCameraFade(FromAlpha: Number, ToAlpha: Number, Duration: Number, Color: LinearColor, bShouldFadeAudio: Boolean, bHoldWhenFinished: Boolean)
    open fun SetManualCameraFade(InFadeAmount: Number, Color: LinearColor, bInFadeAudio: Boolean)
    open fun SetGameCameraCutThisFrame()
    open fun RemoveCameraModifier(ModifierToRemove: CameraModifier): Boolean
    open fun RemoveCameraLensEffect(Emitter: EmitterCameraLensEffectBase)
    open fun PlayCameraAnim(Anim: CameraAnim, Rate: Number, Scale: Number, BlendInTime: Number, BlendOutTime: Number, bLoop: Boolean, bRandomStartTime: Boolean, Duration: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator): CameraAnimInst
    open fun PhotographyCameraModify(NewCameraLocation: Vector, PreviousCameraLocation: Vector, OriginalCameraLocation: Vector, ResultCameraLocation: Vector = definedExternally): `T$250`
    open fun OnPhotographySessionStart()
    open fun OnPhotographySessionEnd()
    open fun OnPhotographyMultiPartCaptureStart()
    open fun OnPhotographyMultiPartCaptureEnd()
    open fun GetOwningPlayerController(): PlayerController
    open fun GetFOVAngle(): Number
    open fun GetCameraRotation(): Rotator
    open fun GetCameraLocation(): Vector
    open fun FindCameraModifierByClass(ModifierClass: UnrealEngineClass): CameraModifier
    open fun ClearCameraLensEffects()
    open fun BlueprintUpdateCamera(CameraTarget: Actor, NewCameraLocation: Vector = definedExternally, NewCameraRotation: Rotator = definedExternally, NewCameraFOV: Number = definedExternally): `T$251`
    open fun AddNewCameraModifier(ModifierClass: UnrealEngineClass): CameraModifier
    open fun AddCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass): EmitterCameraLensEffectBase

    companion object {
        fun GetDefaultObject(): PlayerCameraManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerCameraManager
        fun C(Other: UObject): PlayerCameraManager
        fun C(Other: Any): PlayerCameraManager
    }
}

external open class DrawFrustumComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var bFrustumEnabled: Boolean
    open var FrustumColor: Color
    open var FrustumAngle: Number
    open var FrustumAspectRatio: Number
    open var FrustumStartDist: Number
    open var FrustumEndDist: Number
    open var Texture: Texture

    companion object {
        fun Load(ResourceName: String): DrawFrustumComponent
        fun Find(Outer: UObject, ResourceName: String): DrawFrustumComponent
        fun GetDefaultObject(): DrawFrustumComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DrawFrustumComponent
        fun C(Other: UObject): DrawFrustumComponent
        fun C(Other: Any): DrawFrustumComponent
    }
}

external open class DebugCameraController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : PlayerController {
    open var bShowSelectedInfo: Boolean
    open var bIsFrozenRendering: Boolean
    open var bIsOrbitingSelectedActor: Boolean
    open var bOrbitPivotUseCenter: Boolean
    open var bEnableBufferVisualization: Boolean
    open var bEnableBufferVisualizationFullMode: Boolean
    open var bIsBufferVisualizationInputSetup: Boolean
    open var bLastDisplayEnabled: Boolean
    open var DrawFrustum: DrawFrustumComponent
    open var SelectedActor: Actor
    open var SelectedComponent: PrimitiveComponent
    open var SelectedHitPoint: HitResult
    open var OriginalControllerRef: PlayerController
    open var OriginalPlayer: Player
    open var SpeedScale: Number
    open var InitialMaxSpeed: Number
    open var InitialAccel: Number
    open var InitialDecel: Number
    open fun ToggleDisplay()
    open fun ShowDebugSelectedInfo()
    open fun SetPawnMovementSpeedScale(NewSpeedScale: Number)
    open fun OnDeactivate(RestoredPC: PlayerController)
    open fun OnActorSelected(NewSelectedActor: Actor, SelectHitLocation: Vector, SelectHitNormal: Vector, Hit: HitResult)
    open fun OnActivate(OriginalPC: PlayerController)
    open fun GetSelectedActor(): Actor

    companion object {
        fun GetDefaultObject(): DebugCameraController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DebugCameraController
        fun C(Other: UObject): DebugCameraController
        fun C(Other: Any): DebugCameraController
    }
}

external open class CheatManagerExtension : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun GetPlayerController(): PlayerController

    companion object {
        fun Load(ResourceName: String): CheatManagerExtension
        fun Find(Outer: UObject, ResourceName: String): CheatManagerExtension
        fun GetDefaultObject(): CheatManagerExtension
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CheatManagerExtension
        fun C(Other: UObject): CheatManagerExtension
        fun C(Other: Any): CheatManagerExtension
    }
}

external object EEndPlayReason {
    var Destroyed: String /* "Destroyed" */
    var LevelTransition: String /* "LevelTransition" */
    var EndPlayInEditor: String /* "EndPlayInEditor" */
    var RemovedFromWorld: String /* "RemovedFromWorld" */
    var Quit: String /* "Quit" */
    var EEndPlayReason_MAX: String /* "EEndPlayReason_MAX" */
}

external interface `T$252` {
    var GoString: String
    var LocString: String
}

external open class CheatManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DebugCameraControllerRef: DebugCameraController
    open var DebugCameraControllerClass: UnrealEngineClass
    open var CheatManagerExtensions: Array<CheatManagerExtension>
    open fun Walk()
    open fun ViewSelf()
    open fun ViewPlayer(S: String)
    open fun ViewClass(DesiredClass: UnrealEngineClass)
    open fun ViewActor(ActorName: String)
    open fun UpdateSafeArea()
    open fun ToggleServerStatReplicatorUpdateStatNet()
    open fun ToggleServerStatReplicatorClientOverwrite()
    open fun ToggleDebugCamera()
    open fun ToggleAILogging()
    open fun TestCollisionDistance()
    open fun Teleport()
    open fun Summon(ClassName: String)
    open fun StreamLevelOut(PackageName: String)
    open fun StreamLevelIn(PackageName: String)
    open fun SpawnServerStatReplicator()
    open fun Slomo(NewTimeDilation: Number)
    open fun SetWorldOrigin()
    open fun SetMouseSensitivityToDefault()
    open fun ServerToggleAILogging()
    open fun InitCheatManager()
    open fun EndPlay()
    open fun PlayersOnly()
    open fun OnPlayerEndPlayed(Player: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)
    open fun OnlyLoadLevel(PackageName: String)
    open fun LogLoc()
    open fun InvertMouse()
    open fun God()
    open fun Ghost()
    open fun GetPlayerController(): PlayerController
    open fun FreezeFrame(Delay: Number)
    open fun Fly()
    open fun FlushLog()
    open fun EnableDebugCamera()
    open fun DumpVoiceMutingState()
    open fun DumpPartyState()
    open fun DumpOnlineSessionState()
    open fun DumpChatState()
    open fun DisableDebugCamera()
    open fun DestroyTarget()
    open fun DestroyServerStatReplicator()
    open fun DestroyPawns(aClass: UnrealEngineClass)
    open fun DestroyAllPawnsExceptTarget()
    open fun DestroyAll(aClass: UnrealEngineClass)
    open fun DebugCapsuleSweepSize(HalfHeight: Number, Radius: Number)
    open fun DebugCapsuleSweepPawn()
    open fun DebugCapsuleSweepComplex(bTraceComplex: Boolean)
    open fun DebugCapsuleSweepClear()
    open fun DebugCapsuleSweepChannel(Channel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */)
    open fun DebugCapsuleSweepCapture()
    open fun DebugCapsuleSweep()
    open fun DamageTarget(DamageAmount: Number)
    open fun CheatScript(ScriptName: String)
    open fun ChangeSize(F: Number)
    open fun BugItStringCreator(ViewLocation: Vector, ViewRotation: Rotator, GoString: String = definedExternally, LocString: String = definedExternally): `T$252`
    open fun BugItGo(X: Number, Y: Number, Z: Number, Pitch: Number, Yaw: Number, Roll: Number)
    open fun BugIt(ScreenShotDescription: String)

    companion object {
        fun Load(ResourceName: String): CheatManager
        fun Find(Outer: UObject, ResourceName: String): CheatManager
        fun GetDefaultObject(): CheatManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CheatManager
        fun C(Other: UObject): CheatManager
        fun C(Other: Any): CheatManager
    }
}

external object EUINavigationAction {
    var Accept: String /* "Accept" */
    var Back: String /* "Back" */
    var Num: String /* "Num" */
    var Invalid: String /* "Invalid" */
    var EUINavigationAction_MAX: String /* "EUINavigationAction_MAX" */
}

external object EControllerHand {
    var Left: String /* "Left" */
    var Right: String /* "Right" */
    var AnyHand: String /* "AnyHand" */
    var Pad: String /* "Pad" */
    var ExternalCamera: String /* "ExternalCamera" */
    var Gun: String /* "Gun" */
    var HMD: String /* "HMD" */
    var Special_1: String /* "Special_1" */
    var Special_2: String /* "Special_2" */
    var Special_3: String /* "Special_3" */
    var Special_4: String /* "Special_4" */
    var Special_5: String /* "Special_5" */
    var Special_6: String /* "Special_6" */
    var Special_7: String /* "Special_7" */
    var Special_8: String /* "Special_8" */
    var Special_9: String /* "Special_9" */
    var Special_10: String /* "Special_10" */
    var Special_11: String /* "Special_11" */
    var ControllerHand_Count: String /* "ControllerHand_Count" */
    var EControllerHand_MAX: String /* "EControllerHand_MAX" */
}

external interface `T$253` {
    var InteractionProfile: String
    var Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */
    var MotionSource: String
    var Indentifier: String
    var Component: String
}

external open class Key {
    open var KeyName: String
    open fun clone(): Key
    open fun Equal(B: Key): Boolean
    open fun GetKeyDisplayName(): String
    open fun GetKeyNavigationAction(): String /* "Accept" | "Back" | "Num" | "Invalid" | "EUINavigationAction_MAX" */
    open fun IsAnalog(): Boolean
    open fun IsAxis1D(): Boolean
    open fun IsAxis2D(): Boolean
    open fun IsAxis3D(): Boolean
    open fun IsButtonAxis(): Boolean
    open fun IsDigital(): Boolean
    open fun IsGamepadKey(): Boolean
    open fun IsKeyboardKey(): Boolean
    open fun IsModifierKey(): Boolean
    open fun IsMouseButton(): Boolean
    open fun IsValidKey(): Boolean
    open fun IsVectorAxis(): Boolean
    open fun BreakKey(InteractionProfile: String = definedExternally, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */ = definedExternally, MotionSource: String = definedExternally, Indentifier: String = definedExternally, Component: String = definedExternally): `T$253`

    companion object {
        fun C(Other: UObject): Key
        fun C(Other: Any): Key
        fun Equal(A: Key, B: Key): Boolean
        fun GetKeyDisplayName(Key: Key): String
        fun GetKeyNavigationAction(InKey: Key): String /* "Accept" | "Back" | "Num" | "Invalid" | "EUINavigationAction_MAX" */
        fun IsAnalog(Key: Key): Boolean
        fun IsAxis1D(Key: Key): Boolean
        fun IsAxis2D(Key: Key): Boolean
        fun IsAxis3D(Key: Key): Boolean
        fun IsButtonAxis(Key: Key): Boolean
        fun IsDigital(Key: Key): Boolean
        fun IsGamepadKey(Key: Key): Boolean
        fun IsKeyboardKey(Key: Key): Boolean
        fun IsModifierKey(Key: Key): Boolean
        fun IsMouseButton(Key: Key): Boolean
        fun IsValidKey(Key: Key): Boolean
        fun IsVectorAxis(Key: Key): Boolean
        fun BreakKey(InKey: Key, InteractionProfile: String = definedExternally, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */ = definedExternally, MotionSource: String = definedExternally, Indentifier: String = definedExternally, Component: String = definedExternally): `T$253`
    }
}

external open class KeyBind {
    open var Key: Key
    open var Command: String
    open var Control: Boolean
    open var Shift: Boolean
    open var Alt: Boolean
    open var Cmd: Boolean
    open var bIgnoreCtrl: Boolean
    open var bIgnoreShift: Boolean
    open var bIgnoreAlt: Boolean
    open var bIgnoreCmd: Boolean
    open var bDisabled: Boolean
    open fun clone(): KeyBind

    companion object {
        fun C(Other: UObject): KeyBind
        fun C(Other: Any): KeyBind
    }
}

external open class PlayerInput : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DebugExecBindings: Array<KeyBind>
    open var InvertedAxis: Array<String>
    open fun SetMouseSensitivity(Sensitivity: Number)
    open fun SetBind(BindName: String, Command: String)
    open fun InvertAxisKey(AxisKey: Key)
    open fun InvertAxis(AxisName: String)
    open fun ClearSmoothing()

    companion object {
        fun Load(ResourceName: String): PlayerInput
        fun Find(Outer: UObject, ResourceName: String): PlayerInput
        fun GetDefaultObject(): PlayerInput
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerInput
        fun C(Other: UObject): PlayerInput
        fun C(Other: Any): PlayerInput
    }
}

external open class RuntimeFloatCurve {
    open var EditorCurveData: RichCurve
    open var ExternalCurve: CurveFloat
    open fun clone(): RuntimeFloatCurve

    companion object {
        fun C(Other: UObject): RuntimeFloatCurve
        fun C(Other: Any): RuntimeFloatCurve
    }
}

external open class ForceFeedbackChannelDetails {
    open var bAffectsLeftLarge: Boolean
    open var bAffectsLeftSmall: Boolean
    open var bAffectsRightLarge: Boolean
    open var bAffectsRightSmall: Boolean
    open var Curve: RuntimeFloatCurve
    open fun clone(): ForceFeedbackChannelDetails

    companion object {
        fun C(Other: UObject): ForceFeedbackChannelDetails
        fun C(Other: Any): ForceFeedbackChannelDetails
    }
}

external object EAttenuationDistanceModel {
    var Linear: String /* "Linear" */
    var Logarithmic: String /* "Logarithmic" */
    var Inverse: String /* "Inverse" */
    var LogReverse: String /* "LogReverse" */
    var NaturalSound: String /* "NaturalSound" */
    var Custom: String /* "Custom" */
    var EAttenuationDistanceModel_MAX: String /* "EAttenuationDistanceModel_MAX" */
}

external object EAttenuationShape {
    var Sphere: String /* "Sphere" */
    var Capsule: String /* "Capsule" */
    var Box: String /* "Box" */
    var Cone: String /* "Cone" */
    var EAttenuationShape_MAX: String /* "EAttenuationShape_MAX" */
}

external object ENaturalSoundFalloffMode {
    var Continues: String /* "Continues" */
    var Silent: String /* "Silent" */
    var Hold: String /* "Hold" */
    var ENaturalSoundFalloffMode_MAX: String /* "ENaturalSoundFalloffMode_MAX" */
}

external open class BaseAttenuationSettings {
    open var DistanceAlgorithm: String /* "Linear" | "Logarithmic" | "Inverse" | "LogReverse" | "NaturalSound" | "Custom" | "EAttenuationDistanceModel_MAX" */
    open var AttenuationShape: String /* "Sphere" | "Capsule" | "Box" | "Cone" | "EAttenuationShape_MAX" */
    open var dBAttenuationAtMax: Number
    open var FalloffMode: String /* "Continues" | "Silent" | "Hold" | "ENaturalSoundFalloffMode_MAX" */
    open var AttenuationShapeExtents: Vector
    open var ConeOffset: Number
    open var FalloffDistance: Number
    open var ConeSphereRadius: Number
    open var ConeSphereFalloffDistance: Number
    open var CustomAttenuationCurve: RuntimeFloatCurve
    open fun clone(): BaseAttenuationSettings

    companion object {
        fun C(Other: UObject): BaseAttenuationSettings
        fun C(Other: Any): BaseAttenuationSettings
    }
}

external open class ForceFeedbackAttenuationSettings : BaseAttenuationSettings {
    override fun clone(): ForceFeedbackAttenuationSettings

    companion object {
        fun C(Other: UObject): ForceFeedbackAttenuationSettings
        fun C(Other: Any): ForceFeedbackAttenuationSettings
    }
}

external open class ForceFeedbackAttenuation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Attenuation: ForceFeedbackAttenuationSettings

    companion object {
        fun Load(ResourceName: String): ForceFeedbackAttenuation
        fun Find(Outer: UObject, ResourceName: String): ForceFeedbackAttenuation
        fun GetDefaultObject(): ForceFeedbackAttenuation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ForceFeedbackAttenuation
        fun C(Other: UObject): ForceFeedbackAttenuation
        fun C(Other: Any): ForceFeedbackAttenuation
    }
}

external interface `T$254` {
    var OutAttenuationSettings: ForceFeedbackAttenuationSettings
    var `$`: Boolean
}

external open class ForceFeedbackComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var ForceFeedbackEffect: ForceFeedbackEffect
    open var bAutoDestroy: Boolean
    open var bStopWhenOwnerDestroyed: Boolean
    open var bLooping: Boolean
    open var bIgnoreTimeDilation: Boolean
    open var bOverrideAttenuation: Boolean
    open var IntensityMultiplier: Number
    open var AttenuationSettings: ForceFeedbackAttenuation
    open var AttenuationOverrides: ForceFeedbackAttenuationSettings
    open var OnForceFeedbackFinished: UnrealEngineMulticastDelegate<(ForceFeedbackComponent: ForceFeedbackComponent) -> Unit>
    open fun Stop()
    open fun SetIntensityMultiplier(NewIntensityMultiplier: Number)
    open fun SetForceFeedbackEffect(NewForceFeedbackEffect: ForceFeedbackEffect)
    open fun Play(StartTime: Number)
    open fun GetAttenuationSettingsToApply(OutAttenuationSettings: ForceFeedbackAttenuationSettings = definedExternally): `T$254`
    open fun AdjustAttenuation(InAttenuationSettings: ForceFeedbackAttenuationSettings)

    companion object {
        fun Load(ResourceName: String): ForceFeedbackComponent
        fun Find(Outer: UObject, ResourceName: String): ForceFeedbackComponent
        fun GetDefaultObject(): ForceFeedbackComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ForceFeedbackComponent
        fun C(Other: UObject): ForceFeedbackComponent
        fun C(Other: Any): ForceFeedbackComponent
    }
}

external open class ForceFeedbackEffect : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChannelDetails: Array<ForceFeedbackChannelDetails>
    open var Duration: Number
    open fun SpawnForceFeedbackAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent

    companion object {
        fun Load(ResourceName: String): ForceFeedbackEffect
        fun Find(Outer: UObject, ResourceName: String): ForceFeedbackEffect
        fun GetDefaultObject(): ForceFeedbackEffect
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ForceFeedbackEffect
        fun C(Other: UObject): ForceFeedbackEffect
        fun C(Other: Any): ForceFeedbackEffect
        fun SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent
    }
}

external open class ActiveForceFeedbackEffect {
    open var ForceFeedbackEffect: ForceFeedbackEffect
    open fun clone(): ActiveForceFeedbackEffect

    companion object {
        fun C(Other: UObject): ActiveForceFeedbackEffect
        fun C(Other: Any): ActiveForceFeedbackEffect
    }
}

external open class ChildConnection : NetConnection {
    constructor()
    constructor(Outer: UObject)
    open var Parent: NetConnection

    companion object {
        fun Load(ResourceName: String): ChildConnection
        fun Find(Outer: UObject, ResourceName: String): ChildConnection
        fun GetDefaultObject(): ChildConnection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ChildConnection
        fun C(Other: UObject): ChildConnection
        fun C(Other: Any): ChildConnection
    }
}

external open class Package : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun DeletePackage(): Boolean
    open fun FindWorldInPackage(): World
    open fun SavePackage(Filename: String): Boolean
    open fun GetLongPackagePath(): String
    open fun HasAnyPackageFlags(Flags: Number): Boolean
    open fun LoadPackage(PackageName: String): Package

    companion object {
        fun Load(ResourceName: String): Package
        fun Find(Outer: UObject, ResourceName: String): Package
        fun GetDefaultObject(): Package
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Package
        fun C(Other: UObject): Package
        fun C(Other: Any): Package
        fun DeletePackage(Package: Package): Boolean
        fun FindWorldInPackage(Package: Package): World
        fun SavePackage(Package: Package, Filename: String): Boolean
        fun GetLongPackagePath(InPackage: Package): String
        fun HasAnyPackageFlags(Package: Package, Flags: Number): Boolean
        fun LoadPackage(InOuter: Package, PackageName: String): Package
    }
}

external open class ChannelDefinition {
    open var ChannelName: String
    open var ClassName: String
    open var ChannelClass: UnrealEngineClass
    open var StaticChannelIndex: Number
    open var bTickOnCreate: Boolean
    open var bServerOpen: Boolean
    open var bClientOpen: Boolean
    open var bInitialServer: Boolean
    open var bInitialClient: Boolean
    open fun clone(): ChannelDefinition

    companion object {
        fun C(Other: UObject): ChannelDefinition
        fun C(Other: Any): ChannelDefinition
    }
}

external open class Channel : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Connection: NetConnection

    companion object {
        fun Load(ResourceName: String): Channel
        fun Find(Outer: UObject, ResourceName: String): Channel
        fun GetDefaultObject(): Channel
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Channel
        fun C(Other: UObject): Channel
        fun C(Other: Any): Channel
    }
}

external open class ReplicationDriver : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReplicationDriver
        fun Find(Outer: UObject, ResourceName: String): ReplicationDriver
        fun GetDefaultObject(): ReplicationDriver
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReplicationDriver
        fun C(Other: UObject): ReplicationDriver
        fun C(Other: Any): ReplicationDriver
    }
}

external open class NetDriver : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NetConnectionClassName: String
    open var ReplicationDriverClassName: String
    open var MaxDownloadSize: Number
    open var bClampListenServerTickRate: Boolean
    open var NetServerMaxTickRate: Number
    open var MaxNetTickRate: Number
    open var MaxInternetClientRate: Number
    open var MaxClientRate: Number
    open var ServerTravelPause: Number
    open var SpawnPrioritySeconds: Number
    open var RelevantTimeout: Number
    open var KeepAliveTime: Number
    open var InitialConnectTimeout: Number
    open var ConnectionTimeout: Number
    open var TimeoutMultiplierForUnoptimizedBuilds: Number
    open var bNoTimeouts: Boolean
    open var bNeverApplyNetworkEmulationSettings: Boolean
    open var ServerConnection: NetConnection
    open var ClientConnections: Array<NetConnection>
    open var RecentlyDisconnectedTrackingTime: Number
    open var World: World
    open var WorldPackage: Package
    open var NetConnectionClass: UnrealEngineClass
    open var ReplicationDriverClass: UnrealEngineClass
    open var NetDriverName: String
    open var ChannelDefinitions: Array<ChannelDefinition>
    open var ChannelDefinitionMap: Any
    open var ActorChannelPool: Array<Channel>
    open var ReplicationDriver: ReplicationDriver

    companion object {
        fun Load(ResourceName: String): NetDriver
        fun Find(Outer: UObject, ResourceName: String): NetDriver
        fun GetDefaultObject(): NetDriver
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NetDriver
        fun C(Other: UObject): NetDriver
        fun C(Other: Any): NetDriver
    }
}

external open class PackageMap : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PackageMap
        fun Find(Outer: UObject, ResourceName: String): PackageMap
        fun GetDefaultObject(): PackageMap
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PackageMap
        fun C(Other: UObject): PackageMap
        fun C(Other: Any): PackageMap
    }
}

external open class NetConnection : Player {
    constructor()
    constructor(Outer: UObject)
    open var Children: Array<ChildConnection>
    open var Driver: NetDriver
    open var PackageMapClass: UnrealEngineClass
    open var PackageMap: PackageMap
    open var OpenChannels: Array<Channel>
    open var SentTemporaries: Array<Actor>
    open var ViewTarget: Actor
    open var OwningActor: Actor
    open var MaxPacket: Number
    open var InternalAck: Boolean
    open var PlayerId: UniqueNetIdRepl
    open var LastReceiveTime: Any
    open var ChannelsToTick: Array<Channel>

    companion object {
        fun Load(ResourceName: String): NetConnection
        fun Find(Outer: UObject, ResourceName: String): NetConnection
        fun GetDefaultObject(): NetConnection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NetConnection
        fun C(Other: UObject): NetConnection
        fun C(Other: Any): NetConnection
    }
}

external open class CachedKeyToActionInfo {
    open var PlayerInput: PlayerInput
    open fun clone(): CachedKeyToActionInfo

    companion object {
        fun C(Other: UObject): CachedKeyToActionInfo
        fun C(Other: Any): CachedKeyToActionInfo
    }
}

external object EControllerAnalogStick {
    var CAS_LeftStick: String /* "CAS_LeftStick" */
    var CAS_RightStick: String /* "CAS_RightStick" */
    var CAS_MAX: String /* "CAS_MAX" */
}

external interface `T$255` {
    var LocationX: Number
    var LocationY: Number
    var bIsCurrentlyPressed: Boolean
}

external interface `T$256` {
    var DeltaX: Number
    var DeltaY: Number
}

external interface `T$257` {
    var StickX: Number
    var StickY: Number
}

external open class InputComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var CachedKeyToActionInfo: Array<CachedKeyToActionInfo>
    open fun WasControllerKeyJustReleased(Key: Key): Boolean
    open fun WasControllerKeyJustPressed(Key: Key): Boolean
    open fun OnInputOwnerEndPlayed(InOwner: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)
    open fun IsControllerKeyDown(Key: Key): Boolean
    open fun GetTouchState(FingerIndex: Number, LocationX: Number = definedExternally, LocationY: Number = definedExternally, bIsCurrentlyPressed: Boolean = definedExternally): `T$255`
    open fun GetControllerVectorKeyState(Key: Key): Vector
    open fun GetControllerMouseDelta(DeltaX: Number = definedExternally, DeltaY: Number = definedExternally): `T$256`
    open fun GetControllerKeyTimeDown(Key: Key): Number
    open fun GetControllerAnalogStickState(WhichStick: String /* "CAS_LeftStick" | "CAS_RightStick" | "CAS_MAX" */, StickX: Number = definedExternally, StickY: Number = definedExternally): `T$257`
    open fun GetControllerAnalogKeyState(Key: Key): Number

    companion object {
        fun Load(ResourceName: String): InputComponent
        fun Find(Outer: UObject, ResourceName: String): InputComponent
        fun GetDefaultObject(): InputComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InputComponent
        fun C(Other: UObject): InputComponent
        fun C(Other: Any): InputComponent
    }
}

external open class TouchInputControl {
    open var Image1: Texture2D
    open var Image2: Texture2D
    open var Center: Vector2D
    open var VisualSize: Vector2D
    open var ThumbSize: Vector2D
    open var InteractionSize: Vector2D
    open var InputScale: Vector2D
    open var MainInputKey: Key
    open var AltInputKey: Key
    open fun clone(): TouchInputControl

    companion object {
        fun C(Other: UObject): TouchInputControl
        fun C(Other: Any): TouchInputControl
    }
}

external open class TouchInterface : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Controls: Array<TouchInputControl>
    open var ActiveOpacity: Number
    open var InactiveOpacity: Number
    open var TimeUntilDeactive: Number
    open var TimeUntilReset: Number
    open var ActivationDelay: Number
    open var bPreventRecenter: Boolean
    open var StartupDelay: Number

    companion object {
        fun Load(ResourceName: String): TouchInterface
        fun Find(Outer: UObject, ResourceName: String): TouchInterface
        fun GetDefaultObject(): TouchInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TouchInterface
        fun C(Other: UObject): TouchInterface
        fun C(Other: Any): TouchInterface
    }
}

external open class SphereComponent : ShapeComponent {
    constructor()
    constructor(Outer: UObject)
    open var SphereRadius: Number
    open fun SetSphereRadius(InSphereRadius: Number, bUpdateOverlaps: Boolean)
    open fun GetUnscaledSphereRadius(): Number
    open fun GetShapeScale(): Number
    open fun GetScaledSphereRadius(): Number

    companion object {
        fun Load(ResourceName: String): SphereComponent
        fun Find(Outer: UObject, ResourceName: String): SphereComponent
        fun GetDefaultObject(): SphereComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SphereComponent
        fun C(Other: UObject): SphereComponent
        fun C(Other: Any): SphereComponent
    }
}

external open class StaticMeshComponentLODInfo {
    open fun clone(): StaticMeshComponentLODInfo

    companion object {
        fun C(Other: UObject): StaticMeshComponentLODInfo
        fun C(Other: Any): StaticMeshComponentLODInfo
    }
}

external open class StreamingTextureBuildInfo {
    open var PackedRelativeBox: Any
    open var TextureLevelIndex: Number
    open var TexelFactor: Number
    open fun clone(): StreamingTextureBuildInfo

    companion object {
        fun C(Other: UObject): StreamingTextureBuildInfo
        fun C(Other: Any): StreamingTextureBuildInfo
    }
}

external open class LightmassPrimitiveSettings {
    open var bUseTwoSidedLighting: Boolean
    open var bShadowIndirectOnly: Boolean
    open var bUseEmissiveForStaticLighting: Boolean
    open var bUseVertexNormalForHemisphereGather: Boolean
    open var EmissiveLightFalloffExponent: Number
    open var EmissiveLightExplicitInfluenceRadius: Number
    open var EmissiveBoost: Number
    open var DiffuseBoost: Number
    open var FullyOccludedSamplesFraction: Number
    open fun clone(): LightmassPrimitiveSettings

    companion object {
        fun C(Other: UObject): LightmassPrimitiveSettings
        fun C(Other: Any): LightmassPrimitiveSettings
    }
}

external open class ProcMeshVertex {
    open var position: Vector
    open var Normal: Vector
    open var Tangent: ProcMeshTangent
    open var Color: Color
    open var UV0: Vector2D
    open var UV1: Vector2D
    open var UV2: Vector2D
    open var UV3: Vector2D
    open fun clone(): ProcMeshVertex

    companion object {
        fun C(Other: UObject): ProcMeshVertex
        fun C(Other: Any): ProcMeshVertex
    }
}

external open class ProcMeshSection {
    open var ProcVertexBuffer: Array<ProcMeshVertex>
    open var ProcIndexBuffer: Array<Any>
    open var SectionLocalBox: Box
    open var bEnableCollision: Boolean
    open var bSectionVisible: Boolean
    open fun clone(): ProcMeshSection

    companion object {
        fun C(Other: UObject): ProcMeshSection
        fun C(Other: Any): ProcMeshSection
    }
}

external object EProcMeshSliceCapOption {
    var NoCap: String /* "NoCap" */
    var CreateNewSectionForCap: String /* "CreateNewSectionForCap" */
    var UseLastSectionForCap: String /* "UseLastSectionForCap" */
    var EProcMeshSliceCapOption_MAX: String /* "EProcMeshSliceCapOption_MAX" */
}

external interface `T$258` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external interface `T$259` {
    var OutOtherHalfProcMesh: ProceduralMeshComponent
}

external interface `T$260` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external open class ProceduralMeshComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var bUseComplexAsSimpleCollision: Boolean
    open var bUseAsyncCooking: Boolean
    open var ProcMeshBodySetup: BodySetup
    open var ProcMeshSections: Array<ProcMeshSection>
    open var CollisionConvexElems: Array<KConvexElem>
    open var LocalBounds: BoxSphereBounds
    open var AsyncBodySetupQueue: Array<BodySetup>
    open fun UpdateMeshSection(SectionIndex: Number, Vertices: Array<Vector>, Normals: Array<Vector>, UV0: Array<Vector2D>, UV1: Array<Vector2D>, UV2: Array<Vector2D>, UV3: Array<Vector2D>, VertexColors: Array<LinearColor>, Tangents: Array<ProcMeshTangent>)
    open fun UpdateMeshSectionFColor(SectionIndex: Number, Vertices: Array<Vector>, Normals: Array<Vector>, UV0: Array<Vector2D>, VertexColors: Array<Color>, Tangents: Array<ProcMeshTangent>)
    open fun SetMeshSectionVisible(SectionIndex: Number, bNewVisibility: Boolean)
    open fun IsMeshSectionVisible(SectionIndex: Number): Boolean
    open fun GetNumSections(): Number
    open fun CreateMeshSection(SectionIndex: Number, Vertices: Array<Vector>, Triangles: Array<Number>, Normals: Array<Vector>, UV0: Array<Vector2D>, UV1: Array<Vector2D>, UV2: Array<Vector2D>, UV3: Array<Vector2D>, VertexColors: Array<LinearColor>, Tangents: Array<ProcMeshTangent>, bCreateCollision: Boolean)
    open fun CreateMeshSectionFColor(SectionIndex: Number, Vertices: Array<Vector>, Triangles: Array<Number>, Normals: Array<Vector>, UV0: Array<Vector2D>, VertexColors: Array<Color>, Tangents: Array<ProcMeshTangent>, bCreateCollision: Boolean)
    open fun ClearMeshSection(SectionIndex: Number)
    open fun ClearCollisionConvexMeshes()
    open fun ClearAllMeshSections()
    open fun AddCollisionConvexMesh(ConvexVerts: Array<Vector>)
    open fun GetSectionFromProceduralMesh(SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$258`
    open fun SliceProceduralMesh(PlanePosition: Vector, PlaneNormal: Vector, bCreateOtherHalf: Boolean, OutOtherHalfProcMesh: ProceduralMeshComponent = definedExternally, CapOption: String /* "NoCap" | "CreateNewSectionForCap" | "UseLastSectionForCap" | "EProcMeshSliceCapOption_MAX" */ = definedExternally, CapMaterial: MaterialInterface = definedExternally): `T$259`

    companion object {
        fun Load(ResourceName: String): ProceduralMeshComponent
        fun Find(Outer: UObject, ResourceName: String): ProceduralMeshComponent
        fun GetDefaultObject(): ProceduralMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ProceduralMeshComponent
        fun C(Other: UObject): ProceduralMeshComponent
        fun C(Other: Any): ProceduralMeshComponent
        fun GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent, SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$260`
        fun SliceProceduralMesh(InProcMesh: ProceduralMeshComponent, PlanePosition: Vector, PlaneNormal: Vector, bCreateOtherHalf: Boolean, OutOtherHalfProcMesh: ProceduralMeshComponent = definedExternally, CapOption: String /* "NoCap" | "CreateNewSectionForCap" | "UseLastSectionForCap" | "EProcMeshSliceCapOption_MAX" */ = definedExternally, CapMaterial: MaterialInterface = definedExternally): `T$259`
    }
}

external object EVertexPaintAxis {
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var EVertexPaintAxis_MAX: String /* "EVertexPaintAxis_MAX" */
}

external interface `T$261` {
    var Min: Vector
    var Max: Vector
}

external open class StaticMeshComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var ForcedLodModel: Number
    open var PreviousLODLevel: Number
    open var MinLOD: Number
    open var SubDivisionStepSize: Number
    open var StaticMesh: StaticMesh
    open var WireframeColorOverride: Color
    open var bEvaluateWorldPositionOffset: Boolean
    open var SelectedEditorSection: Number
    open var SelectedEditorMaterial: Number
    open var SectionIndexPreview: Number
    open var MaterialIndexPreview: Number
    open var StaticMeshImportVersion: Number
    open var bOverrideWireframeColor: Boolean
    open var bOverrideMinLOD: Boolean
    open var bOverrideNavigationExport: Boolean
    open var bForceNavigationObstacle: Boolean
    open var bDisallowMeshPaintPerInstance: Boolean
    open var bIgnoreInstanceForTextureStreaming: Boolean
    open var bOverrideLightMapRes: Boolean
    open var bCastDistanceFieldIndirectShadow: Boolean
    open var bOverrideDistanceFieldSelfShadowBias: Boolean
    open var bUseSubDivisions: Boolean
    open var bUseDefaultCollision: Boolean
    open var bCustomOverrideVertexColorPerLOD: Boolean
    open var bDisplayVertexColors: Boolean
    open var bDisplayPhysicalMaterialMasks: Boolean
    open var bDisplayNaniteFallbackMesh: Boolean
    open var bSortTriangles: Boolean
    open var bReverseCulling: Boolean
    open var OverriddenLightMapRes: Number
    open var DistanceFieldIndirectShadowMinVisibility: Number
    open var DistanceFieldSelfShadowBias: Number
    open var StreamingDistanceMultiplier: Number
    open var IrrelevantLights: Array<Guid>
    open var LODData: Array<StaticMeshComponentLODInfo>
    open var StreamingTextureData: Array<StreamingTextureBuildInfo>
    open var StaticMeshDerivedDataKey: String
    open var MaterialStreamingRelativeBoxes: Array<Any>
    open var LightmassSettings: LightmassPrimitiveSettings
    open fun SetStaticMesh(NewMesh: StaticMesh): Boolean
    open fun SetReverseCulling(ReverseCulling: Boolean)
    open fun SetForcedLodModel(NewForcedLodModel: Number)
    open fun SetEvaluateWorldPositionOffsetInRayTracing(NewValue: Boolean)
    open fun SetDistanceFieldSelfShadowBias(NewValue: Number)
    open fun OnRep_StaticMesh(OldStaticMesh: StaticMesh)
    open fun GetLocalBounds(Min: Vector = definedExternally, Max: Vector = definedExternally): `T$261`
    open fun GetPhysicsBodySetupFromStaticMeshComponent(): BodySetup
    open fun CopyProceduralMeshFromStaticMeshComponent(LODIndex: Number, ProcMeshComponent: ProceduralMeshComponent, bCreateCollision: Boolean)
    open fun HasInstanceVertexColors(): Boolean
    open fun PaintVerticesLerpAlongAxis(StartColor: LinearColor, EndColor: LinearColor, Axis: String /* "X" | "Y" | "Z" | "EVertexPaintAxis_MAX" */, bConvertToSRGB: Boolean)
    open fun PaintVerticesSingleColor(FillColor: LinearColor, bConvertToSRGB: Boolean)
    open fun RemovePaintedVertices()

    companion object {
        fun Load(ResourceName: String): StaticMeshComponent
        fun Find(Outer: UObject, ResourceName: String): StaticMeshComponent
        fun GetDefaultObject(): StaticMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshComponent
        fun C(Other: UObject): StaticMeshComponent
        fun C(Other: Any): StaticMeshComponent
        fun GetPhysicsBodySetupFromStaticMeshComponent(InStaticMeshComp: StaticMeshComponent): BodySetup
        fun CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent, LODIndex: Number, ProcMeshComponent: ProceduralMeshComponent, bCreateCollision: Boolean)
        fun HasInstanceVertexColors(StaticMeshComponent: StaticMeshComponent): Boolean
        fun PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent, StartColor: LinearColor, EndColor: LinearColor, Axis: String /* "X" | "Y" | "Z" | "EVertexPaintAxis_MAX" */, bConvertToSRGB: Boolean)
        fun PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent, FillColor: LinearColor, bConvertToSRGB: Boolean)
        fun RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent)
    }
}

external open class DefaultPawn(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Pawn {
    open var BaseTurnRate: Number
    open var BaseLookUpRate: Number
    open var MovementComponent: PawnMovementComponent
    open var CollisionComponent: SphereComponent
    open var MeshComponent: StaticMeshComponent
    open var bAddDefaultMovementBindings: Boolean
    open fun TurnAtRate(Rate: Number)
    open fun MoveUp_World(Val: Number)
    open fun MoveRight(Val: Number)
    open fun MoveForward(Val: Number)
    open fun LookUpAtRate(Rate: Number)

    companion object {
        fun GetDefaultObject(): DefaultPawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DefaultPawn
        fun C(Other: UObject): DefaultPawn
        fun C(Other: Any): DefaultPawn
    }
}

external open class SpectatorPawn(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : DefaultPawn {
    companion object {
        fun GetDefaultObject(): SpectatorPawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SpectatorPawn
        fun C(Other: UObject): SpectatorPawn
        fun C(Other: Any): SpectatorPawn
    }
}

external object EViewTargetBlendFunction {
    var VTBlend_Linear: String /* "VTBlend_Linear" */
    var VTBlend_Cubic: String /* "VTBlend_Cubic" */
    var VTBlend_EaseIn: String /* "VTBlend_EaseIn" */
    var VTBlend_EaseOut: String /* "VTBlend_EaseOut" */
    var VTBlend_EaseInOut: String /* "VTBlend_EaseInOut" */
    var VTBlend_PreBlended: String /* "VTBlend_PreBlended" */
    var VTBlend_MAX: String /* "VTBlend_MAX" */
}

external open class WidgetAnimationBinding {
    open var WidgetName: String
    open var SlotWidgetName: String
    open var AnimationGuid: Guid
    open var bIsRootWidget: Boolean
    open fun clone(): WidgetAnimationBinding

    companion object {
        fun C(Other: UObject): WidgetAnimationBinding
        fun C(Other: Any): WidgetAnimationBinding
    }
}

external open class WidgetAnimation : MovieSceneSequence {
    constructor()
    constructor(Outer: UObject)
    open var OnAnimationStarted: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnAnimationFinished: UnrealEngineMulticastDelegate<() -> Unit>
    open var MovieScene: MovieScene
    open var AnimationBindings: Array<WidgetAnimationBinding>
    open var bLegacyFinishOnStop: Boolean
    open var DisplayLabel: String
    open fun UnbindAllFromAnimationStarted(Widget: UserWidget)
    open fun UnbindAllFromAnimationFinished(Widget: UserWidget)
    open fun GetStartTime(): Number
    open fun GetEndTime(): Number

    companion object {
        fun Load(ResourceName: String): WidgetAnimation
        fun Find(Outer: UObject, ResourceName: String): WidgetAnimation
        fun GetDefaultObject(): WidgetAnimation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetAnimation
        fun C(Other: UObject): WidgetAnimation
        fun C(Other: Any): WidgetAnimation
    }
}

external open class UMGSequencePlayer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Animation: WidgetAnimation
    open var RootTemplateInstance: MovieSceneRootEvaluationTemplateInstance
    open fun SetUserTag(InUserTag: String)
    open fun GetUserTag(): String

    companion object {
        fun Load(ResourceName: String): UMGSequencePlayer
        fun Find(Outer: UObject, ResourceName: String): UMGSequencePlayer
        fun GetDefaultObject(): UMGSequencePlayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UMGSequencePlayer
        fun C(Other: UObject): UMGSequencePlayer
        fun C(Other: Any): UMGSequencePlayer
    }
}

external open class UMGSequenceTickManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var WeakUserWidgetData: Any
    open var Linker: MovieSceneEntitySystemLinker

    companion object {
        fun Load(ResourceName: String): UMGSequenceTickManager
        fun Find(Outer: UObject, ResourceName: String): UMGSequenceTickManager
        fun GetDefaultObject(): UMGSequenceTickManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UMGSequenceTickManager
        fun C(Other: UObject): UMGSequenceTickManager
        fun C(Other: Any): UMGSequenceTickManager
    }
}

external open class NamedSlotBinding {
    open var Name: String
    open var Content: Widget
    open fun clone(): NamedSlotBinding

    companion object {
        fun C(Other: UObject): NamedSlotBinding
        fun C(Other: Any): NamedSlotBinding
    }
}

external open class WidgetTree : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RootWidget: Widget
    open var AllWidgets: Array<Widget>

    companion object {
        fun Load(ResourceName: String): WidgetTree
        fun Find(Outer: UObject, ResourceName: String): WidgetTree
        fun GetDefaultObject(): WidgetTree
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetTree
        fun C(Other: UObject): WidgetTree
        fun C(Other: Any): WidgetTree
    }
}

external object EDesignPreviewSizeMode {
    var FillScreen: String /* "FillScreen" */
    var Custom: String /* "Custom" */
    var CustomOnScreen: String /* "CustomOnScreen" */
    var Desired: String /* "Desired" */
    var DesiredOnScreen: String /* "DesiredOnScreen" */
    var EDesignPreviewSizeMode_MAX: String /* "EDesignPreviewSizeMode_MAX" */
}

external object EWidgetTickFrequency {
    var Never: String /* "Never" */
    var Auto: String /* "Auto" */
    var EWidgetTickFrequency_MAX: String /* "EWidgetTickFrequency_MAX" */
}

external object EWidgetAnimationEvent {
    var Started: String /* "Started" */
    var Finished: String /* "Finished" */
    var EWidgetAnimationEvent_MAX: String /* "EWidgetAnimationEvent_MAX" */
}

external open class AnimationEventBinding {
    open var Animation: WidgetAnimation
    open var delegate: UnrealEngineDelegate<() -> Unit>
    open var AnimationEvent: String /* "Started" | "Finished" | "EWidgetAnimationEvent_MAX" */
    open var UserTag: String
    open fun clone(): AnimationEventBinding

    companion object {
        fun C(Other: UObject): AnimationEventBinding
        fun C(Other: Any): AnimationEventBinding
    }
}

external open class Geometry {
    open fun clone(): Geometry
    open fun CenterOf(): Vector2D
    open fun FindClosestPointOnGeom(TestPoint: Vector2D): Vector2D
    open fun AbsoluteToLocal(AbsoluteCoordinate: Vector2D): Vector2D
    open fun GetAbsoluteSize(): Vector2D
    open fun GetLocalSize(): Vector2D
    open fun GetLocalTopLeft(): Vector2D
    open fun IsUnderLocation(AbsoluteCoordinate: Vector2D): Boolean
    open fun LocalToAbsolute(LocalCoordinate: Vector2D): Vector2D
    open fun TransformScalarAbsoluteToLocal(AbsoluteScalar: Number): Number
    open fun TransformScalarLocalToAbsolute(LocalScalar: Number): Number
    open fun TransformVectorAbsoluteToLocal(AbsoluteVector: Vector2D): Vector2D
    open fun TransformVectorLocalToAbsolute(LocalVector: Vector2D): Vector2D

    companion object {
        fun C(Other: UObject): Geometry
        fun C(Other: Any): Geometry
        fun CenterOf(Geom: Geometry): Vector2D
        fun FindClosestPointOnGeom(Geom: Geometry, TestPoint: Vector2D): Vector2D
        fun AbsoluteToLocal(Geometry: Geometry, AbsoluteCoordinate: Vector2D): Vector2D
        fun GetAbsoluteSize(Geometry: Geometry): Vector2D
        fun GetLocalSize(Geometry: Geometry): Vector2D
        fun GetLocalTopLeft(Geometry: Geometry): Vector2D
        fun IsUnderLocation(Geometry: Geometry, AbsoluteCoordinate: Vector2D): Boolean
        fun LocalToAbsolute(Geometry: Geometry, LocalCoordinate: Vector2D): Vector2D
        fun TransformScalarAbsoluteToLocal(Geometry: Geometry, AbsoluteScalar: Number): Number
        fun TransformScalarLocalToAbsolute(Geometry: Geometry, LocalScalar: Number): Number
        fun TransformVectorAbsoluteToLocal(Geometry: Geometry, AbsoluteVector: Vector2D): Vector2D
        fun TransformVectorLocalToAbsolute(Geometry: Geometry, LocalVector: Vector2D): Vector2D
    }
}

external object EInputEvent {
    var IE_Pressed: String /* "IE_Pressed" */
    var IE_Released: String /* "IE_Released" */
    var IE_Repeat: String /* "IE_Repeat" */
    var IE_DoubleClick: String /* "IE_DoubleClick" */
    var IE_Axis: String /* "IE_Axis" */
    var IE_MAX: String /* "IE_MAX" */
}

external open class Anchors {
    open var Minimum: Vector2D
    open var Maximum: Vector2D
    open fun clone(): Anchors

    companion object {
        fun C(Other: UObject): Anchors
        fun C(Other: Any): Anchors
    }
}

external open class SoundModulatorBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundModulatorBase
        fun Find(Outer: UObject, ResourceName: String): SoundModulatorBase
        fun GetDefaultObject(): SoundModulatorBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundModulatorBase
        fun C(Other: UObject): SoundModulatorBase
        fun C(Other: Any): SoundModulatorBase
    }
}

external open class SoundModulationDestinationSettings {
    open var Value: Number
    open var bEnableModulation: Boolean
    open var Modulator: SoundModulatorBase
    open fun clone(): SoundModulationDestinationSettings

    companion object {
        fun C(Other: UObject): SoundModulationDestinationSettings
        fun C(Other: Any): SoundModulationDestinationSettings
    }
}

external open class SoundModulationDefaultSettings {
    open var VolumeModulationDestination: SoundModulationDestinationSettings
    open var PitchModulationDestination: SoundModulationDestinationSettings
    open var HighpassModulationDestination: SoundModulationDestinationSettings
    open var LowpassModulationDestination: SoundModulationDestinationSettings
    open fun clone(): SoundModulationDefaultSettings

    companion object {
        fun C(Other: UObject): SoundModulationDefaultSettings
        fun C(Other: Any): SoundModulationDefaultSettings
    }
}

external object EAudioOutputTarget {
    var Speaker: String /* "Speaker" */
    var Controller: String /* "Controller" */
    var ControllerFallbackToSpeaker: String /* "ControllerFallbackToSpeaker" */
    var EAudioOutputTarget_MAX: String /* "EAudioOutputTarget_MAX" */
}

external object ESoundWaveLoadingBehavior {
    var Inherited: String /* "Inherited" */
    var RetainOnLoad: String /* "RetainOnLoad" */
    var PrimeOnLoad: String /* "PrimeOnLoad" */
    var LoadOnDemand: String /* "LoadOnDemand" */
    var ForceInline: String /* "ForceInline" */
    var Uninitialized: String /* "Uninitialized" */
    var ESoundWaveLoadingBehavior_MAX: String /* "ESoundWaveLoadingBehavior_MAX" */
}

external open class SoundSubmixBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bAutoDisable: Boolean
    open var AutoDisableTime: Number
    open var ChildSubmixes: Array<SoundSubmixBase>

    companion object {
        fun Load(ResourceName: String): SoundSubmixBase
        fun Find(Outer: UObject, ResourceName: String): SoundSubmixBase
        fun GetDefaultObject(): SoundSubmixBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundSubmixBase
        fun C(Other: UObject): SoundSubmixBase
        fun C(Other: Any): SoundSubmixBase
    }
}

external open class SoundSubmixWithParentBase : SoundSubmixBase {
    constructor()
    constructor(Outer: UObject)
    open var ParentSubmix: SoundSubmixBase

    companion object {
        fun Load(ResourceName: String): SoundSubmixWithParentBase
        fun Find(Outer: UObject, ResourceName: String): SoundSubmixWithParentBase
        fun GetDefaultObject(): SoundSubmixWithParentBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundSubmixWithParentBase
        fun C(Other: UObject): SoundSubmixWithParentBase
        fun C(Other: Any): SoundSubmixWithParentBase
    }
}

external open class SoundEffectPreset : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundEffectPreset
        fun Find(Outer: UObject, ResourceName: String): SoundEffectPreset
        fun GetDefaultObject(): SoundEffectPreset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectPreset
        fun C(Other: UObject): SoundEffectPreset
        fun C(Other: Any): SoundEffectPreset
    }
}

external open class SoundEffectSubmixPreset : SoundEffectPreset {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundEffectSubmixPreset
        fun Find(Outer: UObject, ResourceName: String): SoundEffectSubmixPreset
        fun GetDefaultObject(): SoundEffectSubmixPreset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectSubmixPreset
        fun C(Other: UObject): SoundEffectSubmixPreset
        fun C(Other: Any): SoundEffectSubmixPreset
    }
}

external open class SoundfieldEncodingSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundfieldEncodingSettingsBase
        fun Find(Outer: UObject, ResourceName: String): SoundfieldEncodingSettingsBase
        fun GetDefaultObject(): SoundfieldEncodingSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundfieldEncodingSettingsBase
        fun C(Other: UObject): SoundfieldEncodingSettingsBase
        fun C(Other: Any): SoundfieldEncodingSettingsBase
    }
}

external open class AudioLinkSettingsAbstract : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AudioLinkSettingsAbstract
        fun Find(Outer: UObject, ResourceName: String): AudioLinkSettingsAbstract
        fun GetDefaultObject(): AudioLinkSettingsAbstract
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AudioLinkSettingsAbstract
        fun C(Other: UObject): AudioLinkSettingsAbstract
        fun C(Other: Any): AudioLinkSettingsAbstract
    }
}

external object ESoundwaveSampleRateSettings {
    var Max: String /* "Max" */
    var High: String /* "High" */
    var Medium: String /* "Medium" */
    var Low: String /* "Low" */
    var Min: String /* "Min" */
    var MatchDevice: String /* "MatchDevice" */
    var ESoundwaveSampleRateSettings_MAX: String /* "ESoundwaveSampleRateSettings_MAX" */
}

external object ESoundGroup {
    var SOUNDGROUP_Default: String /* "SOUNDGROUP_Default" */
    var SOUNDGROUP_Effects: String /* "SOUNDGROUP_Effects" */
    var SOUNDGROUP_UI: String /* "SOUNDGROUP_UI" */
    var SOUNDGROUP_Music: String /* "SOUNDGROUP_Music" */
    var SOUNDGROUP_Voice: String /* "SOUNDGROUP_Voice" */
    var SOUNDGROUP_GameSoundGroup1: String /* "SOUNDGROUP_GameSoundGroup1" */
    var SOUNDGROUP_GameSoundGroup2: String /* "SOUNDGROUP_GameSoundGroup2" */
    var SOUNDGROUP_GameSoundGroup3: String /* "SOUNDGROUP_GameSoundGroup3" */
    var SOUNDGROUP_GameSoundGroup4: String /* "SOUNDGROUP_GameSoundGroup4" */
    var SOUNDGROUP_GameSoundGroup5: String /* "SOUNDGROUP_GameSoundGroup5" */
    var SOUNDGROUP_GameSoundGroup6: String /* "SOUNDGROUP_GameSoundGroup6" */
    var SOUNDGROUP_GameSoundGroup7: String /* "SOUNDGROUP_GameSoundGroup7" */
    var SOUNDGROUP_GameSoundGroup8: String /* "SOUNDGROUP_GameSoundGroup8" */
    var SOUNDGROUP_GameSoundGroup9: String /* "SOUNDGROUP_GameSoundGroup9" */
    var SOUNDGROUP_GameSoundGroup10: String /* "SOUNDGROUP_GameSoundGroup10" */
    var SOUNDGROUP_GameSoundGroup11: String /* "SOUNDGROUP_GameSoundGroup11" */
    var SOUNDGROUP_GameSoundGroup12: String /* "SOUNDGROUP_GameSoundGroup12" */
    var SOUNDGROUP_GameSoundGroup13: String /* "SOUNDGROUP_GameSoundGroup13" */
    var SOUNDGROUP_GameSoundGroup14: String /* "SOUNDGROUP_GameSoundGroup14" */
    var SOUNDGROUP_GameSoundGroup15: String /* "SOUNDGROUP_GameSoundGroup15" */
    var SOUNDGROUP_GameSoundGroup16: String /* "SOUNDGROUP_GameSoundGroup16" */
    var SOUNDGROUP_GameSoundGroup17: String /* "SOUNDGROUP_GameSoundGroup17" */
    var SOUNDGROUP_GameSoundGroup18: String /* "SOUNDGROUP_GameSoundGroup18" */
    var SOUNDGROUP_GameSoundGroup19: String /* "SOUNDGROUP_GameSoundGroup19" */
    var SOUNDGROUP_GameSoundGroup20: String /* "SOUNDGROUP_GameSoundGroup20" */
    var SOUNDGROUP_MAX: String /* "SOUNDGROUP_MAX" */
}

external object ESoundAssetCompressionType {
    var BinkAudio: String /* "BinkAudio" */
    var ADPCM: String /* "ADPCM" */
    var PCM: String /* "PCM" */
    var PlatformSpecific: String /* "PlatformSpecific" */
    var ESoundAssetCompressionType_MAX: String /* "ESoundAssetCompressionType_MAX" */
}

external object ESoundWaveFFTSize {
    var VerySmall_64: String /* "VerySmall_64" */
    var Small_256: String /* "Small_256" */
    var Medium_512: String /* "Medium_512" */
    var Large_1024: String /* "Large_1024" */
    var VeryLarge_2048: String /* "VeryLarge_2048" */
    var ESoundWaveFFTSize_MAX: String /* "ESoundWaveFFTSize_MAX" */
}

external object EModulationRouting {
    var Disable: String /* "Disable" */
    var Inherit: String /* "Inherit" */
    var Override: String /* "Override" */
    var EModulationRouting_MAX: String /* "EModulationRouting_MAX" */
}

external open class SoundModulationDefaultRoutingSettings : SoundModulationDefaultSettings {
    open var VolumeRouting: String /* "Disable" | "Inherit" | "Override" | "EModulationRouting_MAX" */
    open var PitchRouting: String /* "Disable" | "Inherit" | "Override" | "EModulationRouting_MAX" */
    open var HighpassRouting: String /* "Disable" | "Inherit" | "Override" | "EModulationRouting_MAX" */
    open var LowpassRouting: String /* "Disable" | "Inherit" | "Override" | "EModulationRouting_MAX" */
    override fun clone(): SoundModulationDefaultRoutingSettings

    companion object {
        fun C(Other: UObject): SoundModulationDefaultRoutingSettings
        fun C(Other: Any): SoundModulationDefaultRoutingSettings
    }
}

external open class SoundWaveSpectralDataEntry {
    open var Magnitude: Number
    open var NormalizedMagnitude: Number
    open fun clone(): SoundWaveSpectralDataEntry

    companion object {
        fun C(Other: UObject): SoundWaveSpectralDataEntry
        fun C(Other: Any): SoundWaveSpectralDataEntry
    }
}

external open class SoundWaveSpectralTimeData {
    open var Data: Array<SoundWaveSpectralDataEntry>
    open var TimeSec: Number
    open fun clone(): SoundWaveSpectralTimeData

    companion object {
        fun C(Other: UObject): SoundWaveSpectralTimeData
        fun C(Other: Any): SoundWaveSpectralTimeData
    }
}

external open class SoundWaveEnvelopeTimeData {
    open var Amplitude: Number
    open var TimeSec: Number
    open fun clone(): SoundWaveEnvelopeTimeData

    companion object {
        fun C(Other: UObject): SoundWaveEnvelopeTimeData
        fun C(Other: Any): SoundWaveEnvelopeTimeData
    }
}

external open class SoundWaveCuePoint {
    open var CuePointID: Number
    open var Label: String
    open var FramePosition: Number
    open var FrameLength: Number
    open fun clone(): SoundWaveCuePoint

    companion object {
        fun C(Other: UObject): SoundWaveCuePoint
        fun C(Other: Any): SoundWaveCuePoint
    }
}

external open class SubtitleCue {
    open var text: String
    open var Time: Number
    open fun clone(): SubtitleCue

    companion object {
        fun C(Other: UObject): SubtitleCue
        fun C(Other: Any): SubtitleCue
    }
}

external object EEvaluateCurveTableResult {
    var RowFound: String /* "RowFound" */
    var RowNotFound: String /* "RowNotFound" */
    var EEvaluateCurveTableResult_MAX: String /* "EEvaluateCurveTableResult_MAX" */
}

external interface `T$262` {
    var OutResult: String /* "RowFound" | "RowNotFound" | "EEvaluateCurveTableResult_MAX" */
    var OutXY: Number
}

external open class CurveTable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AssetImportData: AssetImportData
    open var ImportPath: String
    open fun AddRichCurve(Key: String, InCurve: RichCurve)
    open fun NotifyUpdateCurveTable()
    open fun EvaluateCurveTableRow(RowName: String, InXY: Number, OutResult: String /* "RowFound" | "RowNotFound" | "EEvaluateCurveTableResult_MAX" */ = definedExternally, OutXY: Number = definedExternally, ContextString: String = definedExternally): `T$262`

    companion object {
        fun Load(ResourceName: String): CurveTable
        fun Find(Outer: UObject, ResourceName: String): CurveTable
        fun GetDefaultObject(): CurveTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveTable
        fun C(Other: UObject): CurveTable
        fun C(Other: Any): CurveTable
        fun AddRichCurve(InCurveTable: CurveTable, Key: String, InCurve: RichCurve)
        fun NotifyUpdateCurveTable(InCurveTable: CurveTable)
        fun EvaluateCurveTableRow(CurveTable: CurveTable, RowName: String, InXY: Number, OutResult: String /* "RowFound" | "RowNotFound" | "EEvaluateCurveTableResult_MAX" */ = definedExternally, OutXY: Number = definedExternally, ContextString: String = definedExternally): `T$262`
    }
}

external open class SoundWave : SoundBase {
    constructor()
    constructor(Outer: UObject)
    open var CompressionQuality: Number
    open var StreamingPriority: Number
    open var SampleRateQuality: String /* "Max" | "High" | "Medium" | "Low" | "Min" | "MatchDevice" | "ESoundwaveSampleRateSettings_MAX" */
    open var SoundGroup: String /* "SOUNDGROUP_Default" | "SOUNDGROUP_Effects" | "SOUNDGROUP_UI" | "SOUNDGROUP_Music" | "SOUNDGROUP_Voice" | "SOUNDGROUP_GameSoundGroup1" | "SOUNDGROUP_GameSoundGroup2" | "SOUNDGROUP_GameSoundGroup3" | "SOUNDGROUP_GameSoundGroup4" | "SOUNDGROUP_GameSoundGroup5" | "SOUNDGROUP_GameSoundGroup6" | "SOUNDGROUP_GameSoundGroup7" | "SOUNDGROUP_GameSoundGroup8" | "SOUNDGROUP_GameSoundGroup9" | "SOUNDGROUP_GameSoundGroup10" | "SOUNDGROUP_GameSoundGroup11" | "SOUNDGROUP_GameSoundGroup12" | "SOUNDGROUP_GameSoundGroup13" | "SOUNDGROUP_GameSoundGroup14" | "SOUNDGROUP_GameSoundGroup15" | "SOUNDGROUP_GameSoundGroup16" | "SOUNDGROUP_GameSoundGroup17" | "SOUNDGROUP_GameSoundGroup18" | "SOUNDGROUP_GameSoundGroup19" | "SOUNDGROUP_GameSoundGroup20" | "SOUNDGROUP_MAX" */
    open var bLooping: Boolean
    open var bStreaming: Boolean
    open var SoundAssetCompressionType: String /* "BinkAudio" | "ADPCM" | "PCM" | "PlatformSpecific" | "ESoundAssetCompressionType_MAX" */
    open var bSeekableStreaming: Boolean
    open var bUseBinkAudio: Boolean
    open var OverrideSoundToUseForAnalysis: SoundWave
    open var TreatFileAsLoopingForAnalysis: Boolean
    open var bEnableBakedFFTAnalysis: Boolean
    open var bEnableAmplitudeEnvelopeAnalysis: Boolean
    open var FFTSize: String /* "VerySmall_64" | "Small_256" | "Medium_512" | "Large_1024" | "VeryLarge_2048" | "ESoundWaveFFTSize_MAX" */
    open var FFTAnalysisFrameSize: Number
    open var FFTAnalysisAttackTime: Number
    open var FFTAnalysisReleaseTime: Number
    open var EnvelopeFollowerFrameSize: Number
    open var EnvelopeFollowerAttackTime: Number
    open var EnvelopeFollowerReleaseTime: Number
    open var ModulationSettings: SoundModulationDefaultRoutingSettings
    open var FrequenciesToAnalyze: Array<Number>
    open var CookedSpectralTimeData: Array<SoundWaveSpectralTimeData>
    open var CookedEnvelopeTimeData: Array<SoundWaveEnvelopeTimeData>
    open var InitialChunkSize: Number
    open var bMature: Boolean
    open var bManualWordWrap: Boolean
    open var bSingleLine: Boolean
    open var bVirtualizeWhenSilent: Boolean
    open var bIsAmbisonics: Boolean
    open var LoadingBehavior: String /* "Inherited" | "RetainOnLoad" | "PrimeOnLoad" | "LoadOnDemand" | "ForceInline" | "Uninitialized" | "ESoundWaveLoadingBehavior_MAX" */
    open var SpokenText: String
    open var SubtitlePriority: Number
    open var Volume: Number
    open var Pitch: Number
    open var NumChannels: Number
    open var CuePoints: Array<SoundWaveCuePoint>
    open var ChannelOffsets: Array<Number>
    open var ChannelSizes: Array<Number>
    open var SampleRate: Number
    open var ImportedSampleRate: Number
    open var Subtitles: Array<SubtitleCue>
    open var Comment: String
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var AssetImportData: AssetImportData
    open var Curves: CurveTable
    open var InternalCurves: CurveTable
    open fun SetSoundAssetCompressionType(InSoundAssetCompressionType: String /* "BinkAudio" | "ADPCM" | "PCM" | "PlatformSpecific" | "ESoundAssetCompressionType_MAX" */)
    open fun GetSoundAssetCompressionType(): String /* "BinkAudio" | "ADPCM" | "PCM" | "PlatformSpecific" | "ESoundAssetCompressionType_MAX" */
    open fun PrimeSoundForPlayback(OnLoadCompletion: UnrealEngineDelegate<(LoadedSoundWave: SoundWave, WasCancelled: Boolean) -> Unit>)

    companion object {
        fun Load(ResourceName: String): SoundWave
        fun Find(Outer: UObject, ResourceName: String): SoundWave
        fun GetDefaultObject(): SoundWave
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundWave
        fun C(Other: UObject): SoundWave
        fun C(Other: Any): SoundWave
        fun PrimeSoundForPlayback(SoundWave: SoundWave, OnLoadCompletion: UnrealEngineDelegate<(LoadedSoundWave: SoundWave, WasCancelled: Boolean) -> Unit>)
    }
}

external object EAudioRecordingExportType {
    var SoundWave: String /* "SoundWave" */
    var WavFile: String /* "WavFile" */
    var EAudioRecordingExportType_MAX: String /* "EAudioRecordingExportType_MAX" */
}

external object EFFTSize {
    var DefaultSize: String /* "DefaultSize" */
    var Min: String /* "Min" */
    var Small: String /* "Small" */
    var Medium: String /* "Medium" */
    var Large: String /* "Large" */
    var VeryLarge: String /* "VeryLarge" */
    var Max: String /* "Max" */
    var EFFTSize_MAX: String /* "EFFTSize_MAX" */
}

external object EFFTPeakInterpolationMethod {
    var NearestNeighbor: String /* "NearestNeighbor" */
    var Linear: String /* "Linear" */
    var Quadratic: String /* "Quadratic" */
    var ConstantQ: String /* "ConstantQ" */
    var EFFTPeakInterpolationMethod_MAX: String /* "EFFTPeakInterpolationMethod_MAX" */
}

external object EFFTWindowType {
    var None: String /* "None" */
    var Hamming: String /* "Hamming" */
    var Hann: String /* "Hann" */
    var Blackman: String /* "Blackman" */
    var EFFTWindowType_MAX: String /* "EFFTWindowType_MAX" */
}

external object EAudioSpectrumType {
    var MagnitudeSpectrum: String /* "MagnitudeSpectrum" */
    var PowerSpectrum: String /* "PowerSpectrum" */
    var Decibel: String /* "Decibel" */
    var EAudioSpectrumType_MAX: String /* "EAudioSpectrumType_MAX" */
}

external open class SoundSubmix : SoundSubmixWithParentBase {
    constructor()
    constructor(Outer: UObject)
    open var bMuteWhenBackgrounded: Boolean
    open var SubmixEffectChain: Array<SoundEffectSubmixPreset>
    open var AmbisonicsPluginSettings: SoundfieldEncodingSettingsBase
    open var EnvelopeFollowerAttackTime: Number
    open var EnvelopeFollowerReleaseTime: Number
    open var OutputVolume: Number
    open var WetLevel: Number
    open var DryLevel: Number
    open var OutputVolumeModulation: SoundModulationDestinationSettings
    open var WetLevelModulation: SoundModulationDestinationSettings
    open var DryLevelModulation: SoundModulationDestinationSettings
    open var AudioLinkSettings: AudioLinkSettingsAbstract
    open var OnSubmixRecordedFileDone: UnrealEngineMulticastDelegate<(ResultingSoundWave: SoundWave) -> Unit>
    open fun StopSpectralAnalysis(WorldContextObject: UObject)
    open fun FinishRecordingOutput(WorldContextObject: UObject, ExportType: String /* "SoundWave" | "WavFile" | "EAudioRecordingExportType_MAX" */, Name: String, Path: String, ExistingSoundWaveToOverwrite: SoundWave)
    open fun StopEnvelopeFollowing(WorldContextObject: UObject)
    open fun StartSpectralAnalysis(WorldContextObject: UObject, FFTSize: String /* "DefaultSize" | "Min" | "Small" | "Medium" | "Large" | "VeryLarge" | "Max" | "EFFTSize_MAX" */, InterpolationMethod: String /* "NearestNeighbor" | "Linear" | "Quadratic" | "ConstantQ" | "EFFTPeakInterpolationMethod_MAX" */, WindowType: String /* "None" | "Hamming" | "Hann" | "Blackman" | "EFFTWindowType_MAX" */, HopSize: Number, SpectrumType: String /* "MagnitudeSpectrum" | "PowerSpectrum" | "Decibel" | "EAudioSpectrumType_MAX" */)
    open fun StartRecordingSubmixOutput(WorldContextObject: UObject, ExpectedDuration: Number)
    open fun StartEnvelopeFollowing(WorldContextObject: UObject)
    open fun SetSubmixWetLevel(WorldContextObject: UObject, InWetLevel: Number)
    open fun SetSubmixOutputVolume(WorldContextObject: UObject, InOutputVolume: Number)
    open fun SetSubmixDryLevel(WorldContextObject: UObject, InDryLevel: Number)

    companion object {
        fun Load(ResourceName: String): SoundSubmix
        fun Find(Outer: UObject, ResourceName: String): SoundSubmix
        fun GetDefaultObject(): SoundSubmix
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundSubmix
        fun C(Other: UObject): SoundSubmix
        fun C(Other: Any): SoundSubmix
    }
}

external open class SoundClassProperties {
    open var Volume: Number
    open var Pitch: Number
    open var LowPassFilterFrequency: Number
    open var AttenuationDistanceScale: Number
    open var LFEBleed: Number
    open var VoiceCenterChannelVolume: Number
    open var RadioFilterVolume: Number
    open var RadioFilterVolumeThreshold: Number
    open var bApplyEffects: Boolean
    open var bAlwaysPlay: Boolean
    open var bIsUISound: Boolean
    open var bIsMusic: Boolean
    open var bCenterChannelOnly: Boolean
    open var bApplyAmbientVolumes: Boolean
    open var bReverb: Boolean
    open var Default2DReverbSendAmount: Number
    open var ModulationSettings: SoundModulationDefaultSettings
    open var OutputTarget: String /* "Speaker" | "Controller" | "ControllerFallbackToSpeaker" | "EAudioOutputTarget_MAX" */
    open var LoadingBehavior: String /* "Inherited" | "RetainOnLoad" | "PrimeOnLoad" | "LoadOnDemand" | "ForceInline" | "Uninitialized" | "ESoundWaveLoadingBehavior_MAX" */
    open var DefaultSubmix: SoundSubmix
    open fun clone(): SoundClassProperties

    companion object {
        fun C(Other: UObject): SoundClassProperties
        fun C(Other: Any): SoundClassProperties
    }
}

external open class AudioEffectParameters {
    open fun clone(): AudioEffectParameters

    companion object {
        fun C(Other: UObject): AudioEffectParameters
        fun C(Other: Any): AudioEffectParameters
    }
}

external open class AudioEQEffect : AudioEffectParameters {
    open var FrequencyCenter0: Number
    open var Gain0: Number
    open var Bandwidth0: Number
    open var FrequencyCenter1: Number
    open var Gain1: Number
    open var Bandwidth1: Number
    open var FrequencyCenter2: Number
    open var Gain2: Number
    open var Bandwidth2: Number
    open var FrequencyCenter3: Number
    open var Gain3: Number
    open var Bandwidth3: Number
    override fun clone(): AudioEQEffect

    companion object {
        fun C(Other: UObject): AudioEQEffect
        fun C(Other: Any): AudioEQEffect
    }
}

external open class SoundClassAdjuster {
    open var SoundClassObject: SoundClass
    open var VolumeAdjuster: Number
    open var PitchAdjuster: Number
    open var LowPassFilterFrequency: Number
    open var bApplyToChildren: Boolean
    open var VoiceCenterChannelVolumeAdjuster: Number
    open fun clone(): SoundClassAdjuster

    companion object {
        fun C(Other: UObject): SoundClassAdjuster
        fun C(Other: Any): SoundClassAdjuster
    }
}

external open class SoundMix : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bApplyEQ: Boolean
    open var EQPriority: Number
    open var EQSettings: AudioEQEffect
    open var SoundClassEffects: Array<SoundClassAdjuster>
    open var InitialDelay: Number
    open var FadeInTime: Number
    open var Duration: Number
    open var FadeOutTime: Number
    open var bChanged: Boolean

    companion object {
        fun Load(ResourceName: String): SoundMix
        fun Find(Outer: UObject, ResourceName: String): SoundMix
        fun GetDefaultObject(): SoundMix
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundMix
        fun C(Other: UObject): SoundMix
        fun C(Other: Any): SoundMix
    }
}

external open class PassiveSoundMixModifier {
    open var SoundMix: SoundMix
    open var MinVolumeThreshold: Number
    open var MaxVolumeThreshold: Number
    open fun clone(): PassiveSoundMixModifier

    companion object {
        fun C(Other: UObject): PassiveSoundMixModifier
        fun C(Other: Any): PassiveSoundMixModifier
    }
}

external open class SoundClass : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Properties: SoundClassProperties
    open var ChildClasses: Array<SoundClass>
    open var PassiveSoundMixModifiers: Array<PassiveSoundMixModifier>
    open var ParentClass: SoundClass
    open fun PrimeAllSoundsInSoundClass()
    open fun UnRetainAllSoundsInSoundClass()

    companion object {
        fun Load(ResourceName: String): SoundClass
        fun Find(Outer: UObject, ResourceName: String): SoundClass
        fun GetDefaultObject(): SoundClass
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundClass
        fun C(Other: UObject): SoundClass
        fun C(Other: Any): SoundClass
        fun PrimeAllSoundsInSoundClass(InSoundClass: SoundClass)
        fun UnRetainAllSoundsInSoundClass(InSoundClass: SoundClass)
    }
}

external object EVirtualizationMode {
    var Disabled: String /* "Disabled" */
    var PlayWhenSilent: String /* "PlayWhenSilent" */
    var Restart: String /* "Restart" */
    var EVirtualizationMode_MAX: String /* "EVirtualizationMode_MAX" */
}

external object EMaxConcurrentResolutionRule {
    var PreventNew: String /* "PreventNew" */
    var StopOldest: String /* "StopOldest" */
    var StopFarthestThenPreventNew: String /* "StopFarthestThenPreventNew" */
    var StopFarthestThenOldest: String /* "StopFarthestThenOldest" */
    var StopLowestPriority: String /* "StopLowestPriority" */
    var StopQuietest: String /* "StopQuietest" */
    var StopLowestPriorityThenPreventNew: String /* "StopLowestPriorityThenPreventNew" */
    var Count: String /* "Count" */
    var EMaxConcurrentResolutionRule_MAX: String /* "EMaxConcurrentResolutionRule_MAX" */
}

external object EConcurrencyVolumeScaleMode {
    var Default: String /* "Default" */
    var Distance: String /* "Distance" */
    var Priority: String /* "Priority" */
    var EConcurrencyVolumeScaleMode_MAX: String /* "EConcurrencyVolumeScaleMode_MAX" */
}

external open class SoundConcurrencySettings {
    open var MaxCount: Number
    open var bLimitToOwner: Boolean
    open var ResolutionRule: String /* "PreventNew" | "StopOldest" | "StopFarthestThenPreventNew" | "StopFarthestThenOldest" | "StopLowestPriority" | "StopQuietest" | "StopLowestPriorityThenPreventNew" | "Count" | "EMaxConcurrentResolutionRule_MAX" */
    open var RetriggerTime: Number
    open var VolumeScale: Number
    open var VolumeScaleMode: String /* "Default" | "Distance" | "Priority" | "EConcurrencyVolumeScaleMode_MAX" */
    open var VolumeScaleAttackTime: Number
    open var bVolumeScaleCanRelease: Boolean
    open var VolumeScaleReleaseTime: Number
    open var VoiceStealReleaseTime: Number
    open fun clone(): SoundConcurrencySettings

    companion object {
        fun C(Other: UObject): SoundConcurrencySettings
        fun C(Other: Any): SoundConcurrencySettings
    }
}

external open class SoundConcurrency : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Concurrency: SoundConcurrencySettings

    companion object {
        fun Load(ResourceName: String): SoundConcurrency
        fun Find(Outer: UObject, ResourceName: String): SoundConcurrency
        fun GetDefaultObject(): SoundConcurrency
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundConcurrency
        fun C(Other: UObject): SoundConcurrency
        fun C(Other: Any): SoundConcurrency
    }
}

external object ESoundSpatializationAlgorithm {
    var SPATIALIZATION_Default: String /* "SPATIALIZATION_Default" */
    var SPATIALIZATION_HRTF: String /* "SPATIALIZATION_HRTF" */
    var SPATIALIZATION_MAX: String /* "SPATIALIZATION_MAX" */
}

external object EAirAbsorptionMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var EAirAbsorptionMethod_MAX: String /* "EAirAbsorptionMethod_MAX" */
}

external object EReverbSendMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var EReverbSendMethod_MAX: String /* "EReverbSendMethod_MAX" */
}

external object EPriorityAttenuationMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var EPriorityAttenuationMethod_MAX: String /* "EPriorityAttenuationMethod_MAX" */
}

external object ESoundDistanceCalc {
    var SOUNDDISTANCE_Normal: String /* "SOUNDDISTANCE_Normal" */
    var SOUNDDISTANCE_InfiniteXYPlane: String /* "SOUNDDISTANCE_InfiniteXYPlane" */
    var SOUNDDISTANCE_InfiniteXZPlane: String /* "SOUNDDISTANCE_InfiniteXZPlane" */
    var SOUNDDISTANCE_InfiniteYZPlane: String /* "SOUNDDISTANCE_InfiniteYZPlane" */
    var SOUNDDISTANCE_MAX: String /* "SOUNDDISTANCE_MAX" */
}

external open class SpatializationPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SpatializationPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): SpatializationPluginSourceSettingsBase
        fun GetDefaultObject(): SpatializationPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SpatializationPluginSourceSettingsBase
        fun C(Other: UObject): SpatializationPluginSourceSettingsBase
        fun C(Other: Any): SpatializationPluginSourceSettingsBase
    }
}

external open class OcclusionPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): OcclusionPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): OcclusionPluginSourceSettingsBase
        fun GetDefaultObject(): OcclusionPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): OcclusionPluginSourceSettingsBase
        fun C(Other: UObject): OcclusionPluginSourceSettingsBase
        fun C(Other: Any): OcclusionPluginSourceSettingsBase
    }
}

external open class ReverbPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReverbPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): ReverbPluginSourceSettingsBase
        fun GetDefaultObject(): ReverbPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReverbPluginSourceSettingsBase
        fun C(Other: UObject): ReverbPluginSourceSettingsBase
        fun C(Other: Any): ReverbPluginSourceSettingsBase
    }
}

external object ESubmixSendMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var ESubmixSendMethod_MAX: String /* "ESubmixSendMethod_MAX" */
}

external open class AttenuationSubmixSendSettings {
    open var Submix: SoundSubmixBase
    open var SubmixSendMethod: String /* "Linear" | "CustomCurve" | "Manual" | "ESubmixSendMethod_MAX" */
    open var SubmixSendLevelMin: Number
    open var SubmixSendLevelMax: Number
    open var SubmixSendDistanceMin: Number
    open var SubmixSendDistanceMax: Number
    open var ManualSubmixSendLevel: Number
    open var CustomSubmixSendCurve: RuntimeFloatCurve
    open fun clone(): AttenuationSubmixSendSettings

    companion object {
        fun C(Other: UObject): AttenuationSubmixSendSettings
        fun C(Other: Any): AttenuationSubmixSendSettings
    }
}

external open class SourceDataOverridePluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SourceDataOverridePluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): SourceDataOverridePluginSourceSettingsBase
        fun GetDefaultObject(): SourceDataOverridePluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SourceDataOverridePluginSourceSettingsBase
        fun C(Other: UObject): SourceDataOverridePluginSourceSettingsBase
        fun C(Other: Any): SourceDataOverridePluginSourceSettingsBase
    }
}

external open class SoundAttenuationPluginSettings {
    open var SpatializationPluginSettingsArray: Array<SpatializationPluginSourceSettingsBase>
    open var OcclusionPluginSettingsArray: Array<OcclusionPluginSourceSettingsBase>
    open var ReverbPluginSettingsArray: Array<ReverbPluginSourceSettingsBase>
    open var SourceDataOverridePluginSettingsArray: Array<SourceDataOverridePluginSourceSettingsBase>
    open fun clone(): SoundAttenuationPluginSettings

    companion object {
        fun C(Other: UObject): SoundAttenuationPluginSettings
        fun C(Other: Any): SoundAttenuationPluginSettings
    }
}

external open class SoundAttenuationSettings : BaseAttenuationSettings {
    open var bAttenuate: Boolean
    open var bSpatialize: Boolean
    open var bAttenuateWithLPF: Boolean
    open var bEnableListenerFocus: Boolean
    open var bEnableFocusInterpolation: Boolean
    open var bEnableOcclusion: Boolean
    open var bUseComplexCollisionForOcclusion: Boolean
    open var bEnableReverbSend: Boolean
    open var bEnablePriorityAttenuation: Boolean
    open var bApplyNormalizationToStereoSounds: Boolean
    open var bEnableLogFrequencyScaling: Boolean
    open var bEnableSubmixSends: Boolean
    open var bEnableSourceDataOverride: Boolean
    open var SpatializationAlgorithm: String /* "SPATIALIZATION_Default" | "SPATIALIZATION_HRTF" | "SPATIALIZATION_MAX" */
    open var BinauralRadius: Number
    open var AbsorptionMethod: String /* "Linear" | "CustomCurve" | "EAirAbsorptionMethod_MAX" */
    open var OcclusionTraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var ReverbSendMethod: String /* "Linear" | "CustomCurve" | "Manual" | "EReverbSendMethod_MAX" */
    open var PriorityAttenuationMethod: String /* "Linear" | "CustomCurve" | "Manual" | "EPriorityAttenuationMethod_MAX" */
    open var DistanceType: String /* "SOUNDDISTANCE_Normal" | "SOUNDDISTANCE_InfiniteXYPlane" | "SOUNDDISTANCE_InfiniteXZPlane" | "SOUNDDISTANCE_InfiniteYZPlane" | "SOUNDDISTANCE_MAX" */
    open var OmniRadius: Number
    open var StereoSpread: Number
    open var SpatializationPluginSettings: SpatializationPluginSourceSettingsBase
    open var RadiusMin: Number
    open var RadiusMax: Number
    open var LPFRadiusMin: Number
    open var LPFRadiusMax: Number
    open var CustomLowpassAirAbsorptionCurve: RuntimeFloatCurve
    open var CustomHighpassAirAbsorptionCurve: RuntimeFloatCurve
    open var LPFFrequencyAtMin: Number
    open var LPFFrequencyAtMax: Number
    open var HPFFrequencyAtMin: Number
    open var HPFFrequencyAtMax: Number
    open var FocusAzimuth: Number
    open var NonFocusAzimuth: Number
    open var FocusDistanceScale: Number
    open var NonFocusDistanceScale: Number
    open var FocusPriorityScale: Number
    open var NonFocusPriorityScale: Number
    open var FocusVolumeAttenuation: Number
    open var NonFocusVolumeAttenuation: Number
    open var FocusAttackInterpSpeed: Number
    open var FocusReleaseInterpSpeed: Number
    open var OcclusionLowPassFilterFrequency: Number
    open var OcclusionVolumeAttenuation: Number
    open var OcclusionInterpolationTime: Number
    open var OcclusionPluginSettings: OcclusionPluginSourceSettingsBase
    open var ReverbPluginSettings: ReverbPluginSourceSettingsBase
    open var ReverbWetLevelMin: Number
    open var ReverbWetLevelMax: Number
    open var ReverbDistanceMin: Number
    open var ReverbDistanceMax: Number
    open var ManualReverbSendLevel: Number
    open var CustomReverbSendCurve: RuntimeFloatCurve
    open var SubmixSendSettings: Array<AttenuationSubmixSendSettings>
    open var PriorityAttenuationMin: Number
    open var PriorityAttenuationMax: Number
    open var PriorityAttenuationDistanceMin: Number
    open var PriorityAttenuationDistanceMax: Number
    open var ManualPriorityAttenuation: Number
    open var CustomPriorityAttenuationCurve: RuntimeFloatCurve
    open var PluginSettings: SoundAttenuationPluginSettings
    override fun clone(): SoundAttenuationSettings

    companion object {
        fun C(Other: UObject): SoundAttenuationSettings
        fun C(Other: Any): SoundAttenuationSettings
    }
}

external open class SoundAttenuation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Attenuation: SoundAttenuationSettings

    companion object {
        fun Load(ResourceName: String): SoundAttenuation
        fun Find(Outer: UObject, ResourceName: String): SoundAttenuation
        fun GetDefaultObject(): SoundAttenuation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundAttenuation
        fun C(Other: UObject): SoundAttenuation
        fun C(Other: Any): SoundAttenuation
    }
}

external object ESendLevelControlMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var ESendLevelControlMethod_MAX: String /* "ESendLevelControlMethod_MAX" */
}

external object ESubmixSendStage {
    var PostDistanceAttenuation: String /* "PostDistanceAttenuation" */
    var PreDistanceAttenuation: String /* "PreDistanceAttenuation" */
    var ESubmixSendStage_MAX: String /* "ESubmixSendStage_MAX" */
}

external open class SoundSubmixSendInfo {
    open var SendLevelControlMethod: String /* "Linear" | "CustomCurve" | "Manual" | "ESendLevelControlMethod_MAX" */
    open var SendStage: String /* "PostDistanceAttenuation" | "PreDistanceAttenuation" | "ESubmixSendStage_MAX" */
    open var SoundSubmix: SoundSubmixBase
    open var SendLevel: Number
    open var DisableManualSendClamp: Boolean
    open var MinSendLevel: Number
    open var MaxSendLevel: Number
    open var MinSendDistance: Number
    open var MaxSendDistance: Number
    open var CustomSendLevelCurve: RuntimeFloatCurve
    open fun clone(): SoundSubmixSendInfo

    companion object {
        fun C(Other: UObject): SoundSubmixSendInfo
        fun C(Other: Any): SoundSubmixSendInfo
    }
}

external open class SoundEffectSourcePreset : SoundEffectPreset {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundEffectSourcePreset
        fun Find(Outer: UObject, ResourceName: String): SoundEffectSourcePreset
        fun GetDefaultObject(): SoundEffectSourcePreset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectSourcePreset
        fun C(Other: UObject): SoundEffectSourcePreset
        fun C(Other: Any): SoundEffectSourcePreset
    }
}

external open class SourceEffectChainEntry {
    open var Preset: SoundEffectSourcePreset
    open var bBypass: Boolean
    open fun clone(): SourceEffectChainEntry

    companion object {
        fun C(Other: UObject): SourceEffectChainEntry
        fun C(Other: Any): SourceEffectChainEntry
    }
}

external open class SoundEffectSourcePresetChain : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Chain: Array<SourceEffectChainEntry>
    open var bPlayEffectChainTails: Boolean

    companion object {
        fun Load(ResourceName: String): SoundEffectSourcePresetChain
        fun Find(Outer: UObject, ResourceName: String): SoundEffectSourcePresetChain
        fun GetDefaultObject(): SoundEffectSourcePresetChain
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectSourcePresetChain
        fun C(Other: UObject): SoundEffectSourcePresetChain
        fun C(Other: Any): SoundEffectSourcePresetChain
    }
}

external object ESourceBusSendLevelControlMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var ESourceBusSendLevelControlMethod_MAX: String /* "ESourceBusSendLevelControlMethod_MAX" */
}

external object ESourceBusChannels {
    var Mono: String /* "Mono" */
    var Stereo: String /* "Stereo" */
    var ESourceBusChannels_MAX: String /* "ESourceBusChannels_MAX" */
}

external object EAudioBusChannels {
    var Mono: String /* "Mono" */
    var Stereo: String /* "Stereo" */
    var Quad: String /* "Quad" */
    var FivePointOne: String /* "FivePointOne" */
    var SevenPointOne: String /* "SevenPointOne" */
    var EAudioBusChannels_MAX: String /* "EAudioBusChannels_MAX" */
}

external open class AudioBus : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AudioBusChannels: String /* "Mono" | "Stereo" | "Quad" | "FivePointOne" | "SevenPointOne" | "EAudioBusChannels_MAX" */

    companion object {
        fun Load(ResourceName: String): AudioBus
        fun Find(Outer: UObject, ResourceName: String): AudioBus
        fun GetDefaultObject(): AudioBus
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AudioBus
        fun C(Other: UObject): AudioBus
        fun C(Other: Any): AudioBus
    }
}

external open class SoundSourceBus : SoundWave {
    constructor()
    constructor(Outer: UObject)
    open var SourceBusChannels: String /* "Mono" | "Stereo" | "ESourceBusChannels_MAX" */
    open var SourceBusDuration: Number
    open var AudioBus: AudioBus
    open var bAutoDeactivateWhenSilent: Boolean

    companion object {
        fun Load(ResourceName: String): SoundSourceBus
        fun Find(Outer: UObject, ResourceName: String): SoundSourceBus
        fun GetDefaultObject(): SoundSourceBus
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundSourceBus
        fun C(Other: UObject): SoundSourceBus
        fun C(Other: Any): SoundSourceBus
    }
}

external open class SoundSourceBusSendInfo {
    open var SourceBusSendLevelControlMethod: String /* "Linear" | "CustomCurve" | "Manual" | "ESourceBusSendLevelControlMethod_MAX" */
    open var SoundSourceBus: SoundSourceBus
    open var AudioBus: AudioBus
    open var SendLevel: Number
    open var MinSendLevel: Number
    open var MaxSendLevel: Number
    open var MinSendDistance: Number
    open var MaxSendDistance: Number
    open var CustomSendLevelCurve: RuntimeFloatCurve
    open fun clone(): SoundSourceBusSendInfo

    companion object {
        fun C(Other: UObject): SoundSourceBusSendInfo
        fun C(Other: Any): SoundSourceBusSendInfo
    }
}

external object EAudioParameterType {
    var None: String /* "None" */
    var Boolean: String /* "Boolean" */
    var Integer: String /* "Integer" */
    var Float: String /* "Float" */
    var String: String /* "String" */
    var Object: String /* "Object" */
    var NoneArray: String /* "NoneArray" */
    var BooleanArray: String /* "BooleanArray" */
    var IntegerArray: String /* "IntegerArray" */
    var FloatArray: String /* "FloatArray" */
    var StringArray: String /* "StringArray" */
    var ObjectArray: String /* "ObjectArray" */
    var COUNT: String /* "COUNT" */
    var EAudioParameterType_MAX: String /* "EAudioParameterType_MAX" */
}

external open class AudioParameter {
    open var ParamName: String
    open var FloatParam: Number
    open var BoolParam: Boolean
    open var IntParam: Number
    open var ObjectParam: UObject
    open var StringParam: String
    open var ArrayFloatParam: Array<Number>
    open var ArrayBoolParam: Array<Boolean>
    open var ArrayIntParam: Array<Number>
    open var ArrayObjectParam: Array<UObject>
    open var ArrayStringParam: Array<String>
    open var ParamType: String /* "None" | "Boolean" | "Integer" | "Float" | "String" | "Object" | "NoneArray" | "BooleanArray" | "IntegerArray" | "FloatArray" | "StringArray" | "ObjectArray" | "COUNT" | "EAudioParameterType_MAX" */
    open var TypeName: String
    open fun clone(): AudioParameter

    companion object {
        fun C(Other: UObject): AudioParameter
        fun C(Other: Any): AudioParameter
        fun BooleanArrayToAudioParameter(Name: String, Bools: Array<Boolean>): AudioParameter
        fun BooleanToAudioParameter(Name: String, bool: Boolean): AudioParameter
        fun FloatArrayToAudioParameter(Name: String, Floats: Array<Number>): AudioParameter
        fun FloatToAudioParameter(Name: String, float: Number): AudioParameter
        fun IntegerArrayToAudioParameter(Name: String, Integers: Array<Number>): AudioParameter
        fun IntegerToAudioParameter(Name: String, Integer: Number): AudioParameter
        fun ObjectArrayToAudioParameter(Name: String, Objects: Array<UObject>): AudioParameter
        fun ObjectToAudioParameter(Name: String, UObject: UObject): AudioParameter
        fun StringArrayToAudioParameter(Name: String, Strings: Array<String>): AudioParameter
        fun StringToAudioParameter(Name: String, string: String): AudioParameter
    }
}

external object EAudioComponentPlayState {
    var Playing: String /* "Playing" */
    var Stopped: String /* "Stopped" */
    var Paused: String /* "Paused" */
    var FadingIn: String /* "FadingIn" */
    var FadingOut: String /* "FadingOut" */
    var Count: String /* "Count" */
    var EAudioComponentPlayState_MAX: String /* "EAudioComponentPlayState_MAX" */
}

external open class SoundWaveSpectralData {
    open var FrequencyHz: Number
    open var Magnitude: Number
    open var NormalizedMagnitude: Number
    open fun clone(): SoundWaveSpectralData

    companion object {
        fun C(Other: UObject): SoundWaveSpectralData
        fun C(Other: Any): SoundWaveSpectralData
    }
}

external open class SoundWaveSpectralDataPerSound {
    open var SpectralData: Array<SoundWaveSpectralData>
    open var PlaybackTime: Number
    open var SoundWave: SoundWave
    open fun clone(): SoundWaveSpectralDataPerSound

    companion object {
        fun C(Other: UObject): SoundWaveSpectralDataPerSound
        fun C(Other: Any): SoundWaveSpectralDataPerSound
    }
}

external open class SoundWaveEnvelopeDataPerSound {
    open var Envelope: Number
    open var PlaybackTime: Number
    open var SoundWave: SoundWave
    open fun clone(): SoundWaveEnvelopeDataPerSound

    companion object {
        fun C(Other: UObject): SoundWaveEnvelopeDataPerSound
        fun C(Other: Any): SoundWaveEnvelopeDataPerSound
    }
}

external object EAudioFaderCurve {
    var Linear: String /* "Linear" */
    var Logarithmic: String /* "Logarithmic" */
    var SCurve: String /* "SCurve" */
    var Sin: String /* "Sin" */
    var Count: String /* "Count" */
    var EAudioFaderCurve_MAX: String /* "EAudioFaderCurve_MAX" */
}

external interface `T$263` {
    var OutSoundWaveSpectralData: Array<SoundWaveSpectralDataPerSound>
    var `$`: Boolean
}

external interface `T$264` {
    var OutSoundWaveSpectralData: Array<SoundWaveSpectralData>
    var `$`: Boolean
}

external interface `T$265` {
    var OutEnvelopeData: Array<SoundWaveEnvelopeDataPerSound>
    var `$`: Boolean
}

external interface `T$266` {
    var OutEnvelopeData: Number
    var `$`: Boolean
}

external interface `T$267` {
    var OutAttenuationSettings: SoundAttenuationSettings
    var `$`: Boolean
}

external open class AudioComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var Sound: SoundBase
    open var DefaultParameters: Array<AudioParameter>
    open var InstanceParameters: Array<AudioParameter>
    open var SoundClassOverride: SoundClass
    open var bAutoDestroy: Boolean
    open var bStopWhenOwnerDestroyed: Boolean
    open var bShouldRemainActiveIfDropped: Boolean
    open var bAllowSpatialization: Boolean
    open var bOverrideAttenuation: Boolean
    open var bOverrideSubtitlePriority: Boolean
    open var bIsUISound: Boolean
    open var bEnableLowPassFilter: Boolean
    open var bOverridePriority: Boolean
    open var bSuppressSubtitles: Boolean
    open var bCanPlayMultipleInstances: Boolean
    open var bDisableParameterUpdatesWhilePlaying: Boolean
    open var bAutoManageAttachment: Boolean
    open var AudioComponentUserID: String
    open var PitchModulationMin: Number
    open var PitchModulationMax: Number
    open var VolumeModulationMin: Number
    open var VolumeModulationMax: Number
    open var VolumeMultiplier: Number
    open var EnvelopeFollowerAttackTime: Number
    open var EnvelopeFollowerReleaseTime: Number
    open var Priority: Number
    open var SubtitlePriority: Number
    open var SourceEffectChain: SoundEffectSourcePresetChain
    open var VolumeWeightedPriorityScale: Number
    open var HighFrequencyGainMultiplier: Number
    open var PitchMultiplier: Number
    open var LowPassFilterFrequency: Number
    open var AttenuationSettings: SoundAttenuation
    open var AttenuationOverrides: SoundAttenuationSettings
    open var ConcurrencySettings: SoundConcurrency
    open var ConcurrencySet: Any
    open var AutoAttachLocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachRotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var ModulationRouting: SoundModulationDefaultRoutingSettings
    open var OnAudioPlayStateChanged: UnrealEngineMulticastDelegate<(PlayState: String /* "Playing" | "Stopped" | "Paused" | "FadingIn" | "FadingOut" | "Count" | "EAudioComponentPlayState_MAX" */) -> Unit>
    open var OnAudioVirtualizationChanged: UnrealEngineMulticastDelegate<(bIsVirtualized: Boolean) -> Unit>
    open var OnAudioFinished: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnAudioPlaybackPercent: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: Number) -> Unit>
    open var OnAudioSingleEnvelopeValue: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, EnvelopeValue: Number) -> Unit>
    open var OnAudioMultiEnvelopeValue: UnrealEngineMulticastDelegate<(AverageEnvelopeValue: Number, MaxEnvelope: Number, NumWaveInstances: Number) -> Unit>
    open var OnQueueSubtitles: UnrealEngineDelegate<(Subtitles: Array<SubtitleCue>, CueDuration: Number) -> Unit>
    open var AutoAttachParent: Any
    open var AutoAttachSocketName: String
    open fun StopDelayed(DelayTime: Number)
    open fun Stop()
    open fun SetWaveParameter(InName: String, InWave: SoundWave)
    open fun SetVolumeMultiplier(NewVolumeMultiplier: Number)
    open fun SetUISound(bInUISound: Boolean)
    open fun SetSubmixSend(Submix: SoundSubmixBase, SendLevel: Number)
    open fun SetSourceBusSendPreEffect(SoundSourceBus: SoundSourceBus, SourceBusSendLevel: Number)
    open fun SetSourceBusSendPostEffect(SoundSourceBus: SoundSourceBus, SourceBusSendLevel: Number)
    open fun SetSound(NewSound: SoundBase)
    open fun SetPitchMultiplier(NewPitchMultiplier: Number)
    open fun SetPaused(bPause: Boolean)
    open fun SetOutputToBusOnly(bInOutputToBusOnly: Boolean)
    open fun SetLowPassFilterFrequency(InLowPassFilterFrequency: Number)
    open fun SetLowPassFilterEnabled(InLowPassFilterEnabled: Boolean)
    open fun SetIntegerParameter(InName: String, inInt: Number)
    open fun SetFloatParameter(InName: String, InFloat: Number)
    open fun SetBooleanParameter(InName: String, InBool: Boolean)
    open fun SetAudioBusSendPreEffect(AudioBus: AudioBus, AudioBusSendLevel: Number)
    open fun SetAudioBusSendPostEffect(AudioBus: AudioBus, AudioBusSendLevel: Number)
    open fun Play(StartTime: Number)
    open fun IsVirtualized(): Boolean
    open fun IsPlaying(): Boolean
    open fun HasCookedFFTData(): Boolean
    open fun HasCookedAmplitudeEnvelopeData(): Boolean
    open fun GetPlayState(): String /* "Playing" | "Stopped" | "Paused" | "FadingIn" | "FadingOut" | "Count" | "EAudioComponentPlayState_MAX" */
    open fun GetCookedFFTDataForAllPlayingSounds(OutSoundWaveSpectralData: Array<SoundWaveSpectralDataPerSound> = definedExternally): `T$263`
    open fun GetCookedFFTData(FrequenciesToGet: Array<Number>, OutSoundWaveSpectralData: Array<SoundWaveSpectralData> = definedExternally): `T$264`
    open fun GetCookedAmplitudeEnvelopeDataForAllPlayingSounds(OutEnvelopeData: Array<SoundWaveEnvelopeDataPerSound> = definedExternally): `T$265`
    open fun GetCookedAmplitudeEnvelopeData(OutEnvelopeData: Number = definedExternally): `T$266`
    open fun FadeOut(FadeOutDuration: Number, FadeVolumeLevel: Number, FadeCurve: String /* "Linear" | "Logarithmic" | "SCurve" | "Sin" | "Count" | "EAudioFaderCurve_MAX" */)
    open fun FadeIn(FadeInDuration: Number, FadeVolumeLevel: Number, StartTime: Number, FadeCurve: String /* "Linear" | "Logarithmic" | "SCurve" | "Sin" | "Count" | "EAudioFaderCurve_MAX" */)
    open fun GetAttenuationSettingsToApply(OutAttenuationSettings: SoundAttenuationSettings = definedExternally): `T$267`
    open fun AdjustVolume(AdjustVolumeDuration: Number, AdjustVolumeLevel: Number, FadeCurve: String /* "Linear" | "Logarithmic" | "SCurve" | "Sin" | "Count" | "EAudioFaderCurve_MAX" */)
    open fun AdjustAttenuation(InAttenuationSettings: SoundAttenuationSettings)

    companion object {
        fun Load(ResourceName: String): AudioComponent
        fun Find(Outer: UObject, ResourceName: String): AudioComponent
        fun GetDefaultObject(): AudioComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AudioComponent
        fun C(Other: UObject): AudioComponent
        fun C(Other: Any): AudioComponent
    }
}

external open class SoundBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SoundClassObject: SoundClass
    open var bDebug: Boolean
    open var bOverrideConcurrency: Boolean
    open var bOutputToBusOnly: Boolean
    open var bEnableBusSends: Boolean
    open var bEnableBaseSubmix: Boolean
    open var bEnableSubmixSends: Boolean
    open var bHasDelayNode: Boolean
    open var bHasConcatenatorNode: Boolean
    open var bHasVirtualizeWhenSilent: Boolean
    open var bBypassVolumeScaleForPriority: Boolean
    open var VirtualizationMode: String /* "Disabled" | "PlayWhenSilent" | "Restart" | "EVirtualizationMode_MAX" */
    open var MaxConcurrentResolutionRule: String /* "PreventNew" | "StopOldest" | "StopFarthestThenPreventNew" | "StopFarthestThenOldest" | "StopLowestPriority" | "StopQuietest" | "StopLowestPriorityThenPreventNew" | "Count" | "EMaxConcurrentResolutionRule_MAX" */
    open var SoundConcurrencySettings: SoundConcurrency
    open var ConcurrencySet: Any
    open var ConcurrencyOverrides: SoundConcurrencySettings
    open var MaxConcurrentPlayCount: Number
    open var Duration: Number
    open var MaxDistance: Number
    open var TotalSamples: Number
    open var Priority: Number
    open var AttenuationSettings: SoundAttenuation
    open var SoundSubmixObject: SoundSubmixBase
    open var SoundSubmixSends: Array<SoundSubmixSendInfo>
    open var SourceEffectChain: SoundEffectSourcePresetChain
    open var BusSends: Array<SoundSourceBusSendInfo>
    open var PreEffectBusSends: Array<SoundSourceBusSendInfo>
    open var AssetUserData: Array<AssetUserData>
    open fun PrimeSound()
    open fun SpawnSoundAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent

    companion object {
        fun Load(ResourceName: String): SoundBase
        fun Find(Outer: UObject, ResourceName: String): SoundBase
        fun GetDefaultObject(): SoundBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundBase
        fun C(Other: UObject): SoundBase
        fun C(Other: Any): SoundBase
        fun PrimeSound(InSound: SoundBase)
        fun SpawnSoundAttached(Sound: SoundBase, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent
    }
}

external object EUMGSequencePlayMode {
    var Forward: String /* "Forward" */
    var Reverse: String /* "Reverse" */
    var PingPong: String /* "PingPong" */
    var EUMGSequencePlayMode_MAX: String /* "EUMGSequencePlayMode_MAX" */
}

external open class InputEvent {
    //open fun clone(): InputEvent
    open fun IsAltDown(): Boolean
    open fun IsCommandDown(): Boolean
    open fun IsControlDown(): Boolean
    open fun IsLeftAltDown(): Boolean
    open fun IsLeftCommandDown(): Boolean
    open fun IsLeftControlDown(): Boolean
    open fun IsLeftShiftDown(): Boolean
    open fun IsRepeat(): Boolean
    open fun IsRightAltDown(): Boolean
    open fun IsRightCommandDown(): Boolean
    open fun IsRightControlDown(): Boolean
    open fun IsRightShiftDown(): Boolean
    open fun IsShiftDown(): Boolean

    companion object {
        fun C(Other: UObject): InputEvent
        fun C(Other: Any): InputEvent
        fun IsAltDown(Input: InputEvent): Boolean
        fun IsCommandDown(Input: InputEvent): Boolean
        fun IsControlDown(Input: InputEvent): Boolean
        fun IsLeftAltDown(Input: InputEvent): Boolean
        fun IsLeftCommandDown(Input: InputEvent): Boolean
        fun IsLeftControlDown(Input: InputEvent): Boolean
        fun IsLeftShiftDown(Input: InputEvent): Boolean
        fun IsRepeat(Input: InputEvent): Boolean
        fun IsRightAltDown(Input: InputEvent): Boolean
        fun IsRightCommandDown(Input: InputEvent): Boolean
        fun IsRightControlDown(Input: InputEvent): Boolean
        fun IsRightShiftDown(Input: InputEvent): Boolean
        fun IsShiftDown(Input: InputEvent): Boolean
    }
}

external object ESlateGesture {
    var None: String /* "None" */
    var Scroll: String /* "Scroll" */
    var Magnify: String /* "Magnify" */
    var Swipe: String /* "Swipe" */
    var Rotate: String /* "Rotate" */
    var LongPress: String /* "LongPress" */
    var ESlateGesture_MAX: String /* "ESlateGesture_MAX" */
}

external interface `T$268` {
    var Reply: EventReply
    var `$`: EventReply
}

external open class EventReply {
    open fun clone(): EventReply
    open fun CaptureJoystick(CapturingWidget: Widget = definedExternally, bInAllJoysticks: Boolean = definedExternally): `T$268`
    open fun CaptureMouse(CapturingWidget: Widget = definedExternally): `T$268`
    open fun ClearUserFocus(bInAllUsers: Boolean = definedExternally): `T$268`
    open fun DetectDrag(WidgetDetectingDrag: Widget = definedExternally, DragKey: Key = definedExternally): `T$268`
    open fun EndDragDrop(): `T$268`
    open fun LockMouse(CapturingWidget: Widget = definedExternally): `T$268`
    open fun ReleaseJoystickCapture(bInAllJoysticks: Boolean = definedExternally): `T$268`
    open fun ReleaseMouseCapture(): `T$268`
    open fun SetMousePosition(NewMousePosition: Vector2D = definedExternally): `T$268`
    open fun SetUserFocus(FocusWidget: Widget = definedExternally, bInAllUsers: Boolean = definedExternally): `T$268`
    open fun UnlockMouse(): `T$268`

    companion object {
        fun C(Other: UObject): EventReply
        fun C(Other: Any): EventReply
        fun CaptureJoystick(Reply: EventReply = definedExternally, CapturingWidget: Widget = definedExternally, bInAllJoysticks: Boolean = definedExternally): `T$268`
        fun CaptureMouse(Reply: EventReply = definedExternally, CapturingWidget: Widget = definedExternally): `T$268`
        fun ClearUserFocus(Reply: EventReply = definedExternally, bInAllUsers: Boolean = definedExternally): `T$268`
        fun DetectDrag(Reply: EventReply = definedExternally, WidgetDetectingDrag: Widget = definedExternally, DragKey: Key = definedExternally): `T$268`
        fun EndDragDrop(Reply: EventReply = definedExternally): `T$268`
        fun LockMouse(Reply: EventReply = definedExternally, CapturingWidget: Widget = definedExternally): `T$268`
        fun ReleaseJoystickCapture(Reply: EventReply = definedExternally, bInAllJoysticks: Boolean = definedExternally): `T$268`
        fun ReleaseMouseCapture(Reply: EventReply = definedExternally): `T$268`
        fun SetMousePosition(Reply: EventReply = definedExternally, NewMousePosition: Vector2D = definedExternally): `T$268`
        fun SetUserFocus(Reply: EventReply = definedExternally, FocusWidget: Widget = definedExternally, bInAllUsers: Boolean = definedExternally): `T$268`
        fun UnlockMouse(Reply: EventReply = definedExternally): `T$268`
        fun Handled(): EventReply
        fun Unhandled(): EventReply
    }
}

external open class UPointerEvent : InputEvent {
    open fun clone(): UPointerEvent
    open fun GetCursorDelta(): Vector2D
    open fun GetEffectingButton(): Key
    open fun GetGestureDelta(): Vector2D
    open fun PointerEvent_GetGestureType(): String /* "None" | "Scroll" | "Magnify" | "Swipe" | "Rotate" | "LongPress" | "ESlateGesture_MAX" */
    open fun GetLastScreenSpacePosition(): Vector2D
    open fun GetPointerIndex(): Number
    open fun GetScreenSpacePosition(): Vector2D
    open fun GetTouchpadIndex(): Number
    open fun GetUserIndex(): Number
    open fun GetWheelDelta(): Number
    open fun IsMouseButtonDown(MouseButton: Key): Boolean
    open fun IsTouchEvent(): Boolean
    open fun DetectDragIfPressed(WidgetDetectingDrag: Widget, DragKey: Key): EventReply
    open fun GetInputEventFromPointerEvent(): InputEvent

    companion object {
        fun C(Other: UObject): UPointerEvent
        fun C(Other: Any): UPointerEvent
        fun GetCursorDelta(Input: UPointerEvent): Vector2D
        fun GetEffectingButton(Input: UPointerEvent): Key
        fun GetGestureDelta(Input: UPointerEvent): Vector2D
        fun PointerEvent_GetGestureType(Input: UPointerEvent): String /* "None" | "Scroll" | "Magnify" | "Swipe" | "Rotate" | "LongPress" | "ESlateGesture_MAX" */
        fun GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D
        fun GetPointerIndex(Input: UPointerEvent): Number
        fun GetScreenSpacePosition(Input: UPointerEvent): Vector2D
        fun GetTouchpadIndex(Input: UPointerEvent): Number
        fun GetUserIndex(Input: UPointerEvent): Number
        fun GetWheelDelta(Input: UPointerEvent): Number
        fun IsMouseButtonDown(Input: UPointerEvent, MouseButton: Key): Boolean
        fun IsTouchEvent(Input: UPointerEvent): Boolean
        fun DetectDragIfPressed(UPointerEvent: UPointerEvent, WidgetDetectingDrag: Widget, DragKey: Key): EventReply
        fun GetInputEventFromPointerEvent(Event: UPointerEvent): InputEvent
    }
}

external open class UFocusEvent {
    open fun clone(): UFocusEvent

    companion object {
        fun C(Other: UObject): UFocusEvent
        fun C(Other: Any): UFocusEvent
    }
}

external open class KeyEvent : InputEvent {
    open fun clone(): KeyEvent
    open fun GetIsAltDownByKeyEvent(): Boolean
    open fun GetIsControlDownByKeyEvent(): Boolean
    open fun GetIsShiftDownByKeyEvent(): Boolean
    open fun GetKeyNameByKeyEvent(): String
    open fun GetKey(): Key
    open fun GetUserIndex(): Number
    open fun GetKeyEventNavigationAction(): String /* "Accept" | "Back" | "Num" | "Invalid" | "EUINavigationAction_MAX" */
    open fun GetKeyEventNavigationDirection(): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
    open fun GetInputEventFromKeyEvent(): InputEvent

    companion object {
        fun C(Other: UObject): KeyEvent
        fun C(Other: Any): KeyEvent
        fun GetIsAltDownByKeyEvent(Event: KeyEvent): Boolean
        fun GetIsControlDownByKeyEvent(Event: KeyEvent): Boolean
        fun GetIsShiftDownByKeyEvent(Event: KeyEvent): Boolean
        fun GetKeyNameByKeyEvent(Event: KeyEvent): String
        fun GetKey(Input: KeyEvent): Key
        fun GetUserIndex(Input: KeyEvent): Number
        fun GetKeyEventNavigationAction(InKeyEvent: KeyEvent): String /* "Accept" | "Back" | "Num" | "Invalid" | "EUINavigationAction_MAX" */
        fun GetKeyEventNavigationDirection(InKeyEvent: KeyEvent): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
        fun GetInputEventFromKeyEvent(Event: KeyEvent): InputEvent
    }
}

external open class SlateBrushAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Brush: SlateBrush
    open fun MakeBrushFromAsset(): SlateBrush

    companion object {
        fun Load(ResourceName: String): SlateBrushAsset
        fun Find(Outer: UObject, ResourceName: String): SlateBrushAsset
        fun GetDefaultObject(): SlateBrushAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateBrushAsset
        fun C(Other: UObject): SlateBrushAsset
        fun C(Other: Any): SlateBrushAsset
        fun MakeBrushFromAsset(BrushAsset: SlateBrushAsset): SlateBrush
    }
}

external interface `T$269` {
    var Context: PaintContext
}

external open class PaintContext {
    open fun clone(): PaintContext
    open fun DrawSpaceSpline(InStart: Vector2D = definedExternally, InStartDir: Vector2D = definedExternally, InEnd: Vector2D = definedExternally, InEndDir: Vector2D = definedExternally, InThickness: Number = definedExternally, InTint: LinearColor = definedExternally): `T$269`
    open fun DrawBox(position: Vector2D = definedExternally, Size: Vector2D = definedExternally, Brush: SlateBrushAsset = definedExternally, Tint: LinearColor = definedExternally): `T$269`
    open fun DrawLine(PositionA: Vector2D = definedExternally, PositionB: Vector2D = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$269`
    open fun DrawLines(Points: Array<Vector2D> = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$269`
    open fun DrawString(InString: String = definedExternally, position: Vector2D = definedExternally, Tint: LinearColor = definedExternally): `T$269`
    open fun DrawText(text: String = definedExternally, position: Vector2D = definedExternally, Font: Font = definedExternally, FontSize: Number = definedExternally, FontTypeFace: String = definedExternally, Tint: LinearColor = definedExternally): `T$269`

    companion object {
        fun C(Other: UObject): PaintContext
        fun C(Other: Any): PaintContext
        fun DrawSpaceSpline(Context: PaintContext = definedExternally, InStart: Vector2D = definedExternally, InStartDir: Vector2D = definedExternally, InEnd: Vector2D = definedExternally, InEndDir: Vector2D = definedExternally, InThickness: Number = definedExternally, InTint: LinearColor = definedExternally): `T$269`
        fun DrawBox(Context: PaintContext = definedExternally, position: Vector2D = definedExternally, Size: Vector2D = definedExternally, Brush: SlateBrushAsset = definedExternally, Tint: LinearColor = definedExternally): `T$269`
        fun DrawLine(Context: PaintContext = definedExternally, PositionA: Vector2D = definedExternally, PositionB: Vector2D = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$269`
        fun DrawLines(Context: PaintContext = definedExternally, Points: Array<Vector2D> = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$269`
        fun DrawText(Context: PaintContext = definedExternally, InString: String = definedExternally, position: Vector2D = definedExternally, Tint: LinearColor = definedExternally): `T$269`
        fun DrawText(Context: PaintContext = definedExternally, text: String = definedExternally, position: Vector2D = definedExternally, Font: Font = definedExternally, FontSize: Number = definedExternally, FontTypeFace: String = definedExternally, Tint: LinearColor = definedExternally): `T$269`
    }
}

external open class MotionEvent : InputEvent {
    open fun clone(): MotionEvent

    companion object {
        fun C(Other: UObject): MotionEvent
        fun C(Other: Any): MotionEvent
    }
}

external open class CharacterEvent : InputEvent {
    open fun clone(): CharacterEvent
    open fun GetInputEventFromCharacterEvent(): InputEvent

    companion object {
        fun C(Other: UObject): CharacterEvent
        fun C(Other: Any): CharacterEvent
        fun GetInputEventFromCharacterEvent(Event: CharacterEvent): InputEvent
    }
}

external open class AnalogInputEvent : KeyEvent {
    override fun clone(): AnalogInputEvent
    open fun GetAnalogValue(): Number
    open fun GetAnalogEventNavigationDirection(): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
    open fun GetKeyEventFromAnalogInputEvent(): KeyEvent

    companion object {
        fun C(Other: UObject): AnalogInputEvent
        fun C(Other: Any): AnalogInputEvent
        fun GetAnalogValue(Input: AnalogInputEvent): Number
        fun GetAnalogEventNavigationDirection(InAnalogEvent: AnalogInputEvent): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
        fun GetKeyEventFromAnalogInputEvent(Event: AnalogInputEvent): KeyEvent
    }
}

external interface `T$270` {
    var Operation: DragDropOperation
}

external open class UserWidget : Widget {
    constructor()
    constructor(Outer: UObject)
    open var ColorAndOpacity: LinearColor
    open var ColorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>
    open var ForegroundColor: SlateColor
    open var ForegroundColorDelegate: UnrealEngineDelegate<() -> SlateColor>
    open var OnVisibilityChanged: UnrealEngineMulticastDelegate<(InVisibility: String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */) -> Unit>
    open var Padding: Margin
    open var ActiveSequencePlayers: Array<UMGSequencePlayer>
    open var AnimationTickManager: UMGSequenceTickManager
    open var StoppedSequencePlayers: Array<UMGSequencePlayer>
    open var NamedSlotBindings: Array<NamedSlotBinding>
    open var WidgetTree: WidgetTree
    open var DesignTimeSize: Vector2D
    open var DesignSizeMode: String /* "FillScreen" | "Custom" | "CustomOnScreen" | "Desired" | "DesiredOnScreen" | "EDesignPreviewSizeMode_MAX" */
    open var PaletteCategory: String
    open var PreviewBackground: Texture2D
    open var Priority: Number
    open var bSupportsKeyboardFocus: Boolean
    open var bIsFocusable: Boolean
    open var bStopAction: Boolean
    open var bHasScriptImplementedTick: Boolean
    open var bHasScriptImplementedPaint: Boolean
    open var TickFrequency: String /* "Never" | "Auto" | "EWidgetTickFrequency_MAX" */
    open var InputComponent: InputComponent
    open var AnimationCallbacks: Array<AnimationEventBinding>
    open fun UnregisterInputComponent()
    open fun UnbindAllFromAnimationStarted(Animation: WidgetAnimation)
    open fun UnbindAllFromAnimationFinished(Animation: WidgetAnimation)
    open fun Tick(MyGeometry: Geometry, InDeltaTime: Number)
    open fun StopListeningForInputAction(ActionName: String, EventType: String /* "IE_Pressed" | "IE_Released" | "IE_Repeat" | "IE_DoubleClick" | "IE_Axis" | "IE_MAX" */)
    open fun StopListeningForAllInputActions()
    open fun StopAnimationsAndLatentActions()
    open fun StopAnimation(InAnimation: WidgetAnimation)
    open fun StopAllAnimations()
    open fun SetPositionInViewport(position: Vector2D, bRemoveDPIScale: Boolean)
    open fun SetPlaybackSpeed(InAnimation: WidgetAnimation, PlaybackSpeed: Number)
    open fun SetPadding(InPadding: Margin)
    open fun SetOwningPlayer(LocalPlayerController: PlayerController)
    open fun SetNumLoopsToPlay(InAnimation: WidgetAnimation, NumLoopsToPlay: Number)
    open fun SetInputActionPriority(NewPriority: Number)
    open fun SetInputActionBlocking(bShouldBlock: Boolean)
    open fun SetForegroundColor(InForegroundColor: SlateColor)
    open fun SetDesiredSizeInViewport(Size: Vector2D)
    open fun SetColorAndOpacity(InColorAndOpacity: LinearColor)
    open fun SetAnimationCurrentTime(InAnimation: WidgetAnimation, InTime: Number)
    open fun SetAnchorsInViewport(Anchors: Anchors)
    open fun SetAlignmentInViewport(Alignment: Vector2D)
    open fun ReverseAnimation(InAnimation: WidgetAnimation)
    open fun RemoveFromViewport()
    open fun RegisterInputComponent()
    open fun PreConstruct(IsDesignTime: Boolean)
    open fun PlaySound(SoundToPlay: SoundBase)
    open fun PlayAnimationTimeRange(InAnimation: WidgetAnimation, StartAtTime: Number, EndAtTime: Number, NumLoopsToPlay: Number, PlayMode: String /* "Forward" | "Reverse" | "PingPong" | "EUMGSequencePlayMode_MAX" */, PlaybackSpeed: Number, bRestoreState: Boolean): UMGSequencePlayer
    open fun PlayAnimationReverse(InAnimation: WidgetAnimation, PlaybackSpeed: Number, bRestoreState: Boolean): UMGSequencePlayer
    open fun PlayAnimationForward(InAnimation: WidgetAnimation, PlaybackSpeed: Number, bRestoreState: Boolean): UMGSequencePlayer
    open fun PlayAnimation(InAnimation: WidgetAnimation, StartAtTime: Number, NumLoopsToPlay: Number, PlayMode: String /* "Forward" | "Reverse" | "PingPong" | "EUMGSequencePlayMode_MAX" */, PlaybackSpeed: Number, bRestoreState: Boolean): UMGSequencePlayer
    open fun PauseAnimation(InAnimation: WidgetAnimation): Number
    open fun OnTouchStarted(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnTouchMoved(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnTouchGesture(MyGeometry: Geometry, GestureEvent: UPointerEvent): EventReply
    open fun OnTouchForceChanged(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnTouchEnded(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnRemovedFromFocusPath(InFocusEvent: UFocusEvent)
    open fun OnPreviewMouseButtonDown(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnPreviewKeyDown(MyGeometry: Geometry, InKeyEvent: KeyEvent): EventReply
    open fun OnPaint(Context: PaintContext = definedExternally): `T$269`
    open fun OnMouseWheel(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseMove(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseLeave(MouseEvent: UPointerEvent)
    open fun OnMouseEnter(MyGeometry: Geometry, MouseEvent: UPointerEvent)
    open fun OnMouseCaptureLost()
    open fun OnMouseButtonUp(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseButtonDown(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseButtonDoubleClick(InMyGeometry: Geometry, InMouseEvent: UPointerEvent): EventReply
    open fun OnMotionDetected(MyGeometry: Geometry, InMotionEvent: MotionEvent): EventReply
    open fun OnKeyUp(MyGeometry: Geometry, InKeyEvent: KeyEvent): EventReply
    open fun OnKeyDown(MyGeometry: Geometry, InKeyEvent: KeyEvent): EventReply
    open fun OnKeyChar(MyGeometry: Geometry, InCharacterEvent: CharacterEvent): EventReply
    open fun OnInitialized()
    open fun OnFocusReceived(MyGeometry: Geometry, InFocusEvent: UFocusEvent): EventReply
    open fun OnFocusLost(InFocusEvent: UFocusEvent)
    open fun OnDrop(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation): Boolean
    open fun OnDragOver(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation): Boolean
    open fun OnDragLeave(UPointerEvent: UPointerEvent, Operation: DragDropOperation)
    open fun OnDragEnter(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation)
    open fun OnDragDetected(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation = definedExternally): `T$270`
    open fun OnDragCancelled(UPointerEvent: UPointerEvent, Operation: DragDropOperation)
    open fun OnAnimationStarted(Animation: WidgetAnimation)
    open fun OnAnimationFinished(Animation: WidgetAnimation)
    open fun OnAnalogValueChanged(MyGeometry: Geometry, InAnalogInputEvent: AnalogInputEvent): EventReply
    open fun OnAddedToFocusPath(InFocusEvent: UFocusEvent)
    open fun IsPlayingAnimation(): Boolean
    open fun IsListeningForInputAction(ActionName: String): Boolean
    open fun IsInViewport(): Boolean
    open fun IsInteractable(): Boolean
    open fun IsAnyAnimationPlaying(): Boolean
    open fun IsAnimationPlayingForward(InAnimation: WidgetAnimation): Boolean
    open fun IsAnimationPlaying(InAnimation: WidgetAnimation): Boolean
    open fun GetOwningPlayerPawn(): Pawn
    open fun GetOwningPlayerCameraManager(): PlayerCameraManager
    open fun GetIsVisible(): Boolean
    open fun GetAnimationCurrentTime(InAnimation: WidgetAnimation): Number
    open fun GetAnchorsInViewport(): Anchors
    open fun GetAlignmentInViewport(): Vector2D
    open fun FlushAnimations()
    open fun Destruct()
    open fun Construct()
    open fun CancelLatentActions()
    open fun AddToViewport(ZOrder: Number)
    open fun AddToPlayerScreen(ZOrder: Number): Boolean

    companion object {
        fun Load(ResourceName: String): UserWidget
        fun Find(Outer: UObject, ResourceName: String): UserWidget
        fun GetDefaultObject(): UserWidget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UserWidget
        fun C(Other: UObject): UserWidget
        fun C(Other: Any): UserWidget
    }
}

external open class ViewTargetTransitionParams {
    open var BlendTime: Number
    open var BlendFunction: String /* "VTBlend_Linear" | "VTBlend_Cubic" | "VTBlend_EaseIn" | "VTBlend_EaseOut" | "VTBlend_EaseInOut" | "VTBlend_PreBlended" | "VTBlend_MAX" */
    open var BlendExp: Number
    open var bLockOutgoing: Boolean
    open fun clone(): ViewTargetTransitionParams

    companion object {
        fun C(Other: UObject): ViewTargetTransitionParams
        fun C(Other: Any): ViewTargetTransitionParams
    }
}

external open class UpdateLevelVisibilityLevelInfo {
    open var PackageName: String
    open var Filename: String
    open var bIsVisible: Boolean
    open fun clone(): UpdateLevelVisibilityLevelInfo

    companion object {
        fun C(Other: UObject): UpdateLevelVisibilityLevelInfo
        fun C(Other: Any): UpdateLevelVisibilityLevelInfo
    }
}

external open class HapticFeedbackEffect_Base : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): HapticFeedbackEffect_Base
        fun Find(Outer: UObject, ResourceName: String): HapticFeedbackEffect_Base
        fun GetDefaultObject(): HapticFeedbackEffect_Base
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HapticFeedbackEffect_Base
        fun C(Other: UObject): HapticFeedbackEffect_Base
        fun C(Other: Any): HapticFeedbackEffect_Base
    }
}

external object EDynamicForceFeedbackAction {
    var Start: String /* "Start" */
    var Update: String /* "Update" */
    var Stop: String /* "Stop" */
    var EDynamicForceFeedbackAction_MAX: String /* "EDynamicForceFeedbackAction_MAX" */
}

external open class LatentActionInfo {
    open var Linkage: Number
    open var UUID: Number
    open var ExecutionFunction: String
    open var CallbackTarget: UObject
    open fun clone(): LatentActionInfo

    companion object {
        fun C(Other: UObject): LatentActionInfo
        fun C(Other: Any): LatentActionInfo
    }
}

external object ETouchIndex {
    var Touch1: String /* "Touch1" */
    var Touch2: String /* "Touch2" */
    var Touch3: String /* "Touch3" */
    var Touch4: String /* "Touch4" */
    var Touch5: String /* "Touch5" */
    var Touch6: String /* "Touch6" */
    var Touch7: String /* "Touch7" */
    var Touch8: String /* "Touch8" */
    var Touch9: String /* "Touch9" */
    var Touch10: String /* "Touch10" */
    var CursorPointerIndex: String /* "CursorPointerIndex" */
    var MAX_TOUCHES: String /* "MAX_TOUCHES" */
    var ETouchIndex_MAX: String /* "ETouchIndex_MAX" */
}

external object EObjectTypeQuery {
    var ObjectTypeQuery1: String /* "ObjectTypeQuery1" */
    var ObjectTypeQuery2: String /* "ObjectTypeQuery2" */
    var ObjectTypeQuery3: String /* "ObjectTypeQuery3" */
    var ObjectTypeQuery4: String /* "ObjectTypeQuery4" */
    var ObjectTypeQuery5: String /* "ObjectTypeQuery5" */
    var ObjectTypeQuery6: String /* "ObjectTypeQuery6" */
    var ObjectTypeQuery7: String /* "ObjectTypeQuery7" */
    var ObjectTypeQuery8: String /* "ObjectTypeQuery8" */
    var ObjectTypeQuery9: String /* "ObjectTypeQuery9" */
    var ObjectTypeQuery10: String /* "ObjectTypeQuery10" */
    var ObjectTypeQuery11: String /* "ObjectTypeQuery11" */
    var ObjectTypeQuery12: String /* "ObjectTypeQuery12" */
    var ObjectTypeQuery13: String /* "ObjectTypeQuery13" */
    var ObjectTypeQuery14: String /* "ObjectTypeQuery14" */
    var ObjectTypeQuery15: String /* "ObjectTypeQuery15" */
    var ObjectTypeQuery16: String /* "ObjectTypeQuery16" */
    var ObjectTypeQuery17: String /* "ObjectTypeQuery17" */
    var ObjectTypeQuery18: String /* "ObjectTypeQuery18" */
    var ObjectTypeQuery19: String /* "ObjectTypeQuery19" */
    var ObjectTypeQuery20: String /* "ObjectTypeQuery20" */
    var ObjectTypeQuery21: String /* "ObjectTypeQuery21" */
    var ObjectTypeQuery22: String /* "ObjectTypeQuery22" */
    var ObjectTypeQuery23: String /* "ObjectTypeQuery23" */
    var ObjectTypeQuery24: String /* "ObjectTypeQuery24" */
    var ObjectTypeQuery25: String /* "ObjectTypeQuery25" */
    var ObjectTypeQuery26: String /* "ObjectTypeQuery26" */
    var ObjectTypeQuery27: String /* "ObjectTypeQuery27" */
    var ObjectTypeQuery28: String /* "ObjectTypeQuery28" */
    var ObjectTypeQuery29: String /* "ObjectTypeQuery29" */
    var ObjectTypeQuery30: String /* "ObjectTypeQuery30" */
    var ObjectTypeQuery31: String /* "ObjectTypeQuery31" */
    var ObjectTypeQuery32: String /* "ObjectTypeQuery32" */
    var ObjectTypeQuery_MAX: String /* "ObjectTypeQuery_MAX" */
    var EObjectTypeQuery_MAX: String /* "EObjectTypeQuery_MAX" */
}

external object ETraceTypeQuery {
    var TraceTypeQuery1: String /* "TraceTypeQuery1" */
    var TraceTypeQuery2: String /* "TraceTypeQuery2" */
    var TraceTypeQuery3: String /* "TraceTypeQuery3" */
    var TraceTypeQuery4: String /* "TraceTypeQuery4" */
    var TraceTypeQuery5: String /* "TraceTypeQuery5" */
    var TraceTypeQuery6: String /* "TraceTypeQuery6" */
    var TraceTypeQuery7: String /* "TraceTypeQuery7" */
    var TraceTypeQuery8: String /* "TraceTypeQuery8" */
    var TraceTypeQuery9: String /* "TraceTypeQuery9" */
    var TraceTypeQuery10: String /* "TraceTypeQuery10" */
    var TraceTypeQuery11: String /* "TraceTypeQuery11" */
    var TraceTypeQuery12: String /* "TraceTypeQuery12" */
    var TraceTypeQuery13: String /* "TraceTypeQuery13" */
    var TraceTypeQuery14: String /* "TraceTypeQuery14" */
    var TraceTypeQuery15: String /* "TraceTypeQuery15" */
    var TraceTypeQuery16: String /* "TraceTypeQuery16" */
    var TraceTypeQuery17: String /* "TraceTypeQuery17" */
    var TraceTypeQuery18: String /* "TraceTypeQuery18" */
    var TraceTypeQuery19: String /* "TraceTypeQuery19" */
    var TraceTypeQuery20: String /* "TraceTypeQuery20" */
    var TraceTypeQuery21: String /* "TraceTypeQuery21" */
    var TraceTypeQuery22: String /* "TraceTypeQuery22" */
    var TraceTypeQuery23: String /* "TraceTypeQuery23" */
    var TraceTypeQuery24: String /* "TraceTypeQuery24" */
    var TraceTypeQuery25: String /* "TraceTypeQuery25" */
    var TraceTypeQuery26: String /* "TraceTypeQuery26" */
    var TraceTypeQuery27: String /* "TraceTypeQuery27" */
    var TraceTypeQuery28: String /* "TraceTypeQuery28" */
    var TraceTypeQuery29: String /* "TraceTypeQuery29" */
    var TraceTypeQuery30: String /* "TraceTypeQuery30" */
    var TraceTypeQuery31: String /* "TraceTypeQuery31" */
    var TraceTypeQuery32: String /* "TraceTypeQuery32" */
    var TraceTypeQuery_MAX: String /* "TraceTypeQuery_MAX" */
    var ETraceTypeQuery_MAX: String /* "ETraceTypeQuery_MAX" */
}

external open class UpdateLevelStreamingLevelStatus {
    open var PackageName: String
    open var LODIndex: Number
    open var bNewShouldBeLoaded: Boolean
    open var bNewShouldBeVisible: Boolean
    open var bNewShouldBlockOnLoad: Boolean
    open fun clone(): UpdateLevelStreamingLevelStatus

    companion object {
        fun C(Other: UObject): UpdateLevelStreamingLevelStatus
        fun C(Other: Any): UpdateLevelStreamingLevelStatus
    }
}

external object ETravelType {
    var TRAVEL_Absolute: String /* "TRAVEL_Absolute" */
    var TRAVEL_Partial: String /* "TRAVEL_Partial" */
    var TRAVEL_Relative: String /* "TRAVEL_Relative" */
    var TRAVEL_MAX: String /* "TRAVEL_MAX" */
}

external open class ForceFeedbackParameters {
    open var Tag: String
    open var bLooping: Boolean
    open var bIgnoreTimeDilation: Boolean
    open var bPlayWhilePaused: Boolean
    open fun clone(): ForceFeedbackParameters

    companion object {
        fun C(Other: UObject): ForceFeedbackParameters
        fun C(Other: Any): ForceFeedbackParameters
    }
}

external open class LocalPlayerSubsystem : Subsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LocalPlayerSubsystem
        fun Find(Outer: UObject, ResourceName: String): LocalPlayerSubsystem
        fun GetDefaultObject(): LocalPlayerSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalPlayerSubsystem
        fun C(Other: UObject): LocalPlayerSubsystem
        fun C(Other: Any): LocalPlayerSubsystem
    }
}

external object EMouseLockMode {
    var DoNotLock: String /* "DoNotLock" */
    var LockOnCapture: String /* "LockOnCapture" */
    var LockAlways: String /* "LockAlways" */
    var LockInFullscreen: String /* "LockInFullscreen" */
    var EMouseLockMode_MAX: String /* "EMouseLockMode_MAX" */
}

external interface `T$271` {
    var ScreenLocation: Vector2D
    var `$`: Boolean
}

external interface `T$272` {
    var SizeX: Number
    var SizeY: Number
}

external interface `T$273` {
    var LocationX: Number
    var LocationY: Number
    var `$`: Boolean
}

external interface `T$274` {
    var Tilt: Vector
    var RotationRate: Vector
    var Gravity: Vector
    var Acceleration: Vector
}

external interface `T$275` {
    var HitResult: HitResult
    var `$`: Boolean
}

external interface `T$276` {
    var WorldLocation: Vector
    var WorldDirection: Vector
    var `$`: Boolean
}

external interface `T$277` {
    var OutPPSettings: PostProcessSettings
    var OutPPBlendWeight: Number
    var `$`: Boolean
}

external interface `T$278` {
    var WorldPosition: Vector
    var WorldDirection: Vector
    var `$`: Boolean
}

external interface `T$279` {
    var ScreenPosition: Vector2D
    var `$`: Boolean
}

external open class PlayerController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Controller {
    open var Player: Player
    open var AcknowledgedPawn: Pawn
    open var ControllingDirTrackInst: InterpTrackInstDirector
    open var MyHUD: HUD
    open var PlayerCameraManager: PlayerCameraManager
    open var PlayerCameraManagerClass: UnrealEngineClass
    open var bAutoManageActiveCameraTarget: Boolean
    open var TargetViewRotation: Rotator
    open var SmoothTargetViewRotationSpeed: Number
    open var HiddenActors: Array<Actor>
    open var HiddenPrimitiveComponents: Array<Any>
    open var LastSpectatorStateSynchTime: Number
    open var LastSpectatorSyncLocation: Vector
    open var LastSpectatorSyncRotation: Rotator
    open var ClientCap: Number
    open var CheatManager: CheatManager
    open var CheatClass: UnrealEngineClass
    open var PlayerInput: PlayerInput
    open var ActiveForceFeedbackEffects: Array<ActiveForceFeedbackEffect>
    open var bPlayerIsWaiting: Boolean
    open var NetPlayerIndex: Number
    open var PendingSwapConnection: NetConnection
    open var NetConnection: NetConnection
    open var InputYawScale: Number
    open var InputPitchScale: Number
    open var InputRollScale: Number
    open var bShowMouseCursor: Boolean
    open var bEnableClickEvents: Boolean
    open var bEnableTouchEvents: Boolean
    open var bEnableMouseOverEvents: Boolean
    open var bEnableTouchOverEvents: Boolean
    open var bForceFeedbackEnabled: Boolean
    open var bEnableStreamingSource: Boolean
    open var bStreamingSourceShouldActivate: Boolean
    open var bStreamingSourceShouldBlockOnSlowStreaming: Boolean
    open var ForceFeedbackScale: Number
    open var ClickEventKeys: Array<Key>
    open var DefaultMouseCursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */
    open var CurrentMouseCursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */
    open var DefaultClickTraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var CurrentClickTraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var HitResultTraceDistance: Number
    open var SeamlessTravelCount: Any
    open var LastCompletedSeamlessTravelCount: Any
    open var InactiveStateInputComponent: InputComponent
    open var bShouldPerformFullTickWhenPaused: Boolean
    open var CurrentTouchInterface: TouchInterface
    open var SpectatorPawn: SpectatorPawn
    open var bIsLocalPlayerController: Boolean
    open var SpawnLocation: Vector
    open fun WasInputKeyJustReleased(Key: Key): Boolean
    open fun WasInputKeyJustPressed(Key: Key): Boolean
    open fun ToggleSpeaking(bInSpeaking: Boolean)
    open fun TestServerLevelVisibilityChange(PackageName: String, Filename: String)
    open fun SwitchLevel(URL: String)
    open fun StreamingSourceShouldBlockOnSlowStreaming(): Boolean
    open fun StreamingSourceShouldActivate(): Boolean
    open fun StopHapticEffect(Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */)
    open fun StartFire(FireModeNum: Number)
    open fun SetVirtualJoystickVisibility(bVisible: Boolean)
    open fun SetViewTargetWithBlend(NewViewTarget: Actor, BlendTime: Number, BlendFunc: String /* "VTBlend_Linear" | "VTBlend_Cubic" | "VTBlend_EaseIn" | "VTBlend_EaseOut" | "VTBlend_EaseInOut" | "VTBlend_PreBlended" | "VTBlend_MAX" */, BlendExp: Number, bLockOutgoing: Boolean)
    open fun SetName(S: String)
    open fun SetMousePosition(X: Number, Y: Number)
    open fun SetMouseCursorWidget(Cursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */, CursorWidget: UserWidget)
    open fun SetHapticsByValue(Frequency: Number, Amplitude: Number, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */)
    open fun SetDisableHaptics(bNewDisabled: Boolean)
    open fun SetDeprecatedInputYawScale(NewValue: Number)
    open fun SetDeprecatedInputRollScale(NewValue: Number)
    open fun SetDeprecatedInputPitchScale(NewValue: Number)
    open fun SetControllerLightColor(Color: Color)
    open fun SetCinematicMode(bInCinematicMode: Boolean, bHidePlayer: Boolean, bAffectsHUD: Boolean, bAffectsMovement: Boolean, bAffectsTurning: Boolean)
    open fun SetAudioListenerOverride(AttachToComponent: SceneComponent, Location: Vector, Rotation: Rotator)
    open fun SetAudioListenerAttenuationOverride(AttachToComponent: SceneComponent, AttenuationLocationOVerride: Vector)
    open fun ServerViewSelf(TransitionParams: ViewTargetTransitionParams)
    open fun ServerViewPrevPlayer()
    open fun ServerViewNextPlayer()
    open fun ServerVerifyViewTarget()
    open fun ServerUpdateMultipleLevelsVisibility(LevelVisibilities: Array<UpdateLevelVisibilityLevelInfo>)
    open fun ServerUpdateLevelVisibility(LevelVisibility: UpdateLevelVisibilityLevelInfo)
    open fun ServerUpdateCamera(CamLoc: Vector_NetQuantize, CamPitchAndYaw: Number)
    open fun ServerUnmutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ServerUnblockPlayer(PlayerId: UniqueNetIdRepl)
    open fun ServerToggleAILogging()
    open fun ServerShortTimeout()
    open fun ServerSetSpectatorWaiting(bWaiting: Boolean)
    open fun ServerSetSpectatorLocation(NewLoc: Vector, NewRot: Rotator)
    open fun ServerRestartPlayer()
    open fun ServerRecvClientInputFrame(RecvClientInputFrame: Number, Data: Array<Number>)
    open fun ServerPause()
    open fun ServerNotifyLoadedWorld(WorldPackageName: String)
    open fun ServerMutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ServerExecRPC(Msg: String)
    open fun ServerExec(Msg: String)
    open fun ServerCheckClientPossessionReliable()
    open fun ServerCheckClientPossession()
    open fun ServerChangeName(S: String)
    open fun ServerCamera(NewMode: String)
    open fun ServerBlockPlayer(PlayerId: UniqueNetIdRepl)
    open fun ServerAcknowledgePossession(P: Pawn)
    open fun SendToConsole(Command: String)
    open fun RestartLevel()
    open fun ResetControllerLightColor()
    open fun ConvertWorldLocationToScreenLocation(WorldLocation: Vector, ScreenLocation: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$271`
    open fun PlayHapticEffect(HapticEffect: HapticFeedbackEffect_Base, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */, Scale: Number, bLoop: Boolean)
    open fun PlayDynamicForceFeedback(Intensity: Number, Duration: Number, bAffectsLeftLarge: Boolean, bAffectsLeftSmall: Boolean, bAffectsRightLarge: Boolean, bAffectsRightSmall: Boolean, Action: String /* "Start" | "Update" | "Stop" | "EDynamicForceFeedbackAction_MAX" */, LatentInfo: LatentActionInfo)
    open fun Pause()
    open fun OnServerStartedVisualLogger(bIsLogging: Boolean)
    open fun LocalTravel(URL: String)
    open fun ClientPlayForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect, Tag: String, bLooping: Boolean, bIgnoreTimeDilation: Boolean, bPlayWhilePaused: Boolean)
    open fun IsStreamingSourceEnabled(): Boolean
    open fun IsInputKeyDown(Key: Key): Boolean
    open fun GetViewportSize(SizeX: Number = definedExternally, SizeY: Number = definedExternally): `T$272`
    open fun GetSpectatorPawn(): SpectatorPawn
    open fun GetMousePosition(LocationX: Number = definedExternally, LocationY: Number = definedExternally): `T$273`
    open fun GetInputVectorKeyState(Key: Key): Vector
    open fun GetInputTouchState(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, LocationX: Number = definedExternally, LocationY: Number = definedExternally, bIsCurrentlyPressed: Boolean = definedExternally): `T$255`
    open fun GetInputMouseDelta(DeltaX: Number = definedExternally, DeltaY: Number = definedExternally): `T$256`
    open fun GetInputMotionState(Tilt: Vector = definedExternally, RotationRate: Vector = definedExternally, Gravity: Vector = definedExternally, Acceleration: Vector = definedExternally): `T$274`
    open fun GetInputKeyTimeDown(Key: Key): Number
    open fun GetInputAnalogStickState(WhichStick: String /* "CAS_LeftStick" | "CAS_RightStick" | "CAS_MAX" */, StickX: Number = definedExternally, StickY: Number = definedExternally): `T$257`
    open fun GetInputAnalogKeyState(Key: Key): Number
    open fun GetHUD(): HUD
    open fun GetHitResultUnderFingerForObjects(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$275`
    open fun GetHitResultUnderFingerByChannel(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$275`
    open fun GetHitResultUnderFinger(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$275`
    open fun GetHitResultUnderCursorForObjects(ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$275`
    open fun GetHitResultUnderCursorByChannel(TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$275`
    open fun GetHitResultUnderCursor(TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$275`
    open fun GetFocalLocation(): Vector
    open fun GetDeprecatedInputYawScale(): Number
    open fun GetDeprecatedInputRollScale(): Number
    open fun GetDeprecatedInputPitchScale(): Number
    open fun FOV(NewFOV: Number)
    open fun EnableCheats()
    open fun ConvertScreenLocationToWorldSpace(ScreenX: Number, ScreenY: Number, WorldLocation: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$276`
    open fun ConvertMouseLocationToWorldSpace(WorldLocation: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$276`
    open fun ConsoleKey(Key: Key)
    open fun ClientWasKicked(KickReason: String)
    open fun ClientVoiceHandshakeComplete()
    open fun ClientUpdateMultipleLevelsStreamingStatus(LevelStatuses: Array<UpdateLevelStreamingLevelStatus>)
    open fun ClientUpdateLevelStreamingStatus(PackageName: String, bNewShouldBeLoaded: Boolean, bNewShouldBeVisible: Boolean, bNewShouldBlockOnLoad: Boolean, LODIndex: Number)
    open fun ClientUnmutePlayers(PlayerIds: Array<UniqueNetIdRepl>)
    open fun ClientUnmutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ClientTravelInternal(URL: String, TravelType: String /* "TRAVEL_Absolute" | "TRAVEL_Partial" | "TRAVEL_Relative" | "TRAVEL_MAX" */, bSeamless: Boolean, MapPackageGuid: Guid)
    open fun ClientTravel(URL: String, TravelType: String /* "TRAVEL_Absolute" | "TRAVEL_Partial" | "TRAVEL_Relative" | "TRAVEL_MAX" */, bSeamless: Boolean, MapPackageGuid: Guid)
    open fun ClientTeamMessage(SenderPlayerState: PlayerState, S: String, Type: String, MsgLifeTime: Number)
    open fun ClientStopForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect, Tag: String)
    open fun ClientStopCameraShakesFromSource(SourceComponent: CameraShakeSourceComponent, bImmediately: Boolean)
    open fun ClientStopCameraShake(Shake: UnrealEngineClass, bImmediately: Boolean)
    open fun ClientStopCameraAnim(AnimToStop: CameraAnim)
    open fun ClientStartOnlineSession()
    open fun ClientStartCameraShakeFromSource(Shake: UnrealEngineClass, SourceComponent: CameraShakeSourceComponent)
    open fun ClientStartCameraShake(Shake: UnrealEngineClass, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, UserPlaySpaceRot: Rotator)
    open fun ClientSpawnGenericCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass)
    open fun ClientSpawnCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass)
    open fun ClientSetViewTarget(A: Actor, TransitionParams: ViewTargetTransitionParams)
    open fun ClientSetSpectatorWaiting(bWaiting: Boolean)
    open fun ClientSetHUD(NewHUDClass: UnrealEngineClass)
    open fun ClientSetForceMipLevelsToBeResident(Material: MaterialInterface, ForceDuration: Number, CinematicTextureGroups: Number)
    open fun ClientSetCinematicMode(bInCinematicMode: Boolean, bAffectsMovement: Boolean, bAffectsTurning: Boolean, bAffectsHUD: Boolean)
    open fun ClientSetCameraMode(NewCamMode: String)
    open fun ClientSetCameraFade(bEnableFading: Boolean, FadeColor: Color, FadeAlpha: Vector2D, FadeTime: Number, bFadeAudio: Boolean, bHoldWhenFinished: Boolean)
    open fun ClientSetBlockOnAsyncLoading()
    open fun ClientReturnToMainMenuWithTextReason(ReturnReason: String)
    open fun ClientReturnToMainMenu(ReturnReason: String)
    open fun ClientRetryClientRestart(NewPawn: Pawn)
    open fun ClientRestart(NewPawn: Pawn)
    open fun ClientReset()
    open fun ClientRepObjRef(UObject: UObject)
    open fun ClientRecvServerAckFrameDebug(NumBuffered: Number, TargetNumBufferedCmds: Number)
    open fun ClientRecvServerAckFrame(LastProcessedInputFrame: Number, RecvServerFrameNumber: Number, TimeDilation: Any)
    open fun ClientReceiveLocalizedMessage(Message: UnrealEngineClass, SWITCH: Number, RelatedPlayerState_1: PlayerState, RelatedPlayerState_2: PlayerState, OptionalObject: UObject)
    open fun ClientPrestreamTextures(ForcedActor: Actor, ForceDuration: Number, bEnableStreaming: Boolean, CinematicTextureGroups: Number)
    open fun ClientPrepareMapChange(LevelName: String, bFirst: Boolean, bLast: Boolean)
    open fun ClientPlaySoundAtLocation(Sound: SoundBase, Location: Vector, VolumeMultiplier: Number, PitchMultiplier: Number)
    open fun ClientPlaySound(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number)
    open fun ClientPlayForceFeedback_Internal(ForceFeedbackEffect: ForceFeedbackEffect, Params: ForceFeedbackParameters)
    open fun ClientPlayCameraAnim(AnimToPlay: CameraAnim, Scale: Number, Rate: Number, BlendInTime: Number, BlendOutTime: Number, bLoop: Boolean, bRandomStartTime: Boolean, Space: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraShakePlaySpace_MAX" */, CustomPlaySpace: Rotator)
    open fun ClientMutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ClientMessage(S: String, Type: String, MsgLifeTime: Number)
    open fun ClientIgnoreMoveInput(bIgnore: Boolean)
    open fun ClientIgnoreLookInput(bIgnore: Boolean)
    open fun ClientGotoState(NewState: String)
    open fun ClientGameEnded(EndGameFocus: Actor, bIsWinner: Boolean)
    open fun ClientForceGarbageCollection()
    open fun ClientFlushLevelStreaming()
    open fun ClientEndOnlineSession()
    open fun ClientEnableNetworkVoice(bEnable: Boolean)
    open fun ClientCommitMapChange()
    open fun ClientClearCameraLensEffects()
    open fun ClientCapBandwidth(Cap: Number)
    open fun ClientCancelPendingMapChange()
    open fun ClientAddTextureStreamingLoc(InLoc: Vector, Duration: Number, bOverrideLocation: Boolean)
    open fun ClearAudioListenerOverride()
    open fun ClearAudioListenerAttenuationOverride()
    open fun CanRestartPlayer(): Boolean
    open fun Camera(NewMode: String)
    open fun AddYawInput(Val: Number)
    open fun AddRollInput(Val: Number)
    open fun AddPitchInput(Val: Number)
    open fun ActivateTouchInterface(NewTouchInterface: TouchInterface)
    open fun GetCameraCachePOV(): MinimalViewInfo
    open fun GetLastFrameCameraCachePOV(): MinimalViewInfo
    open fun GetPostProcessBlendCache(PPIndex: Number, OutPPSettings: PostProcessSettings = definedExternally, OutPPBlendWeight: Number = definedExternally): `T$277`
    open fun WriteLeaderboardInteger(StatName: String, StatValue: Number): Boolean
    open fun GetLocalPlayerSubSystemFromPlayerController(Class: UnrealEngineClass): LocalPlayerSubsystem
    open fun IsLoggedIn(): Boolean
    open fun ShowPlatformSpecificAchievementsScreen()
    open fun DeprojectScreenToWorld(ScreenPosition: Vector2D, WorldPosition: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$278`
    open fun GetLocalPlayerControllerID(): Number
    open fun ProjectWorldToScreen(WorldPosition: Vector, ScreenPosition: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$279`
    open fun RemoveLocalPlayer(bDestroyPawn: Boolean)
    open fun SetLocalPlayerControllerID(ControllerId: Number)
    open fun GetMousePositionScaledByDPI(LocationX: Number = definedExternally, LocationY: Number = definedExternally): `T$273`
    open fun GetPlayerScreenWidgetGeometry(): Geometry
    open fun ProjectWorldLocationToWidgetPosition(WorldLocation: Vector, ScreenPosition: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$279`
    open fun SetInputModeGameAndUI(InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */, bHideCursorDuringCapture: Boolean)
    open fun SetInputMode_GameOnly()
    open fun SetInputModeUIOnly(InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */)

    companion object {
        fun GetDefaultObject(): PlayerController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerController
        fun C(Other: UObject): PlayerController
        fun C(Other: Any): PlayerController
        fun GetCameraCachePOV(PlayerController: PlayerController): MinimalViewInfo
        fun GetLastFrameCameraCachePOV(PlayerController: PlayerController): MinimalViewInfo
        fun GetPostProcessBlendCache(PlayerController: PlayerController, PPIndex: Number, OutPPSettings: PostProcessSettings = definedExternally, OutPPBlendWeight: Number = definedExternally): `T$277`
        fun WriteLeaderboardInteger(PlayerController: PlayerController, StatName: String, StatValue: Number): Boolean
        fun GetLocalPlayerSubSystemFromPlayerController(PlayerController: PlayerController, Class: UnrealEngineClass): LocalPlayerSubsystem
        fun IsLoggedIn(SpecificPlayer: PlayerController): Boolean
        fun ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController)
        fun DeprojectScreenToWorld(Player: PlayerController, ScreenPosition: Vector2D, WorldPosition: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$278`
        fun GetLocalPlayerControllerID(Player: PlayerController): Number
        fun ProjectWorldToScreen(Player: PlayerController, WorldPosition: Vector, ScreenPosition: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$279`
        fun RemoveLocalPlayer(Player: PlayerController, bDestroyPawn: Boolean)
        fun SetLocalPlayerControllerID(Player: PlayerController, ControllerId: Number)
        fun GetMousePositionScaledByDPI(Player: PlayerController, LocationX: Number = definedExternally, LocationY: Number = definedExternally): `T$273`
        fun GetPlayerScreenWidgetGeometry(PlayerController: PlayerController): Geometry
        fun ProjectWorldLocationToWidgetPosition(PlayerController: PlayerController, WorldLocation: Vector, ScreenPosition: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$279`
        fun SetInputModeGameAndUI(PlayerController: PlayerController, InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */, bHideCursorDuringCapture: Boolean)
        fun SetInputMode_GameOnly(PlayerController: PlayerController)
        fun SetInputModeUIOnly(PlayerController: PlayerController, InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */)
    }
}

external open class ScriptViewportClient : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ScriptViewportClient
        fun Find(Outer: UObject, ResourceName: String): ScriptViewportClient
        fun GetDefaultObject(): ScriptViewportClient
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScriptViewportClient
        fun C(Other: UObject): ScriptViewportClient
        fun C(Other: Any): ScriptViewportClient
    }
}

external open class DebugDisplayProperty {
    open var Obj: UObject
    open var WithinClass: UnrealEngineClass
    open fun clone(): DebugDisplayProperty

    companion object {
        fun C(Other: UObject): DebugDisplayProperty
        fun C(Other: Any): DebugDisplayProperty
    }
}

external open class OnlineSession : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): OnlineSession
        fun Find(Outer: UObject, ResourceName: String): OnlineSession
        fun GetDefaultObject(): OnlineSession
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): OnlineSession
        fun C(Other: UObject): OnlineSession
        fun C(Other: Any): OnlineSession
    }
}

external object ETravelFailure {
    var NoLevel: String /* "NoLevel" */
    var LoadMapFailure: String /* "LoadMapFailure" */
    var InvalidURL: String /* "InvalidURL" */
    var PackageMissing: String /* "PackageMissing" */
    var PackageVersion: String /* "PackageVersion" */
    var NoDownload: String /* "NoDownload" */
    var TravelFailure: String /* "TravelFailure" */
    var CheatCommands: String /* "CheatCommands" */
    var PendingNetGameCreateFailure: String /* "PendingNetGameCreateFailure" */
    var CloudSaveFailure: String /* "CloudSaveFailure" */
    var ServerTravelFailure: String /* "ServerTravelFailure" */
    var ClientTravelFailure: String /* "ClientTravelFailure" */
    var ETravelFailure_MAX: String /* "ETravelFailure_MAX" */
}

external object ENetworkFailure {
    var NetDriverAlreadyExists: String /* "NetDriverAlreadyExists" */
    var NetDriverCreateFailure: String /* "NetDriverCreateFailure" */
    var NetDriverListenFailure: String /* "NetDriverListenFailure" */
    var ConnectionLost: String /* "ConnectionLost" */
    var ConnectionTimeout: String /* "ConnectionTimeout" */
    var FailureReceived: String /* "FailureReceived" */
    var OutdatedClient: String /* "OutdatedClient" */
    var OutdatedServer: String /* "OutdatedServer" */
    var PendingConnectionFailure: String /* "PendingConnectionFailure" */
    var NetGuidMismatch: String /* "NetGuidMismatch" */
    var NetChecksumMismatch: String /* "NetChecksumMismatch" */
    var ENetworkFailure_MAX: String /* "ENetworkFailure_MAX" */
}

external open class GameInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LocalPlayers: Array<LocalPlayer>
    open var OnlineSession: OnlineSession
    open var ReferencedObjects: Array<UObject>
    open var OnPawnControllerChangedDelegates: UnrealEngineMulticastDelegate<(Pawn: Pawn, Controller: Controller) -> Unit>
    open fun Shutdown()
    open fun Init()
    open fun TravelError(FailureType: String /* "NoLevel" | "LoadMapFailure" | "InvalidURL" | "PackageMissing" | "PackageVersion" | "NoDownload" | "TravelFailure" | "CheatCommands" | "PendingNetGameCreateFailure" | "CloudSaveFailure" | "ServerTravelFailure" | "ClientTravelFailure" | "ETravelFailure_MAX" */)
    open fun NetworkError(FailureType: String /* "NetDriverAlreadyExists" | "NetDriverCreateFailure" | "NetDriverListenFailure" | "ConnectionLost" | "ConnectionTimeout" | "FailureReceived" | "OutdatedClient" | "OutdatedServer" | "PendingConnectionFailure" | "NetGuidMismatch" | "NetChecksumMismatch" | "ENetworkFailure_MAX" */, bIsServer: Boolean)
    open fun DebugRemovePlayer(ControllerId: Number)
    open fun DebugCreatePlayer(ControllerId: Number)

    companion object {
        fun Load(ResourceName: String): GameInstance
        fun Find(Outer: UObject, ResourceName: String): GameInstance
        fun GetDefaultObject(): GameInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameInstance
        fun C(Other: UObject): GameInstance
        fun C(Other: Any): GameInstance
    }
}

external open class GameViewportClient : ScriptViewportClient {
    constructor()
    constructor(Outer: UObject)
    open var ViewportConsole: Console
    open var DebugProperties: Array<DebugDisplayProperty>
    open var MaxSplitscreenPlayers: Number
    open var World: World
    open var GameInstance: GameInstance
    open fun SSSwapControllers()
    open fun ShowTitleSafeArea()
    open fun SetConsoleTarget(PlayerIndex: Number)

    companion object {
        fun Load(ResourceName: String): GameViewportClient
        fun Find(Outer: UObject, ResourceName: String): GameViewportClient
        fun GetDefaultObject(): GameViewportClient
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameViewportClient
        fun C(Other: UObject): GameViewportClient
        fun C(Other: Any): GameViewportClient
    }
}

external object EAspectRatioAxisConstraint {
    var AspectRatio_MaintainYFOV: String /* "AspectRatio_MaintainYFOV" */
    var AspectRatio_MaintainXFOV: String /* "AspectRatio_MaintainXFOV" */
    var AspectRatio_MajorAxisFOV: String /* "AspectRatio_MajorAxisFOV" */
    var AspectRatio_MAX: String /* "AspectRatio_MAX" */
}

external open class LocalPlayer : Player {
    constructor()
    constructor(Outer: UObject)
    open var ViewportClient: GameViewportClient
    open var AspectRatioAxisConstraint: String /* "AspectRatio_MaintainYFOV" | "AspectRatio_MaintainXFOV" | "AspectRatio_MajorAxisFOV" | "AspectRatio_MAX" */
    open var PendingLevelPlayerControllerClass: UnrealEngineClass
    open var bSentSplitJoin: Boolean
    open var ControllerId: Number

    companion object {
        fun Load(ResourceName: String): LocalPlayer
        fun Find(Outer: UObject, ResourceName: String): LocalPlayer
        fun GetDefaultObject(): LocalPlayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalPlayer
        fun C(Other: UObject): LocalPlayer
        fun C(Other: Any): LocalPlayer
    }
}

external open class JavascriptSlateWidget {
    open fun clone(): JavascriptSlateWidget
    open fun EditorAddModalWindow()
    open fun AddWindow(bShowImmediately: Boolean)
    open fun AddWindowAsNativeChild(RootWindow: JavascriptSlateWidget)
    open fun ShowWindow()

    companion object {
        fun C(Other: UObject): JavascriptSlateWidget
        fun C(Other: Any): JavascriptSlateWidget
        fun EditorAddModalWindow(Widget: JavascriptSlateWidget)
        fun AddWindow(NewWindow: JavascriptSlateWidget, bShowImmediately: Boolean)
        fun AddWindowAsNativeChild(NewWindow: JavascriptSlateWidget, RootWindow: JavascriptSlateWidget)
        fun ShowWindow(NewWindow: JavascriptSlateWidget)
        fun CreateLogListingWidget(InLogName: String): JavascriptSlateWidget
        fun GetRootWindow(): JavascriptSlateWidget
    }
}

external object EHorizontalAlignment {
    var HAlign_Fill: String /* "HAlign_Fill" */
    var HAlign_Left: String /* "HAlign_Left" */
    var HAlign_Center: String /* "HAlign_Center" */
    var HAlign_Right: String /* "HAlign_Right" */
    var HAlign_MAX: String /* "HAlign_MAX" */
}

external object EVerticalAlignment {
    var VAlign_Fill: String /* "VAlign_Fill" */
    var VAlign_Top: String /* "VAlign_Top" */
    var VAlign_Center: String /* "VAlign_Center" */
    var VAlign_Bottom: String /* "VAlign_Bottom" */
    var VAlign_MAX: String /* "VAlign_MAX" */
}

external open class BorderSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): BorderSlot
        fun Find(Outer: UObject, ResourceName: String): BorderSlot
        fun GetDefaultObject(): BorderSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BorderSlot
        fun C(Other: UObject): BorderSlot
        fun C(Other: Any): BorderSlot
    }
}

external open class AnchorData {
    open var Offsets: Margin
    open var Anchors: Anchors
    open var Alignment: Vector2D
    open fun clone(): AnchorData

    companion object {
        fun C(Other: UObject): AnchorData
        fun C(Other: Any): AnchorData
    }
}

external open class CanvasPanelSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var LayoutData: AnchorData
    open var bAutoSize: Boolean
    open var ZOrder: Number
    open fun SetZOrder(InZOrder: Number)
    open fun SetSize(InSize: Vector2D)
    open fun SetPosition(InPosition: Vector2D)
    open fun SetOffsets(InOffset: Margin)
    open fun SetMinimum(InMinimumAnchors: Vector2D)
    open fun SetMaximum(InMaximumAnchors: Vector2D)
    open fun SetLayout(InLayoutData: AnchorData)
    open fun SetAutoSize(InbAutoSize: Boolean)
    open fun SetAnchors(InAnchors: Anchors)
    open fun SetAlignment(InAlignment: Vector2D)
    open fun GetZOrder(): Number
    open fun GetSize(): Vector2D
    open fun GetPosition(): Vector2D
    open fun GetOffsets(): Margin
    open fun GetLayout(): AnchorData
    open fun GetAutoSize(): Boolean
    open fun GetAnchors(): Anchors
    open fun GetAlignment(): Vector2D

    companion object {
        fun Load(ResourceName: String): CanvasPanelSlot
        fun Find(Outer: UObject, ResourceName: String): CanvasPanelSlot
        fun GetDefaultObject(): CanvasPanelSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CanvasPanelSlot
        fun C(Other: UObject): CanvasPanelSlot
        fun C(Other: Any): CanvasPanelSlot
    }
}

external open class GridSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open var Row: Number
    open var RowSpan: Number
    open var Column: Number
    open var ColumnSpan: Number
    open var Layer: Number
    open var Nudge: Vector2D
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetRowSpan(InRowSpan: Number)
    open fun SetRow(InRow: Number)
    open fun SetPadding(InPadding: Margin)
    open fun SetNudge(InNudge: Vector2D)
    open fun SetLayer(InLayer: Number)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)
    open fun SetColumnSpan(InColumnSpan: Number)
    open fun SetColumn(InColumn: Number)

    companion object {
        fun Load(ResourceName: String): GridSlot
        fun Find(Outer: UObject, ResourceName: String): GridSlot
        fun GetDefaultObject(): GridSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GridSlot
        fun C(Other: UObject): GridSlot
        fun C(Other: Any): GridSlot
    }
}

external object ESlateSizeRule {
    var Automatic: String /* "Automatic" */
    var Fill: String /* "Fill" */
    var ESlateSizeRule_MAX: String /* "ESlateSizeRule_MAX" */
}

external open class SlateChildSize {
    open var Value: Number
    open var SizeRule: String /* "Automatic" | "Fill" | "ESlateSizeRule_MAX" */
    open fun clone(): SlateChildSize

    companion object {
        fun C(Other: UObject): SlateChildSize
        fun C(Other: Any): SlateChildSize
    }
}

external open class HorizontalBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var Size: SlateChildSize
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetSize(InSize: SlateChildSize)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): HorizontalBoxSlot
        fun Find(Outer: UObject, ResourceName: String): HorizontalBoxSlot
        fun GetDefaultObject(): HorizontalBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HorizontalBoxSlot
        fun C(Other: UObject): HorizontalBoxSlot
        fun C(Other: Any): HorizontalBoxSlot
    }
}

external open class OverlaySlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): OverlaySlot
        fun Find(Outer: UObject, ResourceName: String): OverlaySlot
        fun GetDefaultObject(): OverlaySlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): OverlaySlot
        fun C(Other: UObject): OverlaySlot
        fun C(Other: Any): OverlaySlot
    }
}

external open class SafeZoneSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var bIsTitleSafe: Boolean
    open var SafeAreaScale: Margin
    open var HAlign: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VAlign: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open var Padding: Margin

    companion object {
        fun Load(ResourceName: String): SafeZoneSlot
        fun Find(Outer: UObject, ResourceName: String): SafeZoneSlot
        fun GetDefaultObject(): SafeZoneSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SafeZoneSlot
        fun C(Other: UObject): SafeZoneSlot
        fun C(Other: Any): SafeZoneSlot
    }
}

external open class ScaleBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): ScaleBoxSlot
        fun Find(Outer: UObject, ResourceName: String): ScaleBoxSlot
        fun GetDefaultObject(): ScaleBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScaleBoxSlot
        fun C(Other: UObject): ScaleBoxSlot
        fun C(Other: Any): ScaleBoxSlot
    }
}

external open class ScrollBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): ScrollBoxSlot
        fun Find(Outer: UObject, ResourceName: String): ScrollBoxSlot
        fun GetDefaultObject(): ScrollBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScrollBoxSlot
        fun C(Other: UObject): ScrollBoxSlot
        fun C(Other: Any): ScrollBoxSlot
    }
}

external open class SizeBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): SizeBoxSlot
        fun Find(Outer: UObject, ResourceName: String): SizeBoxSlot
        fun GetDefaultObject(): SizeBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SizeBoxSlot
        fun C(Other: UObject): SizeBoxSlot
        fun C(Other: Any): SizeBoxSlot
    }
}

external open class UniformGridSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open var Row: Number
    open var Column: Number
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetRow(InRow: Number)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)
    open fun SetColumn(InColumn: Number)

    companion object {
        fun Load(ResourceName: String): UniformGridSlot
        fun Find(Outer: UObject, ResourceName: String): UniformGridSlot
        fun GetDefaultObject(): UniformGridSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UniformGridSlot
        fun C(Other: UObject): UniformGridSlot
        fun C(Other: Any): UniformGridSlot
    }
}

external open class VerticalBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Size: SlateChildSize
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetSize(InSize: SlateChildSize)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): VerticalBoxSlot
        fun Find(Outer: UObject, ResourceName: String): VerticalBoxSlot
        fun GetDefaultObject(): VerticalBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VerticalBoxSlot
        fun C(Other: UObject): VerticalBoxSlot
        fun C(Other: Any): VerticalBoxSlot
    }
}

external open class WidgetSwitcherSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): WidgetSwitcherSlot
        fun Find(Outer: UObject, ResourceName: String): WidgetSwitcherSlot
        fun GetDefaultObject(): WidgetSwitcherSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetSwitcherSlot
        fun C(Other: UObject): WidgetSwitcherSlot
        fun C(Other: Any): WidgetSwitcherSlot
    }
}

external open class WrapBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var bFillEmptySpace: Boolean
    open var FillSpanWhenLessThan: Number
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open var bForceNewLine: Boolean
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetNewLine(InForceNewLine: Boolean)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)
    open fun SetFillSpanWhenLessThan(InFillSpanWhenLessThan: Number)
    open fun SetFillEmptySpace(InbFillEmptySpace: Boolean)

    companion object {
        fun Load(ResourceName: String): WrapBoxSlot
        fun Find(Outer: UObject, ResourceName: String): WrapBoxSlot
        fun GetDefaultObject(): WrapBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WrapBoxSlot
        fun C(Other: UObject): WrapBoxSlot
        fun C(Other: Any): WrapBoxSlot
    }
}

external object EWindowTitleBarMode {
    var Overlay: String /* "Overlay" */
    var VerticalBox: String /* "VerticalBox" */
    var EWindowTitleBarMode_MAX: String /* "EWindowTitleBarMode_MAX" */
}

external open class Widget : Visual {
    constructor()
    constructor(Outer: UObject)
    open var Slot: PanelSlot
    open var bIsEnabledDelegate: UnrealEngineDelegate<() -> Boolean>
    open var ToolTipText: String
    open var ToolTipTextDelegate: UnrealEngineDelegate<() -> String>
    open var ToolTipWidget: Widget
    open var ToolTipWidgetDelegate: UnrealEngineDelegate<() -> Widget>
    open var VisibilityDelegate: UnrealEngineDelegate<() -> String>
    open var RenderTransform: WidgetTransform
    open var RenderTransformPivot: Vector2D
    open var bIsVariable: Boolean
    open var bCreatedByConstructionScript: Boolean
    open var bIsEnabled: Boolean
    open var bOverride_Cursor: Boolean
    open var FlowDirectionPreference: String /* "Inherit" | "Culture" | "LeftToRight" | "RightToLeft" | "EFlowDirectionPreference_MAX" */
    open var bOverrideAccessibleDefaults: Boolean
    open var bCanChildrenBeAccessible: Boolean
    open var AccessibleBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleSummaryBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleText: String
    open var AccessibleTextDelegate: UnrealEngineDelegate<() -> String>
    open var AccessibleSummaryText: String
    open var AccessibleSummaryTextDelegate: UnrealEngineDelegate<() -> String>
    open var AccessibleWidgetData: SlateAccessibleWidgetData
    open var bIsVolatile: Boolean
    open var bHiddenInDesigner: Boolean
    open var bExpandedInDesigner: Boolean
    open var bLockedInDesigner: Boolean
    open var Cursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */
    open var Clipping: String /* "Inherit" | "ClipToBounds" | "ClipToBoundsWithoutIntersecting" | "ClipToBoundsAlways" | "OnDemand" | "EWidgetClipping_MAX" */
    open var Visibility: String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */
    open var RenderOpacity: Number
    open var Navigation: WidgetNavigation
    open var NativeBindings: Array<PropertyBinding>
    open var DesignerFlags: Number
    open var DisplayLabel: String
    open var CategoryName: String
    open fun SetVisibility(InVisibility: String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */)
    open fun SetUserFocus(PlayerController: PlayerController)
    open fun SetToolTipText(InToolTipText: String)
    open fun SetToolTip(Widget: Widget)
    open fun SetRenderTranslation(Translation: Vector2D)
    open fun SetRenderTransformPivot(Pivot: Vector2D)
    open fun SetRenderTransformAngle(Angle: Number)
    open fun SetRenderTransform(InTransform: WidgetTransform)
    open fun SetRenderShear(Shear: Vector2D)
    open fun SetRenderScale(Scale: Vector2D)
    open fun SetRenderOpacity(InOpacity: Number)
    open fun SetNavigationRuleExplicit(Direction: String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */, InWidget: Widget)
    open fun SetNavigationRuleBase(Direction: String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */, Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */)
    open fun SetNavigationRule(Direction: String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */, Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */, WidgetToFocus: String)
    open fun SetKeyboardFocus()
    open fun SetIsEnabled(bInIsEnabled: Boolean)
    open fun SetFocus()
    open fun SetCursor(InCursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */)
    open fun SetClipping(InClipping: String /* "Inherit" | "ClipToBounds" | "ClipToBoundsWithoutIntersecting" | "ClipToBoundsAlways" | "OnDemand" | "EWidgetClipping_MAX" */)
    open fun SetAllNavigationRules(Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */, WidgetToFocus: String)
    open fun ResetCursor()
    open fun RemoveFromParent()
    open fun IsVisible(): Boolean
    open fun IsHovered(): Boolean
    open fun InvalidateLayoutAndVolatility()
    open fun HasUserFocusedDescendants(PlayerController: PlayerController): Boolean
    open fun HasUserFocus(PlayerController: PlayerController): Boolean
    open fun HasMouseCaptureByUser(UserIndex: Number, PointerIndex: Number): Boolean
    open fun HasMouseCapture(): Boolean
    open fun HasKeyboardFocus(): Boolean
    open fun HasAnyUserFocusedDescendants(): Boolean
    open fun HasAnyUserFocus(): Boolean
    open fun GetVisibility(): String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */
    open fun GetTickSpaceGeometry(): Geometry
    open fun GetRenderTransformAngle(): Number
    open fun GetRenderOpacity(): Number
    open fun GetParent(): PanelWidget
    open fun GetPaintSpaceGeometry(): Geometry
    open fun GetOwningPlayer(): PlayerController
    open fun GetOwningLocalPlayer(): LocalPlayer
    open fun GetIsEnabled(): Boolean
    open fun GetGameInstance(): GameInstance
    open fun GetDesiredSize(): Vector2D
    open fun GetClipping(): String /* "Inherit" | "ClipToBounds" | "ClipToBoundsWithoutIntersecting" | "ClipToBoundsAlways" | "OnDemand" | "EWidgetClipping_MAX" */
    open fun GetCachedGeometry(): Geometry
    open fun GetAccessibleText(): String
    open fun GetAccessibleSummaryText(): String
    open fun ForceVolatile(bForce: Boolean)
    open fun ForceLayoutPrepass()
    open fun GetUIGeometry(): Geometry
    open fun TakeWidget(): JavascriptSlateWidget
    open fun SlotAsBorderSlot(): BorderSlot
    open fun SlotAsCanvasSlot(): CanvasPanelSlot
    open fun SlotAsGridSlot(): GridSlot
    open fun SlotAsHorizontalBoxSlot(): HorizontalBoxSlot
    open fun SlotAsOverlaySlot(): OverlaySlot
    open fun SlotAsSafeBoxSlot(): SafeZoneSlot
    open fun SlotAsScaleBoxSlot(): ScaleBoxSlot
    open fun SlotAsScrollBoxSlot(): ScrollBoxSlot
    open fun SlotAsSizeBoxSlot(): SizeBoxSlot
    open fun SlotAsUniformGridSlot(): UniformGridSlot
    open fun SlotAsVerticalBoxSlot(): VerticalBoxSlot
    open fun SlotAsWidgetSwitcherSlot(): WidgetSwitcherSlot
    open fun SlotAsWrapBoxSlot(): WrapBoxSlot
    open fun SetWindowTitleBarState(Mode: String /* "Overlay" | "VerticalBox" | "EWindowTitleBarMode_MAX" */, bTitleBarDragEnabled: Boolean, bWindowButtonsVisible: Boolean, bTitleBarVisible: Boolean)

    companion object {
        fun Load(ResourceName: String): Widget
        fun Find(Outer: UObject, ResourceName: String): Widget
        fun GetDefaultObject(): Widget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Widget
        fun C(Other: UObject): Widget
        fun C(Other: Any): Widget
        fun GetUIGeometry(Widget: Widget): Geometry
        fun TakeWidget(Widget: Widget): JavascriptSlateWidget
        fun SlotAsBorderSlot(Widget: Widget): BorderSlot
        fun SlotAsCanvasSlot(Widget: Widget): CanvasPanelSlot
        fun SlotAsGridSlot(Widget: Widget): GridSlot
        fun SlotAsHorizontalBoxSlot(Widget: Widget): HorizontalBoxSlot
        fun SlotAsOverlaySlot(Widget: Widget): OverlaySlot
        fun SlotAsSafeBoxSlot(Widget: Widget): SafeZoneSlot
        fun SlotAsScaleBoxSlot(Widget: Widget): ScaleBoxSlot
        fun SlotAsScrollBoxSlot(Widget: Widget): ScrollBoxSlot
        fun SlotAsSizeBoxSlot(Widget: Widget): SizeBoxSlot
        fun SlotAsUniformGridSlot(Widget: Widget): UniformGridSlot
        fun SlotAsVerticalBoxSlot(Widget: Widget): VerticalBoxSlot
        fun SlotAsWidgetSwitcherSlot(Widget: Widget): WidgetSwitcherSlot
        fun SlotAsWrapBoxSlot(Widget: Widget): WrapBoxSlot
        fun SetWindowTitleBarState(TitleBarContent: Widget, Mode: String /* "Overlay" | "VerticalBox" | "EWindowTitleBarMode_MAX" */, bTitleBarDragEnabled: Boolean, bWindowButtonsVisible: Boolean, bTitleBarVisible: Boolean)
    }
}

external object EDragPivot {
    var MouseDown: String /* "MouseDown" */
    var TopLeft: String /* "TopLeft" */
    var TopCenter: String /* "TopCenter" */
    var TopRight: String /* "TopRight" */
    var CenterLeft: String /* "CenterLeft" */
    var CenterCenter: String /* "CenterCenter" */
    var CenterRight: String /* "CenterRight" */
    var BottomLeft: String /* "BottomLeft" */
    var BottomCenter: String /* "BottomCenter" */
    var BottomRight: String /* "BottomRight" */
    var EDragPivot_MAX: String /* "EDragPivot_MAX" */
}

external open class DragDropOperation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Tag: String
    open var Payload: UObject
    open var DefaultDragVisual: Widget
    open var Pivot: String /* "MouseDown" | "TopLeft" | "TopCenter" | "TopRight" | "CenterLeft" | "CenterCenter" | "CenterRight" | "BottomLeft" | "BottomCenter" | "BottomRight" | "EDragPivot_MAX" */
    open var Offset: Vector2D
    open var OnDrop: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>
    open var OnDragCancelled: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>
    open var OnDragged: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>
    open fun Drop(UPointerEvent: UPointerEvent)
    open fun Dragged(UPointerEvent: UPointerEvent)
    open fun DragCancelled(UPointerEvent: UPointerEvent)

    companion object {
        fun Load(ResourceName: String): DragDropOperation
        fun Find(Outer: UObject, ResourceName: String): DragDropOperation
        fun GetDefaultObject(): DragDropOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DragDropOperation
        fun C(Other: UObject): DragDropOperation
        fun C(Other: Any): DragDropOperation
    }
}

external interface `T$280` {
    var Identifier: String
}

external interface `T$281` {
    var Results: Array<UnrealEngineClass>
}

external interface `T$282` {
    var Results: Array<UObject>
}

external interface `T$283` {
    var OutUserData: Array<DatasmithAssetUserData>
}

external interface `T$284` {
    var Var: CameraLensInterfaceClassSupport
    var Result: String /* "Valid" | "Invalid" | "EInterfaceValidResult_MAX" */
}

external interface `T$285` {
    var Results: Array<UnrealEngineClass>
}

external interface `T$286` {
    var Results: Array<UObject>
}

external interface `T$287` {
    var OutUserData: Array<DatasmithAssetUserData>
}

external open class Class : Struct {
    constructor()
    constructor(Outer: UObject)
    open fun DeleteColorForChannels(Identifier: String = definedExternally): `T$280`
    open fun GetCustomColorForChannel(Identifier: String): LinearColor
    open fun HasCustomColorForChannel(Identifier: String): Boolean
    open fun SetCustomColorForChannel(Identifier: String, NewColor: LinearColor)
    open fun SetCustomColorForChannels(Identifiers: Array<String>, NewColors: Array<LinearColor>)
    open fun SetRandomColorForChannels(Identifiers: Array<String>)
    open fun SpawnActorFromClass(Location: Vector, Rotation: Rotator, bTransient: Boolean): Actor
    open fun AddDynamicBinding(BindingObject: DynamicBlueprintBinding)
    open fun GetClassPathName(): String
    open fun GetDerivedClasses(Results: Array<UnrealEngineClass> = definedExternally, bRecursive: Boolean = definedExternally): `T$281`
    open fun GetDynamicBinding(BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding
    open fun GetObjectsOfClass(Results: Array<UObject> = definedExternally, bIncludeDerivedClasses: Boolean = definedExternally, ExcludeFlags: Number = definedExternally, ExclusionInternalFlags: Number = definedExternally): `T$282`
    open fun GetSuperClasses(): Array<UnrealEngineClass>
    open fun IsGeneratedByBlueprint(): Boolean
    open fun GetAllDatasmithUserData(OutUserData: Array<DatasmithAssetUserData> = definedExternally): `T$283`
    open fun GetEngineSubsystem(): EngineSubsystem
    open fun CreateNewLightWeightInstance(Transform: Transform, Layer: DataLayer, World: World): ActorInstanceHandle
    open fun Conv_ClassToSoftClassReference(): Class
    open fun Conv_SoftClassReferenceToClass(): UnrealEngineClass
    open fun Equal(B: Class): Boolean
    open fun GetClassDisplayName(): String
    open fun GetPrimaryAssetIdFromClass(): PrimaryAssetId
    open fun GetPrimaryAssetIdFromSoftClassReference(): PrimaryAssetId
    open fun IsValidClass(): Boolean
    open fun IsValidSoftClassReference(): Boolean
    open fun LoadClassAsset_Blocking(): UnrealEngineClass
    open fun NotEqual(B: Class): Boolean
    open fun ClassIsChildOf(ParentClass: UnrealEngineClass): Boolean
    open fun Equal(B: UnrealEngineClass): Boolean
    open fun NotEqual(B: UnrealEngineClass): Boolean
    open fun SelectClass(B: UnrealEngineClass, bSelectA: Boolean): UnrealEngineClass
    open fun CreateSaveGameObject(): SaveGame
    open fun SpawnObject(Outer: UObject): UObject
    open fun SetInterfaceClass(Var: CameraLensInterfaceClassSupport = definedExternally, Result: String /* "Valid" | "Invalid" | "EInterfaceValidResult_MAX" */ = definedExternally): `T$284`
    open fun GetEditorSubsystem(): EditorSubsystem
    open fun CreateDragDropOperation(): DragDropOperation
    open fun GetAllARGeometriesByClass(): Array<ARTrackedGeometry>

    companion object {
        fun Load(ResourceName: String): Class
        fun Find(Outer: UObject, ResourceName: String): Class
        fun GetDefaultObject(): Class
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Class
        fun C(Other: UObject): Class
        fun C(Other: Any): Class
        fun DeleteColorForChannels(Class: UnrealEngineClass, Identifier: String = definedExternally): `T$280`
        fun GetCustomColorForChannel(Class: UnrealEngineClass, Identifier: String): LinearColor
        fun HasCustomColorForChannel(Class: UnrealEngineClass, Identifier: String): Boolean
        fun SetCustomColorForChannel(Class: UnrealEngineClass, Identifier: String, NewColor: LinearColor)
        fun SetCustomColorForChannels(Class: UnrealEngineClass, Identifiers: Array<String>, NewColors: Array<LinearColor>)
        fun SetRandomColorForChannels(Class: UnrealEngineClass, Identifiers: Array<String>)
        fun SpawnActorFromClass(ActorClass: UnrealEngineClass, Location: Vector, Rotation: Rotator, bTransient: Boolean): Actor
        fun AddDynamicBinding(Outer: UnrealEngineClass, BindingObject: DynamicBlueprintBinding)
        fun GetClassPathName(Class: UnrealEngineClass): String
        fun GetDerivedClasses(ClassToLookFor: UnrealEngineClass, Results: Array<UnrealEngineClass> = definedExternally, bRecursive: Boolean = definedExternally): `T$285`
        fun GetDynamicBinding(Outer: UnrealEngineClass, BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding
        fun GetObjectsOfClass(ClassToLookFor: UnrealEngineClass, Results: Array<UObject> = definedExternally, bIncludeDerivedClasses: Boolean = definedExternally, ExcludeFlags: Number = definedExternally, ExclusionInternalFlags: Number = definedExternally): `T$286`
        fun GetSuperClasses(InClass: UnrealEngineClass): Array<UnrealEngineClass>
        fun IsGeneratedByBlueprint(InClass: UnrealEngineClass): Boolean
        fun GetAllDatasmithUserData(ObjectClass: UnrealEngineClass, OutUserData: Array<DatasmithAssetUserData> = definedExternally): `T$287`
        fun GetEngineSubsystem(Class: UnrealEngineClass): EngineSubsystem
        fun CreateNewLightWeightInstance(ActorClass: UnrealEngineClass, Transform: Transform, Layer: DataLayer, World: World): ActorInstanceHandle
        fun Conv_ClassToSoftClassReference(Class: UnrealEngineClass): Class
        fun Conv_SoftClassReferenceToClass(softclass: Class): UnrealEngineClass
        fun ToString(SoftClassReference: Class): String
        fun Equal(A: Class, B: Class): Boolean
        fun GetClassDisplayName(Class: UnrealEngineClass): String
        fun GetPrimaryAssetIdFromClass(Class: UnrealEngineClass): PrimaryAssetId
        fun GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: Class): PrimaryAssetId
        fun IsValidClass(Class: UnrealEngineClass): Boolean
        fun IsValidSoftClassReference(SoftClassReference: Class): Boolean
        fun LoadClassAsset_Blocking(AssetClass: Class): UnrealEngineClass
        fun NotEqual(A: Class, B: Class): Boolean
        fun ClassIsChildOf(TestClass: UnrealEngineClass, ParentClass: UnrealEngineClass): Boolean
        fun Equal(A: UnrealEngineClass, B: UnrealEngineClass): Boolean
        fun NotEqual(A: UnrealEngineClass, B: UnrealEngineClass): Boolean
        fun SelectClass(A: UnrealEngineClass, B: UnrealEngineClass, bSelectA: Boolean): UnrealEngineClass
        fun CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame
        fun SpawnObject(ObjectClass: UnrealEngineClass, Outer: UObject): UObject
        fun SetInterfaceClass(Class: UnrealEngineClass, Var: CameraLensInterfaceClassSupport = definedExternally, Result: String /* "Valid" | "Invalid" | "EInterfaceValidResult_MAX" */ = definedExternally): `T$284`
        fun GetEditorSubsystem(Class: UnrealEngineClass): EditorSubsystem
        fun CreateDragDropOperation(OperationClass: UnrealEngineClass): DragDropOperation
        fun GetAllARGeometriesByClass(GeometryClass: UnrealEngineClass): Array<ARTrackedGeometry>
    }
}

external open class NavAgentSelector {
    open var bSupportsAgent0: Boolean
    open var bSupportsAgent1: Boolean
    open var bSupportsAgent2: Boolean
    open var bSupportsAgent3: Boolean
    open var bSupportsAgent4: Boolean
    open var bSupportsAgent5: Boolean
    open var bSupportsAgent6: Boolean
    open var bSupportsAgent7: Boolean
    open var bSupportsAgent8: Boolean
    open var bSupportsAgent9: Boolean
    open var bSupportsAgent10: Boolean
    open var bSupportsAgent11: Boolean
    open var bSupportsAgent12: Boolean
    open var bSupportsAgent13: Boolean
    open var bSupportsAgent14: Boolean
    open var bSupportsAgent15: Boolean
    open fun clone(): NavAgentSelector

    companion object {
        fun C(Other: UObject): NavAgentSelector
        fun C(Other: Any): NavAgentSelector
    }
}

external open class NavigationSystemConfig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NavigationSystemClass: SoftClassPath
    open var SupportedAgentsMask: NavAgentSelector
    open var DefaultAgentName: String
    open var bIsOverriden: Boolean

    companion object {
        fun Load(ResourceName: String): NavigationSystemConfig
        fun Find(Outer: UObject, ResourceName: String): NavigationSystemConfig
        fun GetDefaultObject(): NavigationSystemConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationSystemConfig
        fun C(Other: UObject): NavigationSystemConfig
        fun C(Other: Any): NavigationSystemConfig
    }
}

external open class ActorDescContainer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var World: World

    companion object {
        fun Load(ResourceName: String): ActorDescContainer
        fun Find(Outer: UObject, ResourceName: String): ActorDescContainer
        fun GetDefaultObject(): ActorDescContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ActorDescContainer
        fun C(Other: UObject): ActorDescContainer
        fun C(Other: Any): ActorDescContainer
    }
}

external open class WorldPartitionEditorHash : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): WorldPartitionEditorHash
        fun Find(Outer: UObject, ResourceName: String): WorldPartitionEditorHash
        fun GetDefaultObject(): WorldPartitionEditorHash
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldPartitionEditorHash
        fun C(Other: UObject): WorldPartitionEditorHash
        fun C(Other: Any): WorldPartitionEditorHash
    }
}

external open class WorldPartitionStreamingPolicy : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): WorldPartitionStreamingPolicy
        fun Find(Outer: UObject, ResourceName: String): WorldPartitionStreamingPolicy
        fun GetDefaultObject(): WorldPartitionStreamingPolicy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldPartitionStreamingPolicy
        fun C(Other: UObject): WorldPartitionStreamingPolicy
        fun C(Other: Any): WorldPartitionStreamingPolicy
    }
}

external open class WorldPartitionRuntimeHash : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): WorldPartitionRuntimeHash
        fun Find(Outer: UObject, ResourceName: String): WorldPartitionRuntimeHash
        fun GetDefaultObject(): WorldPartitionRuntimeHash
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldPartitionRuntimeHash
        fun C(Other: UObject): WorldPartitionRuntimeHash
        fun C(Other: Any): WorldPartitionRuntimeHash
    }
}

external object EHLODLayerType {
    var Instancing: String /* "Instancing" */
    var MeshMerge: String /* "MeshMerge" */
    var MeshSimplify: String /* "MeshSimplify" */
    var MeshApproximate: String /* "MeshApproximate" */
    var Custom: String /* "Custom" */
    var EHLODLayerType_MAX: String /* "EHLODLayerType_MAX" */
}

external open class HLODBuilderSettings : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): HLODBuilderSettings
        fun Find(Outer: UObject, ResourceName: String): HLODBuilderSettings
        fun GetDefaultObject(): HLODBuilderSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HLODBuilderSettings
        fun C(Other: UObject): HLODBuilderSettings
        fun C(Other: Any): HLODBuilderSettings
    }
}

external open class HLODBuilder : UObject {
    constructor()
    constructor(Outer: UObject)
    open var HLODBuilderSettings: HLODBuilderSettings

    companion object {
        fun Load(ResourceName: String): HLODBuilder
        fun Find(Outer: UObject, ResourceName: String): HLODBuilder
        fun GetDefaultObject(): HLODBuilder
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HLODBuilder
        fun C(Other: UObject): HLODBuilder
        fun C(Other: Any): HLODBuilder
    }
}

external object EUVOutput {
    var DoNotOutputChannel: String /* "DoNotOutputChannel" */
    var OutputChannel: String /* "OutputChannel" */
    var EUVOutput_MAX: String /* "EUVOutput_MAX" */
}

external object EMeshLODSelectionType {
    var AllLODs: String /* "AllLODs" */
    var SpecificLOD: String /* "SpecificLOD" */
    var CalculateLOD: String /* "CalculateLOD" */
    var LowestDetailLOD: String /* "LowestDetailLOD" */
    var EMeshLODSelectionType_MAX: String /* "EMeshLODSelectionType_MAX" */
}

external open class MeshMergingSettings {
    open var TargetLightMapResolution: Number
    open var OutputUVs: String /* "DoNotOutputChannel" | "OutputChannel" | "EUVOutput_MAX" */
    open var MaterialSettings: MaterialProxySettings
    open var GutterSize: Number
    open var SpecificLOD: Number
    open var LODSelectionType: String /* "AllLODs" | "SpecificLOD" | "CalculateLOD" | "LowestDetailLOD" | "EMeshLODSelectionType_MAX" */
    open var bGenerateLightMapUV: Boolean
    open var bComputedLightMapResolution: Boolean
    open var bPivotPointAtZero: Boolean
    open var bMergePhysicsData: Boolean
    open var bMergeMaterials: Boolean
    open var bCreateMergedMaterial: Boolean
    open var bBakeVertexDataToMesh: Boolean
    open var bUseVertexDataForBakingMaterial: Boolean
    open var bUseTextureBinning: Boolean
    open var bReuseMeshLightmapUVs: Boolean
    open var bMergeEquivalentMaterials: Boolean
    open var bUseLandscapeCulling: Boolean
    open var bIncludeImposters: Boolean
    open var bAllowDistanceField: Boolean
    open var bGenerateNaniteEnabledMesh: Boolean
    open var NaniteFallbackTrianglePercent: Number
    open var bImportVertexColors: Boolean
    open var bCalculateCorrectLODModel: Boolean
    open var bExportNormalMap: Boolean
    open var bExportMetallicMap: Boolean
    open var bExportRoughnessMap: Boolean
    open var bExportSpecularMap: Boolean
    open var MergedMaterialAtlasResolution: Number
    open var ExportSpecificLOD: Number
    open fun clone(): MeshMergingSettings

    companion object {
        fun C(Other: UObject): MeshMergingSettings
        fun C(Other: Any): MeshMergingSettings
    }
}

external object EProxyNormalComputationMethod {
    var AngleWeighted: String /* "AngleWeighted" */
    var AreaWeighted: String /* "AreaWeighted" */
    var EqualWeighted: String /* "EqualWeighted" */
    var EProxyNormalComputationMethod_MAX: String /* "EProxyNormalComputationMethod_MAX" */
}

external object ELandscapeCullingPrecision {
    var High: String /* "High" */
    var Medium: String /* "Medium" */
    var Low: String /* "Low" */
    var ELandscapeCullingPrecision_MAX: String /* "ELandscapeCullingPrecision_MAX" */
}

external open class MeshProxySettings {
    open var ScreenSize: Number
    open var VoxelSize: Number
    open var MaterialSettings: MaterialProxySettings
    open var TextureWidth: Number
    open var TextureHeight: Number
    open var bExportNormalMap: Boolean
    open var bExportMetallicMap: Boolean
    open var bExportRoughnessMap: Boolean
    open var bExportSpecularMap: Boolean
    open var bBakeVertexData: Boolean
    open var MergeDistance: Number
    open var UnresolvedGeometryColor: Color
    open var MaxRayCastDist: Number
    open var HardAngleThreshold: Number
    open var LightMapResolution: Number
    open var NormalCalculationMethod: String /* "AngleWeighted" | "AreaWeighted" | "EqualWeighted" | "EProxyNormalComputationMethod_MAX" */
    open var LandscapeCullingPrecision: String /* "High" | "Medium" | "Low" | "ELandscapeCullingPrecision_MAX" */
    open var bCalculateCorrectLODModel: Boolean
    open var bOverrideVoxelSize: Boolean
    open var bOverrideTransferDistance: Boolean
    open var bUseHardAngleThreshold: Boolean
    open var bComputeLightMapResolution: Boolean
    open var bRecalculateNormals: Boolean
    open var bUseLandscapeCulling: Boolean
    open var bAllowDistanceField: Boolean
    open var bReuseMeshLightmapUVs: Boolean
    open var bGroupIdenticalMeshesForBaking: Boolean
    open var bCreateCollision: Boolean
    open var bAllowVertexColors: Boolean
    open var bGenerateLightmapUVs: Boolean
    open var bGenerateNaniteEnabledMesh: Boolean
    open var NaniteProxyTrianglePercent: Number
    open fun clone(): MeshProxySettings

    companion object {
        fun C(Other: UObject): MeshProxySettings
        fun C(Other: Any): MeshProxySettings
    }
}

external object EMeshApproximationType {
    var MeshAndMaterials: String /* "MeshAndMaterials" */
    var MeshShapeOnly: String /* "MeshShapeOnly" */
    var EMeshApproximationType_MAX: String /* "EMeshApproximationType_MAX" */
}

external object EMeshApproximationBaseCappingType {
    var NoBaseCapping: String /* "NoBaseCapping" */
    var ConvexPolygon: String /* "ConvexPolygon" */
    var ConvexSolid: String /* "ConvexSolid" */
    var EMeshApproximationBaseCappingType_MAX: String /* "EMeshApproximationBaseCappingType_MAX" */
}

external object EOccludedGeometryFilteringPolicy {
    var NoOcclusionFiltering: String /* "NoOcclusionFiltering" */
    var VisibilityBasedFiltering: String /* "VisibilityBasedFiltering" */
    var EOccludedGeometryFilteringPolicy_MAX: String /* "EOccludedGeometryFilteringPolicy_MAX" */
}

external object EMeshApproximationSimplificationPolicy {
    var FixedTriangleCount: String /* "FixedTriangleCount" */
    var TrianglesPerArea: String /* "TrianglesPerArea" */
    var GeometricTolerance: String /* "GeometricTolerance" */
    var EMeshApproximationSimplificationPolicy_MAX: String /* "EMeshApproximationSimplificationPolicy_MAX" */
}

external object EMeshApproximationGroundPlaneClippingPolicy {
    var NoGroundClipping: String /* "NoGroundClipping" */
    var DiscardWithZPlane: String /* "DiscardWithZPlane" */
    var CutWithZPlane: String /* "CutWithZPlane" */
    var CutAndFillWithZPlane: String /* "CutAndFillWithZPlane" */
    var EMeshApproximationGroundPlaneClippingPolicy_MAX: String /* "EMeshApproximationGroundPlaneClippingPolicy_MAX" */
}

external object EMeshApproximationUVGenerationPolicy {
    var PreferUVAtlas: String /* "PreferUVAtlas" */
    var PreferXAtlas: String /* "PreferXAtlas" */
    var PreferPatchBuilder: String /* "PreferPatchBuilder" */
    var EMeshApproximationUVGenerationPolicy_MAX: String /* "EMeshApproximationUVGenerationPolicy_MAX" */
}

external open class MeshApproximationSettings {
    open var OutputType: String /* "MeshAndMaterials" | "MeshShapeOnly" | "EMeshApproximationType_MAX" */
    open var ApproximationAccuracy: Number
    open var ClampVoxelDimension: Number
    open var bAttemptAutoThickening: Boolean
    open var TargetMinThicknessMultiplier: Number
    open var bIgnoreTinyParts: Boolean
    open var TinyPartSizeMultiplier: Number
    open var BaseCapping: String /* "NoBaseCapping" | "ConvexPolygon" | "ConvexSolid" | "EMeshApproximationBaseCappingType_MAX" */
    open var WindingThreshold: Number
    open var bFillGaps: Boolean
    open var GapDistance: Number
    open var OcclusionMethod: String /* "NoOcclusionFiltering" | "VisibilityBasedFiltering" | "EOccludedGeometryFilteringPolicy_MAX" */
    open var bOccludeFromBottom: Boolean
    open var SimplifyMethod: String /* "FixedTriangleCount" | "TrianglesPerArea" | "GeometricTolerance" | "EMeshApproximationSimplificationPolicy_MAX" */
    open var TargetTriCount: Number
    open var TrianglesPerM: Number
    open var GeometricDeviation: Number
    open var GroundClipping: String /* "NoGroundClipping" | "DiscardWithZPlane" | "CutWithZPlane" | "CutAndFillWithZPlane" | "EMeshApproximationGroundPlaneClippingPolicy_MAX" */
    open var GroundClippingZHeight: Number
    open var bEstimateHardNormals: Boolean
    open var HardNormalAngle: Number
    open var UVGenerationMethod: String /* "PreferUVAtlas" | "PreferXAtlas" | "PreferPatchBuilder" | "EMeshApproximationUVGenerationPolicy_MAX" */
    open var InitialPatchCount: Number
    open var CurvatureAlignment: Number
    open var MergingThreshold: Number
    open var MaxAngleDeviation: Number
    open var bGenerateNaniteEnabledMesh: Boolean
    open var NaniteProxyTrianglePercent: Number
    open var bSupportRayTracing: Boolean
    open var bAllowDistanceField: Boolean
    open var MultiSamplingAA: Number
    open var RenderCaptureResolution: Number
    open var MaterialSettings: MaterialProxySettings
    open var CaptureFieldOfView: Number
    open var NearPlaneDist: Number
    open var bUseRenderLODMeshes: Boolean
    open var bEnableSimplifyPrePass: Boolean
    open var bEnableParallelBaking: Boolean
    open var bPrintDebugMessages: Boolean
    open var bEmitFullDebugMesh: Boolean
    open fun clone(): MeshApproximationSettings

    companion object {
        fun C(Other: UObject): MeshApproximationSettings
        fun C(Other: Any): MeshApproximationSettings
    }
}

external open class HLODLayer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LayerType: String /* "Instancing" | "MeshMerge" | "MeshSimplify" | "MeshApproximate" | "Custom" | "EHLODLayerType_MAX" */
    open var HLODBuilderClass: UnrealEngineClass
    open var HLODBuilderSettings: HLODBuilderSettings
    open var bIsSpatiallyLoaded: Boolean
    open var bAlwaysLoaded: Boolean
    open var CellSize: Number
    open var LoadingRange: Any
    open var ParentLayer: HLODLayer
    open var MeshMergeSettings: MeshMergingSettings
    open var MeshSimplifySettings: MeshProxySettings
    open var MeshApproximationSettings: MeshApproximationSettings
    open var HLODMaterial: Material

    companion object {
        fun Load(ResourceName: String): HLODLayer
        fun Find(Outer: UObject, ResourceName: String): HLODLayer
        fun GetDefaultObject(): HLODLayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HLODLayer
        fun C(Other: UObject): HLODLayer
        fun C(Other: Any): HLODLayer
    }
}

external open class WorldPartition : ActorDescContainer {
    constructor()
    constructor(Outer: UObject)
    open var EditorHash: WorldPartitionEditorHash
    open var WorldPartitionStreamingPolicyClass: UnrealEngineClass
    open var bEnableStreaming: Boolean
    open var bStreamingWasEnabled: Boolean
    open var RuntimeHash: WorldPartitionRuntimeHash
    open var DefaultHLODLayer: HLODLayer
    open var StreamingPolicy: WorldPartitionStreamingPolicy

    companion object {
        fun Load(ResourceName: String): WorldPartition
        fun Find(Outer: UObject, ResourceName: String): WorldPartition
        fun GetDefaultObject(): WorldPartition
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldPartition
        fun C(Other: UObject): WorldPartition
        fun C(Other: Any): WorldPartition
    }
}

external open class DefaultPhysicsVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : PhysicsVolume {
    companion object {
        fun GetDefaultObject(): DefaultPhysicsVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DefaultPhysicsVolume
        fun C(Other: UObject): DefaultPhysicsVolume
        fun C(Other: Any): DefaultPhysicsVolume
    }
}

external open class PhysicsCollisionHandler : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ImpactThreshold: Number
    open var ImpactReFireDelay: Number
    open var DefaultImpactSound: SoundBase
    open var LastImpactSoundTime: Number

    companion object {
        fun Load(ResourceName: String): PhysicsCollisionHandler
        fun Find(Outer: UObject, ResourceName: String): PhysicsCollisionHandler
        fun GetDefaultObject(): PhysicsCollisionHandler
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsCollisionHandler
        fun C(Other: UObject): PhysicsCollisionHandler
        fun C(Other: Any): PhysicsCollisionHandler
    }
}

external open class GameSession(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var MaxSpectators: Number
    open var MaxPlayers: Number
    open var MaxPartySize: Number
    open var MaxSplitscreensPerConnection: Number
    open var bRequiresPushToTalk: Boolean
    open var SessionName: String

    companion object {
        fun GetDefaultObject(): GameSession
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameSession
        fun C(Other: UObject): GameSession
        fun C(Other: Any): GameSession
    }
}

external open class GameStateBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var GameModeClass: UnrealEngineClass
    open var AuthorityGameMode: GameModeBase
    open var SpectatorClass: UnrealEngineClass
    open var PlayerArray: Array<PlayerState>
    open var bReplicatedHasBegunPlay: Boolean
    open var ReplicatedWorldTimeSeconds: Number
    open var ServerWorldTimeSecondsDelta: Number
    open var ServerWorldTimeSecondsUpdateFrequency: Number
    open fun OnRep_SpectatorClass()
    open fun OnRep_ReplicatedWorldTimeSeconds()
    open fun OnRep_ReplicatedHasBegunPlay()
    open fun OnRep_GameModeClass()
    open fun HasMatchStarted(): Boolean
    open fun HasMatchEnded(): Boolean
    open fun HasBegunPlay(): Boolean
    open fun GetServerWorldTimeSeconds(): Number
    open fun GetPlayerStartTime(Controller: Controller): Number
    open fun GetPlayerRespawnDelay(Controller: Controller): Number

    companion object {
        fun GetDefaultObject(): GameStateBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameStateBase
        fun C(Other: UObject): GameStateBase
        fun C(Other: Any): GameStateBase
    }
}

external open class ServerStatReplicator(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var bUpdateStatNet: Boolean
    open var bOverwriteClientStats: Boolean
    open var Channels: Any
    open var InRate: Any
    open var OutRate: Any
    open var MaxPacketOverhead: Any
    open var InRateClientMax: Any
    open var InRateClientMin: Any
    open var InRateClientAvg: Any
    open var InPacketsClientMax: Any
    open var InPacketsClientMin: Any
    open var InPacketsClientAvg: Any
    open var OutRateClientMax: Any
    open var OutRateClientMin: Any
    open var OutRateClientAvg: Any
    open var OutPacketsClientMax: Any
    open var OutPacketsClientMin: Any
    open var OutPacketsClientAvg: Any
    open var NetNumClients: Any
    open var InPackets: Any
    open var OutPackets: Any
    open var InBunches: Any
    open var OutBunches: Any
    open var OutLoss: Any
    open var InLoss: Any
    open var VoiceBytesSent: Any
    open var VoiceBytesRecv: Any
    open var VoicePacketsSent: Any
    open var VoicePacketsRecv: Any
    open var PercentInVoice: Any
    open var PercentOutVoice: Any
    open var NumActorChannels: Any
    open var NumConsideredActors: Any
    open var PrioritizedActors: Any
    open var NumRelevantActors: Any
    open var NumRelevantDeletedActors: Any
    open var NumReplicatedActorAttempts: Any
    open var NumReplicatedActors: Any
    open var NumActors: Any
    open var NumNetActors: Any
    open var NumDormantActors: Any
    open var NumInitiallyDormantActors: Any
    open var NumNetGUIDsAckd: Any
    open var NumNetGUIDsPending: Any
    open var NumNetGUIDsUnAckd: Any
    open var ObjPathBytes: Any
    open var NetGUIDOutRate: Any
    open var NetGUIDInRate: Any
    open var NetSaturated: Any

    companion object {
        fun GetDefaultObject(): ServerStatReplicator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ServerStatReplicator
        fun C(Other: UObject): ServerStatReplicator
        fun C(Other: Any): ServerStatReplicator
    }
}

external interface `T$288` {
    var C: Controller
}

external open class GameModeBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var OptionsString: String
    open var GameSessionClass: UnrealEngineClass
    open var GameStateClass: UnrealEngineClass
    open var PlayerControllerClass: UnrealEngineClass
    open var PlayerStateClass: UnrealEngineClass
    open var HUDClass: UnrealEngineClass
    open var DefaultPawnClass: UnrealEngineClass
    open var SpectatorClass: UnrealEngineClass
    open var ReplaySpectatorPlayerControllerClass: UnrealEngineClass
    open var ServerStatReplicatorClass: UnrealEngineClass
    open var GameSession: GameSession
    open var GameState: GameStateBase
    open var ServerStatReplicator: ServerStatReplicator
    open var DefaultPlayerName: String
    open var bUseSeamlessTravel: Boolean
    open var bStartPlayersAsSpectators: Boolean
    open var bPauseable: Boolean
    open fun StartPlay()
    open fun SpawnDefaultPawnFor(NewPlayer: Controller, StartSpot: Actor): Pawn
    open fun SpawnDefaultPawnAtTransform(NewPlayer: Controller, SpawnTransform: Transform): Pawn
    open fun ShouldReset(ActorToReset: Actor): Boolean
    open fun ReturnToMainMenuHost()
    open fun RestartPlayerAtTransform(NewPlayer: Controller, SpawnTransform: Transform)
    open fun RestartPlayerAtPlayerStart(NewPlayer: Controller, StartSpot: Actor)
    open fun RestartPlayer(NewPlayer: Controller)
    open fun ResetLevel()
    open fun PlayerCanRestart(Player: PlayerController): Boolean
    open fun MustSpectate(NewPlayerController: PlayerController): Boolean
    open fun OnPostLogin(NewPlayer: PlayerController)
    open fun OnSwapPlayerControllers(OldPC: PlayerController, NewPC: PlayerController)
    open fun OnRestartPlayer(NewPlayer: Controller)
    open fun OnLogout(ExitingController: Controller)
    open fun OnChangeName(Other: Controller, NewName: String, bNameChange: Boolean)
    open fun FindPlayerStart(Player: Controller, IncomingName: String): Actor
    open fun InitStartSpot(StartSpot: Actor, NewPlayer: Controller)
    open fun InitializeHUDForPlayer(NewPlayer: PlayerController)
    open fun HasMatchStarted(): Boolean
    open fun HasMatchEnded(): Boolean
    open fun HandleStartingNewPlayer(NewPlayer: PlayerController)
    open fun GetNumSpectators(): Number
    open fun GetNumPlayers(): Number
    open fun GetDefaultPawnClassForController(InController: Controller): UnrealEngineClass
    open fun ChoosePlayerStart(Player: Controller): Actor
    open fun ChangeName(Controller: Controller, NewName: String, bNameChange: Boolean)
    open fun CanSpectate(Viewer: PlayerController, ViewTarget: PlayerState): Boolean
    open fun HandleSeamlessTravelPlayer(C: Controller = definedExternally): `T$288`

    companion object {
        fun GetDefaultObject(): GameModeBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameModeBase
        fun C(Other: UObject): GameModeBase
        fun C(Other: Any): GameModeBase
        fun HandleSeamlessTravelPlayer(GameMode: GameModeBase, C: Controller = definedExternally): `T$288`
    }
}

external open class GameNetworkManager(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var BadPacketLossThreshold: Number
    open var SeverePacketLossThreshold: Number
    open var BadPingThreshold: Number
    open var SeverePingThreshold: Number
    open var AdjustedNetSpeed: Number
    open var LastNetSpeedUpdateTime: Number
    open var TotalNetBandwidth: Number
    open var MinDynamicBandwidth: Number
    open var MaxDynamicBandwidth: Number
    open var bIsStandbyCheckingEnabled: Boolean
    open var bHasStandbyCheatTriggered: Boolean
    open var StandbyRxCheatTime: Number
    open var StandbyTxCheatTime: Number
    open var PercentMissingForRxStandby: Number
    open var PercentMissingForTxStandby: Number
    open var PercentForBadPing: Number
    open var JoinInProgressStandbyWaitTime: Number
    open var MoveRepSize: Number
    open var MAXPOSITIONERRORSQUARED: Number
    open var MAXNEARZEROVELOCITYSQUARED: Number
    open var CLIENTADJUSTUPDATECOST: Number
    open var MAXCLIENTUPDATEINTERVAL: Number
    open var MaxClientForcedUpdateDuration: Number
    open var ServerForcedUpdateHitchThreshold: Number
    open var ServerForcedUpdateHitchCooldown: Number
    open var MaxMoveDeltaTime: Number
    open var MaxClientSmoothingDeltaTime: Number
    open var ClientNetSendMoveDeltaTime: Number
    open var ClientNetSendMoveDeltaTimeThrottled: Number
    open var ClientNetSendMoveDeltaTimeStationary: Number
    open var ClientNetSendMoveThrottleAtNetSpeed: Number
    open var ClientNetSendMoveThrottleOverPlayerCount: Number
    open var ClientAuthorativePosition: Boolean
    open var ClientErrorUpdateRateLimit: Number
    open var ClientNetCamUpdateDeltaTime: Number
    open var ClientNetCamUpdatePositionLimit: Number
    open var bMovementTimeDiscrepancyDetection: Boolean
    open var bMovementTimeDiscrepancyResolution: Boolean
    open var MovementTimeDiscrepancyMaxTimeMargin: Number
    open var MovementTimeDiscrepancyMinTimeMargin: Number
    open var MovementTimeDiscrepancyResolutionRate: Number
    open var MovementTimeDiscrepancyDriftAllowance: Number
    open var bMovementTimeDiscrepancyForceCorrectionsDuringResolution: Boolean
    open var bUseDistanceBasedRelevancy: Boolean

    companion object {
        fun GetDefaultObject(): GameNetworkManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameNetworkManager
        fun C(Other: UObject): GameNetworkManager
        fun C(Other: Any): GameNetworkManager
    }
}

external object EVolumeLightingMethod {
    var VLM_VolumetricLightmap: String /* "VLM_VolumetricLightmap" */
    var VLM_SparseVolumeLightingSamples: String /* "VLM_SparseVolumeLightingSamples" */
    var VLM_MAX: String /* "VLM_MAX" */
}

external open class LightmassWorldInfoSettings {
    open var StaticLightingLevelScale: Number
    open var NumIndirectLightingBounces: Number
    open var NumSkyLightingBounces: Number
    open var IndirectLightingQuality: Number
    open var IndirectLightingSmoothness: Number
    open var EnvironmentColor: Color
    open var EnvironmentIntensity: Number
    open var EmissiveBoost: Number
    open var DiffuseBoost: Number
    open var VolumeLightingMethod: String /* "VLM_VolumetricLightmap" | "VLM_SparseVolumeLightingSamples" | "VLM_MAX" */
    open var bUseAmbientOcclusion: Boolean
    open var bGenerateAmbientOcclusionMaterialMask: Boolean
    open var bVisualizeMaterialDiffuse: Boolean
    open var bVisualizeAmbientOcclusion: Boolean
    open var bCompressLightmaps: Boolean
    open var VolumetricLightmapDetailCellSize: Number
    open var VolumetricLightmapMaximumBrickMemoryMb: Number
    open var VolumetricLightmapSphericalHarmonicSmoothing: Number
    open var VolumeLightSamplePlacementScale: Number
    open var DirectIlluminationOcclusionFraction: Number
    open var IndirectIlluminationOcclusionFraction: Number
    open var OcclusionExponent: Number
    open var FullyOccludedSamplesFraction: Number
    open var MaxOcclusionDistance: Number
    open fun clone(): LightmassWorldInfoSettings

    companion object {
        fun C(Other: UObject): LightmassWorldInfoSettings
        fun C(Other: Any): LightmassWorldInfoSettings
    }
}

external object ReverbPreset {
    var REVERB_Default: String /* "REVERB_Default" */
    var REVERB_Bathroom: String /* "REVERB_Bathroom" */
    var REVERB_StoneRoom: String /* "REVERB_StoneRoom" */
    var REVERB_Auditorium: String /* "REVERB_Auditorium" */
    var REVERB_ConcertHall: String /* "REVERB_ConcertHall" */
    var REVERB_Cave: String /* "REVERB_Cave" */
    var REVERB_Hallway: String /* "REVERB_Hallway" */
    var REVERB_StoneCorridor: String /* "REVERB_StoneCorridor" */
    var REVERB_Alley: String /* "REVERB_Alley" */
    var REVERB_Forest: String /* "REVERB_Forest" */
    var REVERB_City: String /* "REVERB_City" */
    var REVERB_Mountains: String /* "REVERB_Mountains" */
    var REVERB_Quarry: String /* "REVERB_Quarry" */
    var REVERB_Plain: String /* "REVERB_Plain" */
    var REVERB_ParkingLot: String /* "REVERB_ParkingLot" */
    var REVERB_SewerPipe: String /* "REVERB_SewerPipe" */
    var REVERB_Underwater: String /* "REVERB_Underwater" */
    var REVERB_SmallRoom: String /* "REVERB_SmallRoom" */
    var REVERB_MediumRoom: String /* "REVERB_MediumRoom" */
    var REVERB_LargeRoom: String /* "REVERB_LargeRoom" */
    var REVERB_MediumHall: String /* "REVERB_MediumHall" */
    var REVERB_LargeHall: String /* "REVERB_LargeHall" */
    var REVERB_Plate: String /* "REVERB_Plate" */
    var REVERB_MAX: String /* "REVERB_MAX" */
}

external open class ReverbEffect : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bBypassEarlyReflections: Boolean
    open var ReflectionsDelay: Number
    open var GainHF: Number
    open var ReflectionsGain: Number
    open var bBypassLateReflections: Boolean
    open var LateDelay: Number
    open var DecayTime: Number
    open var Density: Number
    open var Diffusion: Number
    open var AirAbsorptionGainHF: Number
    open var DecayHFRatio: Number
    open var LateGain: Number
    open var Gain: Number
    open var RoomRolloffFactor: Number
    open var bChanged: Boolean

    companion object {
        fun Load(ResourceName: String): ReverbEffect
        fun Find(Outer: UObject, ResourceName: String): ReverbEffect
        fun GetDefaultObject(): ReverbEffect
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReverbEffect
        fun C(Other: UObject): ReverbEffect
        fun C(Other: Any): ReverbEffect
    }
}

external open class ReverbSettings {
    open var bApplyReverb: Boolean
    open var ReverbType: String /* "REVERB_Default" | "REVERB_Bathroom" | "REVERB_StoneRoom" | "REVERB_Auditorium" | "REVERB_ConcertHall" | "REVERB_Cave" | "REVERB_Hallway" | "REVERB_StoneCorridor" | "REVERB_Alley" | "REVERB_Forest" | "REVERB_City" | "REVERB_Mountains" | "REVERB_Quarry" | "REVERB_Plain" | "REVERB_ParkingLot" | "REVERB_SewerPipe" | "REVERB_Underwater" | "REVERB_SmallRoom" | "REVERB_MediumRoom" | "REVERB_LargeRoom" | "REVERB_MediumHall" | "REVERB_LargeHall" | "REVERB_Plate" | "REVERB_MAX" */
    open var ReverbEffect: ReverbEffect
    open var ReverbPluginEffect: SoundEffectSubmixPreset
    open var Volume: Number
    open var FadeTime: Number
    open fun clone(): ReverbSettings

    companion object {
        fun C(Other: UObject): ReverbSettings
        fun C(Other: Any): ReverbSettings
    }
}

external open class InteriorSettings {
    open var bIsWorldSettings: Boolean
    open var ExteriorVolume: Number
    open var ExteriorTime: Number
    open var ExteriorLPF: Number
    open var ExteriorLPFTime: Number
    open var InteriorVolume: Number
    open var InteriorTime: Number
    open var InteriorLPF: Number
    open var InteriorLPFTime: Number
    open fun clone(): InteriorSettings

    companion object {
        fun C(Other: UObject): InteriorSettings
        fun C(Other: Any): InteriorSettings
    }
}

external open class HierarchicalSimplification {
    open var TransitionScreenSize: Number
    open var OverrideDrawDistance: Number
    open var bUseOverrideDrawDistance: Boolean
    open var bAllowSpecificExclusion: Boolean
    open var bSimplifyMesh: Boolean
    open var bOnlyGenerateClustersForVolumes: Boolean
    open var bReusePreviousLevelClusters: Boolean
    open var ProxySetting: MeshProxySettings
    open var MergeSetting: MeshMergingSettings
    open var DesiredBoundRadius: Number
    open var DesiredFillingPercentage: Number
    open var MinNumberOfActorsToBuild: Number
    open fun clone(): HierarchicalSimplification

    companion object {
        fun C(Other: UObject): HierarchicalSimplification
        fun C(Other: Any): HierarchicalSimplification
    }
}

external open class BookmarkBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BookmarkBase
        fun Find(Outer: UObject, ResourceName: String): BookmarkBase
        fun GetDefaultObject(): BookmarkBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BookmarkBase
        fun C(Other: UObject): BookmarkBase
        fun C(Other: Any): BookmarkBase
    }
}

external open class BookMark : BookmarkBase {
    constructor()
    constructor(Outer: UObject)
    open var Location: Vector
    open var Rotation: Rotator
    open var HiddenLevels: Array<String>

    companion object {
        fun Load(ResourceName: String): BookMark
        fun Find(Outer: UObject, ResourceName: String): BookMark
        fun GetDefaultObject(): BookMark
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BookMark
        fun C(Other: UObject): BookMark
        fun C(Other: Any): BookMark
    }
}

external open class BroadphaseSettings {
    open var bUseMBPOnClient: Boolean
    open var bUseMBPOnServer: Boolean
    open var bUseMBPOuterBounds: Boolean
    open var MBPBounds: Box
    open var MBPOuterBounds: Box
    open var MBPNumSubdivs: Any
    open fun clone(): BroadphaseSettings

    companion object {
        fun C(Other: UObject): BroadphaseSettings
        fun C(Other: Any): BroadphaseSettings
    }
}

external open class NetViewer {
    open var Connection: NetConnection
    open var InViewer: Actor
    open var ViewTarget: Actor
    open var ViewLocation: Vector
    open var ViewDir: Vector
    open fun clone(): NetViewer

    companion object {
        fun C(Other: UObject): NetViewer
        fun C(Other: Any): NetViewer
    }
}

external open class WorldPartitionPerWorldSettings {
    open var LoadedEditorGridCells: Array<String>
    open var NotLoadedDataLayers: Array<String>
    open var LoadedDataLayers: Array<String>
    open var EditorGridConfigHash: Any
    open fun clone(): WorldPartitionPerWorldSettings

    companion object {
        fun C(Other: UObject): WorldPartitionPerWorldSettings
        fun C(Other: Any): WorldPartitionPerWorldSettings
    }
}

external open class WorldSettings(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var VisibilityCellSize: Number
    open var VisibilityAggressiveness: String /* "VIS_LeastAggressive" | "VIS_ModeratelyAggressive" | "VIS_MostAggressive" | "VIS_Max" */
    open var bPrecomputeVisibility: Boolean
    open var bPlaceCellsOnlyAlongCameraTracks: Boolean
    open var bEnableLargeWorlds: Boolean
    open var bEnableWorldBoundsChecks: Boolean
    open var bEnableNavigationSystem: Boolean
    open var bEnableAISystem: Boolean
    open var bEnableWorldComposition: Boolean
    open var bUseClientSideLevelStreamingVolumes: Boolean
    open var bEnableWorldOriginRebasing: Boolean
    open var bWorldGravitySet: Boolean
    open var bGlobalGravitySet: Boolean
    open var bMinimizeBSPSections: Boolean
    open var bForceNoPrecomputedLighting: Boolean
    open var bHighPriorityLoading: Boolean
    open var bHighPriorityLoadingLocal: Boolean
    open var bOverrideDefaultBroadphaseSettings: Boolean
    open var bGenerateSingleClusterForLevel: Boolean
    open var bIncludeGridSizeInNameForFoliageActors: Boolean
    open var bIncludeGridSizeInNameForPartitionedActors: Boolean
    open var AISystemClass: Class
    open var LevelInstancePivotOffset: Vector
    open var NavigationSystemConfig: NavigationSystemConfig
    open var NavigationSystemConfigOverride: NavigationSystemConfig
    open var WorldPartition: WorldPartition
    open var InstancedFoliageGridSize: Any
    open var NavigationDataChunkGridSize: Any
    open var NavigationDataBuilderLoadingCellSize: Any
    open var DefaultPlacementGridSize: Any
    open var WorldToMeters: Number
    open var KillZ: Number
    open var KillZDamageType: UnrealEngineClass
    open var WorldGravityZ: Number
    open var GlobalGravityZ: Number
    open var DefaultPhysicsVolumeClass: UnrealEngineClass
    open var PhysicsCollisionHandlerClass: UnrealEngineClass
    open var DefaultGameMode: UnrealEngineClass
    open var GameNetworkManagerClass: UnrealEngineClass
    open var PackedLightAndShadowMapTextureSize: Number
    open var DefaultColorScale: Vector
    open var DefaultMaxDistanceFieldOcclusionDistance: Number
    open var GlobalDistanceFieldViewDistance: Number
    open var DynamicIndirectShadowsSelfShadowingIntensity: Number
    open var LightmassSettings: LightmassWorldInfoSettings
    open var DefaultReverbSettings: ReverbSettings
    open var DefaultAmbientZoneSettings: InteriorSettings
    open var DefaultBaseSoundMix: SoundMix
    open var HLODSetupAsset: Class
    open var OverrideBaseMaterial: MaterialInterface
    open var HierarchicalLODSetup: Array<HierarchicalSimplification>
    open var NumHLODLevels: Number
    open var HLODBakingTransform: Transform
    open var Bookmarks: BookMark
    open var TimeDilation: Number
    open var MatineeTimeDilation: Number
    open var DemoPlayTimeDilation: Number
    open var MinGlobalTimeDilation: Number
    open var MaxGlobalTimeDilation: Number
    open var MinUndilatedFrameTime: Number
    open var MaxUndilatedFrameTime: Number
    open var BroadphaseSettings: BroadphaseSettings
    open var ReplicationViewers: Array<NetViewer>
    open var AssetUserData: Array<AssetUserData>
    open var PauserPlayerState: PlayerState
    open var DefaultWorldPartitionSettings: WorldPartitionPerWorldSettings
    open var MaxNumberOfBookmarks: Number
    open var DefaultBookmarkClass: UnrealEngineClass
    open var BookmarkArray: Array<BookmarkBase>
    open var LastBookmarkClass: UnrealEngineClass
    open var bEnableHierarchicalLODSystem: Boolean
    open fun OnRep_WorldGravityZ()

    companion object {
        fun GetDefaultObject(): WorldSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldSettings
        fun C(Other: UObject): WorldSettings
        fun C(Other: Any): WorldSettings
    }
}

external open class WorldDataLayers(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var bAllowRuntimeDataLayerEditing: Boolean
    open var WorldDataLayers: Any
    open var RepActiveDataLayerNames: Array<String>
    open var RepLoadedDataLayerNames: Array<String>
    open var RepEffectiveActiveDataLayerNames: Array<String>
    open var RepEffectiveLoadedDataLayerNames: Array<String>
    open fun OnRep_LoadedDataLayerNames()
    open fun OnRep_EffectiveLoadedDataLayerNames()
    open fun OnRep_EffectiveActiveDataLayerNames()
    open fun OnRep_ActiveDataLayerNames()
    open fun OnDataLayerRuntimeStateChanged(InDataLayer: DataLayer, InState: String /* "Unloaded" | "Loaded" | "Activated" | "EDataLayerRuntimeState_MAX" */)

    companion object {
        fun GetDefaultObject(): WorldDataLayers
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldDataLayers
        fun C(Other: UObject): WorldDataLayers
        fun C(Other: Any): WorldDataLayers
    }
}

external open class ReplicatedStaticActorDestructionInfo {
    open var ObjClass: UnrealEngineClass
    open fun clone(): ReplicatedStaticActorDestructionInfo

    companion object {
        fun C(Other: UObject): ReplicatedStaticActorDestructionInfo
        fun C(Other: Any): ReplicatedStaticActorDestructionInfo
    }
}

external open class ActorFolder : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ParentFolderGuid: Guid
    open var FolderGuid: Guid
    open var FolderLabel: String
    open var bFolderInitiallyExpanded: Boolean
    open var bIsDeleted: Boolean

    companion object {
        fun Load(ResourceName: String): ActorFolder
        fun Find(Outer: UObject, ResourceName: String): ActorFolder
        fun GetDefaultObject(): ActorFolder
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ActorFolder
        fun C(Other: UObject): ActorFolder
        fun C(Other: Any): ActorFolder
    }
}

external open class Level : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ActorsModifiedForPIE: Any
    open var bUseExternalActors: Boolean
    open var OwningWorld: World
    open var Model: Model
    open var ModelComponents: Array<ModelComponent>
    open var ActorCluster: LevelActorContainer
    open var LevelScriptBlueprint: LevelScriptBlueprint
    open var TextureStreamingResourceGuids: Array<Guid>
    open var NumTextureStreamingUnbuiltComponents: Number
    open var NumTextureStreamingDirtyResources: Number
    open var LevelScriptActor: LevelScriptActor
    open var NavListStart: NavigationObjectBase
    open var NavListEnd: NavigationObjectBase
    open var NavDataChunks: Array<NavigationDataChunk>
    open var LightmapTotalSize: Number
    open var ShadowmapTotalSize: Number
    open var StaticNavigableGeometry: Array<Vector>
    open var StreamingTextureGuids: Array<Guid>
    open var StreamingTextures: Array<String>
    open var PackedTextureStreamingQualityLevelFeatureLevel: Any
    open var LevelBuildDataId: Guid
    open var MapBuildData: MapBuildDataRegistry
    open var LightBuildLevelOffset: IntVector
    open var bIsLightingScenario: Boolean
    open var bTextureStreamingRotationChanged: Boolean
    open var bStaticComponentsRegisteredInStreamingManager: Boolean
    open var bIsVisible: Boolean
    open var bLocked: Boolean
    open var bIsPartitioned: Boolean
    open var bIsWorldPartitionRuntimeCell: Boolean
    open var LevelSimplification: LevelSimplificationDetails
    open var LevelColor: LinearColor
    open var bPromptWhenAddingToLevelBeforeCheckout: Boolean
    open var bPromptWhenAddingToLevelOutsideBounds: Boolean
    open var ActorPackagingScheme: String /* "Original" | "Reduced" | "EActorPackagingScheme_MAX" */
    open var WorldSettings: WorldSettings
    open var WorldDataLayers: WorldDataLayers
    open var AssetUserData: Array<AssetUserData>
    open var DestroyedReplicatedStaticActors: Array<ReplicatedStaticActorDestructionInfo>
    open var LevelPartition: Any
    open var OwnerLevelPartition: UObject
    open var bUseActorFolders: Boolean
    open var ActorFolders: Any
    open var LoadedExternalActorFolders: Array<ActorFolder>
    open fun UpdateModelComponents()

    companion object {
        fun Load(ResourceName: String): Level
        fun Find(Outer: UObject, ResourceName: String): Level
        fun GetDefaultObject(): Level
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Level
        fun C(Other: UObject): Level
        fun C(Other: Any): Level
        fun UpdateModelComponents(Level: Level)
    }
}

external open class LineBatchComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LineBatchComponent
        fun Find(Outer: UObject, ResourceName: String): LineBatchComponent
        fun GetDefaultObject(): LineBatchComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LineBatchComponent
        fun C(Other: UObject): LineBatchComponent
        fun C(Other: Any): LineBatchComponent
    }
}

external object EStreamingVolumeUsage {
    var SVB_Loading: String /* "SVB_Loading" */
    var SVB_LoadingAndVisibility: String /* "SVB_LoadingAndVisibility" */
    var SVB_VisibilityBlockingOnLoad: String /* "SVB_VisibilityBlockingOnLoad" */
    var SVB_BlockingOnLoad: String /* "SVB_BlockingOnLoad" */
    var SVB_LoadingNotVisible: String /* "SVB_LoadingNotVisible" */
    var SVB_MAX: String /* "SVB_MAX" */
}

external open class LevelStreamingVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Volume {
    open var StreamingLevelNames: Array<String>
    open var bEditorPreVisOnly: Boolean
    open var bDisabled: Boolean
    open var StreamingUsage: String /* "SVB_Loading" | "SVB_LoadingAndVisibility" | "SVB_VisibilityBlockingOnLoad" | "SVB_BlockingOnLoad" | "SVB_LoadingNotVisible" | "SVB_MAX" */

    companion object {
        fun GetDefaultObject(): LevelStreamingVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelStreamingVolume
        fun C(Other: UObject): LevelStreamingVolume
        fun C(Other: Any): LevelStreamingVolume
    }
}

external open class LevelStreaming : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PackageName: String
    open var WorldAsset: World
    open var StreamingPriority: Number
    open var PackageNameToLoad: String
    open var LODPackageNames: Array<String>
    open var LevelTransform: Transform
    open var bClientOnlyVisible: Boolean
    open var LevelLODIndex: Number
    open var bShouldBeVisibleInEditor: Boolean
    open var bShouldBeVisible: Boolean
    open var bShouldBeLoaded: Boolean
    open var bLocked: Boolean
    open var bIsStatic: Boolean
    open var bShouldBlockOnLoad: Boolean
    open var bShouldBlockOnUnload: Boolean
    open var bDisableDistanceStreaming: Boolean
    open var bDrawOnLevelStatusMap: Boolean
    open var DrawColor: Color
    open var LevelColor: LinearColor
    open var EditorStreamingVolumes: Array<LevelStreamingVolume>
    open var MinTimeBetweenVolumeUnloadRequests: Number
    open var Keywords: Array<String>
    open var OnLevelLoaded: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnLevelUnloaded: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnLevelShown: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnLevelHidden: UnrealEngineMulticastDelegate<() -> Unit>
    open var LoadedLevel: Level
    open var PendingUnloadLevel: Level
    open var FolderPath: String
    open fun ShouldBeLoaded(): Boolean
    open fun SetShouldBeVisible(bInShouldBeVisible: Boolean)
    open fun SetShouldBeLoaded(bInShouldBeLoaded: Boolean)
    open fun SetPriority(NewPriority: Number)
    open fun SetLevelLODIndex(LODIndex: Number)
    open fun SetIsRequestingUnloadAndRemoval(bInIsRequestingUnloadAndRemoval: Boolean)
    open fun IsStreamingStatePending(): Boolean
    open fun IsLevelVisible(): Boolean
    open fun IsLevelLoaded(): Boolean
    open fun GetWorldAssetPackageFName(): String
    open fun GetLoadedLevel(): Level
    open fun GetLevelScriptActor(): LevelScriptActor
    open fun GetIsRequestingUnloadAndRemoval(): Boolean
    open fun CreateInstance(UniqueInstanceName: String): LevelStreaming

    companion object {
        fun Load(ResourceName: String): LevelStreaming
        fun Find(Outer: UObject, ResourceName: String): LevelStreaming
        fun GetDefaultObject(): LevelStreaming
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelStreaming
        fun C(Other: UObject): LevelStreaming
        fun C(Other: Any): LevelStreaming
    }
}

external open class StreamingLevelsToConsider {
    open var StreamingLevels: Array<LevelStreaming>
    open fun clone(): StreamingLevelsToConsider

    companion object {
        fun C(Other: UObject): StreamingLevelsToConsider
        fun C(Other: Any): StreamingLevelsToConsider
    }
}

external open class MulticastRecordOptions {
    open var FuncPathName: String
    open var bServerSkip: Boolean
    open var bClientSkip: Boolean
    open fun clone(): MulticastRecordOptions

    companion object {
        fun C(Other: UObject): MulticastRecordOptions
        fun C(Other: Any): MulticastRecordOptions
    }
}

external open class DemoNetDriver : NetDriver {
    constructor()
    constructor(Outer: UObject)
    open var RollbackNetStartupActors: Any
    open var CheckpointSaveMaxMSPerFrame: Number
    open var MulticastRecordOptions: Array<MulticastRecordOptions>
    open var SpectatorControllers: Array<PlayerController>

    companion object {
        fun Load(ResourceName: String): DemoNetDriver
        fun Find(Outer: UObject, ResourceName: String): DemoNetDriver
        fun GetDefaultObject(): DemoNetDriver
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DemoNetDriver
        fun C(Other: UObject): DemoNetDriver
        fun C(Other: Any): DemoNetDriver
    }
}

external open class ParticleEventManager(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    companion object {
        fun GetDefaultObject(): ParticleEventManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleEventManager
        fun C(Other: UObject): ParticleEventManager
        fun C(Other: Any): ParticleEventManager
    }
}

external open class NavigationSystemBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavigationSystemBase
        fun Find(Outer: UObject, ResourceName: String): NavigationSystemBase
        fun GetDefaultObject(): NavigationSystemBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationSystemBase
        fun C(Other: UObject): NavigationSystemBase
        fun C(Other: Any): NavigationSystemBase
    }
}

external open class AISystemBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AISystemClassName: SoftClassPath
    open var AISystemModuleName: String
    open var bInstantiateAISystemOnClient: Boolean

    companion object {
        fun Load(ResourceName: String): AISystemBase
        fun Find(Outer: UObject, ResourceName: String): AISystemBase
        fun GetDefaultObject(): AISystemBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISystemBase
        fun C(Other: UObject): AISystemBase
        fun C(Other: Any): AISystemBase
    }
}

external open class AvoidanceManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultTimeToLive: Number
    open var LockTimeAfterAvoid: Number
    open var LockTimeAfterClean: Number
    open var DeltaTimeToPredict: Number
    open var ArtificialRadiusExpansion: Number
    open var TestHeightDifference: Number
    open var HeightCheckMargin: Number
    open fun RegisterMovementComponent(MovementComp: MovementComponent, AvoidanceWeight: Number): Boolean
    open fun GetObjectCount(): Number
    open fun GetNewAvoidanceUID(): Number
    open fun GetAvoidanceVelocityForComponent(MovementComp: MovementComponent): Vector

    companion object {
        fun Load(ResourceName: String): AvoidanceManager
        fun Find(Outer: UObject, ResourceName: String): AvoidanceManager
        fun GetDefaultObject(): AvoidanceManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AvoidanceManager
        fun C(Other: UObject): AvoidanceManager
        fun C(Other: Any): AvoidanceManager
    }
}

external open class LevelCollection {
    open var GameState: GameStateBase
    open var NetDriver: NetDriver
    open var DemoNetDriver: DemoNetDriver
    open var PersistentLevel: Level
    open var Levels: Any
    open fun clone(): LevelCollection

    companion object {
        fun C(Other: UObject): LevelCollection
        fun C(Other: Any): LevelCollection
    }
}

external open class CollectionParameterBase {
    open var ParameterName: String
    open var ID: Guid
    open fun clone(): CollectionParameterBase

    companion object {
        fun C(Other: UObject): CollectionParameterBase
        fun C(Other: Any): CollectionParameterBase
    }
}

external open class CollectionScalarParameter : CollectionParameterBase {
    open var DefaultValue: Number
    override fun clone(): CollectionScalarParameter

    companion object {
        fun C(Other: UObject): CollectionScalarParameter
        fun C(Other: Any): CollectionScalarParameter
    }
}

external open class CollectionVectorParameter : CollectionParameterBase {
    open var DefaultValue: LinearColor
    override fun clone(): CollectionVectorParameter

    companion object {
        fun C(Other: UObject): CollectionVectorParameter
        fun C(Other: Any): CollectionVectorParameter
    }
}

external interface `T$289` {
    var bParameterFound: Boolean
    var `$`: LinearColor
}

external interface `T$290` {
    var bParameterFound: Boolean
    var `$`: Number
}

external open class MaterialParameterCollection : UObject {
    constructor()
    constructor(Outer: UObject)
    open var StateId: Guid
    open var ScalarParameters: Array<CollectionScalarParameter>
    open var VectorParameters: Array<CollectionVectorParameter>
    open fun GetVectorParameterNames(): Array<String>
    open fun GetVectorParameterDefaultValue(ParameterName: String, bParameterFound: Boolean = definedExternally): `T$289`
    open fun GetScalarParameterNames(): Array<String>
    open fun GetScalarParameterDefaultValue(ParameterName: String, bParameterFound: Boolean = definedExternally): `T$290`

    companion object {
        fun Load(ResourceName: String): MaterialParameterCollection
        fun Find(Outer: UObject, ResourceName: String): MaterialParameterCollection
        fun GetDefaultObject(): MaterialParameterCollection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialParameterCollection
        fun C(Other: UObject): MaterialParameterCollection
        fun C(Other: Any): MaterialParameterCollection
    }
}

external open class MaterialParameterCollectionInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Collection: MaterialParameterCollection

    companion object {
        fun Load(ResourceName: String): MaterialParameterCollectionInstance
        fun Find(Outer: UObject, ResourceName: String): MaterialParameterCollectionInstance
        fun GetDefaultObject(): MaterialParameterCollectionInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialParameterCollectionInstance
        fun C(Other: UObject): MaterialParameterCollectionInstance
        fun C(Other: Any): MaterialParameterCollectionInstance
    }
}

external open class LevelViewportInfo {
    open var CamPosition: Vector
    open var CamRotation: Rotator
    open var CamOrthoZoom: Number
    open var CamUpdated: Boolean
    open fun clone(): LevelViewportInfo

    companion object {
        fun C(Other: UObject): LevelViewportInfo
        fun C(Other: Any): LevelViewportInfo
    }
}

external open class PhysicsFieldComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PhysicsFieldComponent
        fun Find(Outer: UObject, ResourceName: String): PhysicsFieldComponent
        fun GetDefaultObject(): PhysicsFieldComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsFieldComponent
        fun C(Other: UObject): PhysicsFieldComponent
        fun C(Other: Any): PhysicsFieldComponent
    }
}

external open class WorldComposition : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TilesStreaming: Array<LevelStreaming>
    open var TilesStreamingTimeThreshold: Any
    open var bLoadAllTilesDuringCinematic: Boolean
    open var bRebaseOriginIn3DSpace: Boolean
    open var bLockTilesLocation: Boolean
    open var RebaseOriginDistance: Number

    companion object {
        fun Load(ResourceName: String): WorldComposition
        fun Find(Outer: UObject, ResourceName: String): WorldComposition
        fun GetDefaultObject(): WorldComposition
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldComposition
        fun C(Other: UObject): WorldComposition
        fun C(Other: Any): WorldComposition
    }
}

external open class WorldPSCPool {
    open var WorldParticleSystemPools: Any
    open fun clone(): WorldPSCPool

    companion object {
        fun C(Other: UObject): WorldPSCPool
        fun C(Other: Any): WorldPSCPool
    }
}

external open class AudioInputDeviceInfo {
    open var DeviceName: String
    open var DeviceID: String
    open var InputChannels: Number
    open var PreferredSampleRate: Number
    open var bSupportsHardwareAEC: Boolean
    open fun clone(): AudioInputDeviceInfo
    open fun AudioInputDeviceInfoToString(): String

    companion object {
        fun C(Other: UObject): AudioInputDeviceInfo
        fun C(Other: Any): AudioInputDeviceInfo
        fun AudioInputDeviceInfoToString(Info: AudioInputDeviceInfo): String
    }
}

external open class ActorLayer {
    open var Name: String
    open fun clone(): ActorLayer

    companion object {
        fun C(Other: UObject): ActorLayer
        fun C(Other: Any): ActorLayer
    }
}

external open class LevelSequenceObjectReferenceMap {
    open fun clone(): LevelSequenceObjectReferenceMap

    companion object {
        fun C(Other: UObject): LevelSequenceObjectReferenceMap
        fun C(Other: Any): LevelSequenceObjectReferenceMap
    }
}

external open class LevelSequenceBindingReferences {
    open var BindingIdToReferences: Any
    open var AnimSequenceInstances: Any
    open fun clone(): LevelSequenceBindingReferences

    companion object {
        fun C(Other: UObject): LevelSequenceBindingReferences
        fun C(Other: Any): LevelSequenceBindingReferences
    }
}

external object ERigExecutionType {
    var Runtime: String /* "Runtime" */
    var Editing: String /* "Editing" */
    var Max: String /* "Max" */
    var ERigExecutionType_MAX: String /* "ERigExecutionType_MAX" */
}

external open class RigVMRuntimeSettings {
    open var MaximumArraySize: Number
    open var bEnableProfiling: Boolean
    open fun clone(): RigVMRuntimeSettings

    companion object {
        fun C(Other: UObject): RigVMRuntimeSettings
        fun C(Other: Any): RigVMRuntimeSettings
    }
}

external open class RigVMMemoryStorage : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): RigVMMemoryStorage
        fun Find(Outer: UObject, ResourceName: String): RigVMMemoryStorage
        fun GetDefaultObject(): RigVMMemoryStorage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RigVMMemoryStorage
        fun C(Other: UObject): RigVMMemoryStorage
        fun C(Other: Any): RigVMMemoryStorage
    }
}

external open class RigVMByteCodeEntry {
    open var Name: String
    open var InstructionIndex: Number
    open fun clone(): RigVMByteCodeEntry

    companion object {
        fun C(Other: UObject): RigVMByteCodeEntry
        fun C(Other: Any): RigVMByteCodeEntry
    }
}

external open class RigVMByteCode {
    open var ByteCode: Array<Number>
    open var NumInstructions: Number
    open var Entries: Array<RigVMByteCodeEntry>
    open fun clone(): RigVMByteCode

    companion object {
        fun C(Other: UObject): RigVMByteCode
        fun C(Other: Any): RigVMByteCode
    }
}

external object ERigVMOpCode {
    var Execute_0_Operands: String /* "Execute_0_Operands" */
    var Execute_1_Operands: String /* "Execute_1_Operands" */
    var Execute_2_Operands: String /* "Execute_2_Operands" */
    var Execute_3_Operands: String /* "Execute_3_Operands" */
    var Execute_4_Operands: String /* "Execute_4_Operands" */
    var Execute_5_Operands: String /* "Execute_5_Operands" */
    var Execute_6_Operands: String /* "Execute_6_Operands" */
    var Execute_7_Operands: String /* "Execute_7_Operands" */
    var Execute_8_Operands: String /* "Execute_8_Operands" */
    var Execute_9_Operands: String /* "Execute_9_Operands" */
    var Execute_10_Operands: String /* "Execute_10_Operands" */
    var Execute_11_Operands: String /* "Execute_11_Operands" */
    var Execute_12_Operands: String /* "Execute_12_Operands" */
    var Execute_13_Operands: String /* "Execute_13_Operands" */
    var Execute_14_Operands: String /* "Execute_14_Operands" */
    var Execute_15_Operands: String /* "Execute_15_Operands" */
    var Execute_16_Operands: String /* "Execute_16_Operands" */
    var Execute_17_Operands: String /* "Execute_17_Operands" */
    var Execute_18_Operands: String /* "Execute_18_Operands" */
    var Execute_19_Operands: String /* "Execute_19_Operands" */
    var Execute_20_Operands: String /* "Execute_20_Operands" */
    var Execute_21_Operands: String /* "Execute_21_Operands" */
    var Execute_22_Operands: String /* "Execute_22_Operands" */
    var Execute_23_Operands: String /* "Execute_23_Operands" */
    var Execute_24_Operands: String /* "Execute_24_Operands" */
    var Execute_25_Operands: String /* "Execute_25_Operands" */
    var Execute_26_Operands: String /* "Execute_26_Operands" */
    var Execute_27_Operands: String /* "Execute_27_Operands" */
    var Execute_28_Operands: String /* "Execute_28_Operands" */
    var Execute_29_Operands: String /* "Execute_29_Operands" */
    var Execute_30_Operands: String /* "Execute_30_Operands" */
    var Execute_31_Operands: String /* "Execute_31_Operands" */
    var Execute_32_Operands: String /* "Execute_32_Operands" */
    var Execute_33_Operands: String /* "Execute_33_Operands" */
    var Execute_34_Operands: String /* "Execute_34_Operands" */
    var Execute_35_Operands: String /* "Execute_35_Operands" */
    var Execute_36_Operands: String /* "Execute_36_Operands" */
    var Execute_37_Operands: String /* "Execute_37_Operands" */
    var Execute_38_Operands: String /* "Execute_38_Operands" */
    var Execute_39_Operands: String /* "Execute_39_Operands" */
    var Execute_40_Operands: String /* "Execute_40_Operands" */
    var Execute_41_Operands: String /* "Execute_41_Operands" */
    var Execute_42_Operands: String /* "Execute_42_Operands" */
    var Execute_43_Operands: String /* "Execute_43_Operands" */
    var Execute_44_Operands: String /* "Execute_44_Operands" */
    var Execute_45_Operands: String /* "Execute_45_Operands" */
    var Execute_46_Operands: String /* "Execute_46_Operands" */
    var Execute_47_Operands: String /* "Execute_47_Operands" */
    var Execute_48_Operands: String /* "Execute_48_Operands" */
    var Execute_49_Operands: String /* "Execute_49_Operands" */
    var Execute_50_Operands: String /* "Execute_50_Operands" */
    var Execute_51_Operands: String /* "Execute_51_Operands" */
    var Execute_52_Operands: String /* "Execute_52_Operands" */
    var Execute_53_Operands: String /* "Execute_53_Operands" */
    var Execute_54_Operands: String /* "Execute_54_Operands" */
    var Execute_55_Operands: String /* "Execute_55_Operands" */
    var Execute_56_Operands: String /* "Execute_56_Operands" */
    var Execute_57_Operands: String /* "Execute_57_Operands" */
    var Execute_58_Operands: String /* "Execute_58_Operands" */
    var Execute_59_Operands: String /* "Execute_59_Operands" */
    var Execute_60_Operands: String /* "Execute_60_Operands" */
    var Execute_61_Operands: String /* "Execute_61_Operands" */
    var Execute_62_Operands: String /* "Execute_62_Operands" */
    var Execute_63_Operands: String /* "Execute_63_Operands" */
    var Execute_64_Operands: String /* "Execute_64_Operands" */
    var Zero: String /* "Zero" */
    var BoolFalse: String /* "BoolFalse" */
    var BoolTrue: String /* "BoolTrue" */
    var Copy: String /* "Copy" */
    var Increment: String /* "Increment" */
    var Decrement: String /* "Decrement" */
    var Equals: String /* "Equals" */
    var NotEquals: String /* "NotEquals" */
    var JumpAbsolute: String /* "JumpAbsolute" */
    var JumpForward: String /* "JumpForward" */
    var JumpBackward: String /* "JumpBackward" */
    var JumpAbsoluteIf: String /* "JumpAbsoluteIf" */
    var JumpForwardIf: String /* "JumpForwardIf" */
    var JumpBackwardIf: String /* "JumpBackwardIf" */
    var ChangeType: String /* "ChangeType" */
    var Exit: String /* "Exit" */
    var BeginBlock: String /* "BeginBlock" */
    var EndBlock: String /* "EndBlock" */
    var ArrayReset: String /* "ArrayReset" */
    var ArrayGetNum: String /* "ArrayGetNum" */
    var ArraySetNum: String /* "ArraySetNum" */
    var ArrayGetAtIndex: String /* "ArrayGetAtIndex" */
    var ArraySetAtIndex: String /* "ArraySetAtIndex" */
    var ArrayAdd: String /* "ArrayAdd" */
    var ArrayInsert: String /* "ArrayInsert" */
    var ArrayRemove: String /* "ArrayRemove" */
    var ArrayFind: String /* "ArrayFind" */
    var ArrayAppend: String /* "ArrayAppend" */
    var ArrayClone: String /* "ArrayClone" */
    var ArrayIterator: String /* "ArrayIterator" */
    var ArrayUnion: String /* "ArrayUnion" */
    var ArrayDifference: String /* "ArrayDifference" */
    var ArrayIntersection: String /* "ArrayIntersection" */
    var ArrayReverse: String /* "ArrayReverse" */
    var Invalid: String /* "Invalid" */
    var FirstArrayOpCode: String /* "FirstArrayOpCode" */
    var LastArrayOpCode: String /* "LastArrayOpCode" */
    var ERigVMOpCode_MAX: String /* "ERigVMOpCode_MAX" */
}

external open class RigVMInstruction {
    open var ByteCodeIndex: Any
    open var OpCode: String /* "Execute_0_Operands" | "Execute_1_Operands" | "Execute_2_Operands" | "Execute_3_Operands" | "Execute_4_Operands" | "Execute_5_Operands" | "Execute_6_Operands" | "Execute_7_Operands" | "Execute_8_Operands" | "Execute_9_Operands" | "Execute_10_Operands" | "Execute_11_Operands" | "Execute_12_Operands" | "Execute_13_Operands" | "Execute_14_Operands" | "Execute_15_Operands" | "Execute_16_Operands" | "Execute_17_Operands" | "Execute_18_Operands" | "Execute_19_Operands" | "Execute_20_Operands" | "Execute_21_Operands" | "Execute_22_Operands" | "Execute_23_Operands" | "Execute_24_Operands" | "Execute_25_Operands" | "Execute_26_Operands" | "Execute_27_Operands" | "Execute_28_Operands" | "Execute_29_Operands" | "Execute_30_Operands" | "Execute_31_Operands" | "Execute_32_Operands" | "Execute_33_Operands" | "Execute_34_Operands" | "Execute_35_Operands" | "Execute_36_Operands" | "Execute_37_Operands" | "Execute_38_Operands" | "Execute_39_Operands" | "Execute_40_Operands" | "Execute_41_Operands" | "Execute_42_Operands" | "Execute_43_Operands" | "Execute_44_Operands" | "Execute_45_Operands" | "Execute_46_Operands" | "Execute_47_Operands" | "Execute_48_Operands" | "Execute_49_Operands" | "Execute_50_Operands" | "Execute_51_Operands" | "Execute_52_Operands" | "Execute_53_Operands" | "Execute_54_Operands" | "Execute_55_Operands" | "Execute_56_Operands" | "Execute_57_Operands" | "Execute_58_Operands" | "Execute_59_Operands" | "Execute_60_Operands" | "Execute_61_Operands" | "Execute_62_Operands" | "Execute_63_Operands" | "Execute_64_Operands" | "Zero" | "BoolFalse" | "BoolTrue" | "Copy" | "Increment" | "Decrement" | "Equals" | "NotEquals" | "JumpAbsolute" | "JumpForward" | "JumpBackward" | "JumpAbsoluteIf" | "JumpForwardIf" | "JumpBackwardIf" | "ChangeType" | "Exit" | "BeginBlock" | "EndBlock" | "ArrayReset" | "ArrayGetNum" | "ArraySetNum" | "ArrayGetAtIndex" | "ArraySetAtIndex" | "ArrayAdd" | "ArrayInsert" | "ArrayRemove" | "ArrayFind" | "ArrayAppend" | "ArrayClone" | "ArrayIterator" | "ArrayUnion" | "ArrayDifference" | "ArrayIntersection" | "ArrayReverse" | "Invalid" | "FirstArrayOpCode" | "LastArrayOpCode" | "ERigVMOpCode_MAX" */
    open var OperandAlignment: Number
    open fun clone(): RigVMInstruction

    companion object {
        fun C(Other: UObject): RigVMInstruction
        fun C(Other: Any): RigVMInstruction
    }
}

external open class RigVMInstructionArray {
    open var Instructions: Array<RigVMInstruction>
    open fun clone(): RigVMInstructionArray

    companion object {
        fun C(Other: UObject): RigVMInstructionArray
        fun C(Other: Any): RigVMInstructionArray
    }
}

external open class RigVMExecuteContext {
    open fun clone(): RigVMExecuteContext

    companion object {
        fun C(Other: UObject): RigVMExecuteContext
        fun C(Other: Any): RigVMExecuteContext
    }
}

external object ERigVMParameterType {
    var Input: String /* "Input" */
    var Output: String /* "Output" */
    var Invalid: String /* "Invalid" */
    var ERigVMParameterType_MAX: String /* "ERigVMParameterType_MAX" */
}

external open class RigVMParameter {
    open var Type: String /* "Input" | "Output" | "Invalid" | "ERigVMParameterType_MAX" */
    open var Name: String
    open var RegisterIndex: Number
    open var CPPType: String
    open var ScriptStruct: ScriptStruct
    open var ScriptStructPath: String
    open fun clone(): RigVMParameter

    companion object {
        fun C(Other: UObject): RigVMParameter
        fun C(Other: Any): RigVMParameter
    }
}

external open class RigVMMemoryStatistics {
    open var RegisterCount: Number
    open var DataBytes: Number
    open var TotalBytes: Number
    open fun clone(): RigVMMemoryStatistics

    companion object {
        fun C(Other: UObject): RigVMMemoryStatistics
        fun C(Other: Any): RigVMMemoryStatistics
    }
}

external open class RigVMByteCodeStatistics {
    open var InstructionCount: Number
    open var DataBytes: Number
    open fun clone(): RigVMByteCodeStatistics

    companion object {
        fun C(Other: UObject): RigVMByteCodeStatistics
        fun C(Other: Any): RigVMByteCodeStatistics
    }
}

external open class RigVMStatistics {
    open var BytesForCDO: Number
    open var BytesPerInstance: Number
    open var LiteralMemory: RigVMMemoryStatistics
    open var WorkMemory: RigVMMemoryStatistics
    open var DebugMemory: RigVMMemoryStatistics
    open var BytesForCaching: Number
    open var ByteCode: RigVMByteCodeStatistics
    open fun clone(): RigVMStatistics

    companion object {
        fun C(Other: UObject): RigVMStatistics
        fun C(Other: Any): RigVMStatistics
    }
}

external open class RigVM : UObject {
    constructor()
    constructor(Outer: UObject)
    open var WorkMemoryStorageObject: RigVMMemoryStorage
    open var LiteralMemoryStorageObject: RigVMMemoryStorage
    open var DebugMemoryStorageObject: RigVMMemoryStorage
    open var ByteCodeStorage: RigVMByteCode
    open var Instructions: RigVMInstructionArray
    open var Context: RigVMExecuteContext
    open var NumExecutions: Any
    open var FunctionNamesStorage: Array<String>
    open var Parameters: Array<RigVMParameter>
    open var ParametersNameMap: Any
    open var DeferredVMToCopy: RigVM
    open fun SetParameterValueVector2D(InParameterName: String, InValue: Vector2D, InArrayIndex: Number)
    open fun SetParameterValueVector(InParameterName: String, InValue: Vector, InArrayIndex: Number)
    open fun SetParameterValueTransform(InParameterName: String, InValue: Transform, InArrayIndex: Number)
    open fun SetParameterValueString(InParameterName: String, InValue: String, InArrayIndex: Number)
    open fun SetParameterValueQuat(InParameterName: String, InValue: Quat, InArrayIndex: Number)
    open fun SetParameterValueName(InParameterName: String, InValue: String, InArrayIndex: Number)
    open fun SetParameterValueInt(InParameterName: String, InValue: Number, InArrayIndex: Number)
    open fun SetParameterValueFloat(InParameterName: String, InValue: Number, InArrayIndex: Number)
    open fun SetParameterValueDouble(InParameterName: String, InValue: Any, InArrayIndex: Number)
    open fun SetParameterValueBool(InParameterName: String, InValue: Boolean, InArrayIndex: Number)
    open fun GetStatistics(): RigVMStatistics
    open fun GetRigVMFunctionName(InFunctionIndex: Number): String
    open fun GetParameterValueVector2D(InParameterName: String, InArrayIndex: Number): Vector2D
    open fun GetParameterValueVector(InParameterName: String, InArrayIndex: Number): Vector
    open fun GetParameterValueTransform(InParameterName: String, InArrayIndex: Number): Transform
    open fun GetParameterValueString(InParameterName: String, InArrayIndex: Number): String
    open fun GetParameterValueQuat(InParameterName: String, InArrayIndex: Number): Quat
    open fun GetParameterValueName(InParameterName: String, InArrayIndex: Number): String
    open fun GetParameterValueInt(InParameterName: String, InArrayIndex: Number): Number
    open fun GetParameterValueFloat(InParameterName: String, InArrayIndex: Number): Number
    open fun GetParameterValueDouble(InParameterName: String, InArrayIndex: Number): Any
    open fun GetParameterValueBool(InParameterName: String, InArrayIndex: Number): Boolean
    open fun Execute(InEntryName: String): Boolean
    open fun AddRigVMFunction(InRigVMStruct: ScriptStruct, InMethodName: String): Number

    companion object {
        fun Load(ResourceName: String): RigVM
        fun Find(Outer: UObject, ResourceName: String): RigVM
        fun GetDefaultObject(): RigVM
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RigVM
        fun C(Other: UObject): RigVM
        fun C(Other: Any): RigVM
    }
}

external object ERigElementType {
    var None: String /* "None" */
    var Bone: String /* "Bone" */
    var Null: String /* "Null" */
    var Space: String /* "Space" */
    var Control: String /* "Control" */
    var Curve: String /* "Curve" */
    var RigidBody: String /* "RigidBody" */
    var Reference: String /* "Reference" */
    var Last: String /* "Last" */
    var All: String /* "All" */
    var ToResetAfterSetupEvent: String /* "ToResetAfterSetupEvent" */
    var ERigElementType_MAX: String /* "ERigElementType_MAX" */
}

external open class RigElementKey {
    open var Type: String /* "None" | "Bone" | "Null" | "Space" | "Control" | "Curve" | "RigidBody" | "Reference" | "Last" | "All" | "ToResetAfterSetupEvent" | "ERigElementType_MAX" */
    open var Name: String
    open fun clone(): RigElementKey

    companion object {
        fun C(Other: UObject): RigElementKey
        fun C(Other: Any): RigElementKey
        fun GetDefaultParentKey(): RigElementKey
        fun GetWorldSpaceReferenceKey(): RigElementKey
    }
}

external object ERigControlType {
    var Bool: String /* "Bool" */
    var Float: String /* "Float" */
    var Integer: String /* "Integer" */
    var Vector2D: String /* "Vector2D" */
    var Position: String /* "Position" */
    var Scale: String /* "Scale" */
    var Rotator: String /* "Rotator" */
    var Transform: String /* "Transform" */
    var TransformNoScale: String /* "TransformNoScale" */
    var EulerTransform: String /* "EulerTransform" */
    var ERigControlType_MAX: String /* "ERigControlType_MAX" */
}

external object ERigControlAxis {
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var ERigControlAxis_MAX: String /* "ERigControlAxis_MAX" */
}

external open class RigControlLimitEnabled {
    open var bMinimum: Boolean
    open var bMaximum: Boolean
    open fun clone(): RigControlLimitEnabled

    companion object {
        fun C(Other: UObject): RigControlLimitEnabled
        fun C(Other: Any): RigControlLimitEnabled
    }
}

external open class RigControlValueStorage {
    open var Float00: Number
    open var Float01: Number
    open var Float02: Number
    open var Float03: Number
    open var Float10: Number
    open var Float11: Number
    open var Float12: Number
    open var Float13: Number
    open var Float20: Number
    open var Float21: Number
    open var Float22: Number
    open var Float23: Number
    open var Float30: Number
    open var Float31: Number
    open var Float32: Number
    open var Float33: Number
    open var Float00_2: Number
    open var Float01_2: Number
    open var Float02_2: Number
    open var Float03_2: Number
    open var Float10_2: Number
    open var Float11_2: Number
    open var Float12_2: Number
    open var Float13_2: Number
    open var Float20_2: Number
    open var Float21_2: Number
    open var Float22_2: Number
    open var Float23_2: Number
    open var Float30_2: Number
    open var Float31_2: Number
    open var Float32_2: Number
    open var Float33_2: Number
    open var bValid: Boolean
    open fun clone(): RigControlValueStorage

    companion object {
        fun C(Other: UObject): RigControlValueStorage
        fun C(Other: Any): RigControlValueStorage
    }
}

external open class RigControlValue {
    open var FloatStorage: RigControlValueStorage
    open var Storage: Transform
    open fun clone(): RigControlValue

    companion object {
        fun C(Other: UObject): RigControlValue
        fun C(Other: Any): RigControlValue
    }
}

external open class Enum : Field {
    constructor()
    constructor(Outer: UObject)
    open fun GetEnumeratorName(EnumeratorValue: Number): String
    open fun GetEnumeratorUserFriendlyName(EnumeratorValue: Number): String
    open fun GetEnumeratorValueFromIndex(EnumeratorIndex: Number): Number
    open fun GetValidValue(EnumeratorValue: Number): Number

    companion object {
        fun Load(ResourceName: String): Enum
        fun Find(Outer: UObject, ResourceName: String): Enum
        fun GetDefaultObject(): Enum
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Enum
        fun C(Other: UObject): Enum
        fun C(Other: Any): Enum
        fun GetEnumeratorName(Enum: Enum, EnumeratorValue: Number): String
        fun GetEnumeratorUserFriendlyName(Enum: Enum, EnumeratorValue: Number): String
        fun GetEnumeratorValueFromIndex(Enum: Enum, EnumeratorIndex: Number): Number
        fun GetValidValue(Enum: Enum, EnumeratorValue: Number): Number
    }
}

external open class RigControlElementCustomization {
    open var AvailableSpaces: Array<RigElementKey>
    open var RemovedSpaces: Array<RigElementKey>
    open fun clone(): RigControlElementCustomization

    companion object {
        fun C(Other: UObject): RigControlElementCustomization
        fun C(Other: Any): RigControlElementCustomization
    }
}

external open class RigControlSettings {
    open var ControlType: String /* "Bool" | "Float" | "Integer" | "Vector2D" | "Position" | "Scale" | "Rotator" | "Transform" | "TransformNoScale" | "EulerTransform" | "ERigControlType_MAX" */
    open var DisplayName: String
    open var PrimaryAxis: String /* "X" | "Y" | "Z" | "ERigControlAxis_MAX" */
    open var bIsCurve: Boolean
    open var bAnimatable: Boolean
    open var LimitEnabled: Array<RigControlLimitEnabled>
    open var bDrawLimits: Boolean
    open var MinimumValue: RigControlValue
    open var MaximumValue: RigControlValue
    open var bShapeEnabled: Boolean
    open var bShapeVisible: Boolean
    open var ShapeName: String
    open var ShapeColor: LinearColor
    open var bIsTransientControl: Boolean
    open var ControlEnum: Enum
    open var Customization: RigControlElementCustomization
    open fun clone(): RigControlSettings

    companion object {
        fun C(Other: UObject): RigControlSettings
        fun C(Other: Any): RigControlSettings
    }
}

external open class RigMirrorSettings {
    open var MirrorAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var AxisToFlip: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var SearchString: String
    open var ReplaceString: String
    open fun clone(): RigMirrorSettings

    companion object {
        fun C(Other: UObject): RigMirrorSettings
        fun C(Other: Any): RigMirrorSettings
    }
}

external open class RigRigidBodySettings {
    open var Mass: Number
    open fun clone(): RigRigidBodySettings

    companion object {
        fun C(Other: UObject): RigRigidBodySettings
        fun C(Other: Any): RigRigidBodySettings
    }
}

external object ERigBoneType {
    var Imported: String /* "Imported" */
    var User: String /* "User" */
    var ERigBoneType_MAX: String /* "ERigBoneType_MAX" */
}

external open class RigHierarchyController : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bReportWarningsAndErrors: Boolean
    open var Hierarchy: Any
    open fun SetSelection(InKeys: Array<RigElementKey>, bPrintPythonCommand: Boolean): Boolean
    open fun SetParent(InChild: RigElementKey, InParent: RigElementKey, bMaintainGlobalTransform: Boolean, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): Boolean
    open fun SetHierarchy(InHierarchy: RigHierarchy)
    open fun SetControlSettings(InKey: RigElementKey, InSettings: RigControlSettings, bSetupUndo: Boolean): Boolean
    open fun SelectElement(InKey: RigElementKey, bSelect: Boolean, bClearSelection: Boolean): Boolean
    open fun RenameElement(InElement: RigElementKey, InName: String, bSetupUndo: Boolean, bPrintPythonCommand: Boolean, bClearSelection: Boolean): RigElementKey
    open fun RemoveParent(InChild: RigElementKey, InParent: RigElementKey, bMaintainGlobalTransform: Boolean, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): Boolean
    open fun RemoveElement(InElement: RigElementKey, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): Boolean
    open fun RemoveAllParents(InChild: RigElementKey, bMaintainGlobalTransform: Boolean, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): Boolean
    open fun MirrorElements(InKeys: Array<RigElementKey>, InSettings: RigMirrorSettings, bSelectNewElements: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean): Array<RigElementKey>
    open fun ImportFromText(InContent: String, bReplaceExistingElements: Boolean, bSelectNewElements: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean): Array<RigElementKey>
    open fun ImportCurvesFromAsset(InAssetPath: String, InNameSpace: String, bSelectCurves: Boolean, bSetupUndo: Boolean): Array<RigElementKey>
    open fun ImportCurves(InSkeleton: Skeleton, InNameSpace: String, bSelectCurves: Boolean, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): Array<RigElementKey>
    open fun ImportBonesFromAsset(InAssetPath: String, InNameSpace: String, bReplaceExistingBones: Boolean, bRemoveObsoleteBones: Boolean, bSelectBones: Boolean, bSetupUndo: Boolean): Array<RigElementKey>
    open fun ImportBones(InSkeleton: Skeleton, InNameSpace: String, bReplaceExistingBones: Boolean, bRemoveObsoleteBones: Boolean, bSelectBones: Boolean, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): Array<RigElementKey>
    open fun GetHierarchy(): RigHierarchy
    open fun GetControlSettings(InKey: RigElementKey): RigControlSettings
    open fun GeneratePythonCommands(): Array<String>
    open fun ExportToText(InKeys: Array<RigElementKey>): String
    open fun ExportSelectionToText(): String
    open fun DuplicateElements(InKeys: Array<RigElementKey>, bSelectNewElements: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean): Array<RigElementKey>
    open fun DeselectElement(InKey: RigElementKey): Boolean
    open fun ClearSelection(): Boolean
    open fun AddRigidBody(InName: String, InParent: RigElementKey, InSettings: RigRigidBodySettings, InLocalTransform: Transform, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): RigElementKey
    open fun AddParent(InChild: RigElementKey, InParent: RigElementKey, InWeight: Number, bMaintainGlobalTransform: Boolean, bSetupUndo: Boolean): Boolean
    open fun AddNull(InName: String, InParent: RigElementKey, InTransform: Transform, bTransformInGlobal: Boolean, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): RigElementKey
    open fun AddCurve(InName: String, InValue: Number, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): RigElementKey
    open fun AddControl(InName: String, InParent: RigElementKey, InSettings: RigControlSettings, InValue: RigControlValue, bSetupUndo: Boolean): RigElementKey
    open fun AddBone(InName: String, InParent: RigElementKey, InTransform: Transform, bTransformInGlobal: Boolean, InBoneType: String /* "Imported" | "User" | "ERigBoneType_MAX" */, bSetupUndo: Boolean, bPrintPythonCommand: Boolean): RigElementKey

    companion object {
        fun Load(ResourceName: String): RigHierarchyController
        fun Find(Outer: UObject, ResourceName: String): RigHierarchyController
        fun GetDefaultObject(): RigHierarchyController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RigHierarchyController
        fun C(Other: UObject): RigHierarchyController
        fun C(Other: Any): RigHierarchyController
    }
}

external open class CachedRigElement {
    open var Key: RigElementKey
    open var index: Any
    open var ContainerVersion: Number
    open fun clone(): CachedRigElement

    companion object {
        fun C(Other: UObject): CachedRigElement
        fun C(Other: Any): CachedRigElement
    }
}

external open class RigPoseElement {
    open var index: CachedRigElement
    open var GlobalTransform: Transform
    open var LocalTransform: Transform
    open var CurveValue: Number
    open fun clone(): RigPoseElement

    companion object {
        fun C(Other: UObject): RigPoseElement
        fun C(Other: Any): RigPoseElement
    }
}

external open class RigPose {
    open var Elements: Array<RigPoseElement>
    open var HierarchyTopologyVersion: Number
    open var PoseHash: Number
    open fun clone(): RigPose

    companion object {
        fun C(Other: UObject): RigPose
        fun C(Other: Any): RigPose
    }
}

external open class RigElementWeight {
    open var Location: Number
    open var Rotation: Number
    open var Scale: Number
    open fun clone(): RigElementWeight

    companion object {
        fun C(Other: UObject): RigElementWeight
        fun C(Other: Any): RigElementWeight
    }
}

external object ERigControlValueType {
    var Initial: String /* "Initial" */
    var Current: String /* "Current" */
    var Minimum: String /* "Minimum" */
    var Maximum: String /* "Maximum" */
    var ERigControlValueType_MAX: String /* "ERigControlValueType_MAX" */
}

external open class TransformNoScale {
    open var Location: Vector
    open var Rotation: Quat
    open fun clone(): TransformNoScale

    companion object {
        fun C(Other: UObject): TransformNoScale
        fun C(Other: Any): TransformNoScale
    }
}

external open class EulerTransform {
    open var Location: Vector
    open var Rotation: Rotator
    open var Scale: Vector
    open fun clone(): EulerTransform

    companion object {
        fun C(Other: UObject): EulerTransform
        fun C(Other: Any): EulerTransform
    }
}

external open class RigBaseElement {
    open var Key: RigElementKey
    open var index: Number
    open var SubIndex: Number
    open var bSelected: Boolean
    open fun clone(): RigBaseElement

    companion object {
        fun C(Other: UObject): RigBaseElement
        fun C(Other: Any): RigBaseElement
    }
}

external open class RigComputedTransform {
    open var Transform: Transform
    open fun clone(): RigComputedTransform

    companion object {
        fun C(Other: UObject): RigComputedTransform
        fun C(Other: Any): RigComputedTransform
    }
}

external open class RigLocalAndGlobalTransform {
    open var Local: RigComputedTransform
    open var Global: RigComputedTransform
    open fun clone(): RigLocalAndGlobalTransform

    companion object {
        fun C(Other: UObject): RigLocalAndGlobalTransform
        fun C(Other: Any): RigLocalAndGlobalTransform
    }
}

external open class RigCurrentAndInitialTransform {
    open var Current: RigLocalAndGlobalTransform
    open var Initial: RigLocalAndGlobalTransform
    open fun clone(): RigCurrentAndInitialTransform

    companion object {
        fun C(Other: UObject): RigCurrentAndInitialTransform
        fun C(Other: Any): RigCurrentAndInitialTransform
    }
}

external open class RigTransformElement : RigBaseElement {
    open var Pose: RigCurrentAndInitialTransform
    override fun clone(): RigTransformElement

    companion object {
        fun C(Other: UObject): RigTransformElement
        fun C(Other: Any): RigTransformElement
    }
}

external open class RigMultiParentElement : RigTransformElement {
    open var Parent: RigCurrentAndInitialTransform
    override fun clone(): RigMultiParentElement

    companion object {
        fun C(Other: UObject): RigMultiParentElement
        fun C(Other: Any): RigMultiParentElement
    }
}

external open class RigNullElement : RigMultiParentElement {
    override fun clone(): RigNullElement

    companion object {
        fun C(Other: UObject): RigNullElement
        fun C(Other: Any): RigNullElement
    }
}

external open class RigControlElement : RigMultiParentElement {
    open var Settings: RigControlSettings
    open var Offset: RigCurrentAndInitialTransform
    open var Shape: RigCurrentAndInitialTransform
    override fun clone(): RigControlElement

    companion object {
        fun C(Other: UObject): RigControlElement
        fun C(Other: Any): RigControlElement
    }
}

external open class RigSingleParentElement : RigTransformElement {
    override fun clone(): RigSingleParentElement

    companion object {
        fun C(Other: UObject): RigSingleParentElement
        fun C(Other: Any): RigSingleParentElement
    }
}

external open class RigBoneElement : RigSingleParentElement {
    open var BoneType: String /* "Imported" | "User" | "ERigBoneType_MAX" */
    override fun clone(): RigBoneElement

    companion object {
        fun C(Other: UObject): RigBoneElement
        fun C(Other: Any): RigBoneElement
    }
}

external open class RigHierarchy : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TopologyVersion: Any
    open var bEnableDirtyPropagation: Boolean
    open var TransformStackIndex: Number
    open var HierarchyController: RigHierarchyController
    open var PreviousNameMap: Any
    open var HierarchyForCacheValidation: RigHierarchy
    open fun SwitchToWorldSpace(InChild: RigElementKey, bInitial: Boolean, bAffectChildren: Boolean): Boolean
    open fun SwitchToParent(InChild: RigElementKey, InParent: RigElementKey, bInitial: Boolean, bAffectChildren: Boolean): Boolean
    open fun SwitchToDefaultParent(InChild: RigElementKey, bInitial: Boolean, bAffectChildren: Boolean): Boolean
    open fun SortKeys(InKeys: Array<RigElementKey>): Array<RigElementKey>
    open fun SetPose(InPose: RigPose)
    open fun SetParentWeightArray(InChild: RigElementKey, InWeights: Array<RigElementWeight>, bInitial: Boolean, bAffectChildren: Boolean): Boolean
    open fun SetParentWeight(InChild: RigElementKey, InParent: RigElementKey, InWeight: RigElementWeight, bInitial: Boolean, bAffectChildren: Boolean): Boolean
    open fun SetLocalTransformByIndex(InElementIndex: Number, InTransform: Transform, bInitial: Boolean, bAffectChildren: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean)
    open fun SetLocalTransform(InKey: RigElementKey, InTransform: Transform, bInitial: Boolean, bAffectChildren: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean)
    open fun SetGlobalTransformByIndex(InElementIndex: Number, InTransform: Transform, bInitial: Boolean, bAffectChildren: Boolean, bSetupUndo: Boolean)
    open fun SetGlobalTransform(InKey: RigElementKey, InTransform: Transform, bInitial: Boolean, bAffectChildren: Boolean, bSetupUndo: Boolean)
    open fun SetCurveValueByIndex(InElementIndex: Number, InValue: Number, bSetupUndo: Boolean)
    open fun SetCurveValue(InKey: RigElementKey, InValue: Number, bSetupUndo: Boolean)
    open fun SetControlVisibilityByIndex(InElementIndex: Number, bVisibility: Boolean)
    open fun SetControlVisibility(InKey: RigElementKey, bVisibility: Boolean)
    open fun SetControlValueByIndex(InElementIndex: Number, InValue: RigControlValue, InValueType: String /* "Initial" | "Current" | "Minimum" | "Maximum" | "ERigControlValueType_MAX" */, bSetupUndo: Boolean, bPrintPythonCommands: Boolean)
    open fun SetControlValue(InKey: RigElementKey, InValue: RigControlValue, InValueType: String /* "Initial" | "Current" | "Minimum" | "Maximum" | "ERigControlValueType_MAX" */, bSetupUndo: Boolean, bPrintPythonCommands: Boolean)
    open fun SetControlShapeTransformByIndex(InElementIndex: Number, InTransform: Transform, bInitial: Boolean, bSetupUndo: Boolean)
    open fun SetControlShapeTransform(InKey: RigElementKey, InTransform: Transform, bInitial: Boolean, bSetupUndo: Boolean)
    open fun SetControlSettingsByIndex(InElementIndex: Number, InSettings: RigControlSettings, bSetupUndo: Boolean, bForce: Boolean, bPrintPythonCommands: Boolean)
    open fun SetControlSettings(InKey: RigElementKey, InSettings: RigControlSettings, bSetupUndo: Boolean, bForce: Boolean, bPrintPythonCommands: Boolean)
    open fun SetControlOffsetTransformByIndex(InElementIndex: Number, InTransform: Transform, bInitial: Boolean, bAffectChildren: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean)
    open fun SetControlOffsetTransform(InKey: RigElementKey, InTransform: Transform, bInitial: Boolean, bAffectChildren: Boolean, bSetupUndo: Boolean, bPrintPythonCommands: Boolean)
    open fun SendAutoKeyEvent(InElement: RigElementKey, InOffsetInSeconds: Number, bAsynchronous: Boolean)
    open fun ResetPoseToInitial(InTypeFilter: String /* "None" | "Bone" | "Null" | "Space" | "Control" | "Curve" | "RigidBody" | "Reference" | "Last" | "All" | "ToResetAfterSetupEvent" | "ERigElementType_MAX" */)
    open fun ResetCurveValues()
    open fun Reset()
    open fun Num(): Number
    open fun IsValidIndex(InElementIndex: Number): Boolean
    open fun IsSelectedByIndex(InIndex: Number): Boolean
    open fun IsSelected(InKey: RigElementKey): Boolean
    open fun IsParentedTo(InChild: RigElementKey, InParent: RigElementKey): Boolean
    open fun GetSelectedKeys(InTypeFilter: String /* "None" | "Bone" | "Null" | "Space" | "Control" | "Curve" | "RigidBody" | "Reference" | "Last" | "All" | "ToResetAfterSetupEvent" | "ERigElementType_MAX" */): Array<RigElementKey>
    open fun GetRigidBodies(bTraverse: Boolean): Array<RigElementKey>
    open fun GetReferences(bTraverse: Boolean): Array<RigElementKey>
    open fun GetPreviousParent(InKey: RigElementKey): RigElementKey
    open fun GetPreviousName(InKey: RigElementKey): String
    open fun GetPose(bInitial: Boolean): RigPose
    open fun GetParentWeightArray(InChild: RigElementKey, bInitial: Boolean): Array<RigElementWeight>
    open fun GetParentWeight(InChild: RigElementKey, InParent: RigElementKey, bInitial: Boolean): RigElementWeight
    open fun GetParentTransformByIndex(InElementIndex: Number, bInitial: Boolean): Transform
    open fun GetParentTransform(InKey: RigElementKey, bInitial: Boolean): Transform
    open fun GetParents(InKey: RigElementKey, bRecursive: Boolean): Array<RigElementKey>
    open fun GetNumberOfParents(InKey: RigElementKey): Number
    open fun GetNulls(bTraverse: Boolean): Array<RigElementKey>
    open fun GetLocalTransformByIndex(InElementIndex: Number, bInitial: Boolean): Transform
    open fun GetLocalTransform(InKey: RigElementKey, bInitial: Boolean): Transform
    open fun GetKey(InElementIndex: Number): RigElementKey
    open fun GetIndex(InKey: RigElementKey): Number
    open fun GetGlobalTransformByIndex(InElementIndex: Number, bInitial: Boolean): Transform
    open fun GetGlobalTransform(InKey: RigElementKey, bInitial: Boolean): Transform
    open fun GetGlobalControlShapeTransformByIndex(InElementIndex: Number, bInitial: Boolean): Transform
    open fun GetGlobalControlShapeTransform(InKey: RigElementKey, bInitial: Boolean): Transform
    open fun GetGlobalControlOffsetTransformByIndex(InElementIndex: Number, bInitial: Boolean): Transform
    open fun GetGlobalControlOffsetTransform(InKey: RigElementKey, bInitial: Boolean): Transform
    open fun GetFirstParent(InKey: RigElementKey): RigElementKey
    open fun GetCurveValueByIndex(InElementIndex: Number): Number
    open fun GetCurveValue(InKey: RigElementKey): Number
    open fun GetCurves(): Array<RigElementKey>
    open fun GetControlValueByIndex(InElementIndex: Number, InValueType: String /* "Initial" | "Current" | "Minimum" | "Maximum" | "ERigControlValueType_MAX" */): RigControlValue
    open fun GetControlValue(InKey: RigElementKey, InValueType: String /* "Initial" | "Current" | "Minimum" | "Maximum" | "ERigControlValueType_MAX" */): RigControlValue
    open fun GetController(bCreateIfNeeded: Boolean): RigHierarchyController
    open fun GetControls(bTraverse: Boolean): Array<RigElementKey>
    open fun GetChildren(InKey: RigElementKey, bRecursive: Boolean): Array<RigElementKey>
    open fun GetBones(bTraverse: Boolean): Array<RigElementKey>
    open fun GetAllKeys(bTraverse: Boolean): Array<RigElementKey>
    open fun FindNull(InKey: RigElementKey): RigNullElement
    open fun FindControl(InKey: RigElementKey): RigControlElement
    open fun FindBone(InKey: RigElementKey): RigBoneElement
    open fun CopyPose(InHierarchy: RigHierarchy, bCurrent: Boolean, bInitial: Boolean)
    open fun CopyHierarchy(InHierarchy: RigHierarchy)
    open fun Contains(InKey: RigElementKey): Boolean

    companion object {
        fun Load(ResourceName: String): RigHierarchy
        fun Find(Outer: UObject, ResourceName: String): RigHierarchy
        fun GetDefaultObject(): RigHierarchy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RigHierarchy
        fun MakeControlValueFromVector2D(InValue: Vector2D): RigControlValue
        fun MakeControlValueFromVector(InValue: Vector): RigControlValue
        fun MakeControlValueFromTransformNoScale(InValue: TransformNoScale): RigControlValue
        fun MakeControlValueFromTransform(InValue: Transform): RigControlValue
        fun MakeControlValueFromRotator(InValue: Rotator): RigControlValue
        fun MakeControlValueFromInt(InValue: Number): RigControlValue
        fun MakeControlValueFromFloat(InValue: Number): RigControlValue
        fun MakeControlValueFromEulerTransform(InValue: EulerTransform): RigControlValue
        fun MakeControlValueFromBool(InValue: Boolean): RigControlValue
        fun GetVectorFromControlValue(InValue: RigControlValue): Vector
        fun GetVector2DFromControlValue(InValue: RigControlValue): Vector2D
        fun GetTransformNoScaleFromControlValue(InValue: RigControlValue): TransformNoScale
        fun GetTransformFromControlValue(InValue: RigControlValue): Transform
        fun GetRotatorFromControlValue(InValue: RigControlValue): Rotator
        fun GetIntFromControlValue(InValue: RigControlValue): Number
        fun GetFloatFromControlValue(InValue: RigControlValue): Number
        fun GetEulerTransformFromControlValue(InValue: RigControlValue): EulerTransform
        fun C(Other: UObject): RigHierarchy
        fun C(Other: Any): RigHierarchy
    }
}

external open class ControlRigShapeDefinition {
    open var ShapeName: String
    open var StaticMesh: StaticMesh
    open var Transform: Transform
    open fun clone(): ControlRigShapeDefinition

    companion object {
        fun C(Other: UObject): ControlRigShapeDefinition
        fun C(Other: Any): ControlRigShapeDefinition
    }
}

external open class ControlRigShapeLibrary : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultShape: ControlRigShapeDefinition
    open var DefaultMaterial: Material
    open var MaterialColorParameter: String
    open var Shapes: Array<ControlRigShapeDefinition>

    companion object {
        fun Load(ResourceName: String): ControlRigShapeLibrary
        fun Find(Outer: UObject, ResourceName: String): ControlRigShapeLibrary
        fun GetDefaultObject(): ControlRigShapeLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ControlRigShapeLibrary
        fun C(Other: UObject): ControlRigShapeLibrary
        fun C(Other: Any): ControlRigShapeLibrary
    }
}

external object EControlRigDrawSettings {
    var Points: String /* "Points" */
    var Lines: String /* "Lines" */
    var LineStrip: String /* "LineStrip" */
    var DynamicMesh: String /* "DynamicMesh" */
    var EControlRigDrawSettings_MAX: String /* "EControlRigDrawSettings_MAX" */
}

external open class ControlRigDrawInstruction {
    open var Name: String
    open var PrimitiveType: String /* "Points" | "Lines" | "LineStrip" | "DynamicMesh" | "EControlRigDrawSettings_MAX" */
    open var Positions: Array<Vector>
    open var Color: LinearColor
    open var Thickness: Number
    open var Transform: Transform
    open fun clone(): ControlRigDrawInstruction

    companion object {
        fun C(Other: UObject): ControlRigDrawInstruction
        fun C(Other: Any): ControlRigDrawInstruction
    }
}

external open class ControlRigDrawContainer {
    open var Instructions: Array<ControlRigDrawInstruction>
    open fun clone(): ControlRigDrawContainer

    companion object {
        fun C(Other: UObject): ControlRigDrawContainer
        fun C(Other: Any): ControlRigDrawContainer
    }
}

external open class AnimationDataSourceRegistry : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DataSources: Any

    companion object {
        fun Load(ResourceName: String): AnimationDataSourceRegistry
        fun Find(Outer: UObject, ResourceName: String): AnimationDataSourceRegistry
        fun GetDefaultObject(): AnimationDataSourceRegistry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimationDataSourceRegistry
        fun C(Other: UObject): AnimationDataSourceRegistry
        fun C(Other: Any): AnimationDataSourceRegistry
    }
}

external open class RigInfluenceEntry {
    open var Source: RigElementKey
    open var AffectedList: Array<RigElementKey>
    open fun clone(): RigInfluenceEntry

    companion object {
        fun C(Other: UObject): RigInfluenceEntry
        fun C(Other: Any): RigInfluenceEntry
    }
}

external open class RigInfluenceMap {
    open var EventName: String
    open var Entries: Array<RigInfluenceEntry>
    open var KeyToIndex: Any
    open fun clone(): RigInfluenceMap

    companion object {
        fun C(Other: UObject): RigInfluenceMap
        fun C(Other: Any): RigInfluenceMap
    }
}

external open class RigInfluenceMapPerEvent {
    open var Maps: Array<RigInfluenceMap>
    open var EventToIndex: Any
    open fun clone(): RigInfluenceMapPerEvent

    companion object {
        fun C(Other: UObject): RigInfluenceMapPerEvent
        fun C(Other: Any): RigInfluenceMapPerEvent
    }
}

external object EControlRigState {
    var Init: String /* "Init" */
    var Update: String /* "Update" */
    var Invalid: String /* "Invalid" */
    var EControlRigState_MAX: String /* "EControlRigState_MAX" */
}

external open class ControlRig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ExecutionType: String /* "Runtime" | "Editing" | "Max" | "ERigExecutionType_MAX" */
    open var VMRuntimeSettings: RigVMRuntimeSettings
    open var ControlCustomizations: Any
    open var VM: RigVM
    open var DynamicHierarchy: RigHierarchy
    open var GizmoLibrary: ControlRigShapeLibrary
    open var ShapeLibraries: Array<ControlRigShapeLibrary>
    open var InputProperties: Any
    open var OutputProperties: Any
    open var DrawContainer: ControlRigDrawContainer
    open var DataSourceRegistry: AnimationDataSourceRegistry
    open var EventQueue: Array<String>
    open var Influences: RigInfluenceMapPerEvent
    open var InteractionRig: ControlRig
    open var InteractionRigClass: UnrealEngineClass
    open var AssetUserData: Array<AssetUserData>
    open var VMSnapshotBeforeExecution: RigVM
    open var bIsInDebugMode: Boolean
    open fun SupportsEvent(InEventName: String): Boolean
    open fun SetVariableFromString(InVariableName: String, InValue: String): Boolean
    open fun SetInteractionRigClass(InInteractionRigClass: UnrealEngineClass)
    open fun SetInteractionRig(InInteractionRig: ControlRig)
    open fun SetFramesPerSecond(InFramesPerSecond: Number)
    open fun SetDeltaTime(InDeltaTime: Number)
    open fun SetAbsoluteTime(InAbsoluteTime: Number, InSetDeltaTimeZero: Boolean)
    open fun SetAbsoluteAndDeltaTime(InAbsoluteTime: Number, InDeltaTime: Number)
    open fun SelectControl(InControlName: String, bSelect: Boolean)
    open fun RequestSetup()
    open fun RequestInit()
    open fun IsControlSelected(InControlName: String): Boolean
    open fun GetVM(): RigVM
    open fun GetVariableType(InVariableName: String): String
    open fun GetVariableAsString(InVariableName: String): String
    open fun GetSupportedEvents(): Array<String>
    open fun GetVariables(): Array<String>
    open fun GetInteractionRigClass(): UnrealEngineClass
    open fun GetInteractionRig(): ControlRig
    open fun GetHierarchy(): RigHierarchy
    open fun GetCurrentFramesPerSecond(): Number
    open fun GetAbsoluteTime(): Number
    open fun Execute(State: String /* "Init" | "Update" | "Invalid" | "EControlRigState_MAX" */, InEventName: String)
    open fun CurrentControlSelection(): Array<String>
    open fun ClearControlSelection(): Boolean
    open fun CanExecute(): Boolean

    companion object {
        fun Load(ResourceName: String): ControlRig
        fun Find(Outer: UObject, ResourceName: String): ControlRig
        fun GetDefaultObject(): ControlRig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ControlRig
        fun FindControlRigs(Outer: UObject, OptionalClass: UnrealEngineClass): Array<ControlRig>
        fun C(Other: UObject): ControlRig
        fun C(Other: Any): ControlRig
    }
}

external open class RigSpacePickerBakeSettings {
    open var TargetSpace: RigElementKey
    open var StartFrame: FrameNumber
    open var EndFrame: FrameNumber
    open var bReduceKeys: Boolean
    open var Tolerance: Number
    open fun clone(): RigSpacePickerBakeSettings

    companion object {
        fun C(Other: UObject): RigSpacePickerBakeSettings
        fun C(Other: Any): RigSpacePickerBakeSettings
    }
}

external open class MovieSceneNameableTrack : MovieSceneTrack {
    constructor()
    constructor(Outer: UObject)
    open var DisplayName: String
    open var TrackRowDisplayNames: Array<String>

    companion object {
        fun Load(ResourceName: String): MovieSceneNameableTrack
        fun Find(Outer: UObject, ResourceName: String): MovieSceneNameableTrack
        fun GetDefaultObject(): MovieSceneNameableTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneNameableTrack
        fun C(Other: UObject): MovieSceneNameableTrack
        fun C(Other: Any): MovieSceneNameableTrack
    }
}

external open class MovieSceneControlRigParameterTrack : MovieSceneNameableTrack {
    constructor()
    constructor(Outer: UObject)
    open var ControlRig: ControlRig
    open var SectionToKey: MovieSceneSection
    open var Sections: Array<MovieSceneSection>
    open var TrackName: String

    companion object {
        fun Load(ResourceName: String): MovieSceneControlRigParameterTrack
        fun Find(Outer: UObject, ResourceName: String): MovieSceneControlRigParameterTrack
        fun GetDefaultObject(): MovieSceneControlRigParameterTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneControlRigParameterTrack
        fun C(Other: UObject): MovieSceneControlRigParameterTrack
        fun C(Other: Any): MovieSceneControlRigParameterTrack
    }
}

external open class ControlRigSequencerBindingProxy {
    open var Proxy: SequencerBindingProxy
    open var ControlRig: ControlRig
    open var Track: MovieSceneControlRigParameterTrack
    open fun clone(): ControlRigSequencerBindingProxy

    companion object {
        fun C(Other: UObject): ControlRigSequencerBindingProxy
        fun C(Other: Any): ControlRigSequencerBindingProxy
    }
}

external open class ActorForWorldTransforms {
    open var Actor: Actor
    open var Component: Any
    open var SocketName: String
    open fun clone(): ActorForWorldTransforms

    companion object {
        fun C(Other: UObject): ActorForWorldTransforms
        fun C(Other: Any): ActorForWorldTransforms
    }
}

external open class ControlRigForWorldTransforms {
    open var ControlRig: Any
    open var ControlNames: Array<String>
    open fun clone(): ControlRigForWorldTransforms

    companion object {
        fun C(Other: UObject): ControlRigForWorldTransforms
        fun C(Other: Any): ControlRigForWorldTransforms
    }
}

external open class ControlRigSnapperSelection {
    open var Actors: Array<ActorForWorldTransforms>
    open var ControlRigs: Array<ControlRigForWorldTransforms>
    open fun clone(): ControlRigSnapperSelection

    companion object {
        fun C(Other: UObject): ControlRigSnapperSelection
        fun C(Other: Any): ControlRigSnapperSelection
    }
}

external open class ControlRigSnapSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bKeepOffset: Boolean
    open var bSnapPosition: Boolean
    open var bSnapRotation: Boolean
    open var bSnapScale: Boolean

    companion object {
        fun Load(ResourceName: String): ControlRigSnapSettings
        fun Find(Outer: UObject, ResourceName: String): ControlRigSnapSettings
        fun GetDefaultObject(): ControlRigSnapSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ControlRigSnapSettings
        fun C(Other: UObject): ControlRigSnapSettings
        fun C(Other: Any): ControlRigSnapSettings
    }
}

external open class LevelSequence : MovieSceneSequence {
    constructor()
    constructor(Outer: UObject)
    open var MovieScene: MovieScene
    open var ObjectReferences: LevelSequenceObjectReferenceMap
    open var BindingReferences: LevelSequenceBindingReferences
    open var PossessedObjects: Any
    open var DirectorBlueprint: Blueprint
    open var DirectorClass: UnrealEngineClass
    open var MetaDataObjects: Array<UObject>
    open var AssetUserData: Array<AssetUserData>
    open fun RemoveMetaDataByClass(InClass: UnrealEngineClass)
    open fun FindOrAddMetaDataByClass(InClass: UnrealEngineClass): UObject
    open fun FindMetaDataByClass(InClass: UnrealEngineClass): UObject
    open fun CopyMetaData(InMetaData: UObject): UObject
    open fun BakeControlRigSpace(InControlRig: ControlRig, InControlNames: Array<String>, InSettings: RigSpacePickerBakeSettings, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
    open fun CollapseControlRigAnimLayers(InTrack: MovieSceneControlRigParameterTrack, bKeyReduce: Boolean, Tolerance: Number): Boolean
    open fun DeleteControlRigSpace(InControlRig: ControlRig, InControlName: String, InTime: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
    open fun GetActorWorldTransform(Actor: Actor, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Transform
    open fun GetActorWorldTransforms(Actor: Actor, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Transform>
    open fun GetControlRigs(): Array<ControlRigSequencerBindingProxy>
    open fun GetControlRigWorldTransform(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Transform
    open fun GetControlRigWorldTransforms(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Transform>
    open fun GetLocalControlRigBool(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
    open fun GetLocalControlRigBools(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Boolean>
    open fun GetLocalControlRigEulerTransform(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): EulerTransform
    open fun GetLocalControlRigEulerTransforms(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<EulerTransform>
    open fun GetLocalControlRigFloat(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Number
    open fun GetLocalControlRigFloats(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Number>
    open fun GetLocalControlRigInt(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Number
    open fun GetLocalControlRigInts(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Number>
    open fun GetLocalControlRigPosition(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Vector
    open fun GetLocalControlRigPositions(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Vector>
    open fun GetLocalControlRigRotator(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Rotator
    open fun GetLocalControlRigRotators(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Rotator>
    open fun GetLocalControlRigScale(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Vector
    open fun GetLocalControlRigScales(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Vector>
    open fun GetLocalControlRigTransform(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Transform
    open fun GetLocalControlRigTransformNoScale(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): TransformNoScale
    open fun GetLocalControlRigTransformNoScales(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<TransformNoScale>
    open fun GetLocalControlRigTransforms(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Transform>
    open fun GetLocalControlRigVector2D(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Vector2D
    open fun GetLocalControlRigVector2Ds(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Vector2D>
    open fun GetSkeletalMeshComponentWorldTransform(SkeletalMeshComponent: SkeletalMeshComponent, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, ReferenceName: String): Transform
    open fun GetSkeletalMeshComponentWorldTransforms(SkeletalMeshComponent: SkeletalMeshComponent, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, ReferenceName: String): Array<Transform>
    open fun MoveControlRigSpace(InControlRig: ControlRig, InControlName: String, InTime: FrameNumber, InNewTime: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
    open fun SetControlRigSpace(InControlRig: ControlRig, InControlName: String, InSpaceKey: RigElementKey, InTime: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
    open fun SetControlRigWorldTransform(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, WorldTransform: Transform, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetControlRigWorldTransforms(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, WorldTransforms: Array<Transform>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigBool(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Boolean, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigBools(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Boolean>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigEulerTransform(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: EulerTransform, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigEulerTransforms(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<EulerTransform>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigFloat(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Number, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigFloats(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Number>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigInt(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Number, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigInts(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Number>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigPosition(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Vector, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigPositions(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Vector>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigRotator(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Rotator, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigRotators(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Rotator>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigScale(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Vector, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigScales(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Vector>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigTransform(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Transform, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigTransformNoScale(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: TransformNoScale, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigTransformNoScales(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<TransformNoScale>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigTransforms(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Transform>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SetLocalControlRigVector2D(ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Vector2D, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
    open fun SetLocalControlRigVector2Ds(ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Vector2D>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
    open fun SnapControlRig(StartFrame: FrameNumber, EndFrame: FrameNumber, ChildrenToSnap: ControlRigSnapperSelection, ParentToSnap: ControlRigSnapperSelection, SnapSettings: ControlRigSnapSettings, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
    open fun TweenControlRig(ControlRig: ControlRig, TweenValue: Number): Boolean
    open fun OpenLevelSequence(): Boolean

    companion object {
        fun Load(ResourceName: String): LevelSequence
        fun Find(Outer: UObject, ResourceName: String): LevelSequence
        fun GetDefaultObject(): LevelSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelSequence
        fun C(Other: UObject): LevelSequence
        fun C(Other: Any): LevelSequence
        fun BakeControlRigSpace(InSequence: LevelSequence, InControlRig: ControlRig, InControlNames: Array<String>, InSettings: RigSpacePickerBakeSettings, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
        fun CollapseControlRigAnimLayers(InSequence: LevelSequence, InTrack: MovieSceneControlRigParameterTrack, bKeyReduce: Boolean, Tolerance: Number): Boolean
        fun DeleteControlRigSpace(InSequence: LevelSequence, InControlRig: ControlRig, InControlName: String, InTime: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
        fun GetActorWorldTransform(LevelSequence: LevelSequence, Actor: Actor, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Transform
        fun GetActorWorldTransforms(LevelSequence: LevelSequence, Actor: Actor, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Transform>
        fun GetControlRigs(LevelSequence: LevelSequence): Array<ControlRigSequencerBindingProxy>
        fun GetControlRigWorldTransform(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Transform
        fun GetControlRigWorldTransforms(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Transform>
        fun GetLocalControlRigBool(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
        fun GetLocalControlRigBools(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Boolean>
        fun GetLocalControlRigEulerTransform(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): EulerTransform
        fun GetLocalControlRigEulerTransforms(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<EulerTransform>
        fun GetLocalControlRigFloat(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Number
        fun GetLocalControlRigFloats(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Number>
        fun GetLocalControlRigInt(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Number
        fun GetLocalControlRigInts(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Number>
        fun GetLocalControlRigPosition(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Vector
        fun GetLocalControlRigPositions(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Vector>
        fun GetLocalControlRigRotator(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Rotator
        fun GetLocalControlRigRotators(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Rotator>
        fun GetLocalControlRigScale(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Vector
        fun GetLocalControlRigScales(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Vector>
        fun GetLocalControlRigTransform(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Transform
        fun GetLocalControlRigTransformNoScale(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): TransformNoScale
        fun GetLocalControlRigTransformNoScales(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<TransformNoScale>
        fun GetLocalControlRigTransforms(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Transform>
        fun GetLocalControlRigVector2D(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Vector2D
        fun GetLocalControlRigVector2Ds(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Array<Vector2D>
        fun GetSkeletalMeshComponentWorldTransform(LevelSequence: LevelSequence, SkeletalMeshComponent: SkeletalMeshComponent, Frame: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, ReferenceName: String): Transform
        fun GetSkeletalMeshComponentWorldTransforms(LevelSequence: LevelSequence, SkeletalMeshComponent: SkeletalMeshComponent, Frames: Array<FrameNumber>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, ReferenceName: String): Array<Transform>
        fun MoveControlRigSpace(InSequence: LevelSequence, InControlRig: ControlRig, InControlName: String, InTime: FrameNumber, InNewTime: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
        fun SetControlRigSpace(InSequence: LevelSequence, InControlRig: ControlRig, InControlName: String, InSpaceKey: RigElementKey, InTime: FrameNumber, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
        fun SetControlRigWorldTransform(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, WorldTransform: Transform, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetControlRigWorldTransforms(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, WorldTransforms: Array<Transform>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigBool(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Boolean, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigBools(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Boolean>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigEulerTransform(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: EulerTransform, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigEulerTransforms(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<EulerTransform>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigFloat(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Number, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigFloats(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Number>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigInt(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Number, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigInts(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Number>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigPosition(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Vector, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigPositions(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Vector>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigRotator(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Rotator, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigRotators(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Rotator>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigScale(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Vector, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigScales(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Vector>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigTransform(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Transform, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigTransformNoScale(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: TransformNoScale, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigTransformNoScales(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<TransformNoScale>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigTransforms(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Transform>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SetLocalControlRigVector2D(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frame: FrameNumber, Value: Vector2D, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */, bSetKey: Boolean)
        fun SetLocalControlRigVector2Ds(LevelSequence: LevelSequence, ControlRig: ControlRig, ControlName: String, Frames: Array<FrameNumber>, Values: Array<Vector2D>, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */)
        fun SnapControlRig(LevelSequence: LevelSequence, StartFrame: FrameNumber, EndFrame: FrameNumber, ChildrenToSnap: ControlRigSnapperSelection, ParentToSnap: ControlRigSnapperSelection, SnapSettings: ControlRigSnapSettings, TimeUnit: String /* "DisplayRate" | "TickResolution" | "ESequenceTimeUnit_MAX" */): Boolean
        fun TweenControlRig(LevelSequence: LevelSequence, ControlRig: ControlRig, TweenValue: Number): Boolean
        fun OpenLevelSequence(LevelSequence: LevelSequence): Boolean
    }
}

external open class AnimSeqExportOption : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bExportTransforms: Boolean
    open var bExportMorphTargets: Boolean
    open var bExportAttributeCurves: Boolean
    open var bExportMaterialCurves: Boolean
    open var bRecordInWorldSpace: Boolean
    open var bEvaluateAllSkeletalMeshComponents: Boolean
    open var WarmUpFrames: FrameNumber
    open var DelayBeforeStart: FrameNumber

    companion object {
        fun Load(ResourceName: String): AnimSeqExportOption
        fun Find(Outer: UObject, ResourceName: String): AnimSeqExportOption
        fun GetDefaultObject(): AnimSeqExportOption
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimSeqExportOption
        fun C(Other: UObject): AnimSeqExportOption
        fun C(Other: Any): AnimSeqExportOption
    }
}

external object EFbxExportCompatibility {
    var FBX_2011: String /* "FBX_2011" */
    var FBX_2012: String /* "FBX_2012" */
    var FBX_2013: String /* "FBX_2013" */
    var FBX_2014: String /* "FBX_2014" */
    var FBX_2016: String /* "FBX_2016" */
    var FBX_2018: String /* "FBX_2018" */
    var FBX_2019: String /* "FBX_2019" */
    var FBX_2020: String /* "FBX_2020" */
    var FBX_MAX: String /* "FBX_MAX" */
}

external open class FbxExportOption : UObject {
    constructor()
    constructor(Outer: UObject)
    open var FbxExportCompatibility: String /* "FBX_2011" | "FBX_2012" | "FBX_2013" | "FBX_2014" | "FBX_2016" | "FBX_2018" | "FBX_2019" | "FBX_2020" | "FBX_MAX" */
    open var bASCII: Boolean
    open var bForceFrontXAxis: Boolean
    open var VertexColor: Boolean
    open var LevelOfDetail: Boolean
    open var Collision: Boolean
    open var bExportMorphTargets: Boolean
    open var bExportPreviewMesh: Boolean
    open var MapSkeletalMotionToRoot: Boolean
    open var bExportLocalTime: Boolean

    companion object {
        fun Load(ResourceName: String): FbxExportOption
        fun Find(Outer: UObject, ResourceName: String): FbxExportOption
        fun GetDefaultObject(): FbxExportOption
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FbxExportOption
        fun C(Other: UObject): FbxExportOption
        fun C(Other: Any): FbxExportOption
    }
}

external open class SequencerBoundObjects {
    open var BindingProxy: SequencerBindingProxy
    open var BoundObjects: Array<UObject>
    open fun clone(): SequencerBoundObjects

    companion object {
        fun C(Other: UObject): SequencerBoundObjects
        fun C(Other: Any): SequencerBoundObjects
    }
}

external open class ControlFindReplaceString {
    open var Find: String
    open var Replace: String
    open fun clone(): ControlFindReplaceString

    companion object {
        fun C(Other: UObject): ControlFindReplaceString
        fun C(Other: Any): ControlFindReplaceString
    }
}

external object FControlRigChannelEnum {
    var Bool: String /* "Bool" */
    var Enum: String /* "Enum" */
    var Integer: String /* "Integer" */
    var Float: String /* "Float" */
    var Vector2DX: String /* "Vector2DX" */
    var Vector2DY: String /* "Vector2DY" */
    var PositionX: String /* "PositionX" */
    var PositionY: String /* "PositionY" */
    var PositionZ: String /* "PositionZ" */
    var RotatorX: String /* "RotatorX" */
    var RotatorY: String /* "RotatorY" */
    var RotatorZ: String /* "RotatorZ" */
    var ScaleX: String /* "ScaleX" */
    var ScaleY: String /* "ScaleY" */
    var ScaleZ: String /* "ScaleZ" */
    var FControlRigChannelEnum_MAX: String /* "FControlRigChannelEnum_MAX" */
}

external object FTransformChannelEnum {
    var TranslateX: String /* "TranslateX" */
    var TranslateY: String /* "TranslateY" */
    var TranslateZ: String /* "TranslateZ" */
    var RotateX: String /* "RotateX" */
    var RotateY: String /* "RotateY" */
    var RotateZ: String /* "RotateZ" */
    var ScaleX: String /* "ScaleX" */
    var ScaleY: String /* "ScaleY" */
    var ScaleZ: String /* "ScaleZ" */
    var FTransformChannelEnum_MAX: String /* "FTransformChannelEnum_MAX" */
}

external open class ControlToTransformMappings {
    open var ControlChannel: String /* "Bool" | "Enum" | "Integer" | "Float" | "Vector2DX" | "Vector2DY" | "PositionX" | "PositionY" | "PositionZ" | "RotatorX" | "RotatorY" | "RotatorZ" | "ScaleX" | "ScaleY" | "ScaleZ" | "FControlRigChannelEnum_MAX" */
    open var FBXChannel: String /* "TranslateX" | "TranslateY" | "TranslateZ" | "RotateX" | "RotateY" | "RotateZ" | "ScaleX" | "ScaleY" | "ScaleZ" | "FTransformChannelEnum_MAX" */
    open var bNegate: Boolean
    open fun clone(): ControlToTransformMappings

    companion object {
        fun C(Other: UObject): ControlToTransformMappings
        fun C(Other: Any): ControlToTransformMappings
    }
}

external open class MovieSceneUserImportFBXControlRigSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ImportedFileName: String
    open var ImportedStartTime: FrameNumber
    open var ImportedEndTime: FrameNumber
    open var ImportedNodeNames: Array<String>
    open var ImportedFrameRate: String
    open var FindAndReplaceStrings: Array<ControlFindReplaceString>
    open var bForceFrontXAxis: Boolean
    open var bConvertSceneUnit: Boolean
    open var ImportUniformScale: Number
    open var bImportOntoSelectedControls: Boolean
    open var TimeToInsertOrReplaceAnimation: FrameNumber
    open var bInsertAnimation: Boolean
    open var bSpecifyTimeRange: Boolean
    open var StartTimeRange: FrameNumber
    open var EndTimeRange: FrameNumber
    open var ControlChannelMappings: Array<ControlToTransformMappings>

    companion object {
        fun Load(ResourceName: String): MovieSceneUserImportFBXControlRigSettings
        fun Find(Outer: UObject, ResourceName: String): MovieSceneUserImportFBXControlRigSettings
        fun GetDefaultObject(): MovieSceneUserImportFBXControlRigSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneUserImportFBXControlRigSettings
        fun C(Other: UObject): MovieSceneUserImportFBXControlRigSettings
        fun C(Other: Any): MovieSceneUserImportFBXControlRigSettings
    }
}

external open class MovieSceneUserImportFBXSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bMatchByNameOnly: Boolean
    open var bForceFrontXAxis: Boolean
    open var bConvertSceneUnit: Boolean
    open var ImportUniformScale: Number
    open var bCreateCameras: Boolean
    open var bReplaceTransformTrack: Boolean
    open var bReduceKeys: Boolean
    open var ReduceKeysTolerance: Number

    companion object {
        fun Load(ResourceName: String): MovieSceneUserImportFBXSettings
        fun Find(Outer: UObject, ResourceName: String): MovieSceneUserImportFBXSettings
        fun GetDefaultObject(): MovieSceneUserImportFBXSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneUserImportFBXSettings
        fun C(Other: UObject): MovieSceneUserImportFBXSettings
        fun C(Other: Any): MovieSceneUserImportFBXSettings
    }
}

external open class MovieSceneChannel {
    open fun clone(): MovieSceneChannel

    companion object {
        fun C(Other: UObject): MovieSceneChannel
        fun C(Other: Any): MovieSceneChannel
    }
}

external open class MovieSceneBoolChannel : MovieSceneChannel {
    open var Times: Array<FrameNumber>
    open var DefaultValue: Boolean
    open var bHasDefaultValue: Boolean
    open var Values: Array<Boolean>
    override fun clone(): MovieSceneBoolChannel

    companion object {
        fun C(Other: UObject): MovieSceneBoolChannel
        fun C(Other: Any): MovieSceneBoolChannel
    }
}

external open class BoolParameterNameAndCurve {
    open var ParameterName: String
    open var ParameterCurve: MovieSceneBoolChannel
    open fun clone(): BoolParameterNameAndCurve

    companion object {
        fun C(Other: UObject): BoolParameterNameAndCurve
        fun C(Other: Any): BoolParameterNameAndCurve
    }
}

external open class MovieSceneTangentData {
    open var ArriveTangent: Number
    open var LeaveTangent: Number
    open var ArriveTangentWeight: Number
    open var LeaveTangentWeight: Number
    open var TangentWeightMode: String /* "RCTWM_WeightedNone" | "RCTWM_WeightedArrive" | "RCTWM_WeightedLeave" | "RCTWM_WeightedBoth" | "RCTWM_MAX" */
    open fun clone(): MovieSceneTangentData

    companion object {
        fun C(Other: UObject): MovieSceneTangentData
        fun C(Other: Any): MovieSceneTangentData
    }
}

external open class MovieSceneFloatValue {
    open var Value: Number
    open var Tangent: MovieSceneTangentData
    open var InterpMode: String /* "RCIM_Linear" | "RCIM_Constant" | "RCIM_Cubic" | "RCIM_None" | "RCIM_MAX" */
    open var TangentMode: String /* "RCTM_Auto" | "RCTM_User" | "RCTM_Break" | "RCTM_None" | "RCTM_MAX" */
    open var PaddingByte: Number
    open fun clone(): MovieSceneFloatValue

    companion object {
        fun C(Other: UObject): MovieSceneFloatValue
        fun C(Other: Any): MovieSceneFloatValue
    }
}

external open class KeyHandleLookupTable {
    open fun clone(): KeyHandleLookupTable

    companion object {
        fun C(Other: UObject): KeyHandleLookupTable
        fun C(Other: Any): KeyHandleLookupTable
    }
}

external open class MovieSceneKeyHandleMap : KeyHandleLookupTable {
    override fun clone(): MovieSceneKeyHandleMap

    companion object {
        fun C(Other: UObject): MovieSceneKeyHandleMap
        fun C(Other: Any): MovieSceneKeyHandleMap
    }
}

external open class MovieSceneFloatChannel : MovieSceneChannel {
    open var PreInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var PostInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var Times: Array<FrameNumber>
    open var Values: Array<MovieSceneFloatValue>
    open var DefaultValue: Number
    open var bHasDefaultValue: Boolean
    open var KeyHandles: MovieSceneKeyHandleMap
    open var TickResolution: FrameRate
    open var bShowCurve: Boolean
    override fun clone(): MovieSceneFloatChannel

    companion object {
        fun C(Other: UObject): MovieSceneFloatChannel
        fun C(Other: Any): MovieSceneFloatChannel
    }
}

external open class ScalarParameterNameAndCurve {
    open var ParameterName: String
    open var ParameterCurve: MovieSceneFloatChannel
    open fun clone(): ScalarParameterNameAndCurve

    companion object {
        fun C(Other: UObject): ScalarParameterNameAndCurve
        fun C(Other: Any): ScalarParameterNameAndCurve
    }
}

external open class Vector2DParameterNameAndCurves {
    open var ParameterName: String
    open var XCurve: MovieSceneFloatChannel
    open var YCurve: MovieSceneFloatChannel
    open fun clone(): Vector2DParameterNameAndCurves

    companion object {
        fun C(Other: UObject): Vector2DParameterNameAndCurves
        fun C(Other: Any): Vector2DParameterNameAndCurves
    }
}

external open class VectorParameterNameAndCurves {
    open var ParameterName: String
    open var XCurve: MovieSceneFloatChannel
    open var YCurve: MovieSceneFloatChannel
    open var ZCurve: MovieSceneFloatChannel
    open fun clone(): VectorParameterNameAndCurves

    companion object {
        fun C(Other: UObject): VectorParameterNameAndCurves
        fun C(Other: Any): VectorParameterNameAndCurves
    }
}

external open class ColorParameterNameAndCurves {
    open var ParameterName: String
    open var RedCurve: MovieSceneFloatChannel
    open var GreenCurve: MovieSceneFloatChannel
    open var BlueCurve: MovieSceneFloatChannel
    open var AlphaCurve: MovieSceneFloatChannel
    open fun clone(): ColorParameterNameAndCurves

    companion object {
        fun C(Other: UObject): ColorParameterNameAndCurves
        fun C(Other: Any): ColorParameterNameAndCurves
    }
}

external open class TransformParameterNameAndCurves {
    open var ParameterName: String
    open var Translation: MovieSceneFloatChannel
    open var Rotation: MovieSceneFloatChannel
    open var Scale: MovieSceneFloatChannel
    open fun clone(): TransformParameterNameAndCurves

    companion object {
        fun C(Other: UObject): TransformParameterNameAndCurves
        fun C(Other: Any): TransformParameterNameAndCurves
    }
}

external interface `T$291` {
    var ParameterNames: Any
}

external open class MovieSceneParameterSection : MovieSceneSection {
    constructor()
    constructor(Outer: UObject)
    open var BoolParameterNamesAndCurves: Array<BoolParameterNameAndCurve>
    open var ScalarParameterNamesAndCurves: Array<ScalarParameterNameAndCurve>
    open var Vector2DParameterNamesAndCurves: Array<Vector2DParameterNameAndCurves>
    open var VectorParameterNamesAndCurves: Array<VectorParameterNameAndCurves>
    open var ColorParameterNamesAndCurves: Array<ColorParameterNameAndCurves>
    open var TransformParameterNamesAndCurves: Array<TransformParameterNameAndCurves>
    open fun RemoveVectorParameter(InParameterName: String): Boolean
    open fun RemoveVector2DParameter(InParameterName: String): Boolean
    open fun RemoveTransformParameter(InParameterName: String): Boolean
    open fun RemoveScalarParameter(InParameterName: String): Boolean
    open fun RemoveColorParameter(InParameterName: String): Boolean
    open fun RemoveBoolParameter(InParameterName: String): Boolean
    open fun GetParameterNames(ParameterNames: Any = definedExternally): `T$291`
    open fun AddVectorParameterKey(InParameterName: String, InTime: FrameNumber, InValue: Vector)
    open fun AddVector2DParameterKey(InParameterName: String, InTime: FrameNumber, InValue: Vector2D)
    open fun AddTransformParameterKey(InParameterName: String, InTime: FrameNumber, InValue: Transform)
    open fun AddScalarParameterKey(InParameterName: String, InTime: FrameNumber, InValue: Number)
    open fun AddColorParameterKey(InParameterName: String, InTime: FrameNumber, InValue: LinearColor)
    open fun AddBoolParameterKey(InParameterName: String, InTime: FrameNumber, InValue: Boolean)

    companion object {
        fun Load(ResourceName: String): MovieSceneParameterSection
        fun Find(Outer: UObject, ResourceName: String): MovieSceneParameterSection
        fun GetDefaultObject(): MovieSceneParameterSection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneParameterSection
        fun C(Other: UObject): MovieSceneParameterSection
        fun C(Other: Any): MovieSceneParameterSection
    }
}

external open class MovieSceneTransformMask {
    open var mask: Any
    open fun clone(): MovieSceneTransformMask

    companion object {
        fun C(Other: UObject): MovieSceneTransformMask
        fun C(Other: Any): MovieSceneTransformMask
    }
}

external open class MovieSceneByteChannel : MovieSceneChannel {
    open var Times: Array<FrameNumber>
    open var DefaultValue: Number
    open var bHasDefaultValue: Boolean
    open var Values: Array<Number>
    open var Enum: Enum
    override fun clone(): MovieSceneByteChannel

    companion object {
        fun C(Other: UObject): MovieSceneByteChannel
        fun C(Other: Any): MovieSceneByteChannel
    }
}

external open class EnumParameterNameAndCurve {
    open var ParameterName: String
    open var ParameterCurve: MovieSceneByteChannel
    open fun clone(): EnumParameterNameAndCurve

    companion object {
        fun C(Other: UObject): EnumParameterNameAndCurve
        fun C(Other: Any): EnumParameterNameAndCurve
    }
}

external open class MovieSceneIntegerChannel : MovieSceneChannel {
    open var Times: Array<FrameNumber>
    open var DefaultValue: Number
    open var bHasDefaultValue: Boolean
    open var Values: Array<Number>
    override fun clone(): MovieSceneIntegerChannel

    companion object {
        fun C(Other: UObject): MovieSceneIntegerChannel
        fun C(Other: Any): MovieSceneIntegerChannel
    }
}

external open class IntegerParameterNameAndCurve {
    open var ParameterName: String
    open var ParameterCurve: MovieSceneIntegerChannel
    open fun clone(): IntegerParameterNameAndCurve

    companion object {
        fun C(Other: UObject): IntegerParameterNameAndCurve
        fun C(Other: Any): IntegerParameterNameAndCurve
    }
}

external object EMovieSceneControlRigSpaceType {
    var Parent: String /* "Parent" */
    var World: String /* "World" */
    var ControlRig: String /* "ControlRig" */
    var EMovieSceneControlRigSpaceType_MAX: String /* "EMovieSceneControlRigSpaceType_MAX" */
}

external open class MovieSceneControlRigSpaceBaseKey {
    open var SpaceType: String /* "Parent" | "World" | "ControlRig" | "EMovieSceneControlRigSpaceType_MAX" */
    open var ControlRigElement: RigElementKey
    open fun clone(): MovieSceneControlRigSpaceBaseKey

    companion object {
        fun C(Other: UObject): MovieSceneControlRigSpaceBaseKey
        fun C(Other: Any): MovieSceneControlRigSpaceBaseKey
    }
}

external open class MovieSceneControlRigSpaceChannel : MovieSceneChannel {
    open var KeyTimes: Array<FrameNumber>
    open var KeyValues: Array<MovieSceneControlRigSpaceBaseKey>
    override fun clone(): MovieSceneControlRigSpaceChannel

    companion object {
        fun C(Other: UObject): MovieSceneControlRigSpaceChannel
        fun C(Other: Any): MovieSceneControlRigSpaceChannel
    }
}

external open class SpaceControlNameAndChannel {
    open var ControlName: String
    open var SpaceCurve: MovieSceneControlRigSpaceChannel
    open fun clone(): SpaceControlNameAndChannel

    companion object {
        fun C(Other: UObject): SpaceControlNameAndChannel
        fun C(Other: Any): SpaceControlNameAndChannel
    }
}

external open class MovieSceneControlRigParameterSection : MovieSceneParameterSection {
    constructor()
    constructor(Outer: UObject)
    open var ControlRig: ControlRig
    open var ControlRigClass: UnrealEngineClass
    open var ControlsMask: Array<Boolean>
    open var TransformMask: MovieSceneTransformMask
    open var Weight: MovieSceneFloatChannel
    open var ControlChannelMap: Any
    open var EnumParameterNamesAndCurves: Array<EnumParameterNameAndCurve>
    open var IntegerParameterNamesAndCurves: Array<IntegerParameterNameAndCurve>
    open var SpaceChannels: Array<SpaceControlNameAndChannel>

    companion object {
        fun Load(ResourceName: String): MovieSceneControlRigParameterSection
        fun Find(Outer: UObject, ResourceName: String): MovieSceneControlRigParameterSection
        fun GetDefaultObject(): MovieSceneControlRigParameterSection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneControlRigParameterSection
        fun C(Other: UObject): MovieSceneControlRigParameterSection
        fun C(Other: Any): MovieSceneControlRigParameterSection
    }
}

external open class URL {
    open var Protocol: String
    open var Host: String
    open var Port: Number
    open var Valid: Number
    open var Map: String
    open var RedirectURL: String
    open var Op: Array<String>
    open var Portal: String
    open fun clone(): URL

    companion object {
        fun C(Other: UObject): URL
        fun C(Other: Any): URL
    }
}

external open class NavDataConfig : NavAgentProperties {
    open var Name: String
    open var Color: Color
    open var DefaultQueryExtent: Vector
    open var NavigationDataClass: UnrealEngineClass
    open var NavDataClass: Class
    override fun clone(): NavDataConfig

    companion object {
        fun C(Other: UObject): NavDataConfig
        fun C(Other: Any): NavDataConfig
    }
}

external object ERuntimeGenerationType {
    var Static: String /* "Static" */
    var DynamicModifiersOnly: String /* "DynamicModifiersOnly" */
    var Dynamic: String /* "Dynamic" */
    var LegacyGeneration: String /* "LegacyGeneration" */
    var ERuntimeGenerationType_MAX: String /* "ERuntimeGenerationType_MAX" */
}

external open class SupportedAreaData {
    open var AreaClassName: String
    open var AreaID: Number
    open var AreaClass: UnrealEngineClass
    open fun clone(): SupportedAreaData

    companion object {
        fun C(Other: UObject): SupportedAreaData
        fun C(Other: Any): SupportedAreaData
    }
}

external open class NavigationData(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var RenderingComp: PrimitiveComponent
    open var NavDataConfig: NavDataConfig
    open var bEnableDrawing: Boolean
    open var bForceRebuildOnLoad: Boolean
    open var bAutoDestroyWhenNoNavigation: Boolean
    open var bCanBeMainNavData: Boolean
    open var bCanSpawnOnRebuild: Boolean
    open var bRebuildAtRuntime: Boolean
    open var RuntimeGeneration: String /* "Static" | "DynamicModifiersOnly" | "Dynamic" | "LegacyGeneration" | "ERuntimeGenerationType_MAX" */
    open var ObservedPathsTickInterval: Number
    open var DataVersion: Any
    open var SupportedAreas: Array<SupportedAreaData>

    companion object {
        fun GetDefaultObject(): NavigationData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationData
        fun C(Other: UObject): NavigationData
        fun C(Other: Any): NavigationData
    }
}

external open class RecastNavMeshTileGenerationDebug {
    open var bEnabled: Boolean
    open var TileCoordinate: IntVector
    open var bHeightfieldSolidFromRasterization: Boolean
    open var bHeightfieldSolidPostRadiusFiltering: Boolean
    open var bHeightfieldSolidPostHeightFiltering: Boolean
    open var bCompactHeightfield: Boolean
    open var bCompactHeightfieldEroded: Boolean
    open var bCompactHeightfieldRegions: Boolean
    open var bCompactHeightfieldDistances: Boolean
    open var bTileCacheLayerAreas: Boolean
    open var bTileCacheLayerRegions: Boolean
    open var bTileCacheContours: Boolean
    open var bTileCachePolyMesh: Boolean
    open var bTileCacheDetailMesh: Boolean
    open fun clone(): RecastNavMeshTileGenerationDebug

    companion object {
        fun C(Other: UObject): RecastNavMeshTileGenerationDebug
        fun C(Other: Any): RecastNavMeshTileGenerationDebug
    }
}

external object ERecastPartitioning {
    var Monotone: String /* "Monotone" */
    var Watershed: String /* "Watershed" */
    var ChunkyMonotone: String /* "ChunkyMonotone" */
    var ERecastPartitioning_MAX: String /* "ERecastPartitioning_MAX" */
}

external open class NavArea : NavAreaBase {
    constructor()
    constructor(Outer: UObject)
    open var DefaultCost: Number
    open var FixedAreaEnteringCost: Number
    open var DrawColor: Color
    open var SupportedAgents: NavAgentSelector
    open var bSupportsAgent0: Boolean
    open var bSupportsAgent1: Boolean
    open var bSupportsAgent2: Boolean
    open var bSupportsAgent3: Boolean
    open var bSupportsAgent4: Boolean
    open var bSupportsAgent5: Boolean
    open var bSupportsAgent6: Boolean
    open var bSupportsAgent7: Boolean
    open var bSupportsAgent8: Boolean
    open var bSupportsAgent9: Boolean
    open var bSupportsAgent10: Boolean
    open var bSupportsAgent11: Boolean
    open var bSupportsAgent12: Boolean
    open var bSupportsAgent13: Boolean
    open var bSupportsAgent14: Boolean
    open var bSupportsAgent15: Boolean

    companion object {
        fun Load(ResourceName: String): NavArea
        fun Find(Outer: UObject, ResourceName: String): NavArea
        fun GetDefaultObject(): NavArea
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavArea
        fun C(Other: UObject): NavArea
        fun C(Other: Any): NavArea
    }
}

external open class RecastNavMesh(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : NavigationData {
    open var bDrawTriangleEdges: Boolean
    open var bDrawPolyEdges: Boolean
    open var bDrawFilledPolys: Boolean
    open var bDrawNavMeshEdges: Boolean
    open var bDrawTileBounds: Boolean
    open var bDrawPathCollidingGeometry: Boolean
    open var bDrawTileLabels: Boolean
    open var bDrawPolygonLabels: Boolean
    open var bDrawDefaultPolygonCost: Boolean
    open var bDrawPolygonFlags: Boolean
    open var bDrawLabelsOnPathNodes: Boolean
    open var bDrawNavLinks: Boolean
    open var bDrawFailedNavLinks: Boolean
    open var bDrawClusters: Boolean
    open var bDrawOctree: Boolean
    open var bDrawOctreeDetails: Boolean
    open var bDrawMarkedForbiddenPolys: Boolean
    open var bDistinctlyDrawTilesBeingBuilt: Boolean
    open var DrawOffset: Number
    open var TileGenerationDebug: RecastNavMeshTileGenerationDebug
    open var bFixedTilePoolSize: Boolean
    open var TilePoolSize: Number
    open var TileSizeUU: Number
    open var CellSize: Number
    open var CellHeight: Number
    open var AgentRadius: Number
    open var AgentHeight: Number
    open var AgentMaxSlope: Number
    open var AgentMaxStepHeight: Number
    open var MinRegionArea: Number
    open var MergeRegionSize: Number
    open var MaxSimplificationError: Number
    open var MaxSimultaneousTileGenerationJobsCount: Number
    open var TileNumberHardLimit: Number
    open var PolyRefTileBits: Number
    open var PolyRefNavPolyBits: Number
    open var PolyRefSaltBits: Number
    open var NavMeshOriginOffset: Vector
    open var DefaultDrawDistance: Number
    open var DefaultMaxSearchNodes: Number
    open var DefaultMaxHierarchicalSearchNodes: Number
    open var RegionPartitioning: String /* "Monotone" | "Watershed" | "ChunkyMonotone" | "ERecastPartitioning_MAX" */
    open var LayerPartitioning: String /* "Monotone" | "Watershed" | "ChunkyMonotone" | "ERecastPartitioning_MAX" */
    open var RegionChunkSplits: Number
    open var LayerChunkSplits: Number
    open var bSortNavigationAreasByCost: Boolean
    open var bIsWorldPartitioned: Boolean
    open var bPerformVoxelFiltering: Boolean
    open var bMarkLowHeightAreas: Boolean
    open var bUseExtraTopCellWhenMarkingAreas: Boolean
    open var bFilterLowSpanSequences: Boolean
    open var bFilterLowSpanFromTileCache: Boolean
    open var bDoFullyAsyncNavDataGathering: Boolean
    open var bUseBetterOffsetsFromCorners: Boolean
    open var bStoreEmptyTileLayers: Boolean
    open var bUseVirtualFilters: Boolean
    open var bUseVirtualGeometryFilteringAndDirtying: Boolean
    open var bAllowNavLinkAsPathEnd: Boolean
    open var bUseVoxelCache: Boolean
    open var TileSetUpdateInterval: Number
    open var HeuristicScale: Number
    open var VerticalDeviationFromGroundCompensation: Number
    open fun ReplaceAreaInTileBounds(Bounds: Box, OldArea: UnrealEngineClass, NewArea: UnrealEngineClass, ReplaceLinks: Boolean): Boolean

    companion object {
        fun GetDefaultObject(): RecastNavMesh
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RecastNavMesh
        fun C(Other: UObject): RecastNavMesh
        fun C(Other: Any): RecastNavMesh
    }
}

external open class TraceChannelTestBatchOptions {
    open var bLineTrace: Boolean
    open var bSphereTrace: Boolean
    open var bCapsuleTrace: Boolean
    open var bBoxTrace: Boolean
    open var bChannelTrace: Boolean
    open var bObjectsTrace: Boolean
    open var bProfileTrace: Boolean
    open fun clone(): TraceChannelTestBatchOptions

    companion object {
        fun C(Other: UObject): TraceChannelTestBatchOptions
        fun C(Other: Any): TraceChannelTestBatchOptions
    }
}

external object EDrawDebugTrace {
    var None: String /* "None" */
    var ForOneFrame: String /* "ForOneFrame" */
    var ForDuration: String /* "ForDuration" */
    var Persistent: String /* "Persistent" */
    var EDrawDebugTrace_MAX: String /* "EDrawDebugTrace_MAX" */
}

external open class TraceQueryTestNames {
    open var ComponentName: String
    open var PhysicalMaterialName: String
    open var ActorName: String
    open fun clone(): TraceQueryTestNames

    companion object {
        fun C(Other: UObject): TraceQueryTestNames
        fun C(Other: Any): TraceQueryTestNames
    }
}

external open class TraceQueryTestResultsInnerMost {
    open var SingleHit: HitResult
    open var SingleNames: TraceQueryTestNames
    open var bSingleResult: Boolean
    open var MultiHits: Array<HitResult>
    open var MultiNames: Array<TraceQueryTestNames>
    open var bMultiResult: Boolean
    open fun clone(): TraceQueryTestResultsInnerMost

    companion object {
        fun C(Other: UObject): TraceQueryTestResultsInnerMost
        fun C(Other: Any): TraceQueryTestResultsInnerMost
    }
}

external open class TraceQueryTestResultsInner {
    open var LineResults: TraceQueryTestResultsInnerMost
    open var SphereResults: TraceQueryTestResultsInnerMost
    open var CapsuleResults: TraceQueryTestResultsInnerMost
    open var BoxResults: TraceQueryTestResultsInnerMost
    open fun clone(): TraceQueryTestResultsInner

    companion object {
        fun C(Other: UObject): TraceQueryTestResultsInner
        fun C(Other: Any): TraceQueryTestResultsInner
    }
}

external open class TraceQueryTestResults : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChannelResults: TraceQueryTestResultsInner
    open var ObjectResults: TraceQueryTestResultsInner
    open var ProfileResults: TraceQueryTestResultsInner
    open var BatchOptions: TraceChannelTestBatchOptions

    companion object {
        fun Load(ResourceName: String): TraceQueryTestResults
        fun Find(Outer: UObject, ResourceName: String): TraceQueryTestResults
        fun GetDefaultObject(): TraceQueryTestResults
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TraceQueryTestResults
        fun C(Other: UObject): TraceQueryTestResults
        fun C(Other: Any): TraceQueryTestResults
    }
}

external open class AutomationWaitForLoadingOptions {
    open var WaitForReplicationToSettle: Boolean
    open fun clone(): AutomationWaitForLoadingOptions

    companion object {
        fun C(Other: UObject): AutomationWaitForLoadingOptions
        fun C(Other: Any): AutomationWaitForLoadingOptions
    }
}

external open class AutomationViewSettings : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var AntiAliasing: Boolean
    open var MotionBlur: Boolean
    open var TemporalAA: Boolean
    open var ScreenSpaceReflections: Boolean
    open var ScreenSpaceAO: Boolean
    open var DistanceFieldAO: Boolean
    open var ContactShadows: Boolean
    open var EyeAdaptation: Boolean
    open var Bloom: Boolean

    companion object {
        fun Load(ResourceName: String): AutomationViewSettings
        fun Find(Outer: UObject, ResourceName: String): AutomationViewSettings
        fun GetDefaultObject(): AutomationViewSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AutomationViewSettings
        fun C(Other: UObject): AutomationViewSettings
        fun C(Other: Any): AutomationViewSettings
    }
}

external object EComparisonTolerance {
    var Zero: String /* "Zero" */
    var Low: String /* "Low" */
    var Medium: String /* "Medium" */
    var High: String /* "High" */
    var Custom: String /* "Custom" */
    var EComparisonTolerance_MAX: String /* "EComparisonTolerance_MAX" */
}

external open class ComparisonToleranceAmount {
    open var red: Number
    open var green: Number
    open var blue: Number
    open var Alpha: Number
    open var MinBrightness: Number
    open var MaxBrightness: Number
    open fun clone(): ComparisonToleranceAmount

    companion object {
        fun C(Other: UObject): ComparisonToleranceAmount
        fun C(Other: Any): ComparisonToleranceAmount
    }
}

external open class AutomationScreenshotOptions {
    open var Resolution: Vector2D
    open var Delay: Number
    open var bOverride_OverrideTimeTo: Boolean
    open var OverrideTimeTo: Number
    open var bDisableNoisyRenderingFeatures: Boolean
    open var bDisableTonemapping: Boolean
    open var ViewSettings: AutomationViewSettings
    open var VisualizeBuffer: String
    open var Tolerance: String /* "Zero" | "Low" | "Medium" | "High" | "Custom" | "EComparisonTolerance_MAX" */
    open var ToleranceAmount: ComparisonToleranceAmount
    open var MaximumLocalError: Number
    open var MaximumGlobalError: Number
    open var bIgnoreAntiAliasing: Boolean
    open var bIgnoreColors: Boolean
    open fun clone(): AutomationScreenshotOptions

    companion object {
        fun C(Other: UObject): AutomationScreenshotOptions
        fun C(Other: Any): AutomationScreenshotOptions
        fun GetDefaultScreenshotOptionsForGameplay(Tolerance: String /* "Zero" | "Low" | "Medium" | "High" | "Custom" | "EComparisonTolerance_MAX" */, Delay: Number): AutomationScreenshotOptions
        fun GetDefaultScreenshotOptionsForRendering(Tolerance: String /* "Zero" | "Low" | "Medium" | "High" | "Custom" | "EComparisonTolerance_MAX" */, Delay: Number): AutomationScreenshotOptions
    }
}

external open class NiagaraTypeDefinitionHandle {
    open var RegisteredTypeIndex: Number
    open fun clone(): NiagaraTypeDefinitionHandle

    companion object {
        fun C(Other: UObject): NiagaraTypeDefinitionHandle
        fun C(Other: Any): NiagaraTypeDefinitionHandle
    }
}

external open class NiagaraTypeDefinition {
    open var ClassStructOrEnum: UObject
    open var UnderlyingType: Any
    open var Flags: Number
    open var struct: Struct
    open var Enum: Enum
    open fun clone(): NiagaraTypeDefinition

    companion object {
        fun C(Other: UObject): NiagaraTypeDefinition
        fun C(Other: Any): NiagaraTypeDefinition
    }
}

external open class NiagaraVariableBase {
    open var Name: String
    open var TypeDefHandle: NiagaraTypeDefinitionHandle
    open var TypeDef: NiagaraTypeDefinition
    open fun clone(): NiagaraVariableBase

    companion object {
        fun C(Other: UObject): NiagaraVariableBase
        fun C(Other: Any): NiagaraVariableBase
    }
}

external open class NiagaraVariable : NiagaraVariableBase {
    open var VarData: Array<Number>
    override fun clone(): NiagaraVariable

    companion object {
        fun C(Other: UObject): NiagaraVariable
        fun C(Other: Any): NiagaraVariable
    }
}

external object ENiagaraStructConversionType {
    var CopyOnly: String /* "CopyOnly" */
    var DoubleToFloat: String /* "DoubleToFloat" */
    var Vector2: String /* "Vector2" */
    var Vector3: String /* "Vector3" */
    var Vector4: String /* "Vector4" */
    var Quat: String /* "Quat" */
    var ENiagaraStructConversionType_MAX: String /* "ENiagaraStructConversionType_MAX" */
}

external open class NiagaraStructConversionStep {
    open var SourceBytes: Number
    open var SourceOffset: Number
    open var SimulationBytes: Number
    open var SimulationOffset: Number
    open var ConversionType: String /* "CopyOnly" | "DoubleToFloat" | "Vector2" | "Vector3" | "Vector4" | "Quat" | "ENiagaraStructConversionType_MAX" */
    open fun clone(): NiagaraStructConversionStep

    companion object {
        fun C(Other: UObject): NiagaraStructConversionStep
        fun C(Other: Any): NiagaraStructConversionStep
    }
}

external open class NiagaraLwcStructConverter {
    open var ConversionSteps: Array<NiagaraStructConversionStep>
    open fun clone(): NiagaraLwcStructConverter

    companion object {
        fun C(Other: UObject): NiagaraLwcStructConverter
        fun C(Other: Any): NiagaraLwcStructConverter
    }
}

external open class NiagaraVariableWithOffset : NiagaraVariableBase {
    open var Offset: Number
    open var StructConverter: NiagaraLwcStructConverter
    override fun clone(): NiagaraVariableWithOffset

    companion object {
        fun C(Other: UObject): NiagaraVariableWithOffset
        fun C(Other: Any): NiagaraVariableWithOffset
    }
}

external open class NiagaraMergeable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MergeId: Guid

    companion object {
        fun Load(ResourceName: String): NiagaraMergeable
        fun Find(Outer: UObject, ResourceName: String): NiagaraMergeable
        fun GetDefaultObject(): NiagaraMergeable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraMergeable
        fun C(Other: UObject): NiagaraMergeable
        fun C(Other: Any): NiagaraMergeable
    }
}

external open class NiagaraDataInterfaceBase : NiagaraMergeable {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraDataInterfaceBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraDataInterfaceBase
        fun GetDefaultObject(): NiagaraDataInterfaceBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraDataInterfaceBase
        fun C(Other: UObject): NiagaraDataInterfaceBase
        fun C(Other: Any): NiagaraDataInterfaceBase
    }
}

external open class NiagaraDataInterface : NiagaraDataInterfaceBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraDataInterface
        fun Find(Outer: UObject, ResourceName: String): NiagaraDataInterface
        fun GetDefaultObject(): NiagaraDataInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraDataInterface
        fun C(Other: UObject): NiagaraDataInterface
        fun C(Other: Any): NiagaraDataInterface
    }
}

external open class NiagaraPositionSource {
    open var Name: String
    open var Value: Vector
    open fun clone(): NiagaraPositionSource

    companion object {
        fun C(Other: UObject): NiagaraPositionSource
        fun C(Other: Any): NiagaraPositionSource
    }
}

external open class NiagaraParameterStore {
    open var Owner: UObject
    open var ParameterOffsets: Any
    open var SortedParameterOffsets: Array<NiagaraVariableWithOffset>
    open var ParameterData: Array<Number>
    open var DataInterfaces: Array<NiagaraDataInterface>
    open var UObjects: Array<UObject>
    open var OriginalPositionData: Array<NiagaraPositionSource>
    open var DebugName: String
    open var ParameterGuidMapping: Any
    open fun clone(): NiagaraParameterStore

    companion object {
        fun C(Other: UObject): NiagaraParameterStore
        fun C(Other: Any): NiagaraParameterStore
    }
}

external open class NiagaraParameterCollectionInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Collection: NiagaraParameterCollection
    open var OverridenParameters: Array<NiagaraVariable>
    open var ParameterStorage: NiagaraParameterStore
    open fun SetVectorParameter(InVariableName: String, InValue: Vector)
    open fun SetVector4Parameter(InVariableName: String, InValue: Vector4)
    open fun SetVector2DParameter(InVariableName: String, InValue: Vector2D)
    open fun SetQuaternionParameter(InVariableName: String, InValue: Quat)
    open fun SetIntParameter(InVariableName: String, InValue: Number)
    open fun SetFloatParameter(InVariableName: String, InValue: Number)
    open fun SetColorParameter(InVariableName: String, InValue: LinearColor)
    open fun SetBoolParameter(InVariableName: String, InValue: Boolean)
    open fun GetVectorParameter(InVariableName: String): Vector
    open fun GetVector4Parameter(InVariableName: String): Vector4
    open fun GetVector2DParameter(InVariableName: String): Vector2D
    open fun GetQuaternionParameter(InVariableName: String): Quat
    open fun GetIntParameter(InVariableName: String): Number
    open fun GetFloatParameter(InVariableName: String): Number
    open fun GetColorParameter(InVariableName: String): LinearColor
    open fun GetBoolParameter(InVariableName: String): Boolean

    companion object {
        fun Load(ResourceName: String): NiagaraParameterCollectionInstance
        fun Find(Outer: UObject, ResourceName: String): NiagaraParameterCollectionInstance
        fun GetDefaultObject(): NiagaraParameterCollectionInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraParameterCollectionInstance
        fun C(Other: UObject): NiagaraParameterCollectionInstance
        fun C(Other: Any): NiagaraParameterCollectionInstance
    }
}

external open class NiagaraParameterCollection : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Namespace: String
    open var Parameters: Array<NiagaraVariable>
    open var SourceMaterialCollection: MaterialParameterCollection
    open var DefaultInstance: NiagaraParameterCollectionInstance
    open var CompileId: Guid

    companion object {
        fun Load(ResourceName: String): NiagaraParameterCollection
        fun Find(Outer: UObject, ResourceName: String): NiagaraParameterCollection
        fun GetDefaultObject(): NiagaraParameterCollection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraParameterCollection
        fun C(Other: UObject): NiagaraParameterCollection
        fun C(Other: Any): NiagaraParameterCollection
    }
}

external object ENiagaraScriptLibraryVisibility {
    var Invalid: String /* "Invalid" */
    var Unexposed: String /* "Unexposed" */
    var Library: String /* "Library" */
    var Hidden: String /* "Hidden" */
    var ENiagaraScriptLibraryVisibility_MAX: String /* "ENiagaraScriptLibraryVisibility_MAX" */
}

external object ENiagaraScriptTemplateSpecification {
    var None: String /* "None" */
    var Template: String /* "Template" */
    var Behavior: String /* "Behavior" */
    var ENiagaraScriptTemplateSpecification_MAX: String /* "ENiagaraScriptTemplateSpecification_MAX" */
}

external open class NiagaraScriptBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraScriptBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraScriptBase
        fun GetDefaultObject(): NiagaraScriptBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraScriptBase
        fun C(Other: UObject): NiagaraScriptBase
        fun C(Other: Any): NiagaraScriptBase
    }
}

external object ENiagaraScriptUsage {
    var Function: String /* "Function" */
    var Module: String /* "Module" */
    var DynamicInput: String /* "DynamicInput" */
    var ParticleSpawnScript: String /* "ParticleSpawnScript" */
    var ParticleSpawnScriptInterpolated: String /* "ParticleSpawnScriptInterpolated" */
    var ParticleUpdateScript: String /* "ParticleUpdateScript" */
    var ParticleEventScript: String /* "ParticleEventScript" */
    var ParticleSimulationStageScript: String /* "ParticleSimulationStageScript" */
    var ParticleGPUComputeScript: String /* "ParticleGPUComputeScript" */
    var EmitterSpawnScript: String /* "EmitterSpawnScript" */
    var EmitterUpdateScript: String /* "EmitterUpdateScript" */
    var SystemSpawnScript: String /* "SystemSpawnScript" */
    var SystemUpdateScript: String /* "SystemUpdateScript" */
    var ENiagaraScriptUsage_MAX: String /* "ENiagaraScriptUsage_MAX" */
}

external open class NiagaraAssetVersion {
    open var MajorVersion: Number
    open var MinorVersion: Number
    open var VersionGuid: Guid
    open var bIsVisibleInVersionSelector: Boolean
    open fun clone(): NiagaraAssetVersion

    companion object {
        fun C(Other: UObject): NiagaraAssetVersion
        fun C(Other: Any): NiagaraAssetVersion
    }
}

external object ENiagaraModuleDependencyType {
    var PreDependency: String /* "PreDependency" */
    var PostDependency: String /* "PostDependency" */
    var ENiagaraModuleDependencyType_MAX: String /* "ENiagaraModuleDependencyType_MAX" */
}

external object ENiagaraModuleDependencyScriptConstraint {
    var SameScript: String /* "SameScript" */
    var AllScripts: String /* "AllScripts" */
    var ENiagaraModuleDependencyScriptConstraint_MAX: String /* "ENiagaraModuleDependencyScriptConstraint_MAX" */
}

external open class NiagaraModuleDependency {
    open var ID: String
    open var Type: String /* "PreDependency" | "PostDependency" | "ENiagaraModuleDependencyType_MAX" */
    open var ScriptConstraint: String /* "SameScript" | "AllScripts" | "ENiagaraModuleDependencyScriptConstraint_MAX" */
    open var Description: String
    open fun clone(): NiagaraModuleDependency

    companion object {
        fun C(Other: UObject): NiagaraModuleDependency
        fun C(Other: Any): NiagaraModuleDependency
    }
}

external open class NiagaraConvertInPlaceUtilityBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraConvertInPlaceUtilityBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraConvertInPlaceUtilityBase
        fun GetDefaultObject(): NiagaraConvertInPlaceUtilityBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraConvertInPlaceUtilityBase
        fun C(Other: UObject): NiagaraConvertInPlaceUtilityBase
        fun C(Other: Any): NiagaraConvertInPlaceUtilityBase
    }
}

external object ENiagaraNumericOutputTypeSelectionMode {
    var None: String /* "None" */
    var Largest: String /* "Largest" */
    var Smallest: String /* "Smallest" */
    var Scalar: String /* "Scalar" */
    var Custom: String /* "Custom" */
    var ENiagaraNumericOutputTypeSelectionMode_MAX: String /* "ENiagaraNumericOutputTypeSelectionMode_MAX" */
}

external open class NiagaraStackSection {
    open var SectionIdentifier: String
    open var SectionDisplayName: String
    open var Categories: Array<String>
    open var bEnabled: Boolean
    open fun clone(): NiagaraStackSection

    companion object {
        fun C(Other: UObject): NiagaraStackSection
        fun C(Other: Any): NiagaraStackSection
    }
}

external open class NiagaraCompileHash {
    open var DataHash: Array<Number>
    open fun clone(): NiagaraCompileHash

    companion object {
        fun C(Other: UObject): NiagaraCompileHash
        fun C(Other: Any): NiagaraCompileHash
    }
}

external open class NiagaraVMExecutableDataId {
    open var CompilerVersionID: Guid
    open var ScriptUsageType: String /* "Function" | "Module" | "DynamicInput" | "ParticleSpawnScript" | "ParticleSpawnScriptInterpolated" | "ParticleUpdateScript" | "ParticleEventScript" | "ParticleSimulationStageScript" | "ParticleGPUComputeScript" | "EmitterSpawnScript" | "EmitterUpdateScript" | "SystemSpawnScript" | "SystemUpdateScript" | "ENiagaraScriptUsage_MAX" */
    open var ScriptUsageTypeID: Guid
    open var AdditionalDefines: Array<String>
    open var AdditionalVariables: Array<NiagaraVariableBase>
    open var bUsesRapidIterationParams: Boolean
    open var bDisableDebugSwitches: Boolean
    open var bInterpolatedSpawn: Boolean
    open var bRequiresPersistentIDs: Boolean
    open var BaseScriptID: Guid
    open var BaseScriptCompileHash: NiagaraCompileHash
    open var ReferencedCompileHashes: Array<NiagaraCompileHash>
    open var ScriptVersionID: Guid
    open fun clone(): NiagaraVMExecutableDataId

    companion object {
        fun C(Other: UObject): NiagaraVMExecutableDataId
        fun C(Other: Any): NiagaraVMExecutableDataId
    }
}

external object ENiagaraPythonUpdateScriptReference {
    var None: String /* "None" */
    var ScriptAsset: String /* "ScriptAsset" */
    var DirectTextEntry: String /* "DirectTextEntry" */
    var ENiagaraPythonUpdateScriptReference_MAX: String /* "ENiagaraPythonUpdateScriptReference_MAX" */
}

external open class FilePath {
    open var FilePath: String
    open fun clone(): FilePath

    companion object {
        fun C(Other: UObject): FilePath
        fun C(Other: Any): FilePath
    }
}

external open class NiagaraParameterDefinitionsBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UniqueId: Guid

    companion object {
        fun Load(ResourceName: String): NiagaraParameterDefinitionsBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraParameterDefinitionsBase
        fun GetDefaultObject(): NiagaraParameterDefinitionsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraParameterDefinitionsBase
        fun C(Other: UObject): NiagaraParameterDefinitionsBase
        fun C(Other: Any): NiagaraParameterDefinitionsBase
    }
}

external open class ParameterDefinitionsSubscription {
    open var Definitions: NiagaraParameterDefinitionsBase
    open var DefinitionsId: Guid
    open var CachedChangeIdHash: Number
    open fun clone(): ParameterDefinitionsSubscription

    companion object {
        fun C(Other: UObject): ParameterDefinitionsSubscription
        fun C(Other: Any): ParameterDefinitionsSubscription
    }
}

external open class NiagaraScriptSourceBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraScriptSourceBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraScriptSourceBase
        fun GetDefaultObject(): NiagaraScriptSourceBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraScriptSourceBase
        fun C(Other: UObject): NiagaraScriptSourceBase
        fun C(Other: Any): NiagaraScriptSourceBase
    }
}

external open class VersionedNiagaraScriptData {
    open var Version: NiagaraAssetVersion
    open var VersionChangeDescription: String
    open var ModuleUsageBitmask: Number
    open var Category: String
    open var bSuggested: Boolean
    open var ProvidedDependencies: Array<String>
    open var RequiredDependencies: Array<NiagaraModuleDependency>
    open var bDeprecated: Boolean
    open var DeprecationMessage: String
    open var DeprecationRecommendation: NiagaraScript
    open var ConversionUtility: UnrealEngineClass
    open var bExperimental: Boolean
    open var ExperimentalMessage: String
    open var NoteMessage: String
    open var LibraryVisibility: String /* "Invalid" | "Unexposed" | "Library" | "Hidden" | "ENiagaraScriptLibraryVisibility_MAX" */
    open var NumericOutputTypeSelectionMode: String /* "None" | "Largest" | "Smallest" | "Scalar" | "Custom" | "ENiagaraNumericOutputTypeSelectionMode_MAX" */
    open var Description: String
    open var Keywords: String
    open var CollapsedViewFormat: String
    open var bCanBeUsedForTypeConversions: Boolean
    open var ScriptMetaData: Any
    open var InputSections: Array<NiagaraStackSection>
    open var LastGeneratedVMId: NiagaraVMExecutableDataId
    open var UpdateScriptExecution: String /* "None" | "ScriptAsset" | "DirectTextEntry" | "ENiagaraPythonUpdateScriptReference_MAX" */
    open var PythonUpdateScript: String
    open var ScriptAsset: FilePath
    open var ParameterDefinitionsSubscriptions: Array<ParameterDefinitionsSubscription>
    open var Source: NiagaraScriptSourceBase
    open fun clone(): VersionedNiagaraScriptData

    companion object {
        fun C(Other: UObject): VersionedNiagaraScriptData
        fun C(Other: Any): VersionedNiagaraScriptData
    }
}

external open class NiagaraScriptExecutionPaddingInfo {
    open var SrcOffset: Any
    open var DestOffset: Any
    open var SrcSize: Any
    open var DestSize: Any
    open fun clone(): NiagaraScriptExecutionPaddingInfo

    companion object {
        fun C(Other: UObject): NiagaraScriptExecutionPaddingInfo
        fun C(Other: Any): NiagaraScriptExecutionPaddingInfo
    }
}

external open class NiagaraScriptExecutionParameterStore : NiagaraParameterStore {
    open var ParameterSize: Number
    open var PaddedParameterSize: Any
    open var PaddingInfo: Array<NiagaraScriptExecutionPaddingInfo>
    open var bInitialized: Boolean
    override fun clone(): NiagaraScriptExecutionParameterStore

    companion object {
        fun C(Other: UObject): NiagaraScriptExecutionParameterStore
        fun C(Other: Any): NiagaraScriptExecutionParameterStore
    }
}

external open class NiagaraBoundParameter {
    open var Parameter: NiagaraVariable
    open var SrcOffset: Number
    open var DestOffset: Number
    open fun clone(): NiagaraBoundParameter

    companion object {
        fun C(Other: UObject): NiagaraBoundParameter
        fun C(Other: Any): NiagaraBoundParameter
    }
}

external open class NiagaraVMExecutableByteCode {
    open var Data: Array<Number>
    open var UncompressedSize: Number
    open fun clone(): NiagaraVMExecutableByteCode

    companion object {
        fun C(Other: UObject): NiagaraVMExecutableByteCode
        fun C(Other: Any): NiagaraVMExecutableByteCode
    }
}

external open class NiagaraParameters {
    open var Parameters: Array<NiagaraVariable>
    open fun clone(): NiagaraParameters

    companion object {
        fun C(Other: UObject): NiagaraParameters
        fun C(Other: Any): NiagaraParameters
    }
}

external open class NiagaraCompileDependency {
    open var LinkerErrorMessage: String
    open var NodeGuid: Guid
    open var PinGuid: Guid
    open var StackGuids: Array<Guid>
    open var DependentVariable: NiagaraVariableBase
    open var bDependentVariableFromCustomIterationNamespace: Boolean
    open fun clone(): NiagaraCompileDependency

    companion object {
        fun C(Other: UObject): NiagaraCompileDependency
        fun C(Other: Any): NiagaraCompileDependency
    }
}

external open class NiagaraCompilerTag {
    open var Variable: NiagaraVariable
    open var StringValue: String
    open fun clone(): NiagaraCompilerTag

    companion object {
        fun C(Other: UObject): NiagaraCompilerTag
        fun C(Other: Any): NiagaraCompilerTag
    }
}

external open class NiagaraScriptDataUsageInfo {
    open var bReadsAttributeData: Boolean
    open fun clone(): NiagaraScriptDataUsageInfo

    companion object {
        fun C(Other: UObject): NiagaraScriptDataUsageInfo
        fun C(Other: Any): NiagaraScriptDataUsageInfo
    }
}

external open class NiagaraFunctionSignature {
    open var Name: String
    open var Inputs: Array<NiagaraVariable>
    open var Outputs: Array<NiagaraVariable>
    open var OwnerName: String
    open var bRequiresContext: Boolean
    open var bRequiresExecPin: Boolean
    open var bMemberFunction: Boolean
    open var bExperimental: Boolean
    open var ExperimentalMessage: String
    open var FunctionVersion: Any
    open var bSupportsCPU: Boolean
    open var bSupportsGPU: Boolean
    open var bWriteFunction: Boolean
    open var bSoftDeprecatedFunction: Boolean
    open var bIsCompileTagGenerator: Boolean
    open var bHidden: Boolean
    open var ModuleUsageBitmask: Number
    open var ContextStageIndex: Number
    open var FunctionSpecifiers: Any
    open var Description: String
    open var InputDescriptions: Any
    open var OutputDescriptions: Any
    open fun clone(): NiagaraFunctionSignature

    companion object {
        fun C(Other: UObject): NiagaraFunctionSignature
        fun C(Other: Any): NiagaraFunctionSignature
    }
}

external open class NiagaraScriptDataInterfaceCompileInfo {
    open var Name: String
    open var UserPtrIdx: Number
    open var Type: NiagaraTypeDefinition
    open var RegisteredFunctions: Array<NiagaraFunctionSignature>
    open var RegisteredParameterMapRead: String
    open var RegisteredParameterMapWrite: String
    open var bIsPlaceholder: Boolean
    open fun clone(): NiagaraScriptDataInterfaceCompileInfo

    companion object {
        fun C(Other: UObject): NiagaraScriptDataInterfaceCompileInfo
        fun C(Other: Any): NiagaraScriptDataInterfaceCompileInfo
    }
}

external open class VMFunctionSpecifier {
    open var Key: String
    open var Value: String
    open fun clone(): VMFunctionSpecifier

    companion object {
        fun C(Other: UObject): VMFunctionSpecifier
        fun C(Other: Any): VMFunctionSpecifier
    }
}

external open class VMExternalFunctionBindingInfo {
    open var Name: String
    open var OwnerName: String
    open var InputParamLocations: Array<Boolean>
    open var NumOutputs: Number
    open var FunctionSpecifiers: Array<VMFunctionSpecifier>
    open var Specifiers: Any
    open fun clone(): VMExternalFunctionBindingInfo

    companion object {
        fun C(Other: UObject): VMExternalFunctionBindingInfo
        fun C(Other: Any): VMExternalFunctionBindingInfo
    }
}

external object ENiagaraDataSetType {
    var ParticleData: String /* "ParticleData" */
    var Shared: String /* "Shared" */
    var Event: String /* "Event" */
    var ENiagaraDataSetType_MAX: String /* "ENiagaraDataSetType_MAX" */
}

external open class NiagaraDataSetID {
    open var Name: String
    open var Type: String /* "ParticleData" | "Shared" | "Event" | "ENiagaraDataSetType_MAX" */
    open fun clone(): NiagaraDataSetID

    companion object {
        fun C(Other: UObject): NiagaraDataSetID
        fun C(Other: Any): NiagaraDataSetID
    }
}

external open class NiagaraDataSetProperties {
    open var ID: NiagaraDataSetID
    open var Variables: Array<NiagaraVariable>
    open fun clone(): NiagaraDataSetProperties

    companion object {
        fun C(Other: UObject): NiagaraDataSetProperties
        fun C(Other: Any): NiagaraDataSetProperties
    }
}

external open class NiagaraStatScope {
    open var FullName: String
    open var FriendlyName: String
    open fun clone(): NiagaraStatScope

    companion object {
        fun C(Other: UObject): NiagaraStatScope
        fun C(Other: Any): NiagaraStatScope
    }
}

external open class NiagaraDataInterfaceGeneratedFunction {
    open fun clone(): NiagaraDataInterfaceGeneratedFunction

    companion object {
        fun C(Other: UObject): NiagaraDataInterfaceGeneratedFunction
        fun C(Other: Any): NiagaraDataInterfaceGeneratedFunction
    }
}

external open class NiagaraDataInterfaceGPUParamInfo {
    open var DataInterfaceHLSLSymbol: String
    open var DIClassName: String
    open var GeneratedFunctions: Array<NiagaraDataInterfaceGeneratedFunction>
    open fun clone(): NiagaraDataInterfaceGPUParamInfo

    companion object {
        fun C(Other: UObject): NiagaraDataInterfaceGPUParamInfo
        fun C(Other: Any): NiagaraDataInterfaceGPUParamInfo
    }
}

external object ENiagaraScriptCompileStatus {
    var NCS_Unknown: String /* "NCS_Unknown" */
    var NCS_Dirty: String /* "NCS_Dirty" */
    var NCS_Error: String /* "NCS_Error" */
    var NCS_UpToDate: String /* "NCS_UpToDate" */
    var NCS_BeingCreated: String /* "NCS_BeingCreated" */
    var NCS_UpToDateWithWarnings: String /* "NCS_UpToDateWithWarnings" */
    var NCS_ComputeUpToDateWithWarnings: String /* "NCS_ComputeUpToDateWithWarnings" */
    var NCS_MAX: String /* "NCS_MAX" */
}

external object ENiagaraSimStageExecuteBehavior {
    var Always: String /* "Always" */
    var OnSimulationReset: String /* "OnSimulationReset" */
    var NotOnSimulationReset: String /* "NotOnSimulationReset" */
    var ENiagaraSimStageExecuteBehavior_MAX: String /* "ENiagaraSimStageExecuteBehavior_MAX" */
}

external object ENiagaraGpuDispatchType {
    var OneD: String /* "OneD" */
    var TwoD: String /* "TwoD" */
    var ThreeD: String /* "ThreeD" */
    var Custom: String /* "Custom" */
    var ENiagaraGpuDispatchType_MAX: String /* "ENiagaraGpuDispatchType_MAX" */
}

external open class SimulationStageMetaData {
    open var SimulationStageName: String
    open var EnabledBinding: String
    open var IterationSource: String
    open var ExecuteBehavior: String /* "Always" | "OnSimulationReset" | "NotOnSimulationReset" | "ENiagaraSimStageExecuteBehavior_MAX" */
    open var bWritesParticles: Boolean
    open var bPartialParticleUpdate: Boolean
    open var bParticleIterationStateEnabled: Boolean
    open var ParticleIterationStateBinding: String
    open var ParticleIterationStateRange: IntPoint
    open var OutputDestinations: Array<String>
    open var NumIterations: Number
    open var NumIterationsBinding: String
    open var GpuDispatchType: String /* "OneD" | "TwoD" | "ThreeD" | "Custom" | "ENiagaraGpuDispatchType_MAX" */
    open var GpuDispatchNumThreads: IntVector
    open fun clone(): SimulationStageMetaData

    companion object {
        fun C(Other: UObject): SimulationStageMetaData
        fun C(Other: Any): SimulationStageMetaData
    }
}

external object FNiagaraCompileEventSeverity {
    var Log: String /* "Log" */
    var Display: String /* "Display" */
    var Warning: String /* "Warning" */
    var Error: String /* "Error" */
    var FNiagaraCompileEventSeverity_MAX: String /* "FNiagaraCompileEventSeverity_MAX" */
}

external object FNiagaraCompileEventSource {
    var Unset: String /* "Unset" */
    var ScriptDependency: String /* "ScriptDependency" */
    var FNiagaraCompileEventSource_MAX: String /* "FNiagaraCompileEventSource_MAX" */
}

external open class NiagaraCompileEvent {
    open var Severity: String /* "Log" | "Display" | "Warning" | "Error" | "FNiagaraCompileEventSeverity_MAX" */
    open var Message: String
    open var ShortDescription: String
    open var bDismissable: Boolean
    open var NodeGuid: Guid
    open var PinGuid: Guid
    open var StackGuids: Array<Guid>
    open var Source: String /* "Unset" | "ScriptDependency" | "FNiagaraCompileEventSource_MAX" */
    open fun clone(): NiagaraCompileEvent

    companion object {
        fun C(Other: UObject): NiagaraCompileEvent
        fun C(Other: Any): NiagaraCompileEvent
    }
}

external open class NiagaraVMExecutableData {
    open var ByteCode: NiagaraVMExecutableByteCode
    open var OptimizedByteCode: NiagaraVMExecutableByteCode
    open var NumTempRegisters: Number
    open var NumUserPtrs: Number
    open var Parameters: NiagaraParameters
    open var InternalParameters: NiagaraParameters
    open var ExternalDependencies: Array<NiagaraCompileDependency>
    open var CompileTags: Array<NiagaraCompilerTag>
    open var ScriptLiterals: Array<Number>
    open var Attributes: Array<NiagaraVariable>
    open var DataUsage: NiagaraScriptDataUsageInfo
    open var DataSetToParameters: Any
    open var AdditionalExternalFunctions: Array<NiagaraFunctionSignature>
    open var DataInterfaceInfo: Array<NiagaraScriptDataInterfaceCompileInfo>
    open var CalledVMExternalFunctions: Array<VMExternalFunctionBindingInfo>
    open var ReadDataSets: Array<NiagaraDataSetID>
    open var WriteDataSets: Array<NiagaraDataSetProperties>
    open var StatScopes: Array<NiagaraStatScope>
    open var LastHlslTranslation: String
    open var LastHlslTranslationGPU: String
    open var LastAssemblyTranslation: String
    open var LastOpCount: Any
    open var DIParamInfo: Array<NiagaraDataInterfaceGPUParamInfo>
    open var ParameterCollectionPaths: Array<String>
    open var LastCompileStatus: String /* "NCS_Unknown" | "NCS_Dirty" | "NCS_Error" | "NCS_UpToDate" | "NCS_BeingCreated" | "NCS_UpToDateWithWarnings" | "NCS_ComputeUpToDateWithWarnings" | "NCS_MAX" */
    open var SimulationStageMetaData: Array<SimulationStageMetaData>
    open var bReadsAttributeData: Boolean
    open var AttributesWritten: Array<NiagaraVariableBase>
    open var StaticVariablesWritten: Array<NiagaraVariable>
    open var ErrorMsg: String
    open var CompileTime: Number
    open var LastCompileEvents: Array<NiagaraCompileEvent>
    open var bReadsSignificanceIndex: Boolean
    open var bNeedsGPUContextInit: Boolean
    open fun clone(): NiagaraVMExecutableData

    companion object {
        fun C(Other: UObject): NiagaraVMExecutableData
        fun C(Other: Any): NiagaraVMExecutableData
    }
}

external open class NiagaraScriptDataInterfaceInfo {
    open var DataInterface: NiagaraDataInterface
    open var Name: String
    open var UserPtrIdx: Number
    open var Type: NiagaraTypeDefinition
    open var RegisteredParameterMapRead: String
    open var RegisteredParameterMapWrite: String
    open fun clone(): NiagaraScriptDataInterfaceInfo

    companion object {
        fun C(Other: UObject): NiagaraScriptDataInterfaceInfo
        fun C(Other: Any): NiagaraScriptDataInterfaceInfo
    }
}

external open class NiagaraScript : NiagaraScriptBase {
    constructor()
    constructor(Outer: UObject)
    open var Usage: String /* "Function" | "Module" | "DynamicInput" | "ParticleSpawnScript" | "ParticleSpawnScriptInterpolated" | "ParticleUpdateScript" | "ParticleEventScript" | "ParticleSimulationStageScript" | "ParticleGPUComputeScript" | "EmitterSpawnScript" | "EmitterUpdateScript" | "SystemSpawnScript" | "SystemUpdateScript" | "ENiagaraScriptUsage_MAX" */
    open var UsageId: Guid
    open var ExposedVersion: Guid
    open var bVersioningEnabled: Boolean
    open var VersionData: Array<VersionedNiagaraScriptData>
    open var RapidIterationParameters: NiagaraParameterStore
    open var VersionToOpenInEditor: Guid
    open var UsageIndex: Number
    open var ModuleUsageBitmask: Number
    open var Category: String
    open var ProvidedDependencies: Array<String>
    open var RequiredDependencies: Array<NiagaraModuleDependency>
    open var bDeprecated: Boolean
    open var DeprecationMessage: String
    open var DeprecationRecommendation: NiagaraScript
    open var ConversionUtility: UnrealEngineClass
    open var bExperimental: Boolean
    open var ExperimentalMessage: String
    open var NoteMessage: String
    open var bExposeToLibrary: Boolean
    open var LibraryVisibility: String /* "Invalid" | "Unexposed" | "Library" | "Hidden" | "ENiagaraScriptLibraryVisibility_MAX" */
    open var NumericOutputTypeSelectionMode: String /* "None" | "Largest" | "Smallest" | "Scalar" | "Custom" | "ENiagaraNumericOutputTypeSelectionMode_MAX" */
    open var Description: String
    open var Keywords: String
    open var CollapsedViewFormat: String
    open var ScriptMetaData: Any
    open var Source: NiagaraScriptSourceBase
    open var ScriptExecutionParamStoreCPU: NiagaraScriptExecutionParameterStore
    open var ScriptExecutionParamStoreGPU: NiagaraScriptExecutionParameterStore
    open var ScriptExecutionParamStore: NiagaraScriptExecutionParameterStore
    open var ScriptExecutionBoundParameters: Array<NiagaraBoundParameter>
    open var CachedScriptVMId: NiagaraVMExecutableDataId
    open var ActiveCompileRoots: Array<UObject>
    open var CachedScriptVM: NiagaraVMExecutableData
    open var CachedParameterCollectionReferences: Array<NiagaraParameterCollection>
    open var CachedDefaultDataInterfaces: Array<NiagaraScriptDataInterfaceInfo>
    open fun RaiseOnGPUCompilationComplete()

    companion object {
        fun Load(ResourceName: String): NiagaraScript
        fun Find(Outer: UObject, ResourceName: String): NiagaraScript
        fun GetDefaultObject(): NiagaraScript
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraScript
        fun C(Other: UObject): NiagaraScript
        fun C(Other: Any): NiagaraScript
    }
}

external object ENiagaraTickBehavior {
    var UsePrereqs: String /* "UsePrereqs" */
    var UseComponentTickGroup: String /* "UseComponentTickGroup" */
    var ForceTickFirst: String /* "ForceTickFirst" */
    var ForceTickLast: String /* "ForceTickLast" */
    var ENiagaraTickBehavior_MAX: String /* "ENiagaraTickBehavior_MAX" */
}

external open class NiagaraUserRedirectionParameterStore : NiagaraParameterStore {
    open var UserParameterRedirects: Any
    override fun clone(): NiagaraUserRedirectionParameterStore

    companion object {
        fun C(Other: UObject): NiagaraUserRedirectionParameterStore
        fun C(Other: Any): NiagaraUserRedirectionParameterStore
    }
}

external open class NiagaraCulledComponentInfo {
    open fun clone(): NiagaraCulledComponentInfo

    companion object {
        fun C(Other: UObject): NiagaraCulledComponentInfo
        fun C(Other: Any): NiagaraCulledComponentInfo
    }
}

external open class NiagaraCullProxyComponent : NiagaraComponent {
    constructor()
    constructor(Outer: UObject)
    open var Instances: Array<NiagaraCulledComponentInfo>

    companion object {
        fun Load(ResourceName: String): NiagaraCullProxyComponent
        fun Find(Outer: UObject, ResourceName: String): NiagaraCullProxyComponent
        fun GetDefaultObject(): NiagaraCullProxyComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraCullProxyComponent
        fun C(Other: UObject): NiagaraCullProxyComponent
        fun C(Other: Any): NiagaraCullProxyComponent
    }
}

external open class TextureRenderTarget : Texture {
    constructor()
    constructor(Outer: UObject)
    open var TargetGamma: Number

    companion object {
        fun Load(ResourceName: String): TextureRenderTarget
        fun Find(Outer: UObject, ResourceName: String): TextureRenderTarget
        fun GetDefaultObject(): TextureRenderTarget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureRenderTarget
        fun C(Other: UObject): TextureRenderTarget
        fun C(Other: Any): TextureRenderTarget
    }
}

external object ENiagaraAgeUpdateMode {
    var TickDeltaTime: String /* "TickDeltaTime" */
    var DesiredAge: String /* "DesiredAge" */
    var DesiredAgeNoSeek: String /* "DesiredAgeNoSeek" */
    var ENiagaraAgeUpdateMode_MAX: String /* "ENiagaraAgeUpdateMode_MAX" */
}

external open class Texture2DArray : Texture {
    constructor()
    constructor(Outer: UObject)
    open var AddressX: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressY: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressZ: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var SourceTextures: Array<Texture2D>

    companion object {
        fun Load(ResourceName: String): Texture2DArray
        fun Find(Outer: UObject, ResourceName: String): Texture2DArray
        fun GetDefaultObject(): Texture2DArray
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Texture2DArray
        fun C(Other: UObject): Texture2DArray
        fun C(Other: Any): Texture2DArray
    }
}

external open class VolumeTexture : Texture {
    constructor()
    constructor(Outer: UObject)
    open var Source2DTexture: Texture2D
    open var SourceLightingGuid: Guid
    open var Source2DTileSizeX: Number
    open var Source2DTileSizeY: Number

    companion object {
        fun Load(ResourceName: String): VolumeTexture
        fun Find(Outer: UObject, ResourceName: String): VolumeTexture
        fun GetDefaultObject(): VolumeTexture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VolumeTexture
        fun C(Other: UObject): VolumeTexture
        fun C(Other: Any): VolumeTexture
    }
}

external open class NiagaraComponent : FXSystemComponent {
    constructor()
    constructor(Outer: UObject)
    open var Asset: NiagaraSystem
    open var TickBehavior: String /* "UsePrereqs" | "UseComponentTickGroup" | "ForceTickFirst" | "ForceTickLast" | "ENiagaraTickBehavior_MAX" */
    open var RandomSeedOffset: Number
    open var OverrideParameters: NiagaraUserRedirectionParameterStore
    open var EditorOverridesValue: Any
    open var TemplateParameterOverrides: Any
    open var InstanceParameterOverrides: Any
    open var bForceSolo: Boolean
    open var bEnableGpuComputeDebug: Boolean
    open var bAutoDestroy: Boolean
    open var bRenderingEnabled: Boolean
    open var bAutoManageAttachment: Boolean
    open var bAutoAttachWeldSimulatedBodies: Boolean
    open var MaxTimeBeforeForceUpdateTransform: Number
    open var OnSystemFinished: UnrealEngineMulticastDelegate<(PSystem: NiagaraComponent) -> Unit>
    open var AutoAttachParent: Any
    open var AutoAttachSocketName: String
    open var AutoAttachLocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachRotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var bWaitForCompilationOnActivate: Boolean
    open var bAllowScalability: Boolean
    open var CullProxy: NiagaraCullProxyComponent
    open fun SetNiagaraVariable(InVariableName: String, InValue: Vector4)
    open fun SetNiagaraVariable(InVariableName: String, InValue: Vector)
    open fun SetNiagaraVariable(InVariableName: String, InValue: Vector2D)
    open fun SetNiagaraVariable(InVariableName: String, TextureRenderTarget: TextureRenderTarget)
    open fun SetNiagaraVariable(InVariableName: String, Texture: Texture)
    open fun SetNiagaraVariable(InVariableName: String, InValue: StaticMesh)
    open fun SetNiagaraVariable(InVariableName: String, InValue: Quat)
    open fun SetNiagaraVariable(InVariableName: String, UObject: UObject)
    open fun SetNiagaraVariable(InVariableName: String, UObject: MaterialInterface)
    open fun SetNiagaraVariable(InVariableName: String, InValue: LinearColor)
    open fun SetNiagaraVariable(InVariableName: String, InValue: Number)
    open fun SetNiagaraVariable(InVariableName: String, InValue: Boolean)
    open fun SetNiagaraVariable(InVariableName: String, Actor: Actor)
    open fun SetTickBehavior(NewTickBehavior: String /* "UsePrereqs" | "UseComponentTickGroup" | "ForceTickFirst" | "ForceTickLast" | "ENiagaraTickBehavior_MAX" */)
    open fun SetSystemFixedBounds(LocalBounds: Box)
    open fun SetDesiredAgeSeekDelta(InSeekDelta: Number)
    open fun SetRenderingEnabled(bInRenderingEnabled: Boolean)
    open fun SetRandomSeedOffset(NewRandomSeedOffset: Number)
    open fun SetPreviewLODDistance(bEnablePreviewLODDistance: Boolean, PreviewLODDistance: Number, PreviewMaxDistance: Number)
    open fun SetPaused(bInPaused: Boolean)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: Vector4)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: Vector)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: Vector2D)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: Quat)
    open fun SetNiagaraVariableByString(InVariableName: String, UObject: UObject)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: LinearColor)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: Number)
    open fun SetNiagaraVariableByString(InVariableName: String, InValue: Boolean)
    open fun SetNiagaraVariableByString(InVariableName: String, Actor: Actor)
    open fun SetMaxDesiredAgeTickDelta(InMaxTime: Number)
    open fun SetLockDesiredAgeDeltaTimeToSeekDelta(bLock: Boolean)
    open fun SetGpuComputeDebug(bEnableDebug: Boolean)
    open fun SetForcedSoloMode(bInForceSolo: Boolean)
    open fun SetForceLocalPlayerEffect(bIsPlayerEffect: Boolean)
    open fun SetEmitterFixedBounds(EmitterName: String, LocalBounds: Box)
    open fun SetDesiredAge(InDesiredAge: Number)
    open fun SetCustomTimeDilation(Dilation: Number)
    open fun SetCanRenderWhileSeeking(bInCanRenderWhileSeeking: Boolean)
    open fun SetAutoDestroy(bInAutoDestroy: Boolean)
    open fun SetNiagaraSystemAsset(InAsset: NiagaraSystem, bResetExistingOverrideParameters: Boolean)
    open fun SetAllowScalability(bAllow: Boolean)
    open fun SetAgeUpdateMode(InAgeUpdateMode: String /* "TickDeltaTime" | "DesiredAge" | "DesiredAgeNoSeek" | "ENiagaraAgeUpdateMode_MAX" */)
    open fun SeekToDesiredAge(InDesiredAge: Number)
    open fun ResetSystem()
    open fun ReinitializeSystem()
    open fun IsPaused(): Boolean
    open fun InitForPerformanceBaseline()
    open fun GetTickBehavior(): String /* "UsePrereqs" | "UseComponentTickGroup" | "ForceTickFirst" | "ForceTickLast" | "ENiagaraTickBehavior_MAX" */
    open fun GetSystemFixedBounds(): Box
    open fun GetDesiredAgeSeekDelta(): Number
    open fun GetRandomSeedOffset(): Number
    open fun GetPreviewLODDistanceEnabled(): Boolean
    open fun GetPreviewLODDistance(): Number
    open fun GetNiagaraEmitterVec3Attrib(InEmitterName: String, InValueName: String): Array<Vector>
    open fun GetNiagaraEmitterFloatAttrib(InEmitterName: String, InValueName: String): Array<Number>
    open fun GetNiagaraEmitterPositions(InEmitterName: String): Array<Vector>
    open fun GetMaxDesiredAgeTickDelta(): Number
    open fun GetLockDesiredAgeDeltaTimeToSeekDelta(): Boolean
    open fun IsInForcedSoloMode(): Boolean
    open fun GetForceLocalPlayerEffect(): Boolean
    open fun GetEmitterFixedBounds(EmitterName: String): Box
    open fun GetDesiredAge(): Number
    open fun GetDataInterface(Name: String): NiagaraDataInterface
    open fun GetCustomTimeDilation(): Number
    open fun GetNiagaraSystemAsset(): NiagaraSystem
    open fun GetAllowScalability(): Boolean
    open fun GetAgeUpdateMode(): String /* "TickDeltaTime" | "DesiredAge" | "DesiredAgeNoSeek" | "ENiagaraAgeUpdateMode_MAX" */
    open fun ClearSystemFixedBounds()
    open fun ClearEmitterFixedBounds(EmitterName: String)
    open fun AdvanceSimulationByTime(SimulateTime: Number, TickDeltaSeconds: Number)
    open fun AdvanceSimulation(TickCount: Number, TickDeltaSeconds: Number)
    open fun SetNiagaraSkeletalMeshComponent(OverrideName: String, SkeletalMeshComponent: SkeletalMeshComponent)
    open fun SetNiagaraStaticMeshDirectly(OverrideName: String, StaticMesh: StaticMesh)
    open fun SetNiagaraStaticMeshComponent(OverrideName: String, StaticMeshComponent: StaticMeshComponent)
    open fun SetSkeletalMeshDataInterfaceSamplingRegions(OverrideName: String, SamplingRegions: Array<String>)
    open fun SetTexture2DArrayObject(OverrideName: String, Texture: Texture2DArray)
    open fun SetTextureObject(OverrideName: String, Texture: Texture)
    open fun SetVolumeTextureObject(OverrideName: String, Texture: VolumeTexture)
    open fun NiagaraGetBoolArray(OverrideName: String): Array<Boolean>
    open fun NiagaraGetBoolArrayValue(OverrideName: String, index: Number): Boolean
    open fun NiagaraGetColorArray(OverrideName: String): Array<LinearColor>
    open fun NiagaraGetColorArrayValue(OverrideName: String, index: Number): LinearColor
    open fun NiagaraGetFloatArray(OverrideName: String): Array<Number>
    open fun NiagaraGetFloatArrayValue(OverrideName: String, index: Number): Number
    open fun NiagaraGetInt32Array(OverrideName: String): Array<Number>
    open fun NiagaraGetInt32ArrayValue(OverrideName: String, index: Number): Number
    open fun NiagaraGetPositionArray(OverrideName: String): Array<Vector>
    open fun NiagaraGetPositionArrayValue(OverrideName: String, index: Number): Vector
    open fun NiagaraGetQuaternionArray(OverrideName: String): Array<Quat>
    open fun NiagaraGetQuaternionArrayValue(OverrideName: String, index: Number): Quat
    open fun NiagaraGetVectorArray(OverrideName: String): Array<Vector>
    open fun NiagaraGetVector2DArray(OverrideName: String): Array<Vector2D>
    open fun NiagaraGetVector2DArrayValue(OverrideName: String, index: Number): Vector2D
    open fun NiagaraGetVector4Array(OverrideName: String): Array<Vector4>
    open fun NiagaraGetVector4ArrayValue(OverrideName: String, index: Number): Vector4
    open fun NiagaraGetVectorArrayValue(OverrideName: String, index: Number): Vector
    open fun NiagaraSetBoolArray(OverrideName: String, ArrayData: Array<Boolean>)
    open fun NiagaraSetBoolArrayValue(OverrideName: String, index: Number, Value: Boolean, bSizeToFit: Boolean)
    open fun NiagaraSetColorArray(OverrideName: String, ArrayData: Array<LinearColor>)
    open fun NiagaraSetColorArrayValue(OverrideName: String, index: Number, Value: LinearColor, bSizeToFit: Boolean)
    open fun NiagaraSetFloatArray(OverrideName: String, ArrayData: Array<Number>)
    open fun NiagaraSetFloatArrayValue(OverrideName: String, index: Number, Value: Number, bSizeToFit: Boolean)
    open fun NiagaraSetInt32Array(OverrideName: String, ArrayData: Array<Number>)
    open fun NiagaraSetInt32ArrayValue(OverrideName: String, index: Number, Value: Number, bSizeToFit: Boolean)
    open fun NiagaraSetPositionArray(OverrideName: String, ArrayData: Array<Vector>)
    open fun NiagaraSetPositionArrayValue(OverrideName: String, index: Number, Value: Vector, bSizeToFit: Boolean)
    open fun NiagaraSetQuaternionArray(OverrideName: String, ArrayData: Array<Quat>)
    open fun NiagaraSetQuaternionArrayValue(OverrideName: String, index: Number, Value: Quat, bSizeToFit: Boolean)
    open fun NiagaraSetVectorArray(OverrideName: String, ArrayData: Array<Vector>)
    open fun NiagaraSetVector2DArray(OverrideName: String, ArrayData: Array<Vector2D>)
    open fun NiagaraSetVector2DArrayValue(OverrideName: String, index: Number, Value: Vector2D, bSizeToFit: Boolean)
    open fun NiagaraSetVector4Array(OverrideName: String, ArrayData: Array<Vector4>)
    open fun NiagaraSetVector4ArrayValue(OverrideName: String, index: Number, Value: Vector4, bSizeToFit: Boolean)
    open fun NiagaraSetVectorArrayValue(OverrideName: String, index: Number, Value: Vector, bSizeToFit: Boolean)

    companion object {
        fun Load(ResourceName: String): NiagaraComponent
        fun Find(Outer: UObject, ResourceName: String): NiagaraComponent
        fun GetDefaultObject(): NiagaraComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraComponent
        fun C(Other: UObject): NiagaraComponent
        fun C(Other: Any): NiagaraComponent
        fun SetNiagaraSkeletalMeshComponent(NiagaraSystem: NiagaraComponent, OverrideName: String, SkeletalMeshComponent: SkeletalMeshComponent)
        fun SetNiagaraStaticMeshDirectly(NiagaraSystem: NiagaraComponent, OverrideName: String, StaticMesh: StaticMesh)
        fun SetNiagaraStaticMeshComponent(NiagaraSystem: NiagaraComponent, OverrideName: String, StaticMeshComponent: StaticMeshComponent)
        fun SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraSystem: NiagaraComponent, OverrideName: String, SamplingRegions: Array<String>)
        fun SetTexture2DArrayObject(NiagaraSystem: NiagaraComponent, OverrideName: String, Texture: Texture2DArray)
        fun SetTextureObject(NiagaraSystem: NiagaraComponent, OverrideName: String, Texture: Texture)
        fun SetVolumeTextureObject(NiagaraSystem: NiagaraComponent, OverrideName: String, Texture: VolumeTexture)
        fun NiagaraGetBoolArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Boolean>
        fun NiagaraGetBoolArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Boolean
        fun NiagaraGetColorArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<LinearColor>
        fun NiagaraGetColorArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): LinearColor
        fun NiagaraGetFloatArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Number>
        fun NiagaraGetFloatArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Number
        fun NiagaraGetInt32Array(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Number>
        fun NiagaraGetInt32ArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Number
        fun NiagaraGetPositionArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Vector>
        fun NiagaraGetPositionArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Vector
        fun NiagaraGetQuaternionArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Quat>
        fun NiagaraGetQuaternionArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Quat
        fun NiagaraGetVectorArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Vector>
        fun NiagaraGetVector2DArray(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Vector2D>
        fun NiagaraGetVector2DArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Vector2D
        fun NiagaraGetVector4Array(NiagaraSystem: NiagaraComponent, OverrideName: String): Array<Vector4>
        fun NiagaraGetVector4ArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Vector4
        fun NiagaraGetVectorArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number): Vector
        fun NiagaraSetBoolArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Boolean>)
        fun NiagaraSetBoolArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Boolean, bSizeToFit: Boolean)
        fun NiagaraSetColorArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<LinearColor>)
        fun NiagaraSetColorArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: LinearColor, bSizeToFit: Boolean)
        fun NiagaraSetFloatArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Number>)
        fun NiagaraSetFloatArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Number, bSizeToFit: Boolean)
        fun NiagaraSetInt32Array(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Number>)
        fun NiagaraSetInt32ArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Number, bSizeToFit: Boolean)
        fun NiagaraSetPositionArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Vector>)
        fun NiagaraSetPositionArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Vector, bSizeToFit: Boolean)
        fun NiagaraSetQuaternionArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Quat>)
        fun NiagaraSetQuaternionArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Quat, bSizeToFit: Boolean)
        fun NiagaraSetVectorArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Vector>)
        fun NiagaraSetVector2DArray(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Vector2D>)
        fun NiagaraSetVector2DArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Vector2D, bSizeToFit: Boolean)
        fun NiagaraSetVector4Array(NiagaraSystem: NiagaraComponent, OverrideName: String, ArrayData: Array<Vector4>)
        fun NiagaraSetVector4ArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Vector4, bSizeToFit: Boolean)
        fun NiagaraSetVectorArrayValue(NiagaraSystem: NiagaraComponent, OverrideName: String, index: Number, Value: Vector, bSizeToFit: Boolean)
    }
}

external open class NiagaraSystemUpdateContext {
    open var ComponentsToReset: Array<NiagaraComponent>
    open var ComponentsToReInit: Array<NiagaraComponent>
    open var ComponentsToNotifySimDestroy: Array<NiagaraComponent>
    open var SystemSimsToDestroy: Array<NiagaraSystem>
    open fun clone(): NiagaraSystemUpdateContext

    companion object {
        fun C(Other: UObject): NiagaraSystemUpdateContext
        fun C(Other: Any): NiagaraSystemUpdateContext
    }
}

external object ERendererStencilMask {
    var ERSM_Default: String /* "ERSM_Default" */
    var ERSM_255: String /* "ERSM_255" */
    var ERSM_1: String /* "ERSM_1" */
    var ERSM_2: String /* "ERSM_2" */
    var ERSM_4: String /* "ERSM_4" */
    var ERSM_8: String /* "ERSM_8" */
    var ERSM_16: String /* "ERSM_16" */
    var ERSM_32: String /* "ERSM_32" */
    var ERSM_64: String /* "ERSM_64" */
    var ERSM_128: String /* "ERSM_128" */
    var ERSM_MAX: String /* "ERSM_MAX" */
}

external object ENiagaraScalabilityUpdateFrequency {
    var SpawnOnly: String /* "SpawnOnly" */
    var Low: String /* "Low" */
    var Medium: String /* "Medium" */
    var High: String /* "High" */
    var Continuous: String /* "Continuous" */
    var ENiagaraScalabilityUpdateFrequency_MAX: String /* "ENiagaraScalabilityUpdateFrequency_MAX" */
}

external object ENiagaraCullReaction {
    var Deactivate: String /* "Deactivate" */
    var DeactivateImmediate: String /* "DeactivateImmediate" */
    var DeactivateResume: String /* "DeactivateResume" */
    var DeactivateImmediateResume: String /* "DeactivateImmediateResume" */
    var ENiagaraCullReaction_MAX: String /* "ENiagaraCullReaction_MAX" */
}

external open class NiagaraSignificanceHandler : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraSignificanceHandler
        fun Find(Outer: UObject, ResourceName: String): NiagaraSignificanceHandler
        fun GetDefaultObject(): NiagaraSignificanceHandler
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraSignificanceHandler
        fun C(Other: UObject): NiagaraSignificanceHandler
        fun C(Other: Any): NiagaraSignificanceHandler
    }
}

external open class NiagaraDeviceProfileStateEntry {
    open var ProfileName: String
    open var QualityLevelMask: Any
    open var SetQualityLevelMask: Any
    open fun clone(): NiagaraDeviceProfileStateEntry

    companion object {
        fun C(Other: UObject): NiagaraDeviceProfileStateEntry
        fun C(Other: Any): NiagaraDeviceProfileStateEntry
    }
}

external open class NiagaraPlatformSetCVarCondition {
    open var CVarName: String
    open var Value: Boolean
    open var MinInt: Number
    open var MaxInt: Number
    open var MinFloat: Number
    open var MaxFloat: Number
    open var bUseMinInt: Boolean
    open var bUseMaxInt: Boolean
    open var bUseMinFloat: Boolean
    open var bUseMaxFloat: Boolean
    open fun clone(): NiagaraPlatformSetCVarCondition

    companion object {
        fun C(Other: UObject): NiagaraPlatformSetCVarCondition
        fun C(Other: Any): NiagaraPlatformSetCVarCondition
    }
}

external open class NiagaraPlatformSet {
    open var QualityLevelMask: Number
    open var DeviceProfileStates: Array<NiagaraDeviceProfileStateEntry>
    open var CVarConditions: Array<NiagaraPlatformSetCVarCondition>
    open fun clone(): NiagaraPlatformSet

    companion object {
        fun C(Other: UObject): NiagaraPlatformSet
        fun C(Other: Any): NiagaraPlatformSet
    }
}

external object ENiagaraCullProxyMode {
    var None: String /* "None" */
    var Instanced_Rendered: String /* "Instanced_Rendered" */
    var ENiagaraCullProxyMode_MAX: String /* "ENiagaraCullProxyMode_MAX" */
}

external open class NiagaraLinearRamp {
    open var StartX: Number
    open var StartY: Number
    open var EndX: Number
    open var EndY: Number
    open fun clone(): NiagaraLinearRamp

    companion object {
        fun C(Other: UObject): NiagaraLinearRamp
        fun C(Other: Any): NiagaraLinearRamp
    }
}

external open class NiagaraGlobalBudgetScaling {
    open var bCullByGlobalBudget: Boolean
    open var bScaleMaxDistanceByGlobalBudgetUse: Boolean
    open var bScaleMaxInstanceCountByGlobalBudgetUse: Boolean
    open var bScaleSystemInstanceCountByGlobalBudgetUse: Boolean
    open var MaxGlobalBudgetUsage: Number
    open var MaxDistanceScaleByGlobalBudgetUse: NiagaraLinearRamp
    open var MaxInstanceCountScaleByGlobalBudgetUse: NiagaraLinearRamp
    open var MaxSystemInstanceCountScaleByGlobalBudgetUse: NiagaraLinearRamp
    open fun clone(): NiagaraGlobalBudgetScaling

    companion object {
        fun C(Other: UObject): NiagaraGlobalBudgetScaling
        fun C(Other: Any): NiagaraGlobalBudgetScaling
    }
}

external open class NiagaraSystemScalabilitySettings {
    open var Platforms: NiagaraPlatformSet
    open var bCullByDistance: Boolean
    open var bCullMaxInstanceCount: Boolean
    open var bCullPerSystemMaxInstanceCount: Boolean
    open var bCullByMaxTimeWithoutRender: Boolean
    open var MaxDistance: Number
    open var MaxInstances: Number
    open var MaxSystemInstances: Number
    open var MaxTimeWithoutRender: Number
    open var CullProxyMode: String /* "None" | "Instanced_Rendered" | "ENiagaraCullProxyMode_MAX" */
    open var MaxSystemProxies: Number
    open var BudgetScaling: NiagaraGlobalBudgetScaling
    open fun clone(): NiagaraSystemScalabilitySettings

    companion object {
        fun C(Other: UObject): NiagaraSystemScalabilitySettings
        fun C(Other: Any): NiagaraSystemScalabilitySettings
    }
}

external open class NiagaraSystemScalabilitySettingsArray {
    open var Settings: Array<NiagaraSystemScalabilitySettings>
    open fun clone(): NiagaraSystemScalabilitySettingsArray

    companion object {
        fun C(Other: UObject): NiagaraSystemScalabilitySettingsArray
        fun C(Other: Any): NiagaraSystemScalabilitySettingsArray
    }
}

external open class NiagaraEmitterScalabilitySettings {
    open var Platforms: NiagaraPlatformSet
    open var bScaleSpawnCount: Boolean
    open var SpawnCountScale: Number
    open fun clone(): NiagaraEmitterScalabilitySettings

    companion object {
        fun C(Other: UObject): NiagaraEmitterScalabilitySettings
        fun C(Other: Any): NiagaraEmitterScalabilitySettings
    }
}

external open class NiagaraEmitterScalabilitySettingsArray {
    open var Settings: Array<NiagaraEmitterScalabilitySettings>
    open fun clone(): NiagaraEmitterScalabilitySettingsArray

    companion object {
        fun C(Other: UObject): NiagaraEmitterScalabilitySettingsArray
        fun C(Other: Any): NiagaraEmitterScalabilitySettingsArray
    }
}

external object EHorizTextAligment {
    var EHTA_Left: String /* "EHTA_Left" */
    var EHTA_Center: String /* "EHTA_Center" */
    var EHTA_Right: String /* "EHTA_Right" */
    var EHTA_MAX: String /* "EHTA_MAX" */
}

external object EVerticalTextAligment {
    var EVRTA_TextTop: String /* "EVRTA_TextTop" */
    var EVRTA_TextCenter: String /* "EVRTA_TextCenter" */
    var EVRTA_TextBottom: String /* "EVRTA_TextBottom" */
    var EVRTA_QuadTop: String /* "EVRTA_QuadTop" */
    var EVRTA_MAX: String /* "EVRTA_MAX" */
}

external open class TextRenderComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var text: String
    open var TextMaterial: MaterialInterface
    open var Font: Font
    open var HorizontalAlignment: String /* "EHTA_Left" | "EHTA_Center" | "EHTA_Right" | "EHTA_MAX" */
    open var VerticalAlignment: String /* "EVRTA_TextTop" | "EVRTA_TextCenter" | "EVRTA_TextBottom" | "EVRTA_QuadTop" | "EVRTA_MAX" */
    open var TextRenderColor: Color
    open var XScale: Number
    open var YScale: Number
    open var WorldSize: Number
    open var InvDefaultSize: Number
    open var HorizSpacingAdjust: Number
    open var VertSpacingAdjust: Number
    open var bAlwaysRenderAsText: Boolean
    open fun SetYScale(Value: Number)
    open fun SetXScale(Value: Number)
    open fun SetWorldSize(Value: Number)
    open fun SetVertSpacingAdjust(Value: Number)
    open fun SetVerticalAlignment(Value: String /* "EVRTA_TextTop" | "EVRTA_TextCenter" | "EVRTA_TextBottom" | "EVRTA_QuadTop" | "EVRTA_MAX" */)
    open fun SetTextRenderColor(Value: Color)
    open fun SetTextMaterial(Material: MaterialInterface)
    open fun SetHorizSpacingAdjust(Value: Number)
    open fun SetHorizontalAlignment(Value: String /* "EHTA_Left" | "EHTA_Center" | "EHTA_Right" | "EHTA_MAX" */)
    open fun SetFont(Value: Font)
    open fun SetText(Value: String)
    open fun GetTextWorldSize(): Vector
    open fun GetTextLocalSize(): Vector

    companion object {
        fun Load(ResourceName: String): TextRenderComponent
        fun Find(Outer: UObject, ResourceName: String): TextRenderComponent
        fun GetDefaultObject(): TextRenderComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextRenderComponent
        fun C(Other: UObject): TextRenderComponent
        fun C(Other: Any): TextRenderComponent
    }
}

external open class NiagaraPerfBaselineActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var Controller: NiagaraBaselineController
    open var Label: TextRenderComponent

    companion object {
        fun GetDefaultObject(): NiagaraPerfBaselineActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraPerfBaselineActor
        fun C(Other: UObject): NiagaraPerfBaselineActor
        fun C(Other: Any): NiagaraPerfBaselineActor
    }
}

external open class NiagaraPerfBaselineStats {
    open var PerInstanceAvg_GT: Number
    open var PerInstanceAvg_RT: Number
    open var PerInstanceMax_GT: Number
    open var PerInstanceMax_RT: Number
    open fun clone(): NiagaraPerfBaselineStats

    companion object {
        fun C(Other: UObject): NiagaraPerfBaselineStats
        fun C(Other: Any): NiagaraPerfBaselineStats
    }
}

external open class NiagaraBaselineController : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TestDuration: Number
    open var EffectType: NiagaraEffectType
    open var Owner: NiagaraPerfBaselineActor
    open var System: NiagaraSystem
    open fun OnTickTest(): Boolean
    open fun OnOwnerTick(DeltaTime: Number)
    open fun OnEndTest(Stats: NiagaraPerfBaselineStats)
    open fun OnBeginTest()
    open fun GetSystem(): NiagaraSystem

    companion object {
        fun Load(ResourceName: String): NiagaraBaselineController
        fun Find(Outer: UObject, ResourceName: String): NiagaraBaselineController
        fun GetDefaultObject(): NiagaraBaselineController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraBaselineController
        fun C(Other: UObject): NiagaraBaselineController
        fun C(Other: Any): NiagaraBaselineController
    }
}

external open class NiagaraEffectType : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bAllowCullingForLocalPlayers: Boolean
    open var UpdateFrequency: String /* "SpawnOnly" | "Low" | "Medium" | "High" | "Continuous" | "ENiagaraScalabilityUpdateFrequency_MAX" */
    open var CullReaction: String /* "Deactivate" | "DeactivateImmediate" | "DeactivateResume" | "DeactivateImmediateResume" | "ENiagaraCullReaction_MAX" */
    open var SignificanceHandler: NiagaraSignificanceHandler
    open var DetailLevelScalabilitySettings: Array<NiagaraSystemScalabilitySettings>
    open var SystemScalabilitySettings: NiagaraSystemScalabilitySettingsArray
    open var EmitterScalabilitySettings: NiagaraEmitterScalabilitySettingsArray
    open var PerformanceBaselineController: NiagaraBaselineController
    open var PerfBaselineStats: NiagaraPerfBaselineStats
    open var PerfBaselineVersion: Guid

    companion object {
        fun Load(ResourceName: String): NiagaraEffectType
        fun Find(Outer: UObject, ResourceName: String): NiagaraEffectType
        fun GetDefaultObject(): NiagaraEffectType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraEffectType
        fun C(Other: UObject): NiagaraEffectType
        fun C(Other: Any): NiagaraEffectType
    }
}

external open class NiagaraSystemScalabilityOverride : NiagaraSystemScalabilitySettings {
    open var bOverrideDistanceSettings: Boolean
    open var bOverrideInstanceCountSettings: Boolean
    open var bOverridePerSystemInstanceCountSettings: Boolean
    open var bOverrideTimeSinceRendererSettings: Boolean
    open var bOverrideGlobalBudgetScalingSettings: Boolean
    open var bOverrideCullProxySettings: Boolean
    override fun clone(): NiagaraSystemScalabilityOverride

    companion object {
        fun C(Other: UObject): NiagaraSystemScalabilityOverride
        fun C(Other: Any): NiagaraSystemScalabilityOverride
    }
}

external open class NiagaraSystemScalabilityOverrides {
    open var Overrides: Array<NiagaraSystemScalabilityOverride>
    open fun clone(): NiagaraSystemScalabilityOverrides

    companion object {
        fun C(Other: UObject): NiagaraSystemScalabilityOverrides
        fun C(Other: Any): NiagaraSystemScalabilityOverrides
    }
}

external object EParticleAllocationMode {
    var AutomaticEstimate: String /* "AutomaticEstimate" */
    var ManualEstimate: String /* "ManualEstimate" */
    var FixedCount: String /* "FixedCount" */
    var EParticleAllocationMode_MAX: String /* "EParticleAllocationMode_MAX" */
}

external open class NiagaraEventReceiverProperties {
    open var Name: String
    open var SourceEventGenerator: String
    open var SourceEmitter: String
    open fun clone(): NiagaraEventReceiverProperties

    companion object {
        fun C(Other: UObject): NiagaraEventReceiverProperties
        fun C(Other: Any): NiagaraEventReceiverProperties
    }
}

external open class NiagaraTypeLayoutInfo {
    open var FloatComponentByteOffsets: Array<Any>
    open var FloatComponentRegisterOffsets: Array<Any>
    open var Int32ComponentByteOffsets: Array<Any>
    open var Int32ComponentRegisterOffsets: Array<Any>
    open var HalfComponentByteOffsets: Array<Any>
    open var HalfComponentRegisterOffsets: Array<Any>
    open fun clone(): NiagaraTypeLayoutInfo

    companion object {
        fun C(Other: UObject): NiagaraTypeLayoutInfo
        fun C(Other: Any): NiagaraTypeLayoutInfo
    }
}

external open class NiagaraVariableLayoutInfo {
    open var FloatComponentStart: Any
    open var Int32ComponentStart: Any
    open var HalfComponentStart: Any
    open var LayoutInfo: NiagaraTypeLayoutInfo
    open fun clone(): NiagaraVariableLayoutInfo

    companion object {
        fun C(Other: UObject): NiagaraVariableLayoutInfo
        fun C(Other: Any): NiagaraVariableLayoutInfo
    }
}

external object ENiagaraSimTarget {
    var CPUSim: String /* "CPUSim" */
    var GPUComputeSim: String /* "GPUComputeSim" */
    var ENiagaraSimTarget_MAX: String /* "ENiagaraSimTarget_MAX" */
}

external open class NiagaraDataSetCompiledData {
    open var Variables: Array<NiagaraVariable>
    open var VariableLayouts: Array<NiagaraVariableLayoutInfo>
    open var ID: NiagaraDataSetID
    open var TotalFloatComponents: Any
    open var TotalInt32Components: Any
    open var TotalHalfComponents: Any
    open var bRequiresPersistentIDs: Boolean
    open var SimTarget: String /* "CPUSim" | "GPUComputeSim" | "ENiagaraSimTarget_MAX" */
    open fun clone(): NiagaraDataSetCompiledData

    companion object {
        fun C(Other: UObject): NiagaraDataSetCompiledData
        fun C(Other: Any): NiagaraDataSetCompiledData
    }
}

external open class NiagaraEventGeneratorProperties {
    open var MaxEventsPerFrame: Number
    open var ID: String
    open var DataSetCompiledData: NiagaraDataSetCompiledData
    open fun clone(): NiagaraEventGeneratorProperties

    companion object {
        fun C(Other: UObject): NiagaraEventGeneratorProperties
        fun C(Other: Any): NiagaraEventGeneratorProperties
    }
}

external open class NiagaraEmitterScriptProperties {
    open var Script: NiagaraScript
    open var EventReceivers: Array<NiagaraEventReceiverProperties>
    open var EventGenerators: Array<NiagaraEventGeneratorProperties>
    open fun clone(): NiagaraEmitterScriptProperties

    companion object {
        fun C(Other: UObject): NiagaraEmitterScriptProperties
        fun C(Other: Any): NiagaraEmitterScriptProperties
    }
}

external open class NiagaraDetailsLevelScaleOverrides {
    open var Low: Number
    open var Medium: Number
    open var High: Number
    open var Epic: Number
    open var Cine: Number
    open fun clone(): NiagaraDetailsLevelScaleOverrides

    companion object {
        fun C(Other: UObject): NiagaraDetailsLevelScaleOverrides
        fun C(Other: Any): NiagaraDetailsLevelScaleOverrides
    }
}

external open class NiagaraEmitterScalabilityOverride : NiagaraEmitterScalabilitySettings {
    open var bOverrideSpawnCountScale: Boolean
    override fun clone(): NiagaraEmitterScalabilityOverride

    companion object {
        fun C(Other: UObject): NiagaraEmitterScalabilityOverride
        fun C(Other: Any): NiagaraEmitterScalabilityOverride
    }
}

external open class NiagaraEmitterScalabilityOverrides {
    open var Overrides: Array<NiagaraEmitterScalabilityOverride>
    open fun clone(): NiagaraEmitterScalabilityOverrides

    companion object {
        fun C(Other: UObject): NiagaraEmitterScalabilityOverrides
        fun C(Other: Any): NiagaraEmitterScalabilityOverrides
    }
}

external open class NiagaraEditorDataBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraEditorDataBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraEditorDataBase
        fun GetDefaultObject(): NiagaraEditorDataBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraEditorDataBase
        fun C(Other: UObject): NiagaraEditorDataBase
        fun C(Other: Any): NiagaraEditorDataBase
    }
}

external open class NiagaraEditorParametersAdapterBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NiagaraEditorParametersAdapterBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraEditorParametersAdapterBase
        fun GetDefaultObject(): NiagaraEditorParametersAdapterBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraEditorParametersAdapterBase
        fun C(Other: UObject): NiagaraEditorParametersAdapterBase
        fun C(Other: Any): NiagaraEditorParametersAdapterBase
    }
}

external object ENiagaraRendererMotionVectorSetting {
    var AutoDetect: String /* "AutoDetect" */
    var Precise: String /* "Precise" */
    var Approximate: String /* "Approximate" */
    var Disable: String /* "Disable" */
    var ENiagaraRendererMotionVectorSetting_MAX: String /* "ENiagaraRendererMotionVectorSetting_MAX" */
}

external object ENiagaraBindingSource {
    var ImplicitFromSource: String /* "ImplicitFromSource" */
    var ExplicitParticles: String /* "ExplicitParticles" */
    var ExplicitEmitter: String /* "ExplicitEmitter" */
    var ExplicitSystem: String /* "ExplicitSystem" */
    var ExplicitUser: String /* "ExplicitUser" */
    var MaxBindingSource: String /* "MaxBindingSource" */
    var ENiagaraBindingSource_MAX: String /* "ENiagaraBindingSource_MAX" */
}

external open class NiagaraVariableAttributeBinding {
    open var ParamMapVariable: NiagaraVariableBase
    open var DataSetVariable: NiagaraVariable
    open var RootVariable: NiagaraVariable
    open var BoundVariable: NiagaraVariable
    open var CachedDisplayName: String
    open var BindingSourceMode: String /* "ImplicitFromSource" | "ExplicitParticles" | "ExplicitEmitter" | "ExplicitSystem" | "ExplicitUser" | "MaxBindingSource" | "ENiagaraBindingSource_MAX" */
    open var bBindingExistsOnSource: Boolean
    open var bIsCachedParticleValue: Boolean
    open fun clone(): NiagaraVariableAttributeBinding

    companion object {
        fun C(Other: UObject): NiagaraVariableAttributeBinding
        fun C(Other: Any): NiagaraVariableAttributeBinding
    }
}

external open class NiagaraRendererProperties : NiagaraMergeable {
    constructor()
    constructor(Outer: UObject)
    open var Platforms: NiagaraPlatformSet
    open var SortOrderHint: Number
    open var MotionVectorSetting: String /* "AutoDetect" | "Precise" | "Approximate" | "Disable" | "ENiagaraRendererMotionVectorSetting_MAX" */
    open var RendererEnabledBinding: NiagaraVariableAttributeBinding
    open var bIsEnabled: Boolean
    open var bAllowInCullProxies: Boolean
    open var bMotionBlurEnabled: Boolean

    companion object {
        fun Load(ResourceName: String): NiagaraRendererProperties
        fun Find(Outer: UObject, ResourceName: String): NiagaraRendererProperties
        fun GetDefaultObject(): NiagaraRendererProperties
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraRendererProperties
        fun C(Other: UObject): NiagaraRendererProperties
        fun C(Other: Any): NiagaraRendererProperties
    }
}

external object EScriptExecutionMode {
    var EveryParticle: String /* "EveryParticle" */
    var SpawnedParticles: String /* "SpawnedParticles" */
    var SingleParticle: String /* "SingleParticle" */
    var EScriptExecutionMode_MAX: String /* "EScriptExecutionMode_MAX" */
}

external open class NiagaraEventScriptProperties : NiagaraEmitterScriptProperties {
    open var ExecutionMode: String /* "EveryParticle" | "SpawnedParticles" | "SingleParticle" | "EScriptExecutionMode_MAX" */
    open var SpawnNumber: Any
    open var MaxEventsPerFrame: Any
    open var SourceEmitterID: Guid
    open var SourceEventName: String
    open var bRandomSpawnNumber: Boolean
    open var MinSpawnNumber: Any
    override fun clone(): NiagaraEventScriptProperties

    companion object {
        fun C(Other: UObject): NiagaraEventScriptProperties
        fun C(Other: Any): NiagaraEventScriptProperties
    }
}

external open class NiagaraSimulationStageBase : NiagaraMergeable {
    constructor()
    constructor(Outer: UObject)
    open var Script: NiagaraScript
    open var SimulationStageName: String
    open var bEnabled: Boolean

    companion object {
        fun Load(ResourceName: String): NiagaraSimulationStageBase
        fun Find(Outer: UObject, ResourceName: String): NiagaraSimulationStageBase
        fun GetDefaultObject(): NiagaraSimulationStageBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraSimulationStageBase
        fun C(Other: UObject): NiagaraSimulationStageBase
        fun C(Other: Any): NiagaraSimulationStageBase
    }
}

external open class NiagaraEmitter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bLocalSpace: Boolean
    open var bDeterminism: Boolean
    open var RandomSeed: Number
    open var AllocationMode: String /* "AutomaticEstimate" | "ManualEstimate" | "FixedCount" | "EParticleAllocationMode_MAX" */
    open var PreAllocationCount: Number
    open var UpdateScriptProps: NiagaraEmitterScriptProperties
    open var SpawnScriptProps: NiagaraEmitterScriptProperties
    open var EmitterSpawnScriptProps: NiagaraEmitterScriptProperties
    open var EmitterUpdateScriptProps: NiagaraEmitterScriptProperties
    open var AttributesToPreserve: Array<String>
    open var SimTarget: String /* "CPUSim" | "GPUComputeSim" | "ENiagaraSimTarget_MAX" */
    open var FixedBounds: Box
    open var MinDetailLevel: Number
    open var MaxDetailLevel: Number
    open var GlobalSpawnCountScaleOverrides: NiagaraDetailsLevelScaleOverrides
    open var Platforms: NiagaraPlatformSet
    open var ScalabilityOverrides: NiagaraEmitterScalabilityOverrides
    open var bInterpolatedSpawning: Boolean
    open var bFixedBounds: Boolean
    open var bUseMinDetailLevel: Boolean
    open var bUseMaxDetailLevel: Boolean
    open var bOverrideGlobalSpawnCountScale: Boolean
    open var bRequiresPersistentIDs: Boolean
    open var bCombineEventSpawn: Boolean
    open var MaxDeltaTimePerTick: Number
    open var bLimitDeltaTime: Boolean
    open var MaxGPUParticlesSpawnPerFrame: Number
    open var GraphSource: NiagaraScriptSourceBase
    open var ThumbnailImage: Texture2D
    open var ThumbnailImageOutOfDate: Boolean
    open var bExposeToLibrary: Boolean
    open var LibraryVisibility: String /* "Invalid" | "Unexposed" | "Library" | "Hidden" | "ENiagaraScriptLibraryVisibility_MAX" */
    open var bIsTemplateAsset: Boolean
    open var TemplateSpecification: String /* "None" | "Template" | "Behavior" | "ENiagaraScriptTemplateSpecification_MAX" */
    open var TemplateAssetDescription: String
    open var Category: String
    open var ScratchPadScripts: Array<NiagaraScript>
    open var ParentScratchPadScripts: Array<NiagaraScript>
    open var RendererBindings: NiagaraParameterStore
    open var ChangeId: Guid
    open var EditorData: NiagaraEditorDataBase
    open var EditorParameters: NiagaraEditorParametersAdapterBase
    open var UniqueEmitterName: String
    open var RendererProperties: Array<NiagaraRendererProperties>
    open var EventHandlerScriptProps: Array<NiagaraEventScriptProperties>
    open var SimulationStages: Array<NiagaraSimulationStageBase>
    open var GPUComputeScript: NiagaraScript
    open var SharedEventGeneratorIds: Array<String>
    open var Parent: NiagaraEmitter
    open var ParentAtLastMerge: NiagaraEmitter
    open var ParameterDefinitionsSubscriptions: Array<ParameterDefinitionsSubscription>
    open var MessageKeyToMessageMap: Any

    companion object {
        fun Load(ResourceName: String): NiagaraEmitter
        fun Find(Outer: UObject, ResourceName: String): NiagaraEmitter
        fun GetDefaultObject(): NiagaraEmitter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraEmitter
        fun C(Other: UObject): NiagaraEmitter
        fun C(Other: Any): NiagaraEmitter
    }
}

external open class NiagaraEmitterHandle {
    open var ID: Guid
    open var IdName: String
    open var bIsEnabled: Boolean
    open var Name: String
    open var Source: NiagaraEmitter
    open var LastMergedSource: NiagaraEmitter
    open var bIsolated: Boolean
    open var Instance: NiagaraEmitter
    open fun clone(): NiagaraEmitterHandle

    companion object {
        fun C(Other: UObject): NiagaraEmitterHandle
        fun C(Other: Any): NiagaraEmitterHandle
    }
}

external open class NiagaraSystemCompileRequest {
    open var RootObjects: Array<UObject>
    open fun clone(): NiagaraSystemCompileRequest

    companion object {
        fun C(Other: UObject): NiagaraSystemCompileRequest
        fun C(Other: Any): NiagaraSystemCompileRequest
    }
}

external open class NiagaraParameterDataSetBinding {
    open var ParameterOffset: Number
    open var DataSetComponentOffset: Number
    open fun clone(): NiagaraParameterDataSetBinding

    companion object {
        fun C(Other: UObject): NiagaraParameterDataSetBinding
        fun C(Other: Any): NiagaraParameterDataSetBinding
    }
}

external open class NiagaraParameterDataSetBindingCollection {
    open var FloatOffsets: Array<NiagaraParameterDataSetBinding>
    open var Int32Offsets: Array<NiagaraParameterDataSetBinding>
    open fun clone(): NiagaraParameterDataSetBindingCollection

    companion object {
        fun C(Other: UObject): NiagaraParameterDataSetBindingCollection
        fun C(Other: Any): NiagaraParameterDataSetBindingCollection
    }
}

external open class NiagaraSystemCompiledData {
    open var InstanceParamStore: NiagaraParameterStore
    open var DataSetCompiledData: NiagaraDataSetCompiledData
    open var SpawnInstanceParamsDataSetCompiledData: NiagaraDataSetCompiledData
    open var UpdateInstanceParamsDataSetCompiledData: NiagaraDataSetCompiledData
    open var SpawnInstanceGlobalBinding: NiagaraParameterDataSetBindingCollection
    open var SpawnInstanceSystemBinding: NiagaraParameterDataSetBindingCollection
    open var SpawnInstanceOwnerBinding: NiagaraParameterDataSetBindingCollection
    open var SpawnInstanceEmitterBindings: Array<NiagaraParameterDataSetBindingCollection>
    open var UpdateInstanceGlobalBinding: NiagaraParameterDataSetBindingCollection
    open var UpdateInstanceSystemBinding: NiagaraParameterDataSetBindingCollection
    open var UpdateInstanceOwnerBinding: NiagaraParameterDataSetBindingCollection
    open var UpdateInstanceEmitterBindings: Array<NiagaraParameterDataSetBindingCollection>
    open fun clone(): NiagaraSystemCompiledData

    companion object {
        fun C(Other: UObject): NiagaraSystemCompiledData
        fun C(Other: Any): NiagaraSystemCompiledData
    }
}

external open class NiagaraBakerTextureSource {
    open var SourceName: String
    open fun clone(): NiagaraBakerTextureSource

    companion object {
        fun C(Other: UObject): NiagaraBakerTextureSource
        fun C(Other: Any): NiagaraBakerTextureSource
    }
}

external open class NiagaraBakerTextureSettings {
    open var SourceBinding: NiagaraBakerTextureSource
    open var bUseFrameSize: Boolean
    open var FrameSize: IntPoint
    open var TextureSize: IntPoint
    open var GeneratedTexture: Texture2D
    open fun clone(): NiagaraBakerTextureSettings

    companion object {
        fun C(Other: UObject): NiagaraBakerTextureSettings
        fun C(Other: Any): NiagaraBakerTextureSettings
    }
}

external object ENiagaraBakerViewMode {
    var Perspective: String /* "Perspective" */
    var OrthoFront: String /* "OrthoFront" */
    var OrthoBack: String /* "OrthoBack" */
    var OrthoLeft: String /* "OrthoLeft" */
    var OrthoRight: String /* "OrthoRight" */
    var OrthoTop: String /* "OrthoTop" */
    var OrthoBottom: String /* "OrthoBottom" */
    var Num: String /* "Num" */
    var ENiagaraBakerViewMode_MAX: String /* "ENiagaraBakerViewMode_MAX" */
}

external open class NiagaraBakerSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var StartSeconds: Number
    open var DurationSeconds: Number
    open var FramesPerSecond: Number
    open var bPreviewLooping: Boolean
    open var FramesPerDimension: IntPoint
    open var OutputTextures: Array<NiagaraBakerTextureSettings>
    open var CameraViewportMode: String /* "Perspective" | "OrthoFront" | "OrthoBack" | "OrthoLeft" | "OrthoRight" | "OrthoTop" | "OrthoBottom" | "Num" | "ENiagaraBakerViewMode_MAX" */
    open var CameraViewportLocation: Vector
    open var CameraViewportRotation: Rotator
    open var CameraOrbitDistance: Number
    open var CameraFOV: Number
    open var CameraOrthoWidth: Number
    open var bUseCameraAspectRatio: Boolean
    open var CameraAspectRatio: Number
    open var bRenderComponentOnly: Boolean

    companion object {
        fun Load(ResourceName: String): NiagaraBakerSettings
        fun Find(Outer: UObject, ResourceName: String): NiagaraBakerSettings
        fun GetDefaultObject(): NiagaraBakerSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraBakerSettings
        fun C(Other: UObject): NiagaraBakerSettings
        fun C(Other: Any): NiagaraBakerSettings
    }
}

external object ENCPoolMethod {
    var None: String /* "None" */
    var AutoRelease: String /* "AutoRelease" */
    var ManualRelease: String /* "ManualRelease" */
    var ManualRelease_OnComplete: String /* "ManualRelease_OnComplete" */
    var FreeInPool: String /* "FreeInPool" */
    var ENCPoolMethod_MAX: String /* "ENCPoolMethod_MAX" */
}

external open class NiagaraSystem : FXSystemAsset {
    constructor()
    constructor(Outer: UObject)
    open var ThumbnailImage: Texture2D
    open var ThumbnailImageOutOfDate: Boolean
    open var bExposeToLibrary: Boolean
    open var LibraryVisibility: String /* "Invalid" | "Unexposed" | "Library" | "Hidden" | "ENiagaraScriptLibraryVisibility_MAX" */
    open var bIsTemplateAsset: Boolean
    open var TemplateSpecification: String /* "None" | "Template" | "Behavior" | "ENiagaraScriptTemplateSpecification_MAX" */
    open var TemplateAssetDescription: String
    open var Category: String
    open var ScratchPadScripts: Array<NiagaraScript>
    open var EditorOnlyAddedParameters: NiagaraParameterStore
    open var UpdateContext: NiagaraSystemUpdateContext
    open var bCompileForEdit: Boolean
    open var bBakeOutRapidIteration: Boolean
    open var bBakeOutRapidIterationOnCook: Boolean
    open var bCompressAttributes: Boolean
    open var bTrimAttributes: Boolean
    open var bTrimAttributesOnCook: Boolean
    open var bIgnoreParticleReadsForAttributeTrim: Boolean
    open var bDisableDebugSwitches: Boolean
    open var bDisableDebugSwitchesOnCook: Boolean
    open var ParameterDefinitionsSubscriptions: Array<ParameterDefinitionsSubscription>
    open var bSupportLargeWorldCoordinates: Boolean
    open var bOverrideCastShadow: Boolean
    open var bOverrideReceivesDecals: Boolean
    open var bOverrideRenderCustomDepth: Boolean
    open var bOverrideCustomDepthStencilValue: Boolean
    open var bOverrideCustomDepthStencilWriteMask: Boolean
    open var bCastShadow: Boolean
    open var bReceivesDecals: Boolean
    open var bRenderCustomDepth: Boolean
    open var CustomDepthStencilWriteMask: String /* "ERSM_Default" | "ERSM_255" | "ERSM_1" | "ERSM_2" | "ERSM_4" | "ERSM_8" | "ERSM_16" | "ERSM_32" | "ERSM_64" | "ERSM_128" | "ERSM_MAX" */
    open var CustomDepthStencilValue: Number
    open var bDumpDebugSystemInfo: Boolean
    open var bDumpDebugEmitterInfo: Boolean
    open var bRequireCurrentFrameData: Boolean
    open var bFixedBounds: Boolean
    open var EffectType: NiagaraEffectType
    open var bOverrideScalabilitySettings: Boolean
    open var bOverrideAllowCullingForLocalPlayers: Boolean
    open var bAllowCullingForLocalPlayersOverride: Boolean
    open var ScalabilityOverrides: Array<NiagaraSystemScalabilityOverride>
    open var SystemScalabilityOverrides: NiagaraSystemScalabilityOverrides
    open var EmitterHandles: Array<NiagaraEmitterHandle>
    open var ParameterCollectionOverrides: Array<NiagaraParameterCollectionInstance>
    open var ActiveCompilations: Array<NiagaraSystemCompileRequest>
    open var SystemSpawnScript: NiagaraScript
    open var SystemUpdateScript: NiagaraScript
    open var SystemCompiledData: NiagaraSystemCompiledData
    open var ExposedParameters: NiagaraUserRedirectionParameterStore
    open var EditorData: NiagaraEditorDataBase
    open var EditorParameters: NiagaraEditorParametersAdapterBase
    open var FixedBounds: Box
    open var bAutoDeactivate: Boolean
    open var bDeterminism: Boolean
    open var RandomSeed: Number
    open var WarmupTime: Number
    open var WarmupTickCount: Number
    open var WarmupTickDelta: Number
    open var bFixedTickDelta: Boolean
    open var FixedTickDeltaTime: Number
    open var BakerSettings: NiagaraBakerSettings
    open var BakerGeneratedSettings: NiagaraBakerSettings
    open var bHasSystemScriptDIsWithPerInstanceData: Boolean
    open var bNeedsGPUContextInitForDataInterfaces: Boolean
    open var UserDINamesReadInSystemScripts: Array<String>
    open var MessageKeyToMessageMap: Any
    open fun SpawnSystemAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bAutoDestroy: Boolean, bAutoActivate: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "ENCPoolMethod_MAX" */, bPreCullCheck: Boolean): NiagaraComponent

    companion object {
        fun Load(ResourceName: String): NiagaraSystem
        fun Find(Outer: UObject, ResourceName: String): NiagaraSystem
        fun GetDefaultObject(): NiagaraSystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NiagaraSystem
        fun C(Other: UObject): NiagaraSystem
        fun C(Other: Any): NiagaraSystem
        fun SpawnSystemAttached(SystemTemplate: NiagaraSystem, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bAutoDestroy: Boolean, bAutoActivate: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "ENCPoolMethod_MAX" */, bPreCullCheck: Boolean): NiagaraComponent
    }
}

external open class DebugFloatHistory {
    open var Samples: Array<Number>
    open var MaxSamples: Number
    open var MinValue: Number
    open var MaxValue: Number
    open var bAutoAdjustMinMax: Boolean
    open fun clone(): DebugFloatHistory

    companion object {
        fun C(Other: UObject): DebugFloatHistory
        fun C(Other: Any): DebugFloatHistory
        fun AddFloatHistorySample(Value: Number, FloatHistory: DebugFloatHistory): DebugFloatHistory
    }
}

external interface `T$292` {
    var Handle: TimerHandle
    var `$`: TimerHandle
}

external open class TimerHandle {
    open var Handle: Any
    open fun clone(): TimerHandle
    open fun InvalidateTimerHandle(): `T$292`
    open fun IsValidTimerHandle(): Boolean

    companion object {
        fun C(Other: UObject): TimerHandle
        fun C(Other: Any): TimerHandle
        fun InvalidateTimerHandle(Handle: TimerHandle = definedExternally): `T$292`
        fun IsValidTimerHandle(Handle: TimerHandle): Boolean
        fun K2_SetTimerDelegate(delegate: UnrealEngineDelegate<() -> Unit>, Time: Number, bLooping: Boolean, InitialStartDelay: Number, InitialStartDelayVariance: Number): TimerHandle
        fun K2_SetTimerForNextTickDelegate(delegate: UnrealEngineDelegate<() -> Unit>): TimerHandle
    }
}

external object EQuitPreference {
    var Quit: String /* "Quit" */
    var Background: String /* "Background" */
    var EQuitPreference_MAX: String /* "EQuitPreference_MAX" */
}

external object ETextureRenderTargetFormat {
    var RTF_R8: String /* "RTF_R8" */
    var RTF_RG8: String /* "RTF_RG8" */
    var RTF_RGBA8: String /* "RTF_RGBA8" */
    var RTF_RGBA8_SRGB: String /* "RTF_RGBA8_SRGB" */
    var RTF_R16f: String /* "RTF_R16f" */
    var RTF_RG16f: String /* "RTF_RG16f" */
    var RTF_RGBA16f: String /* "RTF_RGBA16f" */
    var RTF_R32f: String /* "RTF_R32f" */
    var RTF_RG32f: String /* "RTF_RG32f" */
    var RTF_RGBA32f: String /* "RTF_RGBA32f" */
    var RTF_RGB10A2: String /* "RTF_RGB10A2" */
    var RTF_MAX: String /* "RTF_MAX" */
}

external object EPixelFormat {
    var PF_Unknown: String /* "PF_Unknown" */
    var PF_A32B32G32R32F: String /* "PF_A32B32G32R32F" */
    var PF_B8G8R8A8: String /* "PF_B8G8R8A8" */
    var PF_G8: String /* "PF_G8" */
    var PF_G16: String /* "PF_G16" */
    var PF_DXT1: String /* "PF_DXT1" */
    var PF_DXT3: String /* "PF_DXT3" */
    var PF_DXT5: String /* "PF_DXT5" */
    var PF_UYVY: String /* "PF_UYVY" */
    var PF_FloatRGB: String /* "PF_FloatRGB" */
    var PF_FloatRGBA: String /* "PF_FloatRGBA" */
    var PF_DepthStencil: String /* "PF_DepthStencil" */
    var PF_ShadowDepth: String /* "PF_ShadowDepth" */
    var PF_R32_FLOAT: String /* "PF_R32_FLOAT" */
    var PF_G16R16: String /* "PF_G16R16" */
    var PF_G16R16F: String /* "PF_G16R16F" */
    var PF_G16R16F_FILTER: String /* "PF_G16R16F_FILTER" */
    var PF_G32R32F: String /* "PF_G32R32F" */
    var PF_A2B10G10R10: String /* "PF_A2B10G10R10" */
    var PF_A16B16G16R16: String /* "PF_A16B16G16R16" */
    var PF_D24: String /* "PF_D24" */
    var PF_R16F: String /* "PF_R16F" */
    var PF_R16F_FILTER: String /* "PF_R16F_FILTER" */
    var PF_BC5: String /* "PF_BC5" */
    var PF_V8U8: String /* "PF_V8U8" */
    var PF_A1: String /* "PF_A1" */
    var PF_FloatR11G11B10: String /* "PF_FloatR11G11B10" */
    var PF_A8: String /* "PF_A8" */
    var PF_R32_UINT: String /* "PF_R32_UINT" */
    var PF_R32_SINT: String /* "PF_R32_SINT" */
    var PF_PVRTC2: String /* "PF_PVRTC2" */
    var PF_PVRTC4: String /* "PF_PVRTC4" */
    var PF_R16_UINT: String /* "PF_R16_UINT" */
    var PF_R16_SINT: String /* "PF_R16_SINT" */
    var PF_R16G16B16A16_UINT: String /* "PF_R16G16B16A16_UINT" */
    var PF_R16G16B16A16_SINT: String /* "PF_R16G16B16A16_SINT" */
    var PF_R5G6B5_UNORM: String /* "PF_R5G6B5_UNORM" */
    var PF_R8G8B8A8: String /* "PF_R8G8B8A8" */
    var PF_A8R8G8B8: String /* "PF_A8R8G8B8" */
    var PF_BC4: String /* "PF_BC4" */
    var PF_R8G8: String /* "PF_R8G8" */
    var PF_ATC_RGB: String /* "PF_ATC_RGB" */
    var PF_ATC_RGBA_E: String /* "PF_ATC_RGBA_E" */
    var PF_ATC_RGBA_I: String /* "PF_ATC_RGBA_I" */
    var PF_X24_G8: String /* "PF_X24_G8" */
    var PF_ETC1: String /* "PF_ETC1" */
    var PF_ETC2_RGB: String /* "PF_ETC2_RGB" */
    var PF_ETC2_RGBA: String /* "PF_ETC2_RGBA" */
    var PF_R32G32B32A32_UINT: String /* "PF_R32G32B32A32_UINT" */
    var PF_R16G16_UINT: String /* "PF_R16G16_UINT" */
    var PF_ASTC_4x4: String /* "PF_ASTC_4x4" */
    var PF_ASTC_6x6: String /* "PF_ASTC_6x6" */
    var PF_ASTC_8x8: String /* "PF_ASTC_8x8" */
    var PF_ASTC_10x10: String /* "PF_ASTC_10x10" */
    var PF_ASTC_12x12: String /* "PF_ASTC_12x12" */
    var PF_BC6H: String /* "PF_BC6H" */
    var PF_BC7: String /* "PF_BC7" */
    var PF_R8_UINT: String /* "PF_R8_UINT" */
    var PF_L8: String /* "PF_L8" */
    var PF_XGXR8: String /* "PF_XGXR8" */
    var PF_R8G8B8A8_UINT: String /* "PF_R8G8B8A8_UINT" */
    var PF_R8G8B8A8_SNORM: String /* "PF_R8G8B8A8_SNORM" */
    var PF_R16G16B16A16_UNORM: String /* "PF_R16G16B16A16_UNORM" */
    var PF_R16G16B16A16_SNORM: String /* "PF_R16G16B16A16_SNORM" */
    var PF_PLATFORM_HDR_0: String /* "PF_PLATFORM_HDR_0" */
    var PF_PLATFORM_HDR_1: String /* "PF_PLATFORM_HDR_1" */
    var PF_PLATFORM_HDR_2: String /* "PF_PLATFORM_HDR_2" */
    var PF_NV12: String /* "PF_NV12" */
    var PF_R32G32_UINT: String /* "PF_R32G32_UINT" */
    var PF_ETC2_R11_EAC: String /* "PF_ETC2_R11_EAC" */
    var PF_ETC2_RG11_EAC: String /* "PF_ETC2_RG11_EAC" */
    var PF_R8: String /* "PF_R8" */
    var PF_B5G5R5A1_UNORM: String /* "PF_B5G5R5A1_UNORM" */
    var PF_G16R16_SNORM: String /* "PF_G16R16_SNORM" */
    var PF_R8G8_UINT: String /* "PF_R8G8_UINT" */
    var PF_R32G32B32_UINT: String /* "PF_R32G32B32_UINT" */
    var PF_R32G32B32_SINT: String /* "PF_R32G32B32_SINT" */
    var PF_R32G32B32F: String /* "PF_R32G32B32F" */
    var PF_R8_SINT: String /* "PF_R8_SINT" */
    var PF_R64_UINT: String /* "PF_R64_UINT" */
    var PF_MAX: String /* "PF_MAX" */
}

external open class TextureRenderTarget2D : TextureRenderTarget {
    constructor()
    constructor(Outer: UObject)
    open var SizeX: Number
    open var SizeY: Number
    open var ClearColor: LinearColor
    open var AddressX: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressY: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var bForceLinearGamma: Boolean
    open var bHDR: Boolean
    open var bGPUSharedFlag: Boolean
    open var RenderTargetFormat: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */
    open var bAutoGenerateMips: Boolean
    open var MipsSamplerFilter: String /* "TF_Nearest" | "TF_Bilinear" | "TF_Trilinear" | "TF_Default" | "TF_MAX" */
    open var MipsAddressU: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var MipsAddressV: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var OverrideFormat: String /* "PF_Unknown" | "PF_A32B32G32R32F" | "PF_B8G8R8A8" | "PF_G8" | "PF_G16" | "PF_DXT1" | "PF_DXT3" | "PF_DXT5" | "PF_UYVY" | "PF_FloatRGB" | "PF_FloatRGBA" | "PF_DepthStencil" | "PF_ShadowDepth" | "PF_R32_FLOAT" | "PF_G16R16" | "PF_G16R16F" | "PF_G16R16F_FILTER" | "PF_G32R32F" | "PF_A2B10G10R10" | "PF_A16B16G16R16" | "PF_D24" | "PF_R16F" | "PF_R16F_FILTER" | "PF_BC5" | "PF_V8U8" | "PF_A1" | "PF_FloatR11G11B10" | "PF_A8" | "PF_R32_UINT" | "PF_R32_SINT" | "PF_PVRTC2" | "PF_PVRTC4" | "PF_R16_UINT" | "PF_R16_SINT" | "PF_R16G16B16A16_UINT" | "PF_R16G16B16A16_SINT" | "PF_R5G6B5_UNORM" | "PF_R8G8B8A8" | "PF_A8R8G8B8" | "PF_BC4" | "PF_R8G8" | "PF_ATC_RGB" | "PF_ATC_RGBA_E" | "PF_ATC_RGBA_I" | "PF_X24_G8" | "PF_ETC1" | "PF_ETC2_RGB" | "PF_ETC2_RGBA" | "PF_R32G32B32A32_UINT" | "PF_R16G16_UINT" | "PF_ASTC_4x4" | "PF_ASTC_6x6" | "PF_ASTC_8x8" | "PF_ASTC_10x10" | "PF_ASTC_12x12" | "PF_BC6H" | "PF_BC7" | "PF_R8_UINT" | "PF_L8" | "PF_XGXR8" | "PF_R8G8B8A8_UINT" | "PF_R8G8B8A8_SNORM" | "PF_R16G16B16A16_UNORM" | "PF_R16G16B16A16_SNORM" | "PF_PLATFORM_HDR_0" | "PF_PLATFORM_HDR_1" | "PF_PLATFORM_HDR_2" | "PF_NV12" | "PF_R32G32_UINT" | "PF_ETC2_R11_EAC" | "PF_ETC2_RG11_EAC" | "PF_R8" | "PF_B5G5R5A1_UNORM" | "PF_G16R16_SNORM" | "PF_R8G8_UINT" | "PF_R32G32B32_UINT" | "PF_R32G32B32_SINT" | "PF_R32G32B32F" | "PF_R8_SINT" | "PF_R64_UINT" | "PF_MAX" */
    open fun ReleaseRenderTarget2D()
    open fun RenderTargetCreateStaticTextureEditorOnly(Name: String, CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_HalfFloat" | "TC_LQ" | "TC_EncodedReflectionCapture" | "TC_MAX" */, MipSettings: String /* "TMGS_FromTextureGroup" | "TMGS_SimpleAverage" | "TMGS_Sharpen0" | "TMGS_Sharpen1" | "TMGS_Sharpen2" | "TMGS_Sharpen3" | "TMGS_Sharpen4" | "TMGS_Sharpen5" | "TMGS_Sharpen6" | "TMGS_Sharpen7" | "TMGS_Sharpen8" | "TMGS_Sharpen9" | "TMGS_Sharpen10" | "TMGS_NoMipmaps" | "TMGS_LeaveExistingMips" | "TMGS_Blur1" | "TMGS_Blur2" | "TMGS_Blur3" | "TMGS_Blur4" | "TMGS_Blur5" | "TMGS_Unfiltered" | "TMGS_Angular" | "TMGS_MAX" */): Texture2D

    companion object {
        fun Load(ResourceName: String): TextureRenderTarget2D
        fun Find(Outer: UObject, ResourceName: String): TextureRenderTarget2D
        fun GetDefaultObject(): TextureRenderTarget2D
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureRenderTarget2D
        fun C(Other: UObject): TextureRenderTarget2D
        fun C(Other: Any): TextureRenderTarget2D
        fun ReleaseRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D)
        fun RenderTargetCreateStaticTextureEditorOnly(RenderTarget: TextureRenderTarget2D, Name: String, CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_HalfFloat" | "TC_LQ" | "TC_EncodedReflectionCapture" | "TC_MAX" */, MipSettings: String /* "TMGS_FromTextureGroup" | "TMGS_SimpleAverage" | "TMGS_Sharpen0" | "TMGS_Sharpen1" | "TMGS_Sharpen2" | "TMGS_Sharpen3" | "TMGS_Sharpen4" | "TMGS_Sharpen5" | "TMGS_Sharpen6" | "TMGS_Sharpen7" | "TMGS_Sharpen8" | "TMGS_Sharpen9" | "TMGS_Sharpen10" | "TMGS_NoMipmaps" | "TMGS_LeaveExistingMips" | "TMGS_Blur1" | "TMGS_Blur2" | "TMGS_Blur3" | "TMGS_Blur4" | "TMGS_Blur5" | "TMGS_Unfiltered" | "TMGS_Angular" | "TMGS_MAX" */): Texture2D
    }
}

external open class DrawToRenderTargetContext {
    open var RenderTarget: TextureRenderTarget2D
    open fun clone(): DrawToRenderTargetContext

    companion object {
        fun C(Other: UObject): DrawToRenderTargetContext
        fun C(Other: Any): DrawToRenderTargetContext
    }
}

external open class TextureRenderTarget2DArray : TextureRenderTarget {
    constructor()
    constructor(Outer: UObject)
    open var SizeX: Number
    open var SizeY: Number
    open var Slices: Number
    open var ClearColor: LinearColor
    open var OverrideFormat: String /* "PF_Unknown" | "PF_A32B32G32R32F" | "PF_B8G8R8A8" | "PF_G8" | "PF_G16" | "PF_DXT1" | "PF_DXT3" | "PF_DXT5" | "PF_UYVY" | "PF_FloatRGB" | "PF_FloatRGBA" | "PF_DepthStencil" | "PF_ShadowDepth" | "PF_R32_FLOAT" | "PF_G16R16" | "PF_G16R16F" | "PF_G16R16F_FILTER" | "PF_G32R32F" | "PF_A2B10G10R10" | "PF_A16B16G16R16" | "PF_D24" | "PF_R16F" | "PF_R16F_FILTER" | "PF_BC5" | "PF_V8U8" | "PF_A1" | "PF_FloatR11G11B10" | "PF_A8" | "PF_R32_UINT" | "PF_R32_SINT" | "PF_PVRTC2" | "PF_PVRTC4" | "PF_R16_UINT" | "PF_R16_SINT" | "PF_R16G16B16A16_UINT" | "PF_R16G16B16A16_SINT" | "PF_R5G6B5_UNORM" | "PF_R8G8B8A8" | "PF_A8R8G8B8" | "PF_BC4" | "PF_R8G8" | "PF_ATC_RGB" | "PF_ATC_RGBA_E" | "PF_ATC_RGBA_I" | "PF_X24_G8" | "PF_ETC1" | "PF_ETC2_RGB" | "PF_ETC2_RGBA" | "PF_R32G32B32A32_UINT" | "PF_R16G16_UINT" | "PF_ASTC_4x4" | "PF_ASTC_6x6" | "PF_ASTC_8x8" | "PF_ASTC_10x10" | "PF_ASTC_12x12" | "PF_BC6H" | "PF_BC7" | "PF_R8_UINT" | "PF_L8" | "PF_XGXR8" | "PF_R8G8B8A8_UINT" | "PF_R8G8B8A8_SNORM" | "PF_R16G16B16A16_UNORM" | "PF_R16G16B16A16_SNORM" | "PF_PLATFORM_HDR_0" | "PF_PLATFORM_HDR_1" | "PF_PLATFORM_HDR_2" | "PF_NV12" | "PF_R32G32_UINT" | "PF_ETC2_R11_EAC" | "PF_ETC2_RG11_EAC" | "PF_R8" | "PF_B5G5R5A1_UNORM" | "PF_G16R16_SNORM" | "PF_R8G8_UINT" | "PF_R32G32B32_UINT" | "PF_R32G32B32_SINT" | "PF_R32G32B32F" | "PF_R8_SINT" | "PF_R64_UINT" | "PF_MAX" */
    open var bHDR: Boolean
    open var bForceLinearGamma: Boolean

    companion object {
        fun Load(ResourceName: String): TextureRenderTarget2DArray
        fun Find(Outer: UObject, ResourceName: String): TextureRenderTarget2DArray
        fun GetDefaultObject(): TextureRenderTarget2DArray
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureRenderTarget2DArray
        fun C(Other: UObject): TextureRenderTarget2DArray
        fun C(Other: Any): TextureRenderTarget2DArray
    }
}

external open class TextureRenderTargetVolume : TextureRenderTarget {
    constructor()
    constructor(Outer: UObject)
    open var SizeX: Number
    open var SizeY: Number
    open var SizeZ: Number
    open var ClearColor: LinearColor
    open var OverrideFormat: String /* "PF_Unknown" | "PF_A32B32G32R32F" | "PF_B8G8R8A8" | "PF_G8" | "PF_G16" | "PF_DXT1" | "PF_DXT3" | "PF_DXT5" | "PF_UYVY" | "PF_FloatRGB" | "PF_FloatRGBA" | "PF_DepthStencil" | "PF_ShadowDepth" | "PF_R32_FLOAT" | "PF_G16R16" | "PF_G16R16F" | "PF_G16R16F_FILTER" | "PF_G32R32F" | "PF_A2B10G10R10" | "PF_A16B16G16R16" | "PF_D24" | "PF_R16F" | "PF_R16F_FILTER" | "PF_BC5" | "PF_V8U8" | "PF_A1" | "PF_FloatR11G11B10" | "PF_A8" | "PF_R32_UINT" | "PF_R32_SINT" | "PF_PVRTC2" | "PF_PVRTC4" | "PF_R16_UINT" | "PF_R16_SINT" | "PF_R16G16B16A16_UINT" | "PF_R16G16B16A16_SINT" | "PF_R5G6B5_UNORM" | "PF_R8G8B8A8" | "PF_A8R8G8B8" | "PF_BC4" | "PF_R8G8" | "PF_ATC_RGB" | "PF_ATC_RGBA_E" | "PF_ATC_RGBA_I" | "PF_X24_G8" | "PF_ETC1" | "PF_ETC2_RGB" | "PF_ETC2_RGBA" | "PF_R32G32B32A32_UINT" | "PF_R16G16_UINT" | "PF_ASTC_4x4" | "PF_ASTC_6x6" | "PF_ASTC_8x8" | "PF_ASTC_10x10" | "PF_ASTC_12x12" | "PF_BC6H" | "PF_BC7" | "PF_R8_UINT" | "PF_L8" | "PF_XGXR8" | "PF_R8G8B8A8_UINT" | "PF_R8G8B8A8_SNORM" | "PF_R16G16B16A16_UNORM" | "PF_R16G16B16A16_SNORM" | "PF_PLATFORM_HDR_0" | "PF_PLATFORM_HDR_1" | "PF_PLATFORM_HDR_2" | "PF_NV12" | "PF_R32G32_UINT" | "PF_ETC2_R11_EAC" | "PF_ETC2_RG11_EAC" | "PF_R8" | "PF_B5G5R5A1_UNORM" | "PF_G16R16_SNORM" | "PF_R8G8_UINT" | "PF_R32G32B32_UINT" | "PF_R32G32B32_SINT" | "PF_R32G32B32F" | "PF_R8_SINT" | "PF_R64_UINT" | "PF_MAX" */
    open var bHDR: Boolean
    open var bForceLinearGamma: Boolean

    companion object {
        fun Load(ResourceName: String): TextureRenderTargetVolume
        fun Find(Outer: UObject, ResourceName: String): TextureRenderTargetVolume
        fun GetDefaultObject(): TextureRenderTargetVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureRenderTargetVolume
        fun C(Other: UObject): TextureRenderTargetVolume
        fun C(Other: Any): TextureRenderTargetVolume
    }
}

external object EMIDCreationFlags {
    var None: String /* "None" */
    var Transient: String /* "Transient" */
    var EMIDCreationFlags_MAX: String /* "EMIDCreationFlags_MAX" */
}

external object ESpawnActorCollisionHandlingMethod {
    var Undefined: String /* "Undefined" */
    var AlwaysSpawn: String /* "AlwaysSpawn" */
    var AdjustIfPossibleButAlwaysSpawn: String /* "AdjustIfPossibleButAlwaysSpawn" */
    var AdjustIfPossibleButDontSpawnIfColliding: String /* "AdjustIfPossibleButDontSpawnIfColliding" */
    var DontSpawnIfColliding: String /* "DontSpawnIfColliding" */
    var ESpawnActorCollisionHandlingMethod_MAX: String /* "ESpawnActorCollisionHandlingMethod_MAX" */
}

external open class PredictProjectilePathParams {
    open var StartLocation: Vector
    open var LaunchVelocity: Vector
    open var bTraceWithCollision: Boolean
    open var ProjectileRadius: Number
    open var MaxSimTime: Number
    open var bTraceWithChannel: Boolean
    open var TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>
    open var ActorsToIgnore: Array<Actor>
    open var SimFrequency: Number
    open var OverrideGravityZ: Number
    open var DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */
    open var DrawDebugTime: Number
    open var bTraceComplex: Boolean
    open fun clone(): PredictProjectilePathParams

    companion object {
        fun C(Other: UObject): PredictProjectilePathParams
        fun C(Other: Any): PredictProjectilePathParams
    }
}

external open class PredictProjectilePathPointData {
    open var Location: Vector
    open var Velocity: Vector
    open var Time: Number
    open fun clone(): PredictProjectilePathPointData

    companion object {
        fun C(Other: UObject): PredictProjectilePathPointData
        fun C(Other: Any): PredictProjectilePathPointData
    }
}

external open class PredictProjectilePathResult {
    open var PathData: Array<PredictProjectilePathPointData>
    open var LastTraceDestination: PredictProjectilePathPointData
    open var HitResult: HitResult
    open fun clone(): PredictProjectilePathResult

    companion object {
        fun C(Other: UObject): PredictProjectilePathResult
        fun C(Other: Any): PredictProjectilePathResult
    }
}

external object ESuggestProjVelocityTraceOption {
    var DoNotTrace: String /* "DoNotTrace" */
    var TraceFullPath: String /* "TraceFullPath" */
    var OnlyTraceWhileAscending: String /* "OnlyTraceWhileAscending" */
    var ESuggestProjVelocityTraceOption_MAX: String /* "ESuggestProjVelocityTraceOption_MAX" */
}

external open class Interface : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Interface
        fun Find(Outer: UObject, ResourceName: String): Interface
        fun GetDefaultObject(): Interface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Interface
        fun C(Other: UObject): Interface
        fun C(Other: Any): Interface
    }
}

external object EMouseCaptureMode {
    var NoCapture: String /* "NoCapture" */
    var CapturePermanently: String /* "CapturePermanently" */
    var CapturePermanently_IncludingInitialMouseDown: String /* "CapturePermanently_IncludingInitialMouseDown" */
    var CaptureDuringMouseDown: String /* "CaptureDuringMouseDown" */
    var CaptureDuringRightMouseDown: String /* "CaptureDuringRightMouseDown" */
    var EMouseCaptureMode_MAX: String /* "EMouseCaptureMode_MAX" */
}

external object EGrammaticalGender {
    var Neuter: String /* "Neuter" */
    var Masculine: String /* "Masculine" */
    var Feminine: String /* "Feminine" */
    var Mixed: String /* "Mixed" */
    var EGrammaticalGender_MAX: String /* "EGrammaticalGender_MAX" */
}

external object EGrammaticalNumber {
    var Singular: String /* "Singular" */
    var Plural: String /* "Plural" */
    var EGrammaticalNumber_MAX: String /* "EGrammaticalNumber_MAX" */
}

external open class DialogueVoice : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Gender: String /* "Neuter" | "Masculine" | "Feminine" | "Mixed" | "EGrammaticalGender_MAX" */
    open var Plurality: String /* "Singular" | "Plural" | "EGrammaticalNumber_MAX" */
    open var LocalizationGUID: Guid

    companion object {
        fun Load(ResourceName: String): DialogueVoice
        fun Find(Outer: UObject, ResourceName: String): DialogueVoice
        fun GetDefaultObject(): DialogueVoice
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DialogueVoice
        fun C(Other: UObject): DialogueVoice
        fun C(Other: Any): DialogueVoice
    }
}

external open class DialogueContext {
    open var Speaker: DialogueVoice
    open var Targets: Array<DialogueVoice>
    open fun clone(): DialogueContext

    companion object {
        fun C(Other: UObject): DialogueContext
        fun C(Other: Any): DialogueContext
    }
}

external open class DialogueSoundWaveProxy : SoundBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DialogueSoundWaveProxy
        fun Find(Outer: UObject, ResourceName: String): DialogueSoundWaveProxy
        fun GetDefaultObject(): DialogueSoundWaveProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DialogueSoundWaveProxy
        fun C(Other: UObject): DialogueSoundWaveProxy
        fun C(Other: Any): DialogueSoundWaveProxy
    }
}

external open class DialogueContextMapping {
    open var Context: DialogueContext
    open var SoundWave: SoundWave
    open var LocalizationKeyFormat: String
    open var Proxy: DialogueSoundWaveProxy
    open fun clone(): DialogueContextMapping

    companion object {
        fun C(Other: UObject): DialogueContextMapping
        fun C(Other: Any): DialogueContextMapping
    }
}

external open class DialogueWave : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bMature: Boolean
    open var bOverride_SubtitleOverride: Boolean
    open var SpokenText: String
    open var SubtitleOverride: String
    open var VoiceActorDirection: String
    open var ContextMappings: Array<DialogueContextMapping>
    open var LocalizationGUID: Guid
    open fun SpawnDialogueAttached(Context: DialogueContext, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent

    companion object {
        fun Load(ResourceName: String): DialogueWave
        fun Find(Outer: UObject, ResourceName: String): DialogueWave
        fun GetDefaultObject(): DialogueWave
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DialogueWave
        fun C(Other: UObject): DialogueWave
        fun C(Other: Any): DialogueWave
        fun SpawnDialogueAttached(Dialogue: DialogueWave, Context: DialogueContext, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent
    }
}

external open class InitialActiveSoundParams : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AudioParams: Array<AudioParameter>

    companion object {
        fun Load(ResourceName: String): InitialActiveSoundParams
        fun Find(Outer: UObject, ResourceName: String): InitialActiveSoundParams
        fun GetDefaultObject(): InitialActiveSoundParams
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InitialActiveSoundParams
        fun C(Other: UObject): InitialActiveSoundParams
        fun C(Other: Any): InitialActiveSoundParams
    }
}

external object EAudioMixerStreamDataFormatType {
    var Unknown: String /* "Unknown" */
    var Float: String /* "Float" */
    var Int16: String /* "Int16" */
    var Unsupported: String /* "Unsupported" */
    var EAudioMixerStreamDataFormatType_MAX: String /* "EAudioMixerStreamDataFormatType_MAX" */
}

external object EAudioMixerChannelType {
    var FrontLeft: String /* "FrontLeft" */
    var FrontRight: String /* "FrontRight" */
    var FrontCenter: String /* "FrontCenter" */
    var LowFrequency: String /* "LowFrequency" */
    var BackLeft: String /* "BackLeft" */
    var BackRight: String /* "BackRight" */
    var FrontLeftOfCenter: String /* "FrontLeftOfCenter" */
    var FrontRightOfCenter: String /* "FrontRightOfCenter" */
    var BackCenter: String /* "BackCenter" */
    var SideLeft: String /* "SideLeft" */
    var SideRight: String /* "SideRight" */
    var TopCenter: String /* "TopCenter" */
    var TopFrontLeft: String /* "TopFrontLeft" */
    var TopFrontCenter: String /* "TopFrontCenter" */
    var TopFrontRight: String /* "TopFrontRight" */
    var TopBackLeft: String /* "TopBackLeft" */
    var TopBackCenter: String /* "TopBackCenter" */
    var TopBackRight: String /* "TopBackRight" */
    var Unknown: String /* "Unknown" */
    var ChannelTypeCount: String /* "ChannelTypeCount" */
    var DefaultChannel: String /* "DefaultChannel" */
    var EAudioMixerChannelType_MAX: String /* "EAudioMixerChannelType_MAX" */
}

external open class AudioOutputDeviceInfo {
    open var Name: String
    open var DeviceID: String
    open var NumChannels: Number
    open var SampleRate: Number
    open var Format: String /* "Unknown" | "Float" | "Int16" | "Unsupported" | "EAudioMixerStreamDataFormatType_MAX" */
    open var OutputChannelArray: Array<String /* "FrontLeft" | "FrontRight" | "FrontCenter" | "LowFrequency" | "BackLeft" | "BackRight" | "FrontLeftOfCenter" | "FrontRightOfCenter" | "BackCenter" | "SideLeft" | "SideRight" | "TopCenter" | "TopFrontLeft" | "TopFrontCenter" | "TopFrontRight" | "TopBackLeft" | "TopBackCenter" | "TopBackRight" | "Unknown" | "ChannelTypeCount" | "DefaultChannel" | "EAudioMixerChannelType_MAX" */>
    open var bIsSystemDefault: Boolean
    open var bIsCurrentDevice: Boolean
    open fun clone(): AudioOutputDeviceInfo
    open fun AudioOutputDeviceInfoToString(): String

    companion object {
        fun C(Other: UObject): AudioOutputDeviceInfo
        fun C(Other: Any): AudioOutputDeviceInfo
        fun AudioOutputDeviceInfoToString(Info: AudioOutputDeviceInfo): String
    }
}

external object ESwapAudioOutputDeviceResultState {
    var Failure: String /* "Failure" */
    var Success: String /* "Success" */
    var None: String /* "None" */
    var ESwapAudioOutputDeviceResultState_MAX: String /* "ESwapAudioOutputDeviceResultState_MAX" */
}

external open class SwapAudioOutputResult {
    open var CurrentDeviceId: String
    open var RequestedDeviceId: String
    open var Result: String /* "Failure" | "Success" | "None" | "ESwapAudioOutputDeviceResultState_MAX" */
    open fun clone(): SwapAudioOutputResult

    companion object {
        fun C(Other: UObject): SwapAudioOutputResult
        fun C(Other: Any): SwapAudioOutputResult
    }
}

external object EPathFollowingResult {
    var Success: String /* "Success" */
    var Blocked: String /* "Blocked" */
    var OffPath: String /* "OffPath" */
    var Aborted: String /* "Aborted" */
    var Skipped_DEPRECATED: String /* "Skipped_DEPRECATED" */
    var Invalid: String /* "Invalid" */
    var EPathFollowingResult_MAX: String /* "EPathFollowingResult_MAX" */
}

external open class AIRequestID {
    open var RequestID: Any
    open fun clone(): AIRequestID

    companion object {
        fun C(Other: UObject): AIRequestID
        fun C(Other: Any): AIRequestID
    }
}

external open class AIAsyncTaskBlueprintProxy : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OnSuccess: UnrealEngineMulticastDelegate<(MovementResult: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */) -> Unit>
    open var OnFail: UnrealEngineMulticastDelegate<(MovementResult: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */) -> Unit>
    open fun OnMoveCompleted(RequestID: AIRequestID, MovementResult: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */)

    companion object {
        fun Load(ResourceName: String): AIAsyncTaskBlueprintProxy
        fun Find(Outer: UObject, ResourceName: String): AIAsyncTaskBlueprintProxy
        fun GetDefaultObject(): AIAsyncTaskBlueprintProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIAsyncTaskBlueprintProxy
        fun C(Other: UObject): AIAsyncTaskBlueprintProxy
        fun C(Other: Any): AIAsyncTaskBlueprintProxy
    }
}

external open class BlackboardKeyType : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BlackboardKeyType
        fun Find(Outer: UObject, ResourceName: String): BlackboardKeyType
        fun GetDefaultObject(): BlackboardKeyType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlackboardKeyType
        fun C(Other: UObject): BlackboardKeyType
        fun C(Other: Any): BlackboardKeyType
    }
}

external open class BlackboardKeySelector {
    open var AllowedTypes: Array<BlackboardKeyType>
    open var SelectedKeyName: String
    open var SelectedKeyType: UnrealEngineClass
    open var SelectedKeyID: Number
    open var bNoneIsAllowedValue: Boolean
    open fun clone(): BlackboardKeySelector

    companion object {
        fun C(Other: UObject): BlackboardKeySelector
        fun C(Other: Any): BlackboardKeySelector
    }
}

external open class BlackboardEntry {
    open var EntryName: String
    open var EntryDescription: String
    open var EntryCategory: String
    open var KeyType: BlackboardKeyType
    open var bInstanceSynced: Boolean
    open fun clone(): BlackboardEntry

    companion object {
        fun C(Other: UObject): BlackboardEntry
        fun C(Other: Any): BlackboardEntry
    }
}

external open class BlackboardData : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var Parent: BlackboardData
    open var ParentKeys: Array<BlackboardEntry>
    open var Keys: Array<BlackboardEntry>
    open var bHasSynchronizedKeys: Boolean

    companion object {
        fun Load(ResourceName: String): BlackboardData
        fun Find(Outer: UObject, ResourceName: String): BlackboardData
        fun GetDefaultObject(): BlackboardData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlackboardData
        fun C(Other: UObject): BlackboardData
        fun C(Other: Any): BlackboardData
    }
}

external interface `T$293` {
    var ResultRotation: Rotator
    var `$`: Boolean
}

external interface `T$294` {
    var ResultLocation: Vector
    var `$`: Boolean
}

external open class BlackboardComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var BrainComp: BrainComponent
    open var DefaultBlackboardAsset: BlackboardData
    open var BlackboardAsset: BlackboardData
    open var KeyInstances: Array<BlackboardKeyType>
    open fun SetValueAsVector(KeyName: String, VectorValue: Vector)
    open fun SetValueAsString(KeyName: String, StringValue: String)
    open fun SetValueAsRotator(KeyName: String, VectorValue: Rotator)
    open fun SetValueAsObject(KeyName: String, ObjectValue: UObject)
    open fun SetValueAsName(KeyName: String, NameValue: String)
    open fun SetValueAsInt(KeyName: String, IntValue: Number)
    open fun SetValueAsFloat(KeyName: String, FloatValue: Number)
    open fun SetValueAsEnum(KeyName: String, EnumValue: Number)
    open fun SetValueAsClass(KeyName: String, ClassValue: UnrealEngineClass)
    open fun SetValueAsBool(KeyName: String, BoolValue: Boolean)
    open fun IsVectorValueSet(KeyName: String): Boolean
    open fun GetValueAsVector(KeyName: String): Vector
    open fun GetValueAsString(KeyName: String): String
    open fun GetValueAsRotator(KeyName: String): Rotator
    open fun GetValueAsObject(KeyName: String): UObject
    open fun GetValueAsName(KeyName: String): String
    open fun GetValueAsInt(KeyName: String): Number
    open fun GetValueAsFloat(KeyName: String): Number
    open fun GetValueAsEnum(KeyName: String): Number
    open fun GetValueAsClass(KeyName: String): UnrealEngineClass
    open fun GetValueAsBool(KeyName: String): Boolean
    open fun GetRotationFromEntry(KeyName: String, ResultRotation: Rotator = definedExternally): `T$293`
    open fun GetLocationFromEntry(KeyName: String, ResultLocation: Vector = definedExternally): `T$294`
    open fun ClearValue(KeyName: String)

    companion object {
        fun Load(ResourceName: String): BlackboardComponent
        fun Find(Outer: UObject, ResourceName: String): BlackboardComponent
        fun GetDefaultObject(): BlackboardComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlackboardComponent
        fun C(Other: UObject): BlackboardComponent
        fun C(Other: Any): BlackboardComponent
    }
}

external object EPathFollowingAction {
    var Error: String /* "Error" */
    var NoMove: String /* "NoMove" */
    var DirectMove: String /* "DirectMove" */
    var PartialPath: String /* "PartialPath" */
    var PathToGoal: String /* "PathToGoal" */
    var EPathFollowingAction_MAX: String /* "EPathFollowingAction_MAX" */
}

external open class PathFollowingComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var MovementComp: NavMovementComponent
    open var MyNavData: NavigationData
    open fun OnNavDataRegistered(NavData: NavigationData)
    open fun OnActorBump(SelfActor: Actor, OtherActor: Actor, NormalImpulse: Vector, Hit: HitResult)
    open fun GetPathDestination(): Vector
    open fun GetPathActionType(): String /* "Error" | "NoMove" | "DirectMove" | "PartialPath" | "PathToGoal" | "EPathFollowingAction_MAX" */

    companion object {
        fun Load(ResourceName: String): PathFollowingComponent
        fun Find(Outer: UObject, ResourceName: String): PathFollowingComponent
        fun GetDefaultObject(): PathFollowingComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PathFollowingComponent
        fun C(Other: UObject): PathFollowingComponent
        fun C(Other: Any): PathFollowingComponent
    }
}

external open class AISenseConfig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DebugColor: Color
    open var MaxAge: Number
    open var bStartsEnabled: Boolean

    companion object {
        fun Load(ResourceName: String): AISenseConfig
        fun Find(Outer: UObject, ResourceName: String): AISenseConfig
        fun GetDefaultObject(): AISenseConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISenseConfig
        fun C(Other: UObject): AISenseConfig
        fun C(Other: Any): AISenseConfig
    }
}

external object EAISenseNotifyType {
    var OnEveryPerception: String /* "OnEveryPerception" */
    var OnPerceptionChange: String /* "OnPerceptionChange" */
    var EAISenseNotifyType_MAX: String /* "EAISenseNotifyType_MAX" */
}

external open class BehaviorTreeTemplateInfo {
    open var Asset: BehaviorTree
    open var Template: BTCompositeNode
    open fun clone(): BehaviorTreeTemplateInfo

    companion object {
        fun C(Other: UObject): BehaviorTreeTemplateInfo
        fun C(Other: Any): BehaviorTreeTemplateInfo
    }
}

external open class BehaviorTreeManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaxDebuggerSteps: Number
    open var LoadedTemplates: Array<BehaviorTreeTemplateInfo>
    open var ActiveComponents: Array<BehaviorTreeComponent>

    companion object {
        fun Load(ResourceName: String): BehaviorTreeManager
        fun Find(Outer: UObject, ResourceName: String): BehaviorTreeManager
        fun GetDefaultObject(): BehaviorTreeManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BehaviorTreeManager
        fun C(Other: UObject): BehaviorTreeManager
        fun C(Other: Any): BehaviorTreeManager
    }
}

external open class EnvQueryNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var VerNum: Number

    companion object {
        fun Load(ResourceName: String): EnvQueryNode
        fun Find(Outer: UObject, ResourceName: String): EnvQueryNode
        fun GetDefaultObject(): EnvQueryNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryNode
        fun C(Other: UObject): EnvQueryNode
        fun C(Other: Any): EnvQueryNode
    }
}

external open class EnvQueryItemType : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EnvQueryItemType
        fun Find(Outer: UObject, ResourceName: String): EnvQueryItemType
        fun GetDefaultObject(): EnvQueryItemType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryItemType
        fun C(Other: UObject): EnvQueryItemType
        fun C(Other: Any): EnvQueryItemType
    }
}

external open class EnvQueryGenerator : EnvQueryNode {
    constructor()
    constructor(Outer: UObject)
    open var OptionName: String
    open var ItemType: UnrealEngineClass
    open var bAutoSortTests: Boolean

    companion object {
        fun Load(ResourceName: String): EnvQueryGenerator
        fun Find(Outer: UObject, ResourceName: String): EnvQueryGenerator
        fun GetDefaultObject(): EnvQueryGenerator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryGenerator
        fun C(Other: UObject): EnvQueryGenerator
        fun C(Other: Any): EnvQueryGenerator
    }
}

external object EEnvTestPurpose {
    var Filter: String /* "Filter" */
    var Score: String /* "Score" */
    var FilterAndScore: String /* "FilterAndScore" */
    var EEnvTestPurpose_MAX: String /* "EEnvTestPurpose_MAX" */
}

external object EEnvTestFilterOperator {
    var AllPass: String /* "AllPass" */
    var AnyPass: String /* "AnyPass" */
    var EEnvTestFilterOperator_MAX: String /* "EEnvTestFilterOperator_MAX" */
}

external object EEnvTestScoreOperator {
    var AverageScore: String /* "AverageScore" */
    var MinScore: String /* "MinScore" */
    var MaxScore: String /* "MaxScore" */
    var Multiply: String /* "Multiply" */
    var EEnvTestScoreOperator_MAX: String /* "EEnvTestScoreOperator_MAX" */
}

external object EEnvTestFilterType {
    var Minimum: String /* "Minimum" */
    var Maximum: String /* "Maximum" */
    var Range: String /* "Range" */
    var Match: String /* "Match" */
    var EEnvTestFilterType_MAX: String /* "EEnvTestFilterType_MAX" */
}

external open class AIDataProvider : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AIDataProvider
        fun Find(Outer: UObject, ResourceName: String): AIDataProvider
        fun GetDefaultObject(): AIDataProvider
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIDataProvider
        fun C(Other: UObject): AIDataProvider
        fun C(Other: Any): AIDataProvider
    }
}

external open class AIDataProviderValue {
    open var DataBinding: AIDataProvider
    open var DataField: String
    open fun clone(): AIDataProviderValue

    companion object {
        fun C(Other: UObject): AIDataProviderValue
        fun C(Other: Any): AIDataProviderValue
    }
}

external open class AIDataProviderTypedValue : AIDataProviderValue {
    open var PropertyType: UnrealEngineClass
    override fun clone(): AIDataProviderTypedValue

    companion object {
        fun C(Other: UObject): AIDataProviderTypedValue
        fun C(Other: Any): AIDataProviderTypedValue
    }
}

external open class AIDataProviderBoolValue : AIDataProviderTypedValue {
    open var DefaultValue: Boolean
    override fun clone(): AIDataProviderBoolValue

    companion object {
        fun C(Other: UObject): AIDataProviderBoolValue
        fun C(Other: Any): AIDataProviderBoolValue
    }
}

external open class AIDataProviderFloatValue : AIDataProviderTypedValue {
    open var DefaultValue: Number
    override fun clone(): AIDataProviderFloatValue

    companion object {
        fun C(Other: UObject): AIDataProviderFloatValue
        fun C(Other: Any): AIDataProviderFloatValue
    }
}

external object EEnvTestScoreEquation {
    var Linear: String /* "Linear" */
    var Square: String /* "Square" */
    var InverseLinear: String /* "InverseLinear" */
    var SquareRoot: String /* "SquareRoot" */
    var Constant: String /* "Constant" */
    var EEnvTestScoreEquation_MAX: String /* "EEnvTestScoreEquation_MAX" */
}

external object EEnvQueryTestClamping {
    var None: String /* "None" */
    var SpecifiedValue: String /* "SpecifiedValue" */
    var FilterThreshold: String /* "FilterThreshold" */
    var EEnvQueryTestClamping_MAX: String /* "EEnvQueryTestClamping_MAX" */
}

external object EEQSNormalizationType {
    var Absolute: String /* "Absolute" */
    var RelativeToScores: String /* "RelativeToScores" */
    var EEQSNormalizationType_MAX: String /* "EEQSNormalizationType_MAX" */
}

external open class EnvQueryTest : EnvQueryNode {
    constructor()
    constructor(Outer: UObject)
    open var TestOrder: Number
    open var TestPurpose: String /* "Filter" | "Score" | "FilterAndScore" | "EEnvTestPurpose_MAX" */
    open var TestComment: String
    open var MultipleContextFilterOp: String /* "AllPass" | "AnyPass" | "EEnvTestFilterOperator_MAX" */
    open var MultipleContextScoreOp: String /* "AverageScore" | "MinScore" | "MaxScore" | "Multiply" | "EEnvTestScoreOperator_MAX" */
    open var FilterType: String /* "Minimum" | "Maximum" | "Range" | "Match" | "EEnvTestFilterType_MAX" */
    open var BoolValue: AIDataProviderBoolValue
    open var FloatValueMin: AIDataProviderFloatValue
    open var FloatValueMax: AIDataProviderFloatValue
    open var ScoringEquation: String /* "Linear" | "Square" | "InverseLinear" | "SquareRoot" | "Constant" | "EEnvTestScoreEquation_MAX" */
    open var ClampMinType: String /* "None" | "SpecifiedValue" | "FilterThreshold" | "EEnvQueryTestClamping_MAX" */
    open var ClampMaxType: String /* "None" | "SpecifiedValue" | "FilterThreshold" | "EEnvQueryTestClamping_MAX" */
    open var NormalizationType: String /* "Absolute" | "RelativeToScores" | "EEQSNormalizationType_MAX" */
    open var ScoreClampMin: AIDataProviderFloatValue
    open var ScoreClampMax: AIDataProviderFloatValue
    open var ScoringFactor: AIDataProviderFloatValue
    open var ReferenceValue: AIDataProviderFloatValue
    open var bDefineReferenceValue: Boolean
    open var bWorkOnFloatValues: Boolean

    companion object {
        fun Load(ResourceName: String): EnvQueryTest
        fun Find(Outer: UObject, ResourceName: String): EnvQueryTest
        fun GetDefaultObject(): EnvQueryTest
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryTest
        fun C(Other: UObject): EnvQueryTest
        fun C(Other: Any): EnvQueryTest
    }
}

external open class EnvQueryOption : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Generator: EnvQueryGenerator
    open var Tests: Array<EnvQueryTest>

    companion object {
        fun Load(ResourceName: String): EnvQueryOption
        fun Find(Outer: UObject, ResourceName: String): EnvQueryOption
        fun GetDefaultObject(): EnvQueryOption
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryOption
        fun C(Other: UObject): EnvQueryOption
        fun C(Other: Any): EnvQueryOption
    }
}

external open class EnvQuery : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var EdGraph: EdGraph
    open var QueryName: String
    open var Options: Array<EnvQueryOption>

    companion object {
        fun Load(ResourceName: String): EnvQuery
        fun Find(Outer: UObject, ResourceName: String): EnvQuery
        fun GetDefaultObject(): EnvQuery
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQuery
        fun C(Other: UObject): EnvQuery
        fun C(Other: Any): EnvQuery
    }
}

external open class EnvQueryInstanceCache {
    open var Template: EnvQuery
    open fun clone(): EnvQueryInstanceCache

    companion object {
        fun C(Other: UObject): EnvQueryInstanceCache
        fun C(Other: Any): EnvQueryInstanceCache
    }
}

external open class EnvQueryContext : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EnvQueryContext
        fun Find(Outer: UObject, ResourceName: String): EnvQueryContext
        fun GetDefaultObject(): EnvQueryContext
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryContext
        fun C(Other: UObject): EnvQueryContext
        fun C(Other: Any): EnvQueryContext
    }
}

external object EEnvQueryStatus {
    var Processing: String /* "Processing" */
    var Success: String /* "Success" */
    var Failed: String /* "Failed" */
    var Aborted: String /* "Aborted" */
    var OwnerLost: String /* "OwnerLost" */
    var MissingParam: String /* "MissingParam" */
    var EEnvQueryStatus_MAX: String /* "EEnvQueryStatus_MAX" */
}

external interface `T$295` {
    var ResultLocations: Array<Vector>
    var `$`: Boolean
}

external interface `T$296` {
    var ResultActors: Array<Actor>
    var `$`: Boolean
}

external open class EnvQueryInstanceBlueprintWrapper : UObject {
    constructor()
    constructor(Outer: UObject)
    open var QueryID: Number
    open var ItemType: UnrealEngineClass
    open var OptionIndex: Number
    open var OnQueryFinishedEvent: UnrealEngineMulticastDelegate<(QueryInstance: EnvQueryInstanceBlueprintWrapper, QueryStatus: String /* "Processing" | "Success" | "Failed" | "Aborted" | "OwnerLost" | "MissingParam" | "EEnvQueryStatus_MAX" */) -> Unit>
    open fun SetNamedParam(ParamName: String, Value: Number)
    open fun GetResultsAsLocations(): Array<Vector>
    open fun GetResultsAsActors(): Array<Actor>
    open fun GetQueryResultsAsLocations(ResultLocations: Array<Vector> = definedExternally): `T$295`
    open fun GetQueryResultsAsActors(ResultActors: Array<Actor> = definedExternally): `T$296`
    open fun GetItemScore(ItemIndex: Number): Number

    companion object {
        fun Load(ResourceName: String): EnvQueryInstanceBlueprintWrapper
        fun Find(Outer: UObject, ResourceName: String): EnvQueryInstanceBlueprintWrapper
        fun GetDefaultObject(): EnvQueryInstanceBlueprintWrapper
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryInstanceBlueprintWrapper
        fun C(Other: UObject): EnvQueryInstanceBlueprintWrapper
        fun C(Other: Any): EnvQueryInstanceBlueprintWrapper
    }
}

external object EEnvQueryRunMode {
    var SingleResult: String /* "SingleResult" */
    var RandomBest5Pct: String /* "RandomBest5Pct" */
    var RandomBest25Pct: String /* "RandomBest25Pct" */
    var AllMatching: String /* "AllMatching" */
    var EEnvQueryRunMode_MAX: String /* "EEnvQueryRunMode_MAX" */
}

external open class EnvQueryManager : AISubsystem {
    constructor()
    constructor(Outer: UObject)
    open var InstanceCache: Array<EnvQueryInstanceCache>
    open var LocalContexts: Array<EnvQueryContext>
    open var GCShieldedWrappers: Array<EnvQueryInstanceBlueprintWrapper>
    open var MaxAllowedTestingTime: Number
    open var bTestQueriesUsingBreadth: Boolean
    open var QueryCountWarningThreshold: Number
    open var QueryCountWarningInterval: Any
    open var ExecutionTimeWarningSeconds: Any
    open var HandlingResultTimeWarningSeconds: Any
    open var GenerationTimeWarningSeconds: Any

    companion object {
        fun Load(ResourceName: String): EnvQueryManager
        fun Find(Outer: UObject, ResourceName: String): EnvQueryManager
        fun GetDefaultObject(): EnvQueryManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryManager
        fun RunEQSQuery(WorldContextObject: UObject, QueryTemplate: EnvQuery, Querier: UObject, RunMode: String /* "SingleResult" | "RandomBest5Pct" | "RandomBest25Pct" | "AllMatching" | "EEnvQueryRunMode_MAX" */, WrapperClass: UnrealEngineClass): EnvQueryInstanceBlueprintWrapper
        fun C(Other: UObject): EnvQueryManager
        fun C(Other: Any): EnvQueryManager
    }
}

external open class AIHotSpotManager : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AIHotSpotManager
        fun Find(Outer: UObject, ResourceName: String): AIHotSpotManager
        fun GetDefaultObject(): AIHotSpotManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIHotSpotManager
        fun C(Other: UObject): AIHotSpotManager
        fun C(Other: Any): AIHotSpotManager
    }
}

external interface `T$297` {
    var PathPoints: Array<Vector>
    var `$`: Boolean
}

external open class NavLocalGridManager : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavLocalGridManager
        fun Find(Outer: UObject, ResourceName: String): NavLocalGridManager
        fun GetDefaultObject(): NavLocalGridManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLocalGridManager
        fun SetLocalNavigationGridDensity(WorldContextObject: UObject, CellSize: Number): Boolean
        fun RemoveLocalNavigationGrid(WorldContextObject: UObject, GridId: Number, bRebuildGrids: Boolean)
        fun FindLocalNavigationGridPath(WorldContextObject: UObject, Start: Vector, End: Vector, PathPoints: Array<Vector> = definedExternally): `T$297`
        fun AddLocalNavigationGridForPoints(WorldContextObject: UObject, Locations: Array<Vector>, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun AddLocalNavigationGridForPoint(WorldContextObject: UObject, Location: Vector, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun AddLocalNavigationGridForCapsule(WorldContextObject: UObject, Location: Vector, CapsuleRadius: Number, CapsuleHalfHeight: Number, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun AddLocalNavigationGridForBox(WorldContextObject: UObject, Location: Vector, Extent: Vector, Rotation: Rotator, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun C(Other: UObject): NavLocalGridManager
        fun C(Other: Any): NavLocalGridManager
    }
}

external open class AISystem : AISystemBase {
    constructor()
    constructor(Outer: UObject)
    open var PerceptionSystemClassName: SoftClassPath
    open var HotSpotManagerClassName: SoftClassPath
    open var EnvQueryManagerClassName: SoftClassPath
    open var AcceptanceRadius: Number
    open var PathfollowingRegularPathPointAcceptanceRadius: Number
    open var PathfollowingNavLinkAcceptanceRadius: Number
    open var bFinishMoveOnGoalOverlap: Boolean
    open var bAcceptPartialPaths: Boolean
    open var bAllowStrafing: Boolean
    open var bEnableBTAITasks: Boolean
    open var bAllowControllersAsEQSQuerier: Boolean
    open var bEnableDebuggerPlugin: Boolean
    open var bForgetStaleActors: Boolean
    open var bAddBlackboardSelfKey: Boolean
    open var bClearBBEntryOnBTEQSFail: Boolean
    open var DefaultSightCollisionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var BehaviorTreeManager: BehaviorTreeManager
    open var EnvironmentQueryManager: EnvQueryManager
    open var PerceptionSystem: AIPerceptionSystem
    open var AllProxyObjects: Array<AIAsyncTaskBlueprintProxy>
    open var HotSpotManager: AIHotSpotManager
    open var NavLocalGrids: NavLocalGridManager
    open fun AILoggingVerbose()
    open fun AIIgnorePlayers()

    companion object {
        fun Load(ResourceName: String): AISystem
        fun Find(Outer: UObject, ResourceName: String): AISystem
        fun GetDefaultObject(): AISystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISystem
        fun C(Other: UObject): AISystem
        fun C(Other: Any): AISystem
    }
}

external open class AISubsystem : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AISystem: AISystem

    companion object {
        fun Load(ResourceName: String): AISubsystem
        fun Find(Outer: UObject, ResourceName: String): AISubsystem
        fun GetDefaultObject(): AISubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISubsystem
        fun C(Other: UObject): AISubsystem
        fun C(Other: Any): AISubsystem
    }
}

external open class AISenseEvent : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AISenseEvent
        fun Find(Outer: UObject, ResourceName: String): AISenseEvent
        fun GetDefaultObject(): AISenseEvent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISenseEvent
        fun C(Other: UObject): AISenseEvent
        fun C(Other: Any): AISenseEvent
    }
}

external open class AIStimulus {
    open var Age: Number
    open var ExpirationAge: Number
    open var Strength: Number
    open var StimulusLocation: Vector
    open var ReceiverLocation: Vector
    open var Tag: String
    open var bSuccessfullySensed: Boolean
    open fun clone(): AIStimulus

    companion object {
        fun C(Other: UObject): AIStimulus
        fun C(Other: Any): AIStimulus
    }
}

external open class AIPerceptionSystem : AISubsystem {
    constructor()
    constructor(Outer: UObject)
    open var Senses: Array<AISense>
    open var PerceptionAgingRate: Number
    open fun ReportEvent(PerceptionEvent: AISenseEvent)
    open fun OnPerceptionStimuliSourceEndPlay(Actor: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)

    companion object {
        fun Load(ResourceName: String): AIPerceptionSystem
        fun Find(Outer: UObject, ResourceName: String): AIPerceptionSystem
        fun GetDefaultObject(): AIPerceptionSystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIPerceptionSystem
        fun ReportPerceptionEvent(WorldContextObject: UObject, PerceptionEvent: AISenseEvent)
        fun RegisterPerceptionStimuliSource(WorldContextObject: UObject, Sense: UnrealEngineClass, Target: Actor): Boolean
        fun GetSenseClassForStimulus(WorldContextObject: UObject, Stimulus: AIStimulus): UnrealEngineClass
        fun C(Other: UObject): AIPerceptionSystem
        fun C(Other: Any): AIPerceptionSystem
    }
}

external open class AISense : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultExpirationAge: Number
    open var NotifyType: String /* "OnEveryPerception" | "OnPerceptionChange" | "EAISenseNotifyType_MAX" */
    open var bWantsNewPawnNotification: Boolean
    open var bAutoRegisterAllPawnsAsSources: Boolean
    open var PerceptionSystemInstance: AIPerceptionSystem

    companion object {
        fun Load(ResourceName: String): AISense
        fun Find(Outer: UObject, ResourceName: String): AISense
        fun GetDefaultObject(): AISense
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISense
        fun C(Other: UObject): AISense
        fun C(Other: Any): AISense
    }
}

external open class ActorPerceptionUpdateInfo {
    open var TargetId: Number
    open var Target: Any
    open var Stimulus: AIStimulus
    open fun clone(): ActorPerceptionUpdateInfo

    companion object {
        fun C(Other: UObject): ActorPerceptionUpdateInfo
        fun C(Other: Any): ActorPerceptionUpdateInfo
    }
}

external open class ActorPerceptionBlueprintInfo {
    open var Target: Actor
    open var LastSensedStimuli: Array<AIStimulus>
    open var bIsHostile: Boolean
    open fun clone(): ActorPerceptionBlueprintInfo

    companion object {
        fun C(Other: UObject): ActorPerceptionBlueprintInfo
        fun C(Other: Any): ActorPerceptionBlueprintInfo
    }
}

external interface `T$298` {
    var OutActors: Array<Actor>
}

external interface `T$299` {
    var OutActors: Array<Actor>
}

external interface `T$300` {
    var OutActors: Array<Actor>
}

external interface `T$301` {
    var OutActors: Array<Actor>
}

external interface `T$302` {
    var OutActors: Array<Actor>
}

external interface `T$303` {
    var Info: ActorPerceptionBlueprintInfo
    var `$`: Boolean
}

external open class AIPerceptionComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var SensesConfig: Array<AISenseConfig>
    open var DominantSense: UnrealEngineClass
    open var AIOwner: AIController
    open var OnPerceptionUpdated: UnrealEngineMulticastDelegate<(UpdatedActors: Array<Actor>) -> Unit>
    open var OnTargetPerceptionUpdated: UnrealEngineMulticastDelegate<(Actor: Actor, Stimulus: AIStimulus) -> Unit>
    open var OnTargetPerceptionInfoUpdated: UnrealEngineMulticastDelegate<(UpdateInfo: ActorPerceptionUpdateInfo) -> Unit>
    open fun SetSenseEnabled(SenseClass: UnrealEngineClass, bEnable: Boolean)
    open fun RequestStimuliListenerUpdate()
    open fun OnOwnerEndPlay(Actor: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)
    open fun GetPerceivedHostileActorsBySense(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$298`
    open fun GetPerceivedHostileActors(OutActors: Array<Actor> = definedExternally): `T$299`
    open fun GetPerceivedActors(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$300`
    open fun GetKnownPerceivedActors(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$301`
    open fun GetCurrentlyPerceivedActors(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$302`
    open fun GetActorsPerception(Actor: Actor, Info: ActorPerceptionBlueprintInfo = definedExternally): `T$303`
    open fun ForgetAll()

    companion object {
        fun Load(ResourceName: String): AIPerceptionComponent
        fun Find(Outer: UObject, ResourceName: String): AIPerceptionComponent
        fun GetDefaultObject(): AIPerceptionComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIPerceptionComponent
        fun C(Other: UObject): AIPerceptionComponent
        fun C(Other: Any): AIPerceptionComponent
    }
}

external object EAIRequestPriority {
    var SoftScript: String /* "SoftScript" */
    var Logic: String /* "Logic" */
    var HardScript: String /* "HardScript" */
    var Reaction: String /* "Reaction" */
    var Ultimate: String /* "Ultimate" */
    var MAX: String /* "MAX" */
}

external object EPawnActionResult {
    var NotStarted: String /* "NotStarted" */
    var InProgress: String /* "InProgress" */
    var Success: String /* "Success" */
    var Failed: String /* "Failed" */
    var Aborted: String /* "Aborted" */
    var EPawnActionResult_MAX: String /* "EPawnActionResult_MAX" */
}

external open class PawnAction : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChildAction: PawnAction
    open var ParentAction: PawnAction
    open var OwnerComponent: PawnActionsComponent
    open var Instigator: UObject
    open var BrainComp: BrainComponent
    open var bAllowNewSameClassInstance: Boolean
    open var bReplaceActiveSameClassInstance: Boolean
    open var bShouldPauseMovement: Boolean
    open var bAlwaysNotifyOnFinished: Boolean
    open fun GetActionPriority(): String /* "SoftScript" | "Logic" | "HardScript" | "Reaction" | "Ultimate" | "MAX" */
    open fun Finish(WithResult: String /* "NotStarted" | "InProgress" | "Success" | "Failed" | "Aborted" | "EPawnActionResult_MAX" */)

    companion object {
        fun Load(ResourceName: String): PawnAction
        fun Find(Outer: UObject, ResourceName: String): PawnAction
        fun GetDefaultObject(): PawnAction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PawnAction
        fun CreateActionInstance(WorldContextObject: UObject, ActionClass: UnrealEngineClass): PawnAction
        fun C(Other: UObject): PawnAction
        fun C(Other: Any): PawnAction
    }
}

external open class PawnActionStack {
    open var TopAction: PawnAction
    open fun clone(): PawnActionStack

    companion object {
        fun C(Other: UObject): PawnActionStack
        fun C(Other: Any): PawnActionStack
    }
}

external open class PawnActionEvent {
    open var Action: PawnAction
    open fun clone(): PawnActionEvent

    companion object {
        fun C(Other: UObject): PawnActionEvent
        fun C(Other: Any): PawnActionEvent
    }
}

external object EPawnActionAbortState {
    var NeverStarted: String /* "NeverStarted" */
    var NotBeingAborted: String /* "NotBeingAborted" */
    var MarkPendingAbort: String /* "MarkPendingAbort" */
    var LatentAbortInProgress: String /* "LatentAbortInProgress" */
    var AbortDone: String /* "AbortDone" */
    var MAX: String /* "MAX" */
}

external open class PawnActionsComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var ControlledPawn: Pawn
    open var ActionStacks: Array<PawnActionStack>
    open var ActionEvents: Array<PawnActionEvent>
    open var CurrentAction: PawnAction
    open fun PushAction(NewAction: PawnAction, Priority: String /* "SoftScript" | "Logic" | "HardScript" | "Reaction" | "Ultimate" | "MAX" */, Instigator: UObject): Boolean
    open fun ForceAbortAction(ActionToAbort: PawnAction): String /* "NeverStarted" | "NotBeingAborted" | "MarkPendingAbort" | "LatentAbortInProgress" | "AbortDone" | "MAX" */
    open fun AbortAction(ActionToAbort: PawnAction): String /* "NeverStarted" | "NotBeingAborted" | "MarkPendingAbort" | "LatentAbortInProgress" | "AbortDone" | "MAX" */

    companion object {
        fun Load(ResourceName: String): PawnActionsComponent
        fun Find(Outer: UObject, ResourceName: String): PawnActionsComponent
        fun GetDefaultObject(): PawnActionsComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PawnActionsComponent
        fun PerformAction(Pawn: Pawn, Action: PawnAction, Priority: String /* "SoftScript" | "Logic" | "HardScript" | "Reaction" | "Ultimate" | "MAX" */): Boolean
        fun C(Other: UObject): PawnActionsComponent
        fun C(Other: Any): PawnActionsComponent
    }
}

external object ETaskResourceOverlapPolicy {
    var StartOnTop: String /* "StartOnTop" */
    var StartAtEnd: String /* "StartAtEnd" */
    var ETaskResourceOverlapPolicy_MAX: String /* "ETaskResourceOverlapPolicy_MAX" */
}

external open class GameplayTask : UObject {
    constructor()
    constructor(Outer: UObject)
    open var InstanceName: String
    open var ResourceOverlapPolicy: String /* "StartOnTop" | "StartAtEnd" | "ETaskResourceOverlapPolicy_MAX" */
    open var ChildTask: GameplayTask
    open fun ReadyForActivation()
    open fun EndTask()

    companion object {
        fun Load(ResourceName: String): GameplayTask
        fun Find(Outer: UObject, ResourceName: String): GameplayTask
        fun GetDefaultObject(): GameplayTask
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTask
        fun C(Other: UObject): GameplayTask
        fun C(Other: Any): GameplayTask
    }
}

external open class GameplayResourceSet {
    open fun clone(): GameplayResourceSet

    companion object {
        fun C(Other: UObject): GameplayResourceSet
        fun C(Other: Any): GameplayResourceSet
    }
}

external open class GameplayTasksComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var bIsNetDirty: Boolean
    open var SimulatedTasks: Array<GameplayTask>
    open var TaskPriorityQueue: Array<GameplayTask>
    open var TickingTasks: Array<GameplayTask>
    open var KnownTasks: Array<GameplayTask>
    open var OnClaimedResourcesChange: UnrealEngineMulticastDelegate<(NewlyClaimed: GameplayResourceSet, FreshlyReleased: GameplayResourceSet) -> Unit>
    open fun OnRep_SimulatedTasks()

    companion object {
        fun Load(ResourceName: String): GameplayTasksComponent
        fun Find(Outer: UObject, ResourceName: String): GameplayTasksComponent
        fun GetDefaultObject(): GameplayTasksComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTasksComponent
        fun C(Other: UObject): GameplayTasksComponent
        fun C(Other: Any): GameplayTasksComponent
    }
}

external open class NavigationFilterArea {
    open var AreaClass: UnrealEngineClass
    open var TravelCostOverride: Number
    open var EnteringCostOverride: Number
    open var bIsExcluded: Boolean
    open var bOverrideTravelCost: Boolean
    open var bOverrideEnteringCost: Boolean
    open fun clone(): NavigationFilterArea

    companion object {
        fun C(Other: UObject): NavigationFilterArea
        fun C(Other: Any): NavigationFilterArea
    }
}

external open class NavigationFilterFlags {
    open var bNavFlag0: Boolean
    open var bNavFlag1: Boolean
    open var bNavFlag2: Boolean
    open var bNavFlag3: Boolean
    open var bNavFlag4: Boolean
    open var bNavFlag5: Boolean
    open var bNavFlag6: Boolean
    open var bNavFlag7: Boolean
    open var bNavFlag8: Boolean
    open var bNavFlag9: Boolean
    open var bNavFlag10: Boolean
    open var bNavFlag11: Boolean
    open var bNavFlag12: Boolean
    open var bNavFlag13: Boolean
    open var bNavFlag14: Boolean
    open var bNavFlag15: Boolean
    open fun clone(): NavigationFilterFlags

    companion object {
        fun C(Other: UObject): NavigationFilterFlags
        fun C(Other: Any): NavigationFilterFlags
    }
}

external open class NavigationQueryFilter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Areas: Array<NavigationFilterArea>
    open var IncludeFlags: NavigationFilterFlags
    open var ExcludeFlags: NavigationFilterFlags

    companion object {
        fun Load(ResourceName: String): NavigationQueryFilter
        fun Find(Outer: UObject, ResourceName: String): NavigationQueryFilter
        fun GetDefaultObject(): NavigationQueryFilter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationQueryFilter
        fun C(Other: UObject): NavigationQueryFilter
        fun C(Other: Any): NavigationQueryFilter
    }
}

external open class GameplayTaskResource : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ManualResourceID: Number
    open var AutoResourceID: Any
    open var bManuallySetID: Boolean

    companion object {
        fun Load(ResourceName: String): GameplayTaskResource
        fun Find(Outer: UObject, ResourceName: String): GameplayTaskResource
        fun GetDefaultObject(): GameplayTaskResource
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTaskResource
        fun C(Other: UObject): GameplayTaskResource
        fun C(Other: Any): GameplayTaskResource
    }
}

external object EPathFollowingRequestResult {
    var Failed: String /* "Failed" */
    var AlreadyAtGoal: String /* "AlreadyAtGoal" */
    var RequestSuccessful: String /* "RequestSuccessful" */
    var EPathFollowingRequestResult_MAX: String /* "EPathFollowingRequestResult_MAX" */
}

external object EPathFollowingStatus {
    var Idle: String /* "Idle" */
    var Waiting: String /* "Waiting" */
    var Paused: String /* "Paused" */
    var Moving: String /* "Moving" */
    var EPathFollowingStatus_MAX: String /* "EPathFollowingStatus_MAX" */
}

external interface `T$304` {
    var BlackboardComponent: BlackboardComponent
    var `$`: Boolean
}

external open class AIController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Controller {
    open var bStartAILogicOnPossess: Boolean
    open var bStopAILogicOnUnposses: Boolean
    open var bLOSflag: Boolean
    open var bSkipExtraLOSChecks: Boolean
    open var bAllowStrafe: Boolean
    open var bWantsPlayerState: Boolean
    open var bSetControlRotationFromPawnOrientation: Boolean
    open var PathFollowingComponent: PathFollowingComponent
    open var BrainComponent: BrainComponent
    open var PerceptionComponent: AIPerceptionComponent
    open var ActionsComp: PawnActionsComponent
    open var Blackboard: BlackboardComponent
    open var CachedGameplayTasksComponent: GameplayTasksComponent
    open var DefaultNavigationFilterClass: UnrealEngineClass
    open var ReceiveMoveCompleted: UnrealEngineMulticastDelegate<(RequestID: AIRequestID, Result: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */) -> Unit>
    open fun UseBlackboard(BlackboardAsset: BlackboardData, BlackboardComponent: BlackboardComponent = definedExternally): `T$304`
    open fun UnclaimTaskResource(ResourceClass: UnrealEngineClass)
    open fun SetPathFollowingComponent(NewPFComponent: PathFollowingComponent)
    open fun SetMoveBlockDetection(bEnable: Boolean)
    open fun RunBehaviorTree(BTAsset: BehaviorTree): Boolean
    open fun OnUsingBlackBoard(BlackboardComp: BlackboardComponent, BlackboardAsset: BlackboardData)
    open fun OnGameplayTaskResourcesClaimed(NewlyClaimed: GameplayResourceSet, FreshlyReleased: GameplayResourceSet)
    open fun MoveToLocation(Dest: Vector, AcceptanceRadius: Number, bStopOnOverlap: Boolean, bUsePathfinding: Boolean, bProjectDestinationToNavigation: Boolean, bCanStrafe: Boolean, FilterClass: UnrealEngineClass, bAllowPartialPath: Boolean): String /* "Failed" | "AlreadyAtGoal" | "RequestSuccessful" | "EPathFollowingRequestResult_MAX" */
    open fun MoveToActor(Goal: Actor, AcceptanceRadius: Number, bStopOnOverlap: Boolean, bUsePathfinding: Boolean, bCanStrafe: Boolean, FilterClass: UnrealEngineClass, bAllowPartialPath: Boolean): String /* "Failed" | "AlreadyAtGoal" | "RequestSuccessful" | "EPathFollowingRequestResult_MAX" */
    open fun SetFocus(NewFocus: Actor)
    open fun SetFocalPoint(FP: Vector)
    open fun ClearFocus()
    open fun HasPartialPath(): Boolean
    open fun GetPathFollowingComponent(): PathFollowingComponent
    open fun GetMoveStatus(): String /* "Idle" | "Waiting" | "Paused" | "Moving" | "EPathFollowingStatus_MAX" */
    open fun GetImmediateMoveDestination(): Vector
    open fun GetFocusActor(): Actor
    open fun GetFocalPointOnActor(Actor: Actor): Vector
    open fun GetFocalPoint(): Vector
    open fun GetAIPerceptionComponent(): AIPerceptionComponent
    open fun ClaimTaskResource(ResourceClass: UnrealEngineClass)

    companion object {
        fun GetDefaultObject(): AIController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIController
        fun C(Other: UObject): AIController
        fun C(Other: Any): AIController
    }
}

external open class BrainComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var BlackboardComp: BlackboardComponent
    open var AIOwner: AIController
    open fun StopLogic(Reason: String)
    open fun StartLogic()
    open fun RestartLogic()
    open fun IsRunning(): Boolean
    open fun IsPaused(): Boolean

    companion object {
        fun Load(ResourceName: String): BrainComponent
        fun Find(Outer: UObject, ResourceName: String): BrainComponent
        fun GetDefaultObject(): BrainComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BrainComponent
        fun C(Other: UObject): BrainComponent
        fun C(Other: Any): BrainComponent
    }
}

external open class GameplayTagQuery {
    open var TokenStreamVersion: Number
    open var TagDictionary: Array<GameplayTag>
    open var QueryTokenStream: Array<Number>
    open var UserDescription: String
    open var AutoDescription: String
    open fun clone(): GameplayTagQuery
    open fun IsTagQueryEmpty(): Boolean
    open fun MakeGameplayTagQuery(): GameplayTagQuery

    companion object {
        fun C(Other: UObject): GameplayTagQuery
        fun C(Other: Any): GameplayTagQuery
        fun IsTagQueryEmpty(TagQuery: GameplayTagQuery): Boolean
        fun MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery
    }
}

external interface `T$305` {
    var TagContainer: GameplayTagContainer
}

external interface `T$306` {
    var InOutTagContainer: GameplayTagContainer
}

external interface `T$307` {
    var GameplayTags: Array<GameplayTag>
}

external interface `T$308` {
    var TagContainer: GameplayTagContainer
    var `$`: Boolean
}

external interface `T$309` {
    var GameplayTags: Array<GameplayTag>
}

external open class GameplayTagContainer {
    open var GameplayTags: Array<GameplayTag>
    open var ParentTags: Array<GameplayTag>
    open fun clone(): GameplayTagContainer
    open fun AddGameplayTag(Tag: GameplayTag = definedExternally): `T$305`
    open fun AppendGameplayTagContainers(InTagContainer: GameplayTagContainer = definedExternally): `T$306`
    open fun BreakGameplayTagContainer(GameplayTags: Array<GameplayTag> = definedExternally): `T$307`
    open fun DoesContainerMatchTagQuery(TagQuery: GameplayTagQuery): Boolean
    open fun Equal(B: GameplayTagContainer): Boolean
    open fun GetDebugStringFromGameplayTagContainer(): String
    open fun GetNumGameplayTagsInContainer(): Number
    open fun HasAllTags(OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
    open fun HasAnyTags(OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
    open fun HasTag(Tag: GameplayTag, bExactMatch: Boolean): Boolean
    open fun MakeLiteralGameplayTagContainer(): GameplayTagContainer
    open fun NotEqual(B: GameplayTagContainer): Boolean
    open fun NotEqual_TagContainerTagContainer(B: String): Boolean
    open fun RemoveGameplayTag(Tag: GameplayTag = definedExternally): `T$308`

    companion object {
        fun C(Other: UObject): GameplayTagContainer
        fun C(Other: Any): GameplayTagContainer
        fun AddGameplayTag(TagContainer: GameplayTagContainer = definedExternally, Tag: GameplayTag = definedExternally): `T$305`
        fun AppendGameplayTagContainers(InOutTagContainer: GameplayTagContainer = definedExternally, InTagContainer: GameplayTagContainer = definedExternally): `T$306`
        fun BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer, GameplayTags: Array<GameplayTag> = definedExternally): `T$309`
        fun DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer, TagQuery: GameplayTagQuery): Boolean
        fun Equal(A: GameplayTagContainer, B: GameplayTagContainer): Boolean
        fun GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): String
        fun GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): Number
        fun HasAllTags(TagContainer: GameplayTagContainer, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun HasAnyTags(TagContainer: GameplayTagContainer, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun HasTag(TagContainer: GameplayTagContainer, Tag: GameplayTag, bExactMatch: Boolean): Boolean
        fun MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer
        fun NotEqual(A: GameplayTagContainer, B: GameplayTagContainer): Boolean
        fun NotEqual_TagContainerTagContainer(A: GameplayTagContainer, B: String): Boolean
        fun RemoveGameplayTag(TagContainer: GameplayTagContainer = definedExternally, Tag: GameplayTag = definedExternally): `T$308`
        fun MakeGameplayTagContainerFromArray(GameplayTags: Array<GameplayTag>): GameplayTagContainer
    }
}

external open class GameplayTag {
    open var TagName: String
    open fun clone(): GameplayTag
    open fun Equal(B: GameplayTag): Boolean
    open fun GetDebugStringFromGameplayTag(): String
    open fun GetTagName(): String
    open fun IsGameplayTagValid(): Boolean
    open fun MakeGameplayTagContainerFromTag(): GameplayTagContainer
    open fun MakeLiteralGameplayTag(): GameplayTag
    open fun MatchesAnyTags(OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
    open fun MatchesTag(TagTwo: GameplayTag, bExactMatch: Boolean): Boolean
    open fun NotEqual(B: GameplayTag): Boolean
    open fun NotEqual_TagTag(B: String): Boolean

    companion object {
        fun C(Other: UObject): GameplayTag
        fun C(Other: Any): GameplayTag
        fun Equal(A: GameplayTag, B: GameplayTag): Boolean
        fun GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): String
        fun GetTagName(GameplayTag: GameplayTag): String
        fun IsGameplayTagValid(GameplayTag: GameplayTag): Boolean
        fun MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer
        fun MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag
        fun MatchesAnyTags(TagOne: GameplayTag, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun MatchesTag(TagOne: GameplayTag, TagTwo: GameplayTag, bExactMatch: Boolean): Boolean
        fun NotEqual(A: GameplayTag, B: GameplayTag): Boolean
        fun NotEqual_TagTag(A: GameplayTag, B: String): Boolean
    }
}

external open class BehaviorTreeComponent : BrainComponent {
    constructor()
    constructor(Outer: UObject)
    open var NodeInstances: Array<BTNode>
    open var DefaultBehaviorTreeAsset: BehaviorTree
    open fun SetDynamicSubtree(InjectTag: GameplayTag, BehaviorAsset: BehaviorTree)
    open fun GetTagCooldownEndTime(CooldownTag: GameplayTag): Number
    open fun AddCooldownTagDuration(CooldownTag: GameplayTag, CooldownDuration: Number, bAddToExistingDuration: Boolean)

    companion object {
        fun Load(ResourceName: String): BehaviorTreeComponent
        fun Find(Outer: UObject, ResourceName: String): BehaviorTreeComponent
        fun GetDefaultObject(): BehaviorTreeComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BehaviorTreeComponent
        fun C(Other: UObject): BehaviorTreeComponent
        fun C(Other: Any): BehaviorTreeComponent
    }
}

external open class BTNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NodeName: String
    open var TreeAsset: BehaviorTree
    open var ParentNode: BTCompositeNode
    open fun ClearBlackboardValue(Key: BlackboardKeySelector)
    open fun ClearBlackboardValueAsVector(Key: BlackboardKeySelector)
    open fun GetBlackboardValueAsActor(Key: BlackboardKeySelector): Actor
    open fun GetBlackboardValueAsBool(Key: BlackboardKeySelector): Boolean
    open fun GetBlackboardValueAsClass(Key: BlackboardKeySelector): UnrealEngineClass
    open fun GetBlackboardValueAsEnum(Key: BlackboardKeySelector): Number
    open fun GetBlackboardValueAsFloat(Key: BlackboardKeySelector): Number
    open fun GetBlackboardValueAsInt(Key: BlackboardKeySelector): Number
    open fun GetBlackboardValueAsName(Key: BlackboardKeySelector): String
    open fun GetBlackboardValueAsObject(Key: BlackboardKeySelector): UObject
    open fun GetBlackboardValueAsRotator(Key: BlackboardKeySelector): Rotator
    open fun GetBlackboardValueAsString(Key: BlackboardKeySelector): String
    open fun GetBlackboardValueAsVector(Key: BlackboardKeySelector): Vector
    open fun GetOwnerComponent(): BehaviorTreeComponent
    open fun GetOwnersBlackboard(): BlackboardComponent
    open fun SetBlackboardValueAsBool(Key: BlackboardKeySelector, Value: Boolean)
    open fun SetBlackboardValueAsClass(Key: BlackboardKeySelector, Value: UnrealEngineClass)
    open fun SetBlackboardValueAsEnum(Key: BlackboardKeySelector, Value: Number)
    open fun SetBlackboardValueAsFloat(Key: BlackboardKeySelector, Value: Number)
    open fun SetBlackboardValueAsInt(Key: BlackboardKeySelector, Value: Number)
    open fun SetBlackboardValueAsName(Key: BlackboardKeySelector, Value: String)
    open fun SetBlackboardValueAsObject(Key: BlackboardKeySelector, Value: UObject)
    open fun SetBlackboardValueAsRotator(Key: BlackboardKeySelector, Value: Rotator)
    open fun SetBlackboardValueAsString(Key: BlackboardKeySelector, Value: String)
    open fun SetBlackboardValueAsVector(Key: BlackboardKeySelector, Value: Vector)
    open fun StartUsingExternalEvent(OwningActor: Actor)
    open fun StopUsingExternalEvent()

    companion object {
        fun Load(ResourceName: String): BTNode
        fun Find(Outer: UObject, ResourceName: String): BTNode
        fun GetDefaultObject(): BTNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTNode
        fun C(Other: UObject): BTNode
        fun C(Other: Any): BTNode
        fun ClearBlackboardValue(NodeOwner: BTNode, Key: BlackboardKeySelector)
        fun ClearBlackboardValueAsVector(NodeOwner: BTNode, Key: BlackboardKeySelector)
        fun GetBlackboardValueAsActor(NodeOwner: BTNode, Key: BlackboardKeySelector): Actor
        fun GetBlackboardValueAsBool(NodeOwner: BTNode, Key: BlackboardKeySelector): Boolean
        fun GetBlackboardValueAsClass(NodeOwner: BTNode, Key: BlackboardKeySelector): UnrealEngineClass
        fun GetBlackboardValueAsEnum(NodeOwner: BTNode, Key: BlackboardKeySelector): Number
        fun GetBlackboardValueAsFloat(NodeOwner: BTNode, Key: BlackboardKeySelector): Number
        fun GetBlackboardValueAsInt(NodeOwner: BTNode, Key: BlackboardKeySelector): Number
        fun GetBlackboardValueAsName(NodeOwner: BTNode, Key: BlackboardKeySelector): String
        fun GetBlackboardValueAsObject(NodeOwner: BTNode, Key: BlackboardKeySelector): UObject
        fun GetBlackboardValueAsRotator(NodeOwner: BTNode, Key: BlackboardKeySelector): Rotator
        fun GetBlackboardValueAsString(NodeOwner: BTNode, Key: BlackboardKeySelector): String
        fun GetBlackboardValueAsVector(NodeOwner: BTNode, Key: BlackboardKeySelector): Vector
        fun GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent
        fun GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent
        fun SetBlackboardValueAsBool(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Boolean)
        fun SetBlackboardValueAsClass(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: UnrealEngineClass)
        fun SetBlackboardValueAsEnum(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Number)
        fun SetBlackboardValueAsFloat(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Number)
        fun SetBlackboardValueAsInt(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Number)
        fun SetBlackboardValueAsName(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: String)
        fun SetBlackboardValueAsObject(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: UObject)
        fun SetBlackboardValueAsRotator(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Rotator)
        fun SetBlackboardValueAsString(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: String)
        fun SetBlackboardValueAsVector(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Vector)
        fun StartUsingExternalEvent(NodeOwner: BTNode, OwningActor: Actor)
        fun StopUsingExternalEvent(NodeOwner: BTNode)
    }
}

external open class BTAuxiliaryNode : BTNode {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BTAuxiliaryNode
        fun Find(Outer: UObject, ResourceName: String): BTAuxiliaryNode
        fun GetDefaultObject(): BTAuxiliaryNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTAuxiliaryNode
        fun C(Other: UObject): BTAuxiliaryNode
        fun C(Other: Any): BTAuxiliaryNode
    }
}

external open class BTService : BTAuxiliaryNode {
    constructor()
    constructor(Outer: UObject)
    open var Interval: Number
    open var RandomDeviation: Number
    open var bCallTickOnSearchStart: Boolean
    open var bRestartTimerOnEachActivation: Boolean

    companion object {
        fun Load(ResourceName: String): BTService
        fun Find(Outer: UObject, ResourceName: String): BTService
        fun GetDefaultObject(): BTService
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTService
        fun C(Other: UObject): BTService
        fun C(Other: Any): BTService
    }
}

external open class BTTaskNode : BTNode {
    constructor()
    constructor(Outer: UObject)
    open var Services: Array<BTService>
    open var bIgnoreRestartSelf: Boolean

    companion object {
        fun Load(ResourceName: String): BTTaskNode
        fun Find(Outer: UObject, ResourceName: String): BTTaskNode
        fun GetDefaultObject(): BTTaskNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTTaskNode
        fun C(Other: UObject): BTTaskNode
        fun C(Other: Any): BTTaskNode
    }
}

external object EBTFlowAbortMode {
    var None: String /* "None" */
    var LowerPriority: String /* "LowerPriority" */
    var Self: String /* "Self" */
    var Both: String /* "Both" */
    var EBTFlowAbortMode_MAX: String /* "EBTFlowAbortMode_MAX" */
}

external open class BTDecorator : BTAuxiliaryNode {
    constructor()
    constructor(Outer: UObject)
    open var bInverseCondition: Boolean
    open var FlowAbortMode: String /* "None" | "LowerPriority" | "Self" | "Both" | "EBTFlowAbortMode_MAX" */

    companion object {
        fun Load(ResourceName: String): BTDecorator
        fun Find(Outer: UObject, ResourceName: String): BTDecorator
        fun GetDefaultObject(): BTDecorator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTDecorator
        fun C(Other: UObject): BTDecorator
        fun C(Other: Any): BTDecorator
    }
}

external object EBTDecoratorLogic {
    var Invalid: String /* "Invalid" */
    var Test: String /* "Test" */
    var And: String /* "And" */
    var Or: String /* "Or" */
    var Not: String /* "Not" */
    var EBTDecoratorLogic_MAX: String /* "EBTDecoratorLogic_MAX" */
}

external open class BTDecoratorLogic {
    open var Operation: String /* "Invalid" | "Test" | "And" | "Or" | "Not" | "EBTDecoratorLogic_MAX" */
    open var Number: Any
    open fun clone(): BTDecoratorLogic

    companion object {
        fun C(Other: UObject): BTDecoratorLogic
        fun C(Other: Any): BTDecoratorLogic
    }
}

external open class BTCompositeChild {
    open var ChildComposite: BTCompositeNode
    open var ChildTask: BTTaskNode
    open var Decorators: Array<BTDecorator>
    open var DecoratorOps: Array<BTDecoratorLogic>
    open fun clone(): BTCompositeChild

    companion object {
        fun C(Other: UObject): BTCompositeChild
        fun C(Other: Any): BTCompositeChild
    }
}

external open class BTCompositeNode : BTNode {
    constructor()
    constructor(Outer: UObject)
    open var Children: Array<BTCompositeChild>
    open var Services: Array<BTService>
    open var bApplyDecoratorScope: Boolean

    companion object {
        fun Load(ResourceName: String): BTCompositeNode
        fun Find(Outer: UObject, ResourceName: String): BTCompositeNode
        fun GetDefaultObject(): BTCompositeNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTCompositeNode
        fun C(Other: UObject): BTCompositeNode
        fun C(Other: Any): BTCompositeNode
    }
}

external open class EditedDocumentInfo {
    open var EditedObjectPath: SoftObjectPath
    open var SavedViewOffset: Vector2D
    open var SavedZoomAmount: Number
    open var EditedObject: UObject
    open fun clone(): EditedDocumentInfo

    companion object {
        fun C(Other: UObject): EditedDocumentInfo
        fun C(Other: Any): EditedDocumentInfo
    }
}

external open class BehaviorTree : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RootNode: BTCompositeNode
    open var BTGraph: EdGraph
    open var LastEditedDocuments: Array<EditedDocumentInfo>
    open var BlackboardAsset: BlackboardData
    open var RootDecorators: Array<BTDecorator>
    open var RootDecoratorOps: Array<BTDecoratorLogic>

    companion object {
        fun Load(ResourceName: String): BehaviorTree
        fun Find(Outer: UObject, ResourceName: String): BehaviorTree
        fun GetDefaultObject(): BehaviorTree
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BehaviorTree
        fun C(Other: UObject): BehaviorTree
        fun C(Other: Any): BehaviorTree
    }
}

external interface `T$310` {
    var Days: Number
    var Hours: Number
    var Minutes: Number
    var Seconds: Number
    var Milliseconds: Number
}

external interface `T$311` {
    var Days: Number
    var Hours: Number
    var Minutes: Number
    var Seconds: Number
    var FractionNano: Number
}

external open class Timespan {
    open fun clone(): Timespan
    open fun AsTimespan(): String
    open fun Add_TimespanTimespan(B: Timespan): Timespan
    open fun BreakTimespan(Days: Number = definedExternally, Hours: Number = definedExternally, Minutes: Number = definedExternally, Seconds: Number = definedExternally, Milliseconds: Number = definedExternally): `T$310`
    open fun BreakTimespan2(Days: Number = definedExternally, Hours: Number = definedExternally, Minutes: Number = definedExternally, Seconds: Number = definedExternally, FractionNano: Number = definedExternally): `T$311`
    open fun Divide_TimespanFloat(Scalar: Number): Timespan
    open fun Equal(B: Timespan): Boolean
    open fun GetDays(): Number
    open fun GetDuration(): Timespan
    open fun GetHours(): Number
    open fun GetMilliseconds(): Number
    open fun GetMinutes(): Number
    open fun GetSeconds(): Number
    open fun GetTotalDays(): Number
    open fun GetTotalHours(): Number
    open fun GetTotalMilliseconds(): Number
    open fun GetTotalMinutes(): Number
    open fun GetTotalSeconds(): Number
    open fun Greater_TimespanTimespan(B: Timespan): Boolean
    open fun GreaterEqual_TimespanTimespan(B: Timespan): Boolean
    open fun Less_TimespanTimespan(B: Timespan): Boolean
    open fun LessEqual_TimespanTimespan(B: Timespan): Boolean
    open fun Multiply_TimespanFloat(Scalar: Number): Timespan
    open fun NotEqual(B: Timespan): Boolean
    open fun Subtract_TimespanTimespan(B: Timespan): Timespan
    open fun TimespanRatio(B: Timespan): Number

    companion object {
        fun C(Other: UObject): Timespan
        fun C(Other: Any): Timespan
        fun AsTimespan(InTimespan: Timespan): String
        fun Add_TimespanTimespan(A: Timespan, B: Timespan): Timespan
        fun BreakTimespan(InTimespan: Timespan, Days: Number = definedExternally, Hours: Number = definedExternally, Minutes: Number = definedExternally, Seconds: Number = definedExternally, Milliseconds: Number = definedExternally): `T$310`
        fun BreakTimespan2(InTimespan: Timespan, Days: Number = definedExternally, Hours: Number = definedExternally, Minutes: Number = definedExternally, Seconds: Number = definedExternally, FractionNano: Number = definedExternally): `T$311`
        fun Divide_TimespanFloat(A: Timespan, Scalar: Number): Timespan
        fun Equal(A: Timespan, B: Timespan): Boolean
        fun GetDays(A: Timespan): Number
        fun GetDuration(A: Timespan): Timespan
        fun GetHours(A: Timespan): Number
        fun GetMilliseconds(A: Timespan): Number
        fun GetMinutes(A: Timespan): Number
        fun GetSeconds(A: Timespan): Number
        fun GetTotalDays(A: Timespan): Number
        fun GetTotalHours(A: Timespan): Number
        fun GetTotalMilliseconds(A: Timespan): Number
        fun GetTotalMinutes(A: Timespan): Number
        fun GetTotalSeconds(A: Timespan): Number
        fun Greater_TimespanTimespan(A: Timespan, B: Timespan): Boolean
        fun GreaterEqual_TimespanTimespan(A: Timespan, B: Timespan): Boolean
        fun Less_TimespanTimespan(A: Timespan, B: Timespan): Boolean
        fun LessEqual_TimespanTimespan(A: Timespan, B: Timespan): Boolean
        fun Multiply_TimespanFloat(A: Timespan, Scalar: Number): Timespan
        fun NotEqual(A: Timespan, B: Timespan): Boolean
        fun Subtract_TimespanTimespan(A: Timespan, B: Timespan): Timespan
        fun TimespanRatio(A: Timespan, B: Timespan): Number
        fun FromDays(Days: Number): Timespan
        fun FromHours(Hours: Number): Timespan
        fun FromMilliseconds(Milliseconds: Number): Timespan
        fun FromMinutes(Minutes: Number): Timespan
        fun FromSeconds(Seconds: Number): Timespan
        fun MakeTimespan(Days: Number, Hours: Number, Minutes: Number, Seconds: Number, Milliseconds: Number): Timespan
        fun MakeTimespan2(Days: Number, Hours: Number, Minutes: Number, Seconds: Number, FractionNano: Number): Timespan
        fun MaxValue(): Timespan
        fun MinValue(): Timespan
        fun ZeroValue(): Timespan
    }
}

external interface `T$312` {
    var bIsTracked: Boolean
    var Orientation: Rotator
    var bHasPositionalTracking: Boolean
    var position: Vector
}

external open class XRDeviceId {
    open var SystemName: String
    open var DeviceID: Number
    open fun clone(): XRDeviceId
    open fun GetDevicePose(bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, position: Vector = definedExternally): `T$312`
    open fun IsDeviceTracking(): Boolean

    companion object {
        fun C(Other: UObject): XRDeviceId
        fun C(Other: Any): XRDeviceId
        fun GetDevicePose(XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, position: Vector = definedExternally): `T$312`
        fun IsDeviceTracking(XRDeviceId: XRDeviceId): Boolean
    }
}

external object ETrackingStatus {
    var NotTracked: String /* "NotTracked" */
    var InertialOnly: String /* "InertialOnly" */
    var Tracked: String /* "Tracked" */
    var ETrackingStatus_MAX: String /* "ETrackingStatus_MAX" */
}

external open class XRHMDData {
    open var bValid: Boolean
    open var DeviceName: String
    open var ApplicationInstanceID: Guid
    open var TrackingStatus: String /* "NotTracked" | "InertialOnly" | "Tracked" | "ETrackingStatus_MAX" */
    open var position: Vector
    open var Rotation: Quat
    open fun clone(): XRHMDData

    companion object {
        fun C(Other: UObject): XRHMDData
        fun C(Other: Any): XRHMDData
    }
}

external object EXRVisualType {
    var Controller: String /* "Controller" */
    var Hand: String /* "Hand" */
    var EXRVisualType_MAX: String /* "EXRVisualType_MAX" */
}

external open class XRMotionControllerData {
    open var bValid: Boolean
    open var DeviceName: String
    open var ApplicationInstanceID: Guid
    open var DeviceVisualType: String /* "Controller" | "Hand" | "EXRVisualType_MAX" */
    open var HandIndex: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */
    open var TrackingStatus: String /* "NotTracked" | "InertialOnly" | "Tracked" | "ETrackingStatus_MAX" */
    open var GripPosition: Vector
    open var GripRotation: Quat
    open var AimPosition: Vector
    open var AimRotation: Quat
    open var HandKeyPositions: Array<Vector>
    open var HandKeyRotations: Array<Quat>
    open var HandKeyRadii: Array<Number>
    open var bIsGrasped: Boolean
    open fun clone(): XRMotionControllerData

    companion object {
        fun C(Other: UObject): XRMotionControllerData
        fun C(Other: Any): XRMotionControllerData
    }
}

external interface `T$313` {
    var OutActors: Array<Actor>
}

external interface `T$314` {
    var OutActors: Array<Actor>
}

external interface `T$315` {
    var bIsMyTurn: Boolean
}

external interface `T$316` {
    var PlayerIndex: Number
}

external interface `T$317` {
    var PlayerDisplayName: String
}

external interface `T$318` {
    var bFoundID: Boolean
    var Title: String
    var LockedDescription: String
    var UnlockedDescription: String
    var bHidden: Boolean
}

external interface `T$319` {
    var bFoundID: Boolean
    var Progress: Number
}

external interface `T$320` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$321` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$322` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$323` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$324` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$325` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$326` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$327` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$328` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$329` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$330` {
    var Handle: TimerHandle
}

external interface `T$331` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$332` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$333` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$334` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$335` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$336` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$337` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$338` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$339` {
    var Canvas: Canvas
    var Size: Vector2D
    var Context: DrawToRenderTargetContext
}

external interface `T$340` {
    var OutSamples: Array<Color>
    var `$`: Boolean
}

external interface `T$341` {
    var OutLinearSamples: Array<LinearColor>
    var `$`: Boolean
}

external interface `T$342` {
    var OutRectCenter: Vector
    var OutRectRotation: Rotator
    var OutRectLengthX: Number
    var OutRectLengthY: Number
}

external interface `T$343` {
    var OutRectCenter: Vector
    var OutRectRotation: Rotator
    var OutSideLengthX: Number
    var OutSideLengthY: Number
}

external interface `T$344` {
    var PredictResult: PredictProjectilePathResult
    var `$`: Boolean
}

external interface `T$345` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$346` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$347` {
    var TossVelocity: Vector
    var `$`: Boolean
}

external interface `T$348` {
    var OutActors: Array<Actor>
}

external interface `T$349` {
    var OutActors: Array<Actor>
}

external interface `T$350` {
    var OutActors: Array<Actor>
}

external interface `T$351` {
    var OutActors: Array<Actor>
}

external interface `T$352` {
    var ListenerPosition: Vector
    var `$`: Boolean
}

external interface `T$353` {
    var OutLaunchVelocity: Vector
    var `$`: Boolean
}

external interface `T$354` {
    var OutTransforms: Array<Transform>
}

external interface `T$355` {
    var Magnitudes: Array<Number>
}

external interface `T$356` {
    var Phases: Array<Number>
}

external interface `T$357` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$358` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$359` {
    var SafePadding: Vector4
    var SafePaddingScale: Vector2D
    var SpillOverPadding: Vector4
}

external interface `T$360` {
    var PixelPosition: Vector2D
    var ViewportPosition: Vector2D
}

external interface `T$361` {
    var ViewportPosition: Vector2D
}

external interface `T$362` {
    var AbsoluteCoordinate: Vector2D
}

external interface `T$363` {
    var LocalCoordinate: Vector2D
}

external interface `T$364` {
    var OutActors: Array<Actor>
}

external interface `T$365` {
    var bTimeWasUsed: Boolean
    var Orientation: Rotator
    var position: Vector
    var bProvidedLinearVelocity: Boolean
    var LinearVelocity: Vector
    var bProvidedAngularVelocity: Boolean
    var AngularVelocityRadPerSec: Vector
    var bProvidedLinearAcceleration: Boolean
    var LinearAcceleration: Vector
    var `$`: Boolean
}

external interface `T$366` {
    var HMDData: XRHMDData
}

external interface `T$367` {
    var MotionControllerData: XRMotionControllerData
}

external interface `T$368` {
    var OutActors: Array<Actor>
}

external interface `T$369` {
    var OutActors: Array<Actor>
}

external interface `T$370` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$371` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$372` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$373` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$374` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$375` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$376` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$377` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$378` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$379` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$380` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$381` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$382` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$383` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$384` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$385` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$386` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$387` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$388` {
    var OutSamples: Array<Color>
    var `$`: Boolean
}

external interface `T$389` {
    var OutLinearSamples: Array<LinearColor>
    var `$`: Boolean
}

external interface `T$390` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$391` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$392` {
    var OutActors: Array<Actor>
}

external interface `T$393` {
    var OutActors: Array<Actor>
}

external interface `T$394` {
    var OutActors: Array<Actor>
}

external interface `T$395` {
    var OutActors: Array<Actor>
}

external interface `T$396` {
    var OutTransforms: Array<Transform>
}

external interface `T$397` {
    var Magnitudes: Array<Number>
}

external interface `T$398` {
    var Phases: Array<Number>
}

external interface `T$399` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$400` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$401` {
    var OutActors: Array<Actor>
}

external open class World : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Layers: Array<Layer>
    open var ActiveGroupActors: Array<Actor>
    open var ThumbnailInfo: ThumbnailInfo
    open var PersistentLevel: Level
    open var NetDriver: NetDriver
    open var LineBatcher: LineBatchComponent
    open var PersistentLineBatcher: LineBatchComponent
    open var ForegroundLineBatcher: LineBatchComponent
    open var NetworkManager: GameNetworkManager
    open var PhysicsCollisionHandler: PhysicsCollisionHandler
    open var ExtraReferencedObjects: Array<UObject>
    open var PerModuleDataObjects: Array<UObject>
    open var StreamingLevels: Array<LevelStreaming>
    open var StreamingLevelsToConsider: StreamingLevelsToConsider
    open var StreamingLevelsPrefix: String
    open var CurrentLevelPendingVisibility: Level
    open var CurrentLevelPendingInvisibility: Level
    open var DemoNetDriver: DemoNetDriver
    open var MyParticleEventManager: ParticleEventManager
    open var DefaultPhysicsVolume: PhysicsVolume
    open var bAreConstraintsDirty: Boolean
    open var NavigationSystem: NavigationSystemBase
    open var AuthorityGameMode: GameModeBase
    open var GameState: GameStateBase
    open var AISystem: AISystemBase
    open var AvoidanceManager: AvoidanceManager
    open var Levels: Array<Level>
    open var LevelCollections: Array<LevelCollection>
    open var CurrentLevel: Level
    open var OwningGameInstance: GameInstance
    open var ParameterCollectionInstances: Array<MaterialParameterCollectionInstance>
    open var CanvasForRenderingToTarget: Canvas
    open var CanvasForDrawMaterialToRenderTarget: Canvas
    open var EditorViews: Array<LevelViewportInfo>
    open var PhysicsField: PhysicsFieldComponent
    open var LWILastAssignedUID: Any
    open var ComponentsThatNeedPreEndOfFrameSync: Any
    open var ComponentsThatNeedEndOfFrameUpdate: Array<ActorComponent>
    open var ComponentsThatNeedEndOfFrameUpdate_OnGameThread: Array<ActorComponent>
    open var SelectedLevels: Array<Level>
    open var WorldComposition: WorldComposition
    open var PSCPool: WorldPSCPool
    open fun GetWorldSettings(): WorldSettings
    open fun HandleTimelineScrubbed()
    open fun EditorDestroyActor(Actor: Actor, bShouldModifyLevel: Boolean): Boolean
    open fun EditorExec(Cmd: String): Boolean
    open fun ExportNavigation(Path: String): String
    open fun GetDefaultBrush(): Brush
    open fun InvalidateModelGeometry(InLevel: Level)
    open fun RemoveLevelInstance()
    open fun GetAvailableAudioInputDevices(OnObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioInputDeviceInfo>) -> Unit>)
    open fun GetActors(ActorLayer: ActorLayer): Array<Actor>
    open fun ExportAnimSequence(Sequence: LevelSequence, AnimSequence: AnimSequence, ExportOption: AnimSeqExportOption, Binding: SequencerBindingProxy): Boolean
    open fun ExportLevelSequenceFBX(InSequence: LevelSequence, InBindings: Array<SequencerBindingProxy>, InMasterTracks: Array<MovieSceneTrack>, OverrideOptions: FbxExportOption, InFBXFileName: String): Boolean
    open fun GetBoundObjects(InSequence: LevelSequence, InBindings: Array<SequencerBindingProxy>, InRange: SequencerScriptingRange): Array<SequencerBoundObjects>
    open fun GetObjectBindings(InSequence: LevelSequence, InObject: Array<UObject>, InRange: SequencerScriptingRange): Array<SequencerBoundObjects>
    open fun ImportFBXToControlRig(InSequence: LevelSequence, ActorWithControlRigTrack: String, SelectedControlRigNames: Array<String>, ImportFBXControlRigSettings: MovieSceneUserImportFBXControlRigSettings, ImportFilename: String): Boolean
    open fun ImportLevelSequenceFBX(InSequence: LevelSequence, InBindings: Array<SequencerBindingProxy>, InImportFBXSettings: MovieSceneUserImportFBXSettings, InImportFilename: String): Boolean
    open fun BakeToControlRig(LevelSequence: LevelSequence, ControlRigClass: UnrealEngineClass, ExportOptions: AnimSeqExportOption, bReduceKeys: Boolean, Tolerance: Number, Binding: SequencerBindingProxy): Boolean
    open fun FindOrCreateControlRigComponentTrack(LevelSequence: LevelSequence, InBinding: SequencerBindingProxy): Array<MovieSceneTrack>
    open fun FindOrCreateControlRigTrack(LevelSequence: LevelSequence, ControlRigClass: UnrealEngineClass, InBinding: SequencerBindingProxy): MovieSceneTrack
    open fun ImportFBXToControlRigTrack(InSequence: LevelSequence, InTrack: MovieSceneControlRigParameterTrack, InSection: MovieSceneControlRigParameterSection, SelectedControlRigNames: Array<String>, ImportFBXControlRigSettings: MovieSceneUserImportFBXControlRigSettings, ImportFilename: String): Boolean
    open fun BeginPlay()
    open fun DestroyWorld()
    open fun InitializeActorsForPlay(URL: URL)
    open fun GenerateNavigation(NavData: RecastNavMesh)
    open fun GetAllActorsOfClassAndTags(ActorClass: UnrealEngineClass, Tags_Accept: Array<String>, Tags_Deny: Array<String>, OutActors: Array<Actor> = definedExternally): `T$313`
    open fun GetAllActorsOfClassAndTagsInCurrentLevel(ActorClass: UnrealEngineClass, Tags_Accept: Array<String>, Tags_Deny: Array<String>, OutActors: Array<Actor> = definedExternally): `T$314`
    open fun GetLevels(): Array<Level>
    open fun GetModel(): Model
    open fun GetWorldBounds(): Box
    open fun IsGameWorld(): Boolean
    open fun IsPlayInEditor(): Boolean
    open fun IsPlayInPreview(): Boolean
    open fun TraceChannelTestUtil(BatchOptions: TraceChannelTestBatchOptions, Start: Vector, End: Vector, SphereCapsuleRadius: Number, CapsuleHalfHeight: Number, BoxHalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, bIgnoreSelf: Boolean, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: Number): TraceQueryTestResults
    open fun RunAllFunctionalTests(bNewLog: Boolean, bRunLooped: Boolean, FailedTestsReproString: String): Boolean
    open fun AutomationWaitForLoading(LatentInfo: LatentActionInfo, Options: AutomationWaitForLoadingOptions)
    open fun DisableStatGroup(GroupName: String)
    open fun EnableStatGroup(GroupName: String)
    open fun SetScalabilityQualityLevelRelativeToMax(Value: Number)
    open fun SetScalabilityQualityToEpic()
    open fun SetScalabilityQualityToLow()
    open fun TakeAutomationScreenshot(LatentInfo: LatentActionInfo, Name: String, Notes: String, Options: AutomationScreenshotOptions)
    open fun TakeAutomationScreenshotAtCamera(LatentInfo: LatentActionInfo, Camera: CameraActor, NameOverride: String, Notes: String, Options: AutomationScreenshotOptions)
    open fun TakeAutomationScreenshotOfUI(LatentInfo: LatentActionInfo, Name: String, Options: AutomationScreenshotOptions)
    open fun AcquireNiagaraGPURayTracedCollisionGroup(): Number
    open fun GetNiagaraParameterCollection(Collection: NiagaraParameterCollection): NiagaraParameterCollectionInstance
    open fun ReleaseNiagaraGPURayTracedCollisionGroup(CollisionGroup: Number)
    open fun SetActorNiagaraGPURayTracedCollisionGroup(Actor: Actor, CollisionGroup: Number)
    open fun SetComponentNiagaraGPURayTracedCollisionGroup(Primitive: PrimitiveComponent, CollisionGroup: Number)
    open fun SpawnSystemAtLocation(SystemTemplate: NiagaraSystem, Location: Vector, Rotation: Rotator, Scale: Vector, bAutoDestroy: Boolean, bAutoActivate: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "ENCPoolMethod_MAX" */, bPreCullCheck: Boolean): NiagaraComponent
    open fun GetIsMyTurn(PlayerController: PlayerController, MatchID: String, bIsMyTurn: Boolean = definedExternally): `T$315`
    open fun GetMyPlayerIndex(PlayerController: PlayerController, MatchID: String, PlayerIndex: Number = definedExternally): `T$316`
    open fun GetPlayerDisplayName(PlayerController: PlayerController, MatchID: String, PlayerIndex: Number, PlayerDisplayName: String = definedExternally): `T$317`
    open fun RegisterTurnBasedMatchInterfaceObject(PlayerController: PlayerController, UObject: UObject)
    open fun GetCachedAchievementDescription(PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Title: String = definedExternally, LockedDescription: String = definedExternally, UnlockedDescription: String = definedExternally, bHidden: Boolean = definedExternally): `T$318`
    open fun GetCachedAchievementProgress(PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Progress: Number = definedExternally): `T$319`
    open fun VisLogBoxShape(BoxShape: Box, text: String, ObjectColor: LinearColor, LogCategory: String, bAddToMessageLog: Boolean)
    open fun VisLogLocation(Location: Vector, text: String, ObjectColor: LinearColor, Radius: Number, LogCategory: String, bAddToMessageLog: Boolean)
    open fun VisLogSegment(SegmentStart: Vector, SegmentEnd: Vector, text: String, ObjectColor: LinearColor, Thickness: Number, CategoryName: String, bAddToMessageLog: Boolean)
    open fun VisLogText(text: String, LogCategory: String, bAddToMessageLog: Boolean)
    open fun BoxOverlapActors(BoxPos: Vector, BoxExtent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$320`
    open fun BoxOverlapComponents(BoxPos: Vector, Extent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$321`
    open fun MultiBoxTraceByChannel(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$322`
    open fun MultiBoxTraceByProfile(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$323`
    open fun MultiBoxTraceForObjects(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$324`
    open fun BoxTraceByChannel(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun BoxTraceByProfile(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun BoxTraceForObjects(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun CapsuleOverlapActors(CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$325`
    open fun CapsuleOverlapComponents(CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$326`
    open fun MultiCapsuleTraceByChannel(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$327`
    open fun MultiCapsuleTraceByProfile(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$328`
    open fun MultiCapsuleTraceForObjects(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$329`
    open fun CapsuleTraceByChannel(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun CapsuleTraceByProfile(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun CapsuleTraceForObjects(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun Delay(Duration: Number, LatentInfo: LatentActionInfo)
    open fun DelayUntilNextTick(LatentInfo: LatentActionInfo)
    open fun DrawDebugArrow(LineStart: Vector, LineEnd: Vector, ArrowSize: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugBox(Center: Vector, Extent: Vector, LineColor: LinearColor, Rotation: Rotator, Duration: Number, Thickness: Number)
    open fun DrawDebugCapsule(Center: Vector, HalfHeight: Number, Radius: Number, Rotation: Rotator, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugCircle(Center: Vector, Radius: Number, NumSegments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number, YAxis: Vector, ZAxis: Vector, bDrawAxis: Boolean)
    open fun DrawDebugCone(Origin: Vector, Direction: Vector, Length: Number, AngleWidth: Number, AngleHeight: Number, NumSides: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugCoordinateSystem(AxisLoc: Vector, AxisRot: Rotator, Scale: Number, Duration: Number, Thickness: Number)
    open fun DrawDebugCylinder(Start: Vector, End: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugFloatHistoryLocation(FloatHistory: DebugFloatHistory, DrawLocation: Vector, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
    open fun DrawDebugFloatHistoryTransform(FloatHistory: DebugFloatHistory, DrawTransform: Transform, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
    open fun DrawDebugFrustum(FrustumTransform: Transform, FrustumColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugLine(LineStart: Vector, LineEnd: Vector, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugPlane(PlaneCoordinates: Plane, Location: Vector, Size: Number, PlaneColor: LinearColor, Duration: Number)
    open fun DrawDebugPoint(position: Vector, Size: Number, PointColor: LinearColor, Duration: Number)
    open fun DrawDebugSphere(Center: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugString(TextLocation: Vector, text: String, TestBaseActor: Actor, TextColor: LinearColor, Duration: Number)
    open fun ExecuteConsoleCommand(Command: String, SpecificPlayer: PlayerController)
    open fun FlushDebugStrings()
    open fun FlushPersistentDebugLines()
    open fun GetGameTimeInSeconds(): Number
    open fun HasMultipleLocalPlayers(): Boolean
    open fun IsDedicatedServer(): Boolean
    open fun IsServer(): Boolean
    open fun IsSplitScreen(): Boolean
    open fun IsStandalone(): Boolean
    open fun ClearandInvalidateTimerbyHandle(Handle: TimerHandle = definedExternally): `T$330`
    open fun ClearTimerbyHandle(Handle: TimerHandle)
    open fun GetTimerElapsedTimebyHandle(Handle: TimerHandle): Number
    open fun GetTimerRemainingTimebyHandle(Handle: TimerHandle): Number
    open fun IsTimerActivebyHandle(Handle: TimerHandle): Boolean
    open fun IsTimerPausedbyHandle(Handle: TimerHandle): Boolean
    open fun PauseTimerbyHandle(Handle: TimerHandle)
    open fun DoesTimerExistbyHandle(Handle: TimerHandle): Boolean
    open fun UnpauseTimerbyHandle(Handle: TimerHandle)
    open fun MultiLineTraceByChannel(Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$331`
    open fun MultiLineTraceByProfile(Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$332`
    open fun MultiLineTraceForObjects(Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$333`
    open fun LineTraceByChannel(Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun LineTraceByProfile(Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun LineTraceForObjects(Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun LoadAsset(Asset: UObject, OnLoaded: UnrealEngineDelegate<(Loaded: UObject) -> Unit>, LatentInfo: LatentActionInfo)
    open fun LoadAssetClass(AssetClass: Class, OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) -> Unit>, LatentInfo: LatentActionInfo)
    open fun PrintString(InString: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number, Key: String)
    open fun PrintText(InText: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number, Key: String)
    open fun QuitGame(SpecificPlayer: PlayerController, QuitPreference: String /* "Quit" | "Background" | "EQuitPreference_MAX" */, bIgnorePlatformRestrictions: Boolean)
    open fun RetriggerableDelay(Duration: Number, LatentInfo: LatentActionInfo)
    open fun SetSuppressViewportTransitionMessage(bState: Boolean)
    open fun SphereOverlapActors(SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$334`
    open fun SphereOverlapComponents(SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$335`
    open fun MultiSphereTraceByChannel(Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$336`
    open fun MultiSphereTraceByProfile(Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$337`
    open fun MultiSphereTraceForObjects(Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$338`
    open fun SphereTraceByChannel(Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun SphereTraceByProfile(Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun SphereTraceForObjects(Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
    open fun BeginDrawCanvasToRenderTarget(TextureRenderTarget: TextureRenderTarget2D, Canvas: Canvas = definedExternally, Size: Vector2D = definedExternally, Context: DrawToRenderTargetContext = definedExternally): `T$339`
    open fun ClearRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D, ClearColor: LinearColor)
    open fun ConvertRenderTargetToTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D, Texture: Texture2D)
    open fun CreateRenderTarget2D(Width: Number, Height: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor, bAutoGenerateMipMaps: Boolean): TextureRenderTarget2D
    open fun CreateRenderTarget2DArray(Width: Number, Height: Number, Slices: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor, bAutoGenerateMipMaps: Boolean): TextureRenderTarget2DArray
    open fun CreateRenderTargetVolume(Width: Number, Height: Number, Depth: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor, bAutoGenerateMipMaps: Boolean): TextureRenderTargetVolume
    open fun DrawMaterialToRenderTarget(TextureRenderTarget: TextureRenderTarget2D, Material: MaterialInterface)
    open fun EndDrawCanvasToRenderTarget(Context: DrawToRenderTargetContext)
    open fun ExportRenderTarget(TextureRenderTarget: TextureRenderTarget2D, FilePath: String, Filename: String)
    open fun ExportTexture2D(Texture: Texture2D, FilePath: String, Filename: String)
    open fun ImportBufferAsTexture2D(Buffer: Array<Number>): Texture2D
    open fun ImportFileAsTexture2D(Filename: String): Texture2D
    open fun ReadRenderTarget(TextureRenderTarget: TextureRenderTarget2D, OutSamples: Array<Color> = definedExternally, bNormalize: Boolean = definedExternally): `T$340`
    open fun ReadRenderTargetPixel(TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number): Color
    open fun ReadRenderTargetRaw(TextureRenderTarget: TextureRenderTarget2D, OutLinearSamples: Array<LinearColor> = definedExternally, bNormalize: Boolean = definedExternally): `T$341`
    open fun ReadRenderTargetRawPixel(TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number, bNormalize: Boolean): LinearColor
    open fun ReadRenderTargetRawPixelArea(TextureRenderTarget: TextureRenderTarget2D, MinX: Number, MinY: Number, MaxX: Number, MaxY: Number, bNormalize: Boolean): Array<LinearColor>
    open fun ReadRenderTargetRawUV(TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number, bNormalize: Boolean): LinearColor
    open fun ReadRenderTargetRawUVArea(TextureRenderTarget: TextureRenderTarget2D, Area: Box2D, bNormalize: Boolean): Array<LinearColor>
    open fun ReadRenderTargetUV(TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number): Color
    open fun MinAreaRectangle(InPoints: Array<Vector>, SampleSurfaceNormal: Vector, OutRectCenter: Vector = definedExternally, OutRectRotation: Rotator = definedExternally, OutRectLengthX: Number = definedExternally, OutRectLengthY: Number = definedExternally, bDebugDraw: Boolean = definedExternally): `T$342`
    open fun MinimumAreaRectangle(InVerts: Array<Vector>, SampleSurfaceNormal: Vector, OutRectCenter: Vector = definedExternally, OutRectRotation: Rotator = definedExternally, OutSideLengthX: Number = definedExternally, OutSideLengthY: Number = definedExternally, bDebugDraw: Boolean = definedExternally): `T$343`
    open fun CreateDynamicMaterialInstance(Parent: MaterialInterface, OptionalName: String, CreationFlags: String /* "None" | "Transient" | "EMIDCreationFlags_MAX" */): MaterialInstanceDynamic
    open fun GetScalarParameterValue(Collection: MaterialParameterCollection, ParameterName: String): Number
    open fun GetVectorParameterValue(Collection: MaterialParameterCollection, ParameterName: String): LinearColor
    open fun SetScalarParameterValue(Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: Number)
    open fun SetVectorParameterValue(Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: LinearColor)
    open fun ActivateReverbEffect(ReverbEffect: ReverbEffect, TagName: String, Priority: Number, Volume: Number, FadeTime: Number)
    open fun ApplyRadialDamage(BaseDamage: Number, Origin: Vector, DamageRadius: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, bDoFullDamage: Boolean, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
    open fun ApplyRadialDamageWithFalloff(BaseDamage: Number, MinimumDamage: Number, Origin: Vector, DamageInnerRadius: Number, DamageOuterRadius: Number, DamageFalloff: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
    open fun AreAnyListenersWithinRange(Location: Vector, MaximumRange: Number): Boolean
    open fun BeginDeferredActorSpawnFromClass(ActorClass: UnrealEngineClass, SpawnTransform: Transform, CollisionHandlingOverride: String /* "Undefined" | "AlwaysSpawn" | "AdjustIfPossibleButAlwaysSpawn" | "AdjustIfPossibleButDontSpawnIfColliding" | "DontSpawnIfColliding" | "ESpawnActorCollisionHandlingMethod_MAX" */, Owner: Actor): Actor
    open fun BeginSpawningActorFromBlueprint(Blueprint: Blueprint, SpawnTransform: Transform, bNoCollisionFail: Boolean): Actor
    open fun PredictProjectilePath(PredictParams: PredictProjectilePathParams, PredictResult: PredictProjectilePathResult = definedExternally): `T$344`
    open fun PredictProjectilePathByObjectType(OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */> = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$345`
    open fun PredictProjectilePathByTraceChannel(OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */ = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$346`
    open fun SuggestProjectileVelocity(TossVelocity: Vector = definedExternally, StartLocation: Vector = definedExternally, EndLocation: Vector = definedExternally, LaunchSpeed: Number = definedExternally, OverrideGravityZ: Number = definedExternally, TraceOption: String /* "DoNotTrace" | "TraceFullPath" | "OnlyTraceWhileAscending" | "ESuggestProjVelocityTraceOption_MAX" */ = definedExternally, CollisionRadius: Number = definedExternally, bFavorHighArc: Boolean = definedExternally, bDrawDebug: Boolean = definedExternally): `T$347`
    open fun ClearSoundMixClassOverride(InSoundMixModifier: SoundMix, InSoundClass: SoundClass, FadeOutTime: Number)
    open fun ClearSoundMixModifiers()
    open fun CreateLocalPlayer(ControllerId: Number, bSpawnPlayerController: Boolean): PlayerController
    open fun CreateSound2D(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
    open fun DeactivateReverbEffect(TagName: String)
    open fun FlushLevelStreaming()
    open fun GetActorOfClass(ActorClass: UnrealEngineClass): Actor
    open fun GetAllActorsOfClass(ActorClass: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$348`
    open fun GetAllActorsOfClassWithTag(ActorClass: UnrealEngineClass, Tag: String, OutActors: Array<Actor> = definedExternally): `T$349`
    open fun GetAllActorsWithInterface(Interface: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$350`
    open fun GetAllActorsWithTag(Tag: String, OutActors: Array<Actor> = definedExternally): `T$351`
    open fun GetAudioTimeSeconds(): Number
    open fun GetClosestListenerLocation(Location: Vector, MaximumRange: Number, bAllowAttenuationOverride: Boolean, ListenerPosition: Vector = definedExternally): `T$352`
    open fun GetCurrentLevelName(bRemovePrefixString: Boolean): String
    open fun GetCurrentReverbEffect(): ReverbEffect
    open fun GetEnableWorldRendering(): Boolean
    open fun GetGameInstance(): GameInstance
    open fun GetGameMode(): GameModeBase
    open fun GetGameState(): GameStateBase
    open fun GetGlobalTimeDilation(): Number
    open fun GetMaxAudioChannelCount(): Number
    open fun GetNumLocalPlayerControllers(): Number
    open fun GetNumPlayerControllers(): Number
    open fun GetNumPlayerStates(): Number
    open fun GetPlayerCameraManager(PlayerIndex: Number): PlayerCameraManager
    open fun GetPlayerCharacter(PlayerIndex: Number): Character
    open fun GetPlayerController(PlayerIndex: Number): PlayerController
    open fun GetLocalPlayerControllerFromID(ControllerId: Number): PlayerController
    open fun GetPlayerPawn(PlayerIndex: Number): Pawn
    open fun GetPlayerState(PlayerStateIndex: Number): PlayerState
    open fun GetPlayerStateFromUniqueNetId(UniqueId: UniqueNetIdRepl): PlayerState
    open fun GetRealTimeSeconds(): Number
    open fun GetStreamingLevel(PackageName: String): LevelStreaming
    open fun GetTimeSeconds(): Number
    open fun GetUnpausedTimeSeconds(): Number
    open fun GetViewportMouseCaptureMode(): String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */
    open fun GetWorldDeltaSeconds(): Number
    open fun GetWorldOriginLocation(): IntVector
    open fun GrassOverlappingSphereCount(StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
    open fun IsGamePaused(): Boolean
    open fun IsSplitscreenForceDisabled(): Boolean
    open fun LoadStreamLevel(LevelName: String, bMakeVisibleAfterLoad: Boolean, bShouldBlockOnLoad: Boolean, LatentInfo: LatentActionInfo)
    open fun LoadStreamLevel(Level: World, bMakeVisibleAfterLoad: Boolean, bShouldBlockOnLoad: Boolean, LatentInfo: LatentActionInfo)
    open fun OpenLevel(LevelName: String, bAbsolute: Boolean, Options: String)
    open fun OpenLevel(Level: World, bAbsolute: Boolean, Options: String)
    open fun PlayDialogue2D(Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number)
    open fun PlayDialogueAtLocation(Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation)
    open fun PlaySound2D(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, OwningActor: Actor, bIsUISound: Boolean)
    open fun PlaySoundAtLocation(Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, OwningActor: Actor, InitialParams: InitialActiveSoundParams = definedExternally)
    open fun PlayWorldCameraShake(Shake: UnrealEngineClass, Epicenter: Vector, InnerRadius: Number, OuterRadius: Number, Falloff: Number, bOrientShakeTowardsEpicenter: Boolean)
    open fun PopSoundMixModifier(InSoundMixModifier: SoundMix)
    open fun PushSoundMixModifier(InSoundMixModifier: SoundMix)
    open fun RebaseLocalOriginOntoZero(WorldLocation: Vector): Vector
    open fun RebaseZeroOriginOntoLocal(WorldLocation: Vector): Vector
    open fun SetBaseSoundMix(InSoundMix: SoundMix)
    open fun SetEnableWorldRendering(bEnable: Boolean)
    open fun SetForceDisableSplitscreen(bDisable: Boolean)
    open fun SetGamePaused(bPaused: Boolean): Boolean
    open fun SetGlobalListenerFocusParameters(FocusAzimuthScale: Number, NonFocusAzimuthScale: Number, FocusDistanceScale: Number, NonFocusDistanceScale: Number, FocusVolumeScale: Number, NonFocusVolumeScale: Number, FocusPriorityScale: Number, NonFocusPriorityScale: Number)
    open fun SetGlobalPitchModulation(PitchModulation: Number, TimeSec: Number)
    open fun SetGlobalTimeDilation(TimeDilation: Number)
    open fun SetMaxAudioChannelsScaled(MaxChannelCountScale: Number)
    open fun SetSoundClassDistanceScale(SoundClass: SoundClass, DistanceAttenuationScale: Number, TimeSec: Number)
    open fun SetSoundMixClassOverride(InSoundMixModifier: SoundMix, InSoundClass: SoundClass, Volume: Number, Pitch: Number, FadeInTime: Number, bApplyToChildren: Boolean)
    open fun SetViewportMouseCaptureMode(MouseCaptureMode: String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */)
    open fun SetWorldOriginLocation(NewLocation: IntVector)
    open fun SpawnDecalAtLocation(DecalMaterial: MaterialInterface, DecalSize: Vector, Location: Vector, Rotation: Rotator, LifeSpan: Number): DecalComponent
    open fun SpawnDialogue2D(Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, bAutoDestroy: Boolean): AudioComponent
    open fun SpawnDialogueAtLocation(Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent
    open fun SpawnEmitterAtLocation(EmitterTemplate: ParticleSystem, Location: Vector, Rotation: Rotator, Scale: Vector, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */, bAutoActivateSystem: Boolean): ParticleSystemComponent
    open fun SpawnForceFeedbackAtLocation(ForceFeedbackEffect: ForceFeedbackEffect, Location: Vector, Rotation: Rotator, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent
    open fun SpawnSound2D(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
    open fun SpawnSoundAtLocation(Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent
    open fun SuggestProjectileVelocityCustomArc(OutLaunchVelocity: Vector = definedExternally, StartPos: Vector = definedExternally, EndPos: Vector = definedExternally, OverrideGravityZ: Number = definedExternally, ArcParam: Number = definedExternally): `T$353`
    open fun UnloadStreamLevel(LevelName: String, LatentInfo: LatentActionInfo, bShouldBlockOnUnload: Boolean)
    open fun UnloadStreamLevel(Level: World, LatentInfo: LatentActionInfo, bShouldBlockOnUnload: Boolean)
    open fun FoliageOverlappingBoxCount(StaticMesh: StaticMesh, Box: Box): Number
    open fun FoliageOverlappingBoxTransforms(StaticMesh: StaticMesh, Box: Box, OutTransforms: Array<Transform> = definedExternally): `T$354`
    open fun FoliageOverlappingSphereCount(StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
    open fun AddMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun AddSourceEffectToPresetChain(PresetChain: SoundEffectSourcePresetChain, Entry: SourceEffectChainEntry)
    open fun AddSubmixEffect(SoundSubmix: SoundSubmix, SubmixEffectPreset: SoundEffectSubmixPreset): Number
    open fun ClearMasterSubmixEffects()
    open fun ClearSubmixEffectChainOverride(SoundSubmix: SoundSubmix, FadeTimeSec: Number)
    open fun ClearSubmixEffects(SoundSubmix: SoundSubmix)
    open fun GetAvailableAudioOutputDevices(OnObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioOutputDeviceInfo>) -> Unit>)
    open fun GetCurrentAudioOutputDeviceName(OnObtainCurrentDeviceEvent: UnrealEngineDelegate<(CurrentDevice: String) -> Unit>)
    open fun GetMagnitudeForFrequencies(Frequencies: Array<Number>, Magnitudes: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$355`
    open fun GetNumberOfEntriesInSourceEffectChain(PresetChain: SoundEffectSourcePresetChain): Number
    open fun GetPhaseForFrequencies(Frequencies: Array<Number>, Phases: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$356`
    open fun IsAudioBusActive(AudioBus: AudioBus): Boolean
    open fun PauseRecordingOutput(SubmixToPause: SoundSubmix)
    open fun RemoveMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun RemoveSourceEffectFromPresetChain(PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number)
    open fun RemoveSubmixEffect(SoundSubmix: SoundSubmix, SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun RemoveSubmixEffectAtIndex(SoundSubmix: SoundSubmix, SubmixChainIndex: Number)
    open fun RemoveSubmixEffectPreset(SoundSubmix: SoundSubmix, SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun RemoveSubmixEffectPresetAtIndex(SoundSubmix: SoundSubmix, SubmixChainIndex: Number)
    open fun ReplaceSoundEffectSubmix(InSoundSubmix: SoundSubmix, SubmixChainIndex: Number, SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun ReplaceSubmixEffect(InSoundSubmix: SoundSubmix, SubmixChainIndex: Number, SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun ResumeRecordingOutput(SubmixToPause: SoundSubmix)
    open fun SetBypassSourceEffectChainEntry(PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number, bBypassed: Boolean)
    open fun SetSubmixEffectChainOverride(SoundSubmix: SoundSubmix, SubmixEffectPresetChain: Array<SoundEffectSubmixPreset>, FadeTimeSec: Number)
    open fun StartAnalyzingOutput(SubmixToAnalyze: SoundSubmix, FFTSize: String /* "DefaultSize" | "Min" | "Small" | "Medium" | "Large" | "VeryLarge" | "Max" | "EFFTSize_MAX" */, InterpolationMethod: String /* "NearestNeighbor" | "Linear" | "Quadratic" | "ConstantQ" | "EFFTPeakInterpolationMethod_MAX" */, WindowType: String /* "None" | "Hamming" | "Hann" | "Blackman" | "EFFTWindowType_MAX" */, HopSize: Number, SpectrumType: String /* "MagnitudeSpectrum" | "PowerSpectrum" | "Decibel" | "EAudioSpectrumType_MAX" */)
    open fun StartAudioBus(AudioBus: AudioBus)
    open fun StartRecordingOutput(ExpectedDuration: Number, SubmixToRecord: SoundSubmix)
    open fun StopAnalyzingOutput(SubmixToStopAnalyzing: SoundSubmix)
    open fun StopAudioBus(AudioBus: AudioBus)
    open fun FinishRecordingOutput(ExportType: String /* "SoundWave" | "WavFile" | "EAudioRecordingExportType_MAX" */, Name: String, Path: String, SubmixToRecord: SoundSubmix, ExistingSoundWaveToOverwrite: SoundWave): SoundWave
    open fun SwapAudioOutputDevice(NewDeviceId: String, OnCompletedDeviceSwap: UnrealEngineDelegate<(SwapResult: SwapAudioOutputResult) -> Unit>)
    open fun GetMousePositionOnViewport(): Vector2D
    open fun GetViewportScale(): Number
    open fun GetViewportSize(): Vector2D
    open fun GetViewportWidgetGeometry(): Geometry
    open fun RemoveAllWidgets()
    open fun CreateWidget(WidgetType: UnrealEngineClass, OwningPlayer: PlayerController): UserWidget
    open fun GetAllWidgetsOfClass(FoundWidgets: Array<UserWidget> = definedExternally, WidgetClass: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$357`
    open fun GetAllWidgetsWithInterface(FoundWidgets: Array<UserWidget> = definedExternally, Interface: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$358`
    open fun GetSafeZonePadding(SafePadding: Vector4 = definedExternally, SafePaddingScale: Vector2D = definedExternally, SpillOverPadding: Vector4 = definedExternally): `T$359`
    open fun SetHardwareCursor(CursorShape: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */, CursorName: String, HotSpot: Vector2D): Boolean
    open fun AbsoluteToViewport(AbsoluteDesktopCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$360`
    open fun LocalToViewport(Geometry: Geometry, LocalCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$360`
    open fun ScreenToViewport(ScreenPosition: Vector2D, ViewportPosition: Vector2D = definedExternally): `T$361`
    open fun ScreenToAbsolute(ScreenPosition: Vector2D, AbsoluteCoordinate: Vector2D = definedExternally, bIncludeWindowPosition: Boolean = definedExternally): `T$362`
    open fun ScreenToLocal(Geometry: Geometry, ScreenPosition: Vector2D, LocalCoordinate: Vector2D = definedExternally, bIncludeWindowPosition: Boolean = definedExternally): `T$363`
    open fun CreateMoveToProxyObject(Pawn: Pawn, Destination: Vector, TargetActor: Actor, AcceptanceRadius: Number, bStopOnOverlap: Boolean): AIAsyncTaskBlueprintProxy
    open fun SpawnAIFromClass(PawnClass: UnrealEngineClass, BehaviorTree: BehaviorTree, Location: Vector, Rotation: Rotator, bNoCollisionFail: Boolean, Owner: Actor): Pawn
    open fun GetAllActorsOfClassMatchingTagQuery(ActorClass: UnrealEngineClass, GameplayTagQuery: GameplayTagQuery, OutActors: Array<Actor> = definedExternally): `T$364`
    open fun GetControllerTransformForTime(ControllerIndex: Number, MotionSource: String, Time: Timespan, bTimeWasUsed: Boolean = definedExternally, Orientation: Rotator = definedExternally, position: Vector = definedExternally, bProvidedLinearVelocity: Boolean = definedExternally, LinearVelocity: Vector = definedExternally, bProvidedAngularVelocity: Boolean = definedExternally, AngularVelocityRadPerSec: Vector = definedExternally, bProvidedLinearAcceleration: Boolean = definedExternally, LinearAcceleration: Vector = definedExternally): `T$365`
    open fun GetDeviceWorldPose(XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, position: Vector = definedExternally): `T$312`
    open fun GetHMDData(HMDData: XRHMDData = definedExternally): `T$366`
    open fun GetMotionControllerData(Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */, MotionControllerData: XRMotionControllerData = definedExternally): `T$367`
    open fun GetTrackingToWorldTransform(): Transform
    open fun GetWorldToMetersScale(): Number
    open fun SetWorldToMetersScale(NewScale: Number)

    companion object {
        fun Load(ResourceName: String): World
        fun Find(Outer: UObject, ResourceName: String): World
        fun GetDefaultObject(): World
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): World
        fun C(Other: UObject): World
        fun C(Other: Any): World
        fun EditorDestroyActor(World: World, Actor: Actor, bShouldModifyLevel: Boolean): Boolean
        fun EditorExec(World: World, Cmd: String): Boolean
        fun ExportNavigation(InWorld: World, Path: String): String
        fun GetDefaultBrush(World: World): Brush
        fun InvalidateModelGeometry(World: World, InLevel: Level)
        fun RemoveLevelInstance(World: World)
        fun GetAvailableAudioInputDevices(WorldContextObject: UObject, OnObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioInputDeviceInfo>) -> Unit>)
        fun GetActors(WorldContextObject: UObject, ActorLayer: ActorLayer): Array<Actor>
        fun ExportAnimSequence(World: World, Sequence: LevelSequence, AnimSequence: AnimSequence, ExportOption: AnimSeqExportOption, Binding: SequencerBindingProxy): Boolean
        fun ExportLevelSequenceFBX(InWorld: World, InSequence: LevelSequence, InBindings: Array<SequencerBindingProxy>, InMasterTracks: Array<MovieSceneTrack>, OverrideOptions: FbxExportOption, InFBXFileName: String): Boolean
        fun GetBoundObjects(InWorld: World, InSequence: LevelSequence, InBindings: Array<SequencerBindingProxy>, InRange: SequencerScriptingRange): Array<SequencerBoundObjects>
        fun GetObjectBindings(InWorld: World, InSequence: LevelSequence, InObject: Array<UObject>, InRange: SequencerScriptingRange): Array<SequencerBoundObjects>
        fun ImportFBXToControlRig(World: World, InSequence: LevelSequence, ActorWithControlRigTrack: String, SelectedControlRigNames: Array<String>, ImportFBXControlRigSettings: MovieSceneUserImportFBXControlRigSettings, ImportFilename: String): Boolean
        fun ImportLevelSequenceFBX(InWorld: World, InSequence: LevelSequence, InBindings: Array<SequencerBindingProxy>, InImportFBXSettings: MovieSceneUserImportFBXSettings, InImportFilename: String): Boolean
        fun BakeToControlRig(World: World, LevelSequence: LevelSequence, ControlRigClass: UnrealEngineClass, ExportOptions: AnimSeqExportOption, bReduceKeys: Boolean, Tolerance: Number, Binding: SequencerBindingProxy): Boolean
        fun FindOrCreateControlRigComponentTrack(World: World, LevelSequence: LevelSequence, InBinding: SequencerBindingProxy): Array<MovieSceneTrack>
        fun FindOrCreateControlRigTrack(World: World, LevelSequence: LevelSequence, ControlRigClass: UnrealEngineClass, InBinding: SequencerBindingProxy): MovieSceneTrack
        fun ImportFBXToControlRigTrack(World: World, InSequence: LevelSequence, InTrack: MovieSceneControlRigParameterTrack, InSection: MovieSceneControlRigParameterSection, SelectedControlRigNames: Array<String>, ImportFBXControlRigSettings: MovieSceneUserImportFBXControlRigSettings, ImportFilename: String): Boolean
        fun BeginPlay(World: World)
        fun DestroyWorld(World: World)
        fun InitializeActorsForPlay(World: World, URL: URL)
        fun GenerateNavigation(InWorld: World, NavData: RecastNavMesh)
        fun GetAllActorsOfClassAndTags(WorldContextObject: UObject, ActorClass: UnrealEngineClass, Tags_Accept: Array<String>, Tags_Deny: Array<String>, OutActors: Array<Actor> = definedExternally): `T$368`
        fun GetAllActorsOfClassAndTagsInCurrentLevel(WorldContextObject: UObject, ActorClass: UnrealEngineClass, Tags_Accept: Array<String>, Tags_Deny: Array<String>, OutActors: Array<Actor> = definedExternally): `T$369`
        fun GetLevels(World: World): Array<Level>
        fun GetModel(World: World): Model
        fun GetWorldBounds(InWorld: World): Box
        fun IsGameWorld(World: World): Boolean
        fun IsPlayInEditor(World: World): Boolean
        fun IsPlayInPreview(World: World): Boolean
        fun TraceChannelTestUtil(WorldContextObject: UObject, BatchOptions: TraceChannelTestBatchOptions, Start: Vector, End: Vector, SphereCapsuleRadius: Number, CapsuleHalfHeight: Number, BoxHalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, bIgnoreSelf: Boolean, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: Number): TraceQueryTestResults
        fun RunAllFunctionalTests(WorldContextObject: UObject, bNewLog: Boolean, bRunLooped: Boolean, FailedTestsReproString: String): Boolean
        fun AutomationWaitForLoading(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Options: AutomationWaitForLoadingOptions)
        fun DisableStatGroup(WorldContextObject: UObject, GroupName: String)
        fun EnableStatGroup(WorldContextObject: UObject, GroupName: String)
        fun SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject, Value: Number)
        fun SetScalabilityQualityToEpic(WorldContextObject: UObject)
        fun SetScalabilityQualityToLow(WorldContextObject: UObject)
        fun TakeAutomationScreenshot(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Name: String, Notes: String, Options: AutomationScreenshotOptions)
        fun TakeAutomationScreenshotAtCamera(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Camera: CameraActor, NameOverride: String, Notes: String, Options: AutomationScreenshotOptions)
        fun TakeAutomationScreenshotOfUI(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Name: String, Options: AutomationScreenshotOptions)
        fun AcquireNiagaraGPURayTracedCollisionGroup(WorldContextObject: UObject): Number
        fun GetNiagaraParameterCollection(WorldContextObject: UObject, Collection: NiagaraParameterCollection): NiagaraParameterCollectionInstance
        fun ReleaseNiagaraGPURayTracedCollisionGroup(WorldContextObject: UObject, CollisionGroup: Number)
        fun SetActorNiagaraGPURayTracedCollisionGroup(WorldContextObject: UObject, Actor: Actor, CollisionGroup: Number)
        fun SetComponentNiagaraGPURayTracedCollisionGroup(WorldContextObject: UObject, Primitive: PrimitiveComponent, CollisionGroup: Number)
        fun SpawnSystemAtLocation(WorldContextObject: UObject, SystemTemplate: NiagaraSystem, Location: Vector, Rotation: Rotator, Scale: Vector, bAutoDestroy: Boolean, bAutoActivate: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "ENCPoolMethod_MAX" */, bPreCullCheck: Boolean): NiagaraComponent
        fun GetIsMyTurn(WorldContextObject: UObject, PlayerController: PlayerController, MatchID: String, bIsMyTurn: Boolean = definedExternally): `T$315`
        fun GetMyPlayerIndex(WorldContextObject: UObject, PlayerController: PlayerController, MatchID: String, PlayerIndex: Number = definedExternally): `T$316`
        fun GetPlayerDisplayName(WorldContextObject: UObject, PlayerController: PlayerController, MatchID: String, PlayerIndex: Number, PlayerDisplayName: String = definedExternally): `T$317`
        fun RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject, PlayerController: PlayerController, UObject: UObject)
        fun GetCachedAchievementDescription(WorldContextObject: UObject, PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Title: String = definedExternally, LockedDescription: String = definedExternally, UnlockedDescription: String = definedExternally, bHidden: Boolean = definedExternally): `T$318`
        fun GetCachedAchievementProgress(WorldContextObject: UObject, PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Progress: Number = definedExternally): `T$319`
        fun VisLogBoxShape(WorldContextObject: UObject, BoxShape: Box, text: String, ObjectColor: LinearColor, LogCategory: String, bAddToMessageLog: Boolean)
        fun VisLogLocation(WorldContextObject: UObject, Location: Vector, text: String, ObjectColor: LinearColor, Radius: Number, LogCategory: String, bAddToMessageLog: Boolean)
        fun VisLogSegment(WorldContextObject: UObject, SegmentStart: Vector, SegmentEnd: Vector, text: String, ObjectColor: LinearColor, Thickness: Number, CategoryName: String, bAddToMessageLog: Boolean)
        fun VisLogText(WorldContextObject: UObject, text: String, LogCategory: String, bAddToMessageLog: Boolean)
        fun BoxOverlapActors(WorldContextObject: UObject, BoxPos: Vector, BoxExtent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$370`
        fun BoxOverlapComponents(WorldContextObject: UObject, BoxPos: Vector, Extent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$371`
        fun MultiBoxTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$372`
        fun MultiBoxTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$373`
        fun MultiBoxTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$374`
        fun BoxTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun BoxTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun BoxTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun CapsuleOverlapActors(WorldContextObject: UObject, CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$375`
        fun CapsuleOverlapComponents(WorldContextObject: UObject, CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$376`
        fun MultiCapsuleTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$377`
        fun MultiCapsuleTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$378`
        fun MultiCapsuleTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$379`
        fun CapsuleTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun CapsuleTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun CapsuleTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun Delay(WorldContextObject: UObject, Duration: Number, LatentInfo: LatentActionInfo)
        fun DelayUntilNextTick(WorldContextObject: UObject, LatentInfo: LatentActionInfo)
        fun DrawDebugArrow(WorldContextObject: UObject, LineStart: Vector, LineEnd: Vector, ArrowSize: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugBox(WorldContextObject: UObject, Center: Vector, Extent: Vector, LineColor: LinearColor, Rotation: Rotator, Duration: Number, Thickness: Number)
        fun DrawDebugCapsule(WorldContextObject: UObject, Center: Vector, HalfHeight: Number, Radius: Number, Rotation: Rotator, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugCircle(WorldContextObject: UObject, Center: Vector, Radius: Number, NumSegments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number, YAxis: Vector, ZAxis: Vector, bDrawAxis: Boolean)
        fun DrawDebugCone(WorldContextObject: UObject, Origin: Vector, Direction: Vector, Length: Number, AngleWidth: Number, AngleHeight: Number, NumSides: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugCoordinateSystem(WorldContextObject: UObject, AxisLoc: Vector, AxisRot: Rotator, Scale: Number, Duration: Number, Thickness: Number)
        fun DrawDebugCylinder(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugFloatHistoryLocation(WorldContextObject: UObject, FloatHistory: DebugFloatHistory, DrawLocation: Vector, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
        fun DrawDebugFloatHistoryTransform(WorldContextObject: UObject, FloatHistory: DebugFloatHistory, DrawTransform: Transform, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
        fun DrawDebugFrustum(WorldContextObject: UObject, FrustumTransform: Transform, FrustumColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugLine(WorldContextObject: UObject, LineStart: Vector, LineEnd: Vector, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugPlane(WorldContextObject: UObject, PlaneCoordinates: Plane, Location: Vector, Size: Number, PlaneColor: LinearColor, Duration: Number)
        fun DrawDebugPoint(WorldContextObject: UObject, position: Vector, Size: Number, PointColor: LinearColor, Duration: Number)
        fun DrawDebugSphere(WorldContextObject: UObject, Center: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugString(WorldContextObject: UObject, TextLocation: Vector, text: String, TestBaseActor: Actor, TextColor: LinearColor, Duration: Number)
        fun ExecuteConsoleCommand(WorldContextObject: UObject, Command: String, SpecificPlayer: PlayerController)
        fun FlushDebugStrings(WorldContextObject: UObject)
        fun FlushPersistentDebugLines(WorldContextObject: UObject)
        fun GetGameTimeInSeconds(WorldContextObject: UObject): Number
        fun HasMultipleLocalPlayers(WorldContextObject: UObject): Boolean
        fun IsDedicatedServer(WorldContextObject: UObject): Boolean
        fun IsServer(WorldContextObject: UObject): Boolean
        fun IsSplitScreen(WorldContextObject: UObject): Boolean
        fun IsStandalone(WorldContextObject: UObject): Boolean
        fun ClearandInvalidateTimerbyHandle(WorldContextObject: UObject, Handle: TimerHandle = definedExternally): `T$330`
        fun ClearTimerbyHandle(WorldContextObject: UObject, Handle: TimerHandle)
        fun GetTimerElapsedTimebyHandle(WorldContextObject: UObject, Handle: TimerHandle): Number
        fun GetTimerRemainingTimebyHandle(WorldContextObject: UObject, Handle: TimerHandle): Number
        fun IsTimerActivebyHandle(WorldContextObject: UObject, Handle: TimerHandle): Boolean
        fun IsTimerPausedbyHandle(WorldContextObject: UObject, Handle: TimerHandle): Boolean
        fun PauseTimerbyHandle(WorldContextObject: UObject, Handle: TimerHandle)
        fun DoesTimerExistbyHandle(WorldContextObject: UObject, Handle: TimerHandle): Boolean
        fun UnpauseTimerbyHandle(WorldContextObject: UObject, Handle: TimerHandle)
        fun MultiLineTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$380`
        fun MultiLineTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$381`
        fun MultiLineTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$382`
        fun LineTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun LineTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun LineTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun LoadAsset(WorldContextObject: UObject, Asset: UObject, OnLoaded: UnrealEngineDelegate<(Loaded: UObject) -> Unit>, LatentInfo: LatentActionInfo)
        fun LoadAssetClass(WorldContextObject: UObject, AssetClass: Class, OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) -> Unit>, LatentInfo: LatentActionInfo)
        fun PrintString(WorldContextObject: UObject, InString: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number, Key: String)
        fun PrintText(WorldContextObject: UObject, InText: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number, Key: String)
        fun QuitGame(WorldContextObject: UObject, SpecificPlayer: PlayerController, QuitPreference: String /* "Quit" | "Background" | "EQuitPreference_MAX" */, bIgnorePlatformRestrictions: Boolean)
        fun RetriggerableDelay(WorldContextObject: UObject, Duration: Number, LatentInfo: LatentActionInfo)
        fun SetSuppressViewportTransitionMessage(WorldContextObject: UObject, bState: Boolean)
        fun SphereOverlapActors(WorldContextObject: UObject, SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$383`
        fun SphereOverlapComponents(WorldContextObject: UObject, SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$384`
        fun MultiSphereTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$385`
        fun MultiSphereTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$386`
        fun MultiSphereTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$387`
        fun SphereTraceByChannel(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun SphereTraceByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun SphereTraceForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$53`
        fun BeginDrawCanvasToRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, Canvas: Canvas = definedExternally, Size: Vector2D = definedExternally, Context: DrawToRenderTargetContext = definedExternally): `T$339`
        fun ClearRenderTarget2D(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, ClearColor: LinearColor)
        fun ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: UObject, RenderTarget: TextureRenderTarget2D, Texture: Texture2D)
        fun CreateRenderTarget2D(WorldContextObject: UObject, Width: Number, Height: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor, bAutoGenerateMipMaps: Boolean): TextureRenderTarget2D
        fun CreateRenderTarget2DArray(WorldContextObject: UObject, Width: Number, Height: Number, Slices: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor, bAutoGenerateMipMaps: Boolean): TextureRenderTarget2DArray
        fun CreateRenderTargetVolume(WorldContextObject: UObject, Width: Number, Height: Number, Depth: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_RGBA8_SRGB" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor, bAutoGenerateMipMaps: Boolean): TextureRenderTargetVolume
        fun DrawMaterialToRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, Material: MaterialInterface)
        fun EndDrawCanvasToRenderTarget(WorldContextObject: UObject, Context: DrawToRenderTargetContext)
        fun ExportRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, FilePath: String, Filename: String)
        fun ExportTexture2D(WorldContextObject: UObject, Texture: Texture2D, FilePath: String, Filename: String)
        fun ImportBufferAsTexture2D(WorldContextObject: UObject, Buffer: Array<Number>): Texture2D
        fun ImportFileAsTexture2D(WorldContextObject: UObject, Filename: String): Texture2D
        fun ReadRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, OutSamples: Array<Color> = definedExternally, bNormalize: Boolean = definedExternally): `T$388`
        fun ReadRenderTargetPixel(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number): Color
        fun ReadRenderTargetRaw(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, OutLinearSamples: Array<LinearColor> = definedExternally, bNormalize: Boolean = definedExternally): `T$389`
        fun ReadRenderTargetRawPixel(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number, bNormalize: Boolean): LinearColor
        fun ReadRenderTargetRawPixelArea(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, MinX: Number, MinY: Number, MaxX: Number, MaxY: Number, bNormalize: Boolean): Array<LinearColor>
        fun ReadRenderTargetRawUV(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number, bNormalize: Boolean): LinearColor
        fun ReadRenderTargetRawUVArea(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, Area: Box2D, bNormalize: Boolean): Array<LinearColor>
        fun ReadRenderTargetUV(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number): Color
        fun MinAreaRectangle(WorldContextObject: UObject, InPoints: Array<Vector>, SampleSurfaceNormal: Vector, OutRectCenter: Vector = definedExternally, OutRectRotation: Rotator = definedExternally, OutRectLengthX: Number = definedExternally, OutRectLengthY: Number = definedExternally, bDebugDraw: Boolean = definedExternally): `T$342`
        fun MinimumAreaRectangle(WorldContextObject: UObject, InVerts: Array<Vector>, SampleSurfaceNormal: Vector, OutRectCenter: Vector = definedExternally, OutRectRotation: Rotator = definedExternally, OutSideLengthX: Number = definedExternally, OutSideLengthY: Number = definedExternally, bDebugDraw: Boolean = definedExternally): `T$343`
        fun CreateDynamicMaterialInstance(WorldContextObject: UObject, Parent: MaterialInterface, OptionalName: String, CreationFlags: String /* "None" | "Transient" | "EMIDCreationFlags_MAX" */): MaterialInstanceDynamic
        fun GetScalarParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String): Number
        fun GetVectorParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String): LinearColor
        fun SetScalarParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: Number)
        fun SetVectorParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: LinearColor)
        fun ActivateReverbEffect(WorldContextObject: UObject, ReverbEffect: ReverbEffect, TagName: String, Priority: Number, Volume: Number, FadeTime: Number)
        fun ApplyRadialDamage(WorldContextObject: UObject, BaseDamage: Number, Origin: Vector, DamageRadius: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, bDoFullDamage: Boolean, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
        fun ApplyRadialDamageWithFalloff(WorldContextObject: UObject, BaseDamage: Number, MinimumDamage: Number, Origin: Vector, DamageInnerRadius: Number, DamageOuterRadius: Number, DamageFalloff: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
        fun AreAnyListenersWithinRange(WorldContextObject: UObject, Location: Vector, MaximumRange: Number): Boolean
        fun BeginDeferredActorSpawnFromClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass, SpawnTransform: Transform, CollisionHandlingOverride: String /* "Undefined" | "AlwaysSpawn" | "AdjustIfPossibleButAlwaysSpawn" | "AdjustIfPossibleButDontSpawnIfColliding" | "DontSpawnIfColliding" | "ESpawnActorCollisionHandlingMethod_MAX" */, Owner: Actor): Actor
        fun BeginSpawningActorFromBlueprint(WorldContextObject: UObject, Blueprint: Blueprint, SpawnTransform: Transform, bNoCollisionFail: Boolean): Actor
        fun PredictProjectilePath(WorldContextObject: UObject, PredictParams: PredictProjectilePathParams, PredictResult: PredictProjectilePathResult = definedExternally): `T$344`
        fun PredictProjectilePathByObjectType(WorldContextObject: UObject, OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */> = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$390`
        fun PredictProjectilePathByTraceChannel(WorldContextObject: UObject, OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */ = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$391`
        fun SuggestProjectileVelocity(WorldContextObject: UObject, TossVelocity: Vector = definedExternally, StartLocation: Vector = definedExternally, EndLocation: Vector = definedExternally, LaunchSpeed: Number = definedExternally, OverrideGravityZ: Number = definedExternally, TraceOption: String /* "DoNotTrace" | "TraceFullPath" | "OnlyTraceWhileAscending" | "ESuggestProjVelocityTraceOption_MAX" */ = definedExternally, CollisionRadius: Number = definedExternally, bFavorHighArc: Boolean = definedExternally, bDrawDebug: Boolean = definedExternally): `T$347`
        fun ClearSoundMixClassOverride(WorldContextObject: UObject, InSoundMixModifier: SoundMix, InSoundClass: SoundClass, FadeOutTime: Number)
        fun ClearSoundMixModifiers(WorldContextObject: UObject)
        fun CreateLocalPlayer(WorldContextObject: UObject, ControllerId: Number, bSpawnPlayerController: Boolean): PlayerController
        fun CreateSound2D(WorldContextObject: UObject, Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
        fun DeactivateReverbEffect(WorldContextObject: UObject, TagName: String)
        fun FlushLevelStreaming(WorldContextObject: UObject)
        fun GetActorOfClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass): Actor
        fun GetAllActorsOfClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$392`
        fun GetAllActorsOfClassWithTag(WorldContextObject: UObject, ActorClass: UnrealEngineClass, Tag: String, OutActors: Array<Actor> = definedExternally): `T$393`
        fun GetAllActorsWithInterface(WorldContextObject: UObject, Interface: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$394`
        fun GetAllActorsWithTag(WorldContextObject: UObject, Tag: String, OutActors: Array<Actor> = definedExternally): `T$395`
        fun GetAudioTimeSeconds(WorldContextObject: UObject): Number
        fun GetClosestListenerLocation(WorldContextObject: UObject, Location: Vector, MaximumRange: Number, bAllowAttenuationOverride: Boolean, ListenerPosition: Vector = definedExternally): `T$352`
        fun GetCurrentLevelName(WorldContextObject: UObject, bRemovePrefixString: Boolean): String
        fun GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect
        fun GetEnableWorldRendering(WorldContextObject: UObject): Boolean
        fun GetGameInstance(WorldContextObject: UObject): GameInstance
        fun GetGameMode(WorldContextObject: UObject): GameModeBase
        fun GetGameState(WorldContextObject: UObject): GameStateBase
        fun GetGlobalTimeDilation(WorldContextObject: UObject): Number
        fun GetMaxAudioChannelCount(WorldContextObject: UObject): Number
        fun GetNumLocalPlayerControllers(WorldContextObject: UObject): Number
        fun GetNumPlayerControllers(WorldContextObject: UObject): Number
        fun GetNumPlayerStates(WorldContextObject: UObject): Number
        fun GetPlayerCameraManager(WorldContextObject: UObject, PlayerIndex: Number): PlayerCameraManager
        fun GetPlayerCharacter(WorldContextObject: UObject, PlayerIndex: Number): Character
        fun GetPlayerController(WorldContextObject: UObject, PlayerIndex: Number): PlayerController
        fun GetLocalPlayerControllerFromID(WorldContextObject: UObject, ControllerId: Number): PlayerController
        fun GetPlayerPawn(WorldContextObject: UObject, PlayerIndex: Number): Pawn
        fun GetPlayerState(WorldContextObject: UObject, PlayerStateIndex: Number): PlayerState
        fun GetPlayerStateFromUniqueNetId(WorldContextObject: UObject, UniqueId: UniqueNetIdRepl): PlayerState
        fun GetRealTimeSeconds(WorldContextObject: UObject): Number
        fun GetStreamingLevel(WorldContextObject: UObject, PackageName: String): LevelStreaming
        fun GetTimeSeconds(WorldContextObject: UObject): Number
        fun GetUnpausedTimeSeconds(WorldContextObject: UObject): Number
        fun GetViewportMouseCaptureMode(WorldContextObject: UObject): String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */
        fun GetWorldDeltaSeconds(WorldContextObject: UObject): Number
        fun GetWorldOriginLocation(WorldContextObject: UObject): IntVector
        fun GrassOverlappingSphereCount(WorldContextObject: UObject, StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
        fun IsGamePaused(WorldContextObject: UObject): Boolean
        fun IsSplitscreenForceDisabled(WorldContextObject: UObject): Boolean
        fun LoadStreamLevel(WorldContextObject: UObject, LevelName: String, bMakeVisibleAfterLoad: Boolean, bShouldBlockOnLoad: Boolean, LatentInfo: LatentActionInfo)
        fun LoadStreamLevel(WorldContextObject: UObject, Level: World, bMakeVisibleAfterLoad: Boolean, bShouldBlockOnLoad: Boolean, LatentInfo: LatentActionInfo)
        fun OpenLevel(WorldContextObject: UObject, LevelName: String, bAbsolute: Boolean, Options: String)
        fun OpenLevel(WorldContextObject: UObject, Level: World, bAbsolute: Boolean, Options: String)
        fun PlayDialogue2D(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number)
        fun PlayDialogueAtLocation(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation)
        fun PlaySound2D(WorldContextObject: UObject, Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, OwningActor: Actor, bIsUISound: Boolean)
        fun PlaySoundAtLocation(WorldContextObject: UObject, Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, OwningActor: Actor, InitialParams: InitialActiveSoundParams = definedExternally)
        fun PlayWorldCameraShake(WorldContextObject: UObject, Shake: UnrealEngineClass, Epicenter: Vector, InnerRadius: Number, OuterRadius: Number, Falloff: Number, bOrientShakeTowardsEpicenter: Boolean)
        fun PopSoundMixModifier(WorldContextObject: UObject, InSoundMixModifier: SoundMix)
        fun PushSoundMixModifier(WorldContextObject: UObject, InSoundMixModifier: SoundMix)
        fun RebaseLocalOriginOntoZero(WorldContextObject: UObject, WorldLocation: Vector): Vector
        fun RebaseZeroOriginOntoLocal(WorldContextObject: UObject, WorldLocation: Vector): Vector
        fun SetBaseSoundMix(WorldContextObject: UObject, InSoundMix: SoundMix)
        fun SetEnableWorldRendering(WorldContextObject: UObject, bEnable: Boolean)
        fun SetForceDisableSplitscreen(WorldContextObject: UObject, bDisable: Boolean)
        fun SetGamePaused(WorldContextObject: UObject, bPaused: Boolean): Boolean
        fun SetGlobalListenerFocusParameters(WorldContextObject: UObject, FocusAzimuthScale: Number, NonFocusAzimuthScale: Number, FocusDistanceScale: Number, NonFocusDistanceScale: Number, FocusVolumeScale: Number, NonFocusVolumeScale: Number, FocusPriorityScale: Number, NonFocusPriorityScale: Number)
        fun SetGlobalPitchModulation(WorldContextObject: UObject, PitchModulation: Number, TimeSec: Number)
        fun SetGlobalTimeDilation(WorldContextObject: UObject, TimeDilation: Number)
        fun SetMaxAudioChannelsScaled(WorldContextObject: UObject, MaxChannelCountScale: Number)
        fun SetSoundClassDistanceScale(WorldContextObject: UObject, SoundClass: SoundClass, DistanceAttenuationScale: Number, TimeSec: Number)
        fun SetSoundMixClassOverride(WorldContextObject: UObject, InSoundMixModifier: SoundMix, InSoundClass: SoundClass, Volume: Number, Pitch: Number, FadeInTime: Number, bApplyToChildren: Boolean)
        fun SetViewportMouseCaptureMode(WorldContextObject: UObject, MouseCaptureMode: String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */)
        fun SetWorldOriginLocation(WorldContextObject: UObject, NewLocation: IntVector)
        fun SpawnDecalAtLocation(WorldContextObject: UObject, DecalMaterial: MaterialInterface, DecalSize: Vector, Location: Vector, Rotation: Rotator, LifeSpan: Number): DecalComponent
        fun SpawnDialogue2D(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, bAutoDestroy: Boolean): AudioComponent
        fun SpawnDialogueAtLocation(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent
        fun SpawnEmitterAtLocation(WorldContextObject: UObject, EmitterTemplate: ParticleSystem, Location: Vector, Rotation: Rotator, Scale: Vector, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */, bAutoActivateSystem: Boolean): ParticleSystemComponent
        fun SpawnForceFeedbackAtLocation(WorldContextObject: UObject, ForceFeedbackEffect: ForceFeedbackEffect, Location: Vector, Rotation: Rotator, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent
        fun SpawnSound2D(WorldContextObject: UObject, Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
        fun SpawnSoundAtLocation(WorldContextObject: UObject, Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent
        fun SuggestProjectileVelocityCustomArc(WorldContextObject: UObject, OutLaunchVelocity: Vector = definedExternally, StartPos: Vector = definedExternally, EndPos: Vector = definedExternally, OverrideGravityZ: Number = definedExternally, ArcParam: Number = definedExternally): `T$353`
        fun UnloadStreamLevel(WorldContextObject: UObject, LevelName: String, LatentInfo: LatentActionInfo, bShouldBlockOnUnload: Boolean)
        fun UnloadStreamLevel(WorldContextObject: UObject, Level: World, LatentInfo: LatentActionInfo, bShouldBlockOnUnload: Boolean)
        fun FoliageOverlappingBoxCount(WorldContextObject: UObject, StaticMesh: StaticMesh, Box: Box): Number
        fun FoliageOverlappingBoxTransforms(WorldContextObject: UObject, StaticMesh: StaticMesh, Box: Box, OutTransforms: Array<Transform> = definedExternally): `T$396`
        fun FoliageOverlappingSphereCount(WorldContextObject: UObject, StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
        fun AddMasterSubmixEffect(WorldContextObject: UObject, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun AddSourceEffectToPresetChain(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain, Entry: SourceEffectChainEntry)
        fun AddSubmixEffect(WorldContextObject: UObject, SoundSubmix: SoundSubmix, SubmixEffectPreset: SoundEffectSubmixPreset): Number
        fun ClearMasterSubmixEffects(WorldContextObject: UObject)
        fun ClearSubmixEffectChainOverride(WorldContextObject: UObject, SoundSubmix: SoundSubmix, FadeTimeSec: Number)
        fun ClearSubmixEffects(WorldContextObject: UObject, SoundSubmix: SoundSubmix)
        fun GetAvailableAudioOutputDevices(WorldContextObject: UObject, OnObtainDevicesEvent: UnrealEngineDelegate<(AvailableDevices: Array<AudioOutputDeviceInfo>) -> Unit>)
        fun GetCurrentAudioOutputDeviceName(WorldContextObject: UObject, OnObtainCurrentDeviceEvent: UnrealEngineDelegate<(CurrentDevice: String) -> Unit>)
        fun GetMagnitudeForFrequencies(WorldContextObject: UObject, Frequencies: Array<Number>, Magnitudes: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$397`
        fun GetNumberOfEntriesInSourceEffectChain(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain): Number
        fun GetPhaseForFrequencies(WorldContextObject: UObject, Frequencies: Array<Number>, Phases: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$398`
        fun IsAudioBusActive(WorldContextObject: UObject, AudioBus: AudioBus): Boolean
        fun PauseRecordingOutput(WorldContextObject: UObject, SubmixToPause: SoundSubmix)
        fun RemoveMasterSubmixEffect(WorldContextObject: UObject, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun RemoveSourceEffectFromPresetChain(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number)
        fun RemoveSubmixEffect(WorldContextObject: UObject, SoundSubmix: SoundSubmix, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun RemoveSubmixEffectAtIndex(WorldContextObject: UObject, SoundSubmix: SoundSubmix, SubmixChainIndex: Number)
        fun RemoveSubmixEffectPreset(WorldContextObject: UObject, SoundSubmix: SoundSubmix, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun RemoveSubmixEffectPresetAtIndex(WorldContextObject: UObject, SoundSubmix: SoundSubmix, SubmixChainIndex: Number)
        fun ReplaceSoundEffectSubmix(WorldContextObject: UObject, InSoundSubmix: SoundSubmix, SubmixChainIndex: Number, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun ReplaceSubmixEffect(WorldContextObject: UObject, InSoundSubmix: SoundSubmix, SubmixChainIndex: Number, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun ResumeRecordingOutput(WorldContextObject: UObject, SubmixToPause: SoundSubmix)
        fun SetBypassSourceEffectChainEntry(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number, bBypassed: Boolean)
        fun SetSubmixEffectChainOverride(WorldContextObject: UObject, SoundSubmix: SoundSubmix, SubmixEffectPresetChain: Array<SoundEffectSubmixPreset>, FadeTimeSec: Number)
        fun StartAnalyzingOutput(WorldContextObject: UObject, SubmixToAnalyze: SoundSubmix, FFTSize: String /* "DefaultSize" | "Min" | "Small" | "Medium" | "Large" | "VeryLarge" | "Max" | "EFFTSize_MAX" */, InterpolationMethod: String /* "NearestNeighbor" | "Linear" | "Quadratic" | "ConstantQ" | "EFFTPeakInterpolationMethod_MAX" */, WindowType: String /* "None" | "Hamming" | "Hann" | "Blackman" | "EFFTWindowType_MAX" */, HopSize: Number, SpectrumType: String /* "MagnitudeSpectrum" | "PowerSpectrum" | "Decibel" | "EAudioSpectrumType_MAX" */)
        fun StartAudioBus(WorldContextObject: UObject, AudioBus: AudioBus)
        fun StartRecordingOutput(WorldContextObject: UObject, ExpectedDuration: Number, SubmixToRecord: SoundSubmix)
        fun StopAnalyzingOutput(WorldContextObject: UObject, SubmixToStopAnalyzing: SoundSubmix)
        fun StopAudioBus(WorldContextObject: UObject, AudioBus: AudioBus)
        fun FinishRecordingSubmixOutput(WorldContextObject: UObject, ExportType: String /* "SoundWave" | "WavFile" | "EAudioRecordingExportType_MAX" */, Name: String, Path: String, SubmixToRecord: SoundSubmix, ExistingSoundWaveToOverwrite: SoundWave): SoundWave
        fun SwapAudioOutputDevice(WorldContextObject: UObject, NewDeviceId: String, OnCompletedDeviceSwap: UnrealEngineDelegate<(SwapResult: SwapAudioOutputResult) -> Unit>)
        fun GetMousePositionOnViewport(WorldContextObject: UObject): Vector2D
        fun GetViewportScale(WorldContextObject: UObject): Number
        fun GetViewportSize(WorldContextObject: UObject): Vector2D
        fun GetViewportWidgetGeometry(WorldContextObject: UObject): Geometry
        fun RemoveAllWidgets(WorldContextObject: UObject)
        fun CreateWidget(WorldContextObject: UObject, WidgetType: UnrealEngineClass, OwningPlayer: PlayerController): UserWidget
        fun GetAllWidgetsOfClass(WorldContextObject: UObject, FoundWidgets: Array<UserWidget> = definedExternally, WidgetClass: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$399`
        fun GetAllWidgetsWithInterface(WorldContextObject: UObject, FoundWidgets: Array<UserWidget> = definedExternally, Interface: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$400`
        fun GetSafeZonePadding(WorldContextObject: UObject, SafePadding: Vector4 = definedExternally, SafePaddingScale: Vector2D = definedExternally, SpillOverPadding: Vector4 = definedExternally): `T$359`
        fun SetHardwareCursor(WorldContextObject: UObject, CursorShape: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */, CursorName: String, HotSpot: Vector2D): Boolean
        fun AbsoluteToViewport(WorldContextObject: UObject, AbsoluteDesktopCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$360`
        fun LocalToViewport(WorldContextObject: UObject, Geometry: Geometry, LocalCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$360`
        fun ScreenToViewport(WorldContextObject: UObject, ScreenPosition: Vector2D, ViewportPosition: Vector2D = definedExternally): `T$361`
        fun ScreenToAbsolute(WorldContextObject: UObject, ScreenPosition: Vector2D, AbsoluteCoordinate: Vector2D = definedExternally, bIncludeWindowPosition: Boolean = definedExternally): `T$362`
        fun ScreenToLocal(WorldContextObject: UObject, Geometry: Geometry, ScreenPosition: Vector2D, LocalCoordinate: Vector2D = definedExternally, bIncludeWindowPosition: Boolean = definedExternally): `T$363`
        fun CreateMoveToProxyObject(WorldContextObject: UObject, Pawn: Pawn, Destination: Vector, TargetActor: Actor, AcceptanceRadius: Number, bStopOnOverlap: Boolean): AIAsyncTaskBlueprintProxy
        fun SpawnAIFromClass(WorldContextObject: UObject, PawnClass: UnrealEngineClass, BehaviorTree: BehaviorTree, Location: Vector, Rotation: Rotator, bNoCollisionFail: Boolean, Owner: Actor): Pawn
        fun GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject, ActorClass: UnrealEngineClass, GameplayTagQuery: GameplayTagQuery, OutActors: Array<Actor> = definedExternally): `T$401`
        fun GetControllerTransformForTime(WorldContext: UObject, ControllerIndex: Number, MotionSource: String, Time: Timespan, bTimeWasUsed: Boolean = definedExternally, Orientation: Rotator = definedExternally, position: Vector = definedExternally, bProvidedLinearVelocity: Boolean = definedExternally, LinearVelocity: Vector = definedExternally, bProvidedAngularVelocity: Boolean = definedExternally, AngularVelocityRadPerSec: Vector = definedExternally, bProvidedLinearAcceleration: Boolean = definedExternally, LinearAcceleration: Vector = definedExternally): `T$365`
        fun GetDeviceWorldPose(WorldContext: UObject, XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, position: Vector = definedExternally): `T$312`
        fun GetHMDData(WorldContext: UObject, HMDData: XRHMDData = definedExternally): `T$366`
        fun GetMotionControllerData(WorldContext: UObject, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "HMD" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */, MotionControllerData: XRMotionControllerData = definedExternally): `T$367`
        fun GetTrackingToWorldTransform(WorldContext: UObject): Transform
        fun GetWorldToMetersScale(WorldContext: UObject): Number
        fun SetWorldToMetersScale(WorldContext: UObject, NewScale: Number)
    }
}
