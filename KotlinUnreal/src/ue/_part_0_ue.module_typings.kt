@file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS")
package ue

import kotlin.js.*
import org.khronos.webgl.*
import org.w3c.dom.*
import org.w3c.dom.events.*
import org.w3c.dom.parsing.*
import org.w3c.dom.svg.*
import org.w3c.dom.url.*
import org.w3c.fetch.*
import org.w3c.files.*
import org.w3c.notifications.*
import org.w3c.performance.*
import org.w3c.workers.*
import org.w3c.xhr.*

external fun gc()

typealias UnrealEngineClass = Any

typealias timeout_handle = Any

external fun setTimeout(fn: (milliseconds: Number) -> Unit, timeout: Number): timeout_handle

external fun clearTimeout(handle: timeout_handle)

external open class UnrealEngineMulticastDelegate<T> {
    open fun Add(fn: T)
    open fun Remove(fn: T)
}

external open class UnrealEngineDelegate<T> {
    open fun Add(fn: T)
    open fun Remove(fn: T)
}

external open class Process {
    open fun nextTick(fn: (number: Any) -> Unit)
}

external var process: Process

external open class Memory {
    open fun exec(ab: ArrayBuffer, fn: (ab: ArrayBuffer) -> Unit)
    open fun access(obj: JavascriptMemoryObject): ArrayBuffer
}

external var memory: Memory

external var GEngine: Engine

external var GWorld: World

external var Root: dynamic /* JavascriptComponent | Any */

external open class Field : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun HasMetaData(Key: String): Boolean
    open fun GetMetaData(Key: String): String

    companion object {
        fun Load(ResourceName: String): Field
        fun Find(Outer: UObject, ResourceName: String): Field
        fun GetDefaultObject(): Field
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Field
        fun C(Other: UObject): Field
        fun C(Other: Any): Field
        fun HasMetaData(Field: Field, Key: String): Boolean
        fun GetMetaData(Field: Field, Key: String): String
    }
}

external open class Enum : Field {
    constructor()
    constructor(Outer: UObject)
    open fun GetEnumeratorName(EnumeratorValue: Number): String
    open fun GetEnumeratorUserFriendlyName(EnumeratorValue: Number): String
    open fun GetEnumeratorValueFromIndex(EnumeratorIndex: Number): Number
    open fun GetValidValue(EnumeratorValue: Number): Number

    companion object {
        fun Load(ResourceName: String): Enum
        fun Find(Outer: UObject, ResourceName: String): Enum
        fun GetDefaultObject(): Enum
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Enum
        fun C(Other: UObject): Enum
        fun C(Other: Any): Enum
        fun GetEnumeratorName(Enum: Enum, EnumeratorValue: Number): String
        fun GetEnumeratorUserFriendlyName(Enum: Enum, EnumeratorValue: Number): String
        fun GetEnumeratorValueFromIndex(Enum: Enum, EnumeratorIndex: Number): Number
        fun GetValidValue(Enum: Enum, EnumeratorValue: Number): Number
    }
}

external open class LayerActorStats {
    open var Type: UnrealEngineClass
    open var Total: Number
    open fun clone(): LayerActorStats

    companion object {
        fun C(Other: UObject): LayerActorStats
        fun C(Other: Any): LayerActorStats
    }
}

external open class Layer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LayerName: String
    open var bIsVisible: Boolean
    open var ActorStats: Array<LayerActorStats>

    companion object {
        fun Load(ResourceName: String): Layer
        fun Find(Outer: UObject, ResourceName: String): Layer
        fun GetDefaultObject(): Layer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Layer
        fun C(Other: UObject): Layer
        fun C(Other: Any): Layer
    }
}

external object ETickingGroup {
    var TG_PrePhysics: String /* "TG_PrePhysics" */
    var TG_StartPhysics: String /* "TG_StartPhysics" */
    var TG_DuringPhysics: String /* "TG_DuringPhysics" */
    var TG_EndPhysics: String /* "TG_EndPhysics" */
    var TG_PostPhysics: String /* "TG_PostPhysics" */
    var TG_PostUpdateWork: String /* "TG_PostUpdateWork" */
    var TG_LastDemotable: String /* "TG_LastDemotable" */
    var TG_NewlySpawned: String /* "TG_NewlySpawned" */
    var TG_MAX: String /* "TG_MAX" */
}

external open class TickFunction {
    open var TickGroup: String /* "TG_PrePhysics" | "TG_StartPhysics" | "TG_DuringPhysics" | "TG_EndPhysics" | "TG_PostPhysics" | "TG_PostUpdateWork" | "TG_LastDemotable" | "TG_NewlySpawned" | "TG_MAX" */
    open var EndTickGroup: String /* "TG_PrePhysics" | "TG_StartPhysics" | "TG_DuringPhysics" | "TG_EndPhysics" | "TG_PostPhysics" | "TG_PostUpdateWork" | "TG_LastDemotable" | "TG_NewlySpawned" | "TG_MAX" */
    open var bTickEvenWhenPaused: Boolean
    open var bCanEverTick: Boolean
    open var bStartWithTickEnabled: Boolean
    open var bAllowTickOnDedicatedServer: Boolean
    open var TickInterval: Number
    open fun clone(): TickFunction

    companion object {
        fun C(Other: UObject): TickFunction
        fun C(Other: Any): TickFunction
    }
}

external open class ActorTickFunction : TickFunction {
    override fun clone(): ActorTickFunction

    companion object {
        fun C(Other: UObject): ActorTickFunction
        fun C(Other: Any): ActorTickFunction
    }
}

external object ENetRole {
    var ROLE_None: String /* "ROLE_None" */
    var ROLE_SimulatedProxy: String /* "ROLE_SimulatedProxy" */
    var ROLE_AutonomousProxy: String /* "ROLE_AutonomousProxy" */
    var ROLE_Authority: String /* "ROLE_Authority" */
    var ROLE_MAX: String /* "ROLE_MAX" */
}

external open class IntPoint {
    open var X: Number
    open var Y: Number
    open fun clone(): IntPoint

    companion object {
        fun C(Other: UObject): IntPoint
        fun C(Other: Any): IntPoint
    }
}

external open class Box2D {
    open var Min: Vector2D
    open var Max: Vector2D
    open var bIsValid: Number
    open fun clone(): Box2D

    companion object {
        fun C(Other: UObject): Box2D
        fun C(Other: Any): Box2D
    }
}

external object EARLineTraceChannels {
    var None: String /* "None" */
    var FeaturePoint: String /* "FeaturePoint" */
    var GroundPlane: String /* "GroundPlane" */
    var PlaneUsingExtent: String /* "PlaneUsingExtent" */
    var PlaneUsingBoundaryPolygon: String /* "PlaneUsingBoundaryPolygon" */
    var EARLineTraceChannels_MAX: String /* "EARLineTraceChannels_MAX" */
}

external object EOrientPositionSelector {
    var Orientation: String /* "Orientation" */
    var Position: String /* "Position" */
    var OrientationAndPosition: String /* "OrientationAndPosition" */
    var EOrientPositionSelector_MAX: String /* "EOrientPositionSelector_MAX" */
}

external object EEasingFunc {
    var Linear: String /* "Linear" */
    var Step: String /* "Step" */
    var SinusoidalIn: String /* "SinusoidalIn" */
    var SinusoidalOut: String /* "SinusoidalOut" */
    var SinusoidalInOut: String /* "SinusoidalInOut" */
    var EaseIn: String /* "EaseIn" */
    var EaseOut: String /* "EaseOut" */
    var EaseInOut: String /* "EaseInOut" */
    var ExpoIn: String /* "ExpoIn" */
    var ExpoOut: String /* "ExpoOut" */
    var ExpoInOut: String /* "ExpoInOut" */
    var CircularIn: String /* "CircularIn" */
    var CircularOut: String /* "CircularOut" */
    var CircularInOut: String /* "CircularInOut" */
    var EEasingFunc_MAX: String /* "EEasingFunc_MAX" */
}

external interface `T$230` {
    var InitialSeed: Number
}

external interface `T$231` {
    var Stream: RandomStream
}

external open class RandomStream {
    open var InitialSeed: Number
    open var Seed: Number
    open fun clone(): RandomStream
    open fun BreakRandomStream(InitialSeed: Number = definedExternally): `T$230`
    open fun RandomBoolFromStream(): Boolean
    open fun RandomFloatFromStream(): Number
    open fun RandomUnitVectorFromStream(): Vector
    open fun ResetRandomStream()
    open fun SeedRandomStream(): `T$231`
    open fun SetRandomStreamSeed(NewSeed: Number = definedExternally): `T$231`

    companion object {
        fun C(Other: UObject): RandomStream
        fun C(Other: Any): RandomStream
        fun BreakRandomStream(InRandomStream: RandomStream, InitialSeed: Number = definedExternally): `T$230`
        fun RandomBoolFromStream(Stream: RandomStream): Boolean
        fun RandomFloatFromStream(Stream: RandomStream): Number
        fun RandomUnitVectorFromStream(Stream: RandomStream): Vector
        fun ResetRandomStream(Stream: RandomStream)
        fun SeedRandomStream(Stream: RandomStream = definedExternally): `T$231`
        fun SetRandomStreamSeed(Stream: RandomStream = definedExternally, NewSeed: Number = definedExternally): `T$231`
        fun MakeRandomStream(InitialSeed: Number): RandomStream
    }
}

external interface `T$232` {
    var Roll: Number
    var Pitch: Number
    var Yaw: Number
}

external interface `T$233` {
    var X: Vector
    var Y: Vector
    var Z: Vector
}

external interface `T$234` {
    var DeviceRotation: Rotator
    var DevicePosition: Vector
}

external open class Rotator {
    open var Pitch: Number
    open var Yaw: Number
    open var Roll: Number
    open fun clone(): Rotator
    open fun GetBaseRotationAndBaseOffsetInMeters(OutBaseOffsetInMeters: Vector = definedExternally): `T$70`
    open fun GetBaseRotationAndPositionOffset(OutPosOffset: Vector = definedExternally): `T$69`
    open fun GetPose(DevicePosition: Vector = definedExternally, NeckPosition: Vector = definedExternally, bUseOrienationForPlayerCamera: Boolean = definedExternally, bUsePositionForPlayerCamera: Boolean = definedExternally, PositionScale: Vector = definedExternally): `T$66`
    open fun SetBaseRotationAndBaseOffsetInMeters(BaseOffsetInMeters: Vector, Options: String /* "Orientation" | "Position" | "OrientationAndPosition" | "EOrientPositionSelector_MAX" */)
    open fun SetBaseRotationAndPositionOffset(PosOffset: Vector, Options: String /* "Orientation" | "Position" | "OrientationAndPosition" | "EOrientPositionSelector_MAX" */)
    open fun SetBaseRotation()
    open fun IsValidAIRotation(): Boolean
    open fun Conv_RotatorToText(): String
    open fun Conv_RotatorToString(): String
    open fun BreakRotator(Roll: Number = definedExternally, Pitch: Number = definedExternally, Yaw: Number = definedExternally): `T$232`
    open fun BreakRotIntoAxes(X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$233`
    open fun ComposeRotators(B: Rotator): Rotator
    open fun Conv_RotatorToTransform(): Transform
    open fun Conv_RotatorToVector(): Vector
    open fun DynamicWeightedMovingAverage_FRotator(PreviousSample: Rotator, MaxDistance: Number, MinWeight: Number, MaxWeight: Number): Rotator
    open fun EqualEqual_RotatorRotator(B: Rotator, ErrorTolerance: Number): Boolean
    open fun GetAxes(X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$233`
    open fun GetForwardVector(): Vector
    open fun GetRightVector(): Vector
    open fun GetUpVector(): Vector
    open fun Multiply_RotatorFloat(B: Number): Rotator
    open fun Multiply_RotatorInt(B: Number): Rotator
    open fun NegateRotator(): Rotator
    open fun NormalizedDeltaRotator(B: Rotator): Rotator
    open fun NotEqual_RotatorRotator(B: Rotator, ErrorTolerance: Number): Boolean
    open fun REase(B: Rotator, Alpha: Number, bShortestPath: Boolean, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Rotator
    open fun RInterpTo(Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
    open fun RInterpTo_Constant(Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
    open fun RLerp(B: Rotator, Alpha: Number, bShortestPath: Boolean): Rotator
    open fun SelectRotator(B: Rotator, bPickA: Boolean): Rotator
    open fun WeightedMovingAverage_FRotator(PreviousSample: Rotator, Weight: Number): Rotator
    open fun GetOrientationAndPosition(DevicePosition: Vector = definedExternally): `T$234`

    companion object {
        fun C(Other: UObject): Rotator
        fun C(Other: Any): Rotator
        fun GetBaseRotationAndBaseOffsetInMeters(OutRotation: Rotator = definedExternally, OutBaseOffsetInMeters: Vector = definedExternally): `T$70`
        fun GetBaseRotationAndPositionOffset(OutRot: Rotator = definedExternally, OutPosOffset: Vector = definedExternally): `T$69`
        fun GetPose(DeviceRotation: Rotator = definedExternally, DevicePosition: Vector = definedExternally, NeckPosition: Vector = definedExternally, bUseOrienationForPlayerCamera: Boolean = definedExternally, bUsePositionForPlayerCamera: Boolean = definedExternally, PositionScale: Vector = definedExternally): `T$66`
        fun SetBaseRotationAndBaseOffsetInMeters(Rotation: Rotator, BaseOffsetInMeters: Vector, Options: String /* "Orientation" | "Position" | "OrientationAndPosition" | "EOrientPositionSelector_MAX" */)
        fun SetBaseRotationAndPositionOffset(BaseRot: Rotator, PosOffset: Vector, Options: String /* "Orientation" | "Position" | "OrientationAndPosition" | "EOrientPositionSelector_MAX" */)
        fun SetBaseRotation(InBaseRotation: Rotator)
        fun IsValidAIRotation(Rotation: Rotator): Boolean
        fun Conv_RotatorToText(InRot: Rotator): String
        fun Conv_RotatorToString(InRot: Rotator): String
        fun BreakRotator(InRot: Rotator, Roll: Number = definedExternally, Pitch: Number = definedExternally, Yaw: Number = definedExternally): `T$232`
        fun BreakRotIntoAxes(InRot: Rotator, X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$233`
        fun ComposeRotators(A: Rotator, B: Rotator): Rotator
        fun Conv_RotatorToTransform(InRotator: Rotator): Transform
        fun Conv_RotatorToVector(InRot: Rotator): Vector
        fun DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator, PreviousSample: Rotator, MaxDistance: Number, MinWeight: Number, MaxWeight: Number): Rotator
        fun EqualEqual_RotatorRotator(A: Rotator, B: Rotator, ErrorTolerance: Number): Boolean
        fun GetAxes(A: Rotator, X: Vector = definedExternally, Y: Vector = definedExternally, Z: Vector = definedExternally): `T$233`
        fun GetForwardVector(InRot: Rotator): Vector
        fun GetRightVector(InRot: Rotator): Vector
        fun GetUpVector(InRot: Rotator): Vector
        fun Multiply_RotatorFloat(A: Rotator, B: Number): Rotator
        fun Multiply_RotatorInt(A: Rotator, B: Number): Rotator
        fun NegateRotator(A: Rotator): Rotator
        fun NormalizedDeltaRotator(A: Rotator, B: Rotator): Rotator
        fun NotEqual_RotatorRotator(A: Rotator, B: Rotator, ErrorTolerance: Number): Boolean
        fun REase(A: Rotator, B: Rotator, Alpha: Number, bShortestPath: Boolean, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Rotator
        fun RInterpTo(Current: Rotator, Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
        fun RInterpTo_Constant(Current: Rotator, Target: Rotator, DeltaTime: Number, InterpSpeed: Number): Rotator
        fun RLerp(A: Rotator, B: Rotator, Alpha: Number, bShortestPath: Boolean): Rotator
        fun SelectRotator(A: Rotator, B: Rotator, bPickA: Boolean): Rotator
        fun WeightedMovingAverage_FRotator(CurrentSample: Rotator, PreviousSample: Rotator, Weight: Number): Rotator
        fun GetOrientationAndPosition(DeviceRotation: Rotator = definedExternally, DevicePosition: Vector = definedExternally): `T$234`
        fun MakeRotator(Roll: Number, Pitch: Number, Yaw: Number): Rotator
        fun RandomRotator(bRoll: Boolean): Rotator
        fun RandomRotatorFromStream(bRoll: Boolean, Stream: RandomStream): Rotator
    }
}

external interface `T$235` {
    var A: Quat
}

external interface `T$236` {
    var Q: Quat
}

external open class Quat {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open var W: Number
    open fun clone(): Quat
    open fun SetBaseOrientation()
    open fun Add_QuatQuat(B: Quat): Quat
    open fun EqualEqual_QuatQuat(B: Quat, Tolerance: Number): Boolean
    open fun Multiply_QuatQuat(B: Quat): Quat
    open fun NotEqual_QuatQuat(B: Quat, ErrorTolerance: Number): Boolean
    open fun Quat_AngularDistance(B: Quat): Number
    open fun Quat_EnforceShortestArcWith(B: Quat = definedExternally): `T$235`
    open fun Quat_Euler(): Vector
    open fun Quat_Exp(): Quat
    open fun Quat_GetAngle(): Number
    open fun Quat_GetAxisX(): Vector
    open fun Quat_GetAxisY(): Vector
    open fun Quat_GetAxisZ(): Vector
    open fun Quat_GetRotationAxis(): Vector
    open fun Quat_Inversed(): Quat
    open fun Quat_IsFinite(): Boolean
    open fun Quat_IsIdentity(Tolerance: Number): Boolean
    open fun Quat_IsNonFinite(): Boolean
    open fun Quat_IsNormalized(): Boolean
    open fun Quat_Log(): Quat
    open fun Quat_Normalize(Tolerance: Number = definedExternally): `T$236`
    open fun Quat_Normalized(Tolerance: Number): Quat
    open fun Quat_RotateVector(V: Vector): Vector
    open fun Quat_Rotator(): Rotator
    open fun Quat_SetComponents(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$236`
    open fun Quat_SetFromEuler(Euler: Vector = definedExternally): `T$236`
    open fun Quat_Size(): Number
    open fun Quat_SizeSquared(): Number
    open fun Quat_UnrotateVector(V: Vector): Vector
    open fun Quat_VectorForward(): Vector
    open fun Quat_VectorRight(): Vector
    open fun Quat_VectorUp(): Vector
    open fun Subtract_QuatQuat(B: Quat): Quat

    companion object {
        fun C(Other: UObject): Quat
        fun C(Other: Any): Quat
        fun SetBaseOrientation(InBaseOrientation: Quat)
        fun Add_QuatQuat(A: Quat, B: Quat): Quat
        fun EqualEqual_QuatQuat(A: Quat, B: Quat, Tolerance: Number): Boolean
        fun Multiply_QuatQuat(A: Quat, B: Quat): Quat
        fun NotEqual_QuatQuat(A: Quat, B: Quat, ErrorTolerance: Number): Boolean
        fun Quat_AngularDistance(A: Quat, B: Quat): Number
        fun Quat_EnforceShortestArcWith(A: Quat = definedExternally, B: Quat = definedExternally): `T$235`
        fun Quat_Euler(Q: Quat): Vector
        fun Quat_Exp(Q: Quat): Quat
        fun Quat_GetAngle(Q: Quat): Number
        fun Quat_GetAxisX(Q: Quat): Vector
        fun Quat_GetAxisY(Q: Quat): Vector
        fun Quat_GetAxisZ(Q: Quat): Vector
        fun Quat_GetRotationAxis(Q: Quat): Vector
        fun Quat_Inversed(Q: Quat): Quat
        fun Quat_IsFinite(Q: Quat): Boolean
        fun Quat_IsIdentity(Q: Quat, Tolerance: Number): Boolean
        fun Quat_IsNonFinite(Q: Quat): Boolean
        fun Quat_IsNormalized(Q: Quat): Boolean
        fun Quat_Log(Q: Quat): Quat
        fun Quat_Normalize(Q: Quat = definedExternally, Tolerance: Number = definedExternally): `T$236`
        fun Quat_Normalized(Q: Quat, Tolerance: Number): Quat
        fun Quat_RotateVector(Q: Quat, V: Vector): Vector
        fun Quat_Rotator(Q: Quat): Rotator
        fun Quat_SetComponents(Q: Quat = definedExternally, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$236`
        fun Quat_SetFromEuler(Q: Quat = definedExternally, Euler: Vector = definedExternally): `T$236`
        fun Quat_Size(Q: Quat): Number
        fun Quat_SizeSquared(Q: Quat): Number
        fun Quat_UnrotateVector(Q: Quat, V: Vector): Vector
        fun Quat_VectorForward(Q: Quat): Vector
        fun Quat_VectorRight(Q: Quat): Vector
        fun Quat_VectorUp(Q: Quat): Vector
        fun Subtract_QuatQuat(A: Quat, B: Quat): Quat
        fun Quat_Identity(): Quat
    }
}

external object ELerpInterpolationMode {
    var QuatInterp: String /* "QuatInterp" */
    var EulerInterp: String /* "EulerInterp" */
    var DualQuatInterp: String /* "DualQuatInterp" */
    var ELerpInterpolationMode_MAX: String /* "ELerpInterpolationMode_MAX" */
}

external interface `T$237` {
    var Location: Vector
    var Rotation: Rotator
    var Scale: Vector
}

external open class Transform {
    open var Rotation: Quat
    open var Translation: Vector
    open var Scale3d: Vector
    open fun clone(): Transform
    open fun Conv_TransformToText(): String
    open fun Conv_TransformToString(): String
    open fun BreakTransform(Location: Vector = definedExternally, Rotation: Rotator = definedExternally, Scale: Vector = definedExternally): `T$237`
    open fun ComposeTransforms(B: Transform): Transform
    open fun ConvertTransformToRelative(ParentTransform: Transform): Transform
    open fun EqualEqual_TransformTransform(B: Transform): Boolean
    open fun InverseTransformDirection(Direction: Vector): Vector
    open fun InverseTransformLocation(Location: Vector): Vector
    open fun InverseTransformRotation(Rotation: Rotator): Rotator
    open fun InvertTransform(): Transform
    open fun MakeRelativeTransform(RelativeTo: Transform): Transform
    open fun NearlyEqual_TransformTransform(B: Transform, LocationTolerance: Number, RotationTolerance: Number, Scale3DTolerance: Number): Boolean
    open fun SelectTransform(B: Transform, bPickA: Boolean): Transform
    open fun TEase(B: Transform, Alpha: Number, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Transform
    open fun TInterpTo(Target: Transform, DeltaTime: Number, InterpSpeed: Number): Transform
    open fun TLerp(B: Transform, Alpha: Number, InterpMode: String /* "QuatInterp" | "EulerInterp" | "DualQuatInterp" | "ELerpInterpolationMode_MAX" */): Transform
    open fun Transform_Determinant(): Number
    open fun TransformDirection(Direction: Vector): Vector
    open fun TransformLocation(Location: Vector): Vector
    open fun TransformRotation(Rotation: Rotator): Rotator
    open fun K2_LookAt(TargetPosition: Vector, LookAtVector: Vector, bUseUpVector: Boolean, UpVector: Vector, ClampConeInDegree: Number): Transform
    open fun CalibrateExternalTrackingToHMD()
    open fun UpdateExternalTrackingHMDPosition()
    open fun SetAlignmentTransform()

    companion object {
        fun C(Other: UObject): Transform
        fun C(Other: Any): Transform
        fun Conv_TransformToText(InTrans: Transform): String
        fun Conv_TransformToString(InTrans: Transform): String
        fun BreakTransform(InTransform: Transform, Location: Vector = definedExternally, Rotation: Rotator = definedExternally, Scale: Vector = definedExternally): `T$237`
        fun ComposeTransforms(A: Transform, B: Transform): Transform
        fun ConvertTransformToRelative(Transform: Transform, ParentTransform: Transform): Transform
        fun EqualEqual_TransformTransform(A: Transform, B: Transform): Boolean
        fun InverseTransformDirection(T: Transform, Direction: Vector): Vector
        fun InverseTransformLocation(T: Transform, Location: Vector): Vector
        fun InverseTransformRotation(T: Transform, Rotation: Rotator): Rotator
        fun InvertTransform(T: Transform): Transform
        fun MakeRelativeTransform(A: Transform, RelativeTo: Transform): Transform
        fun NearlyEqual_TransformTransform(A: Transform, B: Transform, LocationTolerance: Number, RotationTolerance: Number, Scale3DTolerance: Number): Boolean
        fun SelectTransform(A: Transform, B: Transform, bPickA: Boolean): Transform
        fun TEase(A: Transform, B: Transform, Alpha: Number, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Transform
        fun TInterpTo(Current: Transform, Target: Transform, DeltaTime: Number, InterpSpeed: Number): Transform
        fun TLerp(A: Transform, B: Transform, Alpha: Number, InterpMode: String /* "QuatInterp" | "EulerInterp" | "DualQuatInterp" | "ELerpInterpolationMode_MAX" */): Transform
        fun Transform_Determinant(Transform: Transform): Number
        fun TransformDirection(T: Transform, Direction: Vector): Vector
        fun TransformLocation(T: Transform, Location: Vector): Vector
        fun TransformRotation(T: Transform, Rotation: Rotator): Rotator
        fun K2_LookAt(CurrentTransform: Transform, TargetPosition: Vector, LookAtVector: Vector, bUseUpVector: Boolean, UpVector: Vector, ClampConeInDegree: Number): Transform
        fun CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform)
        fun UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform)
        fun SetAlignmentTransform(InAlignmentTransform: Transform)
        fun GetPlayAreaTransform(): Transform
    }
}

external interface `T$238` {
    var InGuid: Guid
}

external open class Guid {
    open var A: Number
    open var B: Number
    open var C: Number
    open var D: Number
    open fun clone(): Guid
    open fun GetARPinPositionAndOrientation(Position: Vector = definedExternally, Orientation: Rotator = definedExternally, PinFoundInEnvironment: Boolean = definedExternally): `T$54`
    open fun Conv_GuidToString(): String
    open fun EqualEqual_GuidGuid(B: Guid): Boolean
    open fun Invalidate_Guid(): `T$238`
    open fun IsValid_Guid(): Boolean
    open fun NotEqual_GuidGuid(B: Guid): Boolean

    companion object {
        fun C(Other: UObject): Guid
        fun C(Other: Any): Guid
        fun GetARPinPositionAndOrientation(PinID: Guid, Position: Vector = definedExternally, Orientation: Rotator = definedExternally, PinFoundInEnvironment: Boolean = definedExternally): `T$54`
        fun Conv_GuidToString(InGuid: Guid): String
        fun EqualEqual_GuidGuid(A: Guid, B: Guid): Boolean
        fun Invalidate_Guid(InGuid: Guid = definedExternally): `T$238`
        fun IsValid_Guid(InGuid: Guid): Boolean
        fun NotEqual_GuidGuid(A: Guid, B: Guid): Boolean
        fun NewGuid(): Guid
    }
}

external object EARTrackingState {
    var Unknown: String /* "Unknown" */
    var Tracking: String /* "Tracking" */
    var NotTracking: String /* "NotTracking" */
    var StoppedTracking: String /* "StoppedTracking" */
    var EARTrackingState_MAX: String /* "EARTrackingState_MAX" */
}

external open class ActorComponentTickFunction : TickFunction {
    override fun clone(): ActorComponentTickFunction

    companion object {
        fun C(Other: UObject): ActorComponentTickFunction
        fun C(Other: Any): ActorComponentTickFunction
    }
}

external open class AssetUserData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AssetUserData
        fun Find(Outer: UObject, ResourceName: String): AssetUserData
        fun GetDefaultObject(): AssetUserData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetUserData
        fun C(Other: UObject): AssetUserData
        fun C(Other: Any): AssetUserData
    }
}

external object EComponentCreationMethod {
    var Native: String /* "Native" */
    var SimpleConstructionScript: String /* "SimpleConstructionScript" */
    var UserConstructionScript: String /* "UserConstructionScript" */
    var Instance: String /* "Instance" */
    var EComponentCreationMethod_MAX: String /* "EComponentCreationMethod_MAX" */
}

external open class SimpleMemberReference {
    open var MemberParent: UObject
    open var MemberName: String
    open var MemberGuid: Guid
    open fun clone(): SimpleMemberReference

    companion object {
        fun C(Other: UObject): SimpleMemberReference
        fun C(Other: Any): SimpleMemberReference
    }
}

external object EEndPlayReason {
    var Destroyed: String /* "Destroyed" */
    var LevelTransition: String /* "LevelTransition" */
    var EndPlayInEditor: String /* "EndPlayInEditor" */
    var RemovedFromWorld: String /* "RemovedFromWorld" */
    var Quit: String /* "Quit" */
    var EEndPlayReason_MAX: String /* "EEndPlayReason_MAX" */
}

external open class ActorComponent : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PrimaryComponentTick: ActorComponentTickFunction
    open var ComponentTags: Array<String>
    open var AssetUserData: Array<AssetUserData>
    open var bReplicates: Boolean
    open var bNetAddressable: Boolean
    open var bCreatedByConstructionScript: Boolean
    open var bInstanceComponent: Boolean
    open var bAutoActivate: Boolean
    open var bIsActive: Boolean
    open var bEditableWhenInherited: Boolean
    open var bCanEverAffectNavigation: Boolean
    open var bIsEditorOnly: Boolean
    open var bIsVisualizationComponent: Boolean
    open var CreationMethod: String /* "Native" | "SimpleConstructionScript" | "UserConstructionScript" | "Instance" | "EComponentCreationMethod_MAX" */
    open var OnComponentActivated: UnrealEngineMulticastDelegate<(Component: ActorComponent, bReset: Boolean) -> Unit>
    open var OnComponentDeactivated: UnrealEngineMulticastDelegate<(Component: ActorComponent) -> Unit>
    open var UCSModifiedProperties: Array<SimpleMemberReference>
    open fun ToggleActive()
    open fun SetTickGroup(NewTickGroup: String /* "TG_PrePhysics" | "TG_StartPhysics" | "TG_DuringPhysics" | "TG_EndPhysics" | "TG_PostPhysics" | "TG_PostUpdateWork" | "TG_LastDemotable" | "TG_NewlySpawned" | "TG_MAX" */)
    open fun SetTickableWhenPaused(bTickableWhenPaused: Boolean)
    open fun SetIsReplicated(ShouldReplicate: Boolean)
    open fun SetComponentTickInterval(TickInterval: Number)
    open fun SetComponentTickEnabled(bEnabled: Boolean)
    open fun SetAutoActivate(bNewAutoActivate: Boolean)
    open fun SetActive(bNewActive: Boolean, bReset: Boolean)
    open fun RemoveTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent)
    open fun RemoveTickPrerequisiteActor(PrerequisiteActor: Actor)
    open fun ReceiveTick(DeltaSeconds: Number)
    open fun ReceiveEndPlay(EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)
    open fun ReceiveBeginPlay()
    open fun OnRep_IsActive()
    open fun K2_DestroyComponent(UObject: UObject)
    open fun IsComponentTickEnabled(): Boolean
    open fun IsBeingDestroyed(): Boolean
    open fun IsActive(): Boolean
    open fun GetOwner(): Actor
    open fun GetComponentTickInterval(): Number
    open fun Deactivate()
    open fun ComponentHasTag(Tag: String): Boolean
    open fun AddTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent)
    open fun AddTickPrerequisiteActor(PrerequisiteActor: Actor)
    open fun Activate(bReset: Boolean)
    open fun IsRegistered(): Boolean
    open fun MarkRenderStateDirty()
    open fun RegisterComponent()
    open fun ReregisterComponent()
    open fun UnregisterComponent()

    companion object {
        fun Load(ResourceName: String): ActorComponent
        fun Find(Outer: UObject, ResourceName: String): ActorComponent
        fun GetDefaultObject(): ActorComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ActorComponent
        fun C(Other: UObject): ActorComponent
        fun C(Other: Any): ActorComponent
        fun IsRegistered(ActorComponent: ActorComponent): Boolean
        fun MarkRenderStateDirty(Component: ActorComponent)
        fun RegisterComponent(ActorComponent: ActorComponent)
        fun ReregisterComponent(ActorComponent: ActorComponent)
        fun UnregisterComponent(ActorComponent: ActorComponent)
    }
}

external object EComponentMobility {
    var Static: String /* "Static" */
    var Stationary: String /* "Stationary" */
    var Movable: String /* "Movable" */
    var EComponentMobility_MAX: String /* "EComponentMobility_MAX" */
}

external object EDetailMode {
    var DM_Low: String /* "DM_Low" */
    var DM_Medium: String /* "DM_Medium" */
    var DM_High: String /* "DM_High" */
    var DM_MAX: String /* "DM_MAX" */
}

external object EBrushType {
    var Brush_Default: String /* "Brush_Default" */
    var Brush_Add: String /* "Brush_Add" */
    var Brush_Subtract: String /* "Brush_Subtract" */
    var Brush_MAX: String /* "Brush_MAX" */
}

external interface `T$239` {
    var R: Number
    var G: Number
    var B: Number
    var A: Number
}

external interface `T$240` {
    var RGB: LinearColor
}

external interface `T$241` {
    var InOutColor: LinearColor
}

external interface `T$242` {
    var H: Number
    var S: Number
    var V: Number
    var A: Number
}

external interface `T$243` {
    var HSV: LinearColor
}

external open class LinearColor {
    open var R: Number
    open var G: Number
    open var B: Number
    open var A: Number
    open fun clone(): LinearColor
    open fun SetColorScaleAndOffset(ColorOffset: LinearColor, bApplyToAllLayers: Boolean)
    open fun Conv_ColorToText(): String
    open fun Conv_ColorToString(): String
    open fun Add_LinearColorLinearColor(B: LinearColor): LinearColor
    open fun BreakColor(R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$239`
    open fun CInterpTo(Target: LinearColor, DeltaTime: Number, InterpSpeed: Number): LinearColor
    open fun Conv_LinearColorToColor(InUseSRGB: Boolean): Color
    open fun Conv_LinearColorToVector(): Vector
    open fun Divide_LinearColorLinearColor(B: LinearColor): LinearColor
    open fun EqualEqual_LinearColorLinearColor(B: LinearColor): Boolean
    open fun HSVToRGB_Vector(RGB: LinearColor = definedExternally): `T$240`
    open fun HSVToRGBLinear(): LinearColor
    open fun LinearColor_Desaturated(InDesaturation: Number): LinearColor
    open fun LinearColor_Distance(C2: LinearColor): Number
    open fun LinearColor_GetLuminance(): Number
    open fun LinearColor_GetMax(): Number
    open fun LinearColor_GetMin(): Number
    open fun LinearColor_IsNearEqual(B: LinearColor, Tolerance: Number): Boolean
    open fun LinearColor_Quantize(): Color
    open fun LinearColor_QuantizeRound(): Color
    open fun LinearColor_Set(InColor: LinearColor = definedExternally): `T$241`
    open fun LinearColor_SetFromHSV(H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$241`
    open fun LinearColor_SetFromPow22(InColor: Color = definedExternally): `T$241`
    open fun LinearColor_SetFromSRGB(InSRGB: Color = definedExternally): `T$241`
    open fun LinearColor_SetRandomHue(): `T$241`
    open fun LinearColor_SetRGBA(R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$241`
    open fun LinearColor_SetTemperature(InTemperature: Number = definedExternally): `T$241`
    open fun LinearColor_ToNewOpacity(InOpacity: Number): LinearColor
    open fun LinearColor_ToRGBE(): Color
    open fun LinearColorLerp(B: LinearColor, Alpha: Number): LinearColor
    open fun LinearColorLerpUsingHSV(B: LinearColor, Alpha: Number): LinearColor
    open fun Multiply_LinearColorFloat(B: Number): LinearColor
    open fun Multiply_LinearColorLinearColor(B: LinearColor): LinearColor
    open fun NotEqual_LinearColorLinearColor(B: LinearColor): Boolean
    open fun RGBLinearToHSV(): LinearColor
    open fun RGBToHSV(H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$242`
    open fun RGBToHSV_Vector(HSV: LinearColor = definedExternally): `T$243`
    open fun SelectColor(B: LinearColor, bPickA: Boolean): LinearColor
    open fun Subtract_LinearColorLinearColor(B: LinearColor): LinearColor

    companion object {
        fun C(Other: UObject): LinearColor
        fun C(Other: Any): LinearColor
        fun SetColorScaleAndOffset(ColorScale: LinearColor, ColorOffset: LinearColor, bApplyToAllLayers: Boolean)
        fun Conv_ColorToText(InColor: LinearColor): String
        fun Conv_ColorToString(InColor: LinearColor): String
        fun Add_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun BreakColor(InColor: LinearColor, R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$239`
        fun CInterpTo(Current: LinearColor, Target: LinearColor, DeltaTime: Number, InterpSpeed: Number): LinearColor
        fun Conv_LinearColorToColor(InLinearColor: LinearColor, InUseSRGB: Boolean): Color
        fun Conv_LinearColorToVector(InLinearColor: LinearColor): Vector
        fun Divide_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun EqualEqual_LinearColorLinearColor(A: LinearColor, B: LinearColor): Boolean
        fun HSVToRGB_Vector(HSV: LinearColor, RGB: LinearColor = definedExternally): `T$240`
        fun HSVToRGBLinear(HSV: LinearColor): LinearColor
        fun LinearColor_Desaturated(InColor: LinearColor, InDesaturation: Number): LinearColor
        fun LinearColor_Distance(C1: LinearColor, C2: LinearColor): Number
        fun LinearColor_GetLuminance(InColor: LinearColor): Number
        fun LinearColor_GetMax(InColor: LinearColor): Number
        fun LinearColor_GetMin(InColor: LinearColor): Number
        fun LinearColor_IsNearEqual(A: LinearColor, B: LinearColor, Tolerance: Number): Boolean
        fun LinearColor_Quantize(InColor: LinearColor): Color
        fun LinearColor_QuantizeRound(InColor: LinearColor): Color
        fun LinearColor_Set(InOutColor: LinearColor = definedExternally, InColor: LinearColor = definedExternally): `T$241`
        fun LinearColor_SetFromHSV(InOutColor: LinearColor = definedExternally, H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$241`
        fun LinearColor_SetFromPow22(InOutColor: LinearColor = definedExternally, InColor: Color = definedExternally): `T$241`
        fun LinearColor_SetFromSRGB(InOutColor: LinearColor = definedExternally, InSRGB: Color = definedExternally): `T$241`
        fun LinearColor_SetRandomHue(InOutColor: LinearColor = definedExternally): `T$241`
        fun LinearColor_SetRGBA(InOutColor: LinearColor = definedExternally, R: Number = definedExternally, G: Number = definedExternally, B: Number = definedExternally, A: Number = definedExternally): `T$241`
        fun LinearColor_SetTemperature(InOutColor: LinearColor = definedExternally, InTemperature: Number = definedExternally): `T$241`
        fun LinearColor_ToNewOpacity(InColor: LinearColor, InOpacity: Number): LinearColor
        fun LinearColor_ToRGBE(InLinearColor: LinearColor): Color
        fun LinearColorLerp(A: LinearColor, B: LinearColor, Alpha: Number): LinearColor
        fun LinearColorLerpUsingHSV(A: LinearColor, B: LinearColor, Alpha: Number): LinearColor
        fun Multiply_LinearColorFloat(A: LinearColor, B: Number): LinearColor
        fun Multiply_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun NotEqual_LinearColorLinearColor(A: LinearColor, B: LinearColor): Boolean
        fun RGBLinearToHSV(RGB: LinearColor): LinearColor
        fun RGBToHSV(InColor: LinearColor, H: Number = definedExternally, S: Number = definedExternally, V: Number = definedExternally, A: Number = definedExternally): `T$242`
        fun RGBToHSV_Vector(RGB: LinearColor, HSV: LinearColor = definedExternally): `T$243`
        fun SelectColor(A: LinearColor, B: LinearColor, bPickA: Boolean): LinearColor
        fun Subtract_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor
        fun Conv_FloatToLinearColor(InFloat: Number): LinearColor
        fun HSVToRGB(H: Number, S: Number, V: Number, A: Number): LinearColor
        fun LinearColor_Black(): LinearColor
        fun LinearColor_Blue(): LinearColor
        fun LinearColor_Gray(): LinearColor
        fun LinearColor_Green(): LinearColor
        fun LinearColor_Red(): LinearColor
        fun LinearColor_Transparent(): LinearColor
        fun LinearColor_White(): LinearColor
        fun LinearColor_Yellow(): LinearColor
        fun MakeColor(R: Number, G: Number, B: Number, A: Number): LinearColor
    }
}

external open class Color {
    open var B: Number
    open var G: Number
    open var R: Number
    open var A: Number
    open fun clone(): Color
    open fun Conv_ColorToLinearColor(): LinearColor

    companion object {
        fun C(Other: UObject): Color
        fun C(Other: Any): Color
        fun Conv_ColorToLinearColor(InColor: Color): LinearColor
    }
}

external open class Model : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Model
        fun Find(Outer: UObject, ResourceName: String): Model
        fun GetDefaultObject(): Model
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Model
        fun C(Other: UObject): Model
        fun C(Other: Any): Model
    }
}

external open class KShapeElem {
    open var RestOffset: Number
    open var Name: String
    open var bContributeToMass: Boolean
    open fun clone(): KShapeElem

    companion object {
        fun C(Other: UObject): KShapeElem
        fun C(Other: Any): KShapeElem
    }
}

external open class Plane : Vector {
    open var W: Number
    override fun clone(): Plane

    companion object {
        fun C(Other: UObject): Plane
        fun C(Other: Any): Plane
    }
}

external open class Matrix {
    open var XPlane: Plane
    open var YPlane: Plane
    open var ZPlane: Plane
    open var WPlane: Plane
    open fun clone(): Matrix
    open fun Conv_MatrixToRotator(): Rotator
    open fun Conv_MatrixToTransform(): Transform
    open fun Matrix_GetOrigin(): Vector

    companion object {
        fun C(Other: UObject): Matrix
        fun C(Other: Any): Matrix
        fun Conv_MatrixToRotator(InMatrix: Matrix): Rotator
        fun Conv_MatrixToTransform(InMatrix: Matrix): Transform
        fun Matrix_GetOrigin(InMatrix: Matrix): Vector
    }
}

external open class KSphereElem : KShapeElem {
    open var TM: Matrix
    open var Center: Vector
    open var Radius: Number
    override fun clone(): KSphereElem

    companion object {
        fun C(Other: UObject): KSphereElem
        fun C(Other: Any): KSphereElem
    }
}

external open class KBoxElem : KShapeElem {
    open var TM: Matrix
    open var Orientation: Quat
    open var Center: Vector
    open var Rotation: Rotator
    open var X: Number
    open var Y: Number
    open var Z: Number
    override fun clone(): KBoxElem

    companion object {
        fun C(Other: UObject): KBoxElem
        fun C(Other: Any): KBoxElem
    }
}

external open class KSphylElem : KShapeElem {
    open var TM: Matrix
    open var Orientation: Quat
    open var Center: Vector
    open var Rotation: Rotator
    open var Radius: Number
    open var Length: Number
    override fun clone(): KSphylElem

    companion object {
        fun C(Other: UObject): KSphylElem
        fun C(Other: Any): KSphylElem
    }
}

external open class Box {
    open var Min: Vector
    open var Max: Vector
    open var IsValid: Number
    open fun clone(): Box

    companion object {
        fun C(Other: UObject): Box
        fun C(Other: Any): Box
    }
}

external open class KConvexElem : KShapeElem {
    open var VertexData: Array<Vector>
    open var ElemBox: Box
    open var Transform: Transform
    override fun clone(): KConvexElem

    companion object {
        fun C(Other: UObject): KConvexElem
        fun C(Other: Any): KConvexElem
    }
}

external open class KTaperedCapsuleElem : KShapeElem {
    open var Center: Vector
    open var Rotation: Rotator
    open var Radius0: Number
    open var Radius1: Number
    open var Length: Number
    override fun clone(): KTaperedCapsuleElem

    companion object {
        fun C(Other: UObject): KTaperedCapsuleElem
        fun C(Other: Any): KTaperedCapsuleElem
    }
}

external open class KAggregateGeom {
    open var SphereElems: Array<KSphereElem>
    open var BoxElems: Array<KBoxElem>
    open var SphylElems: Array<KSphylElem>
    open var ConvexElems: Array<KConvexElem>
    open var TaperedCapsuleElems: Array<KTaperedCapsuleElem>
    open fun clone(): KAggregateGeom

    companion object {
        fun C(Other: UObject): KAggregateGeom
        fun C(Other: Any): KAggregateGeom
    }
}

external object EPhysicsType {
    var PhysType_Default: String /* "PhysType_Default" */
    var PhysType_Kinematic: String /* "PhysType_Kinematic" */
    var PhysType_Simulated: String /* "PhysType_Simulated" */
    var PhysType_MAX: String /* "PhysType_MAX" */
}

external object EBodyCollisionResponse {
    var BodyCollision_Enabled: String /* "BodyCollision_Enabled" */
    var BodyCollision_Disabled: String /* "BodyCollision_Disabled" */
    var BodyCollision_MAX: String /* "BodyCollision_MAX" */
}

external object ECollisionTraceFlag {
    var CTF_UseDefault: String /* "CTF_UseDefault" */
    var CTF_UseSimpleAndComplex: String /* "CTF_UseSimpleAndComplex" */
    var CTF_UseSimpleAsComplex: String /* "CTF_UseSimpleAsComplex" */
    var CTF_UseComplexAsSimple: String /* "CTF_UseComplexAsSimple" */
    var CTF_MAX: String /* "CTF_MAX" */
}

external object EFrictionCombineMode {
    var Average: String /* "Average" */
    var Min: String /* "Min" */
    var Multiply: String /* "Multiply" */
    var Max: String /* "Max" */
    var EFrictionCombineMode_MAX: String /* "EFrictionCombineMode_MAX" */
}

external open class PhysicalMaterialPropertyBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PhysicalMaterialPropertyBase
        fun Find(Outer: UObject, ResourceName: String): PhysicalMaterialPropertyBase
        fun GetDefaultObject(): PhysicalMaterialPropertyBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicalMaterialPropertyBase
        fun C(Other: UObject): PhysicalMaterialPropertyBase
        fun C(Other: Any): PhysicalMaterialPropertyBase
    }
}

external object EPhysicalSurface {
    var SurfaceType_Default: String /* "SurfaceType_Default" */
    var SurfaceType1: String /* "SurfaceType1" */
    var SurfaceType2: String /* "SurfaceType2" */
    var SurfaceType3: String /* "SurfaceType3" */
    var SurfaceType4: String /* "SurfaceType4" */
    var SurfaceType5: String /* "SurfaceType5" */
    var SurfaceType6: String /* "SurfaceType6" */
    var SurfaceType7: String /* "SurfaceType7" */
    var SurfaceType8: String /* "SurfaceType8" */
    var SurfaceType9: String /* "SurfaceType9" */
    var SurfaceType10: String /* "SurfaceType10" */
    var SurfaceType11: String /* "SurfaceType11" */
    var SurfaceType12: String /* "SurfaceType12" */
    var SurfaceType13: String /* "SurfaceType13" */
    var SurfaceType14: String /* "SurfaceType14" */
    var SurfaceType15: String /* "SurfaceType15" */
    var SurfaceType16: String /* "SurfaceType16" */
    var SurfaceType17: String /* "SurfaceType17" */
    var SurfaceType18: String /* "SurfaceType18" */
    var SurfaceType19: String /* "SurfaceType19" */
    var SurfaceType20: String /* "SurfaceType20" */
    var SurfaceType21: String /* "SurfaceType21" */
    var SurfaceType22: String /* "SurfaceType22" */
    var SurfaceType23: String /* "SurfaceType23" */
    var SurfaceType24: String /* "SurfaceType24" */
    var SurfaceType25: String /* "SurfaceType25" */
    var SurfaceType26: String /* "SurfaceType26" */
    var SurfaceType27: String /* "SurfaceType27" */
    var SurfaceType28: String /* "SurfaceType28" */
    var SurfaceType29: String /* "SurfaceType29" */
    var SurfaceType30: String /* "SurfaceType30" */
    var SurfaceType31: String /* "SurfaceType31" */
    var SurfaceType32: String /* "SurfaceType32" */
    var SurfaceType33: String /* "SurfaceType33" */
    var SurfaceType34: String /* "SurfaceType34" */
    var SurfaceType35: String /* "SurfaceType35" */
    var SurfaceType36: String /* "SurfaceType36" */
    var SurfaceType37: String /* "SurfaceType37" */
    var SurfaceType38: String /* "SurfaceType38" */
    var SurfaceType39: String /* "SurfaceType39" */
    var SurfaceType40: String /* "SurfaceType40" */
    var SurfaceType41: String /* "SurfaceType41" */
    var SurfaceType42: String /* "SurfaceType42" */
    var SurfaceType43: String /* "SurfaceType43" */
    var SurfaceType44: String /* "SurfaceType44" */
    var SurfaceType45: String /* "SurfaceType45" */
    var SurfaceType46: String /* "SurfaceType46" */
    var SurfaceType47: String /* "SurfaceType47" */
    var SurfaceType48: String /* "SurfaceType48" */
    var SurfaceType49: String /* "SurfaceType49" */
    var SurfaceType50: String /* "SurfaceType50" */
    var SurfaceType51: String /* "SurfaceType51" */
    var SurfaceType52: String /* "SurfaceType52" */
    var SurfaceType53: String /* "SurfaceType53" */
    var SurfaceType54: String /* "SurfaceType54" */
    var SurfaceType55: String /* "SurfaceType55" */
    var SurfaceType56: String /* "SurfaceType56" */
    var SurfaceType57: String /* "SurfaceType57" */
    var SurfaceType58: String /* "SurfaceType58" */
    var SurfaceType59: String /* "SurfaceType59" */
    var SurfaceType60: String /* "SurfaceType60" */
    var SurfaceType61: String /* "SurfaceType61" */
    var SurfaceType62: String /* "SurfaceType62" */
    var SurfaceType_Max: String /* "SurfaceType_Max" */
    var EPhysicalSurface_MAX: String /* "EPhysicalSurface_MAX" */
}

external open class DataAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NativeClass: UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): DataAsset
        fun Find(Outer: UObject, ResourceName: String): DataAsset
        fun GetDefaultObject(): DataAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DataAsset
        fun C(Other: UObject): DataAsset
        fun C(Other: Any): DataAsset
    }
}

external open class TireType : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var FrictionScale: Number

    companion object {
        fun Load(ResourceName: String): TireType
        fun Find(Outer: UObject, ResourceName: String): TireType
        fun GetDefaultObject(): TireType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TireType
        fun C(Other: UObject): TireType
        fun C(Other: Any): TireType
    }
}

external open class TireFrictionScalePair {
    open var TireType: TireType
    open var FrictionScale: Number
    open fun clone(): TireFrictionScalePair

    companion object {
        fun C(Other: UObject): TireFrictionScalePair
        fun C(Other: Any): TireFrictionScalePair
    }
}

external open class PhysicalMaterial : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Friction: Number
    open var FrictionCombineMode: String /* "Average" | "Min" | "Multiply" | "Max" | "EFrictionCombineMode_MAX" */
    open var bOverrideFrictionCombineMode: Boolean
    open var Restitution: Number
    open var RestitutionCombineMode: String /* "Average" | "Min" | "Multiply" | "Max" | "EFrictionCombineMode_MAX" */
    open var bOverrideRestitutionCombineMode: Boolean
    open var Density: Number
    open var RaiseMassToPower: Number
    open var DestructibleDamageThresholdScale: Number
    open var PhysicalMaterialProperty: PhysicalMaterialPropertyBase
    open var SurfaceType: String /* "SurfaceType_Default" | "SurfaceType1" | "SurfaceType2" | "SurfaceType3" | "SurfaceType4" | "SurfaceType5" | "SurfaceType6" | "SurfaceType7" | "SurfaceType8" | "SurfaceType9" | "SurfaceType10" | "SurfaceType11" | "SurfaceType12" | "SurfaceType13" | "SurfaceType14" | "SurfaceType15" | "SurfaceType16" | "SurfaceType17" | "SurfaceType18" | "SurfaceType19" | "SurfaceType20" | "SurfaceType21" | "SurfaceType22" | "SurfaceType23" | "SurfaceType24" | "SurfaceType25" | "SurfaceType26" | "SurfaceType27" | "SurfaceType28" | "SurfaceType29" | "SurfaceType30" | "SurfaceType31" | "SurfaceType32" | "SurfaceType33" | "SurfaceType34" | "SurfaceType35" | "SurfaceType36" | "SurfaceType37" | "SurfaceType38" | "SurfaceType39" | "SurfaceType40" | "SurfaceType41" | "SurfaceType42" | "SurfaceType43" | "SurfaceType44" | "SurfaceType45" | "SurfaceType46" | "SurfaceType47" | "SurfaceType48" | "SurfaceType49" | "SurfaceType50" | "SurfaceType51" | "SurfaceType52" | "SurfaceType53" | "SurfaceType54" | "SurfaceType55" | "SurfaceType56" | "SurfaceType57" | "SurfaceType58" | "SurfaceType59" | "SurfaceType60" | "SurfaceType61" | "SurfaceType62" | "SurfaceType_Max" | "EPhysicalSurface_MAX" */
    open var TireFrictionScale: Number
    open var TireFrictionScales: Array<TireFrictionScalePair>

    companion object {
        fun Load(ResourceName: String): PhysicalMaterial
        fun Find(Outer: UObject, ResourceName: String): PhysicalMaterial
        fun GetDefaultObject(): PhysicalMaterial
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicalMaterial
        fun C(Other: UObject): PhysicalMaterial
        fun C(Other: Any): PhysicalMaterial
    }
}

external object EWalkableSlopeBehavior {
    var WalkableSlope_Default: String /* "WalkableSlope_Default" */
    var WalkableSlope_Increase: String /* "WalkableSlope_Increase" */
    var WalkableSlope_Decrease: String /* "WalkableSlope_Decrease" */
    var WalkableSlope_Unwalkable: String /* "WalkableSlope_Unwalkable" */
    var WalkableSlope_Max: String /* "WalkableSlope_Max" */
}

external open class WalkableSlopeOverride {
    open var WalkableSlopeBehavior: String /* "WalkableSlope_Default" | "WalkableSlope_Increase" | "WalkableSlope_Decrease" | "WalkableSlope_Unwalkable" | "WalkableSlope_Max" */
    open var WalkableSlopeAngle: Number
    open fun clone(): WalkableSlopeOverride

    companion object {
        fun C(Other: UObject): WalkableSlopeOverride
        fun C(Other: Any): WalkableSlopeOverride
    }
}

external object ECollisionChannel {
    var ECC_WorldStatic: String /* "ECC_WorldStatic" */
    var ECC_WorldDynamic: String /* "ECC_WorldDynamic" */
    var ECC_Pawn: String /* "ECC_Pawn" */
    var ECC_Visibility: String /* "ECC_Visibility" */
    var ECC_Camera: String /* "ECC_Camera" */
    var ECC_PhysicsBody: String /* "ECC_PhysicsBody" */
    var ECC_Vehicle: String /* "ECC_Vehicle" */
    var ECC_Destructible: String /* "ECC_Destructible" */
    var ECC_EngineTraceChannel1: String /* "ECC_EngineTraceChannel1" */
    var ECC_EngineTraceChannel2: String /* "ECC_EngineTraceChannel2" */
    var ECC_EngineTraceChannel3: String /* "ECC_EngineTraceChannel3" */
    var ECC_EngineTraceChannel4: String /* "ECC_EngineTraceChannel4" */
    var ECC_EngineTraceChannel5: String /* "ECC_EngineTraceChannel5" */
    var ECC_EngineTraceChannel6: String /* "ECC_EngineTraceChannel6" */
    var ECC_GameTraceChannel1: String /* "ECC_GameTraceChannel1" */
    var ECC_GameTraceChannel2: String /* "ECC_GameTraceChannel2" */
    var ECC_GameTraceChannel3: String /* "ECC_GameTraceChannel3" */
    var ECC_GameTraceChannel4: String /* "ECC_GameTraceChannel4" */
    var ECC_GameTraceChannel5: String /* "ECC_GameTraceChannel5" */
    var ECC_GameTraceChannel6: String /* "ECC_GameTraceChannel6" */
    var ECC_GameTraceChannel7: String /* "ECC_GameTraceChannel7" */
    var ECC_GameTraceChannel8: String /* "ECC_GameTraceChannel8" */
    var ECC_GameTraceChannel9: String /* "ECC_GameTraceChannel9" */
    var ECC_GameTraceChannel10: String /* "ECC_GameTraceChannel10" */
    var ECC_GameTraceChannel11: String /* "ECC_GameTraceChannel11" */
    var ECC_GameTraceChannel12: String /* "ECC_GameTraceChannel12" */
    var ECC_GameTraceChannel13: String /* "ECC_GameTraceChannel13" */
    var ECC_GameTraceChannel14: String /* "ECC_GameTraceChannel14" */
    var ECC_GameTraceChannel15: String /* "ECC_GameTraceChannel15" */
    var ECC_GameTraceChannel16: String /* "ECC_GameTraceChannel16" */
    var ECC_GameTraceChannel17: String /* "ECC_GameTraceChannel17" */
    var ECC_GameTraceChannel18: String /* "ECC_GameTraceChannel18" */
    var ECC_OverlapAll_Deprecated: String /* "ECC_OverlapAll_Deprecated" */
    var ECC_MAX: String /* "ECC_MAX" */
}

external object ECollisionEnabled {
    var NoCollision: String /* "NoCollision" */
    var QueryOnly: String /* "QueryOnly" */
    var PhysicsOnly: String /* "PhysicsOnly" */
    var QueryAndPhysics: String /* "QueryAndPhysics" */
    var ECollisionEnabled_MAX: String /* "ECollisionEnabled_MAX" */
}

external object ESleepFamily {
    var Normal: String /* "Normal" */
    var Sensitive: String /* "Sensitive" */
    var Custom: String /* "Custom" */
    var ESleepFamily_MAX: String /* "ESleepFamily_MAX" */
}

external object EDOFMode {
    var Default: String /* "Default" */
    var SixDOF: String /* "SixDOF" */
    var YZPlane: String /* "YZPlane" */
    var XZPlane: String /* "XZPlane" */
    var XYPlane: String /* "XYPlane" */
    var CustomPlane: String /* "CustomPlane" */
    var None: String /* "None" */
    var EDOFMode_MAX: String /* "EDOFMode_MAX" */
}

external object ECollisionResponse {
    var ECR_Ignore: String /* "ECR_Ignore" */
    var ECR_Overlap: String /* "ECR_Overlap" */
    var ECR_Block: String /* "ECR_Block" */
    var ECR_MAX: String /* "ECR_MAX" */
}

external open class CollisionResponseContainer {
    open var WorldStatic: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var WorldDynamic: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Pawn: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Visibility: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Camera: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var PhysicsBody: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Vehicle: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var Destructible: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel1: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel2: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel3: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel4: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel5: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var EngineTraceChannel6: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel1: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel2: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel3: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel4: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel5: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel6: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel7: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel8: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel9: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel10: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel11: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel12: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel13: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel14: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel15: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel16: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel17: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open var GameTraceChannel18: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open fun clone(): CollisionResponseContainer

    companion object {
        fun C(Other: UObject): CollisionResponseContainer
        fun C(Other: Any): CollisionResponseContainer
    }
}

external open class ResponseChannel {
    open var Channel: String
    open var Response: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open fun clone(): ResponseChannel

    companion object {
        fun C(Other: UObject): ResponseChannel
        fun C(Other: Any): ResponseChannel
    }
}

external open class CollisionResponse {
    open var ResponseToChannels: CollisionResponseContainer
    open var ResponseArray: Array<ResponseChannel>
    open fun clone(): CollisionResponse

    companion object {
        fun C(Other: UObject): CollisionResponse
        fun C(Other: Any): CollisionResponse
    }
}

external open class BodyInstance {
    open var ObjectType: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var CollisionEnabled: String /* "NoCollision" | "QueryOnly" | "PhysicsOnly" | "QueryAndPhysics" | "ECollisionEnabled_MAX" */
    open var SleepFamily: String /* "Normal" | "Sensitive" | "Custom" | "ESleepFamily_MAX" */
    open var DOFMode: String /* "Default" | "SixDOF" | "YZPlane" | "XZPlane" | "XYPlane" | "CustomPlane" | "None" | "EDOFMode_MAX" */
    open var bUseCCD: Boolean
    open var bNotifyRigidBodyCollision: Boolean
    open var bSimulatePhysics: Boolean
    open var bOverrideMass: Boolean
    open var bEnableGravity: Boolean
    open var bAutoWeld: Boolean
    open var bStartAwake: Boolean
    open var bGenerateWakeEvents: Boolean
    open var bUpdateMassWhenScaleChanges: Boolean
    open var bLockTranslation: Boolean
    open var bLockRotation: Boolean
    open var bLockXTranslation: Boolean
    open var bLockYTranslation: Boolean
    open var bLockZTranslation: Boolean
    open var bLockXRotation: Boolean
    open var bLockYRotation: Boolean
    open var bLockZRotation: Boolean
    open var bOverrideMaxAngularVelocity: Boolean
    open var bOverrideMaxDepenetrationVelocity: Boolean
    open var bOverrideWalkableSlopeOnInstance: Boolean
    open var bInterpolateWhenSubStepping: Boolean
    open var ResponseToChannels: CollisionResponseContainer
    open var CollisionProfileName: String
    open var PositionSolverIterationCount: Number
    open var VelocitySolverIterationCount: Number
    open var CollisionResponses: CollisionResponse
    open var MaxDepenetrationVelocity: Number
    open var MassInKgOverride: Number
    open var LinearDamping: Number
    open var AngularDamping: Number
    open var CustomDOFPlaneNormal: Vector
    open var COMNudge: Vector
    open var MassScale: Number
    open var InertiaTensorScale: Vector
    open var WalkableSlopeOverride: WalkableSlopeOverride
    open var PhysMaterialOverride: PhysicalMaterial
    open var MaxAngularVelocity: Number
    open var CustomSleepThresholdMultiplier: Number
    open var StabilizationThresholdMultiplier: Number
    open var PhysicsBlendWeight: Number
    open fun clone(): BodyInstance

    companion object {
        fun C(Other: UObject): BodyInstance
        fun C(Other: Any): BodyInstance
    }
}

external open class BodySetup : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AggGeom: KAggregateGeom
    open var BoneName: String
    open var PhysicsType: String /* "PhysType_Default" | "PhysType_Kinematic" | "PhysType_Simulated" | "PhysType_MAX" */
    open var bAlwaysFullAnimWeight: Boolean
    open var bConsiderForBounds: Boolean
    open var bMeshCollideAll: Boolean
    open var bDoubleSidedGeometry: Boolean
    open var bGenerateNonMirroredCollision: Boolean
    open var bSharedCookedData: Boolean
    open var bGenerateMirroredCollision: Boolean
    open var CollisionReponse: String /* "BodyCollision_Enabled" | "BodyCollision_Disabled" | "BodyCollision_MAX" */
    open var CollisionTraceFlag: String /* "CTF_UseDefault" | "CTF_UseSimpleAndComplex" | "CTF_UseSimpleAsComplex" | "CTF_UseComplexAsSimple" | "CTF_MAX" */
    open var PhysMaterial: PhysicalMaterial
    open var WalkableSlopeOverride: WalkableSlopeOverride
    open var BuildScale: Number
    open var DefaultInstance: BodyInstance
    open var BuildScale3D: Vector

    companion object {
        fun Load(ResourceName: String): BodySetup
        fun Find(Outer: UObject, ResourceName: String): BodySetup
        fun GetDefaultObject(): BodySetup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BodySetup
        fun C(Other: UObject): BodySetup
        fun C(Other: Any): BodySetup
    }
}

external open class BrushComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var Brush: Model
    open var BrushBodySetup: BodySetup
    open var PrePivot: Vector

    companion object {
        fun Load(ResourceName: String): BrushComponent
        fun Find(Outer: UObject, ResourceName: String): BrushComponent
        fun GetDefaultObject(): BrushComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BrushComponent
        fun C(Other: UObject): BrushComponent
        fun C(Other: Any): BrushComponent
    }
}

external open class BuilderPoly {
    open var VertexIndices: Array<Number>
    open var Direction: Number
    open var ItemName: String
    open var PolyFlags: Number
    open fun clone(): BuilderPoly

    companion object {
        fun C(Other: UObject): BuilderPoly
        fun C(Other: Any): BuilderPoly
    }
}

external open class BrushBuilder : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BitmapFilename: String
    open var Tooltip: String
    open var NotifyBadParams: Boolean
    open var Vertices: Array<Vector>
    open var Polys: Array<BuilderPoly>
    open var Layer: String
    open var MergeCoplanars: Boolean
    open fun Build(InWorld: World, InBrush: Brush): Boolean

    companion object {
        fun Load(ResourceName: String): BrushBuilder
        fun Find(Outer: UObject, ResourceName: String): BrushBuilder
        fun GetDefaultObject(): BrushBuilder
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BrushBuilder
        fun C(Other: UObject): BrushBuilder
        fun C(Other: Any): BrushBuilder
        fun Build(Builder: BrushBuilder, InWorld: World, InBrush: Brush): Boolean
    }
}

external open class GeomSelection {
    open var Type: Number
    open var index: Number
    open var SelectionIndex: Number
    open fun clone(): GeomSelection

    companion object {
        fun C(Other: UObject): GeomSelection
        fun C(Other: Any): GeomSelection
    }
}

external interface `T$244` {
    var Surfaces: Array<Number>
}

external interface `T$245` {
    var Surfaces: Array<Number>
}

external open class Brush(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var BrushType: String /* "Brush_Default" | "Brush_Add" | "Brush_Subtract" | "Brush_MAX" */
    open var BrushColor: Color
    open var PolyFlags: Number
    open var bColored: Boolean
    open var bSolidWhenSelected: Boolean
    open var bPlaceableFromClassBrowser: Boolean
    open var bNotForClientOrServer: Boolean
    open var Brush: Model
    open var BrushComponent: BrushComponent
    open var BrushBuilder: BrushBuilder
    open var bInManipulation: Boolean
    open var SavedSelections: Array<GeomSelection>
    open fun csgAdd(PolyFlags: Number, BrushType: String /* "Brush_Default" | "Brush_Add" | "Brush_Subtract" | "Brush_MAX" */): Brush
    open fun GetSurfaces(Surfaces: Array<Number> = definedExternally): `T$244`

    companion object {
        fun GetDefaultObject(): Brush
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Brush
        fun C(Other: UObject): Brush
        fun C(Other: Any): Brush
        fun csgAdd(DefaultBrush: Brush, PolyFlags: Number, BrushType: String /* "Brush_Default" | "Brush_Add" | "Brush_Subtract" | "Brush_MAX" */): Brush
        fun GetSurfaces(Brush: Brush, Surfaces: Array<Number> = definedExternally): `T$245`
    }
}

external open class Volume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Brush {
    open fun CreateBrushForVolumeActor(BrushBuilder: BrushBuilder)

    companion object {
        fun GetDefaultObject(): Volume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Volume
        fun C(Other: UObject): Volume
        fun C(Other: Any): Volume
        fun CreateBrushForVolumeActor(NewActor: Volume, BrushBuilder: BrushBuilder)
    }
}

external open class PhysicsVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Volume {
    open var TerminalVelocity: Number
    open var Priority: Number
    open var FluidFriction: Number
    open var bWaterVolume: Boolean
    open var bPhysicsOnContact: Boolean

    companion object {
        fun GetDefaultObject(): PhysicsVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsVolume
        fun C(Other: UObject): PhysicsVolume
        fun C(Other: Any): PhysicsVolume
    }
}

external open class Vector_NetQuantize : Vector {
    override fun clone(): Vector_NetQuantize

    companion object {
        fun C(Other: UObject): Vector_NetQuantize
        fun C(Other: Any): Vector_NetQuantize
    }
}

external open class Vector_NetQuantizeNormal : Vector {
    override fun clone(): Vector_NetQuantizeNormal

    companion object {
        fun C(Other: UObject): Vector_NetQuantizeNormal
        fun C(Other: Any): Vector_NetQuantizeNormal
    }
}

external interface `T$246` {
    var bBlockingHit: Boolean
    var bInitialOverlap: Boolean
    var Time: Number
    var Distance: Number
    var Location: Vector
    var ImpactPoint: Vector
    var Normal: Vector
    var ImpactNormal: Vector
    var PhysMat: PhysicalMaterial
    var HitActor: Actor
    var HitComponent: PrimitiveComponent
    var HitBoneName: String
    var HitItem: Number
    var FaceIndex: Number
    var TraceStart: Vector
    var TraceEnd: Vector
}

external interface `T$247` {
    var UV: Vector2D
    var `$`: Boolean
}

external open class HitResult {
    open var bBlockingHit: Boolean
    open var bStartPenetrating: Boolean
    open var FaceIndex: Number
    open var Time: Number
    open var Distance: Number
    open var Location: Vector_NetQuantize
    open var ImpactPoint: Vector_NetQuantize
    open var Normal: Vector_NetQuantizeNormal
    open var ImpactNormal: Vector_NetQuantizeNormal
    open var TraceStart: Vector_NetQuantize
    open var TraceEnd: Vector_NetQuantize
    open var PenetrationDepth: Number
    open var Item: Number
    open var PhysMaterial: Any
    open var Actor: Any
    open var Component: Any
    open var BoneName: String
    open var MyBoneName: String
    open fun clone(): HitResult
    open fun BreakHitResult(bBlockingHit: Boolean = definedExternally, bInitialOverlap: Boolean = definedExternally, Time: Number = definedExternally, Distance: Number = definedExternally, Location: Vector = definedExternally, ImpactPoint: Vector = definedExternally, Normal: Vector = definedExternally, ImpactNormal: Vector = definedExternally, PhysMat: PhysicalMaterial = definedExternally, HitActor: Actor = definedExternally, HitComponent: PrimitiveComponent = definedExternally, HitBoneName: String = definedExternally, HitItem: Number = definedExternally, FaceIndex: Number = definedExternally, TraceStart: Vector = definedExternally, TraceEnd: Vector = definedExternally): `T$246`
    open fun FindCollisionUV(UVChannel: Number, UV: Vector2D = definedExternally): `T$247`
    open fun GetSurfaceType(): String /* "SurfaceType_Default" | "SurfaceType1" | "SurfaceType2" | "SurfaceType3" | "SurfaceType4" | "SurfaceType5" | "SurfaceType6" | "SurfaceType7" | "SurfaceType8" | "SurfaceType9" | "SurfaceType10" | "SurfaceType11" | "SurfaceType12" | "SurfaceType13" | "SurfaceType14" | "SurfaceType15" | "SurfaceType16" | "SurfaceType17" | "SurfaceType18" | "SurfaceType19" | "SurfaceType20" | "SurfaceType21" | "SurfaceType22" | "SurfaceType23" | "SurfaceType24" | "SurfaceType25" | "SurfaceType26" | "SurfaceType27" | "SurfaceType28" | "SurfaceType29" | "SurfaceType30" | "SurfaceType31" | "SurfaceType32" | "SurfaceType33" | "SurfaceType34" | "SurfaceType35" | "SurfaceType36" | "SurfaceType37" | "SurfaceType38" | "SurfaceType39" | "SurfaceType40" | "SurfaceType41" | "SurfaceType42" | "SurfaceType43" | "SurfaceType44" | "SurfaceType45" | "SurfaceType46" | "SurfaceType47" | "SurfaceType48" | "SurfaceType49" | "SurfaceType50" | "SurfaceType51" | "SurfaceType52" | "SurfaceType53" | "SurfaceType54" | "SurfaceType55" | "SurfaceType56" | "SurfaceType57" | "SurfaceType58" | "SurfaceType59" | "SurfaceType60" | "SurfaceType61" | "SurfaceType62" | "SurfaceType_Max" | "EPhysicalSurface_MAX" */

    companion object {
        fun C(Other: UObject): HitResult
        fun C(Other: Any): HitResult
        fun BreakHitResult(Hit: HitResult, bBlockingHit: Boolean = definedExternally, bInitialOverlap: Boolean = definedExternally, Time: Number = definedExternally, Distance: Number = definedExternally, Location: Vector = definedExternally, ImpactPoint: Vector = definedExternally, Normal: Vector = definedExternally, ImpactNormal: Vector = definedExternally, PhysMat: PhysicalMaterial = definedExternally, HitActor: Actor = definedExternally, HitComponent: PrimitiveComponent = definedExternally, HitBoneName: String = definedExternally, HitItem: Number = definedExternally, FaceIndex: Number = definedExternally, TraceStart: Vector = definedExternally, TraceEnd: Vector = definedExternally): `T$246`
        fun FindCollisionUV(Hit: HitResult, UVChannel: Number, UV: Vector2D = definedExternally): `T$247`
        fun GetSurfaceType(Hit: HitResult): String /* "SurfaceType_Default" | "SurfaceType1" | "SurfaceType2" | "SurfaceType3" | "SurfaceType4" | "SurfaceType5" | "SurfaceType6" | "SurfaceType7" | "SurfaceType8" | "SurfaceType9" | "SurfaceType10" | "SurfaceType11" | "SurfaceType12" | "SurfaceType13" | "SurfaceType14" | "SurfaceType15" | "SurfaceType16" | "SurfaceType17" | "SurfaceType18" | "SurfaceType19" | "SurfaceType20" | "SurfaceType21" | "SurfaceType22" | "SurfaceType23" | "SurfaceType24" | "SurfaceType25" | "SurfaceType26" | "SurfaceType27" | "SurfaceType28" | "SurfaceType29" | "SurfaceType30" | "SurfaceType31" | "SurfaceType32" | "SurfaceType33" | "SurfaceType34" | "SurfaceType35" | "SurfaceType36" | "SurfaceType37" | "SurfaceType38" | "SurfaceType39" | "SurfaceType40" | "SurfaceType41" | "SurfaceType42" | "SurfaceType43" | "SurfaceType44" | "SurfaceType45" | "SurfaceType46" | "SurfaceType47" | "SurfaceType48" | "SurfaceType49" | "SurfaceType50" | "SurfaceType51" | "SurfaceType52" | "SurfaceType53" | "SurfaceType54" | "SurfaceType55" | "SurfaceType56" | "SurfaceType57" | "SurfaceType58" | "SurfaceType59" | "SurfaceType60" | "SurfaceType61" | "SurfaceType62" | "SurfaceType_Max" | "EPhysicalSurface_MAX" */
        fun MakeHitResult(bBlockingHit: Boolean, bInitialOverlap: Boolean, Time: Number, Distance: Number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: String, HitItem: Number, FaceIndex: Number, TraceStart: Vector, TraceEnd: Vector): HitResult
    }
}

external object EDetachmentRule {
    var KeepRelative: String /* "KeepRelative" */
    var KeepWorld: String /* "KeepWorld" */
    var EDetachmentRule_MAX: String /* "EDetachmentRule_MAX" */
}

external object EAttachmentRule {
    var KeepRelative: String /* "KeepRelative" */
    var KeepWorld: String /* "KeepWorld" */
    var SnapToTarget: String /* "SnapToTarget" */
    var EAttachmentRule_MAX: String /* "EAttachmentRule_MAX" */
}

external object EAttachLocation {
    var KeepRelativeOffset: String /* "KeepRelativeOffset" */
    var KeepWorldPosition: String /* "KeepWorldPosition" */
    var SnapToTarget: String /* "SnapToTarget" */
    var SnapToTargetIncludingScale: String /* "SnapToTargetIncludingScale" */
    var EAttachLocation_MAX: String /* "EAttachLocation_MAX" */
}

external object ERelativeTransformSpace {
    var RTS_World: String /* "RTS_World" */
    var RTS_Actor: String /* "RTS_Actor" */
    var RTS_Component: String /* "RTS_Component" */
    var RTS_ParentBoneSpace: String /* "RTS_ParentBoneSpace" */
    var RTS_MAX: String /* "RTS_MAX" */
}

external object EMoveComponentAction {
    var Move: String /* "Move" */
    var Stop: String /* "Stop" */
    var Return: String /* "Return" */
    var EMoveComponentAction_MAX: String /* "EMoveComponentAction_MAX" */
}

external open class LatentActionInfo {
    open var Linkage: Number
    open var UUID: Number
    open var ExecutionFunction: String
    open var CallbackTarget: UObject
    open fun clone(): LatentActionInfo

    companion object {
        fun C(Other: UObject): LatentActionInfo
        fun C(Other: Any): LatentActionInfo
    }
}

external open class ARPin : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TrackedGeometry: ARTrackedGeometry
    open var PinnedComponent: SceneComponent
    open var LocalToTrackingTransform: Transform
    open var LocalToAlignedTrackingTransform: Transform
    open var TrackingState: String /* "Unknown" | "Tracking" | "NotTracking" | "StoppedTracking" | "EARTrackingState_MAX" */
    open var OnARTrackingStateChanged: UnrealEngineMulticastDelegate<(NewTrackingState: String /* "Unknown" | "Tracking" | "NotTracking" | "StoppedTracking" | "EARTrackingState_MAX" */) -> Unit>
    open var OnARTransformUpdated: UnrealEngineMulticastDelegate<(OldToNewTransform: Transform) -> Unit>
    open fun GetTrackingState(): String /* "Unknown" | "Tracking" | "NotTracking" | "StoppedTracking" | "EARTrackingState_MAX" */
    open fun GetTrackedGeometry(): ARTrackedGeometry
    open fun GetPinnedComponent(): SceneComponent
    open fun GetLocalToWorldTransform(): Transform
    open fun GetLocalToTrackingTransform(): Transform
    open fun GetDebugName(): String
    open fun DebugDraw(World: World, Color: LinearColor, Scale: Number, PersistForSeconds: Number)
    open fun DebugDrawPin(WorldContextObject: UObject, Color: LinearColor, Scale: Number, PersistForSeconds: Number)
    open fun RemovePin()

    companion object {
        fun Load(ResourceName: String): ARPin
        fun Find(Outer: UObject, ResourceName: String): ARPin
        fun GetDefaultObject(): ARPin
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARPin
        fun C(Other: UObject): ARPin
        fun C(Other: Any): ARPin
        fun DebugDrawPin(ARPin: ARPin, WorldContextObject: UObject, Color: LinearColor, Scale: Number, PersistForSeconds: Number)
        fun RemovePin(PinToRemove: ARPin)
    }
}

external interface `T$248` {
    var SweepHitResult: HitResult
}

external interface `T$249` {
    var Parents: Array<SceneComponent>
}

external interface `T$250` {
    var Children: Array<SceneComponent>
}

external open class SceneComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var PhysicsVolume: Any
    open var AttachParent: SceneComponent
    open var AttachSocketName: String
    open var AttachChildren: Array<SceneComponent>
    open var ClientAttachedChildren: Array<SceneComponent>
    open var RelativeLocation: Vector
    open var RelativeRotation: Rotator
    open var RelativeScale3D: Vector
    open var ComponentVelocity: Vector
    open var bComponentToWorldUpdated: Boolean
    open var bAbsoluteLocation: Boolean
    open var bAbsoluteRotation: Boolean
    open var bAbsoluteScale: Boolean
    open var bVisible: Boolean
    open var bHiddenInGame: Boolean
    open var bShouldBeAttached: Boolean
    open var bShouldSnapLocationWhenAttached: Boolean
    open var bShouldSnapRotationWhenAttached: Boolean
    open var bShouldUpdatePhysicsVolume: Boolean
    open var bBoundsChangeTriggersStreamingDataRebuild: Boolean
    open var bUseAttachParentBound: Boolean
    open var bVisualizeComponent: Boolean
    open var Mobility: String /* "Static" | "Stationary" | "Movable" | "EComponentMobility_MAX" */
    open var DetailMode: String /* "DM_Low" | "DM_Medium" | "DM_High" | "DM_MAX" */
    open var PhysicsVolumeChangedDelegate: UnrealEngineMulticastDelegate<(NewVolume: PhysicsVolume) -> Unit>
    open fun ToggleVisibility(bPropagateToChildren: Boolean)
    open fun SnapTo(InParent: SceneComponent, InSocketName: String): Boolean
    open fun SetWorldScale3D(NewScale: Vector)
    open fun SetVisibility(bNewVisibility: Boolean, bPropagateToChildren: Boolean)
    open fun SetShouldUpdatePhysicsVolume(bInShouldUpdatePhysicsVolume: Boolean)
    open fun SetRelativeScale3D(NewScale3D: Vector)
    open fun SetMobility(NewMobility: String /* "Static" | "Stationary" | "Movable" | "EComponentMobility_MAX" */)
    open fun SetHiddenInGame(NewHidden: Boolean, bPropagateToChildren: Boolean)
    open fun SetAbsolute(bNewAbsoluteLocation: Boolean, bNewAbsoluteRotation: Boolean, bNewAbsoluteScale: Boolean)
    open fun ResetRelativeTransform()
    open fun OnRep_Visibility(OldValue: Boolean)
    open fun OnRep_Transform()
    open fun OnRep_AttachSocketName()
    open fun OnRep_AttachParent()
    open fun OnRep_AttachChildren()
    open fun K2_SetWorldTransform(NewTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetWorldRotation(NewRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetWorldLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetWorldLocation(NewLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetRelativeTransform(NewTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetRelativeRotation(NewRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetRelativeLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetRelativeLocation(NewLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_GetComponentToWorld(): Transform
    open fun K2_GetComponentScale(): Vector
    open fun K2_GetComponentRotation(): Rotator
    open fun K2_GetComponentLocation(): Vector
    open fun K2_DetachFromComponent(LocationRule: String /* "KeepRelative" | "KeepWorld" | "EDetachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "EDetachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "EDetachmentRule_MAX" */, bCallModify: Boolean)
    open fun K2_AttachToComponent(Parent: SceneComponent, SocketName: String, LocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, bWeldSimulatedBodies: Boolean): Boolean
    open fun K2_AttachTo(InParent: SceneComponent, InSocketName: String, AttachType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bWeldSimulatedBodies: Boolean): Boolean
    open fun K2_AddWorldTransform(DeltaTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddWorldRotation(DeltaRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddWorldOffset(DeltaLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddRelativeRotation(DeltaRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddRelativeLocation(DeltaLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddLocalTransform(DeltaTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddLocalRotation(DeltaRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddLocalOffset(DeltaLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun IsVisible(): Boolean
    open fun IsSimulatingPhysics(BoneName: String): Boolean
    open fun IsAnySimulatingPhysics(): Boolean
    open fun GetUpVector(): Vector
    open fun GetSocketTransform(InSocketName: String, TransformSpace: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */): Transform
    open fun GetSocketRotation(InSocketName: String): Rotator
    open fun GetSocketQuaternion(InSocketName: String): Quat
    open fun GetSocketLocation(InSocketName: String): Vector
    open fun GetShouldUpdatePhysicsVolume(): Boolean
    open fun GetRightVector(): Vector
    open fun GetRelativeTransform(): Transform
    open fun GetPhysicsVolume(): PhysicsVolume
    open fun GetParentComponents(Parents: Array<SceneComponent> = definedExternally): `T$249`
    open fun GetNumChildrenComponents(): Number
    open fun GetForwardVector(): Vector
    open fun GetComponentVelocity(): Vector
    open fun GetChildrenComponents(bIncludeAllDescendants: Boolean, Children: Array<SceneComponent> = definedExternally): `T$250`
    open fun GetChildComponent(ChildIndex: Number): SceneComponent
    open fun GetAttachSocketName(): String
    open fun GetAttachParent(): SceneComponent
    open fun GetAllSocketNames(): Array<String>
    open fun DoesSocketExist(InSocketName: String): Boolean
    open fun DetachFromParent(bMaintainWorldPosition: Boolean, bCallModify: Boolean)
    open fun SetMobile()
    open fun GetComponentBounds(Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally, SphereRadius: Number = definedExternally): `T$98`
    open fun MoveComponentTo(TargetRelativeLocation: Vector, TargetRelativeRotation: Rotator, bEaseOut: Boolean, bEaseIn: Boolean, OverTime: Number, bForceShortestRotationPath: Boolean, MoveAction: String /* "Move" | "Stop" | "Return" | "EMoveComponentAction_MAX" */, LatentInfo: LatentActionInfo)
    open fun PinComponent(PinToWorldTransform: Transform, TrackedGeometry: ARTrackedGeometry, DebugName: String): ARPin
    open fun PinComponentToTraceResult(TraceResult: ARTraceResult, DebugName: String): ARPin
    open fun UnpinComponent()

    companion object {
        fun Load(ResourceName: String): SceneComponent
        fun Find(Outer: UObject, ResourceName: String): SceneComponent
        fun GetDefaultObject(): SceneComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SceneComponent
        fun C(Other: UObject): SceneComponent
        fun C(Other: Any): SceneComponent
        fun SetMobile(SceneComponent: SceneComponent)
        fun SetMobility(SceneComponent: SceneComponent, Type: String /* "Static" | "Stationary" | "Movable" | "EComponentMobility_MAX" */)
        fun GetComponentBounds(Component: SceneComponent, Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally, SphereRadius: Number = definedExternally): `T$98`
        fun MoveComponentTo(Component: SceneComponent, TargetRelativeLocation: Vector, TargetRelativeRotation: Rotator, bEaseOut: Boolean, bEaseIn: Boolean, OverTime: Number, bForceShortestRotationPath: Boolean, MoveAction: String /* "Move" | "Stop" | "Return" | "EMoveComponentAction_MAX" */, LatentInfo: LatentActionInfo)
        fun PinComponent(ComponentToPin: SceneComponent, PinToWorldTransform: Transform, TrackedGeometry: ARTrackedGeometry, DebugName: String): ARPin
        fun PinComponentToTraceResult(ComponentToPin: SceneComponent, TraceResult: ARTraceResult, DebugName: String): ARPin
        fun UnpinComponent(ComponentToUnpin: SceneComponent)
    }
}

external object ESceneDepthPriorityGroup {
    var SDPG_World: String /* "SDPG_World" */
    var SDPG_Foreground: String /* "SDPG_Foreground" */
    var SDPG_MAX: String /* "SDPG_MAX" */
}

external object EIndirectLightingCacheQuality {
    var ILCQ_Off: String /* "ILCQ_Off" */
    var ILCQ_Point: String /* "ILCQ_Point" */
    var ILCQ_Volume: String /* "ILCQ_Volume" */
    var ILCQ_MAX: String /* "ILCQ_MAX" */
}

external object ELightmapType {
    var Default: String /* "Default" */
    var ForceSurface: String /* "ForceSurface" */
    var ForceVolumetric: String /* "ForceVolumetric" */
    var ELightmapType_MAX: String /* "ELightmapType_MAX" */
}

external object EHasCustomNavigableGeometry {
    var No: String /* "No" */
    var Yes: String /* "Yes" */
    var EvenIfNotCollidable: String /* "EvenIfNotCollidable" */
    var DontExport: String /* "DontExport" */
    var EHasCustomNavigableGeometry_MAX: String /* "EHasCustomNavigableGeometry_MAX" */
}

external object ECanBeCharacterBase {
    var ECB_No: String /* "ECB_No" */
    var ECB_Yes: String /* "ECB_Yes" */
    var ECB_Owner: String /* "ECB_Owner" */
    var ECB_MAX: String /* "ECB_MAX" */
}

external open class LightingChannels {
    open var bChannel0: Boolean
    open var bChannel1: Boolean
    open var bChannel2: Boolean
    open fun clone(): LightingChannels

    companion object {
        fun C(Other: UObject): LightingChannels
        fun C(Other: Any): LightingChannels
    }
}

external object ERendererStencilMask {
    var ERSM_Default: String /* "ERSM_Default" */
    var ERSM_255: String /* "ERSM_255" */
    var ERSM_1: String /* "ERSM_1" */
    var ERSM_2: String /* "ERSM_2" */
    var ERSM_4: String /* "ERSM_4" */
    var ERSM_8: String /* "ERSM_8" */
    var ERSM_16: String /* "ERSM_16" */
    var ERSM_32: String /* "ERSM_32" */
    var ERSM_64: String /* "ERSM_64" */
    var ERSM_128: String /* "ERSM_128" */
    var ERSM_MAX: String /* "ERSM_MAX" */
}

external open class CustomPrimitiveData {
    open var Data: Array<Number>
    open fun clone(): CustomPrimitiveData

    companion object {
        fun C(Other: UObject): CustomPrimitiveData
        fun C(Other: Any): CustomPrimitiveData
    }
}

external object ERuntimeVirtualTextureMaterialType {
    var BaseColor: String /* "BaseColor" */
    var BaseColor_Normal: String /* "BaseColor_Normal" */
    var BaseColor_Normal_Specular: String /* "BaseColor_Normal_Specular" */
    var Count: String /* "Count" */
    var ERuntimeVirtualTextureMaterialType_MAX: String /* "ERuntimeVirtualTextureMaterialType_MAX" */
}

external open class RuntimeVirtualTexture : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaterialType: String /* "BaseColor" | "BaseColor_Normal" | "BaseColor_Normal_Specular" | "Count" | "ERuntimeVirtualTextureMaterialType_MAX" */
    open var bCompressTextures: Boolean
    open var Size: Number
    open var TileSize: Number
    open var TileBorderSize: Number
    open var RemoveLowMips: Number
    open var bEnable: Boolean

    companion object {
        fun Load(ResourceName: String): RuntimeVirtualTexture
        fun Find(Outer: UObject, ResourceName: String): RuntimeVirtualTexture
        fun GetDefaultObject(): RuntimeVirtualTexture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RuntimeVirtualTexture
        fun C(Other: UObject): RuntimeVirtualTexture
        fun C(Other: Any): RuntimeVirtualTexture
    }
}

external object ERuntimeVirtualTextureMainPassType {
    var Never: String /* "Never" */
    var Exclusive: String /* "Exclusive" */
    var Always: String /* "Always" */
    var ERuntimeVirtualTextureMainPassType_MAX: String /* "ERuntimeVirtualTextureMainPassType_MAX" */
}

external object EUINavigationAction {
    var Accept: String /* "Accept" */
    var Back: String /* "Back" */
    var Num: String /* "Num" */
    var Invalid: String /* "Invalid" */
    var EUINavigationAction_MAX: String /* "EUINavigationAction_MAX" */
}

external open class Key {
    open var KeyName: String
    open fun clone(): Key
    open fun EqualEqual_KeyKey(B: Key): Boolean
    open fun Key_GetDisplayName(): String
    open fun Key_GetNavigationAction(): String /* "Accept" | "Back" | "Num" | "Invalid" | "EUINavigationAction_MAX" */
    open fun Key_IsFloatAxis(): Boolean
    open fun Key_IsGamepadKey(): Boolean
    open fun Key_IsKeyboardKey(): Boolean
    open fun Key_IsModifierKey(): Boolean
    open fun Key_IsMouseButton(): Boolean
    open fun Key_IsValid(): Boolean
    open fun Key_IsVectorAxis(): Boolean

    companion object {
        fun C(Other: UObject): Key
        fun C(Other: Any): Key
        fun EqualEqual_KeyKey(A: Key, B: Key): Boolean
        fun Key_GetDisplayName(Key: Key): String
        fun Key_GetNavigationAction(InKey: Key): String /* "Accept" | "Back" | "Num" | "Invalid" | "EUINavigationAction_MAX" */
        fun Key_IsFloatAxis(Key: Key): Boolean
        fun Key_IsGamepadKey(Key: Key): Boolean
        fun Key_IsKeyboardKey(Key: Key): Boolean
        fun Key_IsModifierKey(Key: Key): Boolean
        fun Key_IsMouseButton(Key: Key): Boolean
        fun Key_IsValid(Key: Key): Boolean
        fun Key_IsVectorAxis(Key: Key): Boolean
    }
}

external object ETouchIndex {
    var Touch1: String /* "Touch1" */
    var Touch2: String /* "Touch2" */
    var Touch3: String /* "Touch3" */
    var Touch4: String /* "Touch4" */
    var Touch5: String /* "Touch5" */
    var Touch6: String /* "Touch6" */
    var Touch7: String /* "Touch7" */
    var Touch8: String /* "Touch8" */
    var Touch9: String /* "Touch9" */
    var Touch10: String /* "Touch10" */
    var CursorPointerIndex: String /* "CursorPointerIndex" */
    var MAX_TOUCHES: String /* "MAX_TOUCHES" */
    var ETouchIndex_MAX: String /* "ETouchIndex_MAX" */
}

external open class SubsurfaceProfileStruct {
    open var ScatterRadius: Number
    open var SubsurfaceColor: LinearColor
    open var FalloffColor: LinearColor
    open var BoundaryColorBleed: LinearColor
    open var ExtinctionScale: Number
    open var NormalScale: Number
    open var ScatteringDistribution: Number
    open var IOR: Number
    open var Roughness0: Number
    open var Roughness1: Number
    open var LobeMix: Number
    open fun clone(): SubsurfaceProfileStruct

    companion object {
        fun C(Other: UObject): SubsurfaceProfileStruct
        fun C(Other: Any): SubsurfaceProfileStruct
    }
}

external open class SubsurfaceProfile : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Settings: SubsurfaceProfileStruct

    companion object {
        fun Load(ResourceName: String): SubsurfaceProfile
        fun Find(Outer: UObject, ResourceName: String): SubsurfaceProfile
        fun GetDefaultObject(): SubsurfaceProfile
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SubsurfaceProfile
        fun C(Other: UObject): SubsurfaceProfile
        fun C(Other: Any): SubsurfaceProfile
    }
}

external open class LightmassMaterialInterfaceSettings {
    open var bCastShadowAsMasked: Boolean
    open var EmissiveBoost: Number
    open var DiffuseBoost: Number
    open var ExportResolutionScale: Number
    open var bOverrideCastShadowAsMasked: Boolean
    open var bOverrideEmissiveBoost: Boolean
    open var bOverrideDiffuseBoost: Boolean
    open var bOverrideExportResolutionScale: Boolean
    open fun clone(): LightmassMaterialInterfaceSettings

    companion object {
        fun C(Other: UObject): LightmassMaterialInterfaceSettings
        fun C(Other: Any): LightmassMaterialInterfaceSettings
    }
}

external interface `T$251` {
    var PathString: String
}

external open class SoftObjectPath {
    open var AssetPathName: String
    open var SubPathString: String
    open fun clone(): SoftObjectPath
    open fun BreakSoftObjectPath(PathString: String = definedExternally): `T$251`
    open fun Conv_SoftObjPathToSoftObjRef(): UObject

    companion object {
        fun C(Other: UObject): SoftObjectPath
        fun C(Other: Any): SoftObjectPath
        fun BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath, PathString: String = definedExternally): `T$251`
        fun Conv_SoftObjPathToSoftObjRef(SoftObjectPath: SoftObjectPath): UObject
        fun MakeSoftObjectPath(PathString: String): SoftObjectPath
    }
}

external open class MaterialTextureInfo {
    open var SamplingScale: Number
    open var UVChannelIndex: Number
    open var TextureName: String
    open var TextureReference: SoftObjectPath
    open var TextureIndex: Number
    open fun clone(): MaterialTextureInfo

    companion object {
        fun C(Other: UObject): MaterialTextureInfo
        fun C(Other: Any): MaterialTextureInfo
    }
}

external open class ThumbnailInfo : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ThumbnailInfo
        fun Find(Outer: UObject, ResourceName: String): ThumbnailInfo
        fun GetDefaultObject(): ThumbnailInfo
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ThumbnailInfo
        fun C(Other: UObject): ThumbnailInfo
        fun C(Other: Any): ThumbnailInfo
    }
}

external open class AssetImportInfo {
    open fun clone(): AssetImportInfo

    companion object {
        fun C(Other: UObject): AssetImportInfo
        fun C(Other: Any): AssetImportInfo
    }
}

external open class AssetImportData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var SourceData: AssetImportInfo
    open fun K2_GetFirstFilename(): String
    open fun K2_ExtractFilenames(): Array<String>

    companion object {
        fun Load(ResourceName: String): AssetImportData
        fun Find(Outer: UObject, ResourceName: String): AssetImportData
        fun GetDefaultObject(): AssetImportData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetImportData
        fun C(Other: UObject): AssetImportData
        fun C(Other: Any): AssetImportData
    }
}

external object EEdGraphPinDirection {
    var EGPD_Input: String /* "EGPD_Input" */
    var EGPD_Output: String /* "EGPD_Output" */
    var EGPD_MAX: String /* "EGPD_MAX" */
}

external open class EdGraphTerminalType {
    open var TerminalCategory: String
    open var TerminalSubCategory: String
    open var TerminalSubCategoryObject: Any
    open var bTerminalIsConst: Boolean
    open var bTerminalIsWeakPointer: Boolean
    open fun clone(): EdGraphTerminalType

    companion object {
        fun C(Other: UObject): EdGraphTerminalType
        fun C(Other: Any): EdGraphTerminalType
    }
}

external object EPinContainerType {
    var None: String /* "None" */
    var Array: String /* "Array" */
    var Set: String /* "Set" */
    var Map: String /* "Map" */
    var EPinContainerType_MAX: String /* "EPinContainerType_MAX" */
}

external open class EdGraphPinType {
    open var PinCategory: String
    open var PinSubCategory: String
    open var PinSubCategoryObject: Any
    open var PinSubCategoryMemberReference: SimpleMemberReference
    open var PinValueType: EdGraphTerminalType
    open var ContainerType: String /* "None" | "Array" | "Set" | "Map" | "EPinContainerType_MAX" */
    open var bIsArray: Boolean
    open var bIsReference: Boolean
    open var bIsConst: Boolean
    open var bIsWeakPointer: Boolean
    open fun clone(): EdGraphPinType

    companion object {
        fun C(Other: UObject): EdGraphPinType
        fun C(Other: Any): EdGraphPinType
    }
}

external open class EdGraphPin_Deprecated : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PinName: String
    open var PinFriendlyName: String
    open var PinToolTip: String
    open var Direction: String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */
    open var PinType: EdGraphPinType
    open var DefaultValue: String
    open var AutogeneratedDefaultValue: String
    open var DefaultObject: UObject
    open var DefaultTextValue: String
    open var LinkedTo: Array<EdGraphPin_Deprecated>
    open var SubPins: Array<EdGraphPin_Deprecated>
    open var ParentPin: EdGraphPin_Deprecated
    open var ReferencePassThroughConnection: EdGraphPin_Deprecated
    open var bHidden: Boolean
    open var bNotConnectable: Boolean
    open var bDefaultValueIsReadOnly: Boolean
    open var bDefaultValueIsIgnored: Boolean
    open var bIsDiffing: Boolean
    open var bAdvancedView: Boolean
    open var bDisplayAsMutableRef: Boolean
    open var PersistentGuid: Guid

    companion object {
        fun Load(ResourceName: String): EdGraphPin_Deprecated
        fun Find(Outer: UObject, ResourceName: String): EdGraphPin_Deprecated
        fun GetDefaultObject(): EdGraphPin_Deprecated
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraphPin_Deprecated
        fun C(Other: UObject): EdGraphPin_Deprecated
        fun C(Other: Any): EdGraphPin_Deprecated
    }
}

external object ENodeAdvancedPins {
    var NoPins: String /* "NoPins" */
    var Shown: String /* "Shown" */
    var Hidden: String /* "Hidden" */
    var ENodeAdvancedPins_MAX: String /* "ENodeAdvancedPins_MAX" */
}

external object ENodeEnabledState {
    var Enabled: String /* "Enabled" */
    var Disabled: String /* "Disabled" */
    var DevelopmentOnly: String /* "DevelopmentOnly" */
    var ENodeEnabledState_MAX: String /* "ENodeEnabledState_MAX" */
}

external object EJavascriptPinContainerType {
    var None: String /* "None" */
    var Array: String /* "Array" */
    var Set: String /* "Set" */
    var Map: String /* "Map" */
    var EJavascriptPinContainerType_MAX: String /* "EJavascriptPinContainerType_MAX" */
}

external open class JavascriptEdGraphPin {
    open fun clone(): JavascriptEdGraphPin
    open fun BreakAllPinLinks()
    open fun BreakLinkTo(B: JavascriptEdGraphPin)
    open fun GetDirection(): String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */
    open fun GetLinkedPinNum(): Number
    open fun GetLinkedTo(): Array<JavascriptEdGraphPin>
    open fun GetOwningNode(): EdGraphNode
    open fun GetParentPin(): JavascriptEdGraphPin
    open fun GetPinContainerType(): String /* "None" | "Array" | "Set" | "Map" | "EJavascriptPinContainerType_MAX" */
    open fun GetPinGUID(): Guid
    open fun GetPinIndex(): Number
    open fun GetPinName(): String
    open fun GetPinType(): EdGraphPinType
    open fun GetSubPins(): Array<JavascriptEdGraphPin>
    open fun IsPinHidden(): Boolean
    open fun IsValid(): Boolean
    open fun MakeLinkTo(B: JavascriptEdGraphPin)
    open fun SetParentPin(Parent: JavascriptEdGraphPin)
    open fun SetPinHidden(bHidden: Boolean)
    open fun SetPinInfo(InPinName: String, InPinToolTip: String)
    open fun SetPinType(PinType: EdGraphPinType)

    companion object {
        fun C(Other: UObject): JavascriptEdGraphPin
        fun C(Other: Any): JavascriptEdGraphPin
        fun BreakAllPinLinks(A: JavascriptEdGraphPin)
        fun BreakLinkTo(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin)
        fun GetDirection(A: JavascriptEdGraphPin): String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */
        fun GetLinkedPinNum(A: JavascriptEdGraphPin): Number
        fun GetLinkedTo(A: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>
        fun GetOwningNode(A: JavascriptEdGraphPin): EdGraphNode
        fun GetParentPin(A: JavascriptEdGraphPin): JavascriptEdGraphPin
        fun GetPinContainerType(A: JavascriptEdGraphPin): String /* "None" | "Array" | "Set" | "Map" | "EJavascriptPinContainerType_MAX" */
        fun GetPinGUID(A: JavascriptEdGraphPin): Guid
        fun GetPinIndex(A: JavascriptEdGraphPin): Number
        fun GetPinName(A: JavascriptEdGraphPin): String
        fun GetPinType(A: JavascriptEdGraphPin): EdGraphPinType
        fun GetSubPins(A: JavascriptEdGraphPin): Array<JavascriptEdGraphPin>
        fun IsPinHidden(A: JavascriptEdGraphPin): Boolean
        fun IsValid(A: JavascriptEdGraphPin): Boolean
        fun MakeLinkTo(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin)
        fun SetParentPin(A: JavascriptEdGraphPin, Parent: JavascriptEdGraphPin)
        fun SetPinHidden(A: JavascriptEdGraphPin, bHidden: Boolean)
        fun SetPinInfo(A: JavascriptEdGraphPin, InPinName: String, InPinToolTip: String)
        fun SetPinType(Pin: JavascriptEdGraphPin, PinType: EdGraphPinType)
        fun GetDefaultObject(): JavascriptEdGraphPin
    }
}

external open class EdGraphNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DeprecatedPins: Array<EdGraphPin_Deprecated>
    open var NodePosX: Number
    open var NodePosY: Number
    open var NodeWidth: Number
    open var NodeHeight: Number
    open var AdvancedPinDisplay: String /* "NoPins" | "Shown" | "Hidden" | "ENodeAdvancedPins_MAX" */
    open var EnabledState: String /* "Enabled" | "Disabled" | "DevelopmentOnly" | "ENodeEnabledState_MAX" */
    open var bDisplayAsDisabled: Boolean
    open var bUserSetEnabledState: Boolean
    open var bIsNodeEnabled: Boolean
    open var bCanResizeNode: Boolean
    open var bHasCompilerMessage: Boolean
    open var bCommentBubblePinned: Boolean
    open var bCommentBubbleVisible: Boolean
    open var bCommentBubbleMakeVisible: Boolean
    open var bCanRenameNode: Boolean
    open var NodeUpgradeMessage: String
    open var NodeComment: String
    open var ErrorType: Number
    open var ErrorMsg: String
    open var NodeGuid: Guid
    open fun AutowireNewNode(FromPin: JavascriptEdGraphPin)
    open fun CanDuplicateNode(): Boolean
    open fun CanUserDeleteNode(): Boolean
    open fun DestroyNode()
    open fun FindPin(PinName: String, Direction: String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */): JavascriptEdGraphPin
    open fun GetPins(): Array<JavascriptEdGraphPin>
    open fun ResizeNode(NewSize: Vector2D)

    companion object {
        fun Load(ResourceName: String): EdGraphNode
        fun Find(Outer: UObject, ResourceName: String): EdGraphNode
        fun GetDefaultObject(): EdGraphNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraphNode
        fun C(Other: UObject): EdGraphNode
        fun C(Other: Any): EdGraphNode
        fun AutowireNewNode(UNode: EdGraphNode, FromPin: JavascriptEdGraphPin)
        fun CanDuplicateNode(UNode: EdGraphNode): Boolean
        fun CanUserDeleteNode(UNode: EdGraphNode): Boolean
        fun DestroyNode(UNode: EdGraphNode)
        fun FindPin(UNode: EdGraphNode, PinName: String, Direction: String /* "EGPD_Input" | "EGPD_Output" | "EGPD_MAX" */): JavascriptEdGraphPin
        fun GetPins(UNode: EdGraphNode): Array<JavascriptEdGraphPin>
        fun ResizeNode(UNode: EdGraphNode, NewSize: Vector2D)
    }
}

external object EMaterialFunctionUsage {
    var Default: String /* "Default" */
    var MaterialLayer: String /* "MaterialLayer" */
    var MaterialLayerBlend: String /* "MaterialLayerBlend" */
    var EMaterialFunctionUsage_MAX: String /* "EMaterialFunctionUsage_MAX" */
}

external open class MaterialFunctionInterface : UObject {
    constructor()
    constructor(Outer: UObject)
    open var StateId: Guid
    open var MaterialFunctionUsage: String /* "Default" | "MaterialLayer" | "MaterialLayerBlend" | "EMaterialFunctionUsage_MAX" */
    open var CombinedInputTypes: Any
    open var CombinedOutputTypes: Any
    open var ThumbnailInfo: ThumbnailInfo
    open fun UpdateMaterialFunction(PreviewMaterial: Material)

    companion object {
        fun Load(ResourceName: String): MaterialFunctionInterface
        fun Find(Outer: UObject, ResourceName: String): MaterialFunctionInterface
        fun GetDefaultObject(): MaterialFunctionInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialFunctionInterface
        fun C(Other: UObject): MaterialFunctionInterface
        fun C(Other: Any): MaterialFunctionInterface
        fun UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface, PreviewMaterial: Material)
    }
}

external open class MaterialExpressionComment : MaterialExpression {
    constructor()
    constructor(Outer: UObject)
    open var SizeX: Number
    open var SizeY: Number
    open var text: String
    open var CommentColor: LinearColor
    open var FontSize: Number

    companion object {
        fun Load(ResourceName: String): MaterialExpressionComment
        fun Find(Outer: UObject, ResourceName: String): MaterialExpressionComment
        fun GetDefaultObject(): MaterialExpressionComment
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpressionComment
        fun C(Other: UObject): MaterialExpressionComment
        fun C(Other: Any): MaterialExpressionComment
    }
}

external open class MaterialFunction : MaterialFunctionInterface {
    constructor()
    constructor(Outer: UObject)
    open var ParentFunction: MaterialFunction
    open var Description: String
    open var bExposeToLibrary: Boolean
    open var bPrefixParameterNames: Boolean
    open var LibraryCategories: Array<String>
    open var LibraryCategoriesText: Array<String>
    open var FunctionExpressions: Array<MaterialExpression>
    open var FunctionEditorComments: Array<MaterialExpressionComment>
    open var PreviewMaterial: Material
    open var bReentrantFlag: Boolean
    open fun CreateMaterialExpressionInFunction(ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
    open fun DeleteAllMaterialExpressionsInFunction()
    open fun DeleteMaterialExpressionInFunction(Expression: MaterialExpression)
    open fun GetNumMaterialExpressionsInFunction(): Number
    open fun LayoutMaterialFunctionExpressions()

    companion object {
        fun Load(ResourceName: String): MaterialFunction
        fun Find(Outer: UObject, ResourceName: String): MaterialFunction
        fun GetDefaultObject(): MaterialFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialFunction
        fun C(Other: UObject): MaterialFunction
        fun C(Other: Any): MaterialFunction
        fun CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction, ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
        fun DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction)
        fun DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction, Expression: MaterialExpression)
        fun GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): Number
        fun LayoutMaterialFunctionExpressions(MaterialFunction: MaterialFunction)
    }
}

external open class ExpressionOutput {
    open var OutputName: String
    open var mask: Number
    open var MaskR: Number
    open var MaskG: Number
    open var MaskB: Number
    open var MaskA: Number
    open fun clone(): ExpressionOutput

    companion object {
        fun C(Other: UObject): ExpressionOutput
        fun C(Other: Any): ExpressionOutput
    }
}

external object EMaterialProperty {
    var MP_EmissiveColor: String /* "MP_EmissiveColor" */
    var MP_Opacity: String /* "MP_Opacity" */
    var MP_OpacityMask: String /* "MP_OpacityMask" */
    var MP_DiffuseColor: String /* "MP_DiffuseColor" */
    var MP_SpecularColor: String /* "MP_SpecularColor" */
    var MP_BaseColor: String /* "MP_BaseColor" */
    var MP_Metallic: String /* "MP_Metallic" */
    var MP_Specular: String /* "MP_Specular" */
    var MP_Roughness: String /* "MP_Roughness" */
    var MP_Normal: String /* "MP_Normal" */
    var MP_WorldPositionOffset: String /* "MP_WorldPositionOffset" */
    var MP_WorldDisplacement: String /* "MP_WorldDisplacement" */
    var MP_TessellationMultiplier: String /* "MP_TessellationMultiplier" */
    var MP_SubsurfaceColor: String /* "MP_SubsurfaceColor" */
    var MP_CustomData0: String /* "MP_CustomData0" */
    var MP_CustomData1: String /* "MP_CustomData1" */
    var MP_AmbientOcclusion: String /* "MP_AmbientOcclusion" */
    var MP_Refraction: String /* "MP_Refraction" */
    var MP_CustomizedUVs0: String /* "MP_CustomizedUVs0" */
    var MP_CustomizedUVs1: String /* "MP_CustomizedUVs1" */
    var MP_CustomizedUVs2: String /* "MP_CustomizedUVs2" */
    var MP_CustomizedUVs3: String /* "MP_CustomizedUVs3" */
    var MP_CustomizedUVs4: String /* "MP_CustomizedUVs4" */
    var MP_CustomizedUVs5: String /* "MP_CustomizedUVs5" */
    var MP_CustomizedUVs6: String /* "MP_CustomizedUVs6" */
    var MP_CustomizedUVs7: String /* "MP_CustomizedUVs7" */
    var MP_PixelDepthOffset: String /* "MP_PixelDepthOffset" */
    var MP_ShadingModel: String /* "MP_ShadingModel" */
    var MP_MaterialAttributes: String /* "MP_MaterialAttributes" */
    var MP_CustomOutput: String /* "MP_CustomOutput" */
    var MP_MAX: String /* "MP_MAX" */
}

external open class MaterialExpression : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaterialExpressionEditorX: Number
    open var MaterialExpressionEditorY: Number
    open var GraphNode: EdGraphNode
    open var MaterialExpressionGuid: Guid
    open var Material: Material
    open var UFunction: MaterialFunction
    open var Desc: String
    open var bRealtimePreview: Boolean
    open var bNeedToUpdatePreview: Boolean
    open var bIsParameterExpression: Boolean
    open var bCommentBubbleVisible: Boolean
    open var bShowOutputNameOnPin: Boolean
    open var bShowMaskColorsOnPin: Boolean
    open var bHidePreviewWindow: Boolean
    open var bCollapsed: Boolean
    open var bShaderInputData: Boolean
    open var bShowInputs: Boolean
    open var bShowOutputs: Boolean
    open var MenuCategories: Array<String>
    open var Outputs: Array<ExpressionOutput>
    open fun ConnectMaterialExpressions(FromOutputName: String, ToExpression: MaterialExpression, ToInputName: String): Boolean
    open fun ConnectMaterialProperty(FromOutputName: String, Property: String /* "MP_EmissiveColor" | "MP_Opacity" | "MP_OpacityMask" | "MP_DiffuseColor" | "MP_SpecularColor" | "MP_BaseColor" | "MP_Metallic" | "MP_Specular" | "MP_Roughness" | "MP_Normal" | "MP_WorldPositionOffset" | "MP_WorldDisplacement" | "MP_TessellationMultiplier" | "MP_SubsurfaceColor" | "MP_CustomData0" | "MP_CustomData1" | "MP_AmbientOcclusion" | "MP_Refraction" | "MP_CustomizedUVs0" | "MP_CustomizedUVs1" | "MP_CustomizedUVs2" | "MP_CustomizedUVs3" | "MP_CustomizedUVs4" | "MP_CustomizedUVs5" | "MP_CustomizedUVs6" | "MP_CustomizedUVs7" | "MP_PixelDepthOffset" | "MP_ShadingModel" | "MP_MaterialAttributes" | "MP_CustomOutput" | "MP_MAX" */): Boolean

    companion object {
        fun Load(ResourceName: String): MaterialExpression
        fun Find(Outer: UObject, ResourceName: String): MaterialExpression
        fun GetDefaultObject(): MaterialExpression
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialExpression
        fun C(Other: UObject): MaterialExpression
        fun C(Other: Any): MaterialExpression
        fun ConnectMaterialExpressions(FromExpression: MaterialExpression, FromOutputName: String, ToExpression: MaterialExpression, ToInputName: String): Boolean
        fun ConnectMaterialProperty(FromExpression: MaterialExpression, FromOutputName: String, Property: String /* "MP_EmissiveColor" | "MP_Opacity" | "MP_OpacityMask" | "MP_DiffuseColor" | "MP_SpecularColor" | "MP_BaseColor" | "MP_Metallic" | "MP_Specular" | "MP_Roughness" | "MP_Normal" | "MP_WorldPositionOffset" | "MP_WorldDisplacement" | "MP_TessellationMultiplier" | "MP_SubsurfaceColor" | "MP_CustomData0" | "MP_CustomData1" | "MP_AmbientOcclusion" | "MP_Refraction" | "MP_CustomizedUVs0" | "MP_CustomizedUVs1" | "MP_CustomizedUVs2" | "MP_CustomizedUVs3" | "MP_CustomizedUVs4" | "MP_CustomizedUVs5" | "MP_CustomizedUVs6" | "MP_CustomizedUVs7" | "MP_PixelDepthOffset" | "MP_ShadingModel" | "MP_MaterialAttributes" | "MP_CustomOutput" | "MP_MAX" */): Boolean
    }
}

external open class MaterialInput {
    open var Expression: MaterialExpression
    open var OutputIndex: Number
    open var InputName: String
    open var mask: Number
    open var MaskR: Number
    open var MaskG: Number
    open var MaskB: Number
    open var MaskA: Number
    open var ExpressionName: String
    open fun clone(): MaterialInput

    companion object {
        fun C(Other: UObject): MaterialInput
        fun C(Other: Any): MaterialInput
    }
}

external open class ColorMaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var Constant: Color
    override fun clone(): ColorMaterialInput

    companion object {
        fun C(Other: UObject): ColorMaterialInput
        fun C(Other: Any): ColorMaterialInput
    }
}

external open class ScalarMaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var Constant: Number
    override fun clone(): ScalarMaterialInput

    companion object {
        fun C(Other: UObject): ScalarMaterialInput
        fun C(Other: Any): ScalarMaterialInput
    }
}

external open class VectorMaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var Constant: Vector
    override fun clone(): VectorMaterialInput

    companion object {
        fun C(Other: UObject): VectorMaterialInput
        fun C(Other: Any): VectorMaterialInput
    }
}

external object EMaterialDomain {
    var MD_Surface: String /* "MD_Surface" */
    var MD_DeferredDecal: String /* "MD_DeferredDecal" */
    var MD_LightFunction: String /* "MD_LightFunction" */
    var MD_Volume: String /* "MD_Volume" */
    var MD_PostProcess: String /* "MD_PostProcess" */
    var MD_UI: String /* "MD_UI" */
    var MD_RuntimeVirtualTexture: String /* "MD_RuntimeVirtualTexture" */
    var MD_MAX: String /* "MD_MAX" */
}

external object EBlendMode {
    var BLEND_Opaque: String /* "BLEND_Opaque" */
    var BLEND_Masked: String /* "BLEND_Masked" */
    var BLEND_Translucent: String /* "BLEND_Translucent" */
    var BLEND_Additive: String /* "BLEND_Additive" */
    var BLEND_Modulate: String /* "BLEND_Modulate" */
    var BLEND_AlphaComposite: String /* "BLEND_AlphaComposite" */
    var BLEND_AlphaHoldout: String /* "BLEND_AlphaHoldout" */
    var BLEND_MAX: String /* "BLEND_MAX" */
}

external object EDecalBlendMode {
    var DBM_Translucent: String /* "DBM_Translucent" */
    var DBM_Stain: String /* "DBM_Stain" */
    var DBM_Normal: String /* "DBM_Normal" */
    var DBM_Emissive: String /* "DBM_Emissive" */
    var DBM_DBuffer_ColorNormalRoughness: String /* "DBM_DBuffer_ColorNormalRoughness" */
    var DBM_DBuffer_Color: String /* "DBM_DBuffer_Color" */
    var DBM_DBuffer_ColorNormal: String /* "DBM_DBuffer_ColorNormal" */
    var DBM_DBuffer_ColorRoughness: String /* "DBM_DBuffer_ColorRoughness" */
    var DBM_DBuffer_Normal: String /* "DBM_DBuffer_Normal" */
    var DBM_DBuffer_NormalRoughness: String /* "DBM_DBuffer_NormalRoughness" */
    var DBM_DBuffer_Roughness: String /* "DBM_DBuffer_Roughness" */
    var DBM_DBuffer_Emissive: String /* "DBM_DBuffer_Emissive" */
    var DBM_DBuffer_AlphaComposite: String /* "DBM_DBuffer_AlphaComposite" */
    var DBM_DBuffer_EmissiveAlphaComposite: String /* "DBM_DBuffer_EmissiveAlphaComposite" */
    var DBM_Volumetric_DistanceFunction: String /* "DBM_Volumetric_DistanceFunction" */
    var DBM_AlphaComposite: String /* "DBM_AlphaComposite" */
    var DBM_AmbientOcclusion: String /* "DBM_AmbientOcclusion" */
    var DBM_MAX: String /* "DBM_MAX" */
}

external object EMaterialDecalResponse {
    var MDR_None: String /* "MDR_None" */
    var MDR_ColorNormalRoughness: String /* "MDR_ColorNormalRoughness" */
    var MDR_Color: String /* "MDR_Color" */
    var MDR_ColorNormal: String /* "MDR_ColorNormal" */
    var MDR_ColorRoughness: String /* "MDR_ColorRoughness" */
    var MDR_Normal: String /* "MDR_Normal" */
    var MDR_NormalRoughness: String /* "MDR_NormalRoughness" */
    var MDR_Roughness: String /* "MDR_Roughness" */
    var MDR_MAX: String /* "MDR_MAX" */
}

external object EMaterialShadingModel {
    var MSM_Unlit: String /* "MSM_Unlit" */
    var MSM_DefaultLit: String /* "MSM_DefaultLit" */
    var MSM_Subsurface: String /* "MSM_Subsurface" */
    var MSM_PreintegratedSkin: String /* "MSM_PreintegratedSkin" */
    var MSM_ClearCoat: String /* "MSM_ClearCoat" */
    var MSM_SubsurfaceProfile: String /* "MSM_SubsurfaceProfile" */
    var MSM_TwoSidedFoliage: String /* "MSM_TwoSidedFoliage" */
    var MSM_Hair: String /* "MSM_Hair" */
    var MSM_Cloth: String /* "MSM_Cloth" */
    var MSM_Eye: String /* "MSM_Eye" */
    var MSM_NUM: String /* "MSM_NUM" */
    var MSM_FromMaterialExpression: String /* "MSM_FromMaterialExpression" */
    var MSM_MAX: String /* "MSM_MAX" */
}

external open class MaterialShadingModelField {
    open var ShadingModelField: Any
    open fun clone(): MaterialShadingModelField

    companion object {
        fun C(Other: UObject): MaterialShadingModelField
        fun C(Other: Any): MaterialShadingModelField
    }
}

external open class Vector2MaterialInput : MaterialInput {
    open var UseConstant: Boolean
    open var ConstantX: Number
    open var ConstantY: Number
    override fun clone(): Vector2MaterialInput

    companion object {
        fun C(Other: UObject): Vector2MaterialInput
        fun C(Other: Any): Vector2MaterialInput
    }
}

external open class ExpressionInput {
    open var Expression: MaterialExpression
    open var OutputIndex: Number
    open var InputName: String
    open var mask: Number
    open var MaskR: Number
    open var MaskG: Number
    open var MaskB: Number
    open var MaskA: Number
    open var ExpressionName: String
    open fun clone(): ExpressionInput

    companion object {
        fun C(Other: UObject): ExpressionInput
        fun C(Other: Any): ExpressionInput
    }
}

external open class MaterialAttributesInput : ExpressionInput {
    open var PropertyConnectedBitmask: Number
    override fun clone(): MaterialAttributesInput

    companion object {
        fun C(Other: UObject): MaterialAttributesInput
        fun C(Other: Any): MaterialAttributesInput
    }
}

external open class ShadingModelMaterialInput : MaterialInput {
    override fun clone(): ShadingModelMaterialInput

    companion object {
        fun C(Other: UObject): ShadingModelMaterialInput
        fun C(Other: Any): ShadingModelMaterialInput
    }
}

external object ETranslucencyLightingMode {
    var TLM_VolumetricNonDirectional: String /* "TLM_VolumetricNonDirectional" */
    var TLM_VolumetricDirectional: String /* "TLM_VolumetricDirectional" */
    var TLM_VolumetricPerVertexNonDirectional: String /* "TLM_VolumetricPerVertexNonDirectional" */
    var TLM_VolumetricPerVertexDirectional: String /* "TLM_VolumetricPerVertexDirectional" */
    var TLM_Surface: String /* "TLM_Surface" */
    var TLM_SurfacePerPixelLighting: String /* "TLM_SurfacePerPixelLighting" */
    var TLM_MAX: String /* "TLM_MAX" */
}

external object EMaterialTessellationMode {
    var MTM_NoTessellation: String /* "MTM_NoTessellation" */
    var MTM_FlatTessellation: String /* "MTM_FlatTessellation" */
    var MTM_PNTriangles: String /* "MTM_PNTriangles" */
    var MTM_MAX: String /* "MTM_MAX" */
}

external open class ParameterGroupData {
    open var GroupName: String
    open var GroupSortPriority: Number
    open fun clone(): ParameterGroupData

    companion object {
        fun C(Other: UObject): ParameterGroupData
        fun C(Other: Any): ParameterGroupData
    }
}

external open class MaterialFunctionInfo {
    open var StateId: Guid
    open var UFunction: MaterialFunctionInterface
    open fun clone(): MaterialFunctionInfo

    companion object {
        fun C(Other: UObject): MaterialFunctionInfo
        fun C(Other: Any): MaterialFunctionInfo
    }
}

external open class CollectionParameterBase {
    open var ParameterName: String
    open var ID: Guid
    open fun clone(): CollectionParameterBase

    companion object {
        fun C(Other: UObject): CollectionParameterBase
        fun C(Other: Any): CollectionParameterBase
    }
}

external open class CollectionScalarParameter : CollectionParameterBase {
    open var DefaultValue: Number
    override fun clone(): CollectionScalarParameter

    companion object {
        fun C(Other: UObject): CollectionScalarParameter
        fun C(Other: Any): CollectionScalarParameter
    }
}

external open class CollectionVectorParameter : CollectionParameterBase {
    open var DefaultValue: LinearColor
    override fun clone(): CollectionVectorParameter

    companion object {
        fun C(Other: UObject): CollectionVectorParameter
        fun C(Other: Any): CollectionVectorParameter
    }
}

external open class MaterialParameterCollection : UObject {
    constructor()
    constructor(Outer: UObject)
    open var StateId: Guid
    open var ScalarParameters: Array<CollectionScalarParameter>
    open var VectorParameters: Array<CollectionVectorParameter>

    companion object {
        fun Load(ResourceName: String): MaterialParameterCollection
        fun Find(Outer: UObject, ResourceName: String): MaterialParameterCollection
        fun GetDefaultObject(): MaterialParameterCollection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialParameterCollection
        fun C(Other: UObject): MaterialParameterCollection
        fun C(Other: Any): MaterialParameterCollection
    }
}

external open class MaterialParameterCollectionInfo {
    open var StateId: Guid
    open var ParameterCollection: MaterialParameterCollection
    open fun clone(): MaterialParameterCollectionInfo

    companion object {
        fun C(Other: UObject): MaterialParameterCollectionInfo
        fun C(Other: Any): MaterialParameterCollectionInfo
    }
}

external object EBlendableLocation {
    var BL_AfterTonemapping: String /* "BL_AfterTonemapping" */
    var BL_BeforeTonemapping: String /* "BL_BeforeTonemapping" */
    var BL_BeforeTranslucency: String /* "BL_BeforeTranslucency" */
    var BL_ReplacingTonemapper: String /* "BL_ReplacingTonemapper" */
    var BL_SSRInput: String /* "BL_SSRInput" */
    var BL_MAX: String /* "BL_MAX" */
}

external object EMaterialStencilCompare {
    var MSC_Less: String /* "MSC_Less" */
    var MSC_LessEqual: String /* "MSC_LessEqual" */
    var MSC_Greater: String /* "MSC_Greater" */
    var MSC_GreaterEqual: String /* "MSC_GreaterEqual" */
    var MSC_Equal: String /* "MSC_Equal" */
    var MSC_NotEqual: String /* "MSC_NotEqual" */
    var MSC_Never: String /* "MSC_Never" */
    var MSC_Always: String /* "MSC_Always" */
    var MSC_Count: String /* "MSC_Count" */
    var MSC_MAX: String /* "MSC_MAX" */
}

external object ERefractionMode {
    var RM_IndexOfRefraction: String /* "RM_IndexOfRefraction" */
    var RM_PixelNormalOffset: String /* "RM_PixelNormalOffset" */
    var RM_MAX: String /* "RM_MAX" */
}

external open class StreamableRenderAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ForceMipLevelsToBeResidentTimestamp: Any
    open var NumCinematicMipLevels: Number
    open var StreamingIndex: Number
    open var CachedCombinedLODBias: Number
    open var CachedNumResidentLODs: Number
    open var bCachedReadyForStreaming: Boolean
    open var NeverStream: Boolean
    open var bGlobalForceMipLevelsToBeResident: Boolean
    open var bIsStreamable: Boolean
    open var bHasStreamingUpdatePending: Boolean
    open var bForceMiplevelsToBeResident: Boolean
    open var bIgnoreStreamingMipBias: Boolean
    open var bUseCinematicMipLevels: Boolean

    companion object {
        fun Load(ResourceName: String): StreamableRenderAsset
        fun Find(Outer: UObject, ResourceName: String): StreamableRenderAsset
        fun GetDefaultObject(): StreamableRenderAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StreamableRenderAsset
        fun C(Other: UObject): StreamableRenderAsset
        fun C(Other: Any): StreamableRenderAsset
    }
}

external object ETextureSourceFormat {
    var TSF_Invalid: String /* "TSF_Invalid" */
    var TSF_G8: String /* "TSF_G8" */
    var TSF_BGRA8: String /* "TSF_BGRA8" */
    var TSF_BGRE8: String /* "TSF_BGRE8" */
    var TSF_RGBA16: String /* "TSF_RGBA16" */
    var TSF_RGBA16F: String /* "TSF_RGBA16F" */
    var TSF_RGBA8: String /* "TSF_RGBA8" */
    var TSF_RGBE8: String /* "TSF_RGBE8" */
    var TSF_MAX: String /* "TSF_MAX" */
}

external open class TextureSourceBlock {
    open var BlockX: Number
    open var BlockY: Number
    open var SizeX: Number
    open var SizeY: Number
    open var NumSlices: Number
    open var NumMips: Number
    open fun clone(): TextureSourceBlock

    companion object {
        fun C(Other: UObject): TextureSourceBlock
        fun C(Other: Any): TextureSourceBlock
    }
}

external open class TextureSource {
    open var ID: Guid
    open var BaseBlockX: Number
    open var BaseBlockY: Number
    open var SizeX: Number
    open var SizeY: Number
    open var NumSlices: Number
    open var NumMips: Number
    open var NumLayers: Number
    open var bPNGCompressed: Boolean
    open var bGuidIsHash: Boolean
    open var Format: String /* "TSF_Invalid" | "TSF_G8" | "TSF_BGRA8" | "TSF_BGRE8" | "TSF_RGBA16" | "TSF_RGBA16F" | "TSF_RGBA8" | "TSF_RGBE8" | "TSF_MAX" */
    open var LayerFormat: Array<String /* "TSF_Invalid" | "TSF_G8" | "TSF_BGRA8" | "TSF_BGRE8" | "TSF_RGBA16" | "TSF_RGBA16F" | "TSF_RGBA8" | "TSF_RGBE8" | "TSF_MAX" */>
    open var Blocks: Array<TextureSourceBlock>
    open fun clone(): TextureSource

    companion object {
        fun C(Other: UObject): TextureSource
        fun C(Other: Any): TextureSource
    }
}

external object ETextureLossyCompressionAmount {
    var TLCA_Default: String /* "TLCA_Default" */
    var TLCA_None: String /* "TLCA_None" */
    var TLCA_Lowest: String /* "TLCA_Lowest" */
    var TLCA_Low: String /* "TLCA_Low" */
    var TLCA_Medium: String /* "TLCA_Medium" */
    var TLCA_High: String /* "TLCA_High" */
    var TLCA_Highest: String /* "TLCA_Highest" */
    var TLCA_MAX: String /* "TLCA_MAX" */
}

external object ETextureCompressionQuality {
    var TCQ_Default: String /* "TCQ_Default" */
    var TCQ_Lowest: String /* "TCQ_Lowest" */
    var TCQ_Low: String /* "TCQ_Low" */
    var TCQ_Medium: String /* "TCQ_Medium" */
    var TCQ_High: String /* "TCQ_High" */
    var TCQ_Highest: String /* "TCQ_Highest" */
    var TCQ_MAX: String /* "TCQ_MAX" */
}

external interface `T$252` {
    var X: Number
    var Y: Number
    var Z: Number
    var W: Number
}

external interface `T$253` {
    var A: Vector4
}

external open class Vector4 {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open var W: Number
    open fun clone(): Vector4
    open fun Add_Vector4Vector4(B: Vector4): Vector4
    open fun BreakVector4(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$252`
    open fun Conv_Vector4ToQuaterion(): Quat
    open fun Conv_Vector4ToRotator(): Rotator
    open fun Conv_Vector4ToVector(): Vector
    open fun Divide_Vector4Vector4(B: Vector4): Vector4
    open fun EqualEqual_Vector4Vector4(B: Vector4, ErrorTolerance: Number): Boolean
    open fun EqualExactly_Vector4Vector4(B: Vector4): Boolean
    open fun Multiply_Vector4Vector4(B: Vector4): Vector4
    open fun NotEqual_Vector4Vector4(B: Vector4, ErrorTolerance: Number): Boolean
    open fun NotEqualExactly_Vector4Vector4(B: Vector4): Boolean
    open fun Subtract_Vector4Vector4(B: Vector4): Vector4
    open fun Vector4_Assign(InVector: Vector4 = definedExternally): `T$253`
    open fun Vector4_CrossProduct3(B: Vector4): Vector4
    open fun Vector4_DotProduct(B: Vector4): Number
    open fun Vector4_DotProduct3(B: Vector4): Number
    open fun Vector4_IsNAN(): Boolean
    open fun Vector4_IsNearlyZero3(Tolerance: Number): Boolean
    open fun Vector4_IsNormal3(): Boolean
    open fun Vector4_IsUnit3(SquaredLenthTolerance: Number): Boolean
    open fun Vector4_IsZero(): Boolean
    open fun Vector4_MirrorByVector3(SurfaceNormal: Vector4): Vector4
    open fun Vector4_Negated(): Vector4
    open fun Vector4_Normal3(Tolerance: Number): Vector4
    open fun Vector4_Normalize3(Tolerance: Number = definedExternally): `T$253`
    open fun Vector4_NormalUnsafe3(): Vector4
    open fun Vector4_Set(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$253`
    open fun Vector4_Size(): Number
    open fun Vector4_Size3(): Number
    open fun Vector4_SizeSquared(): Number
    open fun Vector4_SizeSquared3(): Number

    companion object {
        fun C(Other: UObject): Vector4
        fun C(Other: Any): Vector4
        fun Add_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun BreakVector4(InVec: Vector4, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$252`
        fun Conv_Vector4ToQuaterion(InVec: Vector4): Quat
        fun Conv_Vector4ToRotator(InVec: Vector4): Rotator
        fun Conv_Vector4ToVector(InVector4: Vector4): Vector
        fun Divide_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun EqualEqual_Vector4Vector4(A: Vector4, B: Vector4, ErrorTolerance: Number): Boolean
        fun EqualExactly_Vector4Vector4(A: Vector4, B: Vector4): Boolean
        fun Multiply_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun NotEqual_Vector4Vector4(A: Vector4, B: Vector4, ErrorTolerance: Number): Boolean
        fun NotEqualExactly_Vector4Vector4(A: Vector4, B: Vector4): Boolean
        fun Subtract_Vector4Vector4(A: Vector4, B: Vector4): Vector4
        fun Vector4_Assign(A: Vector4 = definedExternally, InVector: Vector4 = definedExternally): `T$253`
        fun Vector4_CrossProduct3(A: Vector4, B: Vector4): Vector4
        fun Vector4_DotProduct(A: Vector4, B: Vector4): Number
        fun Vector4_DotProduct3(A: Vector4, B: Vector4): Number
        fun Vector4_IsNAN(A: Vector4): Boolean
        fun Vector4_IsNearlyZero3(A: Vector4, Tolerance: Number): Boolean
        fun Vector4_IsNormal3(A: Vector4): Boolean
        fun Vector4_IsUnit3(A: Vector4, SquaredLenthTolerance: Number): Boolean
        fun Vector4_IsZero(A: Vector4): Boolean
        fun Vector4_MirrorByVector3(Direction: Vector4, SurfaceNormal: Vector4): Vector4
        fun Vector4_Negated(A: Vector4): Vector4
        fun Vector4_Normal3(A: Vector4, Tolerance: Number): Vector4
        fun Vector4_Normalize3(A: Vector4 = definedExternally, Tolerance: Number = definedExternally): `T$253`
        fun Vector4_NormalUnsafe3(A: Vector4): Vector4
        fun Vector4_Set(A: Vector4 = definedExternally, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally, W: Number = definedExternally): `T$253`
        fun Vector4_Size(A: Vector4): Number
        fun Vector4_Size3(A: Vector4): Number
        fun Vector4_SizeSquared(A: Vector4): Number
        fun Vector4_SizeSquared3(A: Vector4): Number
        fun MakeVector4(X: Number, Y: Number, Z: Number, W: Number): Vector4
        fun Vector4_Zero(): Vector4
    }
}

external object ETexturePowerOfTwoSetting {
    var None: String /* "None" */
    var PadToPowerOfTwo: String /* "PadToPowerOfTwo" */
    var PadToSquarePowerOfTwo: String /* "PadToSquarePowerOfTwo" */
    var ETexturePowerOfTwoSetting_MAX: String /* "ETexturePowerOfTwoSetting_MAX" */
}

external object TextureMipGenSettings {
    var TMGS_FromTextureGroup: String /* "TMGS_FromTextureGroup" */
    var TMGS_SimpleAverage: String /* "TMGS_SimpleAverage" */
    var TMGS_Sharpen0: String /* "TMGS_Sharpen0" */
    var TMGS_Sharpen1: String /* "TMGS_Sharpen1" */
    var TMGS_Sharpen2: String /* "TMGS_Sharpen2" */
    var TMGS_Sharpen3: String /* "TMGS_Sharpen3" */
    var TMGS_Sharpen4: String /* "TMGS_Sharpen4" */
    var TMGS_Sharpen5: String /* "TMGS_Sharpen5" */
    var TMGS_Sharpen6: String /* "TMGS_Sharpen6" */
    var TMGS_Sharpen7: String /* "TMGS_Sharpen7" */
    var TMGS_Sharpen8: String /* "TMGS_Sharpen8" */
    var TMGS_Sharpen9: String /* "TMGS_Sharpen9" */
    var TMGS_Sharpen10: String /* "TMGS_Sharpen10" */
    var TMGS_NoMipmaps: String /* "TMGS_NoMipmaps" */
    var TMGS_LeaveExistingMips: String /* "TMGS_LeaveExistingMips" */
    var TMGS_Blur1: String /* "TMGS_Blur1" */
    var TMGS_Blur2: String /* "TMGS_Blur2" */
    var TMGS_Blur3: String /* "TMGS_Blur3" */
    var TMGS_Blur4: String /* "TMGS_Blur4" */
    var TMGS_Blur5: String /* "TMGS_Blur5" */
    var TMGS_Unfiltered: String /* "TMGS_Unfiltered" */
    var TMGS_MAX: String /* "TMGS_MAX" */
}

external object ECompositeTextureMode {
    var CTM_Disabled: String /* "CTM_Disabled" */
    var CTM_NormalRoughnessToRed: String /* "CTM_NormalRoughnessToRed" */
    var CTM_NormalRoughnessToGreen: String /* "CTM_NormalRoughnessToGreen" */
    var CTM_NormalRoughnessToBlue: String /* "CTM_NormalRoughnessToBlue" */
    var CTM_NormalRoughnessToAlpha: String /* "CTM_NormalRoughnessToAlpha" */
    var CTM_MAX: String /* "CTM_MAX" */
}

external object TextureCompressionSettings {
    var TC_Default: String /* "TC_Default" */
    var TC_Normalmap: String /* "TC_Normalmap" */
    var TC_Masks: String /* "TC_Masks" */
    var TC_Grayscale: String /* "TC_Grayscale" */
    var TC_Displacementmap: String /* "TC_Displacementmap" */
    var TC_VectorDisplacementmap: String /* "TC_VectorDisplacementmap" */
    var TC_HDR: String /* "TC_HDR" */
    var TC_EditorIcon: String /* "TC_EditorIcon" */
    var TC_Alpha: String /* "TC_Alpha" */
    var TC_DistanceFieldFont: String /* "TC_DistanceFieldFont" */
    var TC_HDR_Compressed: String /* "TC_HDR_Compressed" */
    var TC_BC7: String /* "TC_BC7" */
    var TC_MAX: String /* "TC_MAX" */
}

external open class TextureFormatSettings {
    open var CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_MAX" */
    open var CompressionNoAlpha: Boolean
    open var CompressionNone: Boolean
    open var sRGB: Boolean
    open fun clone(): TextureFormatSettings

    companion object {
        fun C(Other: UObject): TextureFormatSettings
        fun C(Other: Any): TextureFormatSettings
    }
}

external object TextureFilter {
    var TF_Nearest: String /* "TF_Nearest" */
    var TF_Bilinear: String /* "TF_Bilinear" */
    var TF_Trilinear: String /* "TF_Trilinear" */
    var TF_Default: String /* "TF_Default" */
    var TF_MAX: String /* "TF_MAX" */
}

external object ETextureMipLoadOptions {
    var Default: String /* "Default" */
    var AllMips: String /* "AllMips" */
    var OnlyFirstMip: String /* "OnlyFirstMip" */
    var ETextureMipLoadOptions_MAX: String /* "ETextureMipLoadOptions_MAX" */
}

external object TextureGroup {
    var TEXTUREGROUP_World: String /* "TEXTUREGROUP_World" */
    var TEXTUREGROUP_WorldNormalMap: String /* "TEXTUREGROUP_WorldNormalMap" */
    var TEXTUREGROUP_WorldSpecular: String /* "TEXTUREGROUP_WorldSpecular" */
    var TEXTUREGROUP_Character: String /* "TEXTUREGROUP_Character" */
    var TEXTUREGROUP_CharacterNormalMap: String /* "TEXTUREGROUP_CharacterNormalMap" */
    var TEXTUREGROUP_CharacterSpecular: String /* "TEXTUREGROUP_CharacterSpecular" */
    var TEXTUREGROUP_Weapon: String /* "TEXTUREGROUP_Weapon" */
    var TEXTUREGROUP_WeaponNormalMap: String /* "TEXTUREGROUP_WeaponNormalMap" */
    var TEXTUREGROUP_WeaponSpecular: String /* "TEXTUREGROUP_WeaponSpecular" */
    var TEXTUREGROUP_Vehicle: String /* "TEXTUREGROUP_Vehicle" */
    var TEXTUREGROUP_VehicleNormalMap: String /* "TEXTUREGROUP_VehicleNormalMap" */
    var TEXTUREGROUP_VehicleSpecular: String /* "TEXTUREGROUP_VehicleSpecular" */
    var TEXTUREGROUP_Cinematic: String /* "TEXTUREGROUP_Cinematic" */
    var TEXTUREGROUP_Effects: String /* "TEXTUREGROUP_Effects" */
    var TEXTUREGROUP_EffectsNotFiltered: String /* "TEXTUREGROUP_EffectsNotFiltered" */
    var TEXTUREGROUP_Skybox: String /* "TEXTUREGROUP_Skybox" */
    var TEXTUREGROUP_UI: String /* "TEXTUREGROUP_UI" */
    var TEXTUREGROUP_Lightmap: String /* "TEXTUREGROUP_Lightmap" */
    var TEXTUREGROUP_RenderTarget: String /* "TEXTUREGROUP_RenderTarget" */
    var TEXTUREGROUP_MobileFlattened: String /* "TEXTUREGROUP_MobileFlattened" */
    var TEXTUREGROUP_ProcBuilding_Face: String /* "TEXTUREGROUP_ProcBuilding_Face" */
    var TEXTUREGROUP_ProcBuilding_LightMap: String /* "TEXTUREGROUP_ProcBuilding_LightMap" */
    var TEXTUREGROUP_Shadowmap: String /* "TEXTUREGROUP_Shadowmap" */
    var TEXTUREGROUP_ColorLookupTable: String /* "TEXTUREGROUP_ColorLookupTable" */
    var TEXTUREGROUP_Terrain_Heightmap: String /* "TEXTUREGROUP_Terrain_Heightmap" */
    var TEXTUREGROUP_Terrain_Weightmap: String /* "TEXTUREGROUP_Terrain_Weightmap" */
    var TEXTUREGROUP_Bokeh: String /* "TEXTUREGROUP_Bokeh" */
    var TEXTUREGROUP_IESLightProfile: String /* "TEXTUREGROUP_IESLightProfile" */
    var TEXTUREGROUP_Pixels2D: String /* "TEXTUREGROUP_Pixels2D" */
    var TEXTUREGROUP_HierarchicalLOD: String /* "TEXTUREGROUP_HierarchicalLOD" */
    var TEXTUREGROUP_Impostor: String /* "TEXTUREGROUP_Impostor" */
    var TEXTUREGROUP_ImpostorNormalDepth: String /* "TEXTUREGROUP_ImpostorNormalDepth" */
    var TEXTUREGROUP_8BitData: String /* "TEXTUREGROUP_8BitData" */
    var TEXTUREGROUP_16BitData: String /* "TEXTUREGROUP_16BitData" */
    var TEXTUREGROUP_Project01: String /* "TEXTUREGROUP_Project01" */
    var TEXTUREGROUP_Project02: String /* "TEXTUREGROUP_Project02" */
    var TEXTUREGROUP_Project03: String /* "TEXTUREGROUP_Project03" */
    var TEXTUREGROUP_Project04: String /* "TEXTUREGROUP_Project04" */
    var TEXTUREGROUP_Project05: String /* "TEXTUREGROUP_Project05" */
    var TEXTUREGROUP_Project06: String /* "TEXTUREGROUP_Project06" */
    var TEXTUREGROUP_Project07: String /* "TEXTUREGROUP_Project07" */
    var TEXTUREGROUP_Project08: String /* "TEXTUREGROUP_Project08" */
    var TEXTUREGROUP_Project09: String /* "TEXTUREGROUP_Project09" */
    var TEXTUREGROUP_Project10: String /* "TEXTUREGROUP_Project10" */
    var TEXTUREGROUP_MAX: String /* "TEXTUREGROUP_MAX" */
}

external object EDesiredImageFormat {
    var PNG: String /* "PNG" */
    var JPG: String /* "JPG" */
    var BMP: String /* "BMP" */
    var EXR: String /* "EXR" */
    var EDesiredImageFormat_MAX: String /* "EDesiredImageFormat_MAX" */
}

external open class ImageWriteOptions {
    open var Format: String /* "PNG" | "JPG" | "BMP" | "EXR" | "EDesiredImageFormat_MAX" */
    open var OnComplete: UnrealEngineDelegate<(bSuccess: Boolean) -> Unit>
    open var CompressionQuality: Number
    open var bOverwriteFile: Boolean
    open var bAsync: Boolean
    open fun clone(): ImageWriteOptions

    companion object {
        fun C(Other: UObject): ImageWriteOptions
        fun C(Other: Any): ImageWriteOptions
    }
}

external open class Texture : StreamableRenderAsset {
    constructor()
    constructor(Outer: UObject)
    open var Source: TextureSource
    open var LightingGuid: Guid
    open var SourceFilePath: String
    open var AssetImportData: AssetImportData
    open var AdjustBrightness: Number
    open var AdjustBrightnessCurve: Number
    open var AdjustVibrance: Number
    open var AdjustSaturation: Number
    open var AdjustRGBCurve: Number
    open var AdjustHue: Number
    open var AdjustMinAlpha: Number
    open var AdjustMaxAlpha: Number
    open var CompressionNoAlpha: Boolean
    open var CompressionNone: Boolean
    open var DeferCompression: Boolean
    open var LossyCompressionAmount: String /* "TLCA_Default" | "TLCA_None" | "TLCA_Lowest" | "TLCA_Low" | "TLCA_Medium" | "TLCA_High" | "TLCA_Highest" | "TLCA_MAX" */
    open var MaxTextureSize: Number
    open var CompressionQuality: String /* "TCQ_Default" | "TCQ_Lowest" | "TCQ_Low" | "TCQ_Medium" | "TCQ_High" | "TCQ_Highest" | "TCQ_MAX" */
    open var bDitherMipMapAlpha: Boolean
    open var AlphaCoverageThresholds: Vector4
    open var bPreserveBorder: Boolean
    open var bFlipGreenChannel: Boolean
    open var bForcePVRTC4: Boolean
    open var PowerOfTwoMode: String /* "None" | "PadToPowerOfTwo" | "PadToSquarePowerOfTwo" | "ETexturePowerOfTwoSetting_MAX" */
    open var PaddingColor: Color
    open var bChromaKeyTexture: Boolean
    open var ChromaKeyThreshold: Number
    open var ChromaKeyColor: Color
    open var MipGenSettings: String /* "TMGS_FromTextureGroup" | "TMGS_SimpleAverage" | "TMGS_Sharpen0" | "TMGS_Sharpen1" | "TMGS_Sharpen2" | "TMGS_Sharpen3" | "TMGS_Sharpen4" | "TMGS_Sharpen5" | "TMGS_Sharpen6" | "TMGS_Sharpen7" | "TMGS_Sharpen8" | "TMGS_Sharpen9" | "TMGS_Sharpen10" | "TMGS_NoMipmaps" | "TMGS_LeaveExistingMips" | "TMGS_Blur1" | "TMGS_Blur2" | "TMGS_Blur3" | "TMGS_Blur4" | "TMGS_Blur5" | "TMGS_Unfiltered" | "TMGS_MAX" */
    open var CompositeTexture: Texture
    open var CompositeTextureMode: String /* "CTM_Disabled" | "CTM_NormalRoughnessToRed" | "CTM_NormalRoughnessToGreen" | "CTM_NormalRoughnessToBlue" | "CTM_NormalRoughnessToAlpha" | "CTM_MAX" */
    open var CompositePower: Number
    open var LayerFormatSettings: Array<TextureFormatSettings>
    open var LODBias: Number
    open var CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_MAX" */
    open var Filter: String /* "TF_Nearest" | "TF_Bilinear" | "TF_Trilinear" | "TF_Default" | "TF_MAX" */
    open var MipLoadOptions: String /* "Default" | "AllMips" | "OnlyFirstMip" | "ETextureMipLoadOptions_MAX" */
    open var LODGroup: String /* "TEXTUREGROUP_World" | "TEXTUREGROUP_WorldNormalMap" | "TEXTUREGROUP_WorldSpecular" | "TEXTUREGROUP_Character" | "TEXTUREGROUP_CharacterNormalMap" | "TEXTUREGROUP_CharacterSpecular" | "TEXTUREGROUP_Weapon" | "TEXTUREGROUP_WeaponNormalMap" | "TEXTUREGROUP_WeaponSpecular" | "TEXTUREGROUP_Vehicle" | "TEXTUREGROUP_VehicleNormalMap" | "TEXTUREGROUP_VehicleSpecular" | "TEXTUREGROUP_Cinematic" | "TEXTUREGROUP_Effects" | "TEXTUREGROUP_EffectsNotFiltered" | "TEXTUREGROUP_Skybox" | "TEXTUREGROUP_UI" | "TEXTUREGROUP_Lightmap" | "TEXTUREGROUP_RenderTarget" | "TEXTUREGROUP_MobileFlattened" | "TEXTUREGROUP_ProcBuilding_Face" | "TEXTUREGROUP_ProcBuilding_LightMap" | "TEXTUREGROUP_Shadowmap" | "TEXTUREGROUP_ColorLookupTable" | "TEXTUREGROUP_Terrain_Heightmap" | "TEXTUREGROUP_Terrain_Weightmap" | "TEXTUREGROUP_Bokeh" | "TEXTUREGROUP_IESLightProfile" | "TEXTUREGROUP_Pixels2D" | "TEXTUREGROUP_HierarchicalLOD" | "TEXTUREGROUP_Impostor" | "TEXTUREGROUP_ImpostorNormalDepth" | "TEXTUREGROUP_8BitData" | "TEXTUREGROUP_16BitData" | "TEXTUREGROUP_Project01" | "TEXTUREGROUP_Project02" | "TEXTUREGROUP_Project03" | "TEXTUREGROUP_Project04" | "TEXTUREGROUP_Project05" | "TEXTUREGROUP_Project06" | "TEXTUREGROUP_Project07" | "TEXTUREGROUP_Project08" | "TEXTUREGROUP_Project09" | "TEXTUREGROUP_Project10" | "TEXTUREGROUP_MAX" */
    open var sRGB: Boolean
    open var bUseLegacyGamma: Boolean
    open var bNoTiling: Boolean
    open var VirtualTextureStreaming: Boolean
    open var bAsyncResourceReleaseHasBeenStarted: Boolean
    open var AssetUserData: Array<AssetUserData>
    open fun SetSplashScreen(Scale: Vector2D, Offset: Vector, bShowLoadingMovie: Boolean, bShowOnSet: Boolean)
    open fun ExportToDisk(Filename: String, Options: ImageWriteOptions)
    open fun SetSpectatorScreenTexture()

    companion object {
        fun Load(ResourceName: String): Texture
        fun Find(Outer: UObject, ResourceName: String): Texture
        fun GetDefaultObject(): Texture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Texture
        fun C(Other: UObject): Texture
        fun C(Other: Any): Texture
        fun SetSplashScreen(Texture: Texture, Scale: Vector2D, Offset: Vector, bShowLoadingMovie: Boolean, bShowOnSet: Boolean)
        fun ExportToDisk(Texture: Texture, Filename: String, Options: ImageWriteOptions)
        fun SetSpectatorScreenTexture(InTexture: Texture)
    }
}

external object EMaterialUsage {
    var MATUSAGE_SkeletalMesh: String /* "MATUSAGE_SkeletalMesh" */
    var MATUSAGE_ParticleSprites: String /* "MATUSAGE_ParticleSprites" */
    var MATUSAGE_BeamTrails: String /* "MATUSAGE_BeamTrails" */
    var MATUSAGE_MeshParticles: String /* "MATUSAGE_MeshParticles" */
    var MATUSAGE_StaticLighting: String /* "MATUSAGE_StaticLighting" */
    var MATUSAGE_MorphTargets: String /* "MATUSAGE_MorphTargets" */
    var MATUSAGE_SplineMesh: String /* "MATUSAGE_SplineMesh" */
    var MATUSAGE_InstancedStaticMeshes: String /* "MATUSAGE_InstancedStaticMeshes" */
    var MATUSAGE_GeometryCollections: String /* "MATUSAGE_GeometryCollections" */
    var MATUSAGE_Clothing: String /* "MATUSAGE_Clothing" */
    var MATUSAGE_NiagaraSprites: String /* "MATUSAGE_NiagaraSprites" */
    var MATUSAGE_NiagaraRibbons: String /* "MATUSAGE_NiagaraRibbons" */
    var MATUSAGE_NiagaraMeshParticles: String /* "MATUSAGE_NiagaraMeshParticles" */
    var MATUSAGE_GeometryCache: String /* "MATUSAGE_GeometryCache" */
    var MATUSAGE_MAX: String /* "MATUSAGE_MAX" */
}

external interface `T$254` {
    var bNeedsRecompile: Boolean
    var `$`: Boolean
}

external open class Material : MaterialInterface {
    constructor()
    constructor(Outer: UObject)
    open var PhysMaterial: PhysicalMaterial
    open var DiffuseColor: ColorMaterialInput
    open var SpecularColor: ColorMaterialInput
    open var BaseColor: ColorMaterialInput
    open var Metallic: ScalarMaterialInput
    open var Specular: ScalarMaterialInput
    open var Roughness: ScalarMaterialInput
    open var Normal: VectorMaterialInput
    open var EmissiveColor: ColorMaterialInput
    open var Opacity: ScalarMaterialInput
    open var OpacityMask: ScalarMaterialInput
    open var MaterialDomain: String /* "MD_Surface" | "MD_DeferredDecal" | "MD_LightFunction" | "MD_Volume" | "MD_PostProcess" | "MD_UI" | "MD_RuntimeVirtualTexture" | "MD_MAX" */
    open var BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var DecalBlendMode: String /* "DBM_Translucent" | "DBM_Stain" | "DBM_Normal" | "DBM_Emissive" | "DBM_DBuffer_ColorNormalRoughness" | "DBM_DBuffer_Color" | "DBM_DBuffer_ColorNormal" | "DBM_DBuffer_ColorRoughness" | "DBM_DBuffer_Normal" | "DBM_DBuffer_NormalRoughness" | "DBM_DBuffer_Roughness" | "DBM_DBuffer_Emissive" | "DBM_DBuffer_AlphaComposite" | "DBM_DBuffer_EmissiveAlphaComposite" | "DBM_Volumetric_DistanceFunction" | "DBM_AlphaComposite" | "DBM_AmbientOcclusion" | "DBM_MAX" */
    open var MaterialDecalResponse: String /* "MDR_None" | "MDR_ColorNormalRoughness" | "MDR_Color" | "MDR_ColorNormal" | "MDR_ColorRoughness" | "MDR_Normal" | "MDR_NormalRoughness" | "MDR_Roughness" | "MDR_MAX" */
    open var ShadingModel: String /* "MSM_Unlit" | "MSM_DefaultLit" | "MSM_Subsurface" | "MSM_PreintegratedSkin" | "MSM_ClearCoat" | "MSM_SubsurfaceProfile" | "MSM_TwoSidedFoliage" | "MSM_Hair" | "MSM_Cloth" | "MSM_Eye" | "MSM_NUM" | "MSM_FromMaterialExpression" | "MSM_MAX" */
    open var ShadingModels: MaterialShadingModelField
    open var UsedShadingModels: String
    open var OpacityMaskClipValue: Number
    open var bCastDynamicShadowAsMasked: Boolean
    open var WorldPositionOffset: VectorMaterialInput
    open var WorldDisplacement: VectorMaterialInput
    open var TessellationMultiplier: ScalarMaterialInput
    open var SubsurfaceColor: ColorMaterialInput
    open var ClearCoat: ScalarMaterialInput
    open var ClearCoatRoughness: ScalarMaterialInput
    open var AmbientOcclusion: ScalarMaterialInput
    open var Refraction: ScalarMaterialInput
    open var CustomizedUVs: Vector2MaterialInput
    open var MaterialAttributes: MaterialAttributesInput
    open var PixelDepthOffset: ScalarMaterialInput
    open var ShadingModelFromMaterialExpression: ShadingModelMaterialInput
    open var bEnableSeparateTranslucency: Boolean
    open var bEnableMobileSeparateTranslucency: Boolean
    open var bEnableResponsiveAA: Boolean
    open var bScreenSpaceReflections: Boolean
    open var bContactShadows: Boolean
    open var TwoSided: Boolean
    open var DitheredLODTransition: Boolean
    open var DitherOpacityMask: Boolean
    open var bAllowNegativeEmissiveColor: Boolean
    open var NumCustomizedUVs: Number
    open var TranslucencyLightingMode: String /* "TLM_VolumetricNonDirectional" | "TLM_VolumetricDirectional" | "TLM_VolumetricPerVertexNonDirectional" | "TLM_VolumetricPerVertexDirectional" | "TLM_Surface" | "TLM_SurfacePerPixelLighting" | "TLM_MAX" */
    open var TranslucencyDirectionalLightingIntensity: Number
    open var AllowTranslucentCustomDepthWrites: Boolean
    open var TranslucentShadowDensityScale: Number
    open var TranslucentSelfShadowDensityScale: Number
    open var TranslucentSelfShadowSecondDensityScale: Number
    open var TranslucentSelfShadowSecondOpacity: Number
    open var TranslucentBackscatteringExponent: Number
    open var TranslucentMultipleScatteringExtinction: LinearColor
    open var TranslucentShadowStartOffset: Number
    open var bDisableDepthTest: Boolean
    open var bWriteOnlyAlpha: Boolean
    open var bGenerateSphericalParticleNormals: Boolean
    open var bTangentSpaceNormal: Boolean
    open var bUseEmissiveForDynamicAreaLighting: Boolean
    open var bBlockGI: Boolean
    open var bUsedAsSpecialEngineMaterial: Boolean
    open var bUsedWithSkeletalMesh: Boolean
    open var bUsedWithEditorCompositing: Boolean
    open var bUsedWithParticleSprites: Boolean
    open var bUsedWithBeamTrails: Boolean
    open var bUsedWithMeshParticles: Boolean
    open var bUsedWithNiagaraSprites: Boolean
    open var bUsedWithNiagaraRibbons: Boolean
    open var bUsedWithNiagaraMeshParticles: Boolean
    open var bUsedWithGeometryCache: Boolean
    open var bUsedWithStaticLighting: Boolean
    open var bUsedWithMorphTargets: Boolean
    open var bUsedWithSplineMeshes: Boolean
    open var bUsedWithInstancedStaticMeshes: Boolean
    open var bUsedWithGeometryCollections: Boolean
    open var bUsesDistortion: Boolean
    open var bUsedWithClothing: Boolean
    open var bUsedWithUI: Boolean
    open var bAutomaticallySetUsageInEditor: Boolean
    open var bFullyRough: Boolean
    open var bUseFullPrecision: Boolean
    open var bUseLightmapDirectionality: Boolean
    open var bUseHQForwardReflections: Boolean
    open var bUsePlanarForwardReflections: Boolean
    open var bNormalCurvatureToRoughness: Boolean
    open var D3D11TessellationMode: String /* "MTM_NoTessellation" | "MTM_FlatTessellation" | "MTM_PNTriangles" | "MTM_MAX" */
    open var bEnableCrackFreeDisplacement: Boolean
    open var bEnableAdaptiveTessellation: Boolean
    open var MaxDisplacement: Number
    open var Wireframe: Boolean
    open var bOutputVelocityOnBasePass: Boolean
    open var EditorX: Number
    open var EditorY: Number
    open var EditorPitch: Number
    open var EditorYaw: Number
    open var Expressions: Array<MaterialExpression>
    open var EditorComments: Array<MaterialExpressionComment>
    open var ParameterGroupData: Array<ParameterGroupData>
    open var MaterialFunctionInfos: Array<MaterialFunctionInfo>
    open var MaterialParameterCollectionInfos: Array<MaterialParameterCollectionInfo>
    open var bCanMaskedBeAssumedOpaque: Boolean
    open var bIsMasked: Boolean
    open var bIsPreviewMaterial: Boolean
    open var bIsFunctionPreviewMaterial: Boolean
    open var bUseMaterialAttributes: Boolean
    open var bCastRayTracedShadows: Boolean
    open var bUseTranslucencyVertexFog: Boolean
    open var bComputeFogPerPixel: Boolean
    open var bOutputTranslucentVelocity: Boolean
    open var bAllowDevelopmentShaderCompile: Boolean
    open var bIsMaterialEditorStatsMaterial: Boolean
    open var UsageFlagWarnings: Any
    open var BlendableLocation: String /* "BL_AfterTonemapping" | "BL_BeforeTonemapping" | "BL_BeforeTranslucency" | "BL_ReplacingTonemapper" | "BL_SSRInput" | "BL_MAX" */
    open var BlendablePriority: Number
    open var BlendableOutputAlpha: Boolean
    open var bEnableStencilTest: Boolean
    open var StencilCompare: String /* "MSC_Less" | "MSC_LessEqual" | "MSC_Greater" | "MSC_GreaterEqual" | "MSC_Equal" | "MSC_NotEqual" | "MSC_Never" | "MSC_Always" | "MSC_Count" | "MSC_MAX" */
    open var StencilRefValue: Number
    open var RefractionMode: String /* "RM_IndexOfRefraction" | "RM_PixelNormalOffset" | "RM_MAX" */
    open var RefractionDepthBias: Number
    open var StateId: Guid
    open var CachedQualityLevelsUsed: Array<Boolean>
    open var ExpressionTextureReferences: Array<UObject>
    open var ReferencedTextureGuids: Array<Guid>
    open fun CreateMaterialExpression(ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
    open fun DeleteAllMaterialExpressions()
    open fun DeleteMaterialExpression(Expression: MaterialExpression)
    open fun GetMaterialDefaultScalarParameterValue(ParameterName: String): Number
    open fun GetMaterialDefaultStaticSwitchParameterValue(ParameterName: String): Boolean
    open fun GetMaterialDefaultTextureParameterValue(ParameterName: String): Texture
    open fun GetMaterialDefaultVectorParameterValue(ParameterName: String): LinearColor
    open fun GetNumMaterialExpressions(): Number
    open fun HasMaterialUsage(Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_MAX" */): Boolean
    open fun LayoutMaterialExpressions()
    open fun RecompileMaterial()
    open fun SetMaterialUsage(Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_MAX" */, bNeedsRecompile: Boolean = definedExternally): `T$254`

    companion object {
        fun Load(ResourceName: String): Material
        fun Find(Outer: UObject, ResourceName: String): Material
        fun GetDefaultObject(): Material
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Material
        fun C(Other: UObject): Material
        fun C(Other: Any): Material
        fun CreateMaterialExpression(Material: Material, ExpressionClass: UnrealEngineClass, NodePosX: Number, NodePosY: Number): MaterialExpression
        fun DeleteAllMaterialExpressions(Material: Material)
        fun DeleteMaterialExpression(Material: Material, Expression: MaterialExpression)
        fun GetMaterialDefaultScalarParameterValue(Material: Material, ParameterName: String): Number
        fun GetMaterialDefaultStaticSwitchParameterValue(Material: Material, ParameterName: String): Boolean
        fun GetMaterialDefaultTextureParameterValue(Material: Material, ParameterName: String): Texture
        fun GetMaterialDefaultVectorParameterValue(Material: Material, ParameterName: String): LinearColor
        fun GetNumMaterialExpressions(Material: Material): Number
        fun HasMaterialUsage(Material: Material, Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_MAX" */): Boolean
        fun LayoutMaterialExpressions(Material: Material)
        fun RecompileMaterial(Material: Material)
        fun SetMaterialUsage(Material: Material, Usage: String /* "MATUSAGE_SkeletalMesh" | "MATUSAGE_ParticleSprites" | "MATUSAGE_BeamTrails" | "MATUSAGE_MeshParticles" | "MATUSAGE_StaticLighting" | "MATUSAGE_MorphTargets" | "MATUSAGE_SplineMesh" | "MATUSAGE_InstancedStaticMeshes" | "MATUSAGE_GeometryCollections" | "MATUSAGE_Clothing" | "MATUSAGE_NiagaraSprites" | "MATUSAGE_NiagaraRibbons" | "MATUSAGE_NiagaraMeshParticles" | "MATUSAGE_GeometryCache" | "MATUSAGE_MAX" */, bNeedsRecompile: Boolean = definedExternally): `T$254`
    }
}

external interface `T$255` {
    var MinValue: Number
    var MaxValue: Number
}

external interface `T$256` {
    var MinTime: Number
    var MaxTime: Number
}

external open class CurveBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AssetImportData: AssetImportData
    open var ImportPath: String
    open fun GetValueRange(MinValue: Number = definedExternally, MaxValue: Number = definedExternally): `T$255`
    open fun GetTimeRange(MinTime: Number = definedExternally, MaxTime: Number = definedExternally): `T$256`

    companion object {
        fun Load(ResourceName: String): CurveBase
        fun Find(Outer: UObject, ResourceName: String): CurveBase
        fun GetDefaultObject(): CurveBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveBase
        fun C(Other: UObject): CurveBase
        fun C(Other: Any): CurveBase
    }
}

external open class KeyHandleMap {
    open fun clone(): KeyHandleMap

    companion object {
        fun C(Other: UObject): KeyHandleMap
        fun C(Other: Any): KeyHandleMap
    }
}

external open class IndexedCurve {
    open var KeyHandlesToIndices: KeyHandleMap
    open fun clone(): IndexedCurve

    companion object {
        fun C(Other: UObject): IndexedCurve
        fun C(Other: Any): IndexedCurve
    }
}

external object ERichCurveExtrapolation {
    var RCCE_Cycle: String /* "RCCE_Cycle" */
    var RCCE_CycleWithOffset: String /* "RCCE_CycleWithOffset" */
    var RCCE_Oscillate: String /* "RCCE_Oscillate" */
    var RCCE_Linear: String /* "RCCE_Linear" */
    var RCCE_Constant: String /* "RCCE_Constant" */
    var RCCE_None: String /* "RCCE_None" */
    var RCCE_MAX: String /* "RCCE_MAX" */
}

external open class RealCurve : IndexedCurve {
    open var PreInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var PostInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var DefaultValue: Number
    override fun clone(): RealCurve

    companion object {
        fun C(Other: UObject): RealCurve
        fun C(Other: Any): RealCurve
    }
}

external object ERichCurveInterpMode {
    var RCIM_Linear: String /* "RCIM_Linear" */
    var RCIM_Constant: String /* "RCIM_Constant" */
    var RCIM_Cubic: String /* "RCIM_Cubic" */
    var RCIM_None: String /* "RCIM_None" */
    var RCIM_MAX: String /* "RCIM_MAX" */
}

external object ERichCurveTangentMode {
    var RCTM_Auto: String /* "RCTM_Auto" */
    var RCTM_User: String /* "RCTM_User" */
    var RCTM_Break: String /* "RCTM_Break" */
    var RCTM_None: String /* "RCTM_None" */
    var RCTM_MAX: String /* "RCTM_MAX" */
}

external object ERichCurveTangentWeightMode {
    var RCTWM_WeightedNone: String /* "RCTWM_WeightedNone" */
    var RCTWM_WeightedArrive: String /* "RCTWM_WeightedArrive" */
    var RCTWM_WeightedLeave: String /* "RCTWM_WeightedLeave" */
    var RCTWM_WeightedBoth: String /* "RCTWM_WeightedBoth" */
    var RCTWM_MAX: String /* "RCTWM_MAX" */
}

external open class RichCurveKey {
    open var InterpMode: String /* "RCIM_Linear" | "RCIM_Constant" | "RCIM_Cubic" | "RCIM_None" | "RCIM_MAX" */
    open var TangentMode: String /* "RCTM_Auto" | "RCTM_User" | "RCTM_Break" | "RCTM_None" | "RCTM_MAX" */
    open var TangentWeightMode: String /* "RCTWM_WeightedNone" | "RCTWM_WeightedArrive" | "RCTWM_WeightedLeave" | "RCTWM_WeightedBoth" | "RCTWM_MAX" */
    open var Time: Number
    open var Value: Number
    open var ArriveTangent: Number
    open var ArriveTangentWeight: Number
    open var LeaveTangent: Number
    open var LeaveTangentWeight: Number
    open fun clone(): RichCurveKey

    companion object {
        fun C(Other: UObject): RichCurveKey
        fun C(Other: Any): RichCurveKey
    }
}

external open class RichCurve : RealCurve {
    open var Keys: Array<RichCurveKey>
    override fun clone(): RichCurve

    companion object {
        fun C(Other: UObject): RichCurve
        fun C(Other: Any): RichCurve
    }
}

external open class CurveLinearColor : CurveBase {
    constructor()
    constructor(Outer: UObject)
    open var FloatCurves: RichCurve
    open var AdjustHue: Number
    open var AdjustSaturation: Number
    open var AdjustBrightness: Number
    open var AdjustBrightnessCurve: Number
    open var AdjustVibrance: Number
    open var AdjustMinAlpha: Number
    open var AdjustMaxAlpha: Number
    open fun GetLinearColorValue(InTime: Number): LinearColor
    open fun GetClampedLinearColorValue(InTime: Number): LinearColor

    companion object {
        fun Load(ResourceName: String): CurveLinearColor
        fun Find(Outer: UObject, ResourceName: String): CurveLinearColor
        fun GetDefaultObject(): CurveLinearColor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveLinearColor
        fun C(Other: UObject): CurveLinearColor
        fun C(Other: Any): CurveLinearColor
    }
}

external object TextureAddress {
    var TA_Wrap: String /* "TA_Wrap" */
    var TA_Clamp: String /* "TA_Clamp" */
    var TA_Mirror: String /* "TA_Mirror" */
    var TA_MAX: String /* "TA_MAX" */
}

external object EImportanceWeight {
    var Luminance: String /* "Luminance" */
    var Red: String /* "Red" */
    var Green: String /* "Green" */
    var Blue: String /* "Blue" */
    var Alpha: String /* "Alpha" */
    var EImportanceWeight_MAX: String /* "EImportanceWeight_MAX" */
}

external interface `T$257` {
    var Texture: Texture2D
    var WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */
}

external interface `T$258` {
    var SamplePosition: Vector2D
    var SampleColor: LinearColor
    var SampleIntensity: Number
    var SampleSize: Number
}

external open class ImportanceTexture {
    open var Size: IntPoint
    open var NumMips: Number
    open var MarginalCDF: Array<Number>
    open var ConditionalCDF: Array<Number>
    open var TextureData: Array<Color>
    open var Texture: Any
    open var Weighting: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */
    open fun clone(): ImportanceTexture
    open fun BreakImportanceTexture(Texture: Texture2D = definedExternally, WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */ = definedExternally): `T$257`
    open fun ImportanceSample(Rand: Vector2D, Samples: Number, Intensity: Number, SamplePosition: Vector2D = definedExternally, SampleColor: LinearColor = definedExternally, SampleIntensity: Number = definedExternally, SampleSize: Number = definedExternally): `T$258`

    companion object {
        fun C(Other: UObject): ImportanceTexture
        fun C(Other: Any): ImportanceTexture
        fun BreakImportanceTexture(ImportanceTexture: ImportanceTexture, Texture: Texture2D = definedExternally, WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */ = definedExternally): `T$257`
        fun ImportanceSample(Texture: ImportanceTexture, Rand: Vector2D, Samples: Number, Intensity: Number, SamplePosition: Vector2D = definedExternally, SampleColor: LinearColor = definedExternally, SampleIntensity: Number = definedExternally, SampleSize: Number = definedExternally): `T$258`
    }
}

external open class Margin {
    open var Left: Number
    open var Top: Number
    open var Right: Number
    open var Bottom: Number
    open fun clone(): Margin

    companion object {
        fun C(Other: UObject): Margin
        fun C(Other: Any): Margin
    }
}

external object ESlateColorStylingMode {
    var UseColor_Specified: String /* "UseColor_Specified" */
    var UseColor_Specified_Link: String /* "UseColor_Specified_Link" */
    var UseColor_Foreground: String /* "UseColor_Foreground" */
    var UseColor_Foreground_Subdued: String /* "UseColor_Foreground_Subdued" */
    var UseColor_MAX: String /* "UseColor_MAX" */
}

external open class SlateColor {
    open var SpecifiedColor: LinearColor
    open var ColorUseRule: String /* "UseColor_Specified" | "UseColor_Specified_Link" | "UseColor_Foreground" | "UseColor_Foreground_Subdued" | "UseColor_MAX" */
    open fun clone(): SlateColor

    companion object {
        fun C(Other: UObject): SlateColor
        fun C(Other: Any): SlateColor
        fun SlateColor_UseForeground(): SlateColor
        fun SlateColor_UseSubduedForeground(): SlateColor
    }
}

external object ESlateBrushDrawType {
    var NoDrawType: String /* "NoDrawType" */
    var Box: String /* "Box" */
    var Border: String /* "Border" */
    var Image: String /* "Image" */
    var ESlateBrushDrawType_MAX: String /* "ESlateBrushDrawType_MAX" */
}

external object ESlateBrushTileType {
    var NoTile: String /* "NoTile" */
    var Horizontal: String /* "Horizontal" */
    var Vertical: String /* "Vertical" */
    var Both: String /* "Both" */
    var ESlateBrushTileType_MAX: String /* "ESlateBrushTileType_MAX" */
}

external object ESlateBrushMirrorType {
    var NoMirror: String /* "NoMirror" */
    var Horizontal: String /* "Horizontal" */
    var Vertical: String /* "Vertical" */
    var Both: String /* "Both" */
    var ESlateBrushMirrorType_MAX: String /* "ESlateBrushMirrorType_MAX" */
}

external object ESlateBrushImageType {
    var NoImage: String /* "NoImage" */
    var FullColor: String /* "FullColor" */
    var Linear: String /* "Linear" */
    var ESlateBrushImageType_MAX: String /* "ESlateBrushImageType_MAX" */
}

external interface `T$259` {
    var Brush: SlateBrush
    var `$`: MaterialInstanceDynamic
}

external interface `T$260` {
    var Brush: SlateBrush
}

external open class SlateBrush {
    open var ImageSize: Vector2D
    open var Margin: Margin
    open var Tint: LinearColor
    open var TintColor: SlateColor
    open var ResourceObject: UObject
    open var ResourceName: String
    open var UVRegion: Box2D
    open var DrawAs: String /* "NoDrawType" | "Box" | "Border" | "Image" | "ESlateBrushDrawType_MAX" */
    open var Tiling: String /* "NoTile" | "Horizontal" | "Vertical" | "Both" | "ESlateBrushTileType_MAX" */
    open var Mirroring: String /* "NoMirror" | "Horizontal" | "Vertical" | "Both" | "ESlateBrushMirrorType_MAX" */
    open var ImageType: String /* "NoImage" | "FullColor" | "Linear" | "ESlateBrushImageType_MAX" */
    open var bIsDynamicallyLoaded: Boolean
    open var bHasUObject: Boolean
    open fun clone(): SlateBrush
    open fun GetBrushResource(): UObject
    open fun GetBrushResourceAsMaterial(): MaterialInterface
    open fun GetBrushResourceAsTexture2D(): Texture2D
    open fun GetDynamicMaterial(): `T$259`
    open fun SetBrushResourceToMaterial(Material: MaterialInterface = definedExternally): `T$260`
    open fun SetBrushResourceToTexture(Texture: Texture2D = definedExternally): `T$260`
    open fun EqualEqual_SlateBrush(B: SlateBrush): Boolean

    companion object {
        fun C(Other: UObject): SlateBrush
        fun C(Other: Any): SlateBrush
        fun GetBrushResource(Brush: SlateBrush): UObject
        fun GetBrushResourceAsMaterial(Brush: SlateBrush): MaterialInterface
        fun GetBrushResourceAsTexture2D(Brush: SlateBrush): Texture2D
        fun GetDynamicMaterial(Brush: SlateBrush = definedExternally): `T$259`
        fun SetBrushResourceToMaterial(Brush: SlateBrush = definedExternally, Material: MaterialInterface = definedExternally): `T$260`
        fun SetBrushResourceToTexture(Brush: SlateBrush = definedExternally, Texture: Texture2D = definedExternally): `T$260`
        fun EqualEqual_SlateBrush(A: SlateBrush, B: SlateBrush): Boolean
        fun NoResourceBrush(): SlateBrush
    }
}

external open class Texture2D : Texture {
    constructor()
    constructor(Outer: UObject)
    open var LevelIndex: Number
    open var FirstResourceMemMip: Number
    open var bTemporarilyDisableStreaming: Boolean
    open var bHasBeenPaintedInEditor: Boolean
    open var AddressX: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressY: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var ImportedSize: IntPoint
    open fun Blueprint_GetSizeY(): Number
    open fun Blueprint_GetSizeX(): Number
    open fun AddLoadingSplashScreen(TranslationInMeters: Vector, Rotation: Rotator, SizeInMeters: Vector2D, DeltaRotation: Rotator, bClearBeforeAdd: Boolean)
    open fun ShowLoadingIcon()
    open fun MakeImportanceTexture(WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */): ImportanceTexture
    open fun MakeBrushFromTexture(Width: Number, Height: Number): SlateBrush

    companion object {
        fun Load(ResourceName: String): Texture2D
        fun Find(Outer: UObject, ResourceName: String): Texture2D
        fun GetDefaultObject(): Texture2D
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Texture2D
        fun C(Other: UObject): Texture2D
        fun C(Other: Any): Texture2D
        fun AddLoadingSplashScreen(Texture: Texture2D, TranslationInMeters: Vector, Rotation: Rotator, SizeInMeters: Vector2D, DeltaRotation: Rotator, bClearBeforeAdd: Boolean)
        fun ShowLoadingIcon(Texture: Texture2D)
        fun MakeImportanceTexture(Texture: Texture2D, WeightingFunc: String /* "Luminance" | "Red" | "Green" | "Blue" | "Alpha" | "EImportanceWeight_MAX" */): ImportanceTexture
        fun MakeBrushFromTexture(Texture: Texture2D, Width: Number, Height: Number): SlateBrush
    }
}

external interface `T$261` {
    var Position: Number
    var `$`: Boolean
}

external open class CurveLinearColorAtlas : Texture2D {
    constructor()
    constructor(Outer: UObject)
    open var bIsDirty: Boolean
    open var TextureSize: Any
    open var GradientPixelSize: Any
    open var GradientCurves: Array<CurveLinearColor>
    open fun GetCurvePosition(InCurve: CurveLinearColor, Position: Number = definedExternally): `T$261`

    companion object {
        fun Load(ResourceName: String): CurveLinearColorAtlas
        fun Find(Outer: UObject, ResourceName: String): CurveLinearColorAtlas
        fun GetDefaultObject(): CurveLinearColorAtlas
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveLinearColorAtlas
        fun C(Other: UObject): CurveLinearColorAtlas
        fun C(Other: Any): CurveLinearColorAtlas
    }
}

external open class ScalarParameterAtlasInstanceData {
    open var bIsUsedAsAtlasPosition: Boolean
    open var Curve: CurveLinearColor
    open var Atlas: CurveLinearColorAtlas
    open fun clone(): ScalarParameterAtlasInstanceData

    companion object {
        fun C(Other: UObject): ScalarParameterAtlasInstanceData
        fun C(Other: Any): ScalarParameterAtlasInstanceData
    }
}

external object EMaterialParameterAssociation {
    var LayerParameter: String /* "LayerParameter" */
    var BlendParameter: String /* "BlendParameter" */
    var GlobalParameter: String /* "GlobalParameter" */
    var EMaterialParameterAssociation_MAX: String /* "EMaterialParameterAssociation_MAX" */
}

external open class MaterialParameterInfo {
    open var Name: String
    open var Association: String /* "LayerParameter" | "BlendParameter" | "GlobalParameter" | "EMaterialParameterAssociation_MAX" */
    open var index: Number
    open var ParameterLocation: SoftObjectPath
    open fun clone(): MaterialParameterInfo

    companion object {
        fun C(Other: UObject): MaterialParameterInfo
        fun C(Other: Any): MaterialParameterInfo
    }
}

external open class ScalarParameterValue {
    open var ParameterName: String
    open var AtlasData: ScalarParameterAtlasInstanceData
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: Number
    open var ExpressionGUID: Guid
    open fun clone(): ScalarParameterValue

    companion object {
        fun C(Other: UObject): ScalarParameterValue
        fun C(Other: Any): ScalarParameterValue
    }
}

external open class VectorParameterValue {
    open var ParameterName: String
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: LinearColor
    open var ExpressionGUID: Guid
    open fun clone(): VectorParameterValue

    companion object {
        fun C(Other: UObject): VectorParameterValue
        fun C(Other: Any): VectorParameterValue
    }
}

external open class TextureParameterValue {
    open var ParameterName: String
    open var ParameterInfo: MaterialParameterInfo
    open var ParameterValue: Texture
    open var ExpressionGUID: Guid
    open fun clone(): TextureParameterValue

    companion object {
        fun C(Other: UObject): TextureParameterValue
        fun C(Other: Any): TextureParameterValue
    }
}

external object EFontCacheType {
    var Offline: String /* "Offline" */
    var Runtime: String /* "Runtime" */
    var EFontCacheType_MAX: String /* "EFontCacheType_MAX" */
}

external open class FontCharacter {
    open var StartU: Number
    open var StartV: Number
    open var USize: Number
    open var VSize: Number
    open var TextureIndex: Number
    open var VerticalOffset: Number
    open fun clone(): FontCharacter

    companion object {
        fun C(Other: UObject): FontCharacter
        fun C(Other: Any): FontCharacter
    }
}

external object EFontImportCharacterSet {
    var FontICS_Default: String /* "FontICS_Default" */
    var FontICS_Ansi: String /* "FontICS_Ansi" */
    var FontICS_Symbol: String /* "FontICS_Symbol" */
    var FontICS_MAX: String /* "FontICS_MAX" */
}

external open class FontImportOptionsData {
    open var FontName: String
    open var Height: Number
    open var bEnableAntialiasing: Boolean
    open var bEnableBold: Boolean
    open var bEnableItalic: Boolean
    open var bEnableUnderline: Boolean
    open var bAlphaOnly: Boolean
    open var CharacterSet: String /* "FontICS_Default" | "FontICS_Ansi" | "FontICS_Symbol" | "FontICS_MAX" */
    open var Chars: String
    open var UnicodeRange: String
    open var CharsFilePath: String
    open var CharsFileWildcard: String
    open var bCreatePrintableOnly: Boolean
    open var bIncludeASCIIRange: Boolean
    open var ForegroundColor: LinearColor
    open var bEnableDropShadow: Boolean
    open var TexturePageWidth: Number
    open var TexturePageMaxHeight: Number
    open var XPadding: Number
    open var YPadding: Number
    open var ExtendBoxTop: Number
    open var ExtendBoxBottom: Number
    open var ExtendBoxRight: Number
    open var ExtendBoxLeft: Number
    open var bEnableLegacyMode: Boolean
    open var Kerning: Number
    open var bUseDistanceFieldAlpha: Boolean
    open var DistanceFieldScaleFactor: Number
    open var DistanceFieldScanRadiusScale: Number
    open fun clone(): FontImportOptionsData

    companion object {
        fun C(Other: UObject): FontImportOptionsData
        fun C(Other: Any): FontImportOptionsData
    }
}

external object EFontHinting {
    var Default: String /* "Default" */
    var Auto: String /* "Auto" */
    var AutoLight: String /* "AutoLight" */
    var Monochrome: String /* "Monochrome" */
    var None: String /* "None" */
    var EFontHinting_MAX: String /* "EFontHinting_MAX" */
}

external object EFontLoadingPolicy {
    var LazyLoad: String /* "LazyLoad" */
    var Stream: String /* "Stream" */
    var Inline: String /* "Inline" */
    var EFontLoadingPolicy_MAX: String /* "EFontLoadingPolicy_MAX" */
}

external open class FontBulkData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FontBulkData
        fun Find(Outer: UObject, ResourceName: String): FontBulkData
        fun GetDefaultObject(): FontBulkData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FontBulkData
        fun C(Other: UObject): FontBulkData
        fun C(Other: Any): FontBulkData
    }
}

external open class FontData {
    open var FontFilename: String
    open var Hinting: String /* "Default" | "Auto" | "AutoLight" | "Monochrome" | "None" | "EFontHinting_MAX" */
    open var LoadingPolicy: String /* "LazyLoad" | "Stream" | "Inline" | "EFontLoadingPolicy_MAX" */
    open var SubFaceIndex: Number
    open var FontFaceAsset: UObject
    open var BulkDataPtr: FontBulkData
    open var FontData: Array<Number>
    open fun clone(): FontData

    companion object {
        fun C(Other: UObject): FontData
        fun C(Other: Any): FontData
    }
}

external open class TypefaceEntry {
    open var Name: String
    open var Font: FontData
    open fun clone(): TypefaceEntry

    companion object {
        fun C(Other: UObject): TypefaceEntry
        fun C(Other: Any): TypefaceEntry
    }
}

external open class Typeface {
    open var Fonts: Array<TypefaceEntry>
    open fun clone(): Typeface

    companion object {
        fun C(Other: UObject): Typeface
        fun C(Other: Any): Typeface
    }
}

external open class CompositeFallbackFont {
    open var Typeface: Typeface
    open var ScalingFactor: Number
    open fun clone(): CompositeFallbackFont

    companion object {
        fun C(Other: UObject): CompositeFallbackFont
        fun C(Other: Any): CompositeFallbackFont
    }
}

external object ERangeBoundTypes {
    var Exclusive: String /* "Exclusive" */
    var Inclusive: String /* "Inclusive" */
    var Open: String /* "Open" */
    var ERangeBoundTypes_MAX: String /* "ERangeBoundTypes_MAX" */
}

external open class Int32RangeBound {
    open var Type: String /* "Exclusive" | "Inclusive" | "Open" | "ERangeBoundTypes_MAX" */
    open var Value: Number
    open fun clone(): Int32RangeBound

    companion object {
        fun C(Other: UObject): Int32RangeBound
        fun C(Other: Any): Int32RangeBound
    }
}

external open class Int32Range {
    open var LowerBound: Int32RangeBound
    open var UpperBound: Int32RangeBound
    open fun clone(): Int32Range

    companion object {
        fun C(Other: UObject): Int32Range
        fun C(Other: Any): Int32Range
    }
}

external open class CompositeSubFont : CompositeFallbackFont {
    open var CharacterRanges: Array<Int32Range>
    open var Cultures: String
    open var EditorName: String
    override fun clone(): CompositeSubFont

    companion object {
        fun C(Other: UObject): CompositeSubFont
        fun C(Other: Any): CompositeSubFont
    }
}

external open class CompositeFont {
    open var DefaultTypeface: Typeface
    open var FallbackTypeface: CompositeFallbackFont
    open var SubTypefaces: Array<CompositeSubFont>
    open fun clone(): CompositeFont

    companion object {
        fun C(Other: UObject): CompositeFont
        fun C(Other: Any): CompositeFont
    }
}

external open class Font : UObject {
    constructor()
    constructor(Outer: UObject)
    open var FontCacheType: String /* "Offline" | "Runtime" | "EFontCacheType_MAX" */
    open var Characters: Array<FontCharacter>
    open var Textures: Array<Texture2D>
    open var IsRemapped: Number
    open var EmScale: Number
    open var Ascent: Number
    open var Descent: Number
    open var Leading: Number
    open var Kerning: Number
    open var ImportOptions: FontImportOptionsData
    open var NumCharacters: Number
    open var MaxCharHeight: Array<Number>
    open var ScalingFactor: Number
    open var LegacyFontSize: Number
    open var LegacyFontName: String
    open var CompositeFont: CompositeFont

    companion object {
        fun Load(ResourceName: String): Font
        fun Find(Outer: UObject, ResourceName: String): Font
        fun GetDefaultObject(): Font
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Font
        fun C(Other: UObject): Font
        fun C(Other: Any): Font
    }
}

external open class FontParameterValue {
    open var ParameterName: String
    open var ParameterInfo: MaterialParameterInfo
    open var FontValue: Font
    open var FontPage: Number
    open var ExpressionGUID: Guid
    open fun clone(): FontParameterValue

    companion object {
        fun C(Other: UObject): FontParameterValue
        fun C(Other: Any): FontParameterValue
    }
}

external open class MaterialInstanceBasePropertyOverrides {
    open var bOverride_OpacityMaskClipValue: Boolean
    open var bOverride_BlendMode: Boolean
    open var bOverride_ShadingModel: Boolean
    open var bOverride_DitheredLODTransition: Boolean
    open var bOverride_CastDynamicShadowAsMasked: Boolean
    open var bOverride_TwoSided: Boolean
    open var TwoSided: Boolean
    open var DitheredLODTransition: Boolean
    open var bCastDynamicShadowAsMasked: Boolean
    open var BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var ShadingModel: String /* "MSM_Unlit" | "MSM_DefaultLit" | "MSM_Subsurface" | "MSM_PreintegratedSkin" | "MSM_ClearCoat" | "MSM_SubsurfaceProfile" | "MSM_TwoSidedFoliage" | "MSM_Hair" | "MSM_Cloth" | "MSM_Eye" | "MSM_NUM" | "MSM_FromMaterialExpression" | "MSM_MAX" */
    open var OpacityMaskClipValue: Number
    open fun clone(): MaterialInstanceBasePropertyOverrides

    companion object {
        fun C(Other: UObject): MaterialInstanceBasePropertyOverrides
        fun C(Other: Any): MaterialInstanceBasePropertyOverrides
    }
}

external open class StaticSwitchParameter {
    open var ParameterInfo: MaterialParameterInfo
    open var Value: Boolean
    open var bOverride: Boolean
    open var ExpressionGUID: Guid
    open fun clone(): StaticSwitchParameter

    companion object {
        fun C(Other: UObject): StaticSwitchParameter
        fun C(Other: Any): StaticSwitchParameter
    }
}

external open class StaticComponentMaskParameter {
    open var ParameterInfo: MaterialParameterInfo
    open var R: Boolean
    open var G: Boolean
    open var B: Boolean
    open var A: Boolean
    open var bOverride: Boolean
    open var ExpressionGUID: Guid
    open fun clone(): StaticComponentMaskParameter

    companion object {
        fun C(Other: UObject): StaticComponentMaskParameter
        fun C(Other: Any): StaticComponentMaskParameter
    }
}

external open class StaticTerrainLayerWeightParameter {
    open var ParameterInfo: MaterialParameterInfo
    open var bOverride: Boolean
    open var ExpressionGUID: Guid
    open var WeightmapIndex: Number
    open var bWeightBasedBlend: Boolean
    open fun clone(): StaticTerrainLayerWeightParameter

    companion object {
        fun C(Other: UObject): StaticTerrainLayerWeightParameter
        fun C(Other: Any): StaticTerrainLayerWeightParameter
    }
}

external open class MaterialLayersFunctions {
    open var Layers: Array<MaterialFunctionInterface>
    open var Blends: Array<MaterialFunctionInterface>
    open var LayerNames: Array<String>
    open var RestrictToLayerRelatives: Array<Boolean>
    open var RestrictToBlendRelatives: Array<Boolean>
    open var LayerStates: Array<Boolean>
    open var KeyString: String
    open fun clone(): MaterialLayersFunctions

    companion object {
        fun C(Other: UObject): MaterialLayersFunctions
        fun C(Other: Any): MaterialLayersFunctions
    }
}

external open class StaticMaterialLayersParameter {
    open var ParameterInfo: MaterialParameterInfo
    open var Value: MaterialLayersFunctions
    open var bOverride: Boolean
    open var ExpressionGUID: Guid
    open fun clone(): StaticMaterialLayersParameter

    companion object {
        fun C(Other: UObject): StaticMaterialLayersParameter
        fun C(Other: Any): StaticMaterialLayersParameter
    }
}

external open class StaticParameterSet {
    open var StaticSwitchParameters: Array<StaticSwitchParameter>
    open var StaticComponentMaskParameters: Array<StaticComponentMaskParameter>
    open var TerrainLayerWeightParameters: Array<StaticTerrainLayerWeightParameter>
    open var MaterialLayersParameters: Array<StaticMaterialLayersParameter>
    open fun clone(): StaticParameterSet

    companion object {
        fun C(Other: UObject): StaticParameterSet
        fun C(Other: Any): StaticParameterSet
    }
}

external open class MaterialInstance : MaterialInterface {
    constructor()
    constructor(Outer: UObject)
    open var PhysMaterial: PhysicalMaterial
    open var Parent: MaterialInterface
    open var bHasStaticPermutationResource: Boolean
    open var bOverrideSubsurfaceProfile: Boolean
    open var ScalarParameterValues: Array<ScalarParameterValue>
    open var VectorParameterValues: Array<VectorParameterValue>
    open var TextureParameterValues: Array<TextureParameterValue>
    open var FontParameterValues: Array<FontParameterValue>
    open var bOverrideBaseProperties: Boolean
    open var BasePropertyOverrides: MaterialInstanceBasePropertyOverrides
    open var PermutationTextureReferences: Array<UObject>
    open var ReferencedTextureGuids: Array<Guid>
    open var StaticParameters: StaticParameterSet

    companion object {
        fun Load(ResourceName: String): MaterialInstance
        fun Find(Outer: UObject, ResourceName: String): MaterialInstance
        fun GetDefaultObject(): MaterialInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialInstance
        fun C(Other: UObject): MaterialInstance
        fun C(Other: Any): MaterialInstance
    }
}

external open class MaterialInstanceDynamic : MaterialInstance {
    constructor()
    constructor(Outer: UObject)
    open fun SetVectorParameterValue(ParameterName: String, Value: LinearColor)
    open fun SetTextureParameterValue(ParameterName: String, Value: Texture)
    open fun SetScalarParameterValue(ParameterName: String, Value: Number)
    open fun K2_InterpolateMaterialInstanceParams(SourceA: MaterialInstance, SourceB: MaterialInstance, Alpha: Number)
    open fun K2_GetVectorParameterValue(ParameterName: String): LinearColor
    open fun K2_GetTextureParameterValue(ParameterName: String): Texture
    open fun K2_GetScalarParameterValue(ParameterName: String): Number
    open fun K2_CopyMaterialInstanceParameters(Source: MaterialInterface, bQuickParametersOnly: Boolean)
    open fun CopyParameterOverrides(MaterialInstance: MaterialInstance)
    open fun CopyInterpParameters(Source: MaterialInstance)

    companion object {
        fun Load(ResourceName: String): MaterialInstanceDynamic
        fun Find(Outer: UObject, ResourceName: String): MaterialInstanceDynamic
        fun GetDefaultObject(): MaterialInstanceDynamic
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialInstanceDynamic
        fun C(Other: UObject): MaterialInstanceDynamic
        fun C(Other: Any): MaterialInstanceDynamic
    }
}

external open class DecalComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var DecalMaterial: MaterialInterface
    open var SortOrder: Number
    open var FadeScreenSize: Number
    open var FadeStartDelay: Number
    open var FadeDuration: Number
    open var FadeInDuration: Number
    open var FadeInStartDelay: Number
    open var bDestroyOwnerAfterFade: Boolean
    open var DecalSize: Vector
    open fun SetSortOrder(Value: Number)
    open fun SetFadeScreenSize(NewFadeScreenSize: Number)
    open fun SetFadeOut(StartDelay: Number, Duration: Number, DestroyOwnerAfterFade: Boolean)
    open fun SetFadeIn(StartDelay: Number, Duaration: Number)
    open fun SetDecalMaterial(NewDecalMaterial: MaterialInterface)
    open fun GetFadeStartDelay(): Number
    open fun GetFadeInStartDelay(): Number
    open fun GetFadeInDuration(): Number
    open fun GetFadeDuration(): Number
    open fun GetDecalMaterial(): MaterialInterface
    open fun CreateDynamicMaterialInstance(): MaterialInstanceDynamic

    companion object {
        fun Load(ResourceName: String): DecalComponent
        fun Find(Outer: UObject, ResourceName: String): DecalComponent
        fun GetDefaultObject(): DecalComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DecalComponent
        fun C(Other: UObject): DecalComponent
        fun C(Other: Any): DecalComponent
    }
}

external open class AssetData {
    open var ObjectPath: String
    open var PackageName: String
    open var PackagePath: String
    open var AssetName: String
    open var AssetClass: String
    open fun clone(): AssetData

    companion object {
        fun C(Other: UObject): AssetData
        fun C(Other: Any): AssetData
    }
}

external interface `T$262` {
    var ChildInstances: Array<AssetData>
}

external interface `T$263` {
    var ParameterNames: Array<String>
}

external interface `T$264` {
    var ParameterNames: Array<String>
}

external interface `T$265` {
    var ParameterNames: Array<String>
}

external interface `T$266` {
    var ParameterNames: Array<String>
}

external interface `T$267` {
    var ChildInstances: Array<AssetData>
}

external interface `T$268` {
    var ParameterNames: Array<String>
}

external interface `T$269` {
    var ParameterNames: Array<String>
}

external interface `T$270` {
    var ParameterNames: Array<String>
}

external interface `T$271` {
    var ParameterNames: Array<String>
}

external open class MaterialInterface : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SubsurfaceProfile: SubsurfaceProfile
    open var LightmassSettings: LightmassMaterialInterfaceSettings
    open var bTextureStreamingDataSorted: Boolean
    open var TextureStreamingDataVersion: Number
    open var TextureStreamingData: Array<MaterialTextureInfo>
    open var AssetUserData: Array<AssetUserData>
    open var TextureStreamingDataMissingEntries: Array<MaterialTextureInfo>
    open var PreviewMesh: SoftObjectPath
    open var ThumbnailInfo: ThumbnailInfo
    open var LayerParameterExpansion: Any
    open var ParameterOverviewExpansion: Any
    open var AssetImportData: AssetImportData
    open var LightingGuid: Guid
    open fun SetForceMipLevelsToBeResident(OverrideForceMiplevelsToBeResident: Boolean, bForceMiplevelsToBeResidentValue: Boolean, ForceDuration: Number, CinematicTextureGroups: Number)
    open fun GetPhysicalMaterial(): PhysicalMaterial
    open fun GetBaseMaterial(): Material
    open fun SpawnDecalAttached(DecalSize: Vector, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, LifeSpan: Number): DecalComponent
    open fun MakeBrushFromMaterial(Width: Number, Height: Number): SlateBrush
    open fun GetChildInstances(ChildInstances: Array<AssetData> = definedExternally): `T$262`
    open fun GetScalarParameterNames(ParameterNames: Array<String> = definedExternally): `T$263`
    open fun GetStaticSwitchParameterNames(ParameterNames: Array<String> = definedExternally): `T$264`
    open fun GetTextureParameterNames(ParameterNames: Array<String> = definedExternally): `T$265`
    open fun GetVectorParameterNames(ParameterNames: Array<String> = definedExternally): `T$266`

    companion object {
        fun Load(ResourceName: String): MaterialInterface
        fun Find(Outer: UObject, ResourceName: String): MaterialInterface
        fun GetDefaultObject(): MaterialInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialInterface
        fun C(Other: UObject): MaterialInterface
        fun C(Other: Any): MaterialInterface
        fun SpawnDecalAttached(DecalMaterial: MaterialInterface, DecalSize: Vector, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, LifeSpan: Number): DecalComponent
        fun MakeBrushFromMaterial(Material: MaterialInterface, Width: Number, Height: Number): SlateBrush
        fun GetChildInstances(Parent: MaterialInterface, ChildInstances: Array<AssetData> = definedExternally): `T$267`
        fun GetScalarParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$268`
        fun GetStaticSwitchParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$269`
        fun GetTextureParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$270`
        fun GetVectorParameterNames(Material: MaterialInterface, ParameterNames: Array<String> = definedExternally): `T$271`
    }
}

external object EAutoReceiveInput {
    var Disabled: String /* "Disabled" */
    var Player0: String /* "Player0" */
    var Player1: String /* "Player1" */
    var Player2: String /* "Player2" */
    var Player3: String /* "Player3" */
    var Player4: String /* "Player4" */
    var Player5: String /* "Player5" */
    var Player6: String /* "Player6" */
    var Player7: String /* "Player7" */
    var EAutoReceiveInput_MAX: String /* "EAutoReceiveInput_MAX" */
}

external object EAutoPossessAI {
    var Disabled: String /* "Disabled" */
    var PlacedInWorld: String /* "PlacedInWorld" */
    var Spawned: String /* "Spawned" */
    var PlacedInWorldOrSpawned: String /* "PlacedInWorldOrSpawned" */
    var EAutoPossessAI_MAX: String /* "EAutoPossessAI_MAX" */
}

external open class SpriteCategoryInfo {
    open var Category: String
    open var DisplayName: String
    open var Description: String
    open fun clone(): SpriteCategoryInfo

    companion object {
        fun C(Other: UObject): SpriteCategoryInfo
        fun C(Other: Any): SpriteCategoryInfo
    }
}

external open class BillboardComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var Sprite: Texture2D
    open var bIsScreenSizeScaled: Boolean
    open var ScreenSize: Number
    open var U: Number
    open var UL: Number
    open var V: Number
    open var VL: Number
    open var SpriteCategoryName: String
    open var SpriteInfo: SpriteCategoryInfo
    open var bUseInEditorScaling: Boolean
    open fun SetUV(NewU: Number, NewUL: Number, NewV: Number, NewVL: Number)
    open fun SetSpriteAndUV(NewSprite: Texture2D, NewU: Number, NewUL: Number, NewV: Number, NewVL: Number)
    open fun SetSprite(NewSprite: Texture2D)

    companion object {
        fun Load(ResourceName: String): BillboardComponent
        fun Find(Outer: UObject, ResourceName: String): BillboardComponent
        fun GetDefaultObject(): BillboardComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BillboardComponent
        fun C(Other: UObject): BillboardComponent
        fun C(Other: Any): BillboardComponent
    }
}

external open class Info(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var SpriteComponent: BillboardComponent

    companion object {
        fun GetDefaultObject(): Info
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Info
        fun C(Other: UObject): Info
        fun C(Other: Any): Info
    }
}

external open class LocalMessage : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LocalMessage
        fun Find(Outer: UObject, ResourceName: String): LocalMessage
        fun GetDefaultObject(): LocalMessage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalMessage
        fun C(Other: UObject): LocalMessage
        fun C(Other: Any): LocalMessage
    }
}

external open class UniqueNetIdWrapper {
    open fun clone(): UniqueNetIdWrapper

    companion object {
        fun C(Other: UObject): UniqueNetIdWrapper
        fun C(Other: Any): UniqueNetIdWrapper
    }
}

external open class UniqueNetIdRepl : UniqueNetIdWrapper {
    open var ReplicationBytes: Array<Number>
    override fun clone(): UniqueNetIdRepl

    companion object {
        fun C(Other: UObject): UniqueNetIdRepl
        fun C(Other: Any): UniqueNetIdRepl
    }
}

external open class PlayerState(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var Score: Number
    open var PlayerName: String
    open var PlayerId: Number
    open var Ping: Number
    open var bShouldUpdateReplicatedPing: Boolean
    open var bIsSpectator: Boolean
    open var bOnlySpectator: Boolean
    open var bIsABot: Boolean
    open var bIsInactive: Boolean
    open var bFromPreviousLevel: Boolean
    open var StartTime: Number
    open var EngineMessageClass: UnrealEngineClass
    open var SavedNetworkAddress: String
    open var UniqueId: UniqueNetIdRepl
    open var PawnPrivate: Pawn
    open var PlayerNamePrivate: String
    open fun ReceiveOverrideWith(OldPlayerState: PlayerState)
    open fun ReceiveCopyProperties(NewPlayerState: PlayerState)
    open fun OnRep_UniqueId()
    open fun OnRep_Score()
    open fun OnRep_PlayerName()
    open fun OnRep_PlayerId()
    open fun OnRep_bIsInactive()
    open fun GetPlayerName(): String

    companion object {
        fun GetDefaultObject(): PlayerState
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerState
        fun C(Other: UObject): PlayerState
        fun C(Other: Any): PlayerState
    }
}

external open class DamageType : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bCausedByWorld: Boolean
    open var bScaleMomentumByMass: Boolean
    open var bRadialDamageVelChange: Boolean
    open var DamageImpulse: Number
    open var DestructibleImpulse: Number
    open var DestructibleDamageSpreadScale: Number
    open var DamageFalloff: Number

    companion object {
        fun Load(ResourceName: String): DamageType
        fun Find(Outer: UObject, ResourceName: String): DamageType
        fun GetDefaultObject(): DamageType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DamageType
        fun C(Other: UObject): DamageType
        fun C(Other: Any): DamageType
    }
}

external open class MeshComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var OverrideMaterials: Array<MaterialInterface>
    open var bEnableMaterialParameterCaching: Boolean
    open fun SetVectorParameterValueOnMaterials(ParameterName: String, ParameterValue: Vector)
    open fun SetScalarParameterValueOnMaterials(ParameterName: String, ParameterValue: Number)
    open fun PrestreamTextures(Seconds: Number, bPrioritizeCharacterTextures: Boolean, CinematicTextureGroups: Number)
    open fun IsMaterialSlotNameValid(MaterialSlotName: String): Boolean
    open fun GetMaterialSlotNames(): Array<String>
    open fun GetMaterials(): Array<MaterialInterface>
    open fun GetMaterialIndex(MaterialSlotName: String): Number

    companion object {
        fun Load(ResourceName: String): MeshComponent
        fun Find(Outer: UObject, ResourceName: String): MeshComponent
        fun GetDefaultObject(): MeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshComponent
        fun C(Other: UObject): MeshComponent
        fun C(Other: Any): MeshComponent
    }
}

external object EBoneTranslationRetargetingMode {
    var Animation: String /* "Animation" */
    var Skeleton: String /* "Skeleton" */
    var AnimationScaled: String /* "AnimationScaled" */
    var AnimationRelative: String /* "AnimationRelative" */
    var OrientAndScale: String /* "OrientAndScale" */
    var EBoneTranslationRetargetingMode_MAX: String /* "EBoneTranslationRetargetingMode_MAX" */
}

external open class BoneNode {
    open var Name: String
    open var ParentIndex: Number
    open var TranslationRetargetingMode: String /* "Animation" | "Skeleton" | "AnimationScaled" | "AnimationRelative" | "OrientAndScale" | "EBoneTranslationRetargetingMode_MAX" */
    open fun clone(): BoneNode

    companion object {
        fun C(Other: UObject): BoneNode
        fun C(Other: Any): BoneNode
    }
}

external open class VirtualBone {
    open var SourceBoneName: String
    open var TargetBoneName: String
    open var VirtualBoneName: String
    open fun clone(): VirtualBone

    companion object {
        fun C(Other: UObject): VirtualBone
        fun C(Other: Any): VirtualBone
    }
}

external open class SkeletalMeshSocket : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SocketName: String
    open var BoneName: String
    open var RelativeLocation: Vector
    open var RelativeRotation: Rotator
    open var RelativeScale: Vector
    open var bForceAlwaysAnimated: Boolean
    open fun InitializeSocketFromLocation(SkelComp: SkeletalMeshComponent, WorldLocation: Vector, WorldNormal: Vector)
    open fun GetSocketLocation(SkelComp: SkeletalMeshComponent): Vector

    companion object {
        fun Load(ResourceName: String): SkeletalMeshSocket
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshSocket
        fun GetDefaultObject(): SkeletalMeshSocket
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshSocket
        fun C(Other: UObject): SkeletalMeshSocket
        fun C(Other: Any): SkeletalMeshSocket
    }
}

external open class SmartNameContainer {
    open fun clone(): SmartNameContainer

    companion object {
        fun C(Other: UObject): SmartNameContainer
        fun C(Other: Any): SmartNameContainer
    }
}

external open class BoneReference {
    open var BoneName: String
    open fun clone(): BoneReference

    companion object {
        fun C(Other: UObject): BoneReference
        fun C(Other: Any): BoneReference
    }
}

external open class BlendProfileBoneEntry {
    open var BoneReference: BoneReference
    open var BlendScale: Number
    open fun clone(): BlendProfileBoneEntry

    companion object {
        fun C(Other: UObject): BlendProfileBoneEntry
        fun C(Other: Any): BlendProfileBoneEntry
    }
}

external open class BlendProfile : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OwningSkeleton: Skeleton
    open var ProfileEntries: Array<BlendProfileBoneEntry>

    companion object {
        fun Load(ResourceName: String): BlendProfile
        fun Find(Outer: UObject, ResourceName: String): BlendProfile
        fun GetDefaultObject(): BlendProfile
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlendProfile
        fun C(Other: UObject): BlendProfile
        fun C(Other: Any): BlendProfile
    }
}

external open class AnimSlotGroup {
    open var GroupName: String
    open var SlotNames: Array<String>
    open fun clone(): AnimSlotGroup

    companion object {
        fun C(Other: UObject): AnimSlotGroup
        fun C(Other: Any): AnimSlotGroup
    }
}

external object EConstraintTransform {
    var Absolute: String /* "Absolute" */
    var Relative: String /* "Relative" */
    var EConstraintTransform_MAX: String /* "EConstraintTransform_MAX" */
}

external open class RigTransformConstraint {
    open var TranformType: String /* "Absolute" | "Relative" | "EConstraintTransform_MAX" */
    open var ParentSpace: String
    open var Weight: Number
    open fun clone(): RigTransformConstraint

    companion object {
        fun C(Other: UObject): RigTransformConstraint
        fun C(Other: Any): RigTransformConstraint
    }
}

external open class TransformBaseConstraint {
    open var TransformConstraints: Array<RigTransformConstraint>
    open fun clone(): TransformBaseConstraint

    companion object {
        fun C(Other: UObject): TransformBaseConstraint
        fun C(Other: Any): TransformBaseConstraint
    }
}

external open class TransformBase {
    open var UNode: String
    open var Constraints: TransformBaseConstraint
    open fun clone(): TransformBase

    companion object {
        fun C(Other: UObject): TransformBase
        fun C(Other: Any): TransformBase
    }
}

external open class UNode {
    open var Name: String
    open var ParentName: String
    open var Transform: Transform
    open var DisplayName: String
    open var bAdvanced: Boolean
    open fun clone(): UNode

    companion object {
        fun C(Other: UObject): UNode
        fun C(Other: Any): UNode
    }
}

external open class Rig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TransformBases: Array<TransformBase>
    open var Nodes: Array<UNode>

    companion object {
        fun Load(ResourceName: String): Rig
        fun Find(Outer: UObject, ResourceName: String): Rig
        fun GetDefaultObject(): Rig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Rig
        fun C(Other: UObject): Rig
        fun C(Other: Any): Rig
    }
}

external open class NameMapping {
    open var NodeName: String
    open var BoneName: String
    open fun clone(): NameMapping

    companion object {
        fun C(Other: UObject): NameMapping
        fun C(Other: Any): NameMapping
    }
}

external open class RigConfiguration {
    open var Rig: Rig
    open var BoneMappingTable: Array<NameMapping>
    open fun clone(): RigConfiguration

    companion object {
        fun C(Other: UObject): RigConfiguration
        fun C(Other: Any): RigConfiguration
    }
}

external open class PreviewAttachedObjectPair {
    open var AttachedObject: UObject
    open var UObject: UObject
    open var AttachedTo: String
    open fun clone(): PreviewAttachedObjectPair

    companion object {
        fun C(Other: UObject): PreviewAttachedObjectPair
        fun C(Other: Any): PreviewAttachedObjectPair
    }
}

external open class PreviewAssetAttachContainer {
    open var AttachedObjects: Array<PreviewAttachedObjectPair>
    open fun clone(): PreviewAssetAttachContainer

    companion object {
        fun C(Other: UObject): PreviewAssetAttachContainer
        fun C(Other: Any): PreviewAssetAttachContainer
    }
}

external open class Skeleton : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BoneTree: Array<BoneNode>
    open var RefLocalPoses: Array<Transform>
    open var VirtualBoneGuid: Guid
    open var VirtualBones: Array<VirtualBone>
    open var Sockets: Array<SkeletalMeshSocket>
    open var SmartNames: SmartNameContainer
    open var BlendProfiles: Array<BlendProfile>
    open var SlotGroups: Array<AnimSlotGroup>
    open var PreviewSkeletalMesh: SkeletalMesh
    open var AdditionalPreviewSkeletalMeshes: DataAsset
    open var RigConfig: RigConfiguration
    open var AnimationNotifies: Array<String>
    open var PreviewAttachedAssetContainer: PreviewAssetAttachContainer
    open var AssetUserData: Array<AssetUserData>

    companion object {
        fun Load(ResourceName: String): Skeleton
        fun Find(Outer: UObject, ResourceName: String): Skeleton
        fun GetDefaultObject(): Skeleton
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Skeleton
        fun C(Other: UObject): Skeleton
        fun C(Other: Any): Skeleton
    }
}

external open class BoxSphereBounds {
    open var Origin: Vector
    open var BoxExtent: Vector
    open var SphereRadius: Number
    open fun clone(): BoxSphereBounds

    companion object {
        fun C(Other: UObject): BoxSphereBounds
        fun C(Other: Any): BoxSphereBounds
    }
}

external open class MeshUVChannelInfo {
    open var bInitialized: Boolean
    open var bOverrideDensities: Boolean
    open var LocalUVDensities: Number
    open fun clone(): MeshUVChannelInfo

    companion object {
        fun C(Other: UObject): MeshUVChannelInfo
        fun C(Other: Any): MeshUVChannelInfo
    }
}

external open class SkeletalMaterial {
    open var MaterialInterface: MaterialInterface
    open var MaterialSlotName: String
    open var bEnableShadowCasting: Boolean
    open var bRecomputeTangent: Boolean
    open var ImportedMaterialSlotName: String
    open var UVChannelData: MeshUVChannelInfo
    open fun clone(): SkeletalMaterial

    companion object {
        fun C(Other: UObject): SkeletalMaterial
        fun C(Other: Any): SkeletalMaterial
    }
}

external object EAxis {
    var None: String /* "None" */
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var EAxis_MAX: String /* "EAxis_MAX" */
}

external open class BoneMirrorInfo {
    open var SourceIndex: Number
    open var BoneFlipAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open fun clone(): BoneMirrorInfo

    companion object {
        fun C(Other: UObject): BoneMirrorInfo
        fun C(Other: Any): BoneMirrorInfo
    }
}

external open class PerPlatformFloat {
    open var Default: Number
    open var PerPlatform: Any
    open fun clone(): PerPlatformFloat

    companion object {
        fun C(Other: UObject): PerPlatformFloat
        fun C(Other: Any): PerPlatformFloat
    }
}

external object SkeletalMeshTerminationCriterion {
    var SMTC_NumOfTriangles: String /* "SMTC_NumOfTriangles" */
    var SMTC_NumOfVerts: String /* "SMTC_NumOfVerts" */
    var SMTC_TriangleOrVert: String /* "SMTC_TriangleOrVert" */
    var SMTC_AbsNumOfTriangles: String /* "SMTC_AbsNumOfTriangles" */
    var SMTC_AbsNumOfVerts: String /* "SMTC_AbsNumOfVerts" */
    var SMTC_AbsTriangleOrVert: String /* "SMTC_AbsTriangleOrVert" */
    var SMTC_MAX: String /* "SMTC_MAX" */
}

external object SkeletalMeshOptimizationType {
    var SMOT_NumOfTriangles: String /* "SMOT_NumOfTriangles" */
    var SMOT_MaxDeviation: String /* "SMOT_MaxDeviation" */
    var SMOT_TriangleOrDeviation: String /* "SMOT_TriangleOrDeviation" */
    var SMOT_MAX: String /* "SMOT_MAX" */
}

external object SkeletalMeshOptimizationImportance {
    var SMOI_Off: String /* "SMOI_Off" */
    var SMOI_Lowest: String /* "SMOI_Lowest" */
    var SMOI_Low: String /* "SMOI_Low" */
    var SMOI_Normal: String /* "SMOI_Normal" */
    var SMOI_High: String /* "SMOI_High" */
    var SMOI_Highest: String /* "SMOI_Highest" */
    var SMOI_MAX: String /* "SMOI_MAX" */
}

external open class AnimMetaData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AnimMetaData
        fun Find(Outer: UObject, ResourceName: String): AnimMetaData
        fun GetDefaultObject(): AnimMetaData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimMetaData
        fun C(Other: UObject): AnimMetaData
        fun C(Other: Any): AnimMetaData
    }
}

external open class AssetMapping {
    open var SourceAsset: AnimationAsset
    open var TargetAsset: AnimationAsset
    open fun clone(): AssetMapping

    companion object {
        fun C(Other: UObject): AssetMapping
        fun C(Other: Any): AssetMapping
    }
}

external open class AssetMappingTable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MappedAssets: Array<AssetMapping>

    companion object {
        fun Load(ResourceName: String): AssetMappingTable
        fun Find(Outer: UObject, ResourceName: String): AssetMappingTable
        fun GetDefaultObject(): AssetMappingTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetMappingTable
        fun C(Other: UObject): AssetMappingTable
        fun C(Other: Any): AssetMappingTable
    }
}

external open class SmartName {
    open var DisplayName: String
    open fun clone(): SmartName

    companion object {
        fun C(Other: UObject): SmartName
        fun C(Other: Any): SmartName
    }
}

external open class PoseData {
    open var SourceLocalSpacePose: Array<Transform>
    open var SourceCurveData: Array<Number>
    open var LocalSpacePose: Array<Transform>
    open var TrackToBufferIndex: Any
    open var CurveData: Array<Number>
    open fun clone(): PoseData

    companion object {
        fun C(Other: UObject): PoseData
        fun C(Other: Any): PoseData
    }
}

external open class AnimCurveBase {
    open var LastObservedName: String
    open var Name: SmartName
    open var CurveTypeFlags: Number
    open fun clone(): AnimCurveBase

    companion object {
        fun C(Other: UObject): AnimCurveBase
        fun C(Other: Any): AnimCurveBase
    }
}

external open class PoseDataContainer {
    open var PoseNames: Array<SmartName>
    open var Tracks: Array<String>
    open var TrackMap: Any
    open var Poses: Array<PoseData>
    open var Curves: Array<AnimCurveBase>
    open fun clone(): PoseDataContainer

    companion object {
        fun C(Other: UObject): PoseDataContainer
        fun C(Other: Any): PoseDataContainer
    }
}

external open class PoseAsset : AnimationAsset {
    constructor()
    constructor(Outer: UObject)
    open var PoseContainer: PoseDataContainer
    open var bAdditivePose: Boolean
    open var BasePoseIndex: Number
    open var RetargetSource: String
    open var SourceAnimation: AnimSequence

    companion object {
        fun Load(ResourceName: String): PoseAsset
        fun Find(Outer: UObject, ResourceName: String): PoseAsset
        fun GetDefaultObject(): PoseAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PoseAsset
        fun C(Other: UObject): PoseAsset
        fun C(Other: Any): PoseAsset
    }
}

external open class AnimationAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Skeleton: Skeleton
    open var MetaData: Array<AnimMetaData>
    open var ParentAsset: AnimationAsset
    open var ChildrenAssets: Array<AnimationAsset>
    open var AssetMappingTable: AssetMappingTable
    open var AssetUserData: Array<AssetUserData>
    open var ThumbnailInfo: ThumbnailInfo
    open var PreviewPoseAsset: PoseAsset
    open var PreviewSkeletalMesh: SkeletalMesh

    companion object {
        fun Load(ResourceName: String): AnimationAsset
        fun Find(Outer: UObject, ResourceName: String): AnimationAsset
        fun GetDefaultObject(): AnimationAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimationAsset
        fun C(Other: UObject): AnimationAsset
        fun C(Other: Any): AnimationAsset
    }
}

external open class AnimCompositeBase : AnimSequenceBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AnimCompositeBase
        fun Find(Outer: UObject, ResourceName: String): AnimCompositeBase
        fun GetDefaultObject(): AnimCompositeBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCompositeBase
        fun C(Other: UObject): AnimCompositeBase
        fun C(Other: Any): AnimCompositeBase
    }
}

external open class CurveFloat : CurveBase {
    constructor()
    constructor(Outer: UObject)
    open var FloatCurve: RichCurve
    open var bIsEventCurve: Boolean
    open fun GetFloatValue(InTime: Number): Number

    companion object {
        fun Load(ResourceName: String): CurveFloat
        fun Find(Outer: UObject, ResourceName: String): CurveFloat
        fun GetDefaultObject(): CurveFloat
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveFloat
        fun C(Other: UObject): CurveFloat
        fun C(Other: Any): CurveFloat
    }
}

external object EAlphaBlendOption {
    var Linear: String /* "Linear" */
    var Cubic: String /* "Cubic" */
    var HermiteCubic: String /* "HermiteCubic" */
    var Sinusoidal: String /* "Sinusoidal" */
    var QuadraticInOut: String /* "QuadraticInOut" */
    var CubicInOut: String /* "CubicInOut" */
    var QuarticInOut: String /* "QuarticInOut" */
    var QuinticInOut: String /* "QuinticInOut" */
    var CircularIn: String /* "CircularIn" */
    var CircularOut: String /* "CircularOut" */
    var CircularInOut: String /* "CircularInOut" */
    var ExpIn: String /* "ExpIn" */
    var ExpOut: String /* "ExpOut" */
    var ExpInOut: String /* "ExpInOut" */
    var Custom: String /* "Custom" */
    var EAlphaBlendOption_MAX: String /* "EAlphaBlendOption_MAX" */
}

external open class AlphaBlend {
    open var CustomCurve: CurveFloat
    open var BlendTime: Number
    open var BlendOption: String /* "Linear" | "Cubic" | "HermiteCubic" | "Sinusoidal" | "QuadraticInOut" | "CubicInOut" | "QuarticInOut" | "QuinticInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "ExpIn" | "ExpOut" | "ExpInOut" | "Custom" | "EAlphaBlendOption_MAX" */
    open fun clone(): AlphaBlend

    companion object {
        fun C(Other: UObject): AlphaBlend
        fun C(Other: Any): AlphaBlend
    }
}

external open class AnimSyncMarker {
    open var MarkerName: String
    open var Time: Number
    open var TrackIndex: Number
    open fun clone(): AnimSyncMarker

    companion object {
        fun C(Other: UObject): AnimSyncMarker
        fun C(Other: Any): AnimSyncMarker
    }
}

external open class MarkerSyncData {
    open var AuthoredSyncMarkers: Array<AnimSyncMarker>
    open fun clone(): MarkerSyncData

    companion object {
        fun C(Other: UObject): MarkerSyncData
        fun C(Other: Any): MarkerSyncData
    }
}

external open class CompositeSection : AnimLinkableElement {
    open var SectionName: String
    open var StartTime: Number
    open var NextSectionName: String
    open var MetaData: Array<AnimMetaData>
    override fun clone(): CompositeSection

    companion object {
        fun C(Other: UObject): CompositeSection
        fun C(Other: Any): CompositeSection
    }
}

external open class AnimSegment {
    open var AnimReference: AnimSequenceBase
    open var StartPos: Number
    open var AnimStartTime: Number
    open var AnimEndTime: Number
    open var AnimPlayRate: Number
    open var LoopingCount: Number
    open fun clone(): AnimSegment

    companion object {
        fun C(Other: UObject): AnimSegment
        fun C(Other: Any): AnimSegment
    }
}

external open class AnimTrack {
    open var AnimSegments: Array<AnimSegment>
    open fun clone(): AnimTrack

    companion object {
        fun C(Other: UObject): AnimTrack
        fun C(Other: Any): AnimTrack
    }
}

external open class SlotAnimationTrack {
    open var SlotName: String
    open var AnimTrack: AnimTrack
    open fun clone(): SlotAnimationTrack

    companion object {
        fun C(Other: UObject): SlotAnimationTrack
        fun C(Other: Any): SlotAnimationTrack
    }
}

external open class BranchingPoint : AnimLinkableElement {
    open var EventName: String
    open var DisplayTime: Number
    open var TriggerTimeOffset: Number
    override fun clone(): BranchingPoint

    companion object {
        fun C(Other: UObject): BranchingPoint
        fun C(Other: Any): BranchingPoint
    }
}

external object ERootMotionRootLock {
    var RefPose: String /* "RefPose" */
    var AnimFirstFrame: String /* "AnimFirstFrame" */
    var Zero: String /* "Zero" */
    var ERootMotionRootLock_MAX: String /* "ERootMotionRootLock_MAX" */
}

external object EAnimNotifyEventType {
    var Begin: String /* "Begin" */
    var End: String /* "End" */
    var EAnimNotifyEventType_MAX: String /* "EAnimNotifyEventType_MAX" */
}

external open class BranchingPointMarker {
    open var NotifyIndex: Number
    open var TriggerTime: Number
    open var NotifyEventType: String /* "Begin" | "End" | "EAnimNotifyEventType_MAX" */
    open fun clone(): BranchingPointMarker

    companion object {
        fun C(Other: UObject): BranchingPointMarker
        fun C(Other: Any): BranchingPointMarker
    }
}

external open class TimeStretchCurveMarker {
    open var Time: Number
    open var Alpha: Number
    open fun clone(): TimeStretchCurveMarker

    companion object {
        fun C(Other: UObject): TimeStretchCurveMarker
        fun C(Other: Any): TimeStretchCurveMarker
    }
}

external open class TimeStretchCurve {
    open var SamplingRate: Number
    open var CurveValueMinPrecision: Number
    open var Markers: Array<TimeStretchCurveMarker>
    open var Sum_dT_i_by_C_i: Number
    open fun clone(): TimeStretchCurve

    companion object {
        fun C(Other: UObject): TimeStretchCurve
        fun C(Other: Any): TimeStretchCurve
    }
}

external open class AnimMontage : AnimCompositeBase {
    constructor()
    constructor(Outer: UObject)
    open var BlendIn: AlphaBlend
    open var BlendInTime: Number
    open var BlendOut: AlphaBlend
    open var BlendOutTime: Number
    open var BlendOutTriggerTime: Number
    open var SyncGroup: String
    open var SyncSlotIndex: Number
    open var MarkerData: MarkerSyncData
    open var CompositeSections: Array<CompositeSection>
    open var SlotAnimTracks: Array<SlotAnimationTrack>
    open var BranchingPoints: Array<BranchingPoint>
    open var bEnableRootMotionTranslation: Boolean
    open var bEnableRootMotionRotation: Boolean
    open var bEnableAutoBlendOut: Boolean
    open var RootMotionRootLock: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */
    open var PreviewBasePose: AnimSequence
    open var BranchingPointMarkers: Array<BranchingPointMarker>
    open var BranchingPointStateNotifyIndices: Array<Number>
    open var TimeStretchCurve: TimeStretchCurve
    open var TimeStretchCurveName: String
    open fun GetDefaultBlendOutTime(): Number

    companion object {
        fun Load(ResourceName: String): AnimMontage
        fun Find(Outer: UObject, ResourceName: String): AnimMontage
        fun GetDefaultObject(): AnimMontage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimMontage
        fun C(Other: UObject): AnimMontage
        fun C(Other: Any): AnimMontage
    }
}

external object EAnimLinkMethod {
    var Absolute: String /* "Absolute" */
    var Relative: String /* "Relative" */
    var Proportional: String /* "Proportional" */
    var EAnimLinkMethod_MAX: String /* "EAnimLinkMethod_MAX" */
}

external open class AnimLinkableElement {
    open var LinkedMontage: AnimMontage
    open var SlotIndex: Number
    open var SegmentIndex: Number
    open var LinkMethod: String /* "Absolute" | "Relative" | "Proportional" | "EAnimLinkMethod_MAX" */
    open var CachedLinkMethod: String /* "Absolute" | "Relative" | "Proportional" | "EAnimLinkMethod_MAX" */
    open var SegmentBeginTime: Number
    open var SegmentLength: Number
    open var LinkValue: Number
    open var LinkedSequence: AnimSequenceBase
    open fun clone(): AnimLinkableElement

    companion object {
        fun C(Other: UObject): AnimLinkableElement
        fun C(Other: Any): AnimLinkableElement
    }
}

external open class AnimNotify : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NotifyColor: Color
    open fun Received_Notify(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase): Boolean
    open fun GetNotifyName(): String

    companion object {
        fun Load(ResourceName: String): AnimNotify
        fun Find(Outer: UObject, ResourceName: String): AnimNotify
        fun GetDefaultObject(): AnimNotify
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimNotify
        fun C(Other: UObject): AnimNotify
        fun C(Other: Any): AnimNotify
    }
}

external open class AnimNotifyState : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NotifyColor: Color
    open fun Received_NotifyTick(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase, FrameDeltaTime: Number): Boolean
    open fun Received_NotifyEnd(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase): Boolean
    open fun Received_NotifyBegin(MeshComp: SkeletalMeshComponent, Animation: AnimSequenceBase, TotalDuration: Number): Boolean
    open fun GetNotifyName(): String

    companion object {
        fun Load(ResourceName: String): AnimNotifyState
        fun Find(Outer: UObject, ResourceName: String): AnimNotifyState
        fun GetDefaultObject(): AnimNotifyState
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimNotifyState
        fun C(Other: UObject): AnimNotifyState
        fun C(Other: Any): AnimNotifyState
    }
}

external object EMontageNotifyTickType {
    var Queued: String /* "Queued" */
    var BranchingPoint: String /* "BranchingPoint" */
    var EMontageNotifyTickType_MAX: String /* "EMontageNotifyTickType_MAX" */
}

external object ENotifyFilterType {
    var NoFiltering: String /* "NoFiltering" */
    var LOD: String /* "LOD" */
    var ENotifyFilterType_MAX: String /* "ENotifyFilterType_MAX" */
}

external open class AnimNotifyEvent : AnimLinkableElement {
    open var DisplayTime: Number
    open var TriggerTimeOffset: Number
    open var EndTriggerTimeOffset: Number
    open var TriggerWeightThreshold: Number
    open var NotifyName: String
    open var Notify: AnimNotify
    open var NotifyStateClass: AnimNotifyState
    open var Duration: Number
    open var EndLink: AnimLinkableElement
    open var bConvertedFromBranchingPoint: Boolean
    open var MontageTickType: String /* "Queued" | "BranchingPoint" | "EMontageNotifyTickType_MAX" */
    open var NotifyTriggerChance: Number
    open var NotifyFilterType: String /* "NoFiltering" | "LOD" | "ENotifyFilterType_MAX" */
    open var NotifyFilterLOD: Number
    open var bTriggerOnDedicatedServer: Boolean
    open var bTriggerOnFollower: Boolean
    open var NotifyColor: Color
    open var TrackIndex: Number
    override fun clone(): AnimNotifyEvent
    open fun GetAnimNotifyEventTriggerTime(): Number

    companion object {
        fun C(Other: UObject): AnimNotifyEvent
        fun C(Other: Any): AnimNotifyEvent
        fun GetAnimNotifyEventTriggerTime(NotifyEvent: AnimNotifyEvent): Number
    }
}

external open class FloatCurve : AnimCurveBase {
    open var FloatCurve: RichCurve
    override fun clone(): FloatCurve

    companion object {
        fun C(Other: UObject): FloatCurve
        fun C(Other: Any): FloatCurve
    }
}

external open class VectorCurve : AnimCurveBase {
    open var FloatCurves: RichCurve
    override fun clone(): VectorCurve

    companion object {
        fun C(Other: UObject): VectorCurve
        fun C(Other: Any): VectorCurve
    }
}

external open class TransformCurve : AnimCurveBase {
    open var TranslationCurve: VectorCurve
    open var RotationCurve: VectorCurve
    open var ScaleCurve: VectorCurve
    override fun clone(): TransformCurve

    companion object {
        fun C(Other: UObject): TransformCurve
        fun C(Other: Any): TransformCurve
    }
}

external open class RawCurveTracks {
    open var FloatCurves: Array<FloatCurve>
    open var VectorCurves: Array<VectorCurve>
    open var TransformCurves: Array<TransformCurve>
    open fun clone(): RawCurveTracks

    companion object {
        fun C(Other: UObject): RawCurveTracks
        fun C(Other: Any): RawCurveTracks
    }
}

external open class AnimNotifyTrack {
    open var TrackName: String
    open var TrackColor: LinearColor
    open fun clone(): AnimNotifyTrack

    companion object {
        fun C(Other: UObject): AnimNotifyTrack
        fun C(Other: Any): AnimNotifyTrack
    }
}

external open class AnimSequenceBase : AnimationAsset {
    constructor()
    constructor(Outer: UObject)
    open var Notifies: Array<AnimNotifyEvent>
    open var SequenceLength: Number
    open var RateScale: Number
    open var RawCurveData: RawCurveTracks
    open var AnimNotifyTracks: Array<AnimNotifyTrack>
    open fun GetPlayLength(): Number
    open fun ReplaceAnimNotifyClass(NotifyName: String, NewNotifyName: String, NewNotifyClass: UObject): Number
    open fun ReplaceAnimNotifies(OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyReplaced: UnrealEngineDelegate<(OldNotify: AnimNotify, NewNotify: AnimNotify) -> Unit>)
    open fun ReplaceAnimNotifyStates(OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyStateReplaced: UnrealEngineDelegate<(OldNotifyState: AnimNotifyState, NewNotifyState: AnimNotifyState) -> Unit>)

    companion object {
        fun Load(ResourceName: String): AnimSequenceBase
        fun Find(Outer: UObject, ResourceName: String): AnimSequenceBase
        fun GetDefaultObject(): AnimSequenceBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimSequenceBase
        fun C(Other: UObject): AnimSequenceBase
        fun C(Other: Any): AnimSequenceBase
        fun ReplaceAnimNotifyClass(Sequence: AnimSequenceBase, NotifyName: String, NewNotifyName: String, NewNotifyClass: UObject): Number
        fun ReplaceAnimNotifies(AnimationSequence: AnimSequenceBase, OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyReplaced: UnrealEngineDelegate<(OldNotify: AnimNotify, NewNotify: AnimNotify) -> Unit>)
        fun ReplaceAnimNotifyStates(AnimationSequence: AnimSequenceBase, OldNotifyClass: UnrealEngineClass, NewNotifyClass: UnrealEngineClass, OnNotifyStateReplaced: UnrealEngineDelegate<(OldNotifyState: AnimNotifyState, NewNotifyState: AnimNotifyState) -> Unit>)
    }
}

external open class TrackToSkeletonMap {
    open var BoneTreeIndex: Number
    open fun clone(): TrackToSkeletonMap

    companion object {
        fun C(Other: UObject): TrackToSkeletonMap
        fun C(Other: Any): TrackToSkeletonMap
    }
}

external object AnimationCompressionFormat {
    var ACF_None: String /* "ACF_None" */
    var ACF_Float96NoW: String /* "ACF_Float96NoW" */
    var ACF_Fixed48NoW: String /* "ACF_Fixed48NoW" */
    var ACF_IntervalFixed32NoW: String /* "ACF_IntervalFixed32NoW" */
    var ACF_Fixed32NoW: String /* "ACF_Fixed32NoW" */
    var ACF_Float32NoW: String /* "ACF_Float32NoW" */
    var ACF_Identity: String /* "ACF_Identity" */
    var ACF_MAX: String /* "ACF_MAX" */
}

external open class AnimCompress : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Description: String
    open var bNeedsSkeleton: Boolean
    open var bEnableSegmenting: Boolean
    open var IdealNumFramesPerSegment: Any
    open var MaxNumFramesPerSegment: Any
    open var TranslationCompressionFormat: String /* "ACF_None" | "ACF_Float96NoW" | "ACF_Fixed48NoW" | "ACF_IntervalFixed32NoW" | "ACF_Fixed32NoW" | "ACF_Float32NoW" | "ACF_Identity" | "ACF_MAX" */
    open var RotationCompressionFormat: String /* "ACF_None" | "ACF_Float96NoW" | "ACF_Fixed48NoW" | "ACF_IntervalFixed32NoW" | "ACF_Fixed32NoW" | "ACF_Float32NoW" | "ACF_Identity" | "ACF_MAX" */
    open var ScaleCompressionFormat: String /* "ACF_None" | "ACF_Float96NoW" | "ACF_Fixed48NoW" | "ACF_IntervalFixed32NoW" | "ACF_Fixed32NoW" | "ACF_Float32NoW" | "ACF_Identity" | "ACF_MAX" */
    open var MaxCurveError: Number

    companion object {
        fun Load(ResourceName: String): AnimCompress
        fun Find(Outer: UObject, ResourceName: String): AnimCompress
        fun GetDefaultObject(): AnimCompress
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCompress
        fun C(Other: UObject): AnimCompress
        fun C(Other: Any): AnimCompress
    }
}

external open class AnimCurveCompressionCodec : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AnimCurveCompressionCodec
        fun Find(Outer: UObject, ResourceName: String): AnimCurveCompressionCodec
        fun GetDefaultObject(): AnimCurveCompressionCodec
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCurveCompressionCodec
        fun C(Other: UObject): AnimCurveCompressionCodec
        fun C(Other: Any): AnimCurveCompressionCodec
    }
}

external open class AnimCurveCompressionSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Codec: AnimCurveCompressionCodec

    companion object {
        fun Load(ResourceName: String): AnimCurveCompressionSettings
        fun Find(Outer: UObject, ResourceName: String): AnimCurveCompressionSettings
        fun GetDefaultObject(): AnimCurveCompressionSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimCurveCompressionSettings
        fun C(Other: UObject): AnimCurveCompressionSettings
        fun C(Other: Any): AnimCurveCompressionSettings
    }
}

external object EAdditiveAnimationType {
    var AAT_None: String /* "AAT_None" */
    var AAT_LocalSpaceBase: String /* "AAT_LocalSpaceBase" */
    var AAT_RotationOffsetMeshSpace: String /* "AAT_RotationOffsetMeshSpace" */
    var AAT_MAX: String /* "AAT_MAX" */
}

external object EAdditiveBasePoseType {
    var ABPT_None: String /* "ABPT_None" */
    var ABPT_RefPose: String /* "ABPT_RefPose" */
    var ABPT_AnimScaled: String /* "ABPT_AnimScaled" */
    var ABPT_AnimFrame: String /* "ABPT_AnimFrame" */
    var ABPT_MAX: String /* "ABPT_MAX" */
}

external object EAnimInterpolationType {
    var Linear: String /* "Linear" */
    var Step: String /* "Step" */
    var EAnimInterpolationType_MAX: String /* "EAnimInterpolationType_MAX" */
}

external object ERawCurveTrackTypes {
    var RCT_Float: String /* "RCT_Float" */
    var RCT_Vector: String /* "RCT_Vector" */
    var RCT_Transform: String /* "RCT_Transform" */
    var RCT_MAX: String /* "RCT_MAX" */
}

external interface `T$272` {
    var BonePath: Array<String>
}

external interface `T$273` {
    var EventNames: Array<String>
}

external interface `T$274` {
    var NotifyEvents: Array<AnimNotifyEvent>
}

external interface `T$275` {
    var Events: Array<AnimNotifyEvent>
}

external interface `T$276` {
    var TrackNames: Array<String>
}

external interface `T$277` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$278` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$279` {
    var TrackNames: Array<String>
}

external interface `T$280` {
    var Poses: Array<Transform>
}

external interface `T$281` {
    var Poses: Array<Transform>
}

external interface `T$282` {
    var Times: Array<Number>
    var Values: Array<Number>
}

external interface `T$283` {
    var PositionKeys: Array<Vector>
    var RotationKeys: Array<Quat>
    var ScalingKeys: Array<Vector>
}

external interface `T$284` {
    var PositionData: Array<Vector>
}

external interface `T$285` {
    var RotationData: Array<Quat>
}

external interface `T$286` {
    var ScaleData: Array<Vector>
}

external interface `T$287` {
    var Times: Array<Number>
    var Values: Array<Transform>
}

external interface `T$288` {
    var MarkerNames: Array<String>
}

external interface `T$289` {
    var Times: Array<Number>
    var Values: Array<Vector>
}

external interface `T$290` {
    var BonePath: Array<String>
}

external interface `T$291` {
    var EventNames: Array<String>
}

external interface `T$292` {
    var NotifyEvents: Array<AnimNotifyEvent>
}

external interface `T$293` {
    var Events: Array<AnimNotifyEvent>
}

external interface `T$294` {
    var TrackNames: Array<String>
}

external interface `T$295` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$296` {
    var Markers: Array<AnimSyncMarker>
}

external interface `T$297` {
    var TrackNames: Array<String>
}

external interface `T$298` {
    var Poses: Array<Transform>
}

external interface `T$299` {
    var Poses: Array<Transform>
}

external interface `T$300` {
    var Times: Array<Number>
    var Values: Array<Number>
}

external interface `T$301` {
    var PositionKeys: Array<Vector>
    var RotationKeys: Array<Quat>
    var ScalingKeys: Array<Vector>
}

external interface `T$302` {
    var PositionData: Array<Vector>
}

external interface `T$303` {
    var RotationData: Array<Quat>
}

external interface `T$304` {
    var ScaleData: Array<Vector>
}

external interface `T$305` {
    var Times: Array<Number>
    var Values: Array<Transform>
}

external interface `T$306` {
    var MarkerNames: Array<String>
}

external interface `T$307` {
    var Times: Array<Number>
    var Values: Array<Vector>
}

external open class AnimSequence : AnimSequenceBase {
    constructor()
    constructor(Outer: UObject)
    open var ImportFileFramerate: Number
    open var ImportResampleFramerate: Number
    open var NumFrames: Number
    open var TrackToSkeletonMapTable: Array<TrackToSkeletonMap>
    open var RawDataGuid: Guid
    open var AnimationTrackNames: Array<String>
    open var CompressionScheme: AnimCompress
    open var bAllowFrameStripping: Boolean
    open var CurveCompressionSettings: AnimCurveCompressionSettings
    open var AdditiveAnimType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */
    open var RefPoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_MAX" */
    open var RefPoseSeq: AnimSequence
    open var RefFrameIndex: Number
    open var RetargetSource: String
    open var Interpolation: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */
    open var bEnableRootMotion: Boolean
    open var RootMotionRootLock: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */
    open var bForceRootLock: Boolean
    open var bUseNormalizedRootMotionScale: Boolean
    open var bRootMotionSettingsCopiedFromMontage: Boolean
    open var CompressCommandletVersion: Number
    open var bDoNotOverrideCompression: Boolean
    open var AssetImportData: AssetImportData
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var bNeedsRebake: Boolean
    open var AuthoredSyncMarkers: Array<AnimSyncMarker>
    open fun AddAnimationNotifyEvent(NotifyTrackName: String, StartTime: Number, NotifyClass: UnrealEngineClass): AnimNotify
    open fun AddAnimationNotifyEventObject(StartTime: Number, Notify: AnimNotify, NotifyTrackName: String)
    open fun AddAnimationNotifyStateEvent(NotifyTrackName: String, StartTime: Number, Duration: Number, NotifyStateClass: UnrealEngineClass): AnimNotifyState
    open fun AddAnimationNotifyStateEventObject(StartTime: Number, Duration: Number, NotifyState: AnimNotifyState, NotifyTrackName: String)
    open fun AddAnimationNotifyTrack(NotifyTrackName: String, TrackColor: LinearColor)
    open fun AddAnimationSyncMarker(MarkerName: String, Time: Number, NotifyTrackName: String)
    open fun AddCurve(CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */, bMetaDataCurve: Boolean)
    open fun AddFloatCurveKey(CurveName: String, Time: Number, Value: Number)
    open fun AddFloatCurveKeys(CurveName: String, Times: Array<Number>, Values: Array<Number>)
    open fun AddMetaData(MetaDataClass: UnrealEngineClass, MetaDataInstance: AnimMetaData)
    open fun AddMetaDataObject(MetaDataObject: AnimMetaData)
    open fun AddTransformationCurveKey(CurveName: String, Time: Number, Transform: Transform)
    open fun AddTransformationCurveKeys(CurveName: String, Times: Array<Number>, Transforms: Array<Transform>)
    open fun AddVectorCurveKey(CurveName: String, Time: Number, Vector: Vector)
    open fun AddVectorCurveKeys(CurveName: String, Times: Array<Number>, Vectors: Array<Vector>)
    open fun AddVirtualBone(SourceBoneName: String, TargetBoneName: String, VirtualBoneName: String = definedExternally): `T$34`
    open fun ContainsMetaDataOfClass(MetaDataClass: UnrealEngineClass): Boolean
    open fun CopyAnimNotifiesFromSequence(DestAnimSequence: AnimSequence)
    open fun DoesBoneNameExist(BoneName: String, bExists: Boolean = definedExternally): `T$33`
    open fun DoesCurveExist(CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): Boolean
    open fun FinalizeBoneAnimation()
    open fun FindBonePathToRoot(BoneName: String, BonePath: Array<String> = definedExternally): `T$272`
    open fun GetAdditiveAnimationType(AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */ = definedExternally): `T$31`
    open fun GetAdditiveBasePoseType(AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_MAX" */ = definedExternally): `T$30`
    open fun GetAnimationInterpolationType(InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */ = definedExternally): `T$29`
    open fun GetAnimationNotifyEventNames(EventNames: Array<String> = definedExternally): `T$273`
    open fun GetAnimationNotifyEvents(NotifyEvents: Array<AnimNotifyEvent> = definedExternally): `T$274`
    open fun GetAnimationNotifyEventsForTrack(NotifyTrackName: String, Events: Array<AnimNotifyEvent> = definedExternally): `T$275`
    open fun GetAnimationNotifyTrackNames(TrackNames: Array<String> = definedExternally): `T$276`
    open fun GetAnimationSyncMarkers(Markers: Array<AnimSyncMarker> = definedExternally): `T$277`
    open fun GetAnimationSyncMarkersForTrack(NotifyTrackName: String, Markers: Array<AnimSyncMarker> = definedExternally): `T$278`
    open fun GetAnimationTrackNames(TrackNames: Array<String> = definedExternally): `T$279`
    open fun GetBonePoseForFrame(BoneName: String, Frame: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$21`
    open fun GetBonePoseForTime(BoneName: String, Time: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$21`
    open fun GetBonePosesForFrame(BoneNames: Array<String>, Frame: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$280`
    open fun GetBonePosesForTime(BoneNames: Array<String>, Time: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$281`
    open fun GetCompressionScheme(CompressionScheme: AnimCompress = definedExternally): `T$18`
    open fun GetFloatKeys(CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Number> = definedExternally): `T$282`
    open fun GetFrameAtTime(Time: Number, Frame: Number = definedExternally): `T$16`
    open fun GetMetaData(MetaData: Array<AnimMetaData>)
    open fun GetMetaDataOfClass(MetaDataClass: UnrealEngineClass, MetaDataOfClass: Array<AnimMetaData>)
    open fun GetNumFrames(NumFrames: Number = definedExternally): `T$15`
    open fun GetRateScale(RateScale: Number = definedExternally): `T$14`
    open fun GetRawTrackData(TrackName: String, PositionKeys: Array<Vector> = definedExternally, RotationKeys: Array<Quat> = definedExternally, ScalingKeys: Array<Vector> = definedExternally): `T$283`
    open fun GetRawTrackPositionData(TrackName: String, PositionData: Array<Vector> = definedExternally): `T$284`
    open fun GetRawTrackRotationData(TrackName: String, RotationData: Array<Quat> = definedExternally): `T$285`
    open fun GetRawTrackScaleData(TrackName: String, ScaleData: Array<Vector> = definedExternally): `T$286`
    open fun GetRootMotionLockType(LockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */ = definedExternally): `T$9`
    open fun GetSequenceLength(Length: Number = definedExternally): `T$8`
    open fun GetTimeAtFrame(Frame: Number, Time: Number = definedExternally): `T$7`
    open fun GetTransformationKeys(CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Transform> = definedExternally): `T$287`
    open fun GetUniqueMarkerNames(MarkerNames: Array<String> = definedExternally): `T$288`
    open fun GetVectorKeys(CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Vector> = definedExternally): `T$289`
    open fun IsRootMotionEnabled(): Boolean
    open fun IsRootMotionLockForced(): Boolean
    open fun IsValidAnimationSyncMarkerName(MarkerName: String): Boolean
    open fun IsValidAnimNotifyTrackName(NotifyTrackName: String): Boolean
    open fun IsValidRawAnimationTrackName(TrackName: String): Boolean
    open fun IsValidTime(Time: Number, IsValid: Boolean = definedExternally): `T$3`
    open fun RemoveAllAnimationNotifyTracks()
    open fun RemoveAllAnimationSyncMarkers()
    open fun RemoveAllBoneAnimation()
    open fun RemoveAllCurveData()
    open fun RemoveAllMetaData()
    open fun RemoveAllVirtualBones()
    open fun RemoveAnimationNotifyEventsByName(NotifyName: String): Number
    open fun RemoveAnimationNotifyEventsByTrack(NotifyTrackName: String): Number
    open fun RemoveAnimationNotifyTrack(NotifyTrackName: String)
    open fun RemoveAnimationSyncMarkersByName(MarkerName: String): Number
    open fun RemoveAnimationSyncMarkersByTrack(NotifyTrackName: String): Number
    open fun RemoveBoneAnimation(BoneName: String, bIncludeChildren: Boolean, bFinalize: Boolean)
    open fun RemoveCurve(CurveName: String, bRemoveNameFromSkeleton: Boolean)
    open fun RemoveMetaData(MetaDataObject: AnimMetaData)
    open fun RemoveMetaDataOfClass(MetaDataClass: UnrealEngineClass)
    open fun RemoveVirtualBone(VirtualBoneName: String)
    open fun RemoveVirtualBones(VirtualBoneNames: Array<String>)
    open fun SetAdditiveAnimationType(AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */)
    open fun SetAdditiveBasePoseType(AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_MAX" */)
    open fun SetAnimationInterpolationType(InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */)
    open fun SetCompressionScheme(CompressionScheme: AnimCompress)
    open fun SetIsRootMotionLockForced(bForced: Boolean)
    open fun SetRateScale(RateScale: Number)
    open fun SetRootMotionEnabled(bEnabled: Boolean)
    open fun SetRootMotionLockType(RootMotionLockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */)

    companion object {
        fun Load(ResourceName: String): AnimSequence
        fun Find(Outer: UObject, ResourceName: String): AnimSequence
        fun GetDefaultObject(): AnimSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimSequence
        fun C(Other: UObject): AnimSequence
        fun C(Other: Any): AnimSequence
        fun AddAnimationNotifyEvent(AnimationSequence: AnimSequence, NotifyTrackName: String, StartTime: Number, NotifyClass: UnrealEngineClass): AnimNotify
        fun AddAnimationNotifyEventObject(AnimationSequence: AnimSequence, StartTime: Number, Notify: AnimNotify, NotifyTrackName: String)
        fun AddAnimationNotifyStateEvent(AnimationSequence: AnimSequence, NotifyTrackName: String, StartTime: Number, Duration: Number, NotifyStateClass: UnrealEngineClass): AnimNotifyState
        fun AddAnimationNotifyStateEventObject(AnimationSequence: AnimSequence, StartTime: Number, Duration: Number, NotifyState: AnimNotifyState, NotifyTrackName: String)
        fun AddAnimationNotifyTrack(AnimationSequence: AnimSequence, NotifyTrackName: String, TrackColor: LinearColor)
        fun AddAnimationSyncMarker(AnimationSequence: AnimSequence, MarkerName: String, Time: Number, NotifyTrackName: String)
        fun AddCurve(AnimationSequence: AnimSequence, CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */, bMetaDataCurve: Boolean)
        fun AddFloatCurveKey(AnimationSequence: AnimSequence, CurveName: String, Time: Number, Value: Number)
        fun AddFloatCurveKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number>, Values: Array<Number>)
        fun AddMetaData(AnimationSequence: AnimSequence, MetaDataClass: UnrealEngineClass, MetaDataInstance: AnimMetaData)
        fun AddMetaDataObject(AnimationSequence: AnimSequence, MetaDataObject: AnimMetaData)
        fun AddTransformationCurveKey(AnimationSequence: AnimSequence, CurveName: String, Time: Number, Transform: Transform)
        fun AddTransformationCurveKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number>, Transforms: Array<Transform>)
        fun AddVectorCurveKey(AnimationSequence: AnimSequence, CurveName: String, Time: Number, Vector: Vector)
        fun AddVectorCurveKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number>, Vectors: Array<Vector>)
        fun AddVirtualBone(AnimationSequence: AnimSequence, SourceBoneName: String, TargetBoneName: String, VirtualBoneName: String = definedExternally): `T$34`
        fun ContainsMetaDataOfClass(AnimationSequence: AnimSequence, MetaDataClass: UnrealEngineClass): Boolean
        fun CopyAnimNotifiesFromSequence(SrcAnimSequence: AnimSequence, DestAnimSequence: AnimSequence)
        fun DoesBoneNameExist(AnimationSequence: AnimSequence, BoneName: String, bExists: Boolean = definedExternally): `T$33`
        fun DoesCurveExist(AnimationSequence: AnimSequence, CurveName: String, CurveType: String /* "RCT_Float" | "RCT_Vector" | "RCT_Transform" | "RCT_MAX" */): Boolean
        fun FinalizeBoneAnimation(AnimationSequence: AnimSequence)
        fun FindBonePathToRoot(AnimationSequence: AnimSequence, BoneName: String, BonePath: Array<String> = definedExternally): `T$290`
        fun GetAdditiveAnimationType(AnimationSequence: AnimSequence, AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */ = definedExternally): `T$31`
        fun GetAdditiveBasePoseType(AnimationSequence: AnimSequence, AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_MAX" */ = definedExternally): `T$30`
        fun GetAnimationInterpolationType(AnimationSequence: AnimSequence, InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */ = definedExternally): `T$29`
        fun GetAnimationNotifyEventNames(AnimationSequence: AnimSequence, EventNames: Array<String> = definedExternally): `T$291`
        fun GetAnimationNotifyEvents(AnimationSequence: AnimSequence, NotifyEvents: Array<AnimNotifyEvent> = definedExternally): `T$292`
        fun GetAnimationNotifyEventsForTrack(AnimationSequence: AnimSequence, NotifyTrackName: String, Events: Array<AnimNotifyEvent> = definedExternally): `T$293`
        fun GetAnimationNotifyTrackNames(AnimationSequence: AnimSequence, TrackNames: Array<String> = definedExternally): `T$294`
        fun GetAnimationSyncMarkers(AnimationSequence: AnimSequence, Markers: Array<AnimSyncMarker> = definedExternally): `T$295`
        fun GetAnimationSyncMarkersForTrack(AnimationSequence: AnimSequence, NotifyTrackName: String, Markers: Array<AnimSyncMarker> = definedExternally): `T$296`
        fun GetAnimationTrackNames(AnimationSequence: AnimSequence, TrackNames: Array<String> = definedExternally): `T$297`
        fun GetBonePoseForFrame(AnimationSequence: AnimSequence, BoneName: String, Frame: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$21`
        fun GetBonePoseForTime(AnimationSequence: AnimSequence, BoneName: String, Time: Number, bExtractRootMotion: Boolean, Pose: Transform = definedExternally): `T$21`
        fun GetBonePosesForFrame(AnimationSequence: AnimSequence, BoneNames: Array<String>, Frame: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$298`
        fun GetBonePosesForTime(AnimationSequence: AnimSequence, BoneNames: Array<String>, Time: Number, bExtractRootMotion: Boolean, Poses: Array<Transform> = definedExternally, PreviewMesh: SkeletalMesh = definedExternally): `T$299`
        fun GetCompressionScheme(AnimationSequence: AnimSequence, CompressionScheme: AnimCompress = definedExternally): `T$18`
        fun GetFloatKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Number> = definedExternally): `T$300`
        fun GetFrameAtTime(AnimationSequence: AnimSequence, Time: Number, Frame: Number = definedExternally): `T$16`
        fun GetMetaData(AnimationSequence: AnimSequence, MetaData: Array<AnimMetaData>)
        fun GetMetaDataOfClass(AnimationSequence: AnimSequence, MetaDataClass: UnrealEngineClass, MetaDataOfClass: Array<AnimMetaData>)
        fun GetNumFrames(AnimationSequence: AnimSequence, NumFrames: Number = definedExternally): `T$15`
        fun GetRateScale(AnimationSequence: AnimSequence, RateScale: Number = definedExternally): `T$14`
        fun GetRawTrackData(AnimationSequence: AnimSequence, TrackName: String, PositionKeys: Array<Vector> = definedExternally, RotationKeys: Array<Quat> = definedExternally, ScalingKeys: Array<Vector> = definedExternally): `T$301`
        fun GetRawTrackPositionData(AnimationSequence: AnimSequence, TrackName: String, PositionData: Array<Vector> = definedExternally): `T$302`
        fun GetRawTrackRotationData(AnimationSequence: AnimSequence, TrackName: String, RotationData: Array<Quat> = definedExternally): `T$303`
        fun GetRawTrackScaleData(AnimationSequence: AnimSequence, TrackName: String, ScaleData: Array<Vector> = definedExternally): `T$304`
        fun GetRootMotionLockType(AnimationSequence: AnimSequence, LockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */ = definedExternally): `T$9`
        fun GetSequenceLength(AnimationSequence: AnimSequence, Length: Number = definedExternally): `T$8`
        fun GetTimeAtFrame(AnimationSequence: AnimSequence, Frame: Number, Time: Number = definedExternally): `T$7`
        fun GetTransformationKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Transform> = definedExternally): `T$305`
        fun GetUniqueMarkerNames(AnimationSequence: AnimSequence, MarkerNames: Array<String> = definedExternally): `T$306`
        fun GetVectorKeys(AnimationSequence: AnimSequence, CurveName: String, Times: Array<Number> = definedExternally, Values: Array<Vector> = definedExternally): `T$307`
        fun IsRootMotionEnabled(AnimationSequence: AnimSequence): Boolean
        fun IsRootMotionLockForced(AnimationSequence: AnimSequence): Boolean
        fun IsValidAnimationSyncMarkerName(AnimationSequence: AnimSequence, MarkerName: String): Boolean
        fun IsValidAnimNotifyTrackName(AnimationSequence: AnimSequence, NotifyTrackName: String): Boolean
        fun IsValidRawAnimationTrackName(AnimationSequence: AnimSequence, TrackName: String): Boolean
        fun IsValidTime(AnimationSequence: AnimSequence, Time: Number, IsValid: Boolean = definedExternally): `T$3`
        fun RemoveAllAnimationNotifyTracks(AnimationSequence: AnimSequence)
        fun RemoveAllAnimationSyncMarkers(AnimationSequence: AnimSequence)
        fun RemoveAllBoneAnimation(AnimationSequence: AnimSequence)
        fun RemoveAllCurveData(AnimationSequence: AnimSequence)
        fun RemoveAllMetaData(AnimationSequence: AnimSequence)
        fun RemoveAllVirtualBones(AnimationSequence: AnimSequence)
        fun RemoveAnimationNotifyEventsByName(AnimationSequence: AnimSequence, NotifyName: String): Number
        fun RemoveAnimationNotifyEventsByTrack(AnimationSequence: AnimSequence, NotifyTrackName: String): Number
        fun RemoveAnimationNotifyTrack(AnimationSequence: AnimSequence, NotifyTrackName: String)
        fun RemoveAnimationSyncMarkersByName(AnimationSequence: AnimSequence, MarkerName: String): Number
        fun RemoveAnimationSyncMarkersByTrack(AnimationSequence: AnimSequence, NotifyTrackName: String): Number
        fun RemoveBoneAnimation(AnimationSequence: AnimSequence, BoneName: String, bIncludeChildren: Boolean, bFinalize: Boolean)
        fun RemoveCurve(AnimationSequence: AnimSequence, CurveName: String, bRemoveNameFromSkeleton: Boolean)
        fun RemoveMetaData(AnimationSequence: AnimSequence, MetaDataObject: AnimMetaData)
        fun RemoveMetaDataOfClass(AnimationSequence: AnimSequence, MetaDataClass: UnrealEngineClass)
        fun RemoveVirtualBone(AnimationSequence: AnimSequence, VirtualBoneName: String)
        fun RemoveVirtualBones(AnimationSequence: AnimSequence, VirtualBoneNames: Array<String>)
        fun SetAdditiveAnimationType(AnimationSequence: AnimSequence, AdditiveAnimationType: String /* "AAT_None" | "AAT_LocalSpaceBase" | "AAT_RotationOffsetMeshSpace" | "AAT_MAX" */)
        fun SetAdditiveBasePoseType(AnimationSequence: AnimSequence, AdditiveBasePoseType: String /* "ABPT_None" | "ABPT_RefPose" | "ABPT_AnimScaled" | "ABPT_AnimFrame" | "ABPT_MAX" */)
        fun SetAnimationInterpolationType(AnimationSequence: AnimSequence, InterpolationType: String /* "Linear" | "Step" | "EAnimInterpolationType_MAX" */)
        fun SetCompressionScheme(AnimationSequence: AnimSequence, CompressionScheme: AnimCompress)
        fun SetIsRootMotionLockForced(AnimationSequence: AnimSequence, bForced: Boolean)
        fun SetRateScale(AnimationSequence: AnimSequence, RateScale: Number)
        fun SetRootMotionEnabled(AnimationSequence: AnimSequence, bEnabled: Boolean)
        fun SetRootMotionLockType(AnimationSequence: AnimSequence, RootMotionLockType: String /* "RefPose" | "AnimFirstFrame" | "Zero" | "ERootMotionRootLock_MAX" */)
    }
}

external open class SkeletalMeshOptimizationSettings {
    open var TerminationCriterion: String /* "SMTC_NumOfTriangles" | "SMTC_NumOfVerts" | "SMTC_TriangleOrVert" | "SMTC_AbsNumOfTriangles" | "SMTC_AbsNumOfVerts" | "SMTC_AbsTriangleOrVert" | "SMTC_MAX" */
    open var NumOfTrianglesPercentage: Number
    open var NumOfVertPercentage: Number
    open var MaxNumOfTriangles: Any
    open var MaxNumOfVerts: Any
    open var MaxDeviationPercentage: Number
    open var ReductionMethod: String /* "SMOT_NumOfTriangles" | "SMOT_MaxDeviation" | "SMOT_TriangleOrDeviation" | "SMOT_MAX" */
    open var SilhouetteImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var TextureImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var ShadingImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var SkinningImportance: String /* "SMOI_Off" | "SMOI_Lowest" | "SMOI_Low" | "SMOI_Normal" | "SMOI_High" | "SMOI_Highest" | "SMOI_MAX" */
    open var bRemapMorphTargets: Boolean
    open var bRecalcNormals: Boolean
    open var WeldingThreshold: Number
    open var NormalsThreshold: Number
    open var MaxBonesPerVertex: Number
    open var bEnforceBoneBoundaries: Boolean
    open var VolumeImportance: Number
    open var bLockEdges: Boolean
    open var BaseLOD: Number
    open var BonesToRemove: Array<BoneReference>
    open var BakePose: AnimSequence
    open fun clone(): SkeletalMeshOptimizationSettings

    companion object {
        fun C(Other: UObject): SkeletalMeshOptimizationSettings
        fun C(Other: Any): SkeletalMeshOptimizationSettings
    }
}

external open class SkeletalMeshLODInfo {
    open var ScreenSize: PerPlatformFloat
    open var LODHysteresis: Number
    open var LODMaterialMap: Array<Number>
    open var bEnableShadowCasting: Array<Boolean>
    open var RemovedBones: Array<String>
    open var ReductionSettings: SkeletalMeshOptimizationSettings
    open var BonesToRemove: Array<BoneReference>
    open var BonesToPrioritize: Array<BoneReference>
    open var WeightOfPrioritization: Number
    open var BakePose: AnimSequence
    open var BakePoseOverride: AnimSequence
    open var SourceImportFilename: String
    open var bHasBeenSimplified: Boolean
    open var bHasPerLODVertexColors: Boolean
    open var bAllowCPUAccess: Boolean
    open var bSupportUniformlyDistributedSampling: Boolean
    open var bImportWithBaseMesh: Boolean
    open fun clone(): SkeletalMeshLODInfo

    companion object {
        fun C(Other: UObject): SkeletalMeshLODInfo
        fun C(Other: Any): SkeletalMeshLODInfo
    }
}

external open class PerPlatformInt {
    open var Default: Number
    open var PerPlatform: Any
    open fun clone(): PerPlatformInt

    companion object {
        fun C(Other: UObject): PerPlatformInt
        fun C(Other: Any): PerPlatformInt
    }
}

external open class PerPlatformBool {
    open var Default: Boolean
    open var PerPlatform: Any
    open fun clone(): PerPlatformBool

    companion object {
        fun C(Other: UObject): PerPlatformBool
        fun C(Other: Any): PerPlatformBool
    }
}

external object EBoneFilterActionOption {
    var Remove: String /* "Remove" */
    var Keep: String /* "Keep" */
    var Invalid: String /* "Invalid" */
    var EBoneFilterActionOption_MAX: String /* "EBoneFilterActionOption_MAX" */
}

external open class BoneFilter {
    open var bExcludeSelf: Boolean
    open var BoneName: String
    open fun clone(): BoneFilter

    companion object {
        fun C(Other: UObject): BoneFilter
        fun C(Other: Any): BoneFilter
    }
}

external open class SkeletalMeshLODGroupSettings {
    open var ScreenSize: PerPlatformFloat
    open var LODHysteresis: Number
    open var BoneFilterActionOption: String /* "Remove" | "Keep" | "Invalid" | "EBoneFilterActionOption_MAX" */
    open var BoneList: Array<BoneFilter>
    open var BonesToPrioritize: Array<String>
    open var WeightOfPrioritization: Number
    open var BakePose: AnimSequence
    open var ReductionSettings: SkeletalMeshOptimizationSettings
    open fun clone(): SkeletalMeshLODGroupSettings

    companion object {
        fun C(Other: UObject): SkeletalMeshLODGroupSettings
        fun C(Other: Any): SkeletalMeshLODGroupSettings
    }
}

external open class SkeletalMeshLODSettings : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var MinLOD: PerPlatformInt
    open var DisableBelowMinLodStripping: PerPlatformBool
    open var LODGroups: Array<SkeletalMeshLODGroupSettings>

    companion object {
        fun Load(ResourceName: String): SkeletalMeshLODSettings
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshLODSettings
        fun GetDefaultObject(): SkeletalMeshLODSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshLODSettings
        fun C(Other: UObject): SkeletalMeshLODSettings
        fun C(Other: Any): SkeletalMeshLODSettings
    }
}

external open class PhysicalAnimationData {
    open var BodyName: String
    open var bIsLocalSimulation: Boolean
    open var OrientationStrength: Number
    open var AngularVelocityStrength: Number
    open var PositionStrength: Number
    open var VelocityStrength: Number
    open var MaxLinearForce: Number
    open var MaxAngularForce: Number
    open fun clone(): PhysicalAnimationData

    companion object {
        fun C(Other: UObject): PhysicalAnimationData
        fun C(Other: Any): PhysicalAnimationData
    }
}

external open class PhysicalAnimationProfile {
    open var ProfileName: String
    open var PhysicalAnimationData: PhysicalAnimationData
    open fun clone(): PhysicalAnimationProfile

    companion object {
        fun C(Other: UObject): PhysicalAnimationProfile
        fun C(Other: Any): PhysicalAnimationProfile
    }
}

external open class SkeletalBodySetup : BodySetup {
    constructor()
    constructor(Outer: UObject)
    open var CurrentPhysicalAnimationProfile: PhysicalAnimationProfile
    open var bSkipScaleFromAnimation: Boolean
    open var PhysicalAnimationData: Array<PhysicalAnimationProfile>

    companion object {
        fun Load(ResourceName: String): SkeletalBodySetup
        fun Find(Outer: UObject, ResourceName: String): SkeletalBodySetup
        fun GetDefaultObject(): SkeletalBodySetup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalBodySetup
        fun C(Other: UObject): SkeletalBodySetup
        fun C(Other: Any): SkeletalBodySetup
    }
}

external open class ConstraintBaseParams {
    open var Stiffness: Number
    open var Damping: Number
    open var Restitution: Number
    open var ContactDistance: Number
    open var bSoftConstraint: Boolean
    open fun clone(): ConstraintBaseParams

    companion object {
        fun C(Other: UObject): ConstraintBaseParams
        fun C(Other: Any): ConstraintBaseParams
    }
}

external object ELinearConstraintMotion {
    var LCM_Free: String /* "LCM_Free" */
    var LCM_Limited: String /* "LCM_Limited" */
    var LCM_Locked: String /* "LCM_Locked" */
    var LCM_MAX: String /* "LCM_MAX" */
}

external open class LinearConstraint : ConstraintBaseParams {
    open var Limit: Number
    open var XMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var YMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var ZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    override fun clone(): LinearConstraint

    companion object {
        fun C(Other: UObject): LinearConstraint
        fun C(Other: Any): LinearConstraint
    }
}

external object EAngularConstraintMotion {
    var ACM_Free: String /* "ACM_Free" */
    var ACM_Limited: String /* "ACM_Limited" */
    var ACM_Locked: String /* "ACM_Locked" */
    var ACM_MAX: String /* "ACM_MAX" */
}

external open class ConeConstraint : ConstraintBaseParams {
    open var Swing1LimitDegrees: Number
    open var Swing2LimitDegrees: Number
    open var Swing1Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var Swing2Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    override fun clone(): ConeConstraint

    companion object {
        fun C(Other: UObject): ConeConstraint
        fun C(Other: Any): ConeConstraint
    }
}

external open class TwistConstraint : ConstraintBaseParams {
    open var TwistLimitDegrees: Number
    open var TwistMotion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    override fun clone(): TwistConstraint

    companion object {
        fun C(Other: UObject): TwistConstraint
        fun C(Other: Any): TwistConstraint
    }
}

external open class ConstraintDrive {
    open var Stiffness: Number
    open var Damping: Number
    open var MaxForce: Number
    open var bEnablePositionDrive: Boolean
    open var bEnableVelocityDrive: Boolean
    open fun clone(): ConstraintDrive

    companion object {
        fun C(Other: UObject): ConstraintDrive
        fun C(Other: Any): ConstraintDrive
    }
}

external open class LinearDriveConstraint {
    open var PositionTarget: Vector
    open var VelocityTarget: Vector
    open var XDrive: ConstraintDrive
    open var YDrive: ConstraintDrive
    open var ZDrive: ConstraintDrive
    open var bEnablePositionDrive: Boolean
    open fun clone(): LinearDriveConstraint

    companion object {
        fun C(Other: UObject): LinearDriveConstraint
        fun C(Other: Any): LinearDriveConstraint
    }
}

external object EAngularDriveMode {
    var SLERP: String /* "SLERP" */
    var TwistAndSwing: String /* "TwistAndSwing" */
    var EAngularDriveMode_MAX: String /* "EAngularDriveMode_MAX" */
}

external open class AngularDriveConstraint {
    open var TwistDrive: ConstraintDrive
    open var SwingDrive: ConstraintDrive
    open var SlerpDrive: ConstraintDrive
    open var OrientationTarget: Rotator
    open var AngularVelocityTarget: Vector
    open var AngularDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */
    open fun clone(): AngularDriveConstraint

    companion object {
        fun C(Other: UObject): AngularDriveConstraint
        fun C(Other: Any): AngularDriveConstraint
    }
}

external open class ConstraintProfileProperties {
    open var ProjectionLinearTolerance: Number
    open var ProjectionAngularTolerance: Number
    open var LinearBreakThreshold: Number
    open var AngularBreakThreshold: Number
    open var LinearLimit: LinearConstraint
    open var ConeLimit: ConeConstraint
    open var TwistLimit: TwistConstraint
    open var LinearDrive: LinearDriveConstraint
    open var AngularDrive: AngularDriveConstraint
    open var bDisableCollision: Boolean
    open var bParentDominates: Boolean
    open var bEnableProjection: Boolean
    open var bAngularBreakable: Boolean
    open var bLinearBreakable: Boolean
    open fun clone(): ConstraintProfileProperties

    companion object {
        fun C(Other: UObject): ConstraintProfileProperties
        fun C(Other: Any): ConstraintProfileProperties
    }
}

external open class ConstraintInstance {
    open var JointName: String
    open var ConstraintBone1: String
    open var ConstraintBone2: String
    open var Pos1: Vector
    open var PriAxis1: Vector
    open var SecAxis1: Vector
    open var Pos2: Vector
    open var PriAxis2: Vector
    open var SecAxis2: Vector
    open var AngularRotationOffset: Rotator
    open var bScaleLinearLimits: Boolean
    open var ProfileInstance: ConstraintProfileProperties
    open var bDisableCollision: Boolean
    open var bEnableProjection: Boolean
    open var ProjectionLinearTolerance: Number
    open var ProjectionAngularTolerance: Number
    open var LinearXMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearYMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearLimitSize: Number
    open var bLinearLimitSoft: Boolean
    open var LinearLimitStiffness: Number
    open var LinearLimitDamping: Number
    open var bLinearBreakable: Boolean
    open var LinearBreakThreshold: Number
    open var AngularSwing1Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularTwistMotion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularSwing2Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var bSwingLimitSoft: Boolean
    open var bTwistLimitSoft: Boolean
    open var Swing1LimitAngle: Number
    open var TwistLimitAngle: Number
    open var Swing2LimitAngle: Number
    open var SwingLimitStiffness: Number
    open var SwingLimitDamping: Number
    open var TwistLimitStiffness: Number
    open var TwistLimitDamping: Number
    open var bAngularBreakable: Boolean
    open var AngularBreakThreshold: Number
    open var bLinearXPositionDrive: Boolean
    open var bLinearXVelocityDrive: Boolean
    open var bLinearYPositionDrive: Boolean
    open var bLinearYVelocityDrive: Boolean
    open var bLinearZPositionDrive: Boolean
    open var bLinearZVelocityDrive: Boolean
    open var bLinearPositionDrive: Boolean
    open var bLinearVelocityDrive: Boolean
    open var LinearPositionTarget: Vector
    open var LinearVelocityTarget: Vector
    open var LinearDriveSpring: Number
    open var LinearDriveDamping: Number
    open var LinearDriveForceLimit: Number
    open var bSwingPositionDrive: Boolean
    open var bSwingVelocityDrive: Boolean
    open var bTwistPositionDrive: Boolean
    open var bTwistVelocityDrive: Boolean
    open var bAngularSlerpDrive: Boolean
    open var bAngularOrientationDrive: Boolean
    open var bEnableSwingDrive: Boolean
    open var bEnableTwistDrive: Boolean
    open var bAngularVelocityDrive: Boolean
    open var AngularPositionTarget: Quat
    open var AngularDriveMode: String /* "SLERP" | "TwistAndSwing" | "EAngularDriveMode_MAX" */
    open var AngularOrientationTarget: Rotator
    open var AngularVelocityTarget: Vector
    open var AngularDriveSpring: Number
    open var AngularDriveDamping: Number
    open var AngularDriveForceLimit: Number
    open fun clone(): ConstraintInstance

    companion object {
        fun C(Other: UObject): ConstraintInstance
        fun C(Other: Any): ConstraintInstance
    }
}

external open class PhysicsConstraintProfileHandle {
    open var ProfileProperties: ConstraintProfileProperties
    open var ProfileName: String
    open fun clone(): PhysicsConstraintProfileHandle

    companion object {
        fun C(Other: UObject): PhysicsConstraintProfileHandle
        fun C(Other: Any): PhysicsConstraintProfileHandle
    }
}

external open class PhysicsConstraintTemplate : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultInstance: ConstraintInstance
    open var ProfileHandles: Array<PhysicsConstraintProfileHandle>
    open var DefaultProfile: ConstraintProfileProperties
    open var JointName: String
    open var ConstraintBone1: String
    open var ConstraintBone2: String
    open var Pos1: Vector
    open var PriAxis1: Vector
    open var SecAxis1: Vector
    open var Pos2: Vector
    open var PriAxis2: Vector
    open var SecAxis2: Vector
    open var bEnableProjection: Boolean
    open var ProjectionLinearTolerance: Number
    open var ProjectionAngularTolerance: Number
    open var LinearXMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearYMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearZMotion: String /* "LCM_Free" | "LCM_Limited" | "LCM_Locked" | "LCM_MAX" */
    open var LinearLimitSize: Number
    open var bLinearLimitSoft: Boolean
    open var LinearLimitStiffness: Number
    open var LinearLimitDamping: Number
    open var bLinearBreakable: Boolean
    open var LinearBreakThreshold: Number
    open var AngularSwing1Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularSwing2Motion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var AngularTwistMotion: String /* "ACM_Free" | "ACM_Limited" | "ACM_Locked" | "ACM_MAX" */
    open var bSwingLimitSoft: Boolean
    open var bTwistLimitSoft: Boolean
    open var Swing1LimitAngle: Number
    open var Swing2LimitAngle: Number
    open var TwistLimitAngle: Number
    open var SwingLimitStiffness: Number
    open var SwingLimitDamping: Number
    open var TwistLimitStiffness: Number
    open var TwistLimitDamping: Number
    open var bAngularBreakable: Boolean
    open var AngularBreakThreshold: Number

    companion object {
        fun Load(ResourceName: String): PhysicsConstraintTemplate
        fun Find(Outer: UObject, ResourceName: String): PhysicsConstraintTemplate
        fun GetDefaultObject(): PhysicsConstraintTemplate
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsConstraintTemplate
        fun C(Other: UObject): PhysicsConstraintTemplate
        fun C(Other: Any): PhysicsConstraintTemplate
    }
}

external open class PhysicsAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultSkelMesh: SkeletalMesh
    open var PreviewSkeletalMesh: SkeletalMesh
    open var PhysicalAnimationProfiles: Array<String>
    open var ConstraintProfiles: Array<String>
    open var CurrentPhysicalAnimationProfileName: String
    open var CurrentConstraintProfileName: String
    open var BoundsBodies: Array<Number>
    open var SkeletalBodySetups: Array<SkeletalBodySetup>
    open var ConstraintSetup: Array<PhysicsConstraintTemplate>
    open var bNotForDedicatedServer: Boolean
    open var ThumbnailInfo: ThumbnailInfo
    open var BodySetup: Array<BodySetup>

    companion object {
        fun Load(ResourceName: String): PhysicsAsset
        fun Find(Outer: UObject, ResourceName: String): PhysicsAsset
        fun GetDefaultObject(): PhysicsAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsAsset
        fun C(Other: UObject): PhysicsAsset
        fun C(Other: Any): PhysicsAsset
    }
}

external open class NodeMappingContainer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SourceItems: Any
    open var TargetItems: Any
    open var SourceToTarget: Any
    open var SourceAsset: UObject
    open var TargetAsset: UObject

    companion object {
        fun Load(ResourceName: String): NodeMappingContainer
        fun Find(Outer: UObject, ResourceName: String): NodeMappingContainer
        fun GetDefaultObject(): NodeMappingContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NodeMappingContainer
        fun C(Other: UObject): NodeMappingContainer
        fun C(Other: Any): NodeMappingContainer
    }
}

external open class MorphTarget : UObject {
    constructor()
    constructor(Outer: UObject)
    open var BaseSkelMesh: SkeletalMesh

    companion object {
        fun Load(ResourceName: String): MorphTarget
        fun Find(Outer: UObject, ResourceName: String): MorphTarget
        fun GetDefaultObject(): MorphTarget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MorphTarget
        fun C(Other: UObject): MorphTarget
        fun C(Other: Any): MorphTarget
    }
}

external open class ClothPhysicsProperties_Legacy {
    open var VerticalResistance: Number
    open var HorizontalResistance: Number
    open var BendResistance: Number
    open var ShearResistance: Number
    open var Friction: Number
    open var Damping: Number
    open var TetherStiffness: Number
    open var TetherLimit: Number
    open var Drag: Number
    open var StiffnessFrequency: Number
    open var GravityScale: Number
    open var MassScale: Number
    open var InertiaBlend: Number
    open var SelfCollisionThickness: Number
    open var SelfCollisionSquashScale: Number
    open var SelfCollisionStiffness: Number
    open var SolverFrequency: Number
    open var FiberCompression: Number
    open var FiberExpansion: Number
    open var FiberResistance: Number
    open fun clone(): ClothPhysicsProperties_Legacy

    companion object {
        fun C(Other: UObject): ClothPhysicsProperties_Legacy
        fun C(Other: Any): ClothPhysicsProperties_Legacy
    }
}

external open class ClothingAssetData_Legacy {
    open var AssetName: String
    open var ApexFileName: String
    open var bClothPropertiesChanged: Boolean
    open var PhysicsProperties: ClothPhysicsProperties_Legacy
    open fun clone(): ClothingAssetData_Legacy

    companion object {
        fun C(Other: UObject): ClothingAssetData_Legacy
        fun C(Other: Any): ClothingAssetData_Legacy
    }
}

external object ERootMotionMode {
    var NoRootMotionExtraction: String /* "NoRootMotionExtraction" */
    var IgnoreRootMotion: String /* "IgnoreRootMotion" */
    var RootMotionFromEverything: String /* "RootMotionFromEverything" */
    var RootMotionFromMontagesOnly: String /* "RootMotionFromMontagesOnly" */
    var ERootMotionMode_MAX: String /* "ERootMotionMode_MAX" */
}

external open class Struct : Field {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Struct
        fun Find(Outer: UObject, ResourceName: String): Struct
        fun GetDefaultObject(): Struct
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Struct
        fun C(Other: UObject): Struct
        fun C(Other: Any): Struct
    }
}

external open class DynamicBlueprintBinding : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DynamicBlueprintBinding
        fun Find(Outer: UObject, ResourceName: String): DynamicBlueprintBinding
        fun GetDefaultObject(): DynamicBlueprintBinding
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DynamicBlueprintBinding
        fun C(Other: UObject): DynamicBlueprintBinding
        fun C(Other: Any): DynamicBlueprintBinding
    }
}

external open class DatasmithAssetUserData : AssetUserData {
    constructor()
    constructor(Outer: UObject)
    open var MetaData: Any
    open var ObjectTemplates: Any

    companion object {
        fun Load(ResourceName: String): DatasmithAssetUserData
        fun Find(Outer: UObject, ResourceName: String): DatasmithAssetUserData
        fun GetDefaultObject(): DatasmithAssetUserData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DatasmithAssetUserData
        fun C(Other: UObject): DatasmithAssetUserData
        fun C(Other: Any): DatasmithAssetUserData
    }
}

external open class Subsystem : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Subsystem
        fun Find(Outer: UObject, ResourceName: String): Subsystem
        fun GetDefaultObject(): Subsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Subsystem
        fun C(Other: UObject): Subsystem
        fun C(Other: Any): Subsystem
    }
}

external open class DynamicSubsystem : Subsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DynamicSubsystem
        fun Find(Outer: UObject, ResourceName: String): DynamicSubsystem
        fun GetDefaultObject(): DynamicSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DynamicSubsystem
        fun C(Other: UObject): DynamicSubsystem
        fun C(Other: Any): DynamicSubsystem
    }
}

external open class EngineSubsystem : DynamicSubsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EngineSubsystem
        fun Find(Outer: UObject, ResourceName: String): EngineSubsystem
        fun GetDefaultObject(): EngineSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EngineSubsystem
        fun C(Other: UObject): EngineSubsystem
        fun C(Other: Any): EngineSubsystem
    }
}

external interface `T$308` {
    var OutPrimaryAssetIdList: Array<PrimaryAssetId>
}

external interface `T$309` {
    var OutPrimaryAssetIdList: Array<PrimaryAssetId>
}

external open class PrimaryAssetType {
    open var Name: String
    open fun clone(): PrimaryAssetType
    open fun Conv_PrimaryAssetTypeToString(): String
    open fun EqualEqual_PrimaryAssetType(B: PrimaryAssetType): Boolean
    open fun GetPrimaryAssetIdList(OutPrimaryAssetIdList: Array<PrimaryAssetId> = definedExternally): `T$308`
    open fun IsValidPrimaryAssetType(): Boolean
    open fun NotEqual_PrimaryAssetType(B: PrimaryAssetType): Boolean

    companion object {
        fun C(Other: UObject): PrimaryAssetType
        fun C(Other: Any): PrimaryAssetType
        fun Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): String
        fun EqualEqual_PrimaryAssetType(A: PrimaryAssetType, B: PrimaryAssetType): Boolean
        fun GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType, OutPrimaryAssetIdList: Array<PrimaryAssetId> = definedExternally): `T$309`
        fun IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): Boolean
        fun NotEqual_PrimaryAssetType(A: PrimaryAssetType, B: PrimaryAssetType): Boolean
    }
}

external interface `T$310` {
    var OutBundles: Array<String>
    var `$`: Boolean
}

external interface `T$311` {
    var OutBundles: Array<String>
    var `$`: Boolean
}

external open class PrimaryAssetId {
    open var PrimaryAssetType: PrimaryAssetType
    open var PrimaryAssetName: String
    open fun clone(): PrimaryAssetId
    open fun Conv_PrimaryAssetIdToString(): String
    open fun EqualEqual_PrimaryAssetId(B: PrimaryAssetId): Boolean
    open fun GetClassFromPrimaryAssetId(): UnrealEngineClass
    open fun GetCurrentBundleState(bForceCurrentState: Boolean, OutBundles: Array<String> = definedExternally): `T$310`
    open fun GetObjectFromPrimaryAssetId(): UObject
    open fun GetSoftClassReferenceFromPrimaryAssetId(): Class
    open fun GetSoftObjectReferenceFromPrimaryAssetId(): UObject
    open fun IsValidPrimaryAssetId(): Boolean
    open fun NotEqual_PrimaryAssetId(B: PrimaryAssetId): Boolean
    open fun UnloadPrimaryAsset()

    companion object {
        fun C(Other: UObject): PrimaryAssetId
        fun C(Other: Any): PrimaryAssetId
        fun Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): String
        fun EqualEqual_PrimaryAssetId(A: PrimaryAssetId, B: PrimaryAssetId): Boolean
        fun GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UnrealEngineClass
        fun GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId, bForceCurrentState: Boolean, OutBundles: Array<String> = definedExternally): `T$311`
        fun GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject
        fun GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Class
        fun GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject
        fun IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Boolean
        fun NotEqual_PrimaryAssetId(A: PrimaryAssetId, B: PrimaryAssetId): Boolean
        fun UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId)
    }
}

external open class SaveGame : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun SaveGameToSlot(SlotName: String, UserIndex: Number): Boolean

    companion object {
        fun Load(ResourceName: String): SaveGame
        fun Find(Outer: UObject, ResourceName: String): SaveGame
        fun GetDefaultObject(): SaveGame
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SaveGame
        fun C(Other: UObject): SaveGame
        fun C(Other: Any): SaveGame
        fun SaveGameToSlot(SaveGameObject: SaveGame, SlotName: String, UserIndex: Number): Boolean
    }
}

external open class EditorSubsystem : DynamicSubsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EditorSubsystem
        fun Find(Outer: UObject, ResourceName: String): EditorSubsystem
        fun GetDefaultObject(): EditorSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditorSubsystem
        fun C(Other: UObject): EditorSubsystem
        fun C(Other: Any): EditorSubsystem
    }
}

external open class Visual : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Visual
        fun Find(Outer: UObject, ResourceName: String): Visual
        fun GetDefaultObject(): Visual
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Visual
        fun C(Other: UObject): Visual
        fun C(Other: Any): Visual
    }
}

external open class PanelWidget : Widget {
    constructor()
    constructor(Outer: UObject)
    open var Slots: Array<PanelSlot>
    open fun RemoveChildAt(index: Number): Boolean
    open fun RemoveChild(Content: Widget): Boolean
    open fun HasChild(Content: Widget): Boolean
    open fun HasAnyChildren(): Boolean
    open fun GetChildrenCount(): Number
    open fun GetChildIndex(Content: Widget): Number
    open fun GetChildAt(index: Number): Widget
    open fun GetAllChildren(): Array<Widget>
    open fun ClearChildren()
    open fun AddChild(Content: Widget): PanelSlot

    companion object {
        fun Load(ResourceName: String): PanelWidget
        fun Find(Outer: UObject, ResourceName: String): PanelWidget
        fun GetDefaultObject(): PanelWidget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PanelWidget
        fun C(Other: UObject): PanelWidget
        fun C(Other: Any): PanelWidget
    }
}

external open class PanelSlot : Visual {
    constructor()
    constructor(Outer: UObject)
    open var Parent: PanelWidget
    open var Content: Widget

    companion object {
        fun Load(ResourceName: String): PanelSlot
        fun Find(Outer: UObject, ResourceName: String): PanelSlot
        fun GetDefaultObject(): PanelSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PanelSlot
        fun C(Other: UObject): PanelSlot
        fun C(Other: Any): PanelSlot
    }
}

external object ESlateVisibility {
    var Visible: String /* "Visible" */
    var Collapsed: String /* "Collapsed" */
    var Hidden: String /* "Hidden" */
    var HitTestInvisible: String /* "HitTestInvisible" */
    var SelfHitTestInvisible: String /* "SelfHitTestInvisible" */
    var ESlateVisibility_MAX: String /* "ESlateVisibility_MAX" */
}

external open class WidgetTransform {
    open var Translation: Vector2D
    open var Scale: Vector2D
    open var Shear: Vector2D
    open var Angle: Number
    open fun clone(): WidgetTransform

    companion object {
        fun C(Other: UObject): WidgetTransform
        fun C(Other: Any): WidgetTransform
    }
}

external object ESlateAccessibleBehavior {
    var NotAccessible: String /* "NotAccessible" */
    var Auto: String /* "Auto" */
    var Summary: String /* "Summary" */
    var Custom: String /* "Custom" */
    var ToolTip: String /* "ToolTip" */
    var ESlateAccessibleBehavior_MAX: String /* "ESlateAccessibleBehavior_MAX" */
}

external open class SlateAccessibleWidgetData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bCanChildrenBeAccessible: Boolean
    open var AccessibleBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleSummaryBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleText: String
    open var AccessibleTextDelegate: UnrealEngineDelegate<() -> String>
    open var AccessibleSummaryText: String
    open var AccessibleSummaryTextDelegate: UnrealEngineDelegate<() -> String>

    companion object {
        fun Load(ResourceName: String): SlateAccessibleWidgetData
        fun Find(Outer: UObject, ResourceName: String): SlateAccessibleWidgetData
        fun GetDefaultObject(): SlateAccessibleWidgetData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateAccessibleWidgetData
        fun C(Other: UObject): SlateAccessibleWidgetData
        fun C(Other: Any): SlateAccessibleWidgetData
    }
}

external object EMouseCursor {
    var None: String /* "None" */
    var Default: String /* "Default" */
    var TextEditBeam: String /* "TextEditBeam" */
    var ResizeLeftRight: String /* "ResizeLeftRight" */
    var ResizeUpDown: String /* "ResizeUpDown" */
    var ResizeSouthEast: String /* "ResizeSouthEast" */
    var ResizeSouthWest: String /* "ResizeSouthWest" */
    var CardinalCross: String /* "CardinalCross" */
    var Crosshairs: String /* "Crosshairs" */
    var Hand: String /* "Hand" */
    var GrabHand: String /* "GrabHand" */
    var GrabHandClosed: String /* "GrabHandClosed" */
    var SlashedCircle: String /* "SlashedCircle" */
    var EyeDropper: String /* "EyeDropper" */
    var EMouseCursor_MAX: String /* "EMouseCursor_MAX" */
}

external object EWidgetClipping {
    var Inherit: String /* "Inherit" */
    var ClipToBounds: String /* "ClipToBounds" */
    var ClipToBoundsWithoutIntersecting: String /* "ClipToBoundsWithoutIntersecting" */
    var ClipToBoundsAlways: String /* "ClipToBoundsAlways" */
    var OnDemand: String /* "OnDemand" */
    var EWidgetClipping_MAX: String /* "EWidgetClipping_MAX" */
}

external object EUINavigationRule {
    var Escape: String /* "Escape" */
    var Explicit: String /* "Explicit" */
    var Wrap: String /* "Wrap" */
    var Stop: String /* "Stop" */
    var Custom: String /* "Custom" */
    var CustomBoundary: String /* "CustomBoundary" */
    var Invalid: String /* "Invalid" */
    var EUINavigationRule_MAX: String /* "EUINavigationRule_MAX" */
}

external object EUINavigation {
    var Left: String /* "Left" */
    var Right: String /* "Right" */
    var Up: String /* "Up" */
    var Down: String /* "Down" */
    var Next: String /* "Next" */
    var Previous: String /* "Previous" */
    var Num: String /* "Num" */
    var Invalid: String /* "Invalid" */
    var EUINavigation_MAX: String /* "EUINavigation_MAX" */
}

external open class WidgetNavigationData {
    open var Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */
    open var WidgetToFocus: String
    open var Widget: Any
    open var CustomDelegate: UnrealEngineDelegate<(Navigation: String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */) -> Widget>
    open fun clone(): WidgetNavigationData

    companion object {
        fun C(Other: UObject): WidgetNavigationData
        fun C(Other: Any): WidgetNavigationData
    }
}

external open class WidgetNavigation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Up: WidgetNavigationData
    open var Down: WidgetNavigationData
    open var Left: WidgetNavigationData
    open var Right: WidgetNavigationData
    open var Next: WidgetNavigationData
    open var Previous: WidgetNavigationData

    companion object {
        fun Load(ResourceName: String): WidgetNavigation
        fun Find(Outer: UObject, ResourceName: String): WidgetNavigation
        fun GetDefaultObject(): WidgetNavigation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetNavigation
        fun C(Other: UObject): WidgetNavigation
        fun C(Other: Any): WidgetNavigation
    }
}

external object EFlowDirectionPreference {
    var Inherit: String /* "Inherit" */
    var Culture: String /* "Culture" */
    var LeftToRight: String /* "LeftToRight" */
    var RightToLeft: String /* "RightToLeft" */
    var EFlowDirectionPreference_MAX: String /* "EFlowDirectionPreference_MAX" */
}

external open class PropertyPathSegment {
    open var Name: String
    open var ArrayIndex: Number
    open var struct: Struct
    open var Field: Field
    open fun clone(): PropertyPathSegment

    companion object {
        fun C(Other: UObject): PropertyPathSegment
        fun C(Other: Any): PropertyPathSegment
    }
}

external open class UFunction : Struct {
    constructor()
    constructor(Outer: UObject)
    open fun GetFunctionParmsSize(): Number

    companion object {
        fun Load(ResourceName: String): UFunction
        fun Find(Outer: UObject, ResourceName: String): UFunction
        fun GetDefaultObject(): UFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UFunction
        fun C(Other: UObject): UFunction
        fun C(Other: Any): UFunction
        fun GetFunctionParmsSize(UFunction: UFunction): Number
    }
}

external open class CachedPropertyPath {
    open var Segments: Array<PropertyPathSegment>
    open var CachedFunction: UFunction
    open fun clone(): CachedPropertyPath

    companion object {
        fun C(Other: UObject): CachedPropertyPath
        fun C(Other: Any): CachedPropertyPath
    }
}

external open class DynamicPropertyPath : CachedPropertyPath {
    override fun clone(): DynamicPropertyPath

    companion object {
        fun C(Other: UObject): DynamicPropertyPath
        fun C(Other: Any): DynamicPropertyPath
    }
}

external open class PropertyBinding : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SourceObject: Any
    open var SourcePath: DynamicPropertyPath
    open var DestinationProperty: String

    companion object {
        fun Load(ResourceName: String): PropertyBinding
        fun Find(Outer: UObject, ResourceName: String): PropertyBinding
        fun GetDefaultObject(): PropertyBinding
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PropertyBinding
        fun C(Other: UObject): PropertyBinding
        fun C(Other: Any): PropertyBinding
    }
}

external object EWidgetDesignFlags {
    var None: String /* "None" */
    var Designing: String /* "Designing" */
    var ShowOutline: String /* "ShowOutline" */
    var ExecutePreConstruct: String /* "ExecutePreConstruct" */
    var EWidgetDesignFlags_MAX: String /* "EWidgetDesignFlags_MAX" */
}

external open class Player : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PlayerController: PlayerController
    open var CurrentNetSpeed: Number
    open var ConfiguredInternetSpeed: Number
    open var ConfiguredLanSpeed: Number

    companion object {
        fun Load(ResourceName: String): Player
        fun Find(Outer: UObject, ResourceName: String): Player
        fun GetDefaultObject(): Player
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Player
        fun C(Other: UObject): Player
        fun C(Other: Any): Player
    }
}

external open class InterpTrackInst : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): InterpTrackInst
        fun Find(Outer: UObject, ResourceName: String): InterpTrackInst
        fun GetDefaultObject(): InterpTrackInst
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackInst
        fun C(Other: UObject): InterpTrackInst
        fun C(Other: Any): InterpTrackInst
    }
}

external open class InterpTrackInstDirector : InterpTrackInst {
    constructor()
    constructor(Outer: UObject)
    open var OldViewTarget: Actor

    companion object {
        fun Load(ResourceName: String): InterpTrackInstDirector
        fun Find(Outer: UObject, ResourceName: String): InterpTrackInstDirector
        fun GetDefaultObject(): InterpTrackInstDirector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackInstDirector
        fun C(Other: UObject): InterpTrackInstDirector
        fun C(Other: Any): InterpTrackInstDirector
    }
}

external open class ReporterBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReporterBase
        fun Find(Outer: UObject, ResourceName: String): ReporterBase
        fun GetDefaultObject(): ReporterBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReporterBase
        fun C(Other: UObject): ReporterBase
        fun C(Other: Any): ReporterBase
    }
}

external open class ReporterGraph : ReporterBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReporterGraph
        fun Find(Outer: UObject, ResourceName: String): ReporterGraph
        fun GetDefaultObject(): ReporterGraph
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReporterGraph
        fun C(Other: UObject): ReporterGraph
        fun C(Other: Any): ReporterGraph
    }
}

external open class CanvasUVTri {
    open var V0_Pos: Vector2D
    open var V0_UV: Vector2D
    open var V0_Color: LinearColor
    open var V1_Pos: Vector2D
    open var V1_UV: Vector2D
    open var V1_Color: LinearColor
    open var V2_Pos: Vector2D
    open var V2_UV: Vector2D
    open var V2_Color: LinearColor
    open fun clone(): CanvasUVTri

    companion object {
        fun C(Other: UObject): CanvasUVTri
        fun C(Other: Any): CanvasUVTri
    }
}

external interface `T$312` {
    var WorldOrigin: Vector
    var WorldDirection: Vector
}

external open class Canvas : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OrgX: Number
    open var OrgY: Number
    open var ClipX: Number
    open var ClipY: Number
    open var DrawColor: Color
    open var bCenterX: Boolean
    open var bCenterY: Boolean
    open var bNoSmooth: Boolean
    open var SizeX: Number
    open var SizeY: Number
    open var ColorModulate: Plane
    open var DefaultTexture: Texture2D
    open var GradientTexture0: Texture2D
    open var ReporterGraph: ReporterGraph
    open fun K2_TextSize(RenderFont: Font, RenderText: String, Scale: Vector2D): Vector2D
    open fun K2_StrLen(RenderFont: Font, RenderText: String): Vector2D
    open fun K2_Project(WorldLocation: Vector): Vector
    open fun K2_DrawTriangle(RenderTexture: Texture, Triangles: Array<CanvasUVTri>)
    open fun K2_DrawTexture(RenderTexture: Texture, ScreenPosition: Vector2D, ScreenSize: Vector2D, CoordinatePosition: Vector2D, CoordinateSize: Vector2D, RenderColor: LinearColor, BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */, Rotation: Number, PivotPoint: Vector2D)
    open fun K2_DrawText(RenderFont: Font, RenderText: String, ScreenPosition: Vector2D, Scale: Vector2D, RenderColor: LinearColor, Kerning: Number, ShadowColor: LinearColor, ShadowOffset: Vector2D, bCentreX: Boolean, bCentreY: Boolean, bOutlined: Boolean, OutlineColor: LinearColor)
    open fun K2_DrawPolygon(RenderTexture: Texture, ScreenPosition: Vector2D, Radius: Vector2D, NumberOfSides: Number, RenderColor: LinearColor)
    open fun K2_DrawMaterialTriangle(RenderMaterial: MaterialInterface, Triangles: Array<CanvasUVTri>)
    open fun K2_DrawMaterial(RenderMaterial: MaterialInterface, ScreenPosition: Vector2D, ScreenSize: Vector2D, CoordinatePosition: Vector2D, CoordinateSize: Vector2D, Rotation: Number, PivotPoint: Vector2D)
    open fun K2_DrawLine(ScreenPositionA: Vector2D, ScreenPositionB: Vector2D, Thickness: Number, RenderColor: LinearColor)
    open fun K2_DrawBox(ScreenPosition: Vector2D, ScreenSize: Vector2D, Thickness: Number, RenderColor: LinearColor)
    open fun K2_DrawBorder(BorderTexture: Texture, BackgroundTexture: Texture, LeftBorderTexture: Texture, RightBorderTexture: Texture, TopBorderTexture: Texture, BottomBorderTexture: Texture, ScreenPosition: Vector2D, ScreenSize: Vector2D, CoordinatePosition: Vector2D, CoordinateSize: Vector2D, RenderColor: LinearColor, BorderScale: Vector2D, BackgroundScale: Vector2D, Rotation: Number, PivotPoint: Vector2D, CornerSize: Vector2D)
    open fun K2_Deproject(ScreenPosition: Vector2D, WorldOrigin: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$312`

    companion object {
        fun Load(ResourceName: String): Canvas
        fun Find(Outer: UObject, ResourceName: String): Canvas
        fun GetDefaultObject(): Canvas
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Canvas
        fun C(Other: UObject): Canvas
        fun C(Other: Any): Canvas
    }
}

external open class DebugTextInfo {
    open var SrcActor: Actor
    open var SrcActorOffset: Vector
    open var SrcActorDesiredOffset: Vector
    open var DebugText: String
    open var TimeRemaining: Number
    open var Duration: Number
    open var TextColor: Color
    open var bAbsoluteLocation: Boolean
    open var bKeepAttachedToActor: Boolean
    open var bDrawShadow: Boolean
    open var OrigActorLocation: Vector
    open var Font: Font
    open var FontScale: Number
    open fun clone(): DebugTextInfo

    companion object {
        fun C(Other: UObject): DebugTextInfo
        fun C(Other: Any): DebugTextInfo
    }
}

external interface `T$313` {
    var OutWidth: Number
    var OutHeight: Number
}

external interface `T$314` {
    var OutActors: Array<Actor>
}

external interface `T$315` {
    var WorldPosition: Vector
    var WorldDirection: Vector
}

external open class HUD(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var PlayerOwner: PlayerController
    open var bLostFocusPaused: Boolean
    open var bShowHUD: Boolean
    open var bShowDebugInfo: Boolean
    open var CurrentTargetIndex: Number
    open var bShowHitBoxDebugInfo: Boolean
    open var bShowOverlays: Boolean
    open var bEnableDebugTextShadow: Boolean
    open var PostRenderedActors: Array<Actor>
    open var DebugDisplay: Array<String>
    open var ToggledDebugCategories: Array<String>
    open var Canvas: Canvas
    open var DebugCanvas: Canvas
    open var DebugTextList: Array<DebugTextInfo>
    open var ShowDebugTargetDesiredClass: UnrealEngineClass
    open var ShowDebugTargetActor: Actor
    open fun ShowHUD()
    open fun ShowDebugToggleSubCategory(Category: String)
    open fun ShowDebugForReticleTargetToggle(DesiredClass: UnrealEngineClass)
    open fun ShowDebug(DebugType: String)
    open fun RemoveDebugText(SrcActor: Actor, bLeaveDurationText: Boolean)
    open fun RemoveAllDebugStrings()
    open fun ReceiveHitBoxRelease(BoxName: String)
    open fun ReceiveHitBoxEndCursorOver(BoxName: String)
    open fun ReceiveHitBoxClick(BoxName: String)
    open fun ReceiveHitBoxBeginCursorOver(BoxName: String)
    open fun ReceiveDrawHUD(SizeX: Number, SizeY: Number)
    open fun Project(Location: Vector): Vector
    open fun PreviousDebugTarget()
    open fun NextDebugTarget()
    open fun GetTextSize(text: String, OutWidth: Number = definedExternally, OutHeight: Number = definedExternally, Font: Font = definedExternally, Scale: Number = definedExternally): `T$313`
    open fun GetOwningPlayerController(): PlayerController
    open fun GetOwningPawn(): Pawn
    open fun GetActorsInSelectionRectangle(ClassFilter: UnrealEngineClass, FirstPoint: Vector2D, SecondPoint: Vector2D, OutActors: Array<Actor> = definedExternally, bIncludeNonCollidingComponents: Boolean = definedExternally, bActorMustBeFullyEnclosed: Boolean = definedExternally): `T$314`
    open fun DrawTextureSimple(Texture: Texture, ScreenX: Number, ScreenY: Number, Scale: Number, bScalePosition: Boolean)
    open fun DrawTexture(Texture: Texture, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number, TextureU: Number, TextureV: Number, TextureUWidth: Number, TextureVHeight: Number, TintColor: LinearColor, BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */, Scale: Number, bScalePosition: Boolean, Rotation: Number, RotPivot: Vector2D)
    open fun DrawText(text: String, TextColor: LinearColor, ScreenX: Number, ScreenY: Number, Font: Font, Scale: Number, bScalePosition: Boolean)
    open fun DrawRect(RectColor: LinearColor, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number)
    open fun DrawMaterialTriangle(Material: MaterialInterface, V0_Pos: Vector2D, V1_Pos: Vector2D, V2_Pos: Vector2D, V0_UV: Vector2D, V1_UV: Vector2D, V2_UV: Vector2D, V0_Color: LinearColor, V1_Color: LinearColor, V2_Color: LinearColor)
    open fun DrawMaterialSimple(Material: MaterialInterface, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number, Scale: Number, bScalePosition: Boolean)
    open fun DrawMaterial(Material: MaterialInterface, ScreenX: Number, ScreenY: Number, ScreenW: Number, ScreenH: Number, MaterialU: Number, MaterialV: Number, MaterialUWidth: Number, MaterialVHeight: Number, Scale: Number, bScalePosition: Boolean, Rotation: Number, RotPivot: Vector2D)
    open fun DrawLine(StartScreenX: Number, StartScreenY: Number, EndScreenX: Number, EndScreenY: Number, LineColor: LinearColor, LineThickness: Number)
    open fun Deproject(ScreenX: Number, ScreenY: Number, WorldPosition: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$315`
    open fun AddHitBox(Position: Vector2D, Size: Vector2D, InName: String, bConsumesInput: Boolean, Priority: Number)
    open fun AddDebugText(DebugText: String, SrcActor: Actor, Duration: Number, Offset: Vector, DesiredOffset: Vector, TextColor: Color, bSkipOverwriteCheck: Boolean, bAbsoluteLocation: Boolean, bKeepAttachedToActor: Boolean, InFont: Font, FontScale: Number, bDrawShadow: Boolean)

    companion object {
        fun GetDefaultObject(): HUD
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HUD
        fun C(Other: UObject): HUD
        fun C(Other: Any): HUD
    }
}

external object ECameraProjectionMode {
    var Perspective: String /* "Perspective" */
    var Orthographic: String /* "Orthographic" */
    var ECameraProjectionMode_MAX: String /* "ECameraProjectionMode_MAX" */
}

external object EBloomMethod {
    var BM_SOG: String /* "BM_SOG" */
    var BM_FFT: String /* "BM_FFT" */
    var BM_MAX: String /* "BM_MAX" */
}

external object EAutoExposureMethod {
    var AEM_Histogram: String /* "AEM_Histogram" */
    var AEM_Basic: String /* "AEM_Basic" */
    var AEM_Manual: String /* "AEM_Manual" */
    var AEM_MAX: String /* "AEM_MAX" */
}

external object EDepthOfFieldMethod {
    var DOFM_BokehDOF: String /* "DOFM_BokehDOF" */
    var DOFM_Gaussian: String /* "DOFM_Gaussian" */
    var DOFM_CircleDOF: String /* "DOFM_CircleDOF" */
    var DOFM_MAX: String /* "DOFM_MAX" */
}

external open class TextureCube : Texture {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): TextureCube
        fun Find(Outer: UObject, ResourceName: String): TextureCube
        fun GetDefaultObject(): TextureCube
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureCube
        fun C(Other: UObject): TextureCube
        fun C(Other: Any): TextureCube
    }
}

external object EReflectionsType {
    var ScreenSpace: String /* "ScreenSpace" */
    var RayTracing: String /* "RayTracing" */
    var EReflectionsType_MAX: String /* "EReflectionsType_MAX" */
}

external object EReflectedAndRefractedRayTracedShadows {
    var Disabled: String /* "Disabled" */
    var Hard_shadows: String /* "Hard_shadows" */
    var Area_shadows: String /* "Area_shadows" */
    var EReflectedAndRefractedRayTracedShadows_MAX: String /* "EReflectedAndRefractedRayTracedShadows_MAX" */
}

external object ETranslucencyType {
    var Raster: String /* "Raster" */
    var RayTracing: String /* "RayTracing" */
    var ETranslucencyType_MAX: String /* "ETranslucencyType_MAX" */
}

external open class WeightedBlendable {
    open var Weight: Number
    open var UObject: UObject
    open fun clone(): WeightedBlendable

    companion object {
        fun C(Other: UObject): WeightedBlendable
        fun C(Other: Any): WeightedBlendable
    }
}

external open class WeightedBlendables {
    open var Array: Array<WeightedBlendable>
    open fun clone(): WeightedBlendables

    companion object {
        fun C(Other: UObject): WeightedBlendables
        fun C(Other: Any): WeightedBlendables
    }
}

external open class PostProcessSettings {
    open var bOverride_WhiteTemp: Boolean
    open var bOverride_WhiteTint: Boolean
    open var bOverride_ColorSaturation: Boolean
    open var bOverride_ColorContrast: Boolean
    open var bOverride_ColorGamma: Boolean
    open var bOverride_ColorGain: Boolean
    open var bOverride_ColorOffset: Boolean
    open var bOverride_ColorSaturationShadows: Boolean
    open var bOverride_ColorContrastShadows: Boolean
    open var bOverride_ColorGammaShadows: Boolean
    open var bOverride_ColorGainShadows: Boolean
    open var bOverride_ColorOffsetShadows: Boolean
    open var bOverride_ColorSaturationMidtones: Boolean
    open var bOverride_ColorContrastMidtones: Boolean
    open var bOverride_ColorGammaMidtones: Boolean
    open var bOverride_ColorGainMidtones: Boolean
    open var bOverride_ColorOffsetMidtones: Boolean
    open var bOverride_ColorSaturationHighlights: Boolean
    open var bOverride_ColorContrastHighlights: Boolean
    open var bOverride_ColorGammaHighlights: Boolean
    open var bOverride_ColorGainHighlights: Boolean
    open var bOverride_ColorOffsetHighlights: Boolean
    open var bOverride_ColorCorrectionShadowsMax: Boolean
    open var bOverride_ColorCorrectionHighlightsMin: Boolean
    open var bOverride_BlueCorrection: Boolean
    open var bOverride_ExpandGamut: Boolean
    open var bOverride_FilmWhitePoint: Boolean
    open var bOverride_FilmSaturation: Boolean
    open var bOverride_FilmChannelMixerRed: Boolean
    open var bOverride_FilmChannelMixerGreen: Boolean
    open var bOverride_FilmChannelMixerBlue: Boolean
    open var bOverride_FilmContrast: Boolean
    open var bOverride_FilmDynamicRange: Boolean
    open var bOverride_FilmHealAmount: Boolean
    open var bOverride_FilmToeAmount: Boolean
    open var bOverride_FilmShadowTint: Boolean
    open var bOverride_FilmShadowTintBlend: Boolean
    open var bOverride_FilmShadowTintAmount: Boolean
    open var bOverride_FilmSlope: Boolean
    open var bOverride_FilmToe: Boolean
    open var bOverride_FilmShoulder: Boolean
    open var bOverride_FilmBlackClip: Boolean
    open var bOverride_FilmWhiteClip: Boolean
    open var bOverride_SceneColorTint: Boolean
    open var bOverride_SceneFringeIntensity: Boolean
    open var bOverride_ChromaticAberrationStartOffset: Boolean
    open var bOverride_AmbientCubemapTint: Boolean
    open var bOverride_AmbientCubemapIntensity: Boolean
    open var bOverride_BloomMethod: Boolean
    open var bOverride_BloomIntensity: Boolean
    open var bOverride_BloomThreshold: Boolean
    open var bOverride_Bloom1Tint: Boolean
    open var bOverride_Bloom1Size: Boolean
    open var bOverride_Bloom2Size: Boolean
    open var bOverride_Bloom2Tint: Boolean
    open var bOverride_Bloom3Tint: Boolean
    open var bOverride_Bloom3Size: Boolean
    open var bOverride_Bloom4Tint: Boolean
    open var bOverride_Bloom4Size: Boolean
    open var bOverride_Bloom5Tint: Boolean
    open var bOverride_Bloom5Size: Boolean
    open var bOverride_Bloom6Tint: Boolean
    open var bOverride_Bloom6Size: Boolean
    open var bOverride_BloomSizeScale: Boolean
    open var bOverride_BloomConvolutionTexture: Boolean
    open var bOverride_BloomConvolutionSize: Boolean
    open var bOverride_BloomConvolutionCenterUV: Boolean
    open var bOverride_BloomConvolutionPreFilter: Boolean
    open var bOverride_BloomConvolutionPreFilterMin: Boolean
    open var bOverride_BloomConvolutionPreFilterMax: Boolean
    open var bOverride_BloomConvolutionPreFilterMult: Boolean
    open var bOverride_BloomConvolutionBufferScale: Boolean
    open var bOverride_BloomDirtMaskIntensity: Boolean
    open var bOverride_BloomDirtMaskTint: Boolean
    open var bOverride_BloomDirtMask: Boolean
    open var bOverride_CameraShutterSpeed: Boolean
    open var bOverride_CameraISO: Boolean
    open var bOverride_AutoExposureMethod: Boolean
    open var bOverride_AutoExposureLowPercent: Boolean
    open var bOverride_AutoExposureHighPercent: Boolean
    open var bOverride_AutoExposureMinBrightness: Boolean
    open var bOverride_AutoExposureMaxBrightness: Boolean
    open var bOverride_AutoExposureCalibrationConstant: Boolean
    open var bOverride_AutoExposureSpeedUp: Boolean
    open var bOverride_AutoExposureSpeedDown: Boolean
    open var bOverride_AutoExposureBias: Boolean
    open var bOverride_AutoExposureBiasCurve: Boolean
    open var bOverride_HistogramLogMin: Boolean
    open var bOverride_HistogramLogMax: Boolean
    open var bOverride_LensFlareIntensity: Boolean
    open var bOverride_LensFlareTint: Boolean
    open var bOverride_LensFlareTints: Boolean
    open var bOverride_LensFlareBokehSize: Boolean
    open var bOverride_LensFlareBokehShape: Boolean
    open var bOverride_LensFlareThreshold: Boolean
    open var bOverride_VignetteIntensity: Boolean
    open var bOverride_GrainIntensity: Boolean
    open var bOverride_GrainJitter: Boolean
    open var bOverride_AmbientOcclusionIntensity: Boolean
    open var bOverride_AmbientOcclusionStaticFraction: Boolean
    open var bOverride_AmbientOcclusionRadius: Boolean
    open var bOverride_AmbientOcclusionFadeDistance: Boolean
    open var bOverride_AmbientOcclusionFadeRadius: Boolean
    open var bOverride_AmbientOcclusionDistance: Boolean
    open var bOverride_AmbientOcclusionRadiusInWS: Boolean
    open var bOverride_AmbientOcclusionPower: Boolean
    open var bOverride_AmbientOcclusionBias: Boolean
    open var bOverride_AmbientOcclusionQuality: Boolean
    open var bOverride_AmbientOcclusionMipBlend: Boolean
    open var bOverride_AmbientOcclusionMipScale: Boolean
    open var bOverride_AmbientOcclusionMipThreshold: Boolean
    open var bOverride_RayTracingAO: Boolean
    open var bOverride_RayTracingAOSamplesPerPixel: Boolean
    open var bOverride_LPVIntensity: Boolean
    open var bOverride_LPVDirectionalOcclusionIntensity: Boolean
    open var bOverride_LPVDirectionalOcclusionRadius: Boolean
    open var bOverride_LPVDiffuseOcclusionExponent: Boolean
    open var bOverride_LPVSpecularOcclusionExponent: Boolean
    open var bOverride_LPVDiffuseOcclusionIntensity: Boolean
    open var bOverride_LPVSpecularOcclusionIntensity: Boolean
    open var bOverride_LPVSize: Boolean
    open var bOverride_LPVSecondaryOcclusionIntensity: Boolean
    open var bOverride_LPVSecondaryBounceIntensity: Boolean
    open var bOverride_LPVGeometryVolumeBias: Boolean
    open var bOverride_LPVVplInjectionBias: Boolean
    open var bOverride_LPVEmissiveInjectionIntensity: Boolean
    open var bOverride_LPVFadeRange: Boolean
    open var bOverride_LPVDirectionalOcclusionFadeRange: Boolean
    open var bOverride_IndirectLightingColor: Boolean
    open var bOverride_IndirectLightingIntensity: Boolean
    open var bOverride_ColorGradingIntensity: Boolean
    open var bOverride_ColorGradingLUT: Boolean
    open var bOverride_DepthOfFieldFocalDistance: Boolean
    open var bOverride_DepthOfFieldFstop: Boolean
    open var bOverride_DepthOfFieldMinFstop: Boolean
    open var bOverride_DepthOfFieldBladeCount: Boolean
    open var bOverride_DepthOfFieldSensorWidth: Boolean
    open var bOverride_DepthOfFieldDepthBlurRadius: Boolean
    open var bOverride_DepthOfFieldDepthBlurAmount: Boolean
    open var bOverride_DepthOfFieldFocalRegion: Boolean
    open var bOverride_DepthOfFieldNearTransitionRegion: Boolean
    open var bOverride_DepthOfFieldFarTransitionRegion: Boolean
    open var bOverride_DepthOfFieldScale: Boolean
    open var bOverride_DepthOfFieldNearBlurSize: Boolean
    open var bOverride_DepthOfFieldFarBlurSize: Boolean
    open var bOverride_MobileHQGaussian: Boolean
    open var bOverride_DepthOfFieldOcclusion: Boolean
    open var bOverride_DepthOfFieldSkyFocusDistance: Boolean
    open var bOverride_DepthOfFieldVignetteSize: Boolean
    open var bOverride_MotionBlurAmount: Boolean
    open var bOverride_MotionBlurMax: Boolean
    open var bOverride_MotionBlurTargetFPS: Boolean
    open var bOverride_MotionBlurPerObjectSize: Boolean
    open var bOverride_ScreenPercentage: Boolean
    open var bOverride_ScreenSpaceReflectionIntensity: Boolean
    open var bOverride_ScreenSpaceReflectionQuality: Boolean
    open var bOverride_ScreenSpaceReflectionMaxRoughness: Boolean
    open var bOverride_ScreenSpaceReflectionRoughnessScale: Boolean
    open var bOverride_ReflectionsType: Boolean
    open var bOverride_RayTracingReflectionsMaxRoughness: Boolean
    open var bOverride_RayTracingReflectionsMaxBounces: Boolean
    open var bOverride_RayTracingReflectionsSamplesPerPixel: Boolean
    open var bOverride_RayTracingReflectionsShadows: Boolean
    open var bOverride_TranslucencyType: Boolean
    open var bOverride_RayTracingTranslucencyMaxRoughness: Boolean
    open var bOverride_RayTracingTranslucencyRefractionRays: Boolean
    open var bOverride_RayTracingTranslucencySamplesPerPixel: Boolean
    open var bOverride_RayTracingTranslucencyShadows: Boolean
    open var bOverride_RayTracingTranslucencyRefraction: Boolean
    open var bOverride_RayTracingGI: Boolean
    open var bOverride_RayTracingGIMaxBounces: Boolean
    open var bOverride_RayTracingGISamplesPerPixel: Boolean
    open var bOverride_PathTracingMaxBounces: Boolean
    open var bOverride_PathTracingSamplesPerPixel: Boolean
    open var bMobileHQGaussian: Boolean
    open var BloomMethod: String /* "BM_SOG" | "BM_FFT" | "BM_MAX" */
    open var AutoExposureMethod: String /* "AEM_Histogram" | "AEM_Basic" | "AEM_Manual" | "AEM_MAX" */
    open var DepthOfFieldMethod: String /* "DOFM_BokehDOF" | "DOFM_Gaussian" | "DOFM_CircleDOF" | "DOFM_MAX" */
    open var WhiteTemp: Number
    open var WhiteTint: Number
    open var ColorSaturation: Vector4
    open var ColorContrast: Vector4
    open var ColorGamma: Vector4
    open var ColorGain: Vector4
    open var ColorOffset: Vector4
    open var ColorSaturationShadows: Vector4
    open var ColorContrastShadows: Vector4
    open var ColorGammaShadows: Vector4
    open var ColorGainShadows: Vector4
    open var ColorOffsetShadows: Vector4
    open var ColorSaturationMidtones: Vector4
    open var ColorContrastMidtones: Vector4
    open var ColorGammaMidtones: Vector4
    open var ColorGainMidtones: Vector4
    open var ColorOffsetMidtones: Vector4
    open var ColorSaturationHighlights: Vector4
    open var ColorContrastHighlights: Vector4
    open var ColorGammaHighlights: Vector4
    open var ColorGainHighlights: Vector4
    open var ColorOffsetHighlights: Vector4
    open var ColorCorrectionHighlightsMin: Number
    open var ColorCorrectionShadowsMax: Number
    open var BlueCorrection: Number
    open var ExpandGamut: Number
    open var FilmSlope: Number
    open var FilmToe: Number
    open var FilmShoulder: Number
    open var FilmBlackClip: Number
    open var FilmWhiteClip: Number
    open var FilmWhitePoint: LinearColor
    open var FilmShadowTint: LinearColor
    open var FilmShadowTintBlend: Number
    open var FilmShadowTintAmount: Number
    open var FilmSaturation: Number
    open var FilmChannelMixerRed: LinearColor
    open var FilmChannelMixerGreen: LinearColor
    open var FilmChannelMixerBlue: LinearColor
    open var FilmContrast: Number
    open var FilmToeAmount: Number
    open var FilmHealAmount: Number
    open var FilmDynamicRange: Number
    open var SceneColorTint: LinearColor
    open var SceneFringeIntensity: Number
    open var ChromaticAberrationStartOffset: Number
    open var BloomIntensity: Number
    open var BloomThreshold: Number
    open var BloomSizeScale: Number
    open var Bloom1Size: Number
    open var Bloom2Size: Number
    open var Bloom3Size: Number
    open var Bloom4Size: Number
    open var Bloom5Size: Number
    open var Bloom6Size: Number
    open var Bloom1Tint: LinearColor
    open var Bloom2Tint: LinearColor
    open var Bloom3Tint: LinearColor
    open var Bloom4Tint: LinearColor
    open var Bloom5Tint: LinearColor
    open var Bloom6Tint: LinearColor
    open var BloomConvolutionSize: Number
    open var BloomConvolutionTexture: Texture2D
    open var BloomConvolutionCenterUV: Vector2D
    open var BloomConvolutionPreFilter: Vector
    open var BloomConvolutionPreFilterMin: Number
    open var BloomConvolutionPreFilterMax: Number
    open var BloomConvolutionPreFilterMult: Number
    open var BloomConvolutionBufferScale: Number
    open var BloomDirtMask: Texture
    open var BloomDirtMaskIntensity: Number
    open var BloomDirtMaskTint: LinearColor
    open var AmbientCubemapTint: LinearColor
    open var AmbientCubemapIntensity: Number
    open var AmbientCubemap: TextureCube
    open var CameraShutterSpeed: Number
    open var CameraISO: Number
    open var DepthOfFieldFstop: Number
    open var DepthOfFieldMinFstop: Number
    open var DepthOfFieldBladeCount: Number
    open var AutoExposureBias: Number
    open var AutoExposureBiasCurve: CurveFloat
    open var AutoExposureLowPercent: Number
    open var AutoExposureHighPercent: Number
    open var AutoExposureMinBrightness: Number
    open var AutoExposureMaxBrightness: Number
    open var AutoExposureSpeedUp: Number
    open var AutoExposureSpeedDown: Number
    open var HistogramLogMin: Number
    open var HistogramLogMax: Number
    open var AutoExposureCalibrationConstant: Number
    open var LensFlareIntensity: Number
    open var LensFlareTint: LinearColor
    open var LensFlareBokehSize: Number
    open var LensFlareThreshold: Number
    open var LensFlareBokehShape: Texture
    open var LensFlareTints: LinearColor
    open var VignetteIntensity: Number
    open var GrainJitter: Number
    open var GrainIntensity: Number
    open var AmbientOcclusionIntensity: Number
    open var AmbientOcclusionStaticFraction: Number
    open var AmbientOcclusionRadius: Number
    open var AmbientOcclusionRadiusInWS: Boolean
    open var AmbientOcclusionFadeDistance: Number
    open var AmbientOcclusionFadeRadius: Number
    open var AmbientOcclusionDistance: Number
    open var AmbientOcclusionPower: Number
    open var AmbientOcclusionBias: Number
    open var AmbientOcclusionQuality: Number
    open var AmbientOcclusionMipBlend: Number
    open var AmbientOcclusionMipScale: Number
    open var AmbientOcclusionMipThreshold: Number
    open var RayTracingAO: Boolean
    open var RayTracingAOSamplesPerPixel: Number
    open var IndirectLightingColor: LinearColor
    open var IndirectLightingIntensity: Number
    open var RayTracingGI: Boolean
    open var RayTracingGIMaxBounces: Number
    open var RayTracingGISamplesPerPixel: Number
    open var ColorGradingIntensity: Number
    open var ColorGradingLUT: Texture
    open var DepthOfFieldSensorWidth: Number
    open var DepthOfFieldFocalDistance: Number
    open var DepthOfFieldDepthBlurAmount: Number
    open var DepthOfFieldDepthBlurRadius: Number
    open var DepthOfFieldFocalRegion: Number
    open var DepthOfFieldNearTransitionRegion: Number
    open var DepthOfFieldFarTransitionRegion: Number
    open var DepthOfFieldScale: Number
    open var DepthOfFieldNearBlurSize: Number
    open var DepthOfFieldFarBlurSize: Number
    open var DepthOfFieldOcclusion: Number
    open var DepthOfFieldSkyFocusDistance: Number
    open var DepthOfFieldVignetteSize: Number
    open var MotionBlurAmount: Number
    open var MotionBlurMax: Number
    open var MotionBlurTargetFPS: Number
    open var MotionBlurPerObjectSize: Number
    open var LPVIntensity: Number
    open var LPVVplInjectionBias: Number
    open var LPVSize: Number
    open var LPVSecondaryOcclusionIntensity: Number
    open var LPVSecondaryBounceIntensity: Number
    open var LPVGeometryVolumeBias: Number
    open var LPVEmissiveInjectionIntensity: Number
    open var LPVDirectionalOcclusionIntensity: Number
    open var LPVDirectionalOcclusionRadius: Number
    open var LPVDiffuseOcclusionExponent: Number
    open var LPVSpecularOcclusionExponent: Number
    open var LPVDiffuseOcclusionIntensity: Number
    open var LPVSpecularOcclusionIntensity: Number
    open var ReflectionsType: String /* "ScreenSpace" | "RayTracing" | "EReflectionsType_MAX" */
    open var ScreenSpaceReflectionIntensity: Number
    open var ScreenSpaceReflectionQuality: Number
    open var ScreenSpaceReflectionMaxRoughness: Number
    open var RayTracingReflectionsMaxRoughness: Number
    open var RayTracingReflectionsMaxBounces: Number
    open var RayTracingReflectionsSamplesPerPixel: Number
    open var RayTracingReflectionsShadows: String /* "Disabled" | "Hard_shadows" | "Area_shadows" | "EReflectedAndRefractedRayTracedShadows_MAX" */
    open var TranslucencyType: String /* "Raster" | "RayTracing" | "ETranslucencyType_MAX" */
    open var RayTracingTranslucencyMaxRoughness: Number
    open var RayTracingTranslucencyRefractionRays: Number
    open var RayTracingTranslucencySamplesPerPixel: Number
    open var RayTracingTranslucencyShadows: String /* "Disabled" | "Hard_shadows" | "Area_shadows" | "EReflectedAndRefractedRayTracedShadows_MAX" */
    open var RayTracingTranslucencyRefraction: Boolean
    open var PathTracingMaxBounces: Number
    open var PathTracingSamplesPerPixel: Number
    open var LPVFadeRange: Number
    open var LPVDirectionalOcclusionFadeRange: Number
    open var ScreenPercentage: Number
    open var WeightedBlendables: WeightedBlendables
    open var Blendables: Array<UObject>
    open fun clone(): PostProcessSettings

    companion object {
        fun C(Other: UObject): PostProcessSettings
        fun C(Other: Any): PostProcessSettings
    }
}

external open class MinimalViewInfo {
    open var Location: Vector
    open var Rotation: Rotator
    open var FOV: Number
    open var DesiredFOV: Number
    open var OrthoWidth: Number
    open var OrthoNearClipPlane: Number
    open var OrthoFarClipPlane: Number
    open var AspectRatio: Number
    open var bConstrainAspectRatio: Boolean
    open var bUseFieldOfViewForLOD: Boolean
    open var ProjectionMode: String /* "Perspective" | "Orthographic" | "ECameraProjectionMode_MAX" */
    open var PostProcessBlendWeight: Number
    open var PostProcessSettings: PostProcessSettings
    open var OffCenterProjectionOffset: Vector2D
    open fun clone(): MinimalViewInfo

    companion object {
        fun C(Other: UObject): MinimalViewInfo
        fun C(Other: Any): MinimalViewInfo
    }
}

external open class CameraCacheEntry {
    open var Timestamp: Number
    open var POV: MinimalViewInfo
    open fun clone(): CameraCacheEntry

    companion object {
        fun C(Other: UObject): CameraCacheEntry
        fun C(Other: Any): CameraCacheEntry
    }
}

external open class TViewTarget {
    open var Target: Actor
    open var POV: MinimalViewInfo
    open var PlayerState: PlayerState
    open fun clone(): TViewTarget

    companion object {
        fun C(Other: UObject): TViewTarget
        fun C(Other: Any): TViewTarget
    }
}

external interface `T$316` {
    var PostProcessBlendWeight: Number
    var PostProcessSettings: PostProcessSettings
}

external interface `T$317` {
    var NewViewLocation: Vector
    var NewViewRotation: Rotator
    var NewFOV: Number
}

external open class CameraModifier : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bDebug: Boolean
    open var bExclusive: Boolean
    open var Priority: Number
    open var CameraOwner: PlayerCameraManager
    open var AlphaInTime: Number
    open var AlphaOutTime: Number
    open var Alpha: Number
    open fun IsDisabled(): Boolean
    open fun GetViewTarget(): Actor
    open fun EnableModifier()
    open fun DisableModifier(bImmediate: Boolean)
    open fun BlueprintModifyPostProcess(DeltaTime: Number, PostProcessBlendWeight: Number = definedExternally, PostProcessSettings: PostProcessSettings = definedExternally): `T$316`
    open fun BlueprintModifyCamera(DeltaTime: Number, ViewLocation: Vector, ViewRotation: Rotator, FOV: Number, NewViewLocation: Vector = definedExternally, NewViewRotation: Rotator = definedExternally, NewFOV: Number = definedExternally): `T$317`

    companion object {
        fun Load(ResourceName: String): CameraModifier
        fun Find(Outer: UObject, ResourceName: String): CameraModifier
        fun GetDefaultObject(): CameraModifier
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraModifier
        fun C(Other: UObject): CameraModifier
        fun C(Other: Any): CameraModifier
    }
}

external open class FXSystemComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open fun SetVectorParameter(ParameterName: String, Param: Vector)
    open fun SetFloatParameter(ParameterName: String, Param: Number)
    open fun SetColorParameter(ParameterName: String, Param: LinearColor)
    open fun SetActorParameter(ParameterName: String, Param: Actor)

    companion object {
        fun Load(ResourceName: String): FXSystemComponent
        fun Find(Outer: UObject, ResourceName: String): FXSystemComponent
        fun GetDefaultObject(): FXSystemComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FXSystemComponent
        fun C(Other: UObject): FXSystemComponent
        fun C(Other: Any): FXSystemComponent
    }
}

external open class FXSystemAsset : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FXSystemAsset
        fun Find(Outer: UObject, ResourceName: String): FXSystemAsset
        fun GetDefaultObject(): FXSystemAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FXSystemAsset
        fun C(Other: UObject): FXSystemAsset
        fun C(Other: Any): FXSystemAsset
    }
}

external object EParticleSystemUpdateMode {
    var EPSUM_RealTime: String /* "EPSUM_RealTime" */
    var EPSUM_FixedTime: String /* "EPSUM_FixedTime" */
    var EPSUM_MAX: String /* "EPSUM_MAX" */
}

external object EEmitterRenderMode {
    var ERM_Normal: String /* "ERM_Normal" */
    var ERM_Point: String /* "ERM_Point" */
    var ERM_Cross: String /* "ERM_Cross" */
    var ERM_LightsOnly: String /* "ERM_LightsOnly" */
    var ERM_None: String /* "ERM_None" */
    var ERM_MAX: String /* "ERM_MAX" */
}

external object EParticleSignificanceLevel {
    var Low: String /* "Low" */
    var Medium: String /* "Medium" */
    var High: String /* "High" */
    var Critical: String /* "Critical" */
    var Num: String /* "Num" */
    var EParticleSignificanceLevel_MAX: String /* "EParticleSignificanceLevel_MAX" */
}

external open class ParticleModule : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bSpawnModule: Boolean
    open var bUpdateModule: Boolean
    open var bFinalUpdateModule: Boolean
    open var bUpdateForGPUEmitter: Boolean
    open var bCurvesAsColor: Boolean
    open var b3DDrawMode: Boolean
    open var bSupported3DDrawMode: Boolean
    open var bEnabled: Boolean
    open var bEditable: Boolean
    open var LODDuplicate: Boolean
    open var bSupportsRandomSeed: Boolean
    open var bRequiresLoopingNotification: Boolean
    open var LODValidity: Number
    open var ModuleEditorColor: Color

    companion object {
        fun Load(ResourceName: String): ParticleModule
        fun Find(Outer: UObject, ResourceName: String): ParticleModule
        fun GetDefaultObject(): ParticleModule
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModule
        fun C(Other: UObject): ParticleModule
        fun C(Other: Any): ParticleModule
    }
}

external object EParticleScreenAlignment {
    var PSA_FacingCameraPosition: String /* "PSA_FacingCameraPosition" */
    var PSA_Square: String /* "PSA_Square" */
    var PSA_Rectangle: String /* "PSA_Rectangle" */
    var PSA_Velocity: String /* "PSA_Velocity" */
    var PSA_AwayFromCenter: String /* "PSA_AwayFromCenter" */
    var PSA_TypeSpecific: String /* "PSA_TypeSpecific" */
    var PSA_FacingCameraDistanceBlend: String /* "PSA_FacingCameraDistanceBlend" */
    var PSA_MAX: String /* "PSA_MAX" */
}

external object EParticleSortMode {
    var PSORTMODE_None: String /* "PSORTMODE_None" */
    var PSORTMODE_ViewProjDepth: String /* "PSORTMODE_ViewProjDepth" */
    var PSORTMODE_DistanceToView: String /* "PSORTMODE_DistanceToView" */
    var PSORTMODE_Age_OldestFirst: String /* "PSORTMODE_Age_OldestFirst" */
    var PSORTMODE_Age_NewestFirst: String /* "PSORTMODE_Age_NewestFirst" */
    var PSORTMODE_MAX: String /* "PSORTMODE_MAX" */
}

external open class DistributionLookupTable {
    open var Op: Number
    open var EntryCount: Number
    open var EntryStride: Number
    open var SubEntryStride: Number
    open var TimeScale: Number
    open var TimeBias: Number
    open var Values: Array<Number>
    open var LockFlag: Number
    open fun clone(): DistributionLookupTable

    companion object {
        fun C(Other: UObject): DistributionLookupTable
        fun C(Other: Any): DistributionLookupTable
    }
}

external open class RawDistribution {
    open var Table: DistributionLookupTable
    open fun clone(): RawDistribution

    companion object {
        fun C(Other: UObject): RawDistribution
        fun C(Other: Any): RawDistribution
    }
}

external open class Distribution : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Distribution
        fun Find(Outer: UObject, ResourceName: String): Distribution
        fun GetDefaultObject(): Distribution
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Distribution
        fun C(Other: UObject): Distribution
        fun C(Other: Any): Distribution
    }
}

external open class DistributionFloat : Distribution {
    constructor()
    constructor(Outer: UObject)
    open var bCanBeBaked: Boolean
    open var bBakedDataSuccesfully: Boolean

    companion object {
        fun Load(ResourceName: String): DistributionFloat
        fun Find(Outer: UObject, ResourceName: String): DistributionFloat
        fun GetDefaultObject(): DistributionFloat
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DistributionFloat
        fun C(Other: UObject): DistributionFloat
        fun C(Other: Any): DistributionFloat
    }
}

external open class RawDistributionFloat : RawDistribution {
    open var MinValue: Number
    open var MaxValue: Number
    open var Distribution: DistributionFloat
    override fun clone(): RawDistributionFloat

    companion object {
        fun C(Other: UObject): RawDistributionFloat
        fun C(Other: Any): RawDistributionFloat
    }
}

external object EParticleBurstMethod {
    var EPBM_Instant: String /* "EPBM_Instant" */
    var EPBM_Interpolated: String /* "EPBM_Interpolated" */
    var EPBM_MAX: String /* "EPBM_MAX" */
}

external open class ParticleBurst {
    open var Count: Number
    open var CountLow: Number
    open var Time: Number
    open fun clone(): ParticleBurst

    companion object {
        fun C(Other: UObject): ParticleBurst
        fun C(Other: Any): ParticleBurst
    }
}

external object EParticleSubUVInterpMethod {
    var PSUVIM_None: String /* "PSUVIM_None" */
    var PSUVIM_Linear: String /* "PSUVIM_Linear" */
    var PSUVIM_Linear_Blend: String /* "PSUVIM_Linear_Blend" */
    var PSUVIM_Random: String /* "PSUVIM_Random" */
    var PSUVIM_Random_Blend: String /* "PSUVIM_Random_Blend" */
    var PSUVIM_MAX: String /* "PSUVIM_MAX" */
}

external object EParticleUVFlipMode {
    var None: String /* "None" */
    var FlipUV: String /* "FlipUV" */
    var FlipUOnly: String /* "FlipUOnly" */
    var FlipVOnly: String /* "FlipVOnly" */
    var RandomFlipUV: String /* "RandomFlipUV" */
    var RandomFlipUOnly: String /* "RandomFlipUOnly" */
    var RandomFlipVOnly: String /* "RandomFlipVOnly" */
    var RandomFlipUVIndependent: String /* "RandomFlipUVIndependent" */
    var EParticleUVFlipMode_MAX: String /* "EParticleUVFlipMode_MAX" */
}

external object ESubUVBoundingVertexCount {
    var BVC_FourVertices: String /* "BVC_FourVertices" */
    var BVC_EightVertices: String /* "BVC_EightVertices" */
    var BVC_MAX: String /* "BVC_MAX" */
}

external object EOpacitySourceMode {
    var OSM_Alpha: String /* "OSM_Alpha" */
    var OSM_ColorBrightness: String /* "OSM_ColorBrightness" */
    var OSM_RedChannel: String /* "OSM_RedChannel" */
    var OSM_GreenChannel: String /* "OSM_GreenChannel" */
    var OSM_BlueChannel: String /* "OSM_BlueChannel" */
    var OSM_MAX: String /* "OSM_MAX" */
}

external object EEmitterNormalsMode {
    var ENM_CameraFacing: String /* "ENM_CameraFacing" */
    var ENM_Spherical: String /* "ENM_Spherical" */
    var ENM_Cylindrical: String /* "ENM_Cylindrical" */
    var ENM_MAX: String /* "ENM_MAX" */
}

external open class ParticleModuleRequired : ParticleModule {
    constructor()
    constructor(Outer: UObject)
    open var Material: MaterialInterface
    open var EmitterOrigin: Vector
    open var EmitterRotation: Rotator
    open var ScreenAlignment: String /* "PSA_FacingCameraPosition" | "PSA_Square" | "PSA_Rectangle" | "PSA_Velocity" | "PSA_AwayFromCenter" | "PSA_TypeSpecific" | "PSA_FacingCameraDistanceBlend" | "PSA_MAX" */
    open var MinFacingCameraBlendDistance: Number
    open var MaxFacingCameraBlendDistance: Number
    open var bUseLocalSpace: Boolean
    open var bKillOnDeactivate: Boolean
    open var bKillOnCompleted: Boolean
    open var SortMode: String /* "PSORTMODE_None" | "PSORTMODE_ViewProjDepth" | "PSORTMODE_DistanceToView" | "PSORTMODE_Age_OldestFirst" | "PSORTMODE_Age_NewestFirst" | "PSORTMODE_MAX" */
    open var bUseLegacyEmitterTime: Boolean
    open var bRemoveHMDRoll: Boolean
    open var EmitterDuration: Number
    open var EmitterDurationLow: Number
    open var bEmitterDurationUseRange: Boolean
    open var bDurationRecalcEachLoop: Boolean
    open var EmitterLoops: Number
    open var SpawnRate: RawDistributionFloat
    open var ParticleBurstMethod: String /* "EPBM_Instant" | "EPBM_Interpolated" | "EPBM_MAX" */
    open var BurstList: Array<ParticleBurst>
    open var EmitterDelay: Number
    open var EmitterDelayLow: Number
    open var bEmitterDelayUseRange: Boolean
    open var bDelayFirstLoopOnly: Boolean
    open var InterpolationMethod: String /* "PSUVIM_None" | "PSUVIM_Linear" | "PSUVIM_Linear_Blend" | "PSUVIM_Random" | "PSUVIM_Random_Blend" | "PSUVIM_MAX" */
    open var SubImages_Horizontal: Number
    open var SubImages_Vertical: Number
    open var bScaleUV: Boolean
    open var RandomImageTime: Number
    open var RandomImageChanges: Number
    open var bOverrideSystemMacroUV: Boolean
    open var MacroUVPosition: Vector
    open var MacroUVRadius: Number
    open var bUseMaxDrawCount: Boolean
    open var MaxDrawCount: Number
    open var UVFlippingMode: String /* "None" | "FlipUV" | "FlipUOnly" | "FlipVOnly" | "RandomFlipUV" | "RandomFlipUOnly" | "RandomFlipVOnly" | "RandomFlipUVIndependent" | "EParticleUVFlipMode_MAX" */
    open var CutoutTexture: Texture2D
    open var BoundingMode: String /* "BVC_FourVertices" | "BVC_EightVertices" | "BVC_MAX" */
    open var OpacitySourceMode: String /* "OSM_Alpha" | "OSM_ColorBrightness" | "OSM_RedChannel" | "OSM_GreenChannel" | "OSM_BlueChannel" | "OSM_MAX" */
    open var AlphaThreshold: Number
    open var EmitterNormalsMode: String /* "ENM_CameraFacing" | "ENM_Spherical" | "ENM_Cylindrical" | "ENM_MAX" */
    open var NormalsSphereCenter: Vector
    open var NormalsCylinderDirection: Vector
    open var bOrbitModuleAffectsVelocityAlignment: Boolean
    open var NamedMaterialOverrides: Array<String>

    companion object {
        fun Load(ResourceName: String): ParticleModuleRequired
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleRequired
        fun GetDefaultObject(): ParticleModuleRequired
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleRequired
        fun C(Other: UObject): ParticleModuleRequired
        fun C(Other: Any): ParticleModuleRequired
    }
}

external open class ParticleModuleTypeDataBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ParticleModuleTypeDataBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleTypeDataBase
        fun GetDefaultObject(): ParticleModuleTypeDataBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleTypeDataBase
        fun C(Other: UObject): ParticleModuleTypeDataBase
        fun C(Other: Any): ParticleModuleTypeDataBase
    }
}

external open class ParticleModuleSpawnBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)
    open var bProcessSpawnRate: Boolean
    open var bProcessBurstList: Boolean

    companion object {
        fun Load(ResourceName: String): ParticleModuleSpawnBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleSpawnBase
        fun GetDefaultObject(): ParticleModuleSpawnBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleSpawnBase
        fun C(Other: UObject): ParticleModuleSpawnBase
        fun C(Other: Any): ParticleModuleSpawnBase
    }
}

external open class ParticleModuleSpawn : ParticleModuleSpawnBase {
    constructor()
    constructor(Outer: UObject)
    open var Rate: RawDistributionFloat
    open var RateScale: RawDistributionFloat
    open var ParticleBurstMethod: String /* "EPBM_Instant" | "EPBM_Interpolated" | "EPBM_MAX" */
    open var BurstList: Array<ParticleBurst>
    open var BurstScale: RawDistributionFloat
    open var bApplyGlobalSpawnRateScale: Boolean

    companion object {
        fun Load(ResourceName: String): ParticleModuleSpawn
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleSpawn
        fun GetDefaultObject(): ParticleModuleSpawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleSpawn
        fun C(Other: UObject): ParticleModuleSpawn
        fun C(Other: Any): ParticleModuleSpawn
    }
}

external open class ParticleModuleEventBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventBase
        fun GetDefaultObject(): ParticleModuleEventBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventBase
        fun C(Other: UObject): ParticleModuleEventBase
        fun C(Other: Any): ParticleModuleEventBase
    }
}

external object EParticleEventType {
    var EPET_Any: String /* "EPET_Any" */
    var EPET_Spawn: String /* "EPET_Spawn" */
    var EPET_Death: String /* "EPET_Death" */
    var EPET_Collision: String /* "EPET_Collision" */
    var EPET_Burst: String /* "EPET_Burst" */
    var EPET_Blueprint: String /* "EPET_Blueprint" */
    var EPET_MAX: String /* "EPET_MAX" */
}

external open class ParticleModuleEventSendToGame : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventSendToGame
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventSendToGame
        fun GetDefaultObject(): ParticleModuleEventSendToGame
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventSendToGame
        fun C(Other: UObject): ParticleModuleEventSendToGame
        fun C(Other: Any): ParticleModuleEventSendToGame
    }
}

external open class ParticleEvent_GenerateInfo {
    open var Type: String /* "EPET_Any" | "EPET_Spawn" | "EPET_Death" | "EPET_Collision" | "EPET_Burst" | "EPET_Blueprint" | "EPET_MAX" */
    open var Frequency: Number
    open var ParticleFrequency: Number
    open var FirstTimeOnly: Boolean
    open var LastTimeOnly: Boolean
    open var UseReflectedImpactVector: Boolean
    open var bUseOrbitOffset: Boolean
    open var CustomName: String
    open var ParticleModuleEventsToSendToGame: Array<ParticleModuleEventSendToGame>
    open fun clone(): ParticleEvent_GenerateInfo

    companion object {
        fun C(Other: UObject): ParticleEvent_GenerateInfo
        fun C(Other: Any): ParticleEvent_GenerateInfo
    }
}

external open class ParticleModuleEventGenerator : ParticleModuleEventBase {
    constructor()
    constructor(Outer: UObject)
    open var Events: Array<ParticleEvent_GenerateInfo>

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventGenerator
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventGenerator
        fun GetDefaultObject(): ParticleModuleEventGenerator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventGenerator
        fun C(Other: UObject): ParticleModuleEventGenerator
        fun C(Other: Any): ParticleModuleEventGenerator
    }
}

external open class ParticleModuleOrbitBase : ParticleModule {
    constructor()
    constructor(Outer: UObject)
    open var bUseEmitterTime: Boolean

    companion object {
        fun Load(ResourceName: String): ParticleModuleOrbitBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleOrbitBase
        fun GetDefaultObject(): ParticleModuleOrbitBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleOrbitBase
        fun C(Other: UObject): ParticleModuleOrbitBase
        fun C(Other: Any): ParticleModuleOrbitBase
    }
}

external object EOrbitChainMode {
    var EOChainMode_Add: String /* "EOChainMode_Add" */
    var EOChainMode_Scale: String /* "EOChainMode_Scale" */
    var EOChainMode_Link: String /* "EOChainMode_Link" */
    var EOChainMode_MAX: String /* "EOChainMode_MAX" */
}

external open class DistributionVector : Distribution {
    constructor()
    constructor(Outer: UObject)
    open var bCanBeBaked: Boolean
    open var bIsDirty: Boolean
    open var bBakedDataSuccesfully: Boolean

    companion object {
        fun Load(ResourceName: String): DistributionVector
        fun Find(Outer: UObject, ResourceName: String): DistributionVector
        fun GetDefaultObject(): DistributionVector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DistributionVector
        fun C(Other: UObject): DistributionVector
        fun C(Other: Any): DistributionVector
    }
}

external open class RawDistributionVector : RawDistribution {
    open var MinValue: Number
    open var MaxValue: Number
    open var MinValueVec: Vector
    open var MaxValueVec: Vector
    open var Distribution: DistributionVector
    override fun clone(): RawDistributionVector

    companion object {
        fun C(Other: UObject): RawDistributionVector
        fun C(Other: Any): RawDistributionVector
    }
}

external open class OrbitOptions {
    open var bProcessDuringSpawn: Boolean
    open var bProcessDuringUpdate: Boolean
    open var bUseEmitterTime: Boolean
    open fun clone(): OrbitOptions

    companion object {
        fun C(Other: UObject): OrbitOptions
        fun C(Other: Any): OrbitOptions
    }
}

external open class ParticleModuleOrbit : ParticleModuleOrbitBase {
    constructor()
    constructor(Outer: UObject)
    open var ChainMode: String /* "EOChainMode_Add" | "EOChainMode_Scale" | "EOChainMode_Link" | "EOChainMode_MAX" */
    open var OffsetAmount: RawDistributionVector
    open var OffsetOptions: OrbitOptions
    open var RotationAmount: RawDistributionVector
    open var RotationOptions: OrbitOptions
    open var RotationRateAmount: RawDistributionVector
    open var RotationRateOptions: OrbitOptions

    companion object {
        fun Load(ResourceName: String): ParticleModuleOrbit
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleOrbit
        fun GetDefaultObject(): ParticleModuleOrbit
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleOrbit
        fun C(Other: UObject): ParticleModuleOrbit
        fun C(Other: Any): ParticleModuleOrbit
    }
}

external open class ParticleModuleEventReceiverBase : ParticleModuleEventBase {
    constructor()
    constructor(Outer: UObject)
    open var EventGeneratorType: String /* "EPET_Any" | "EPET_Spawn" | "EPET_Death" | "EPET_Collision" | "EPET_Burst" | "EPET_Blueprint" | "EPET_MAX" */
    open var EventName: String

    companion object {
        fun Load(ResourceName: String): ParticleModuleEventReceiverBase
        fun Find(Outer: UObject, ResourceName: String): ParticleModuleEventReceiverBase
        fun GetDefaultObject(): ParticleModuleEventReceiverBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleModuleEventReceiverBase
        fun C(Other: UObject): ParticleModuleEventReceiverBase
        fun C(Other: Any): ParticleModuleEventReceiverBase
    }
}

external open class ParticleLODLevel : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Level: Number
    open var bEnabled: Boolean
    open var RequiredModule: ParticleModuleRequired
    open var Modules: Array<ParticleModule>
    open var TypeDataModule: ParticleModuleTypeDataBase
    open var SpawnModule: ParticleModuleSpawn
    open var EventGenerator: ParticleModuleEventGenerator
    open var SpawningModules: Array<ParticleModuleSpawnBase>
    open var SpawnModules: Array<ParticleModule>
    open var UpdateModules: Array<ParticleModule>
    open var OrbitModules: Array<ParticleModuleOrbit>
    open var EventReceiverModules: Array<ParticleModuleEventReceiverBase>
    open var ConvertedModules: Boolean
    open var PeakActiveParticles: Number

    companion object {
        fun Load(ResourceName: String): ParticleLODLevel
        fun Find(Outer: UObject, ResourceName: String): ParticleLODLevel
        fun GetDefaultObject(): ParticleLODLevel
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleLODLevel
        fun C(Other: UObject): ParticleLODLevel
        fun C(Other: Any): ParticleLODLevel
    }
}

external open class ParticleEmitter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var EmitterName: String
    open var SubUVDataOffset: Number
    open var EmitterRenderMode: String /* "ERM_Normal" | "ERM_Point" | "ERM_Cross" | "ERM_LightsOnly" | "ERM_None" | "ERM_MAX" */
    open var SignificanceLevel: String /* "Low" | "Medium" | "High" | "Critical" | "Num" | "EParticleSignificanceLevel_MAX" */
    open var bUseLegacySpawningBehavior: Boolean
    open var ConvertedModules: Boolean
    open var bIsSoloing: Boolean
    open var bCookedOut: Boolean
    open var bDisabledLODsKeepEmitterAlive: Boolean
    open var bDisableWhenInsignficant: Boolean
    open var bCollapsed: Boolean
    open var DetailMode: String /* "DM_Low" | "DM_Medium" | "DM_High" | "DM_MAX" */
    open var EmitterEditorColor: Color
    open var LODLevels: Array<ParticleLODLevel>
    open var PeakActiveParticles: Number
    open var InitialAllocationCount: Number
    open var QualityLevelSpawnRateScale: Number
    open var DetailModeBitmask: Any
    open var DetailModeDisplay: String

    companion object {
        fun Load(ResourceName: String): ParticleEmitter
        fun Find(Outer: UObject, ResourceName: String): ParticleEmitter
        fun GetDefaultObject(): ParticleEmitter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleEmitter
        fun C(Other: UObject): ParticleEmitter
        fun C(Other: Any): ParticleEmitter
    }
}

external open class CurveEdEntry {
    open var CurveObject: UObject
    open var CurveColor: Color
    open var CurveName: String
    open var bHideCurve: Number
    open var bColorCurve: Number
    open var bFloatingPointColorCurve: Number
    open var bClamp: Number
    open var ClampLow: Number
    open var ClampHigh: Number
    open fun clone(): CurveEdEntry

    companion object {
        fun C(Other: UObject): CurveEdEntry
        fun C(Other: Any): CurveEdEntry
    }
}

external open class CurveEdTab {
    open var TabName: String
    open var Curves: Array<CurveEdEntry>
    open var ViewStartInput: Number
    open var ViewEndInput: Number
    open var ViewStartOutput: Number
    open var ViewEndOutput: Number
    open fun clone(): CurveEdTab

    companion object {
        fun C(Other: UObject): CurveEdTab
        fun C(Other: Any): CurveEdTab
    }
}

external open class InterpCurveEdSetup : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Tabs: Array<CurveEdTab>
    open var ActiveTab: Number

    companion object {
        fun Load(ResourceName: String): InterpCurveEdSetup
        fun Find(Outer: UObject, ResourceName: String): InterpCurveEdSetup
        fun GetDefaultObject(): InterpCurveEdSetup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpCurveEdSetup
        fun C(Other: UObject): InterpCurveEdSetup
        fun C(Other: Any): InterpCurveEdSetup
    }
}

external object ParticleSystemLODMethod {
    var PARTICLESYSTEMLODMETHOD_Automatic: String /* "PARTICLESYSTEMLODMETHOD_Automatic" */
    var PARTICLESYSTEMLODMETHOD_DirectSet: String /* "PARTICLESYSTEMLODMETHOD_DirectSet" */
    var PARTICLESYSTEMLODMETHOD_ActivateAutomatic: String /* "PARTICLESYSTEMLODMETHOD_ActivateAutomatic" */
    var PARTICLESYSTEMLODMETHOD_MAX: String /* "PARTICLESYSTEMLODMETHOD_MAX" */
}

external open class ParticleSystemLOD {
    open fun clone(): ParticleSystemLOD

    companion object {
        fun C(Other: UObject): ParticleSystemLOD
        fun C(Other: Any): ParticleSystemLOD
    }
}

external object EParticleSystemInsignificanceReaction {
    var Auto: String /* "Auto" */
    var Complete: String /* "Complete" */
    var DisableTick: String /* "DisableTick" */
    var DisableTickAndKill: String /* "DisableTickAndKill" */
    var Num: String /* "Num" */
    var EParticleSystemInsignificanceReaction_MAX: String /* "EParticleSystemInsignificanceReaction_MAX" */
}

external object EParticleSystemOcclusionBoundsMethod {
    var EPSOBM_None: String /* "EPSOBM_None" */
    var EPSOBM_ParticleBounds: String /* "EPSOBM_ParticleBounds" */
    var EPSOBM_CustomBounds: String /* "EPSOBM_CustomBounds" */
    var EPSOBM_MAX: String /* "EPSOBM_MAX" */
}

external open class LODSoloTrack {
    open var SoloEnableSetting: Array<Number>
    open fun clone(): LODSoloTrack

    companion object {
        fun C(Other: UObject): LODSoloTrack
        fun C(Other: Any): LODSoloTrack
    }
}

external open class NamedEmitterMaterial {
    open var Name: String
    open var Material: MaterialInterface
    open fun clone(): NamedEmitterMaterial

    companion object {
        fun C(Other: UObject): NamedEmitterMaterial
        fun C(Other: Any): NamedEmitterMaterial
    }
}

external object EPSCPoolMethod {
    var None: String /* "None" */
    var AutoRelease: String /* "AutoRelease" */
    var ManualRelease: String /* "ManualRelease" */
    var ManualRelease_OnComplete: String /* "ManualRelease_OnComplete" */
    var FreeInPool: String /* "FreeInPool" */
    var EPSCPoolMethod_MAX: String /* "EPSCPoolMethod_MAX" */
}

external open class ParticleSystem : FXSystemAsset {
    constructor()
    constructor(Outer: UObject)
    open var SystemUpdateMode: String /* "EPSUM_RealTime" | "EPSUM_FixedTime" | "EPSUM_MAX" */
    open var UpdateTime_FPS: Number
    open var UpdateTime_Delta: Number
    open var WarmupTime: Number
    open var WarmupTickRate: Number
    open var Emitters: Array<ParticleEmitter>
    open var PreviewComponent: ParticleSystemComponent
    open var ThumbnailAngle: Rotator
    open var ThumbnailDistance: Number
    open var ThumbnailWarmup: Number
    open var CurveEdSetup: InterpCurveEdSetup
    open var bOrientZAxisTowardCamera: Boolean
    open var LODDistanceCheckTime: Number
    open var LODMethod: String /* "PARTICLESYSTEMLODMETHOD_Automatic" | "PARTICLESYSTEMLODMETHOD_DirectSet" | "PARTICLESYSTEMLODMETHOD_ActivateAutomatic" | "PARTICLESYSTEMLODMETHOD_MAX" */
    open var LODDistances: Array<Number>
    open var EditorLODSetting: Number
    open var bRegenerateLODDuplicate: Boolean
    open var LODSettings: Array<ParticleSystemLOD>
    open var bUseFixedRelativeBoundingBox: Boolean
    open var FixedRelativeBoundingBox: Box
    open var SecondsBeforeInactive: Number
    open var FloorMesh: String
    open var FloorPosition: Vector
    open var FloorRotation: Rotator
    open var FloorScale: Number
    open var FloorScale3D: Vector
    open var BackgroundColor: Color
    open var bShouldResetPeakCounts: Boolean
    open var bHasPhysics: Boolean
    open var bUseRealtimeThumbnail: Boolean
    open var ThumbnailImageOutOfDate: Boolean
    open var ThumbnailImage: Texture2D
    open var Delay: Number
    open var DelayLow: Number
    open var bUseDelayRange: Boolean
    open var bAllowManagedTicking: Boolean
    open var bAutoDeactivate: Boolean
    open var MinTimeBetweenTicks: Any
    open var InsignificantReaction: String /* "Auto" | "Complete" | "DisableTick" | "DisableTickAndKill" | "Num" | "EParticleSystemInsignificanceReaction_MAX" */
    open var InsignificanceDelay: Number
    open var MaxSignificanceLevel: String /* "Low" | "Medium" | "High" | "Critical" | "Num" | "EParticleSignificanceLevel_MAX" */
    open var MaxPoolSize: Any
    open var MacroUVPosition: Vector
    open var MacroUVRadius: Number
    open var OcclusionBoundsMethod: String /* "EPSOBM_None" | "EPSOBM_ParticleBounds" | "EPSOBM_CustomBounds" | "EPSOBM_MAX" */
    open var CustomOcclusionBounds: Box
    open var SoloTracking: Array<LODSoloTrack>
    open var NamedMaterialSlots: Array<NamedEmitterMaterial>
    open fun ContainsEmitterType(TypeData: UnrealEngineClass): Boolean
    open fun SpawnEmitterAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, Scale: Vector, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */): ParticleSystemComponent

    companion object {
        fun Load(ResourceName: String): ParticleSystem
        fun Find(Outer: UObject, ResourceName: String): ParticleSystem
        fun GetDefaultObject(): ParticleSystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleSystem
        fun C(Other: UObject): ParticleSystem
        fun C(Other: Any): ParticleSystem
        fun SpawnEmitterAttached(EmitterTemplate: ParticleSystem, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, Scale: Vector, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */): ParticleSystemComponent
    }
}

external object EParticleSysParamType {
    var PSPT_None: String /* "PSPT_None" */
    var PSPT_Scalar: String /* "PSPT_Scalar" */
    var PSPT_ScalarRand: String /* "PSPT_ScalarRand" */
    var PSPT_Vector: String /* "PSPT_Vector" */
    var PSPT_VectorRand: String /* "PSPT_VectorRand" */
    var PSPT_Color: String /* "PSPT_Color" */
    var PSPT_Actor: String /* "PSPT_Actor" */
    var PSPT_Material: String /* "PSPT_Material" */
    var PSPT_MAX: String /* "PSPT_MAX" */
}

external open class ParticleSysParam {
    open var Name: String
    open var ParamType: String /* "PSPT_None" | "PSPT_Scalar" | "PSPT_ScalarRand" | "PSPT_Vector" | "PSPT_VectorRand" | "PSPT_Color" | "PSPT_Actor" | "PSPT_Material" | "PSPT_MAX" */
    open var Scalar: Number
    open var Scalar_Low: Number
    open var Vector: Vector
    open var Vector_Low: Vector
    open var Color: Color
    open var Actor: Actor
    open var Material: MaterialInterface
    open fun clone(): ParticleSysParam

    companion object {
        fun C(Other: UObject): ParticleSysParam
        fun C(Other: Any): ParticleSysParam
    }
}

external open class ParticleSystemReplay : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ClipIDNumber: Number

    companion object {
        fun Load(ResourceName: String): ParticleSystemReplay
        fun Find(Outer: UObject, ResourceName: String): ParticleSystemReplay
        fun GetDefaultObject(): ParticleSystemReplay
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleSystemReplay
        fun C(Other: UObject): ParticleSystemReplay
        fun C(Other: Any): ParticleSystemReplay
    }
}

external object ETrailWidthMode {
    var ETrailWidthMode_FromCentre: String /* "ETrailWidthMode_FromCentre" */
    var ETrailWidthMode_FromFirst: String /* "ETrailWidthMode_FromFirst" */
    var ETrailWidthMode_FromSecond: String /* "ETrailWidthMode_FromSecond" */
    var ETrailWidthMode_MAX: String /* "ETrailWidthMode_MAX" */
}

external interface `T$318` {
    var OutTangentPoint: Vector
    var `$`: Boolean
}

external interface `T$319` {
    var OutTargetStrength: Number
    var `$`: Boolean
}

external interface `T$320` {
    var OutTargetPoint: Vector
    var `$`: Boolean
}

external interface `T$321` {
    var OutSourceStrength: Number
    var `$`: Boolean
}

external interface `T$322` {
    var OutSourcePoint: Vector
    var `$`: Boolean
}

external interface `T$323` {
    var OutEndPoint: Vector
    var `$`: Boolean
}

external open class ParticleSystemComponent : FXSystemComponent {
    constructor()
    constructor(Outer: UObject)
    open var Template: ParticleSystem
    open var EmitterMaterials: Array<MaterialInterface>
    open var SkelMeshComponents: Array<SkeletalMeshComponent>
    open var bResetOnDetach: Boolean
    open var bUpdateOnDedicatedServer: Boolean
    open var bAllowRecycling: Boolean
    open var bAutoManageAttachment: Boolean
    open var bWarmingUp: Boolean
    open var bOverrideLODMethod: Boolean
    open var bSkipUpdateDynamicDataDuringTick: Boolean
    open var LODMethod: String /* "PARTICLESYSTEMLODMETHOD_Automatic" | "PARTICLESYSTEMLODMETHOD_DirectSet" | "PARTICLESYSTEMLODMETHOD_ActivateAutomatic" | "PARTICLESYSTEMLODMETHOD_MAX" */
    open var RequiredSignificance: String /* "Low" | "Medium" | "High" | "Critical" | "Num" | "EParticleSignificanceLevel_MAX" */
    open var InstanceParameters: Array<ParticleSysParam>
    open var OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, Location: Vector, Velocity: Vector) -> Unit>
    open var OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleCount: Number) -> Unit>
    open var OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector) -> Unit>
    open var OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: String, PhysMat: PhysicalMaterial) -> Unit>
    open var OldPosition: Vector
    open var PartSysVelocity: Vector
    open var WarmupTime: Number
    open var WarmupTickRate: Number
    open var SecondsBeforeInactive: Number
    open var MaxTimeBeforeForceUpdateTransform: Number
    open var EditorLODLevel: Number
    open var EditorDetailMode: Number
    open var ReplayClips: Array<ParticleSystemReplay>
    open var CustomTimeDilation: Number
    open var AutoAttachParent: Any
    open var AutoAttachSocketName: String
    open var AutoAttachLocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */
    open var AutoAttachLocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachRotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var OnSystemFinished: UnrealEngineMulticastDelegate<(PSystem: ParticleSystemComponent) -> Unit>
    open fun SetTrailSourceData(InFirstSocketName: String, InSecondSocketName: String, InWidthMode: String /* "ETrailWidthMode_FromCentre" | "ETrailWidthMode_FromFirst" | "ETrailWidthMode_FromSecond" | "ETrailWidthMode_MAX" */, InWidth: Number)
    open fun SetTemplate(NewTemplate: ParticleSystem)
    open fun SetMaterialParameter(ParameterName: String, Param: MaterialInterface)
    open fun SetEmitterEnable(EmitterName: String, bNewEnableState: Boolean)
    open fun SetBeamTargetTangent(EmitterIndex: Number, NewTangentPoint: Vector, TargetIndex: Number)
    open fun SetBeamTargetStrength(EmitterIndex: Number, NewTargetStrength: Number, TargetIndex: Number)
    open fun SetBeamTargetPoint(EmitterIndex: Number, NewTargetPoint: Vector, TargetIndex: Number)
    open fun SetBeamSourceTangent(EmitterIndex: Number, NewTangentPoint: Vector, SourceIndex: Number)
    open fun SetBeamSourceStrength(EmitterIndex: Number, NewSourceStrength: Number, SourceIndex: Number)
    open fun SetBeamSourcePoint(EmitterIndex: Number, NewSourcePoint: Vector, SourceIndex: Number)
    open fun SetBeamEndPoint(EmitterIndex: Number, NewEndPoint: Vector)
    open fun SetAutoAttachParams(Parent: SceneComponent, SocketName: String, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */)
    open fun SetAutoAttachmentParameters(Parent: SceneComponent, SocketName: String, LocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */)
    open fun ReleaseToPool()
    open fun GetNumActiveParticles(): Number
    open fun GetNamedMaterial(InName: String): MaterialInterface
    open fun GetBeamTargetTangent(EmitterIndex: Number, TargetIndex: Number, OutTangentPoint: Vector = definedExternally): `T$318`
    open fun GetBeamTargetStrength(EmitterIndex: Number, TargetIndex: Number, OutTargetStrength: Number = definedExternally): `T$319`
    open fun GetBeamTargetPoint(EmitterIndex: Number, TargetIndex: Number, OutTargetPoint: Vector = definedExternally): `T$320`
    open fun GetBeamSourceTangent(EmitterIndex: Number, SourceIndex: Number, OutTangentPoint: Vector = definedExternally): `T$318`
    open fun GetBeamSourceStrength(EmitterIndex: Number, SourceIndex: Number, OutSourceStrength: Number = definedExternally): `T$321`
    open fun GetBeamSourcePoint(EmitterIndex: Number, SourceIndex: Number, OutSourcePoint: Vector = definedExternally): `T$322`
    open fun GetBeamEndPoint(EmitterIndex: Number, OutEndPoint: Vector = definedExternally): `T$323`
    open fun GenerateParticleEvent(InEventName: String, InEmitterTime: Number, InLocation: Vector, InDirection: Vector, InVelocity: Vector)
    open fun EndTrails()
    open fun CreateNamedDynamicMaterialInstance(InName: String, SourceMaterial: MaterialInterface): MaterialInstanceDynamic
    open fun BeginTrails(InFirstSocketName: String, InSecondSocketName: String, InWidthMode: String /* "ETrailWidthMode_FromCentre" | "ETrailWidthMode_FromFirst" | "ETrailWidthMode_FromSecond" | "ETrailWidthMode_MAX" */, InWidth: Number)

    companion object {
        fun Load(ResourceName: String): ParticleSystemComponent
        fun Find(Outer: UObject, ResourceName: String): ParticleSystemComponent
        fun GetDefaultObject(): ParticleSystemComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleSystemComponent
        fun C(Other: UObject): ParticleSystemComponent
        fun C(Other: Any): ParticleSystemComponent
    }
}

external open class ArrowComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var ArrowColor: Color
    open var ArrowSize: Number
    open var bIsScreenSizeScaled: Boolean
    open var ScreenSize: Number
    open var bTreatAsASprite: Boolean
    open var SpriteCategoryName: String
    open var SpriteInfo: SpriteCategoryInfo
    open var bLightAttachment: Boolean
    open var bUseInEditorScaling: Boolean
    open fun SetArrowColor(NewColor: LinearColor)

    companion object {
        fun Load(ResourceName: String): ArrowComponent
        fun Find(Outer: UObject, ResourceName: String): ArrowComponent
        fun GetDefaultObject(): ArrowComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ArrowComponent
        fun C(Other: UObject): ArrowComponent
        fun C(Other: Any): ArrowComponent
    }
}

external open class Emitter(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var ParticleSystemComponent: ParticleSystemComponent
    open var bDestroyOnSystemFinish: Boolean
    open var bPostUpdateTickGroup: Boolean
    open var bCurrentlyActive: Boolean
    open var OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, Location: Vector, Velocity: Vector) -> Unit>
    open var OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleCount: Number) -> Unit>
    open var OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector) -> Unit>
    open var OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: String, EmitterTime: Number, ParticleTime: Number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: String, PhysMat: PhysicalMaterial) -> Unit>
    open var SpriteComponent: BillboardComponent
    open var ArrowComponent: ArrowComponent
    open fun ToggleActive()
    open fun SetVectorParameter(ParameterName: String, Param: Vector)
    open fun SetTemplate(NewTemplate: ParticleSystem)
    open fun SetMaterialParameter(ParameterName: String, Param: MaterialInterface)
    open fun SetFloatParameter(ParameterName: String, Param: Number)
    open fun SetColorParameter(ParameterName: String, Param: LinearColor)
    open fun SetActorParameter(ParameterName: String, Param: Actor)
    open fun OnRep_bCurrentlyActive()
    open fun OnParticleSystemFinished(FinishedComponent: ParticleSystemComponent)
    open fun IsActive(): Boolean
    open fun Deactivate()
    open fun Activate()

    companion object {
        fun GetDefaultObject(): Emitter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Emitter
        fun C(Other: UObject): Emitter
        fun C(Other: Any): Emitter
    }
}

external open class EmitterCameraLensEffectBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Emitter {
    open var PS_CameraEffect: ParticleSystem
    open var PS_CameraEffectNonExtremeContent: ParticleSystem
    open var BaseCamera: PlayerCameraManager
    open var RelativeTransform: Transform
    open var BaseFOV: Number
    open var bAllowMultipleInstances: Boolean
    open var bResetWhenRetriggered: Boolean
    open var EmittersToTreatAsSame: Array<UnrealEngineClass>
    open var DistFromCamera: Number

    companion object {
        fun GetDefaultObject(): EmitterCameraLensEffectBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EmitterCameraLensEffectBase
        fun C(Other: UObject): EmitterCameraLensEffectBase
        fun C(Other: Any): EmitterCameraLensEffectBase
    }
}

external object EInitialOscillatorOffset {
    var EOO_OffsetRandom: String /* "EOO_OffsetRandom" */
    var EOO_OffsetZero: String /* "EOO_OffsetZero" */
    var EOO_MAX: String /* "EOO_MAX" */
}

external object EOscillatorWaveform {
    var SineWave: String /* "SineWave" */
    var PerlinNoise: String /* "PerlinNoise" */
    var EOscillatorWaveform_MAX: String /* "EOscillatorWaveform_MAX" */
}

external open class FOscillator {
    open var Amplitude: Number
    open var Frequency: Number
    open var InitialOffset: String /* "EOO_OffsetRandom" | "EOO_OffsetZero" | "EOO_MAX" */
    open var Waveform: String /* "SineWave" | "PerlinNoise" | "EOscillatorWaveform_MAX" */
    open fun clone(): FOscillator

    companion object {
        fun C(Other: UObject): FOscillator
        fun C(Other: Any): FOscillator
    }
}

external open class ROscillator {
    open var Pitch: FOscillator
    open var Yaw: FOscillator
    open var Roll: FOscillator
    open fun clone(): ROscillator

    companion object {
        fun C(Other: UObject): ROscillator
        fun C(Other: Any): ROscillator
    }
}

external open class VOscillator {
    open var X: FOscillator
    open var Y: FOscillator
    open var Z: FOscillator
    open fun clone(): VOscillator

    companion object {
        fun C(Other: UObject): VOscillator
        fun C(Other: Any): VOscillator
    }
}

external open class SubTrackGroup {
    open var GroupName: String
    open var TrackIndices: Array<Number>
    open var bIsCollapsed: Boolean
    open var bIsSelected: Boolean
    open fun clone(): SubTrackGroup

    companion object {
        fun C(Other: UObject): SubTrackGroup
        fun C(Other: Any): SubTrackGroup
    }
}

external open class SupportedSubTrackInfo {
    open var SupportedClass: UnrealEngineClass
    open var SubTrackName: String
    open var GroupIndex: Number
    open fun clone(): SupportedSubTrackInfo

    companion object {
        fun C(Other: UObject): SupportedSubTrackInfo
        fun C(Other: Any): SupportedSubTrackInfo
    }
}

external object ETrackActiveCondition {
    var ETAC_Always: String /* "ETAC_Always" */
    var ETAC_GoreEnabled: String /* "ETAC_GoreEnabled" */
    var ETAC_GoreDisabled: String /* "ETAC_GoreDisabled" */
    var ETAC_MAX: String /* "ETAC_MAX" */
}

external open class InterpTrack : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SubTracks: Array<InterpTrack>
    open var SubTrackGroups: Array<SubTrackGroup>
    open var SupportedSubTracks: Array<SupportedSubTrackInfo>
    open var TrackInstClass: UnrealEngineClass
    open var ActiveCondition: String /* "ETAC_Always" | "ETAC_GoreEnabled" | "ETAC_GoreDisabled" | "ETAC_MAX" */
    open var TrackTitle: String
    open var bOnePerGroup: Boolean
    open var bDirGroupOnly: Boolean
    open var bDisableTrack: Boolean
    open var bIsSelected: Boolean
    open var TrackIcon: Texture2D
    open var bIsAnimControlTrack: Boolean
    open var bSubTrackOnly: Boolean
    open var bVisible: Boolean
    open var bIsRecording: Boolean
    open var bIsCollapsed: Boolean

    companion object {
        fun Load(ResourceName: String): InterpTrack
        fun Find(Outer: UObject, ResourceName: String): InterpTrack
        fun GetDefaultObject(): InterpTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrack
        fun C(Other: UObject): InterpTrack
        fun C(Other: Any): InterpTrack
    }
}

external open class InterpGroup : UObject {
    constructor()
    constructor(Outer: UObject)
    open var InterpTracks: Array<InterpTrack>
    open var GroupName: String
    open var GroupColor: Color
    open var bCollapsed: Boolean
    open var bVisible: Boolean
    open var bIsFolder: Boolean
    open var bIsParented: Boolean
    open var bIsSelected: Boolean

    companion object {
        fun Load(ResourceName: String): InterpGroup
        fun Find(Outer: UObject, ResourceName: String): InterpGroup
        fun GetDefaultObject(): InterpGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpGroup
        fun C(Other: UObject): InterpGroup
        fun C(Other: Any): InterpGroup
    }
}

external open class CameraAnim : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CameraInterpGroup: InterpGroup
    open var PreviewInterpGroup: InterpGroup
    open var AnimLength: Number
    open var BoundingBox: Box
    open var bRelativeToInitialTransform: Boolean
    open var bRelativeToInitialFOV: Boolean
    open var BaseFOV: Number
    open var BasePostProcessSettings: PostProcessSettings
    open var BasePostProcessBlendWeight: Number

    companion object {
        fun Load(ResourceName: String): CameraAnim
        fun Find(Outer: UObject, ResourceName: String): CameraAnim
        fun GetDefaultObject(): CameraAnim
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnim
        fun C(Other: UObject): CameraAnim
        fun C(Other: Any): CameraAnim
    }
}

external open class InterpGroupInst : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Group: InterpGroup
    open var GroupActor: Actor
    open var TrackInst: Array<InterpTrackInst>

    companion object {
        fun Load(ResourceName: String): InterpGroupInst
        fun Find(Outer: UObject, ResourceName: String): InterpGroupInst
        fun GetDefaultObject(): InterpGroupInst
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpGroupInst
        fun C(Other: UObject): InterpGroupInst
        fun C(Other: Any): InterpGroupInst
    }
}

external object EInterpCurveMode {
    var CIM_Linear: String /* "CIM_Linear" */
    var CIM_CurveAuto: String /* "CIM_CurveAuto" */
    var CIM_Constant: String /* "CIM_Constant" */
    var CIM_CurveUser: String /* "CIM_CurveUser" */
    var CIM_CurveBreak: String /* "CIM_CurveBreak" */
    var CIM_CurveAutoClamped: String /* "CIM_CurveAutoClamped" */
    var CIM_MAX: String /* "CIM_MAX" */
}

external open class InterpCurvePointVector {
    open var InVal: Number
    open var OutVal: Vector
    open var ArriveTangent: Vector
    open var LeaveTangent: Vector
    open var InterpMode: String /* "CIM_Linear" | "CIM_CurveAuto" | "CIM_Constant" | "CIM_CurveUser" | "CIM_CurveBreak" | "CIM_CurveAutoClamped" | "CIM_MAX" */
    open fun clone(): InterpCurvePointVector

    companion object {
        fun C(Other: UObject): InterpCurvePointVector
        fun C(Other: Any): InterpCurvePointVector
    }
}

external open class InterpCurveVector {
    open var Points: Array<InterpCurvePointVector>
    open var bIsLooped: Boolean
    open var LoopKeyOffset: Number
    open fun clone(): InterpCurveVector

    companion object {
        fun C(Other: UObject): InterpCurveVector
        fun C(Other: Any): InterpCurveVector
    }
}

external open class InterpLookupPoint {
    open var GroupName: String
    open var Time: Number
    open fun clone(): InterpLookupPoint

    companion object {
        fun C(Other: UObject): InterpLookupPoint
        fun C(Other: Any): InterpLookupPoint
    }
}

external open class InterpLookupTrack {
    open var Points: Array<InterpLookupPoint>
    open fun clone(): InterpLookupTrack

    companion object {
        fun C(Other: UObject): InterpLookupTrack
        fun C(Other: Any): InterpLookupTrack
    }
}

external object EInterpTrackMoveRotMode {
    var IMR_Keyframed: String /* "IMR_Keyframed" */
    var IMR_LookAtGroup: String /* "IMR_LookAtGroup" */
    var IMR_Ignore: String /* "IMR_Ignore" */
    var IMR_MAX: String /* "IMR_MAX" */
}

external open class InterpTrackMove : InterpTrack {
    constructor()
    constructor(Outer: UObject)
    open var PosTrack: InterpCurveVector
    open var EulerTrack: InterpCurveVector
    open var LookupTrack: InterpLookupTrack
    open var LookAtGroupName: String
    open var LinCurveTension: Number
    open var AngCurveTension: Number
    open var bUseQuatInterpolation: Boolean
    open var bShowArrowAtKeys: Boolean
    open var bDisableMovement: Boolean
    open var bShowTranslationOnCurveEd: Boolean
    open var bShowRotationOnCurveEd: Boolean
    open var bHide3DTrack: Boolean
    open var RotMode: String /* "IMR_Keyframed" | "IMR_LookAtGroup" | "IMR_Ignore" | "IMR_MAX" */

    companion object {
        fun Load(ResourceName: String): InterpTrackMove
        fun Find(Outer: UObject, ResourceName: String): InterpTrackMove
        fun GetDefaultObject(): InterpTrackMove
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackMove
        fun C(Other: UObject): InterpTrackMove
        fun C(Other: Any): InterpTrackMove
    }
}

external open class InterpTrackInstMove : InterpTrackInst {
    constructor()
    constructor(Outer: UObject)
    open var ResetLocation: Vector
    open var ResetRotation: Rotator

    companion object {
        fun Load(ResourceName: String): InterpTrackInstMove
        fun Find(Outer: UObject, ResourceName: String): InterpTrackInstMove
        fun GetDefaultObject(): InterpTrackInstMove
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpTrackInstMove
        fun C(Other: UObject): InterpTrackInstMove
        fun C(Other: Any): InterpTrackInstMove
    }
}

external object ECameraAnimPlaySpace {
    var CameraLocal: String /* "CameraLocal" */
    var World: String /* "World" */
    var UserDefined: String /* "UserDefined" */
    var ECameraAnimPlaySpace_MAX: String /* "ECameraAnimPlaySpace_MAX" */
}

external open class CameraAnimInst : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CamAnim: CameraAnim
    open var InterpGroupInst: InterpGroupInst
    open var PlayRate: Number
    open var MoveTrack: InterpTrackMove
    open var MoveInst: InterpTrackInstMove
    open var PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraAnimPlaySpace_MAX" */
    open fun Stop(bImmediate: Boolean)
    open fun SetScale(NewDuration: Number)
    open fun SetDuration(NewDuration: Number)

    companion object {
        fun Load(ResourceName: String): CameraAnimInst
        fun Find(Outer: UObject, ResourceName: String): CameraAnimInst
        fun GetDefaultObject(): CameraAnimInst
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraAnimInst
        fun C(Other: UObject): CameraAnimInst
        fun C(Other: Any): CameraAnimInst
    }
}

external interface `T$324` {
    var ModifiedPOV: MinimalViewInfo
}

external open class CameraShake : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bSingleInstance: Boolean
    open var OscillationDuration: Number
    open var OscillationBlendInTime: Number
    open var OscillationBlendOutTime: Number
    open var RotOscillation: ROscillator
    open var LocOscillation: VOscillator
    open var FOVOscillation: FOscillator
    open var AnimPlayRate: Number
    open var AnimScale: Number
    open var AnimBlendInTime: Number
    open var AnimBlendOutTime: Number
    open var RandomAnimSegmentDuration: Number
    open var Anim: CameraAnim
    open var bRandomAnimSegment: Boolean
    open var CameraOwner: PlayerCameraManager
    open var ShakeScale: Number
    open var OscillatorTimeRemaining: Number
    open var AnimInst: CameraAnimInst
    open fun ReceiveStopShake(bImmediately: Boolean)
    open fun ReceivePlayShake(Scale: Number)
    open fun ReceiveIsFinished(): Boolean
    open fun BlueprintUpdateCameraShake(DeltaTime: Number, Alpha: Number, POV: MinimalViewInfo, ModifiedPOV: MinimalViewInfo = definedExternally): `T$324`

    companion object {
        fun Load(ResourceName: String): CameraShake
        fun Find(Outer: UObject, ResourceName: String): CameraShake
        fun GetDefaultObject(): CameraShake
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraShake
        fun C(Other: UObject): CameraShake
        fun C(Other: Any): CameraShake
    }
}

external open class CameraModifier_CameraShake : CameraModifier {
    constructor()
    constructor(Outer: UObject)
    open var ActiveShakes: Array<CameraShake>
    open var ExpiredPooledShakesMap: Any
    open var SplitScreenShakeScale: Number

    companion object {
        fun Load(ResourceName: String): CameraModifier_CameraShake
        fun Find(Outer: UObject, ResourceName: String): CameraModifier_CameraShake
        fun GetDefaultObject(): CameraModifier_CameraShake
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraModifier_CameraShake
        fun C(Other: UObject): CameraModifier_CameraShake
        fun C(Other: Any): CameraModifier_CameraShake
    }
}

external open class MeshBuildSettings {
    open var bUseMikkTSpace: Boolean
    open var bRecomputeNormals: Boolean
    open var bRecomputeTangents: Boolean
    open var bRemoveDegenerates: Boolean
    open var bBuildAdjacencyBuffer: Boolean
    open var bBuildReversedIndexBuffer: Boolean
    open var bUseHighPrecisionTangentBasis: Boolean
    open var bUseFullPrecisionUVs: Boolean
    open var bGenerateLightmapUVs: Boolean
    open var bGenerateDistanceFieldAsIfTwoSided: Boolean
    open var MinLightmapResolution: Number
    open var SrcLightmapIndex: Number
    open var DstLightmapIndex: Number
    open var BuildScale: Number
    open var BuildScale3D: Vector
    open var DistanceFieldResolutionScale: Number
    open var DistanceFieldBias: Number
    open var DistanceFieldReplacementMesh: StaticMesh
    open fun clone(): MeshBuildSettings

    companion object {
        fun C(Other: UObject): MeshBuildSettings
        fun C(Other: Any): MeshBuildSettings
    }
}

external object EMeshFeatureImportance {
    var Off: String /* "Off" */
    var Lowest: String /* "Lowest" */
    var Low: String /* "Low" */
    var Normal: String /* "Normal" */
    var High: String /* "High" */
    var Highest: String /* "Highest" */
    var EMeshFeatureImportance_MAX: String /* "EMeshFeatureImportance_MAX" */
}

external object EStaticMeshReductionTerimationCriterion {
    var Triangles: String /* "Triangles" */
    var Vertices: String /* "Vertices" */
    var Any: String /* "Any" */
    var EStaticMeshReductionTerimationCriterion_MAX: String /* "EStaticMeshReductionTerimationCriterion_MAX" */
}

external open class MeshReductionSettings {
    open var PercentTriangles: Number
    open var PercentVertices: Number
    open var MaxDeviation: Number
    open var PixelError: Number
    open var WeldingThreshold: Number
    open var HardAngleThreshold: Number
    open var BaseLODModel: Number
    open var SilhouetteImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var TextureImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var ShadingImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var bRecalculateNormals: Boolean
    open var bGenerateUniqueLightmapUVs: Boolean
    open var bKeepSymmetry: Boolean
    open var bVisibilityAided: Boolean
    open var bCullOccluded: Boolean
    open var TerminationCriterion: String /* "Triangles" | "Vertices" | "Any" | "EStaticMeshReductionTerimationCriterion_MAX" */
    open var VisibilityAggressiveness: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open var VertexColorImportance: String /* "Off" | "Lowest" | "Low" | "Normal" | "High" | "Highest" | "EMeshFeatureImportance_MAX" */
    open fun clone(): MeshReductionSettings

    companion object {
        fun C(Other: UObject): MeshReductionSettings
        fun C(Other: Any): MeshReductionSettings
    }
}

external open class StaticMeshSourceModel {
    open var BuildSettings: MeshBuildSettings
    open var ReductionSettings: MeshReductionSettings
    open var LODDistance: Number
    open var ScreenSize: PerPlatformFloat
    open var SourceImportFilename: String
    open var bImportWithBaseMesh: Boolean
    open fun clone(): StaticMeshSourceModel

    companion object {
        fun C(Other: UObject): StaticMeshSourceModel
        fun C(Other: Any): StaticMeshSourceModel
    }
}

external open class MeshSectionInfoMap {
    open var Map: Any
    open fun clone(): MeshSectionInfoMap

    companion object {
        fun C(Other: UObject): MeshSectionInfoMap
        fun C(Other: Any): MeshSectionInfoMap
    }
}

external open class MaterialRemapIndex {
    open var ImportVersionKey: Any
    open var MaterialRemap: Array<Number>
    open fun clone(): MaterialRemapIndex

    companion object {
        fun C(Other: UObject): MaterialRemapIndex
        fun C(Other: Any): MaterialRemapIndex
    }
}

external open class StaticMaterial {
    open var MaterialInterface: MaterialInterface
    open var MaterialSlotName: String
    open var ImportedMaterialSlotName: String
    open var UVChannelData: MeshUVChannelInfo
    open fun clone(): StaticMaterial

    companion object {
        fun C(Other: UObject): StaticMaterial
        fun C(Other: Any): StaticMaterial
    }
}

external open class AssetEditorOrbitCameraPosition {
    open var bIsSet: Boolean
    open var CamOrbitPoint: Vector
    open var CamOrbitZoom: Vector
    open var CamOrbitRotation: Rotator
    open fun clone(): AssetEditorOrbitCameraPosition

    companion object {
        fun C(Other: UObject): AssetEditorOrbitCameraPosition
        fun C(Other: Any): AssetEditorOrbitCameraPosition
    }
}

external open class StaticMeshSocket : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SocketName: String
    open var RelativeLocation: Vector
    open var RelativeRotation: Rotator
    open var RelativeScale: Vector
    open var Tag: String
    open var PreviewStaticMesh: StaticMesh
    open var bSocketCreatedAtImport: Boolean

    companion object {
        fun Load(ResourceName: String): StaticMeshSocket
        fun Find(Outer: UObject, ResourceName: String): StaticMeshSocket
        fun GetDefaultObject(): StaticMeshSocket
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshSocket
        fun C(Other: UObject): StaticMeshSocket
        fun C(Other: Any): StaticMeshSocket
    }
}

external open class NavCollisionBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bIsDynamicObstacle: Boolean

    companion object {
        fun Load(ResourceName: String): NavCollisionBase
        fun Find(Outer: UObject, ResourceName: String): NavCollisionBase
        fun GetDefaultObject(): NavCollisionBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavCollisionBase
        fun C(Other: UObject): NavCollisionBase
        fun C(Other: Any): NavCollisionBase
    }
}

external open class MeshSectionInfo {
    open var MaterialIndex: Number
    open var bEnableCollision: Boolean
    open var bCastShadow: Boolean
    open fun clone(): MeshSectionInfo

    companion object {
        fun C(Other: UObject): MeshSectionInfo
        fun C(Other: Any): MeshSectionInfo
    }
}

external open class JavascriptRawMesh {
    open var FaceMaterialIndices: Array<Number>
    open var FaceSmoothingMasks: Array<Any>
    open var VertexPositions: Array<Vector>
    open var WedgeIndices: Array<Any>
    open var WedgeTangentX: Array<Vector>
    open var WedgeTangentY: Array<Vector>
    open var WedgeTangentZ: Array<Vector>
    open var WedgeTexCoords_0: Array<Vector2D>
    open var WedgeTexCoords_1: Array<Vector2D>
    open var WedgeTexCoords_2: Array<Vector2D>
    open var WedgeTexCoords_3: Array<Vector2D>
    open var WedgeTexCoords_4: Array<Vector2D>
    open var WedgeTexCoords_5: Array<Vector2D>
    open var WedgeTexCoords_6: Array<Vector2D>
    open var WedgeTexCoords_7: Array<Vector2D>
    open var WedgeColors: Array<Color>
    open var MaterialIndexToImportIndex: Array<Number>
    open fun clone(): JavascriptRawMesh
    open fun CompactMaterialIndices(): `T$229`
    open fun Empty(): `T$229`
    open fun GetWedgePosition(WedgeIndex: Number): Vector
    open fun IsValid(): Boolean
    open fun IsValidOrFixable(): Boolean

    companion object {
        fun C(Other: UObject): JavascriptRawMesh
        fun C(Other: Any): JavascriptRawMesh
        fun CompactMaterialIndices(RawMesh: JavascriptRawMesh = definedExternally): `T$229`
        fun Empty(RawMesh: JavascriptRawMesh = definedExternally): `T$229`
        fun GetWedgePosition(RawMesh: JavascriptRawMesh, WedgeIndex: Number): Vector
        fun IsValid(RawMesh: JavascriptRawMesh): Boolean
        fun IsValidOrFixable(RawMesh: JavascriptRawMesh): Boolean
    }
}

external open class ProcMeshTangent {
    open var TangentX: Vector
    open var bFlipTangentY: Boolean
    open fun clone(): ProcMeshTangent

    companion object {
        fun C(Other: UObject): ProcMeshTangent
        fun C(Other: Any): ProcMeshTangent
    }
}

external interface `T$325` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external interface `T$326` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external open class StaticMesh : StreamableRenderAsset {
    constructor()
    constructor(Outer: UObject)
    open var SourceModels: Array<StaticMeshSourceModel>
    open var SectionInfoMap: MeshSectionInfoMap
    open var OriginalSectionInfoMap: MeshSectionInfoMap
    open var LODGroup: String
    open var NumStreamedLODs: PerPlatformInt
    open var ImportVersion: Number
    open var MaterialRemapIndexPerImportVersion: Array<MaterialRemapIndex>
    open var LightmapUVVersion: Number
    open var bAutoComputeLODScreenSize: Boolean
    open var Materials: Array<MaterialInterface>
    open var MinLOD: PerPlatformInt
    open var LpvBiasMultiplier: Number
    open var StaticMaterials: Array<StaticMaterial>
    open var LightmapUVDensity: Number
    open var LightMapResolution: Number
    open var LightMapCoordinateIndex: Number
    open var DistanceFieldSelfShadowBias: Number
    open var BodySetup: BodySetup
    open var LODForCollision: Number
    open var bGenerateMeshDistanceField: Boolean
    open var bStripComplexCollisionForConsole: Boolean
    open var bHasNavigationData: Boolean
    open var bSupportUniformlyDistributedSampling: Boolean
    open var bAllowCPUAccess: Boolean
    open var bSupportGpuUniformlyDistributedSampling: Boolean
    open var AssetImportData: AssetImportData
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var ThumbnailInfo: ThumbnailInfo
    open var EditorCameraPosition: AssetEditorOrbitCameraPosition
    open var bCustomizedCollision: Boolean
    open var LODForOccluderMesh: Number
    open var Sockets: Array<StaticMeshSocket>
    open var PositiveBoundsExtension: Vector
    open var NegativeBoundsExtension: Vector
    open var ExtendedBounds: BoxSphereBounds
    open var ElementToIgnoreForTexFactor: Number
    open var AssetUserData: Array<AssetUserData>
    open var EditableMesh: UObject
    open var ComplexCollisionMesh: StaticMesh
    open var NavCollision: NavCollisionBase
    open fun SetMaterial(MaterialIndex: Number, NewMaterial: MaterialInterface)
    open fun RemoveSocket(Socket: StaticMeshSocket)
    open fun GetNumSections(InLOD: Number): Number
    open fun GetNumLODs(): Number
    open fun GetMaterialIndex(MaterialSlotName: String): Number
    open fun GetMaterial(MaterialIndex: Number): MaterialInterface
    open fun GetBounds(): BoxSphereBounds
    open fun GetBoundingBox(): Box
    open fun FindSocket(InSocketName: String): StaticMeshSocket
    open fun AddSocket(Socket: StaticMeshSocket)
    open fun Build()
    open fun GetSectionInfo(LODIndex: Number, SectionIndex: Number): MeshSectionInfo
    open fun LoadRawMesh(SourceModelIndex: Number, OutMesh: JavascriptRawMesh = definedExternally): `T$228`
    open fun SaveRawMesh(SourceModelIndex: Number, InMesh: JavascriptRawMesh = definedExternally): `T$227`
    open fun SetSectionInfo(LODIndex: Number, SectionIndex: Number, Info: MeshSectionInfo)
    open fun GetSectionFromStaticMesh(LODIndex: Number, SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$325`

    companion object {
        fun Load(ResourceName: String): StaticMesh
        fun Find(Outer: UObject, ResourceName: String): StaticMesh
        fun GetDefaultObject(): StaticMesh
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMesh
        fun C(Other: UObject): StaticMesh
        fun C(Other: Any): StaticMesh
        fun Build(StaticMesh: StaticMesh)
        fun GetSectionInfo(StaticMesh: StaticMesh, LODIndex: Number, SectionIndex: Number): MeshSectionInfo
        fun LoadRawMesh(StaticMesh: StaticMesh, SourceModelIndex: Number, OutMesh: JavascriptRawMesh = definedExternally): `T$228`
        fun SaveRawMesh(StaticMesh: StaticMesh, SourceModelIndex: Number, InMesh: JavascriptRawMesh = definedExternally): `T$227`
        fun SetSectionInfo(StaticMesh: StaticMesh, LODIndex: Number, SectionIndex: Number, Info: MeshSectionInfo)
        fun GetSectionFromStaticMesh(InMesh: StaticMesh, LODIndex: Number, SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$326`
    }
}

external interface `T$327` {
    var DesiredView: MinimalViewInfo
}

external open class CameraComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var FieldOfView: Number
    open var OrthoWidth: Number
    open var OrthoNearClipPlane: Number
    open var OrthoFarClipPlane: Number
    open var AspectRatio: Number
    open var bConstrainAspectRatio: Boolean
    open var bUseFieldOfViewForLOD: Boolean
    open var bLockToHmd: Boolean
    open var bUsePawnControlRotation: Boolean
    open var ProjectionMode: String /* "Perspective" | "Orthographic" | "ECameraProjectionMode_MAX" */
    open var CameraMesh: StaticMesh
    open var PostProcessBlendWeight: Number
    open var PostProcessSettings: PostProcessSettings
    open var bUseControllerViewRotation: Boolean
    open fun SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD: Boolean)
    open fun SetProjectionMode(InProjectionMode: String /* "Perspective" | "Orthographic" | "ECameraProjectionMode_MAX" */)
    open fun SetPostProcessBlendWeight(InPostProcessBlendWeight: Number)
    open fun SetOrthoWidth(InOrthoWidth: Number)
    open fun SetOrthoNearClipPlane(InOrthoNearClipPlane: Number)
    open fun SetOrthoFarClipPlane(InOrthoFarClipPlane: Number)
    open fun SetFieldOfView(InFieldOfView: Number)
    open fun SetConstraintAspectRatio(bInConstrainAspectRatio: Boolean)
    open fun SetAspectRatio(InAspectRatio: Number)
    open fun GetFilmbackText(): String
    open fun GetCameraView(DeltaTime: Number, DesiredView: MinimalViewInfo = definedExternally): `T$327`

    companion object {
        fun Load(ResourceName: String): CameraComponent
        fun Find(Outer: UObject, ResourceName: String): CameraComponent
        fun GetDefaultObject(): CameraComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraComponent
        fun C(Other: UObject): CameraComponent
        fun C(Other: Any): CameraComponent
    }
}

external open class CameraActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var AutoActivateForPlayer: String /* "Disabled" | "Player0" | "Player1" | "Player2" | "Player3" | "Player4" | "Player5" | "Player6" | "Player7" | "EAutoReceiveInput_MAX" */
    open var CameraComponent: CameraComponent
    open var SceneComponent: SceneComponent
    open var bConstrainAspectRatio: Boolean
    open var AspectRatio: Number
    open var FOVAngle: Number
    open var PostProcessBlendWeight: Number
    open var PostProcessSettings: PostProcessSettings
    open fun GetAutoActivatePlayerIndex(): Number
    open fun DrawDebugCamera(CameraColor: LinearColor, Duration: Number)

    companion object {
        fun GetDefaultObject(): CameraActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CameraActor
        fun C(Other: UObject): CameraActor
        fun C(Other: Any): CameraActor
        fun DrawDebugCamera(CameraActor: CameraActor, CameraColor: LinearColor, Duration: Number)
    }
}

external interface `T$328` {
    var ResultCameraLocation: Vector
}

external interface `T$329` {
    var NewCameraLocation: Vector
    var NewCameraRotation: Rotator
    var NewCameraFOV: Number
    var `$`: Boolean
}

external open class PlayerCameraManager(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var PCOwner: PlayerController
    open var TransformComponent: SceneComponent
    open var DefaultFOV: Number
    open var DefaultOrthoWidth: Number
    open var DefaultAspectRatio: Number
    open var CameraCache: CameraCacheEntry
    open var LastFrameCameraCache: CameraCacheEntry
    open var ViewTarget: TViewTarget
    open var PendingViewTarget: TViewTarget
    open var CameraCachePrivate: CameraCacheEntry
    open var LastFrameCameraCachePrivate: CameraCacheEntry
    open var ModifierList: Array<CameraModifier>
    open var DefaultModifiers: Array<UnrealEngineClass>
    open var FreeCamDistance: Number
    open var FreeCamOffset: Vector
    open var ViewTargetOffset: Vector
    open var CameraLensEffects: Array<EmitterCameraLensEffectBase>
    open var CachedCameraShakeMod: CameraModifier_CameraShake
    open var AnimInstPool: CameraAnimInst
    open var PostProcessBlendCache: Array<PostProcessSettings>
    open var ActiveAnims: Array<CameraAnimInst>
    open var FreeAnims: Array<CameraAnimInst>
    open var AnimCameraActor: CameraActor
    open var bIsOrthographic: Boolean
    open var bDefaultConstrainAspectRatio: Boolean
    open var bClientSimulatingViewTarget: Boolean
    open var bUseClientSideCameraUpdates: Boolean
    open var bGameCameraCutThisFrame: Boolean
    open var ViewPitchMin: Number
    open var ViewPitchMax: Number
    open var ViewYawMin: Number
    open var ViewYawMax: Number
    open var ViewRollMin: Number
    open var ViewRollMax: Number
    open var ServerUpdateCameraTimeout: Number
    open fun StopCameraShake(ShakeInstance: CameraShake, bImmediately: Boolean)
    open fun StopCameraFade()
    open fun StopCameraAnimInst(AnimInst: CameraAnimInst, bImmediate: Boolean)
    open fun StopAllInstancesOfCameraShake(Shake: UnrealEngineClass, bImmediately: Boolean)
    open fun StopAllInstancesOfCameraAnim(Anim: CameraAnim, bImmediate: Boolean)
    open fun StopAllCameraShakes(bImmediately: Boolean)
    open fun StopAllCameraAnims(bImmediate: Boolean)
    open fun StartCameraFade(FromAlpha: Number, ToAlpha: Number, Duration: Number, Color: LinearColor, bShouldFadeAudio: Boolean, bHoldWhenFinished: Boolean)
    open fun SetManualCameraFade(InFadeAmount: Number, Color: LinearColor, bInFadeAudio: Boolean)
    open fun SetGameCameraCutThisFrame()
    open fun RemoveCameraModifier(ModifierToRemove: CameraModifier): Boolean
    open fun RemoveCameraLensEffect(Emitter: EmitterCameraLensEffectBase)
    open fun PlayCameraShake(ShakeClass: UnrealEngineClass, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraAnimPlaySpace_MAX" */, UserPlaySpaceRot: Rotator): CameraShake
    open fun PlayCameraAnim(Anim: CameraAnim, Rate: Number, Scale: Number, BlendInTime: Number, BlendOutTime: Number, bLoop: Boolean, bRandomStartTime: Boolean, Duration: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraAnimPlaySpace_MAX" */, UserPlaySpaceRot: Rotator): CameraAnimInst
    open fun PhotographyCameraModify(NewCameraLocation: Vector, PreviousCameraLocation: Vector, OriginalCameraLocation: Vector, ResultCameraLocation: Vector = definedExternally): `T$328`
    open fun OnPhotographySessionStart()
    open fun OnPhotographySessionEnd()
    open fun OnPhotographyMultiPartCaptureStart()
    open fun OnPhotographyMultiPartCaptureEnd()
    open fun GetOwningPlayerController(): PlayerController
    open fun GetFOVAngle(): Number
    open fun GetCameraRotation(): Rotator
    open fun GetCameraLocation(): Vector
    open fun FindCameraModifierByClass(ModifierClass: UnrealEngineClass): CameraModifier
    open fun ClearCameraLensEffects()
    open fun BlueprintUpdateCamera(CameraTarget: Actor, NewCameraLocation: Vector = definedExternally, NewCameraRotation: Rotator = definedExternally, NewCameraFOV: Number = definedExternally): `T$329`
    open fun AddNewCameraModifier(ModifierClass: UnrealEngineClass): CameraModifier
    open fun AddCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass): EmitterCameraLensEffectBase

    companion object {
        fun GetDefaultObject(): PlayerCameraManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerCameraManager
        fun C(Other: UObject): PlayerCameraManager
        fun C(Other: Any): PlayerCameraManager
    }
}

external open class DrawFrustumComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var FrustumColor: Color
    open var FrustumAngle: Number
    open var FrustumAspectRatio: Number
    open var FrustumStartDist: Number
    open var FrustumEndDist: Number
    open var Texture: Texture

    companion object {
        fun Load(ResourceName: String): DrawFrustumComponent
        fun Find(Outer: UObject, ResourceName: String): DrawFrustumComponent
        fun GetDefaultObject(): DrawFrustumComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DrawFrustumComponent
        fun C(Other: UObject): DrawFrustumComponent
        fun C(Other: Any): DrawFrustumComponent
    }
}

external open class DebugCameraController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : PlayerController {
    open var bShowSelectedInfo: Boolean
    open var bIsFrozenRendering: Boolean
    open var bIsOrbitingSelectedActor: Boolean
    open var bOrbitPivotUseCenter: Boolean
    open var bEnableBufferVisualization: Boolean
    open var bEnableBufferVisualizationFullMode: Boolean
    open var bIsBufferVisualizationInputSetup: Boolean
    open var bLastDisplayEnabled: Boolean
    open var DrawFrustum: DrawFrustumComponent
    open var SelectedActor: Actor
    open var SelectedComponent: PrimitiveComponent
    open var SelectedHitPoint: HitResult
    open var OriginalControllerRef: PlayerController
    open var OriginalPlayer: Player
    open var SpeedScale: Number
    open var InitialMaxSpeed: Number
    open var InitialAccel: Number
    open var InitialDecel: Number
    open fun ToggleDisplay()
    open fun ShowDebugSelectedInfo()
    open fun SetPawnMovementSpeedScale(NewSpeedScale: Number)
    open fun ReceiveOnDeactivate(RestoredPC: PlayerController)
    open fun ReceiveOnActorSelected(NewSelectedActor: Actor, SelectHitLocation: Vector, SelectHitNormal: Vector, Hit: HitResult)
    open fun ReceiveOnActivate(OriginalPC: PlayerController)
    open fun GetSelectedActor(): Actor

    companion object {
        fun GetDefaultObject(): DebugCameraController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DebugCameraController
        fun C(Other: UObject): DebugCameraController
        fun C(Other: Any): DebugCameraController
    }
}

external interface `T$330` {
    var GoString: String
    var LocString: String
}

external open class CheatManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DebugCameraControllerRef: DebugCameraController
    open var DebugCameraControllerClass: UnrealEngineClass
    open fun Walk()
    open fun ViewSelf()
    open fun ViewPlayer(S: String)
    open fun ViewClass(DesiredClass: UnrealEngineClass)
    open fun ViewActor(ActorName: String)
    open fun UpdateSafeArea()
    open fun ToggleServerStatReplicatorUpdateStatNet()
    open fun ToggleServerStatReplicatorClientOverwrite()
    open fun ToggleDebugCamera()
    open fun ToggleAILogging()
    open fun TestCollisionDistance()
    open fun Teleport()
    open fun Summon(ClassName: String)
    open fun StreamLevelOut(PackageName: String)
    open fun StreamLevelIn(PackageName: String)
    open fun SpawnServerStatReplicator()
    open fun Slomo(NewTimeDilation: Number)
    open fun SetWorldOrigin()
    open fun SetMouseSensitivityToDefault()
    open fun ServerToggleAILogging()
    open fun ReceiveInitCheatManager()
    open fun ReceiveEndPlay()
    open fun PlayersOnly()
    open fun OnlyLoadLevel(PackageName: String)
    open fun LogLoc()
    open fun InvertMouse()
    open fun God()
    open fun Ghost()
    open fun FreezeFrame(Delay: Number)
    open fun Fly()
    open fun FlushLog()
    open fun EnableDebugCamera()
    open fun DumpVoiceMutingState()
    open fun DumpPartyState()
    open fun DumpOnlineSessionState()
    open fun DumpChatState()
    open fun DisableDebugCamera()
    open fun DestroyTarget()
    open fun DestroyServerStatReplicator()
    open fun DestroyPawns(aClass: UnrealEngineClass)
    open fun DestroyAllPawnsExceptTarget()
    open fun DestroyAll(aClass: UnrealEngineClass)
    open fun DebugCapsuleSweepSize(HalfHeight: Number, Radius: Number)
    open fun DebugCapsuleSweepPawn()
    open fun DebugCapsuleSweepComplex(bTraceComplex: Boolean)
    open fun DebugCapsuleSweepClear()
    open fun DebugCapsuleSweepChannel(Channel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */)
    open fun DebugCapsuleSweepCapture()
    open fun DebugCapsuleSweep()
    open fun DamageTarget(DamageAmount: Number)
    open fun CheatScript(ScriptName: String)
    open fun ChangeSize(F: Number)
    open fun BugItStringCreator(ViewLocation: Vector, ViewRotation: Rotator, GoString: String = definedExternally, LocString: String = definedExternally): `T$330`
    open fun BugItGo(X: Number, Y: Number, Z: Number, Pitch: Number, Yaw: Number, Roll: Number)
    open fun BugIt(ScreenShotDescription: String)

    companion object {
        fun Load(ResourceName: String): CheatManager
        fun Find(Outer: UObject, ResourceName: String): CheatManager
        fun GetDefaultObject(): CheatManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CheatManager
        fun C(Other: UObject): CheatManager
        fun C(Other: Any): CheatManager
    }
}

external open class KeyBind {
    open var Key: Key
    open var Command: String
    open var Control: Boolean
    open var Shift: Boolean
    open var Alt: Boolean
    open var Cmd: Boolean
    open var bIgnoreCtrl: Boolean
    open var bIgnoreShift: Boolean
    open var bIgnoreAlt: Boolean
    open var bIgnoreCmd: Boolean
    open var bDisabled: Boolean
    open fun clone(): KeyBind

    companion object {
        fun C(Other: UObject): KeyBind
        fun C(Other: Any): KeyBind
    }
}

external open class PlayerInput : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DebugExecBindings: Array<KeyBind>
    open var InvertedAxis: Array<String>
    open fun SetMouseSensitivity(Sensitivity: Number)
    open fun SetBind(BindName: String, Command: String)
    open fun InvertAxisKey(AxisKey: Key)
    open fun InvertAxis(AxisName: String)
    open fun ClearSmoothing()

    companion object {
        fun Load(ResourceName: String): PlayerInput
        fun Find(Outer: UObject, ResourceName: String): PlayerInput
        fun GetDefaultObject(): PlayerInput
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerInput
        fun C(Other: UObject): PlayerInput
        fun C(Other: Any): PlayerInput
    }
}

external open class RuntimeFloatCurve {
    open var EditorCurveData: RichCurve
    open var ExternalCurve: CurveFloat
    open fun clone(): RuntimeFloatCurve

    companion object {
        fun C(Other: UObject): RuntimeFloatCurve
        fun C(Other: Any): RuntimeFloatCurve
    }
}

external open class ForceFeedbackChannelDetails {
    open var bAffectsLeftLarge: Boolean
    open var bAffectsLeftSmall: Boolean
    open var bAffectsRightLarge: Boolean
    open var bAffectsRightSmall: Boolean
    open var Curve: RuntimeFloatCurve
    open fun clone(): ForceFeedbackChannelDetails

    companion object {
        fun C(Other: UObject): ForceFeedbackChannelDetails
        fun C(Other: Any): ForceFeedbackChannelDetails
    }
}

external object EAttenuationDistanceModel {
    var Linear: String /* "Linear" */
    var Logarithmic: String /* "Logarithmic" */
    var Inverse: String /* "Inverse" */
    var LogReverse: String /* "LogReverse" */
    var NaturalSound: String /* "NaturalSound" */
    var Custom: String /* "Custom" */
    var EAttenuationDistanceModel_MAX: String /* "EAttenuationDistanceModel_MAX" */
}

external object EAttenuationShape {
    var Sphere: String /* "Sphere" */
    var Capsule: String /* "Capsule" */
    var Box: String /* "Box" */
    var Cone: String /* "Cone" */
    var EAttenuationShape_MAX: String /* "EAttenuationShape_MAX" */
}

external open class BaseAttenuationSettings {
    open var DistanceAlgorithm: String /* "Linear" | "Logarithmic" | "Inverse" | "LogReverse" | "NaturalSound" | "Custom" | "EAttenuationDistanceModel_MAX" */
    open var AttenuationShape: String /* "Sphere" | "Capsule" | "Box" | "Cone" | "EAttenuationShape_MAX" */
    open var dBAttenuationAtMax: Number
    open var AttenuationShapeExtents: Vector
    open var ConeOffset: Number
    open var FalloffDistance: Number
    open var CustomAttenuationCurve: RuntimeFloatCurve
    open fun clone(): BaseAttenuationSettings

    companion object {
        fun C(Other: UObject): BaseAttenuationSettings
        fun C(Other: Any): BaseAttenuationSettings
    }
}

external open class ForceFeedbackAttenuationSettings : BaseAttenuationSettings {
    override fun clone(): ForceFeedbackAttenuationSettings

    companion object {
        fun C(Other: UObject): ForceFeedbackAttenuationSettings
        fun C(Other: Any): ForceFeedbackAttenuationSettings
    }
}

external open class ForceFeedbackAttenuation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Attenuation: ForceFeedbackAttenuationSettings

    companion object {
        fun Load(ResourceName: String): ForceFeedbackAttenuation
        fun Find(Outer: UObject, ResourceName: String): ForceFeedbackAttenuation
        fun GetDefaultObject(): ForceFeedbackAttenuation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ForceFeedbackAttenuation
        fun C(Other: UObject): ForceFeedbackAttenuation
        fun C(Other: Any): ForceFeedbackAttenuation
    }
}

external interface `T$331` {
    var OutAttenuationSettings: ForceFeedbackAttenuationSettings
    var `$`: Boolean
}

external open class ForceFeedbackComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var ForceFeedbackEffect: ForceFeedbackEffect
    open var bAutoDestroy: Boolean
    open var bStopWhenOwnerDestroyed: Boolean
    open var bLooping: Boolean
    open var bIgnoreTimeDilation: Boolean
    open var bOverrideAttenuation: Boolean
    open var IntensityMultiplier: Number
    open var AttenuationSettings: ForceFeedbackAttenuation
    open var AttenuationOverrides: ForceFeedbackAttenuationSettings
    open var OnForceFeedbackFinished: UnrealEngineMulticastDelegate<(ForceFeedbackComponent: ForceFeedbackComponent) -> Unit>
    open fun Stop()
    open fun SetIntensityMultiplier(NewIntensityMultiplier: Number)
    open fun SetForceFeedbackEffect(NewForceFeedbackEffect: ForceFeedbackEffect)
    open fun Play(StartTime: Number)
    open fun BP_GetAttenuationSettingsToApply(OutAttenuationSettings: ForceFeedbackAttenuationSettings = definedExternally): `T$331`
    open fun AdjustAttenuation(InAttenuationSettings: ForceFeedbackAttenuationSettings)

    companion object {
        fun Load(ResourceName: String): ForceFeedbackComponent
        fun Find(Outer: UObject, ResourceName: String): ForceFeedbackComponent
        fun GetDefaultObject(): ForceFeedbackComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ForceFeedbackComponent
        fun C(Other: UObject): ForceFeedbackComponent
        fun C(Other: Any): ForceFeedbackComponent
    }
}

external open class ForceFeedbackEffect : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChannelDetails: Array<ForceFeedbackChannelDetails>
    open var Duration: Number
    open fun SpawnForceFeedbackAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent

    companion object {
        fun Load(ResourceName: String): ForceFeedbackEffect
        fun Find(Outer: UObject, ResourceName: String): ForceFeedbackEffect
        fun GetDefaultObject(): ForceFeedbackEffect
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ForceFeedbackEffect
        fun C(Other: UObject): ForceFeedbackEffect
        fun C(Other: Any): ForceFeedbackEffect
        fun SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent
    }
}

external open class ActiveForceFeedbackEffect {
    open var ForceFeedbackEffect: ForceFeedbackEffect
    open fun clone(): ActiveForceFeedbackEffect

    companion object {
        fun C(Other: UObject): ActiveForceFeedbackEffect
        fun C(Other: Any): ActiveForceFeedbackEffect
    }
}

external open class ChildConnection : NetConnection {
    constructor()
    constructor(Outer: UObject)
    open var Parent: NetConnection

    companion object {
        fun Load(ResourceName: String): ChildConnection
        fun Find(Outer: UObject, ResourceName: String): ChildConnection
        fun GetDefaultObject(): ChildConnection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ChildConnection
        fun C(Other: UObject): ChildConnection
        fun C(Other: Any): ChildConnection
    }
}

external open class Property : Field {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Property
        fun Find(Outer: UObject, ResourceName: String): Property
        fun GetDefaultObject(): Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Property
        fun C(Other: UObject): Property
        fun C(Other: Any): Property
    }
}

external open class ChannelDefinition {
    open var ChannelName: String
    open var ClassName: String
    open var ChannelClass: UnrealEngineClass
    open var StaticChannelIndex: Number
    open var bTickOnCreate: Boolean
    open var bServerOpen: Boolean
    open var bClientOpen: Boolean
    open var bInitialServer: Boolean
    open var bInitialClient: Boolean
    open fun clone(): ChannelDefinition

    companion object {
        fun C(Other: UObject): ChannelDefinition
        fun C(Other: Any): ChannelDefinition
    }
}

external open class Channel : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Connection: NetConnection

    companion object {
        fun Load(ResourceName: String): Channel
        fun Find(Outer: UObject, ResourceName: String): Channel
        fun GetDefaultObject(): Channel
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Channel
        fun C(Other: UObject): Channel
        fun C(Other: Any): Channel
    }
}

external open class ReplicationDriver : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReplicationDriver
        fun Find(Outer: UObject, ResourceName: String): ReplicationDriver
        fun GetDefaultObject(): ReplicationDriver
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReplicationDriver
        fun C(Other: UObject): ReplicationDriver
        fun C(Other: Any): ReplicationDriver
    }
}

external open class NetDriver : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NetConnectionClassName: String
    open var ReplicationDriverClassName: String
    open var MaxDownloadSize: Number
    open var bClampListenServerTickRate: Boolean
    open var NetServerMaxTickRate: Number
    open var MaxNetTickRate: Number
    open var MaxInternetClientRate: Number
    open var MaxClientRate: Number
    open var ServerTravelPause: Number
    open var SpawnPrioritySeconds: Number
    open var RelevantTimeout: Number
    open var KeepAliveTime: Number
    open var InitialConnectTimeout: Number
    open var ConnectionTimeout: Number
    open var TimeoutMultiplierForUnoptimizedBuilds: Number
    open var bNoTimeouts: Boolean
    open var ServerConnection: NetConnection
    open var ClientConnections: Array<NetConnection>
    open var RecentlyDisconnectedTrackingTime: Number
    open var World: World
    open var WorldPackage: Package
    open var NetConnectionClass: UnrealEngineClass
    open var ReplicationDriverClass: UnrealEngineClass
    open var RoleProperty: Property
    open var RemoteRoleProperty: Property
    open var NetDriverName: String
    open var ChannelDefinitions: Array<ChannelDefinition>
    open var ChannelDefinitionMap: Any
    open var ActorChannelPool: Array<Channel>
    open var Time: Number
    open var ReplicationDriver: ReplicationDriver

    companion object {
        fun Load(ResourceName: String): NetDriver
        fun Find(Outer: UObject, ResourceName: String): NetDriver
        fun GetDefaultObject(): NetDriver
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NetDriver
        fun C(Other: UObject): NetDriver
        fun C(Other: Any): NetDriver
    }
}

external open class PackageMap : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PackageMap
        fun Find(Outer: UObject, ResourceName: String): PackageMap
        fun GetDefaultObject(): PackageMap
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PackageMap
        fun C(Other: UObject): PackageMap
        fun C(Other: Any): PackageMap
    }
}

external open class NetConnection : Player {
    constructor()
    constructor(Outer: UObject)
    open var Children: Array<ChildConnection>
    open var Driver: NetDriver
    open var PackageMapClass: UnrealEngineClass
    open var PackageMap: PackageMap
    open var OpenChannels: Array<Channel>
    open var SentTemporaries: Array<Actor>
    open var ViewTarget: Actor
    open var OwningActor: Actor
    open var MaxPacket: Number
    open var InternalAck: Boolean
    open var PlayerId: UniqueNetIdRepl
    open var LastReceiveTime: Any
    open var ChannelsToTick: Array<Channel>

    companion object {
        fun Load(ResourceName: String): NetConnection
        fun Find(Outer: UObject, ResourceName: String): NetConnection
        fun GetDefaultObject(): NetConnection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NetConnection
        fun C(Other: UObject): NetConnection
        fun C(Other: Any): NetConnection
    }
}

external open class CachedKeyToActionInfo {
    open var PlayerInput: PlayerInput
    open fun clone(): CachedKeyToActionInfo

    companion object {
        fun C(Other: UObject): CachedKeyToActionInfo
        fun C(Other: Any): CachedKeyToActionInfo
    }
}

external object EControllerAnalogStick {
    var CAS_LeftStick: String /* "CAS_LeftStick" */
    var CAS_RightStick: String /* "CAS_RightStick" */
    var CAS_MAX: String /* "CAS_MAX" */
}

external interface `T$332` {
    var LocationX: Number
    var LocationY: Number
    var bIsCurrentlyPressed: Boolean
}

external interface `T$333` {
    var DeltaX: Number
    var DeltaY: Number
}

external interface `T$334` {
    var StickX: Number
    var StickY: Number
}

external open class InputComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var CachedKeyToActionInfo: Array<CachedKeyToActionInfo>
    open fun WasControllerKeyJustReleased(Key: Key): Boolean
    open fun WasControllerKeyJustPressed(Key: Key): Boolean
    open fun IsControllerKeyDown(Key: Key): Boolean
    open fun GetTouchState(FingerIndex: Number, LocationX: Number = definedExternally, LocationY: Number = definedExternally, bIsCurrentlyPressed: Boolean = definedExternally): `T$332`
    open fun GetControllerVectorKeyState(Key: Key): Vector
    open fun GetControllerMouseDelta(DeltaX: Number = definedExternally, DeltaY: Number = definedExternally): `T$333`
    open fun GetControllerKeyTimeDown(Key: Key): Number
    open fun GetControllerAnalogStickState(WhichStick: String /* "CAS_LeftStick" | "CAS_RightStick" | "CAS_MAX" */, StickX: Number = definedExternally, StickY: Number = definedExternally): `T$334`
    open fun GetControllerAnalogKeyState(Key: Key): Number

    companion object {
        fun Load(ResourceName: String): InputComponent
        fun Find(Outer: UObject, ResourceName: String): InputComponent
        fun GetDefaultObject(): InputComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InputComponent
        fun C(Other: UObject): InputComponent
        fun C(Other: Any): InputComponent
    }
}

external open class TouchInputControl {
    open var Image1: Texture2D
    open var Image2: Texture2D
    open var Center: Vector2D
    open var VisualSize: Vector2D
    open var ThumbSize: Vector2D
    open var InteractionSize: Vector2D
    open var InputScale: Vector2D
    open var MainInputKey: Key
    open var AltInputKey: Key
    open fun clone(): TouchInputControl

    companion object {
        fun C(Other: UObject): TouchInputControl
        fun C(Other: Any): TouchInputControl
    }
}

external open class TouchInterface : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Controls: Array<TouchInputControl>
    open var ActiveOpacity: Number
    open var InactiveOpacity: Number
    open var TimeUntilDeactive: Number
    open var TimeUntilReset: Number
    open var ActivationDelay: Number
    open var bPreventRecenter: Boolean
    open var StartupDelay: Number

    companion object {
        fun Load(ResourceName: String): TouchInterface
        fun Find(Outer: UObject, ResourceName: String): TouchInterface
        fun GetDefaultObject(): TouchInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TouchInterface
        fun C(Other: UObject): TouchInterface
        fun C(Other: Any): TouchInterface
    }
}

external object EPlaneConstraintAxisSetting {
    var Custom: String /* "Custom" */
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var UseGlobalPhysicsSetting: String /* "UseGlobalPhysicsSetting" */
    var EPlaneConstraintAxisSetting_MAX: String /* "EPlaneConstraintAxisSetting_MAX" */
}

external open class MovementComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var UpdatedComponent: SceneComponent
    open var UpdatedPrimitive: PrimitiveComponent
    open var Velocity: Vector
    open var PlaneConstraintNormal: Vector
    open var PlaneConstraintOrigin: Vector
    open var bUpdateOnlyIfRendered: Boolean
    open var bAutoUpdateTickRegistration: Boolean
    open var bTickBeforeOwner: Boolean
    open var bAutoRegisterUpdatedComponent: Boolean
    open var bConstrainToPlane: Boolean
    open var bSnapToPlaneAtStart: Boolean
    open var bAutoRegisterPhysicsVolumeUpdates: Boolean
    open var bComponentShouldUpdatePhysicsVolume: Boolean
    open var PlaneConstraintAxisSetting: String /* "Custom" | "X" | "Y" | "Z" | "UseGlobalPhysicsSetting" | "EPlaneConstraintAxisSetting_MAX" */
    open fun StopMovementImmediately()
    open fun SnapUpdatedComponentToPlane()
    open fun SetUpdatedComponent(NewUpdatedComponent: SceneComponent)
    open fun SetPlaneConstraintOrigin(PlaneOrigin: Vector)
    open fun SetPlaneConstraintNormal(PlaneNormal: Vector)
    open fun SetPlaneConstraintFromVectors(Forward: Vector, Up: Vector)
    open fun SetPlaneConstraintEnabled(bEnabled: Boolean)
    open fun SetPlaneConstraintAxisSetting(NewAxisSetting: String /* "Custom" | "X" | "Y" | "Z" | "UseGlobalPhysicsSetting" | "EPlaneConstraintAxisSetting_MAX" */)
    open fun PhysicsVolumeChanged(NewVolume: PhysicsVolume)
    open fun K2_MoveUpdatedComponent(Delta: Vector, NewRotation: Rotator, OutHit: HitResult = definedExternally, bSweep: Boolean = definedExternally, bTeleport: Boolean = definedExternally): `T$152`
    open fun K2_GetModifiedMaxSpeed(): Number
    open fun K2_GetMaxSpeedModifier(): Number
    open fun IsExceedingMaxSpeed(MaxSpeed: Number): Boolean
    open fun GetPlaneConstraintOrigin(): Vector
    open fun GetPlaneConstraintNormal(): Vector
    open fun GetPlaneConstraintAxisSetting(): String /* "Custom" | "X" | "Y" | "Z" | "UseGlobalPhysicsSetting" | "EPlaneConstraintAxisSetting_MAX" */
    open fun GetPhysicsVolume(): PhysicsVolume
    open fun GetMaxSpeed(): Number
    open fun GetGravityZ(): Number
    open fun ConstrainNormalToPlane(Normal: Vector): Vector
    open fun ConstrainLocationToPlane(Location: Vector): Vector
    open fun ConstrainDirectionToPlane(Direction: Vector): Vector

    companion object {
        fun Load(ResourceName: String): MovementComponent
        fun Find(Outer: UObject, ResourceName: String): MovementComponent
        fun GetDefaultObject(): MovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovementComponent
        fun C(Other: UObject): MovementComponent
        fun C(Other: Any): MovementComponent
    }
}

external open class MovementProperties {
    open var bCanCrouch: Boolean
    open var bCanJump: Boolean
    open var bCanWalk: Boolean
    open var bCanSwim: Boolean
    open var bCanFly: Boolean
    open fun clone(): MovementProperties

    companion object {
        fun C(Other: UObject): MovementProperties
        fun C(Other: Any): MovementProperties
    }
}

external open class NavAgentProperties : MovementProperties {
    open var AgentRadius: Number
    open var AgentHeight: Number
    open var AgentStepHeight: Number
    open var NavWalkingSearchHeightScale: Number
    open var PreferredNavData: SoftClassPath
    override fun clone(): NavAgentProperties

    companion object {
        fun C(Other: UObject): NavAgentProperties
        fun C(Other: Any): NavAgentProperties
    }
}

external open class NavMovementComponent : MovementComponent {
    constructor()
    constructor(Outer: UObject)
    open var NavAgentProps: NavAgentProperties
    open var FixedPathBrakingDistance: Number
    open var bUpdateNavAgentWithOwnersCollision: Boolean
    open var bUseAccelerationForPaths: Boolean
    open var bUseFixedBrakingDistanceForPaths: Boolean
    open var MovementState: MovementProperties
    open var PathFollowingComp: UObject
    open fun StopMovementKeepPathing()
    open fun StopActiveMovement()
    open fun IsSwimming(): Boolean
    open fun IsMovingOnGround(): Boolean
    open fun IsFlying(): Boolean
    open fun IsFalling(): Boolean
    open fun IsCrouching(): Boolean

    companion object {
        fun Load(ResourceName: String): NavMovementComponent
        fun Find(Outer: UObject, ResourceName: String): NavMovementComponent
        fun GetDefaultObject(): NavMovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavMovementComponent
        fun C(Other: UObject): NavMovementComponent
        fun C(Other: Any): NavMovementComponent
    }
}

external open class PawnMovementComponent : NavMovementComponent {
    constructor()
    constructor(Outer: UObject)
    open var PawnOwner: Pawn
    open fun K2_GetInputVector(): Vector
    open fun IsMoveInputIgnored(): Boolean
    open fun GetPendingInputVector(): Vector
    open fun GetPawnOwner(): Pawn
    open fun GetLastInputVector(): Vector
    open fun ConsumeInputVector(): Vector
    open fun AddInputVector(WorldVector: Vector, bForce: Boolean)

    companion object {
        fun Load(ResourceName: String): PawnMovementComponent
        fun Find(Outer: UObject, ResourceName: String): PawnMovementComponent
        fun GetDefaultObject(): PawnMovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PawnMovementComponent
        fun C(Other: UObject): PawnMovementComponent
        fun C(Other: Any): PawnMovementComponent
    }
}

external open class NavAreaBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavAreaBase
        fun Find(Outer: UObject, ResourceName: String): NavAreaBase
        fun GetDefaultObject(): NavAreaBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavAreaBase
        fun C(Other: UObject): NavAreaBase
        fun C(Other: Any): NavAreaBase
    }
}

external open class ShapeComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var ShapeBodySetup: BodySetup
    open var ShapeColor: Color
    open var bDrawOnlyIfSelected: Boolean
    open var bShouldCollideWhenPlacing: Boolean
    open var bDynamicObstacle: Boolean
    open var AreaClass: UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): ShapeComponent
        fun Find(Outer: UObject, ResourceName: String): ShapeComponent
        fun GetDefaultObject(): ShapeComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ShapeComponent
        fun C(Other: UObject): ShapeComponent
        fun C(Other: Any): ShapeComponent
    }
}

external open class SphereComponent : ShapeComponent {
    constructor()
    constructor(Outer: UObject)
    open var SphereRadius: Number
    open fun SetSphereRadius(InSphereRadius: Number, bUpdateOverlaps: Boolean)
    open fun GetUnscaledSphereRadius(): Number
    open fun GetShapeScale(): Number
    open fun GetScaledSphereRadius(): Number

    companion object {
        fun Load(ResourceName: String): SphereComponent
        fun Find(Outer: UObject, ResourceName: String): SphereComponent
        fun GetDefaultObject(): SphereComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SphereComponent
        fun C(Other: UObject): SphereComponent
        fun C(Other: Any): SphereComponent
    }
}

external open class StaticMeshComponentLODInfo {
    open fun clone(): StaticMeshComponentLODInfo

    companion object {
        fun C(Other: UObject): StaticMeshComponentLODInfo
        fun C(Other: Any): StaticMeshComponentLODInfo
    }
}

external open class StreamingTextureBuildInfo {
    open var PackedRelativeBox: Any
    open var TextureLevelIndex: Number
    open var TexelFactor: Number
    open fun clone(): StreamingTextureBuildInfo

    companion object {
        fun C(Other: UObject): StreamingTextureBuildInfo
        fun C(Other: Any): StreamingTextureBuildInfo
    }
}

external open class LightmassPrimitiveSettings {
    open var bUseTwoSidedLighting: Boolean
    open var bShadowIndirectOnly: Boolean
    open var bUseEmissiveForStaticLighting: Boolean
    open var bUseVertexNormalForHemisphereGather: Boolean
    open var EmissiveLightFalloffExponent: Number
    open var EmissiveLightExplicitInfluenceRadius: Number
    open var EmissiveBoost: Number
    open var DiffuseBoost: Number
    open var FullyOccludedSamplesFraction: Number
    open fun clone(): LightmassPrimitiveSettings

    companion object {
        fun C(Other: UObject): LightmassPrimitiveSettings
        fun C(Other: Any): LightmassPrimitiveSettings
    }
}

external open class ProcMeshVertex {
    open var Position: Vector
    open var Normal: Vector
    open var Tangent: ProcMeshTangent
    open var Color: Color
    open var UV0: Vector2D
    open var UV1: Vector2D
    open var UV2: Vector2D
    open var UV3: Vector2D
    open fun clone(): ProcMeshVertex

    companion object {
        fun C(Other: UObject): ProcMeshVertex
        fun C(Other: Any): ProcMeshVertex
    }
}

external open class ProcMeshSection {
    open var ProcVertexBuffer: Array<ProcMeshVertex>
    open var ProcIndexBuffer: Array<Any>
    open var SectionLocalBox: Box
    open var bEnableCollision: Boolean
    open var bSectionVisible: Boolean
    open fun clone(): ProcMeshSection

    companion object {
        fun C(Other: UObject): ProcMeshSection
        fun C(Other: Any): ProcMeshSection
    }
}

external object EProcMeshSliceCapOption {
    var NoCap: String /* "NoCap" */
    var CreateNewSectionForCap: String /* "CreateNewSectionForCap" */
    var UseLastSectionForCap: String /* "UseLastSectionForCap" */
    var EProcMeshSliceCapOption_MAX: String /* "EProcMeshSliceCapOption_MAX" */
}

external interface `T$335` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external interface `T$336` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external open class ProceduralMeshComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var bUseComplexAsSimpleCollision: Boolean
    open var bUseAsyncCooking: Boolean
    open var ProcMeshBodySetup: BodySetup
    open var ProcMeshSections: Array<ProcMeshSection>
    open var CollisionConvexElems: Array<KConvexElem>
    open var LocalBounds: BoxSphereBounds
    open var AsyncBodySetupQueue: Array<BodySetup>
    open fun UpdateMeshSection_LinearColor(SectionIndex: Number, Vertices: Array<Vector>, Normals: Array<Vector>, UV0: Array<Vector2D>, UV1: Array<Vector2D>, UV2: Array<Vector2D>, UV3: Array<Vector2D>, VertexColors: Array<LinearColor>, Tangents: Array<ProcMeshTangent>)
    open fun UpdateMeshSection(SectionIndex: Number, Vertices: Array<Vector>, Normals: Array<Vector>, UV0: Array<Vector2D>, VertexColors: Array<Color>, Tangents: Array<ProcMeshTangent>)
    open fun SetMeshSectionVisible(SectionIndex: Number, bNewVisibility: Boolean)
    open fun IsMeshSectionVisible(SectionIndex: Number): Boolean
    open fun GetNumSections(): Number
    open fun CreateMeshSection_LinearColor(SectionIndex: Number, Vertices: Array<Vector>, Triangles: Array<Number>, Normals: Array<Vector>, UV0: Array<Vector2D>, UV1: Array<Vector2D>, UV2: Array<Vector2D>, UV3: Array<Vector2D>, VertexColors: Array<LinearColor>, Tangents: Array<ProcMeshTangent>, bCreateCollision: Boolean)
    open fun CreateMeshSection(SectionIndex: Number, Vertices: Array<Vector>, Triangles: Array<Number>, Normals: Array<Vector>, UV0: Array<Vector2D>, VertexColors: Array<Color>, Tangents: Array<ProcMeshTangent>, bCreateCollision: Boolean)
    open fun ClearMeshSection(SectionIndex: Number)
    open fun ClearCollisionConvexMeshes()
    open fun ClearAllMeshSections()
    open fun AddCollisionConvexMesh(ConvexVerts: Array<Vector>)
    open fun GetSectionFromProceduralMesh(SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$335`
    open fun SliceProceduralMesh(PlanePosition: Vector, PlaneNormal: Vector, bCreateOtherHalf: Boolean, OutOtherHalfProcMesh: ProceduralMeshComponent = definedExternally, CapOption: String /* "NoCap" | "CreateNewSectionForCap" | "UseLastSectionForCap" | "EProcMeshSliceCapOption_MAX" */ = definedExternally, CapMaterial: MaterialInterface = definedExternally): `T$71`

    companion object {
        fun Load(ResourceName: String): ProceduralMeshComponent
        fun Find(Outer: UObject, ResourceName: String): ProceduralMeshComponent
        fun GetDefaultObject(): ProceduralMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ProceduralMeshComponent
        fun C(Other: UObject): ProceduralMeshComponent
        fun C(Other: Any): ProceduralMeshComponent
        fun GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent, SectionIndex: Number, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$336`
        fun SliceProceduralMesh(InProcMesh: ProceduralMeshComponent, PlanePosition: Vector, PlaneNormal: Vector, bCreateOtherHalf: Boolean, OutOtherHalfProcMesh: ProceduralMeshComponent = definedExternally, CapOption: String /* "NoCap" | "CreateNewSectionForCap" | "UseLastSectionForCap" | "EProcMeshSliceCapOption_MAX" */ = definedExternally, CapMaterial: MaterialInterface = definedExternally): `T$71`
    }
}

external object EVertexPaintAxis {
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var EVertexPaintAxis_MAX: String /* "EVertexPaintAxis_MAX" */
}

external interface `T$337` {
    var Min: Vector
    var Max: Vector
}

external open class StaticMeshComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var ForcedLodModel: Number
    open var PreviousLODLevel: Number
    open var MinLOD: Number
    open var SubDivisionStepSize: Number
    open var StaticMesh: StaticMesh
    open var WireframeColorOverride: Color
    open var SelectedEditorSection: Number
    open var SelectedEditorMaterial: Number
    open var SectionIndexPreview: Number
    open var MaterialIndexPreview: Number
    open var StaticMeshImportVersion: Number
    open var bOverrideWireframeColor: Boolean
    open var bOverrideMinLOD: Boolean
    open var bOverrideNavigationExport: Boolean
    open var bForceNavigationObstacle: Boolean
    open var bDisallowMeshPaintPerInstance: Boolean
    open var bIgnoreInstanceForTextureStreaming: Boolean
    open var bOverrideLightMapRes: Boolean
    open var bCastDistanceFieldIndirectShadow: Boolean
    open var bOverrideDistanceFieldSelfShadowBias: Boolean
    open var bUseSubDivisions: Boolean
    open var bUseDefaultCollision: Boolean
    open var bCustomOverrideVertexColorPerLOD: Boolean
    open var bDisplayVertexColors: Boolean
    open var bReverseCulling: Boolean
    open var OverriddenLightMapRes: Number
    open var DistanceFieldIndirectShadowMinVisibility: Number
    open var DistanceFieldSelfShadowBias: Number
    open var StreamingDistanceMultiplier: Number
    open var IrrelevantLights: Array<Guid>
    open var LodData: Array<StaticMeshComponentLODInfo>
    open var StreamingTextureData: Array<StreamingTextureBuildInfo>
    open var StaticMeshDerivedDataKey: String
    open var MaterialStreamingRelativeBoxes: Array<Any>
    open var LightmassSettings: LightmassPrimitiveSettings
    open fun SetStaticMesh(NewMesh: StaticMesh): Boolean
    open fun SetReverseCulling(ReverseCulling: Boolean)
    open fun SetForcedLodModel(NewForcedLodModel: Number)
    open fun SetDistanceFieldSelfShadowBias(NewValue: Number)
    open fun OnRep_StaticMesh(OldStaticMesh: StaticMesh)
    open fun GetLocalBounds(Min: Vector = definedExternally, Max: Vector = definedExternally): `T$337`
    open fun CopyProceduralMeshFromStaticMeshComponent(LODIndex: Number, ProcMeshComponent: ProceduralMeshComponent, bCreateCollision: Boolean)
    open fun PaintVerticesLerpAlongAxis(StartColor: LinearColor, EndColor: LinearColor, Axis: String /* "X" | "Y" | "Z" | "EVertexPaintAxis_MAX" */, bConvertToSRGB: Boolean)
    open fun PaintVerticesSingleColor(FillColor: LinearColor, bConvertToSRGB: Boolean)
    open fun RemovePaintedVertices()

    companion object {
        fun Load(ResourceName: String): StaticMeshComponent
        fun Find(Outer: UObject, ResourceName: String): StaticMeshComponent
        fun GetDefaultObject(): StaticMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshComponent
        fun C(Other: UObject): StaticMeshComponent
        fun C(Other: Any): StaticMeshComponent
        fun CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent, LODIndex: Number, ProcMeshComponent: ProceduralMeshComponent, bCreateCollision: Boolean)
        fun PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent, StartColor: LinearColor, EndColor: LinearColor, Axis: String /* "X" | "Y" | "Z" | "EVertexPaintAxis_MAX" */, bConvertToSRGB: Boolean)
        fun PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent, FillColor: LinearColor, bConvertToSRGB: Boolean)
        fun RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent)
    }
}

external open class DefaultPawn(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Pawn {
    open var BaseTurnRate: Number
    open var BaseLookUpRate: Number
    open var MovementComponent: PawnMovementComponent
    open var CollisionComponent: SphereComponent
    open var MeshComponent: StaticMeshComponent
    open var bAddDefaultMovementBindings: Boolean
    open fun TurnAtRate(Rate: Number)
    open fun MoveUp_World(Val: Number)
    open fun MoveRight(Val: Number)
    open fun MoveForward(Val: Number)
    open fun LookUpAtRate(Rate: Number)

    companion object {
        fun GetDefaultObject(): DefaultPawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DefaultPawn
        fun C(Other: UObject): DefaultPawn
        fun C(Other: Any): DefaultPawn
    }
}

external open class SpectatorPawn(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : DefaultPawn {
    companion object {
        fun GetDefaultObject(): SpectatorPawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SpectatorPawn
        fun C(Other: UObject): SpectatorPawn
        fun C(Other: Any): SpectatorPawn
    }
}

external object EControllerHand {
    var Left: String /* "Left" */
    var Right: String /* "Right" */
    var AnyHand: String /* "AnyHand" */
    var Pad: String /* "Pad" */
    var ExternalCamera: String /* "ExternalCamera" */
    var Gun: String /* "Gun" */
    var Special_1: String /* "Special_1" */
    var Special_2: String /* "Special_2" */
    var Special_3: String /* "Special_3" */
    var Special_4: String /* "Special_4" */
    var Special_5: String /* "Special_5" */
    var Special_6: String /* "Special_6" */
    var Special_7: String /* "Special_7" */
    var Special_8: String /* "Special_8" */
    var Special_9: String /* "Special_9" */
    var Special_10: String /* "Special_10" */
    var Special_11: String /* "Special_11" */
    var ControllerHand_Count: String /* "ControllerHand_Count" */
    var EControllerHand_MAX: String /* "EControllerHand_MAX" */
}

external object EViewTargetBlendFunction {
    var VTBlend_Linear: String /* "VTBlend_Linear" */
    var VTBlend_Cubic: String /* "VTBlend_Cubic" */
    var VTBlend_EaseIn: String /* "VTBlend_EaseIn" */
    var VTBlend_EaseOut: String /* "VTBlend_EaseOut" */
    var VTBlend_EaseInOut: String /* "VTBlend_EaseInOut" */
    var VTBlend_MAX: String /* "VTBlend_MAX" */
}

external open class MovieSceneSignedObject : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Signature: Guid

    companion object {
        fun Load(ResourceName: String): MovieSceneSignedObject
        fun Find(Outer: UObject, ResourceName: String): MovieSceneSignedObject
        fun GetDefaultObject(): MovieSceneSignedObject
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneSignedObject
        fun C(Other: UObject): MovieSceneSignedObject
        fun C(Other: Any): MovieSceneSignedObject
    }
}

external open class MovieSceneFrameRange {
    open fun clone(): MovieSceneFrameRange

    companion object {
        fun C(Other: UObject): MovieSceneFrameRange
        fun C(Other: Any): MovieSceneFrameRange
    }
}

external open class MovieSceneEvaluationGroupLUTIndex {
    open var LUTOffset: Number
    open var NumInitPtrs: Number
    open var NumEvalPtrs: Number
    open fun clone(): MovieSceneEvaluationGroupLUTIndex

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationGroupLUTIndex
        fun C(Other: Any): MovieSceneEvaluationGroupLUTIndex
    }
}

external open class MovieSceneSequenceID {
    open var Value: Any
    open fun clone(): MovieSceneSequenceID

    companion object {
        fun C(Other: UObject): MovieSceneSequenceID
        fun C(Other: Any): MovieSceneSequenceID
    }
}

external open class MovieSceneTrackIdentifier {
    open var Value: Any
    open fun clone(): MovieSceneTrackIdentifier

    companion object {
        fun C(Other: UObject): MovieSceneTrackIdentifier
        fun C(Other: Any): MovieSceneTrackIdentifier
    }
}

external open class MovieSceneEvaluationFieldTrackPtr {
    open var SequenceID: MovieSceneSequenceID
    open var TrackIdentifier: MovieSceneTrackIdentifier
    open fun clone(): MovieSceneEvaluationFieldTrackPtr

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldTrackPtr
        fun C(Other: Any): MovieSceneEvaluationFieldTrackPtr
    }
}

external open class MovieSceneSegmentIdentifier {
    open var IdentifierIndex: Number
    open fun clone(): MovieSceneSegmentIdentifier

    companion object {
        fun C(Other: UObject): MovieSceneSegmentIdentifier
        fun C(Other: Any): MovieSceneSegmentIdentifier
    }
}

external open class MovieSceneEvaluationFieldSegmentPtr : MovieSceneEvaluationFieldTrackPtr {
    open var SegmentID: MovieSceneSegmentIdentifier
    override fun clone(): MovieSceneEvaluationFieldSegmentPtr

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationFieldSegmentPtr
        fun C(Other: Any): MovieSceneEvaluationFieldSegmentPtr
    }
}

external open class MovieSceneEvaluationGroup {
    open var LUTIndices: Array<MovieSceneEvaluationGroupLUTIndex>
    open var SegmentPtrLUT: Array<MovieSceneEvaluationFieldSegmentPtr>
    open fun clone(): MovieSceneEvaluationGroup

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationGroup
        fun C(Other: Any): MovieSceneEvaluationGroup
    }
}

external open class MovieSceneEvaluationKey {
    open var SequenceID: MovieSceneSequenceID
    open var TrackIdentifier: MovieSceneTrackIdentifier
    open var SectionIndex: Any
    open fun clone(): MovieSceneEvaluationKey

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationKey
        fun C(Other: Any): MovieSceneEvaluationKey
    }
}

external open class MovieSceneOrderedEvaluationKey {
    open var Key: MovieSceneEvaluationKey
    open var EvaluationIndex: Any
    open fun clone(): MovieSceneOrderedEvaluationKey

    companion object {
        fun C(Other: UObject): MovieSceneOrderedEvaluationKey
        fun C(Other: Any): MovieSceneOrderedEvaluationKey
    }
}

external open class MovieSceneEvaluationMetaData {
    open var ActiveSequences: Array<MovieSceneSequenceID>
    open var ActiveEntities: Array<MovieSceneOrderedEvaluationKey>
    open var SubTemplateSerialNumbers: Any
    open fun clone(): MovieSceneEvaluationMetaData

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationMetaData
        fun C(Other: Any): MovieSceneEvaluationMetaData
    }
}

external open class MovieSceneEvaluationField {
    open var Signature: Guid
    open var Ranges: Array<MovieSceneFrameRange>
    open var Groups: Array<MovieSceneEvaluationGroup>
    open var MetaData: Array<MovieSceneEvaluationMetaData>
    open fun clone(): MovieSceneEvaluationField

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationField
        fun C(Other: Any): MovieSceneEvaluationField
    }
}

external open class MovieSceneSequenceHierarchy {
    open var SubSequences: Any
    open var Hierarchy: Any
    open fun clone(): MovieSceneSequenceHierarchy

    companion object {
        fun C(Other: UObject): MovieSceneSequenceHierarchy
        fun C(Other: Any): MovieSceneSequenceHierarchy
    }
}

external open class MovieSceneEvaluationTemplateSerialNumber {
    open var Value: Any
    open fun clone(): MovieSceneEvaluationTemplateSerialNumber

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationTemplateSerialNumber
        fun C(Other: Any): MovieSceneEvaluationTemplateSerialNumber
    }
}

external open class MovieSceneTemplateGenerationLedger {
    open var LastTrackIdentifier: MovieSceneTrackIdentifier
    open var TrackSignatureToTrackIdentifier: Any
    open var SubSectionRanges: Any
    open fun clone(): MovieSceneTemplateGenerationLedger

    companion object {
        fun C(Other: UObject): MovieSceneTemplateGenerationLedger
        fun C(Other: Any): MovieSceneTemplateGenerationLedger
    }
}

external open class MovieSceneTrackFieldData {
    open fun clone(): MovieSceneTrackFieldData

    companion object {
        fun C(Other: UObject): MovieSceneTrackFieldData
        fun C(Other: Any): MovieSceneTrackFieldData
    }
}

external open class MovieSceneSubSectionFieldData {
    open fun clone(): MovieSceneSubSectionFieldData

    companion object {
        fun C(Other: UObject): MovieSceneSubSectionFieldData
        fun C(Other: Any): MovieSceneSubSectionFieldData
    }
}

external open class MovieSceneEvaluationTemplate {
    open var Tracks: Any
    open var EvaluationField: MovieSceneEvaluationField
    open var Hierarchy: MovieSceneSequenceHierarchy
    open var SequenceSignature: Guid
    open var TemplateSerialNumber: MovieSceneEvaluationTemplateSerialNumber
    open var TemplateLedger: MovieSceneTemplateGenerationLedger
    open var TrackFieldData: MovieSceneTrackFieldData
    open var SubSectionFieldData: MovieSceneSubSectionFieldData
    open fun clone(): MovieSceneEvaluationTemplate

    companion object {
        fun C(Other: UObject): MovieSceneEvaluationTemplate
        fun C(Other: Any): MovieSceneEvaluationTemplate
    }
}

external object EMovieSceneCompletionMode {
    var KeepState: String /* "KeepState" */
    var RestoreState: String /* "RestoreState" */
    var ProjectDefault: String /* "ProjectDefault" */
    var EMovieSceneCompletionMode_MAX: String /* "EMovieSceneCompletionMode_MAX" */
}

external open class MovieSceneSequence : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var PrecompiledEvaluationTemplate: MovieSceneEvaluationTemplate
    open var DefaultCompletionMode: String /* "KeepState" | "RestoreState" | "ProjectDefault" | "EMovieSceneCompletionMode_MAX" */
    open var bParentContextsAreSignificant: Boolean

    companion object {
        fun Load(ResourceName: String): MovieSceneSequence
        fun Find(Outer: UObject, ResourceName: String): MovieSceneSequence
        fun GetDefaultObject(): MovieSceneSequence
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneSequence
        fun C(Other: UObject): MovieSceneSequence
        fun C(Other: Any): MovieSceneSequence
    }
}

external open class Timecode {
    open var Hours: Number
    open var Minutes: Number
    open var Seconds: Number
    open var Frames: Number
    open var bDropFrameFormat: Boolean
    open fun clone(): Timecode
    open fun Conv_TimecodeToString(bForceSignDisplay: Boolean): String

    companion object {
        fun C(Other: UObject): Timecode
        fun C(Other: Any): Timecode
        fun Conv_TimecodeToString(InTimecode: Timecode, bForceSignDisplay: Boolean): String
        fun GetTimecode(): Timecode
    }
}

external interface `T$338` {
    var Numerator: Number
    var Denominator: Number
}

external open class FrameRate {
    open var Numerator: Number
    open var Denominator: Number
    open fun clone(): FrameRate
    open fun BreakFrameRate(Numerator: Number = definedExternally, Denominator: Number = definedExternally): `T$338`
    open fun Conv_FrameRateToSeconds(): Number
    open fun IsValid_Framerate(): Boolean
    open fun IsValid_MultipleOf(OtherFramerate: FrameRate): Boolean

    companion object {
        fun C(Other: UObject): FrameRate
        fun C(Other: Any): FrameRate
        fun BreakFrameRate(InFrameRate: FrameRate, Numerator: Number = definedExternally, Denominator: Number = definedExternally): `T$338`
        fun Conv_FrameRateToSeconds(InFrameRate: FrameRate): Number
        fun IsValid_Framerate(InFrameRate: FrameRate): Boolean
        fun IsValid_MultipleOf(InFrameRate: FrameRate, OtherFramerate: FrameRate): Boolean
        fun MakeFrameRate(Numerator: Number, Denominator: Number): FrameRate
    }
}

external open class FrameTime {
    open var FrameNumber: FrameNumber
    open var SubFrame: Number
    open fun clone(): FrameTime
    open fun SnapFrameTimeToRate(SourceRate: FrameRate, SnapToRate: FrameRate): FrameTime
    open fun TransformTime(SourceRate: FrameRate, DestinationRate: FrameRate): FrameTime

    companion object {
        fun C(Other: UObject): FrameTime
        fun C(Other: Any): FrameTime
        fun SnapFrameTimeToRate(SourceTime: FrameTime, SourceRate: FrameRate, SnapToRate: FrameRate): FrameTime
        fun TransformTime(SourceTime: FrameTime, SourceRate: FrameRate, DestinationRate: FrameRate): FrameTime
        fun Multiply_SecondsFrameRate(TimeInSeconds: Number, FrameRate: FrameRate): FrameTime
    }
}

external interface `T$339` {
    var Frame: FrameNumber
    var FrameRate: FrameRate
    var SubFrame: Number
}

external open class QualifiedFrameTime {
    open var Time: FrameTime
    open var Rate: FrameRate
    open fun clone(): QualifiedFrameTime
    open fun BreakQualifiedFrameTime(Frame: FrameNumber = definedExternally, FrameRate: FrameRate = definedExternally, SubFrame: Number = definedExternally): `T$339`
    open fun Conv_QualifiedFrameTimeToSeconds(): Number

    companion object {
        fun C(Other: UObject): QualifiedFrameTime
        fun C(Other: Any): QualifiedFrameTime
        fun BreakQualifiedFrameTime(InFrameTime: QualifiedFrameTime, Frame: FrameNumber = definedExternally, FrameRate: FrameRate = definedExternally, SubFrame: Number = definedExternally): `T$339`
        fun Conv_QualifiedFrameTimeToSeconds(InFrameTime: QualifiedFrameTime): Number
    }
}

external open class FrameNumber {
    open var Value: Number
    open fun clone(): FrameNumber
    open fun MakeQualifiedFrameTime(FrameRate: FrameRate, SubFrame: Number): QualifiedFrameTime
    open fun Add_FrameNumberFrameNumber(B: FrameNumber): FrameNumber
    open fun Add_FrameNumberInteger(B: Number): FrameNumber
    open fun Conv_FrameNumberToInteger(): Number
    open fun Divide_FrameNumberInteger(B: Number): FrameNumber
    open fun Multiply_FrameNumberInteger(B: Number): FrameNumber
    open fun Subtract_FrameNumberFrameNumber(B: FrameNumber): FrameNumber
    open fun Subtract_FrameNumberInteger(B: Number): FrameNumber

    companion object {
        fun C(Other: UObject): FrameNumber
        fun C(Other: Any): FrameNumber
        fun MakeQualifiedFrameTime(Frame: FrameNumber, FrameRate: FrameRate, SubFrame: Number): QualifiedFrameTime
        fun Add_FrameNumberFrameNumber(A: FrameNumber, B: FrameNumber): FrameNumber
        fun Add_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
        fun Conv_FrameNumberToInteger(InFrameNumber: FrameNumber): Number
        fun Divide_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
        fun Multiply_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
        fun Subtract_FrameNumberFrameNumber(A: FrameNumber, B: FrameNumber): FrameNumber
        fun Subtract_FrameNumberInteger(A: FrameNumber, B: Number): FrameNumber
    }
}

external open class MovieSceneTimecodeSource {
    open var Timecode: Timecode
    open var DeltaFrame: FrameNumber
    open fun clone(): MovieSceneTimecodeSource

    companion object {
        fun C(Other: UObject): MovieSceneTimecodeSource
        fun C(Other: Any): MovieSceneTimecodeSource
    }
}

external object ESpawnOwnership {
    var InnerSequence: String /* "InnerSequence" */
    var MasterSequence: String /* "MasterSequence" */
    var External: String /* "External" */
    var ESpawnOwnership_MAX: String /* "ESpawnOwnership_MAX" */
}

external open class MovieSceneSpawnable {
    open var SpawnTransform: Transform
    open var Tags: Array<String>
    open var bContinuouslyRespawn: Boolean
    open var Guid: Guid
    open var Name: String
    open var ObjectTemplate: UObject
    open var ChildPossessables: Array<Guid>
    open var Ownership: String /* "InnerSequence" | "MasterSequence" | "External" | "ESpawnOwnership_MAX" */
    open var GeneratedClass: UnrealEngineClass
    open var LevelName: String
    open fun clone(): MovieSceneSpawnable

    companion object {
        fun C(Other: UObject): MovieSceneSpawnable
        fun C(Other: Any): MovieSceneSpawnable
    }
}

external open class MovieScenePossessable {
    open var Tags: Array<String>
    open var Guid: Guid
    open var Name: String
    open var PossessedObjectClass: UnrealEngineClass
    open var ParentGuid: Guid
    open fun clone(): MovieScenePossessable

    companion object {
        fun C(Other: UObject): MovieScenePossessable
        fun C(Other: Any): MovieScenePossessable
    }
}

external open class MovieSceneTrackEvalOptions {
    open var bCanEvaluateNearestSection: Boolean
    open var bEvalNearestSection: Boolean
    open var bEvaluateInPreroll: Boolean
    open var bEvaluateInPostroll: Boolean
    open var bEvaluateNearestSection: Boolean
    open fun clone(): MovieSceneTrackEvalOptions

    companion object {
        fun C(Other: UObject): MovieSceneTrackEvalOptions
        fun C(Other: Any): MovieSceneTrackEvalOptions
    }
}

external open class MovieSceneTrackDisplayOptions {
    open var bShowVerticalFrames: Boolean
    open fun clone(): MovieSceneTrackDisplayOptions

    companion object {
        fun C(Other: UObject): MovieSceneTrackDisplayOptions
        fun C(Other: Any): MovieSceneTrackDisplayOptions
    }
}

external open class MovieSceneTrack : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var EvalOptions: MovieSceneTrackEvalOptions
    open var DisplayOptions: MovieSceneTrackDisplayOptions
    open var TrackTint: Color
    open var SortingOrder: Number
    open var bSupportsDefaultSections: Boolean

    companion object {
        fun Load(ResourceName: String): MovieSceneTrack
        fun Find(Outer: UObject, ResourceName: String): MovieSceneTrack
        fun GetDefaultObject(): MovieSceneTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneTrack
        fun C(Other: UObject): MovieSceneTrack
        fun C(Other: Any): MovieSceneTrack
    }
}

external open class MovieSceneBinding {
    open var ObjectGuid: Guid
    open var BindingName: String
    open var Tracks: Array<MovieSceneTrack>
    open var SortingOrder: Number
    open fun clone(): MovieSceneBinding

    companion object {
        fun C(Other: UObject): MovieSceneBinding
        fun C(Other: Any): MovieSceneBinding
    }
}

external object EMovieSceneEvaluationType {
    var FrameLocked: String /* "FrameLocked" */
    var WithSubFrames: String /* "WithSubFrames" */
    var EMovieSceneEvaluationType_MAX: String /* "EMovieSceneEvaluationType_MAX" */
}

external object EUpdateClockSource {
    var Tick: String /* "Tick" */
    var Platform: String /* "Platform" */
    var Audio: String /* "Audio" */
    var Timecode: String /* "Timecode" */
    var EUpdateClockSource_MAX: String /* "EUpdateClockSource_MAX" */
}

external open class MovieSceneMarkedFrame {
    open var FrameNumber: FrameNumber
    open var Label: String
    open var Color: LinearColor
    open fun clone(): MovieSceneMarkedFrame

    companion object {
        fun C(Other: UObject): MovieSceneMarkedFrame
        fun C(Other: Any): MovieSceneMarkedFrame
    }
}

external open class FloatRangeBound {
    open var Type: String /* "Exclusive" | "Inclusive" | "Open" | "ERangeBoundTypes_MAX" */
    open var Value: Number
    open fun clone(): FloatRangeBound

    companion object {
        fun C(Other: UObject): FloatRangeBound
        fun C(Other: Any): FloatRangeBound
    }
}

external open class FloatRange {
    open var LowerBound: FloatRangeBound
    open var UpperBound: FloatRangeBound
    open fun clone(): FloatRange

    companion object {
        fun C(Other: UObject): FloatRange
        fun C(Other: Any): FloatRange
    }
}

external open class MovieSceneEditorData {
    open var ExpansionStates: Any
    open var ViewStart: Any
    open var ViewEnd: Any
    open var WorkStart: Any
    open var WorkEnd: Any
    open var MarkedFrames: Any
    open var WorkingRange: FloatRange
    open var ViewRange: FloatRange
    open fun clone(): MovieSceneEditorData

    companion object {
        fun C(Other: UObject): MovieSceneEditorData
        fun C(Other: Any): MovieSceneEditorData
    }
}

external open class MovieSceneFolder : UObject {
    constructor()
    constructor(Outer: UObject)
    open var FolderName: String
    open var ChildFolders: Array<MovieSceneFolder>
    open var ChildMasterTracks: Array<MovieSceneTrack>
    open var ChildObjectBindingStrings: Array<String>
    open var FolderColor: Color
    open var SortingOrder: Number

    companion object {
        fun Load(ResourceName: String): MovieSceneFolder
        fun Find(Outer: UObject, ResourceName: String): MovieSceneFolder
        fun GetDefaultObject(): MovieSceneFolder
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneFolder
        fun C(Other: UObject): MovieSceneFolder
        fun C(Other: Any): MovieSceneFolder
    }
}

external open class MovieScene : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var TimecodeSource: MovieSceneTimecodeSource
    open var Spawnables: Array<MovieSceneSpawnable>
    open var Possessables: Array<MovieScenePossessable>
    open var ObjectBindings: Array<MovieSceneBinding>
    open var MasterTracks: Array<MovieSceneTrack>
    open var CameraCutTrack: MovieSceneTrack
    open var SelectionRange: MovieSceneFrameRange
    open var PlaybackRange: MovieSceneFrameRange
    open var TickResolution: FrameRate
    open var DisplayRate: FrameRate
    open var EvaluationType: String /* "FrameLocked" | "WithSubFrames" | "EMovieSceneEvaluationType_MAX" */
    open var ClockSource: String /* "Tick" | "Platform" | "Audio" | "Timecode" | "EUpdateClockSource_MAX" */
    open var MarkedFrames: Array<MovieSceneMarkedFrame>
    open var bReadOnly: Boolean
    open var bPlaybackRangeLocked: Boolean
    open var ObjectsToDisplayNames: Any
    open var ObjectsToLabels: Any
    open var EditorData: MovieSceneEditorData
    open var RootFolders: Array<MovieSceneFolder>
    open var InTime: Number
    open var OutTime: Number
    open var StartTime: Number
    open var EndTime: Number
    open var bForceFixedFrameIntervalPlayback: Boolean
    open var FixedFrameInterval: Number

    companion object {
        fun Load(ResourceName: String): MovieScene
        fun Find(Outer: UObject, ResourceName: String): MovieScene
        fun GetDefaultObject(): MovieScene
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieScene
        fun C(Other: UObject): MovieScene
        fun C(Other: Any): MovieScene
    }
}

external open class WidgetAnimationBinding {
    open var WidgetName: String
    open var SlotWidgetName: String
    open var AnimationGuid: Guid
    open var bIsRootWidget: Boolean
    open fun clone(): WidgetAnimationBinding

    companion object {
        fun C(Other: UObject): WidgetAnimationBinding
        fun C(Other: Any): WidgetAnimationBinding
    }
}

external open class WidgetAnimation : MovieSceneSequence {
    constructor()
    constructor(Outer: UObject)
    open var OnAnimationStarted: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnAnimationFinished: UnrealEngineMulticastDelegate<() -> Unit>
    open var MovieScene: MovieScene
    open var AnimationBindings: Array<WidgetAnimationBinding>
    open var bLegacyFinishOnStop: Boolean
    open var DisplayLabel: String
    open fun UnbindAllFromAnimationStarted(Widget: UserWidget)
    open fun UnbindAllFromAnimationFinished(Widget: UserWidget)
    open fun GetStartTime(): Number
    open fun GetEndTime(): Number

    companion object {
        fun Load(ResourceName: String): WidgetAnimation
        fun Find(Outer: UObject, ResourceName: String): WidgetAnimation
        fun GetDefaultObject(): WidgetAnimation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetAnimation
        fun C(Other: UObject): WidgetAnimation
        fun C(Other: Any): WidgetAnimation
    }
}

external open class UMGSequencePlayer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Animation: WidgetAnimation
    open fun SetUserTag(InUserTag: String)
    open fun GetUserTag(): String

    companion object {
        fun Load(ResourceName: String): UMGSequencePlayer
        fun Find(Outer: UObject, ResourceName: String): UMGSequencePlayer
        fun GetDefaultObject(): UMGSequencePlayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UMGSequencePlayer
        fun C(Other: UObject): UMGSequencePlayer
        fun C(Other: Any): UMGSequencePlayer
    }
}

external open class NamedSlotBinding {
    open var Name: String
    open var Content: Widget
    open fun clone(): NamedSlotBinding

    companion object {
        fun C(Other: UObject): NamedSlotBinding
        fun C(Other: Any): NamedSlotBinding
    }
}

external open class WidgetTree : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RootWidget: Widget
    open var AllWidgets: Array<Widget>

    companion object {
        fun Load(ResourceName: String): WidgetTree
        fun Find(Outer: UObject, ResourceName: String): WidgetTree
        fun GetDefaultObject(): WidgetTree
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetTree
        fun C(Other: UObject): WidgetTree
        fun C(Other: Any): WidgetTree
    }
}

external object EDesignPreviewSizeMode {
    var FillScreen: String /* "FillScreen" */
    var Custom: String /* "Custom" */
    var CustomOnScreen: String /* "CustomOnScreen" */
    var Desired: String /* "Desired" */
    var DesiredOnScreen: String /* "DesiredOnScreen" */
    var EDesignPreviewSizeMode_MAX: String /* "EDesignPreviewSizeMode_MAX" */
}

external object EWidgetTickFrequency {
    var Never: String /* "Never" */
    var Auto: String /* "Auto" */
    var EWidgetTickFrequency_MAX: String /* "EWidgetTickFrequency_MAX" */
}

external object EWidgetAnimationEvent {
    var Started: String /* "Started" */
    var Finished: String /* "Finished" */
    var EWidgetAnimationEvent_MAX: String /* "EWidgetAnimationEvent_MAX" */
}

external open class AnimationEventBinding {
    open var Animation: WidgetAnimation
    open var delegate: UnrealEngineDelegate<() -> Unit>
    open var AnimationEvent: String /* "Started" | "Finished" | "EWidgetAnimationEvent_MAX" */
    open var UserTag: String
    open fun clone(): AnimationEventBinding

    companion object {
        fun C(Other: UObject): AnimationEventBinding
        fun C(Other: Any): AnimationEventBinding
    }
}

external open class Geometry {
    open fun clone(): Geometry
    open fun CenterOf(): Vector2D
    open fun FindClosestPointOnGeom(TestPoint: Vector2D): Vector2D
    open fun AbsoluteToLocal(AbsoluteCoordinate: Vector2D): Vector2D
    open fun GetAbsoluteSize(): Vector2D
    open fun GetLocalSize(): Vector2D
    open fun IsUnderLocation(AbsoluteCoordinate: Vector2D): Boolean
    open fun LocalToAbsolute(LocalCoordinate: Vector2D): Vector2D
    open fun TransformScalarAbsoluteToLocal(AbsoluteScalar: Number): Number
    open fun TransformScalarLocalToAbsolute(LocalScalar: Number): Number
    open fun TransformVectorAbsoluteToLocal(AbsoluteVector: Vector2D): Vector2D
    open fun TransformVectorLocalToAbsolute(LocalVector: Vector2D): Vector2D

    companion object {
        fun C(Other: UObject): Geometry
        fun C(Other: Any): Geometry
        fun CenterOf(Geom: Geometry): Vector2D
        fun FindClosestPointOnGeom(Geom: Geometry, TestPoint: Vector2D): Vector2D
        fun AbsoluteToLocal(Geometry: Geometry, AbsoluteCoordinate: Vector2D): Vector2D
        fun GetAbsoluteSize(Geometry: Geometry): Vector2D
        fun GetLocalSize(Geometry: Geometry): Vector2D
        fun IsUnderLocation(Geometry: Geometry, AbsoluteCoordinate: Vector2D): Boolean
        fun LocalToAbsolute(Geometry: Geometry, LocalCoordinate: Vector2D): Vector2D
        fun TransformScalarAbsoluteToLocal(Geometry: Geometry, AbsoluteScalar: Number): Number
        fun TransformScalarLocalToAbsolute(Geometry: Geometry, LocalScalar: Number): Number
        fun TransformVectorAbsoluteToLocal(Geometry: Geometry, AbsoluteVector: Vector2D): Vector2D
        fun TransformVectorLocalToAbsolute(Geometry: Geometry, LocalVector: Vector2D): Vector2D
    }
}

external object EInputEvent {
    var IE_Pressed: String /* "IE_Pressed" */
    var IE_Released: String /* "IE_Released" */
    var IE_Repeat: String /* "IE_Repeat" */
    var IE_DoubleClick: String /* "IE_DoubleClick" */
    var IE_Axis: String /* "IE_Axis" */
    var IE_MAX: String /* "IE_MAX" */
}

external open class Anchors {
    open var Minimum: Vector2D
    open var Maximum: Vector2D
    open fun clone(): Anchors

    companion object {
        fun C(Other: UObject): Anchors
        fun C(Other: Any): Anchors
    }
}

external object EAudioOutputTarget {
    var Speaker: String /* "Speaker" */
    var Controller: String /* "Controller" */
    var ControllerFallbackToSpeaker: String /* "ControllerFallbackToSpeaker" */
    var EAudioOutputTarget_MAX: String /* "EAudioOutputTarget_MAX" */
}

external open class SoundClassProperties {
    open var Volume: Number
    open var Pitch: Number
    open var StereoBleed: Number
    open var LFEBleed: Number
    open var VoiceCenterChannelVolume: Number
    open var RadioFilterVolume: Number
    open var RadioFilterVolumeThreshold: Number
    open var bApplyEffects: Boolean
    open var bAlwaysPlay: Boolean
    open var bIsUISound: Boolean
    open var bIsMusic: Boolean
    open var bReverb: Boolean
    open var Default2DReverbSendAmount: Number
    open var bCenterChannelOnly: Boolean
    open var bApplyAmbientVolumes: Boolean
    open var OutputTarget: String /* "Speaker" | "Controller" | "ControllerFallbackToSpeaker" | "EAudioOutputTarget_MAX" */
    open fun clone(): SoundClassProperties

    companion object {
        fun C(Other: UObject): SoundClassProperties
        fun C(Other: Any): SoundClassProperties
    }
}

external open class AudioEQEffect {
    open var FrequencyCenter0: Number
    open var Gain0: Number
    open var Bandwidth0: Number
    open var FrequencyCenter1: Number
    open var Gain1: Number
    open var Bandwidth1: Number
    open var FrequencyCenter2: Number
    open var Gain2: Number
    open var Bandwidth2: Number
    open var FrequencyCenter3: Number
    open var Gain3: Number
    open var Bandwidth3: Number
    open fun clone(): AudioEQEffect

    companion object {
        fun C(Other: UObject): AudioEQEffect
        fun C(Other: Any): AudioEQEffect
    }
}

external open class SoundClassAdjuster {
    open var SoundClassObject: SoundClass
    open var VolumeAdjuster: Number
    open var PitchAdjuster: Number
    open var bApplyToChildren: Boolean
    open var VoiceCenterChannelVolumeAdjuster: Number
    open fun clone(): SoundClassAdjuster

    companion object {
        fun C(Other: UObject): SoundClassAdjuster
        fun C(Other: Any): SoundClassAdjuster
    }
}

external open class SoundMix : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bApplyEQ: Boolean
    open var EQPriority: Number
    open var EQSettings: AudioEQEffect
    open var SoundClassEffects: Array<SoundClassAdjuster>
    open var InitialDelay: Number
    open var FadeInTime: Number
    open var Duration: Number
    open var FadeOutTime: Number
    open var bChanged: Boolean

    companion object {
        fun Load(ResourceName: String): SoundMix
        fun Find(Outer: UObject, ResourceName: String): SoundMix
        fun GetDefaultObject(): SoundMix
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundMix
        fun C(Other: UObject): SoundMix
        fun C(Other: Any): SoundMix
    }
}

external open class PassiveSoundMixModifier {
    open var SoundMix: SoundMix
    open var MinVolumeThreshold: Number
    open var MaxVolumeThreshold: Number
    open fun clone(): PassiveSoundMixModifier

    companion object {
        fun C(Other: UObject): PassiveSoundMixModifier
        fun C(Other: Any): PassiveSoundMixModifier
    }
}

external open class SoundClass : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Properties: SoundClassProperties
    open var ChildClasses: Array<SoundClass>
    open var PassiveSoundMixModifiers: Array<PassiveSoundMixModifier>
    open var ParentClass: SoundClass

    companion object {
        fun Load(ResourceName: String): SoundClass
        fun Find(Outer: UObject, ResourceName: String): SoundClass
        fun GetDefaultObject(): SoundClass
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundClass
        fun C(Other: UObject): SoundClass
        fun C(Other: Any): SoundClass
    }
}

external object EVirtualizationMode {
    var Disabled: String /* "Disabled" */
    var PlayWhenSilent: String /* "PlayWhenSilent" */
    var Restart: String /* "Restart" */
    var EVirtualizationMode_MAX: String /* "EVirtualizationMode_MAX" */
}

external object EMaxConcurrentResolutionRule {
    var PreventNew: String /* "PreventNew" */
    var StopOldest: String /* "StopOldest" */
    var StopFarthestThenPreventNew: String /* "StopFarthestThenPreventNew" */
    var StopFarthestThenOldest: String /* "StopFarthestThenOldest" */
    var StopLowestPriority: String /* "StopLowestPriority" */
    var StopQuietest: String /* "StopQuietest" */
    var StopLowestPriorityThenPreventNew: String /* "StopLowestPriorityThenPreventNew" */
    var EMaxConcurrentResolutionRule_MAX: String /* "EMaxConcurrentResolutionRule_MAX" */
}

external open class SoundConcurrencySettings {
    open var MaxCount: Number
    open var bLimitToOwner: Boolean
    open var ResolutionRule: String /* "PreventNew" | "StopOldest" | "StopFarthestThenPreventNew" | "StopFarthestThenOldest" | "StopLowestPriority" | "StopQuietest" | "StopLowestPriorityThenPreventNew" | "EMaxConcurrentResolutionRule_MAX" */
    open var VolumeScale: Number
    open var VolumeScaleAttackTime: Number
    open var bVolumeScaleCanRelease: Boolean
    open var VolumeScaleReleaseTime: Number
    open var VoiceStealReleaseTime: Number
    open fun clone(): SoundConcurrencySettings

    companion object {
        fun C(Other: UObject): SoundConcurrencySettings
        fun C(Other: Any): SoundConcurrencySettings
    }
}

external open class SoundConcurrency : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Concurrency: SoundConcurrencySettings

    companion object {
        fun Load(ResourceName: String): SoundConcurrency
        fun Find(Outer: UObject, ResourceName: String): SoundConcurrency
        fun GetDefaultObject(): SoundConcurrency
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundConcurrency
        fun C(Other: UObject): SoundConcurrency
        fun C(Other: Any): SoundConcurrency
    }
}

external object ESoundSpatializationAlgorithm {
    var SPATIALIZATION_Default: String /* "SPATIALIZATION_Default" */
    var SPATIALIZATION_HRTF: String /* "SPATIALIZATION_HRTF" */
    var SPATIALIZATION_MAX: String /* "SPATIALIZATION_MAX" */
}

external object EAirAbsorptionMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var EAirAbsorptionMethod_MAX: String /* "EAirAbsorptionMethod_MAX" */
}

external object EReverbSendMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var EReverbSendMethod_MAX: String /* "EReverbSendMethod_MAX" */
}

external object ESoundDistanceCalc {
    var SOUNDDISTANCE_Normal: String /* "SOUNDDISTANCE_Normal" */
    var SOUNDDISTANCE_InfiniteXYPlane: String /* "SOUNDDISTANCE_InfiniteXYPlane" */
    var SOUNDDISTANCE_InfiniteXZPlane: String /* "SOUNDDISTANCE_InfiniteXZPlane" */
    var SOUNDDISTANCE_InfiniteYZPlane: String /* "SOUNDDISTANCE_InfiniteYZPlane" */
    var SOUNDDISTANCE_MAX: String /* "SOUNDDISTANCE_MAX" */
}

external open class SpatializationPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SpatializationPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): SpatializationPluginSourceSettingsBase
        fun GetDefaultObject(): SpatializationPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SpatializationPluginSourceSettingsBase
        fun C(Other: UObject): SpatializationPluginSourceSettingsBase
        fun C(Other: Any): SpatializationPluginSourceSettingsBase
    }
}

external open class OcclusionPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): OcclusionPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): OcclusionPluginSourceSettingsBase
        fun GetDefaultObject(): OcclusionPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): OcclusionPluginSourceSettingsBase
        fun C(Other: UObject): OcclusionPluginSourceSettingsBase
        fun C(Other: Any): OcclusionPluginSourceSettingsBase
    }
}

external open class ReverbPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ReverbPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): ReverbPluginSourceSettingsBase
        fun GetDefaultObject(): ReverbPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReverbPluginSourceSettingsBase
        fun C(Other: UObject): ReverbPluginSourceSettingsBase
        fun C(Other: Any): ReverbPluginSourceSettingsBase
    }
}

external open class SoundAttenuationPluginSettings {
    open var SpatializationPluginSettingsArray: Array<SpatializationPluginSourceSettingsBase>
    open var OcclusionPluginSettingsArray: Array<OcclusionPluginSourceSettingsBase>
    open var ReverbPluginSettingsArray: Array<ReverbPluginSourceSettingsBase>
    open fun clone(): SoundAttenuationPluginSettings

    companion object {
        fun C(Other: UObject): SoundAttenuationPluginSettings
        fun C(Other: Any): SoundAttenuationPluginSettings
    }
}

external open class SoundAttenuationSettings : BaseAttenuationSettings {
    open var bAttenuate: Boolean
    open var bSpatialize: Boolean
    open var bAttenuateWithLPF: Boolean
    open var bEnableListenerFocus: Boolean
    open var bEnableFocusInterpolation: Boolean
    open var bEnableOcclusion: Boolean
    open var bUseComplexCollisionForOcclusion: Boolean
    open var bEnableReverbSend: Boolean
    open var bApplyNormalizationToStereoSounds: Boolean
    open var bEnableLogFrequencyScaling: Boolean
    open var SpatializationAlgorithm: String /* "SPATIALIZATION_Default" | "SPATIALIZATION_HRTF" | "SPATIALIZATION_MAX" */
    open var AbsorptionMethod: String /* "Linear" | "CustomCurve" | "EAirAbsorptionMethod_MAX" */
    open var OcclusionTraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var ReverbSendMethod: String /* "Linear" | "CustomCurve" | "Manual" | "EReverbSendMethod_MAX" */
    open var DistanceType: String /* "SOUNDDISTANCE_Normal" | "SOUNDDISTANCE_InfiniteXYPlane" | "SOUNDDISTANCE_InfiniteXZPlane" | "SOUNDDISTANCE_InfiniteYZPlane" | "SOUNDDISTANCE_MAX" */
    open var OmniRadius: Number
    open var StereoSpread: Number
    open var SpatializationPluginSettings: SpatializationPluginSourceSettingsBase
    open var RadiusMin: Number
    open var RadiusMax: Number
    open var LPFRadiusMin: Number
    open var LPFRadiusMax: Number
    open var CustomLowpassAirAbsorptionCurve: RuntimeFloatCurve
    open var CustomHighpassAirAbsorptionCurve: RuntimeFloatCurve
    open var LPFFrequencyAtMin: Number
    open var LPFFrequencyAtMax: Number
    open var HPFFrequencyAtMin: Number
    open var HPFFrequencyAtMax: Number
    open var FocusAzimuth: Number
    open var NonFocusAzimuth: Number
    open var FocusDistanceScale: Number
    open var NonFocusDistanceScale: Number
    open var FocusPriorityScale: Number
    open var NonFocusPriorityScale: Number
    open var FocusVolumeAttenuation: Number
    open var NonFocusVolumeAttenuation: Number
    open var FocusAttackInterpSpeed: Number
    open var FocusReleaseInterpSpeed: Number
    open var OcclusionLowPassFilterFrequency: Number
    open var OcclusionVolumeAttenuation: Number
    open var OcclusionInterpolationTime: Number
    open var OcclusionPluginSettings: OcclusionPluginSourceSettingsBase
    open var ReverbPluginSettings: ReverbPluginSourceSettingsBase
    open var ReverbWetLevelMin: Number
    open var ReverbWetLevelMax: Number
    open var ReverbDistanceMin: Number
    open var ReverbDistanceMax: Number
    open var ManualReverbSendLevel: Number
    open var CustomReverbSendCurve: RuntimeFloatCurve
    open var PluginSettings: SoundAttenuationPluginSettings
    override fun clone(): SoundAttenuationSettings

    companion object {
        fun C(Other: UObject): SoundAttenuationSettings
        fun C(Other: Any): SoundAttenuationSettings
    }
}

external open class SoundAttenuation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Attenuation: SoundAttenuationSettings

    companion object {
        fun Load(ResourceName: String): SoundAttenuation
        fun Find(Outer: UObject, ResourceName: String): SoundAttenuation
        fun GetDefaultObject(): SoundAttenuation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundAttenuation
        fun C(Other: UObject): SoundAttenuation
        fun C(Other: Any): SoundAttenuation
    }
}

external open class SoundModulationPluginSourceSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundModulationPluginSourceSettingsBase
        fun Find(Outer: UObject, ResourceName: String): SoundModulationPluginSourceSettingsBase
        fun GetDefaultObject(): SoundModulationPluginSourceSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundModulationPluginSourceSettingsBase
        fun C(Other: UObject): SoundModulationPluginSourceSettingsBase
        fun C(Other: Any): SoundModulationPluginSourceSettingsBase
    }
}

external open class SoundModulation {
    open var Settings: Array<SoundModulationPluginSourceSettingsBase>
    open fun clone(): SoundModulation

    companion object {
        fun C(Other: UObject): SoundModulation
        fun C(Other: Any): SoundModulation
    }
}

external object ESubmixChannelFormat {
    var Device: String /* "Device" */
    var Stereo: String /* "Stereo" */
    var Quad: String /* "Quad" */
    var FiveDotOne: String /* "FiveDotOne" */
    var SevenDotOne: String /* "SevenDotOne" */
    var Ambisonics: String /* "Ambisonics" */
    var Count: String /* "Count" */
    var ESubmixChannelFormat_MAX: String /* "ESubmixChannelFormat_MAX" */
}

external open class SoundEffectPreset : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundEffectPreset
        fun Find(Outer: UObject, ResourceName: String): SoundEffectPreset
        fun GetDefaultObject(): SoundEffectPreset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectPreset
        fun C(Other: UObject): SoundEffectPreset
        fun C(Other: Any): SoundEffectPreset
    }
}

external open class SoundEffectSubmixPreset : SoundEffectPreset {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundEffectSubmixPreset
        fun Find(Outer: UObject, ResourceName: String): SoundEffectSubmixPreset
        fun GetDefaultObject(): SoundEffectSubmixPreset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectSubmixPreset
        fun C(Other: UObject): SoundEffectSubmixPreset
        fun C(Other: Any): SoundEffectSubmixPreset
    }
}

external open class AmbisonicsSubmixSettingsBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AmbisonicsSubmixSettingsBase
        fun Find(Outer: UObject, ResourceName: String): AmbisonicsSubmixSettingsBase
        fun GetDefaultObject(): AmbisonicsSubmixSettingsBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AmbisonicsSubmixSettingsBase
        fun C(Other: UObject): AmbisonicsSubmixSettingsBase
        fun C(Other: Any): AmbisonicsSubmixSettingsBase
    }
}

external object ESoundwaveSampleRateSettings {
    var Max: String /* "Max" */
    var High: String /* "High" */
    var Medium: String /* "Medium" */
    var Low: String /* "Low" */
    var Min: String /* "Min" */
    var MatchDevice: String /* "MatchDevice" */
    var ESoundwaveSampleRateSettings_MAX: String /* "ESoundwaveSampleRateSettings_MAX" */
}

external object ESoundGroup {
    var SOUNDGROUP_Default: String /* "SOUNDGROUP_Default" */
    var SOUNDGROUP_Effects: String /* "SOUNDGROUP_Effects" */
    var SOUNDGROUP_UI: String /* "SOUNDGROUP_UI" */
    var SOUNDGROUP_Music: String /* "SOUNDGROUP_Music" */
    var SOUNDGROUP_Voice: String /* "SOUNDGROUP_Voice" */
    var SOUNDGROUP_GameSoundGroup1: String /* "SOUNDGROUP_GameSoundGroup1" */
    var SOUNDGROUP_GameSoundGroup2: String /* "SOUNDGROUP_GameSoundGroup2" */
    var SOUNDGROUP_GameSoundGroup3: String /* "SOUNDGROUP_GameSoundGroup3" */
    var SOUNDGROUP_GameSoundGroup4: String /* "SOUNDGROUP_GameSoundGroup4" */
    var SOUNDGROUP_GameSoundGroup5: String /* "SOUNDGROUP_GameSoundGroup5" */
    var SOUNDGROUP_GameSoundGroup6: String /* "SOUNDGROUP_GameSoundGroup6" */
    var SOUNDGROUP_GameSoundGroup7: String /* "SOUNDGROUP_GameSoundGroup7" */
    var SOUNDGROUP_GameSoundGroup8: String /* "SOUNDGROUP_GameSoundGroup8" */
    var SOUNDGROUP_GameSoundGroup9: String /* "SOUNDGROUP_GameSoundGroup9" */
    var SOUNDGROUP_GameSoundGroup10: String /* "SOUNDGROUP_GameSoundGroup10" */
    var SOUNDGROUP_GameSoundGroup11: String /* "SOUNDGROUP_GameSoundGroup11" */
    var SOUNDGROUP_GameSoundGroup12: String /* "SOUNDGROUP_GameSoundGroup12" */
    var SOUNDGROUP_GameSoundGroup13: String /* "SOUNDGROUP_GameSoundGroup13" */
    var SOUNDGROUP_GameSoundGroup14: String /* "SOUNDGROUP_GameSoundGroup14" */
    var SOUNDGROUP_GameSoundGroup15: String /* "SOUNDGROUP_GameSoundGroup15" */
    var SOUNDGROUP_GameSoundGroup16: String /* "SOUNDGROUP_GameSoundGroup16" */
    var SOUNDGROUP_GameSoundGroup17: String /* "SOUNDGROUP_GameSoundGroup17" */
    var SOUNDGROUP_GameSoundGroup18: String /* "SOUNDGROUP_GameSoundGroup18" */
    var SOUNDGROUP_GameSoundGroup19: String /* "SOUNDGROUP_GameSoundGroup19" */
    var SOUNDGROUP_GameSoundGroup20: String /* "SOUNDGROUP_GameSoundGroup20" */
    var SOUNDGROUP_MAX: String /* "SOUNDGROUP_MAX" */
}

external object ESoundWaveFFTSize {
    var VerySmall_64: String /* "VerySmall_64" */
    var Small_256: String /* "Small_256" */
    var Medium_512: String /* "Medium_512" */
    var Large_1024: String /* "Large_1024" */
    var VeryLarge_2048: String /* "VeryLarge_2048" */
    var ESoundWaveFFTSize_MAX: String /* "ESoundWaveFFTSize_MAX" */
}

external open class SoundWaveSpectralDataEntry {
    open var Magnitude: Number
    open var NormalizedMagnitude: Number
    open fun clone(): SoundWaveSpectralDataEntry

    companion object {
        fun C(Other: UObject): SoundWaveSpectralDataEntry
        fun C(Other: Any): SoundWaveSpectralDataEntry
    }
}

external open class SoundWaveSpectralTimeData {
    open var Data: Array<SoundWaveSpectralDataEntry>
    open var TimeSec: Number
    open fun clone(): SoundWaveSpectralTimeData

    companion object {
        fun C(Other: UObject): SoundWaveSpectralTimeData
        fun C(Other: Any): SoundWaveSpectralTimeData
    }
}

external open class SoundWaveEnvelopeTimeData {
    open var Amplitude: Number
    open var TimeSec: Number
    open fun clone(): SoundWaveEnvelopeTimeData

    companion object {
        fun C(Other: UObject): SoundWaveEnvelopeTimeData
        fun C(Other: Any): SoundWaveEnvelopeTimeData
    }
}

external open class SubtitleCue {
    open var text: String
    open var Time: Number
    open fun clone(): SubtitleCue

    companion object {
        fun C(Other: UObject): SubtitleCue
        fun C(Other: Any): SubtitleCue
    }
}

external object EEvaluateCurveTableResult {
    var RowFound: String /* "RowFound" */
    var RowNotFound: String /* "RowNotFound" */
    var EEvaluateCurveTableResult_MAX: String /* "EEvaluateCurveTableResult_MAX" */
}

external interface `T$340` {
    var OutResult: String /* "RowFound" | "RowNotFound" | "EEvaluateCurveTableResult_MAX" */
    var OutXY: Number
}

external open class CurveTable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AssetImportData: AssetImportData
    open var ImportPath: String
    open fun AddRichCurve(Key: String, InCurve: RichCurve)
    open fun NotifyUpdateCurveTable()
    open fun EvaluateCurveTableRow(RowName: String, InXY: Number, OutResult: String /* "RowFound" | "RowNotFound" | "EEvaluateCurveTableResult_MAX" */ = definedExternally, OutXY: Number = definedExternally, ContextString: String = definedExternally): `T$340`

    companion object {
        fun Load(ResourceName: String): CurveTable
        fun Find(Outer: UObject, ResourceName: String): CurveTable
        fun GetDefaultObject(): CurveTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveTable
        fun C(Other: UObject): CurveTable
        fun C(Other: Any): CurveTable
        fun AddRichCurve(InCurveTable: CurveTable, Key: String, InCurve: RichCurve)
        fun NotifyUpdateCurveTable(InCurveTable: CurveTable)
        fun EvaluateCurveTableRow(CurveTable: CurveTable, RowName: String, InXY: Number, OutResult: String /* "RowFound" | "RowNotFound" | "EEvaluateCurveTableResult_MAX" */ = definedExternally, OutXY: Number = definedExternally, ContextString: String = definedExternally): `T$340`
    }
}

external open class SoundWave : SoundBase {
    constructor()
    constructor(Outer: UObject)
    open var CompressionQuality: Number
    open var StreamingPriority: Number
    open var SampleRateQuality: String /* "Max" | "High" | "Medium" | "Low" | "Min" | "MatchDevice" | "ESoundwaveSampleRateSettings_MAX" */
    open var SoundGroup: String /* "SOUNDGROUP_Default" | "SOUNDGROUP_Effects" | "SOUNDGROUP_UI" | "SOUNDGROUP_Music" | "SOUNDGROUP_Voice" | "SOUNDGROUP_GameSoundGroup1" | "SOUNDGROUP_GameSoundGroup2" | "SOUNDGROUP_GameSoundGroup3" | "SOUNDGROUP_GameSoundGroup4" | "SOUNDGROUP_GameSoundGroup5" | "SOUNDGROUP_GameSoundGroup6" | "SOUNDGROUP_GameSoundGroup7" | "SOUNDGROUP_GameSoundGroup8" | "SOUNDGROUP_GameSoundGroup9" | "SOUNDGROUP_GameSoundGroup10" | "SOUNDGROUP_GameSoundGroup11" | "SOUNDGROUP_GameSoundGroup12" | "SOUNDGROUP_GameSoundGroup13" | "SOUNDGROUP_GameSoundGroup14" | "SOUNDGROUP_GameSoundGroup15" | "SOUNDGROUP_GameSoundGroup16" | "SOUNDGROUP_GameSoundGroup17" | "SOUNDGROUP_GameSoundGroup18" | "SOUNDGROUP_GameSoundGroup19" | "SOUNDGROUP_GameSoundGroup20" | "SOUNDGROUP_MAX" */
    open var bLooping: Boolean
    open var bStreaming: Boolean
    open var bSeekableStreaming: Boolean
    open var bMature: Boolean
    open var bManualWordWrap: Boolean
    open var bSingleLine: Boolean
    open var bVirtualizeWhenSilent: Boolean
    open var bIsAmbisonics: Boolean
    open var OverrideSoundToUseForAnalysis: SoundWave
    open var TreatFileAsLoopingForAnalysis: Boolean
    open var bEnableBakedFFTAnalysis: Boolean
    open var bEnableAmplitudeEnvelopeAnalysis: Boolean
    open var FFTSize: String /* "VerySmall_64" | "Small_256" | "Medium_512" | "Large_1024" | "VeryLarge_2048" | "ESoundWaveFFTSize_MAX" */
    open var FFTAnalysisFrameSize: Number
    open var FFTAnalysisAttackTime: Number
    open var FFTAnalysisReleaseTime: Number
    open var EnvelopeFollowerFrameSize: Number
    open var EnvelopeFollowerAttackTime: Number
    open var EnvelopeFollowerReleaseTime: Number
    open var FrequenciesToAnalyze: Array<Number>
    open var CookedSpectralTimeData: Array<SoundWaveSpectralTimeData>
    open var CookedEnvelopeTimeData: Array<SoundWaveEnvelopeTimeData>
    open var SpokenText: String
    open var SubtitlePriority: Number
    open var Volume: Number
    open var Pitch: Number
    open var NumChannels: Number
    open var ChannelOffsets: Array<Number>
    open var ChannelSizes: Array<Number>
    open var SampleRate: Number
    open var Subtitles: Array<SubtitleCue>
    open var Comment: String
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var AssetImportData: AssetImportData
    open var Curves: CurveTable
    open var InternalCurves: CurveTable

    companion object {
        fun Load(ResourceName: String): SoundWave
        fun Find(Outer: UObject, ResourceName: String): SoundWave
        fun GetDefaultObject(): SoundWave
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundWave
        fun C(Other: UObject): SoundWave
        fun C(Other: Any): SoundWave
    }
}

external object EAudioRecordingExportType {
    var SoundWave: String /* "SoundWave" */
    var WavFile: String /* "WavFile" */
    var EAudioRecordingExportType_MAX: String /* "EAudioRecordingExportType_MAX" */
}

external open class SoundSubmix : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChildSubmixes: Array<SoundSubmix>
    open var ParentSubmix: SoundSubmix
    open var ChannelFormat: String /* "Device" | "Stereo" | "Quad" | "FiveDotOne" | "SevenDotOne" | "Ambisonics" | "Count" | "ESubmixChannelFormat_MAX" */
    open var bMuteWhenBackgrounded: Boolean
    open var SubmixEffectChain: Array<SoundEffectSubmixPreset>
    open var AmbisonicsPluginSettings: AmbisonicsSubmixSettingsBase
    open var EnvelopeFollowerAttackTime: Number
    open var EnvelopeFollowerReleaseTime: Number
    open var OutputVolume: Number
    open var OnSubmixRecordedFileDone: UnrealEngineMulticastDelegate<(ResultingSoundWave: SoundWave) -> Unit>
    open fun StopRecordingOutput(WorldContextObject: UObject, ExportType: String /* "SoundWave" | "WavFile" | "EAudioRecordingExportType_MAX" */, Name: String, Path: String, ExistingSoundWaveToOverwrite: SoundWave)
    open fun StopEnvelopeFollowing(WorldContextObject: UObject)
    open fun StartRecordingOutput(WorldContextObject: UObject, ExpectedDuration: Number)
    open fun StartEnvelopeFollowing(WorldContextObject: UObject)
    open fun SetSubmixOutputVolume(WorldContextObject: UObject, InOutputVolume: Number)

    companion object {
        fun Load(ResourceName: String): SoundSubmix
        fun Find(Outer: UObject, ResourceName: String): SoundSubmix
        fun GetDefaultObject(): SoundSubmix
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundSubmix
        fun C(Other: UObject): SoundSubmix
        fun C(Other: Any): SoundSubmix
    }
}

external object ESendLevelControlMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var ESendLevelControlMethod_MAX: String /* "ESendLevelControlMethod_MAX" */
}

external open class SoundSubmixSendInfo {
    open var SendLevelControlMethod: String /* "Linear" | "CustomCurve" | "Manual" | "ESendLevelControlMethod_MAX" */
    open var SoundSubmix: SoundSubmix
    open var SendLevel: Number
    open var MinSendLevel: Number
    open var MaxSendLevel: Number
    open var MinSendDistance: Number
    open var MaxSendDistance: Number
    open var CustomSendLevelCurve: RuntimeFloatCurve
    open fun clone(): SoundSubmixSendInfo

    companion object {
        fun C(Other: UObject): SoundSubmixSendInfo
        fun C(Other: Any): SoundSubmixSendInfo
    }
}

external open class SoundEffectSourcePreset : SoundEffectPreset {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoundEffectSourcePreset
        fun Find(Outer: UObject, ResourceName: String): SoundEffectSourcePreset
        fun GetDefaultObject(): SoundEffectSourcePreset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectSourcePreset
        fun C(Other: UObject): SoundEffectSourcePreset
        fun C(Other: Any): SoundEffectSourcePreset
    }
}

external open class SourceEffectChainEntry {
    open var Preset: SoundEffectSourcePreset
    open var bBypass: Boolean
    open fun clone(): SourceEffectChainEntry

    companion object {
        fun C(Other: UObject): SourceEffectChainEntry
        fun C(Other: Any): SourceEffectChainEntry
    }
}

external open class SoundEffectSourcePresetChain : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Chain: Array<SourceEffectChainEntry>
    open var bPlayEffectChainTails: Boolean

    companion object {
        fun Load(ResourceName: String): SoundEffectSourcePresetChain
        fun Find(Outer: UObject, ResourceName: String): SoundEffectSourcePresetChain
        fun GetDefaultObject(): SoundEffectSourcePresetChain
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundEffectSourcePresetChain
        fun C(Other: UObject): SoundEffectSourcePresetChain
        fun C(Other: Any): SoundEffectSourcePresetChain
    }
}

external object ESourceBusSendLevelControlMethod {
    var Linear: String /* "Linear" */
    var CustomCurve: String /* "CustomCurve" */
    var Manual: String /* "Manual" */
    var ESourceBusSendLevelControlMethod_MAX: String /* "ESourceBusSendLevelControlMethod_MAX" */
}

external object ESourceBusChannels {
    var Mono: String /* "Mono" */
    var Stereo: String /* "Stereo" */
    var ESourceBusChannels_MAX: String /* "ESourceBusChannels_MAX" */
}

external open class SoundSourceBus : SoundWave {
    constructor()
    constructor(Outer: UObject)
    open var SourceBusChannels: String /* "Mono" | "Stereo" | "ESourceBusChannels_MAX" */
    open var SourceBusDuration: Number
    open var bAutoDeactivateWhenSilent: Boolean

    companion object {
        fun Load(ResourceName: String): SoundSourceBus
        fun Find(Outer: UObject, ResourceName: String): SoundSourceBus
        fun GetDefaultObject(): SoundSourceBus
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundSourceBus
        fun C(Other: UObject): SoundSourceBus
        fun C(Other: Any): SoundSourceBus
    }
}

external open class SoundSourceBusSendInfo {
    open var SourceBusSendLevelControlMethod: String /* "Linear" | "CustomCurve" | "Manual" | "ESourceBusSendLevelControlMethod_MAX" */
    open var SoundSourceBus: SoundSourceBus
    open var SendLevel: Number
    open var MinSendLevel: Number
    open var MaxSendLevel: Number
    open var MinSendDistance: Number
    open var MaxSendDistance: Number
    open var CustomSendLevelCurve: RuntimeFloatCurve
    open fun clone(): SoundSourceBusSendInfo

    companion object {
        fun C(Other: UObject): SoundSourceBusSendInfo
        fun C(Other: Any): SoundSourceBusSendInfo
    }
}

external open class AudioComponentParam {
    open var ParamName: String
    open var FloatParam: Number
    open var BoolParam: Boolean
    open var IntParam: Number
    open var SoundWaveParam: SoundWave
    open fun clone(): AudioComponentParam

    companion object {
        fun C(Other: UObject): AudioComponentParam
        fun C(Other: Any): AudioComponentParam
    }
}

external open class SoundWaveSpectralData {
    open var FrequencyHz: Number
    open var Magnitude: Number
    open var NormalizedMagnitude: Number
    open fun clone(): SoundWaveSpectralData

    companion object {
        fun C(Other: UObject): SoundWaveSpectralData
        fun C(Other: Any): SoundWaveSpectralData
    }
}

external open class SoundWaveSpectralDataPerSound {
    open var SpectralData: Array<SoundWaveSpectralData>
    open var PlaybackTime: Number
    open var SoundWave: SoundWave
    open fun clone(): SoundWaveSpectralDataPerSound

    companion object {
        fun C(Other: UObject): SoundWaveSpectralDataPerSound
        fun C(Other: Any): SoundWaveSpectralDataPerSound
    }
}

external open class SoundWaveEnvelopeDataPerSound {
    open var Envelope: Number
    open var PlaybackTime: Number
    open var SoundWave: SoundWave
    open fun clone(): SoundWaveEnvelopeDataPerSound

    companion object {
        fun C(Other: UObject): SoundWaveEnvelopeDataPerSound
        fun C(Other: Any): SoundWaveEnvelopeDataPerSound
    }
}

external interface `T$341` {
    var OutSoundWaveSpectralData: Array<SoundWaveSpectralDataPerSound>
    var `$`: Boolean
}

external interface `T$342` {
    var OutSoundWaveSpectralData: Array<SoundWaveSpectralData>
    var `$`: Boolean
}

external interface `T$343` {
    var OutEnvelopeData: Array<SoundWaveEnvelopeDataPerSound>
    var `$`: Boolean
}

external interface `T$344` {
    var OutEnvelopeData: Number
    var `$`: Boolean
}

external open class AudioComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var Sound: SoundBase
    open var InstanceParameters: Array<AudioComponentParam>
    open var SoundClassOverride: SoundClass
    open var bAutoDestroy: Boolean
    open var bStopWhenOwnerDestroyed: Boolean
    open var bShouldRemainActiveIfDropped: Boolean
    open var bAllowSpatialization: Boolean
    open var bOverrideAttenuation: Boolean
    open var bOverrideSubtitlePriority: Boolean
    open var bIsUISound: Boolean
    open var bEnableLowPassFilter: Boolean
    open var bOverridePriority: Boolean
    open var bSuppressSubtitles: Boolean
    open var bAutoManageAttachment: Boolean
    open var AudioComponentUserID: String
    open var PitchModulationMin: Number
    open var PitchModulationMax: Number
    open var VolumeModulationMin: Number
    open var VolumeModulationMax: Number
    open var VolumeMultiplier: Number
    open var EnvelopeFollowerAttackTime: Number
    open var EnvelopeFollowerReleaseTime: Number
    open var Priority: Number
    open var SubtitlePriority: Number
    open var VolumeWeightedPriorityScale: Number
    open var HighFrequencyGainMultiplier: Number
    open var PitchMultiplier: Number
    open var LowPassFilterFrequency: Number
    open var AttenuationSettings: SoundAttenuation
    open var AttenuationOverrides: SoundAttenuationSettings
    open var ConcurrencySettings: SoundConcurrency
    open var ConcurrencySet: Any
    open var AutoAttachLocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachRotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var AutoAttachScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */
    open var OnAudioFinished: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnAudioPlaybackPercent: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: Number) -> Unit>
    open var OnAudioSingleEnvelopeValue: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, EnvelopeValue: Number) -> Unit>
    open var OnAudioMultiEnvelopeValue: UnrealEngineMulticastDelegate<(AverageEnvelopeValue: Number, MaxEnvelope: Number, NumWaveInstances: Number) -> Unit>
    open var Modulation: SoundModulation
    open var OnQueueSubtitles: UnrealEngineDelegate<(Subtitles: Array<SubtitleCue>, CueDuration: Number) -> Unit>
    open var AutoAttachParent: Any
    open var AutoAttachSocketName: String
    open fun StopDelayed(DelayTime: Number)
    open fun Stop()
    open fun SetWaveParameter(InName: String, InWave: SoundWave)
    open fun SetVolumeMultiplier(NewVolumeMultiplier: Number)
    open fun SetUISound(bInUISound: Boolean)
    open fun SetSubmixSend(Submix: SoundSubmix, SendLevel: Number)
    open fun SetSourceBusSendPreEffect(SoundSourceBus: SoundSourceBus, SourceBusSendLevel: Number)
    open fun SetSourceBusSendPostEffect(SoundSourceBus: SoundSourceBus, SourceBusSendLevel: Number)
    open fun SetSound(NewSound: SoundBase)
    open fun SetPitchMultiplier(NewPitchMultiplier: Number)
    open fun SetPaused(bPause: Boolean)
    open fun SetLowPassFilterFrequency(InLowPassFilterFrequency: Number)
    open fun SetLowPassFilterEnabled(InLowPassFilterEnabled: Boolean)
    open fun SetIntParameter(InName: String, inInt: Number)
    open fun SetFloatParameter(InName: String, InFloat: Number)
    open fun SetBoolParameter(InName: String, InBool: Boolean)
    open fun Play(StartTime: Number)
    open fun IsPlaying(): Boolean
    open fun HasCookedFFTData(): Boolean
    open fun HasCookedAmplitudeEnvelopeData(): Boolean
    open fun GetCookedFFTDataForAllPlayingSounds(OutSoundWaveSpectralData: Array<SoundWaveSpectralDataPerSound> = definedExternally): `T$341`
    open fun GetCookedFFTData(FrequenciesToGet: Array<Number>, OutSoundWaveSpectralData: Array<SoundWaveSpectralData> = definedExternally): `T$342`
    open fun GetCookedEnvelopeDataForAllPlayingSounds(OutEnvelopeData: Array<SoundWaveEnvelopeDataPerSound> = definedExternally): `T$343`
    open fun GetCookedEnvelopeData(OutEnvelopeData: Number = definedExternally): `T$344`
    open fun FadeOut(FadeOutDuration: Number, FadeVolumeLevel: Number)
    open fun FadeIn(FadeInDuration: Number, FadeVolumeLevel: Number, StartTime: Number)
    open fun BP_GetAttenuationSettingsToApply(OutAttenuationSettings: SoundAttenuationSettings = definedExternally): `T$91`
    open fun AdjustVolume(AdjustVolumeDuration: Number, AdjustVolumeLevel: Number)
    open fun AdjustAttenuation(InAttenuationSettings: SoundAttenuationSettings)

    companion object {
        fun Load(ResourceName: String): AudioComponent
        fun Find(Outer: UObject, ResourceName: String): AudioComponent
        fun GetDefaultObject(): AudioComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AudioComponent
        fun C(Other: UObject): AudioComponent
        fun C(Other: Any): AudioComponent
    }
}

external open class SoundBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SoundClassObject: SoundClass
    open var bDebug: Boolean
    open var bOverrideConcurrency: Boolean
    open var bOutputToBusOnly: Boolean
    open var bHasDelayNode: Boolean
    open var bHasConcatenatorNode: Boolean
    open var bHasVirtualizeWhenSilent: Boolean
    open var bBypassVolumeScaleForPriority: Boolean
    open var VirtualizationMode: String /* "Disabled" | "PlayWhenSilent" | "Restart" | "EVirtualizationMode_MAX" */
    open var MaxConcurrentResolutionRule: String /* "PreventNew" | "StopOldest" | "StopFarthestThenPreventNew" | "StopFarthestThenOldest" | "StopLowestPriority" | "StopQuietest" | "StopLowestPriorityThenPreventNew" | "EMaxConcurrentResolutionRule_MAX" */
    open var SoundConcurrencySettings: SoundConcurrency
    open var ConcurrencySet: Any
    open var ConcurrencyOverrides: SoundConcurrencySettings
    open var MaxConcurrentPlayCount: Number
    open var Duration: Number
    open var MaxDistance: Number
    open var TotalSamples: Number
    open var Priority: Number
    open var AttenuationSettings: SoundAttenuation
    open var Modulation: SoundModulation
    open var SoundSubmixObject: SoundSubmix
    open var SoundSubmixSends: Array<SoundSubmixSendInfo>
    open var SourceEffectChain: SoundEffectSourcePresetChain
    open var BusSends: Array<SoundSourceBusSendInfo>
    open var PreEffectBusSends: Array<SoundSourceBusSendInfo>
    open fun SpawnSoundAttached(AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent

    companion object {
        fun Load(ResourceName: String): SoundBase
        fun Find(Outer: UObject, ResourceName: String): SoundBase
        fun GetDefaultObject(): SoundBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundBase
        fun C(Other: UObject): SoundBase
        fun C(Other: Any): SoundBase
        fun SpawnSoundAttached(Sound: SoundBase, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent
    }
}

external object EUMGSequencePlayMode {
    var Forward: String /* "Forward" */
    var Reverse: String /* "Reverse" */
    var PingPong: String /* "PingPong" */
    var EUMGSequencePlayMode_MAX: String /* "EUMGSequencePlayMode_MAX" */
}

external open class InputEvent {
    open fun clone(): InputEvent
    open fun InputEvent_IsAltDown(): Boolean
    open fun InputEvent_IsCommandDown(): Boolean
    open fun InputEvent_IsControlDown(): Boolean
    open fun InputEvent_IsLeftAltDown(): Boolean
    open fun InputEvent_IsLeftCommandDown(): Boolean
    open fun InputEvent_IsLeftControlDown(): Boolean
    open fun InputEvent_IsLeftShiftDown(): Boolean
    open fun InputEvent_IsRepeat(): Boolean
    open fun InputEvent_IsRightAltDown(): Boolean
    open fun InputEvent_IsRightCommandDown(): Boolean
    open fun InputEvent_IsRightControlDown(): Boolean
    open fun InputEvent_IsRightShiftDown(): Boolean
    open fun InputEvent_IsShiftDown(): Boolean

    companion object {
        fun C(Other: UObject): InputEvent
        fun C(Other: Any): InputEvent
        fun InputEvent_IsAltDown(Input: InputEvent): Boolean
        fun InputEvent_IsCommandDown(Input: InputEvent): Boolean
        fun InputEvent_IsControlDown(Input: InputEvent): Boolean
        fun InputEvent_IsLeftAltDown(Input: InputEvent): Boolean
        fun InputEvent_IsLeftCommandDown(Input: InputEvent): Boolean
        fun InputEvent_IsLeftControlDown(Input: InputEvent): Boolean
        fun InputEvent_IsLeftShiftDown(Input: InputEvent): Boolean
        fun InputEvent_IsRepeat(Input: InputEvent): Boolean
        fun InputEvent_IsRightAltDown(Input: InputEvent): Boolean
        fun InputEvent_IsRightCommandDown(Input: InputEvent): Boolean
        fun InputEvent_IsRightControlDown(Input: InputEvent): Boolean
        fun InputEvent_IsRightShiftDown(Input: InputEvent): Boolean
        fun InputEvent_IsShiftDown(Input: InputEvent): Boolean
    }
}

external object ESlateGesture {
    var None: String /* "None" */
    var Scroll: String /* "Scroll" */
    var Magnify: String /* "Magnify" */
    var Swipe: String /* "Swipe" */
    var Rotate: String /* "Rotate" */
    var LongPress: String /* "LongPress" */
    var ESlateGesture_MAX: String /* "ESlateGesture_MAX" */
}

external interface `T$345` {
    var Reply: EventReply
    var `$`: EventReply
}

external open class EventReply {
    open fun clone(): EventReply
    open fun CaptureJoystick(CapturingWidget: Widget = definedExternally, bInAllJoysticks: Boolean = definedExternally): `T$345`
    open fun CaptureMouse(CapturingWidget: Widget = definedExternally): `T$345`
    open fun ClearUserFocus(bInAllUsers: Boolean = definedExternally): `T$345`
    open fun DetectDrag(WidgetDetectingDrag: Widget = definedExternally, DragKey: Key = definedExternally): `T$345`
    open fun EndDragDrop(): `T$345`
    open fun LockMouse(CapturingWidget: Widget = definedExternally): `T$345`
    open fun ReleaseJoystickCapture(bInAllJoysticks: Boolean = definedExternally): `T$345`
    open fun ReleaseMouseCapture(): `T$345`
    open fun SetMousePosition(NewMousePosition: Vector2D = definedExternally): `T$345`
    open fun SetUserFocus(FocusWidget: Widget = definedExternally, bInAllUsers: Boolean = definedExternally): `T$345`
    open fun UnlockMouse(): `T$345`

    companion object {
        fun C(Other: UObject): EventReply
        fun C(Other: Any): EventReply
        fun CaptureJoystick(Reply: EventReply = definedExternally, CapturingWidget: Widget = definedExternally, bInAllJoysticks: Boolean = definedExternally): `T$345`
        fun CaptureMouse(Reply: EventReply = definedExternally, CapturingWidget: Widget = definedExternally): `T$345`
        fun ClearUserFocus(Reply: EventReply = definedExternally, bInAllUsers: Boolean = definedExternally): `T$345`
        fun DetectDrag(Reply: EventReply = definedExternally, WidgetDetectingDrag: Widget = definedExternally, DragKey: Key = definedExternally): `T$345`
        fun EndDragDrop(Reply: EventReply = definedExternally): `T$345`
        fun LockMouse(Reply: EventReply = definedExternally, CapturingWidget: Widget = definedExternally): `T$345`
        fun ReleaseJoystickCapture(Reply: EventReply = definedExternally, bInAllJoysticks: Boolean = definedExternally): `T$345`
        fun ReleaseMouseCapture(Reply: EventReply = definedExternally): `T$345`
        fun SetMousePosition(Reply: EventReply = definedExternally, NewMousePosition: Vector2D = definedExternally): `T$345`
        fun SetUserFocus(Reply: EventReply = definedExternally, FocusWidget: Widget = definedExternally, bInAllUsers: Boolean = definedExternally): `T$345`
        fun UnlockMouse(Reply: EventReply = definedExternally): `T$345`
        fun Handled(): EventReply
        fun Unhandled(): EventReply
    }
}

external open class UPointerEvent : InputEvent {
    override fun clone(): UPointerEvent
    open fun PointerEvent_GetCursorDelta(): Vector2D
    open fun PointerEvent_GetEffectingButton(): Key
    open fun PointerEvent_GetGestureDelta(): Vector2D
    open fun PointerEvent_GetGestureType(): String /* "None" | "Scroll" | "Magnify" | "Swipe" | "Rotate" | "LongPress" | "ESlateGesture_MAX" */
    open fun PointerEvent_GetLastScreenSpacePosition(): Vector2D
    open fun PointerEvent_GetPointerIndex(): Number
    open fun PointerEvent_GetScreenSpacePosition(): Vector2D
    open fun PointerEvent_GetTouchpadIndex(): Number
    open fun PointerEvent_GetUserIndex(): Number
    open fun PointerEvent_GetWheelDelta(): Number
    open fun PointerEvent_IsMouseButtonDown(MouseButton: Key): Boolean
    open fun PointerEvent_IsTouchEvent(): Boolean
    open fun DetectDragIfPressed(WidgetDetectingDrag: Widget, DragKey: Key): EventReply
    open fun GetInputEventFromPointerEvent(): InputEvent

    companion object {
        fun C(Other: UObject): UPointerEvent
        fun C(Other: Any): UPointerEvent
        fun PointerEvent_GetCursorDelta(Input: UPointerEvent): Vector2D
        fun PointerEvent_GetEffectingButton(Input: UPointerEvent): Key
        fun PointerEvent_GetGestureDelta(Input: UPointerEvent): Vector2D
        fun PointerEvent_GetGestureType(Input: UPointerEvent): String /* "None" | "Scroll" | "Magnify" | "Swipe" | "Rotate" | "LongPress" | "ESlateGesture_MAX" */
        fun PointerEvent_GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D
        fun PointerEvent_GetPointerIndex(Input: UPointerEvent): Number
        fun PointerEvent_GetScreenSpacePosition(Input: UPointerEvent): Vector2D
        fun PointerEvent_GetTouchpadIndex(Input: UPointerEvent): Number
        fun PointerEvent_GetUserIndex(Input: UPointerEvent): Number
        fun PointerEvent_GetWheelDelta(Input: UPointerEvent): Number
        fun PointerEvent_IsMouseButtonDown(Input: UPointerEvent, MouseButton: Key): Boolean
        fun PointerEvent_IsTouchEvent(Input: UPointerEvent): Boolean
        fun DetectDragIfPressed(UPointerEvent: UPointerEvent, WidgetDetectingDrag: Widget, DragKey: Key): EventReply
        fun GetInputEventFromPointerEvent(Event: UPointerEvent): InputEvent
    }
}

external open class UFocusEvent {
    open fun clone(): UFocusEvent

    companion object {
        fun C(Other: UObject): UFocusEvent
        fun C(Other: Any): UFocusEvent
    }
}

external open class KeyEvent : InputEvent {
    override fun clone(): KeyEvent
    open fun GetKeyNameByKeyEvent(): String
    open fun GetKey(): Key
    open fun GetUserIndex(): Number
    open fun Key_GetNavigationDirectionFromKey(): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
    open fun GetInputEventFromKeyEvent(): InputEvent

    companion object {
        fun C(Other: UObject): KeyEvent
        fun C(Other: Any): KeyEvent
        fun GetKeyNameByKeyEvent(Event: KeyEvent): String
        fun GetKey(Input: KeyEvent): Key
        fun GetUserIndex(Input: KeyEvent): Number
        fun Key_GetNavigationDirectionFromKey(InKeyEvent: KeyEvent): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
        fun GetInputEventFromKeyEvent(Event: KeyEvent): InputEvent
    }
}

external open class SlateBrushAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Brush: SlateBrush
    open fun MakeBrushFromAsset(): SlateBrush

    companion object {
        fun Load(ResourceName: String): SlateBrushAsset
        fun Find(Outer: UObject, ResourceName: String): SlateBrushAsset
        fun GetDefaultObject(): SlateBrushAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateBrushAsset
        fun C(Other: UObject): SlateBrushAsset
        fun C(Other: Any): SlateBrushAsset
        fun MakeBrushFromAsset(BrushAsset: SlateBrushAsset): SlateBrush
    }
}

external open class PaintContext {
    open fun clone(): PaintContext
    open fun DrawSpaceSpline(InStart: Vector2D = definedExternally, InStartDir: Vector2D = definedExternally, InEnd: Vector2D = definedExternally, InEndDir: Vector2D = definedExternally, InThickness: Number = definedExternally, InTint: LinearColor = definedExternally): `T$146`
    open fun DrawBox(Position: Vector2D = definedExternally, Size: Vector2D = definedExternally, Brush: SlateBrushAsset = definedExternally, Tint: LinearColor = definedExternally): `T$146`
    open fun DrawLine(PositionA: Vector2D = definedExternally, PositionB: Vector2D = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$146`
    open fun DrawLines(Points: Array<Vector2D> = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$146`
    open fun DrawText(inString: String = definedExternally, Position: Vector2D = definedExternally, Tint: LinearColor = definedExternally): `T$146`
    open fun DrawTextFormatted(text: String = definedExternally, Position: Vector2D = definedExternally, Font: Font = definedExternally, FontSize: Number = definedExternally, FontTypeFace: String = definedExternally, Tint: LinearColor = definedExternally): `T$146`

    companion object {
        fun C(Other: UObject): PaintContext
        fun C(Other: Any): PaintContext
        fun DrawSpaceSpline(Context: PaintContext = definedExternally, InStart: Vector2D = definedExternally, InStartDir: Vector2D = definedExternally, InEnd: Vector2D = definedExternally, InEndDir: Vector2D = definedExternally, InThickness: Number = definedExternally, InTint: LinearColor = definedExternally): `T$146`
        fun DrawBox(Context: PaintContext = definedExternally, Position: Vector2D = definedExternally, Size: Vector2D = definedExternally, Brush: SlateBrushAsset = definedExternally, Tint: LinearColor = definedExternally): `T$146`
        fun DrawLine(Context: PaintContext = definedExternally, PositionA: Vector2D = definedExternally, PositionB: Vector2D = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$146`
        fun DrawLines(Context: PaintContext = definedExternally, Points: Array<Vector2D> = definedExternally, Tint: LinearColor = definedExternally, bAntiAlias: Boolean = definedExternally, Thickness: Number = definedExternally): `T$146`
        fun DrawText(Context: PaintContext = definedExternally, inString: String = definedExternally, Position: Vector2D = definedExternally, Tint: LinearColor = definedExternally): `T$146`
        fun DrawTextFormatted(Context: PaintContext = definedExternally, text: String = definedExternally, Position: Vector2D = definedExternally, Font: Font = definedExternally, FontSize: Number = definedExternally, FontTypeFace: String = definedExternally, Tint: LinearColor = definedExternally): `T$146`
    }
}

external open class MotionEvent : InputEvent {
    override fun clone(): MotionEvent

    companion object {
        fun C(Other: UObject): MotionEvent
        fun C(Other: Any): MotionEvent
    }
}

external open class CharacterEvent : InputEvent {
    override fun clone(): CharacterEvent
    open fun GetInputEventFromCharacterEvent(): InputEvent

    companion object {
        fun C(Other: UObject): CharacterEvent
        fun C(Other: Any): CharacterEvent
        fun GetInputEventFromCharacterEvent(Event: CharacterEvent): InputEvent
    }
}

external open class AnalogInputEvent : KeyEvent {
    override fun clone(): AnalogInputEvent
    open fun GetAnalogValue(): Number
    open fun Key_GetNavigationDirectionFromAnalog(): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
    open fun GetKeyEventFromAnalogInputEvent(): KeyEvent

    companion object {
        fun C(Other: UObject): AnalogInputEvent
        fun C(Other: Any): AnalogInputEvent
        fun GetAnalogValue(Input: AnalogInputEvent): Number
        fun Key_GetNavigationDirectionFromAnalog(InAnalogEvent: AnalogInputEvent): String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */
        fun GetKeyEventFromAnalogInputEvent(Event: AnalogInputEvent): KeyEvent
    }
}

external interface `T$346` {
    var Operation: DragDropOperation
}

external open class UserWidget : Widget {
    constructor()
    constructor(Outer: UObject)
    open var ColorAndOpacity: LinearColor
    open var ColorAndOpacityDelegate: UnrealEngineDelegate<() -> LinearColor>
    open var ForegroundColor: SlateColor
    open var ForegroundColorDelegate: UnrealEngineDelegate<() -> SlateColor>
    open var Padding: Margin
    open var ActiveSequencePlayers: Array<UMGSequencePlayer>
    open var StoppedSequencePlayers: Array<UMGSequencePlayer>
    open var NamedSlotBindings: Array<NamedSlotBinding>
    open var WidgetTree: WidgetTree
    open var DesignTimeSize: Vector2D
    open var DesignSizeMode: String /* "FillScreen" | "Custom" | "CustomOnScreen" | "Desired" | "DesiredOnScreen" | "EDesignPreviewSizeMode_MAX" */
    open var PaletteCategory: String
    open var PreviewBackground: Texture2D
    open var Priority: Number
    open var bSupportsKeyboardFocus: Boolean
    open var bIsFocusable: Boolean
    open var bStopAction: Boolean
    open var bHasScriptImplementedTick: Boolean
    open var bHasScriptImplementedPaint: Boolean
    open var bCookedWidgetTree: Boolean
    open var TickFrequency: String /* "Never" | "Auto" | "EWidgetTickFrequency_MAX" */
    open var InputComponent: InputComponent
    open var AnimationCallbacks: Array<AnimationEventBinding>
    open fun UnregisterInputComponent()
    open fun UnbindAllFromAnimationStarted(Animation: WidgetAnimation)
    open fun UnbindAllFromAnimationFinished(Animation: WidgetAnimation)
    open fun Tick(MyGeometry: Geometry, InDeltaTime: Number)
    open fun StopListeningForInputAction(ActionName: String, EventType: String /* "IE_Pressed" | "IE_Released" | "IE_Repeat" | "IE_DoubleClick" | "IE_Axis" | "IE_MAX" */)
    open fun StopListeningForAllInputActions()
    open fun StopAnimationsAndLatentActions()
    open fun StopAnimation(InAnimation: WidgetAnimation)
    open fun StopAllAnimations()
    open fun SetPositionInViewport(Position: Vector2D, bRemoveDPIScale: Boolean)
    open fun SetPlaybackSpeed(InAnimation: WidgetAnimation, PlaybackSpeed: Number)
    open fun SetPadding(InPadding: Margin)
    open fun SetOwningPlayer(LocalPlayerController: PlayerController)
    open fun SetNumLoopsToPlay(InAnimation: WidgetAnimation, NumLoopsToPlay: Number)
    open fun SetInputActionPriority(NewPriority: Number)
    open fun SetInputActionBlocking(bShouldBlock: Boolean)
    open fun SetForegroundColor(InForegroundColor: SlateColor)
    open fun SetDesiredSizeInViewport(Size: Vector2D)
    open fun SetColorAndOpacity(InColorAndOpacity: LinearColor)
    open fun SetAnchorsInViewport(Anchors: Anchors)
    open fun SetAlignmentInViewport(Alignment: Vector2D)
    open fun ReverseAnimation(InAnimation: WidgetAnimation)
    open fun RemoveFromViewport()
    open fun RegisterInputComponent()
    open fun PreConstruct(IsDesignTime: Boolean)
    open fun PlaySound(SoundToPlay: SoundBase)
    open fun PlayAnimationTimeRange(InAnimation: WidgetAnimation, StartAtTime: Number, EndAtTime: Number, NumLoopsToPlay: Number, PlayMode: String /* "Forward" | "Reverse" | "PingPong" | "EUMGSequencePlayMode_MAX" */, PlaybackSpeed: Number): UMGSequencePlayer
    open fun PlayAnimationReverse(InAnimation: WidgetAnimation, PlaybackSpeed: Number): UMGSequencePlayer
    open fun PlayAnimationForward(InAnimation: WidgetAnimation, PlaybackSpeed: Number): UMGSequencePlayer
    open fun PlayAnimation(InAnimation: WidgetAnimation, StartAtTime: Number, NumLoopsToPlay: Number, PlayMode: String /* "Forward" | "Reverse" | "PingPong" | "EUMGSequencePlayMode_MAX" */, PlaybackSpeed: Number): UMGSequencePlayer
    open fun PauseAnimation(InAnimation: WidgetAnimation): Number
    open fun OnTouchStarted(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnTouchMoved(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnTouchGesture(MyGeometry: Geometry, GestureEvent: UPointerEvent): EventReply
    open fun OnTouchForceChanged(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnTouchEnded(MyGeometry: Geometry, InTouchEvent: UPointerEvent): EventReply
    open fun OnRemovedFromFocusPath(InFocusEvent: UFocusEvent)
    open fun OnPreviewMouseButtonDown(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnPreviewKeyDown(MyGeometry: Geometry, InKeyEvent: KeyEvent): EventReply
    open fun OnPaint(Context: PaintContext = definedExternally): `T$146`
    open fun OnMouseWheel(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseMove(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseLeave(MouseEvent: UPointerEvent)
    open fun OnMouseEnter(MyGeometry: Geometry, MouseEvent: UPointerEvent)
    open fun OnMouseCaptureLost()
    open fun OnMouseButtonUp(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseButtonDown(MyGeometry: Geometry, MouseEvent: UPointerEvent): EventReply
    open fun OnMouseButtonDoubleClick(InMyGeometry: Geometry, InMouseEvent: UPointerEvent): EventReply
    open fun OnMotionDetected(MyGeometry: Geometry, InMotionEvent: MotionEvent): EventReply
    open fun OnKeyUp(MyGeometry: Geometry, InKeyEvent: KeyEvent): EventReply
    open fun OnKeyDown(MyGeometry: Geometry, InKeyEvent: KeyEvent): EventReply
    open fun OnKeyChar(MyGeometry: Geometry, InCharacterEvent: CharacterEvent): EventReply
    open fun OnInitialized()
    open fun OnFocusReceived(MyGeometry: Geometry, InFocusEvent: UFocusEvent): EventReply
    open fun OnFocusLost(InFocusEvent: UFocusEvent)
    open fun OnDrop(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation): Boolean
    open fun OnDragOver(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation): Boolean
    open fun OnDragLeave(UPointerEvent: UPointerEvent, Operation: DragDropOperation)
    open fun OnDragEnter(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation)
    open fun OnDragDetected(MyGeometry: Geometry, UPointerEvent: UPointerEvent, Operation: DragDropOperation = definedExternally): `T$346`
    open fun OnDragCancelled(UPointerEvent: UPointerEvent, Operation: DragDropOperation)
    open fun OnAnimationStarted(Animation: WidgetAnimation)
    open fun OnAnimationFinished(Animation: WidgetAnimation)
    open fun OnAnalogValueChanged(MyGeometry: Geometry, InAnalogInputEvent: AnalogInputEvent): EventReply
    open fun OnAddedToFocusPath(InFocusEvent: UFocusEvent)
    open fun IsPlayingAnimation(): Boolean
    open fun IsListeningForInputAction(ActionName: String): Boolean
    open fun IsInViewport(): Boolean
    open fun IsInteractable(): Boolean
    open fun IsAnyAnimationPlaying(): Boolean
    open fun IsAnimationPlayingForward(InAnimation: WidgetAnimation): Boolean
    open fun IsAnimationPlaying(InAnimation: WidgetAnimation): Boolean
    open fun GetOwningPlayerPawn(): Pawn
    open fun GetIsVisible(): Boolean
    open fun GetAnimationCurrentTime(InAnimation: WidgetAnimation): Number
    open fun GetAnchorsInViewport(): Anchors
    open fun GetAlignmentInViewport(): Vector2D
    open fun Destruct()
    open fun Construct()
    open fun CancelLatentActions()
    open fun AddToViewport(ZOrder: Number)
    open fun AddToPlayerScreen(ZOrder: Number): Boolean

    companion object {
        fun Load(ResourceName: String): UserWidget
        fun Find(Outer: UObject, ResourceName: String): UserWidget
        fun GetDefaultObject(): UserWidget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UserWidget
        fun C(Other: UObject): UserWidget
        fun C(Other: Any): UserWidget
    }
}

external open class ViewTargetTransitionParams {
    open var BlendTime: Number
    open var BlendFunction: String /* "VTBlend_Linear" | "VTBlend_Cubic" | "VTBlend_EaseIn" | "VTBlend_EaseOut" | "VTBlend_EaseInOut" | "VTBlend_MAX" */
    open var BlendExp: Number
    open var bLockOutgoing: Boolean
    open fun clone(): ViewTargetTransitionParams

    companion object {
        fun C(Other: UObject): ViewTargetTransitionParams
        fun C(Other: Any): ViewTargetTransitionParams
    }
}

external open class UpdateLevelVisibilityLevelInfo {
    open var PackageName: String
    open var bIsVisible: Boolean
    open fun clone(): UpdateLevelVisibilityLevelInfo

    companion object {
        fun C(Other: UObject): UpdateLevelVisibilityLevelInfo
        fun C(Other: Any): UpdateLevelVisibilityLevelInfo
    }
}

external open class HapticFeedbackEffect_Base : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): HapticFeedbackEffect_Base
        fun Find(Outer: UObject, ResourceName: String): HapticFeedbackEffect_Base
        fun GetDefaultObject(): HapticFeedbackEffect_Base
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HapticFeedbackEffect_Base
        fun C(Other: UObject): HapticFeedbackEffect_Base
        fun C(Other: Any): HapticFeedbackEffect_Base
    }
}

external object EDynamicForceFeedbackAction {
    var Start: String /* "Start" */
    var Update: String /* "Update" */
    var Stop: String /* "Stop" */
    var EDynamicForceFeedbackAction_MAX: String /* "EDynamicForceFeedbackAction_MAX" */
}

external object EObjectTypeQuery {
    var ObjectTypeQuery1: String /* "ObjectTypeQuery1" */
    var ObjectTypeQuery2: String /* "ObjectTypeQuery2" */
    var ObjectTypeQuery3: String /* "ObjectTypeQuery3" */
    var ObjectTypeQuery4: String /* "ObjectTypeQuery4" */
    var ObjectTypeQuery5: String /* "ObjectTypeQuery5" */
    var ObjectTypeQuery6: String /* "ObjectTypeQuery6" */
    var ObjectTypeQuery7: String /* "ObjectTypeQuery7" */
    var ObjectTypeQuery8: String /* "ObjectTypeQuery8" */
    var ObjectTypeQuery9: String /* "ObjectTypeQuery9" */
    var ObjectTypeQuery10: String /* "ObjectTypeQuery10" */
    var ObjectTypeQuery11: String /* "ObjectTypeQuery11" */
    var ObjectTypeQuery12: String /* "ObjectTypeQuery12" */
    var ObjectTypeQuery13: String /* "ObjectTypeQuery13" */
    var ObjectTypeQuery14: String /* "ObjectTypeQuery14" */
    var ObjectTypeQuery15: String /* "ObjectTypeQuery15" */
    var ObjectTypeQuery16: String /* "ObjectTypeQuery16" */
    var ObjectTypeQuery17: String /* "ObjectTypeQuery17" */
    var ObjectTypeQuery18: String /* "ObjectTypeQuery18" */
    var ObjectTypeQuery19: String /* "ObjectTypeQuery19" */
    var ObjectTypeQuery20: String /* "ObjectTypeQuery20" */
    var ObjectTypeQuery21: String /* "ObjectTypeQuery21" */
    var ObjectTypeQuery22: String /* "ObjectTypeQuery22" */
    var ObjectTypeQuery23: String /* "ObjectTypeQuery23" */
    var ObjectTypeQuery24: String /* "ObjectTypeQuery24" */
    var ObjectTypeQuery25: String /* "ObjectTypeQuery25" */
    var ObjectTypeQuery26: String /* "ObjectTypeQuery26" */
    var ObjectTypeQuery27: String /* "ObjectTypeQuery27" */
    var ObjectTypeQuery28: String /* "ObjectTypeQuery28" */
    var ObjectTypeQuery29: String /* "ObjectTypeQuery29" */
    var ObjectTypeQuery30: String /* "ObjectTypeQuery30" */
    var ObjectTypeQuery31: String /* "ObjectTypeQuery31" */
    var ObjectTypeQuery32: String /* "ObjectTypeQuery32" */
    var ObjectTypeQuery_MAX: String /* "ObjectTypeQuery_MAX" */
    var EObjectTypeQuery_MAX: String /* "EObjectTypeQuery_MAX" */
}

external object ETraceTypeQuery {
    var TraceTypeQuery1: String /* "TraceTypeQuery1" */
    var TraceTypeQuery2: String /* "TraceTypeQuery2" */
    var TraceTypeQuery3: String /* "TraceTypeQuery3" */
    var TraceTypeQuery4: String /* "TraceTypeQuery4" */
    var TraceTypeQuery5: String /* "TraceTypeQuery5" */
    var TraceTypeQuery6: String /* "TraceTypeQuery6" */
    var TraceTypeQuery7: String /* "TraceTypeQuery7" */
    var TraceTypeQuery8: String /* "TraceTypeQuery8" */
    var TraceTypeQuery9: String /* "TraceTypeQuery9" */
    var TraceTypeQuery10: String /* "TraceTypeQuery10" */
    var TraceTypeQuery11: String /* "TraceTypeQuery11" */
    var TraceTypeQuery12: String /* "TraceTypeQuery12" */
    var TraceTypeQuery13: String /* "TraceTypeQuery13" */
    var TraceTypeQuery14: String /* "TraceTypeQuery14" */
    var TraceTypeQuery15: String /* "TraceTypeQuery15" */
    var TraceTypeQuery16: String /* "TraceTypeQuery16" */
    var TraceTypeQuery17: String /* "TraceTypeQuery17" */
    var TraceTypeQuery18: String /* "TraceTypeQuery18" */
    var TraceTypeQuery19: String /* "TraceTypeQuery19" */
    var TraceTypeQuery20: String /* "TraceTypeQuery20" */
    var TraceTypeQuery21: String /* "TraceTypeQuery21" */
    var TraceTypeQuery22: String /* "TraceTypeQuery22" */
    var TraceTypeQuery23: String /* "TraceTypeQuery23" */
    var TraceTypeQuery24: String /* "TraceTypeQuery24" */
    var TraceTypeQuery25: String /* "TraceTypeQuery25" */
    var TraceTypeQuery26: String /* "TraceTypeQuery26" */
    var TraceTypeQuery27: String /* "TraceTypeQuery27" */
    var TraceTypeQuery28: String /* "TraceTypeQuery28" */
    var TraceTypeQuery29: String /* "TraceTypeQuery29" */
    var TraceTypeQuery30: String /* "TraceTypeQuery30" */
    var TraceTypeQuery31: String /* "TraceTypeQuery31" */
    var TraceTypeQuery32: String /* "TraceTypeQuery32" */
    var TraceTypeQuery_MAX: String /* "TraceTypeQuery_MAX" */
    var ETraceTypeQuery_MAX: String /* "ETraceTypeQuery_MAX" */
}

external open class UpdateLevelStreamingLevelStatus {
    open var PackageName: String
    open var LODIndex: Number
    open var bNewShouldBeLoaded: Boolean
    open var bNewShouldBeVisible: Boolean
    open var bNewShouldBlockOnLoad: Boolean
    open fun clone(): UpdateLevelStreamingLevelStatus

    companion object {
        fun C(Other: UObject): UpdateLevelStreamingLevelStatus
        fun C(Other: Any): UpdateLevelStreamingLevelStatus
    }
}

external object ETravelType {
    var TRAVEL_Absolute: String /* "TRAVEL_Absolute" */
    var TRAVEL_Partial: String /* "TRAVEL_Partial" */
    var TRAVEL_Relative: String /* "TRAVEL_Relative" */
    var TRAVEL_MAX: String /* "TRAVEL_MAX" */
}

external open class ForceFeedbackParameters {
    open var Tag: String
    open var bLooping: Boolean
    open var bIgnoreTimeDilation: Boolean
    open var bPlayWhilePaused: Boolean
    open fun clone(): ForceFeedbackParameters

    companion object {
        fun C(Other: UObject): ForceFeedbackParameters
        fun C(Other: Any): ForceFeedbackParameters
    }
}

external open class LocalPlayerSubsystem : Subsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LocalPlayerSubsystem
        fun Find(Outer: UObject, ResourceName: String): LocalPlayerSubsystem
        fun GetDefaultObject(): LocalPlayerSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalPlayerSubsystem
        fun C(Other: UObject): LocalPlayerSubsystem
        fun C(Other: Any): LocalPlayerSubsystem
    }
}

external object EMouseLockMode {
    var DoNotLock: String /* "DoNotLock" */
    var LockOnCapture: String /* "LockOnCapture" */
    var LockAlways: String /* "LockAlways" */
    var LockInFullscreen: String /* "LockInFullscreen" */
    var EMouseLockMode_MAX: String /* "EMouseLockMode_MAX" */
}

external interface `T$347` {
    var ScreenLocation: Vector2D
    var `$`: Boolean
}

external interface `T$348` {
    var SizeX: Number
    var SizeY: Number
}

external interface `T$349` {
    var LocationX: Number
    var LocationY: Number
    var `$`: Boolean
}

external interface `T$350` {
    var Tilt: Vector
    var RotationRate: Vector
    var Gravity: Vector
    var Acceleration: Vector
}

external interface `T$351` {
    var HitResult: HitResult
    var `$`: Boolean
}

external interface `T$352` {
    var WorldLocation: Vector
    var WorldDirection: Vector
    var `$`: Boolean
}

external interface `T$353` {
    var WorldPosition: Vector
    var WorldDirection: Vector
    var `$`: Boolean
}

external interface `T$354` {
    var ScreenPosition: Vector2D
    var `$`: Boolean
}

external open class PlayerController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Controller {
    open var Player: Player
    open var AcknowledgedPawn: Pawn
    open var ControllingDirTrackInst: InterpTrackInstDirector
    open var MyHUD: HUD
    open var PlayerCameraManager: PlayerCameraManager
    open var PlayerCameraManagerClass: UnrealEngineClass
    open var bAutoManageActiveCameraTarget: Boolean
    open var TargetViewRotation: Rotator
    open var SmoothTargetViewRotationSpeed: Number
    open var HiddenActors: Array<Actor>
    open var HiddenPrimitiveComponents: Array<Any>
    open var LastSpectatorStateSynchTime: Number
    open var LastSpectatorSyncLocation: Vector
    open var LastSpectatorSyncRotation: Rotator
    open var ClientCap: Number
    open var CheatManager: CheatManager
    open var CheatClass: UnrealEngineClass
    open var PlayerInput: PlayerInput
    open var ActiveForceFeedbackEffects: Array<ActiveForceFeedbackEffect>
    open var bPlayerIsWaiting: Boolean
    open var NetPlayerIndex: Number
    open var PendingSwapConnection: NetConnection
    open var NetConnection: NetConnection
    open var InputYawScale: Number
    open var InputPitchScale: Number
    open var InputRollScale: Number
    open var bShowMouseCursor: Boolean
    open var bEnableClickEvents: Boolean
    open var bEnableTouchEvents: Boolean
    open var bEnableMouseOverEvents: Boolean
    open var bEnableTouchOverEvents: Boolean
    open var bForceFeedbackEnabled: Boolean
    open var ForceFeedbackScale: Number
    open var ClickEventKeys: Array<Key>
    open var DefaultMouseCursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */
    open var CurrentMouseCursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */
    open var DefaultClickTraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var CurrentClickTraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var HitResultTraceDistance: Number
    open var SeamlessTravelCount: Any
    open var LastCompletedSeamlessTravelCount: Any
    open var InactiveStateInputComponent: InputComponent
    open var bShouldPerformFullTickWhenPaused: Boolean
    open var CurrentTouchInterface: TouchInterface
    open var SpectatorPawn: SpectatorPawn
    open var bIsLocalPlayerController: Boolean
    open var SpawnLocation: Vector
    open fun WasInputKeyJustReleased(Key: Key): Boolean
    open fun WasInputKeyJustPressed(Key: Key): Boolean
    open fun ToggleSpeaking(bInSpeaking: Boolean)
    open fun SwitchLevel(URL: String)
    open fun StopHapticEffect(Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */)
    open fun StartFire(FireModeNum: Number)
    open fun SetVirtualJoystickVisibility(bVisible: Boolean)
    open fun SetViewTargetWithBlend(NewViewTarget: Actor, BlendTime: Number, BlendFunc: String /* "VTBlend_Linear" | "VTBlend_Cubic" | "VTBlend_EaseIn" | "VTBlend_EaseOut" | "VTBlend_EaseInOut" | "VTBlend_MAX" */, BlendExp: Number, bLockOutgoing: Boolean)
    open fun SetName(S: String)
    open fun SetMouseLocation(X: Number, Y: Number)
    open fun SetMouseCursorWidget(Cursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */, CursorWidget: UserWidget)
    open fun SetHapticsByValue(Frequency: Number, Amplitude: Number, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */)
    open fun SetDisableHaptics(bNewDisabled: Boolean)
    open fun SetControllerLightColor(Color: Color)
    open fun SetCinematicMode(bInCinematicMode: Boolean, bHidePlayer: Boolean, bAffectsHUD: Boolean, bAffectsMovement: Boolean, bAffectsTurning: Boolean)
    open fun SetAudioListenerOverride(AttachToComponent: SceneComponent, Location: Vector, Rotation: Rotator)
    open fun SetAudioListenerAttenuationOverride(AttachToComponent: SceneComponent, AttenuationLocationOVerride: Vector)
    open fun ServerViewSelf(TransitionParams: ViewTargetTransitionParams)
    open fun ServerViewPrevPlayer()
    open fun ServerViewNextPlayer()
    open fun ServerVerifyViewTarget()
    open fun ServerUpdateMultipleLevelsVisibility(LevelVisibilities: Array<UpdateLevelVisibilityLevelInfo>)
    open fun ServerUpdateLevelVisibility(PackageName: String, bIsVisible: Boolean)
    open fun ServerUpdateCamera(CamLoc: Vector_NetQuantize, CamPitchAndYaw: Number)
    open fun ServerUnmutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ServerToggleAILogging()
    open fun ServerShortTimeout()
    open fun ServerSetSpectatorWaiting(bWaiting: Boolean)
    open fun ServerSetSpectatorLocation(NewLoc: Vector, NewRot: Rotator)
    open fun ServerRestartPlayer()
    open fun ServerPause()
    open fun ServerNotifyLoadedWorld(WorldPackageName: String)
    open fun ServerMutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ServerCheckClientPossessionReliable()
    open fun ServerCheckClientPossession()
    open fun ServerChangeName(S: String)
    open fun ServerCamera(NewMode: String)
    open fun ServerAcknowledgePossession(P: Pawn)
    open fun SendToConsole(Command: String)
    open fun RestartLevel()
    open fun ResetControllerLightColor()
    open fun ProjectWorldLocationToScreen(WorldLocation: Vector, ScreenLocation: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$347`
    open fun PlayHapticEffect(HapticEffect: HapticFeedbackEffect_Base, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */, Scale: Number, bLoop: Boolean)
    open fun PlayDynamicForceFeedback(Intensity: Number, Duration: Number, bAffectsLeftLarge: Boolean, bAffectsLeftSmall: Boolean, bAffectsRightLarge: Boolean, bAffectsRightSmall: Boolean, Action: String /* "Start" | "Update" | "Stop" | "EDynamicForceFeedbackAction_MAX" */, LatentInfo: LatentActionInfo)
    open fun Pause()
    open fun OnServerStartedVisualLogger(bIsLogging: Boolean)
    open fun LocalTravel(URL: String)
    open fun K2_ClientPlayForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect, Tag: String, bLooping: Boolean, bIgnoreTimeDilation: Boolean, bPlayWhilePaused: Boolean)
    open fun IsInputKeyDown(Key: Key): Boolean
    open fun GetViewportSize(SizeX: Number = definedExternally, SizeY: Number = definedExternally): `T$348`
    open fun GetSpectatorPawn(): SpectatorPawn
    open fun GetMousePosition(LocationX: Number = definedExternally, LocationY: Number = definedExternally): `T$349`
    open fun GetInputVectorKeyState(Key: Key): Vector
    open fun GetInputTouchState(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, LocationX: Number = definedExternally, LocationY: Number = definedExternally, bIsCurrentlyPressed: Boolean = definedExternally): `T$332`
    open fun GetInputMouseDelta(DeltaX: Number = definedExternally, DeltaY: Number = definedExternally): `T$333`
    open fun GetInputMotionState(Tilt: Vector = definedExternally, RotationRate: Vector = definedExternally, Gravity: Vector = definedExternally, Acceleration: Vector = definedExternally): `T$350`
    open fun GetInputKeyTimeDown(Key: Key): Number
    open fun GetInputAnalogStickState(WhichStick: String /* "CAS_LeftStick" | "CAS_RightStick" | "CAS_MAX" */, StickX: Number = definedExternally, StickY: Number = definedExternally): `T$334`
    open fun GetInputAnalogKeyState(Key: Key): Number
    open fun GetHUD(): HUD
    open fun GetHitResultUnderFingerForObjects(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$351`
    open fun GetHitResultUnderFingerByChannel(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$351`
    open fun GetHitResultUnderFinger(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$351`
    open fun GetHitResultUnderCursorForObjects(ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$351`
    open fun GetHitResultUnderCursorByChannel(TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$351`
    open fun GetHitResultUnderCursor(TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */, bTraceComplex: Boolean, HitResult: HitResult = definedExternally): `T$351`
    open fun GetFocalLocation(): Vector
    open fun FOV(NewFOV: Number)
    open fun EnableCheats()
    open fun DeprojectScreenPositionToWorld(ScreenX: Number, ScreenY: Number, WorldLocation: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$352`
    open fun DeprojectMousePositionToWorld(WorldLocation: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$352`
    open fun ConsoleKey(Key: Key)
    open fun ClientWasKicked(KickReason: String)
    open fun ClientVoiceHandshakeComplete()
    open fun ClientUpdateMultipleLevelsStreamingStatus(LevelStatuses: Array<UpdateLevelStreamingLevelStatus>)
    open fun ClientUpdateLevelStreamingStatus(PackageName: String, bNewShouldBeLoaded: Boolean, bNewShouldBeVisible: Boolean, bNewShouldBlockOnLoad: Boolean, LODIndex: Number)
    open fun ClientUnmutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ClientTravelInternal(URL: String, TravelType: String /* "TRAVEL_Absolute" | "TRAVEL_Partial" | "TRAVEL_Relative" | "TRAVEL_MAX" */, bSeamless: Boolean, MapPackageGuid: Guid)
    open fun ClientTravel(URL: String, TravelType: String /* "TRAVEL_Absolute" | "TRAVEL_Partial" | "TRAVEL_Relative" | "TRAVEL_MAX" */, bSeamless: Boolean, MapPackageGuid: Guid)
    open fun ClientTeamMessage(SenderPlayerState: PlayerState, S: String, Type: String, MsgLifeTime: Number)
    open fun ClientStopForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect, Tag: String)
    open fun ClientStopCameraShake(Shake: UnrealEngineClass, bImmediately: Boolean)
    open fun ClientStopCameraAnim(AnimToStop: CameraAnim)
    open fun ClientStartOnlineSession()
    open fun ClientSpawnCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass)
    open fun ClientSetViewTarget(A: Actor, TransitionParams: ViewTargetTransitionParams)
    open fun ClientSetSpectatorWaiting(bWaiting: Boolean)
    open fun ClientSetHUD(NewHUDClass: UnrealEngineClass)
    open fun ClientSetForceMipLevelsToBeResident(Material: MaterialInterface, ForceDuration: Number, CinematicTextureGroups: Number)
    open fun ClientSetCinematicMode(bInCinematicMode: Boolean, bAffectsMovement: Boolean, bAffectsTurning: Boolean, bAffectsHUD: Boolean)
    open fun ClientSetCameraMode(NewCamMode: String)
    open fun ClientSetCameraFade(bEnableFading: Boolean, FadeColor: Color, FadeAlpha: Vector2D, FadeTime: Number, bFadeAudio: Boolean)
    open fun ClientSetBlockOnAsyncLoading()
    open fun ClientReturnToMainMenuWithTextReason(ReturnReason: String)
    open fun ClientReturnToMainMenu(ReturnReason: String)
    open fun ClientRetryClientRestart(NewPawn: Pawn)
    open fun ClientRestart(NewPawn: Pawn)
    open fun ClientReset()
    open fun ClientRepObjRef(UObject: UObject)
    open fun ClientReceiveLocalizedMessage(Message: UnrealEngineClass, Switch: Number, RelatedPlayerState_1: PlayerState, RelatedPlayerState_2: PlayerState, OptionalObject: UObject)
    open fun ClientPrestreamTextures(ForcedActor: Actor, ForceDuration: Number, bEnableStreaming: Boolean, CinematicTextureGroups: Number)
    open fun ClientPrepareMapChange(LevelName: String, bFirst: Boolean, bLast: Boolean)
    open fun ClientPlaySoundAtLocation(Sound: SoundBase, Location: Vector, VolumeMultiplier: Number, PitchMultiplier: Number)
    open fun ClientPlaySound(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number)
    open fun ClientPlayForceFeedback_Internal(ForceFeedbackEffect: ForceFeedbackEffect, Params: ForceFeedbackParameters)
    open fun ClientPlayCameraShake(Shake: UnrealEngineClass, Scale: Number, PlaySpace: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraAnimPlaySpace_MAX" */, UserPlaySpaceRot: Rotator)
    open fun ClientPlayCameraAnim(AnimToPlay: CameraAnim, Scale: Number, Rate: Number, BlendInTime: Number, BlendOutTime: Number, bLoop: Boolean, bRandomStartTime: Boolean, Space: String /* "CameraLocal" | "World" | "UserDefined" | "ECameraAnimPlaySpace_MAX" */, CustomPlaySpace: Rotator)
    open fun ClientMutePlayer(PlayerId: UniqueNetIdRepl)
    open fun ClientMessage(S: String, Type: String, MsgLifeTime: Number)
    open fun ClientIgnoreMoveInput(bIgnore: Boolean)
    open fun ClientIgnoreLookInput(bIgnore: Boolean)
    open fun ClientGotoState(NewState: String)
    open fun ClientGameEnded(EndGameFocus: Actor, bIsWinner: Boolean)
    open fun ClientForceGarbageCollection()
    open fun ClientFlushLevelStreaming()
    open fun ClientEndOnlineSession()
    open fun ClientEnableNetworkVoice(bEnable: Boolean)
    open fun ClientCommitMapChange()
    open fun ClientClearCameraLensEffects()
    open fun ClientCapBandwidth(Cap: Number)
    open fun ClientCancelPendingMapChange()
    open fun ClientAddTextureStreamingLoc(InLoc: Vector, Duration: Number, bOverrideLocation: Boolean)
    open fun ClearAudioListenerOverride()
    open fun ClearAudioListenerAttenuationOverride()
    open fun CanRestartPlayer(): Boolean
    open fun Camera(NewMode: String)
    open fun AddYawInput(Val: Number)
    open fun AddRollInput(Val: Number)
    open fun AddPitchInput(Val: Number)
    open fun ActivateTouchInterface(NewTouchInterface: TouchInterface)
    open fun SetEyeTrackedPlayer()
    open fun WriteLeaderboardInteger(StatName: String, StatValue: Number): Boolean
    open fun GetLocalPlayerSubSystemFromPlayerController(Class: UnrealEngineClass): LocalPlayerSubsystem
    open fun IsLoggedIn(): Boolean
    open fun ShowPlatformSpecificAchievementsScreen()
    open fun DeprojectScreenToWorld(ScreenPosition: Vector2D, WorldPosition: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$353`
    open fun GetPlayerControllerID(): Number
    open fun ProjectWorldToScreen(WorldPosition: Vector, ScreenPosition: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$354`
    open fun RemovePlayer(bDestroyPawn: Boolean)
    open fun SetPlayerControllerID(ControllerId: Number)
    open fun GetMousePositionScaledByDPI(LocationX: Number = definedExternally, LocationY: Number = definedExternally): `T$349`
    open fun GetPlayerScreenWidgetGeometry(): Geometry
    open fun ProjectWorldLocationToWidgetPosition(WorldLocation: Vector, ScreenPosition: Vector2D = definedExternally): `T$354`
    open fun SetInputMode_GameAndUI(InWidgetToFocus: Widget, bLockMouseToViewport: Boolean, bHideCursorDuringCapture: Boolean)
    open fun SetInputMode_GameAndUIEx(InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */, bHideCursorDuringCapture: Boolean)
    open fun SetInputMode_GameOnly()
    open fun SetInputMode_UIOnly(InWidgetToFocus: Widget, bLockMouseToViewport: Boolean)
    open fun SetInputMode_UIOnlyEx(InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */)

    companion object {
        fun GetDefaultObject(): PlayerController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlayerController
        fun C(Other: UObject): PlayerController
        fun C(Other: Any): PlayerController
        fun SetEyeTrackedPlayer(PlayerController: PlayerController)
        fun WriteLeaderboardInteger(PlayerController: PlayerController, StatName: String, StatValue: Number): Boolean
        fun GetLocalPlayerSubSystemFromPlayerController(PlayerController: PlayerController, Class: UnrealEngineClass): LocalPlayerSubsystem
        fun IsLoggedIn(SpecificPlayer: PlayerController): Boolean
        fun ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController)
        fun DeprojectScreenToWorld(Player: PlayerController, ScreenPosition: Vector2D, WorldPosition: Vector = definedExternally, WorldDirection: Vector = definedExternally): `T$353`
        fun GetPlayerControllerID(Player: PlayerController): Number
        fun ProjectWorldToScreen(Player: PlayerController, WorldPosition: Vector, ScreenPosition: Vector2D = definedExternally, bPlayerViewportRelative: Boolean = definedExternally): `T$354`
        fun RemovePlayer(Player: PlayerController, bDestroyPawn: Boolean)
        fun SetPlayerControllerID(Player: PlayerController, ControllerId: Number)
        fun GetMousePositionScaledByDPI(Player: PlayerController, LocationX: Number = definedExternally, LocationY: Number = definedExternally): `T$349`
        fun GetPlayerScreenWidgetGeometry(PlayerController: PlayerController): Geometry
        fun ProjectWorldLocationToWidgetPosition(PlayerController: PlayerController, WorldLocation: Vector, ScreenPosition: Vector2D = definedExternally): `T$354`
        fun SetInputMode_GameAndUI(Target: PlayerController, InWidgetToFocus: Widget, bLockMouseToViewport: Boolean, bHideCursorDuringCapture: Boolean)
        fun SetInputMode_GameAndUIEx(PlayerController: PlayerController, InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */, bHideCursorDuringCapture: Boolean)
        fun SetInputMode_GameOnly(PlayerController: PlayerController)
        fun SetInputMode_UIOnly(Target: PlayerController, InWidgetToFocus: Widget, bLockMouseToViewport: Boolean)
        fun SetInputMode_UIOnlyEx(PlayerController: PlayerController, InWidgetToFocus: Widget, InMouseLockMode: String /* "DoNotLock" | "LockOnCapture" | "LockAlways" | "LockInFullscreen" | "EMouseLockMode_MAX" */)
    }
}

external open class ScriptViewportClient : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ScriptViewportClient
        fun Find(Outer: UObject, ResourceName: String): ScriptViewportClient
        fun GetDefaultObject(): ScriptViewportClient
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScriptViewportClient
        fun C(Other: UObject): ScriptViewportClient
        fun C(Other: Any): ScriptViewportClient
    }
}

external open class DebugDisplayProperty {
    open var Obj: UObject
    open var WithinClass: UnrealEngineClass
    open fun clone(): DebugDisplayProperty

    companion object {
        fun C(Other: UObject): DebugDisplayProperty
        fun C(Other: Any): DebugDisplayProperty
    }
}

external open class OnlineSession : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): OnlineSession
        fun Find(Outer: UObject, ResourceName: String): OnlineSession
        fun GetDefaultObject(): OnlineSession
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): OnlineSession
        fun C(Other: UObject): OnlineSession
        fun C(Other: Any): OnlineSession
    }
}

external object ETravelFailure {
    var NoLevel: String /* "NoLevel" */
    var LoadMapFailure: String /* "LoadMapFailure" */
    var InvalidURL: String /* "InvalidURL" */
    var PackageMissing: String /* "PackageMissing" */
    var PackageVersion: String /* "PackageVersion" */
    var NoDownload: String /* "NoDownload" */
    var TravelFailure: String /* "TravelFailure" */
    var CheatCommands: String /* "CheatCommands" */
    var PendingNetGameCreateFailure: String /* "PendingNetGameCreateFailure" */
    var CloudSaveFailure: String /* "CloudSaveFailure" */
    var ServerTravelFailure: String /* "ServerTravelFailure" */
    var ClientTravelFailure: String /* "ClientTravelFailure" */
    var ETravelFailure_MAX: String /* "ETravelFailure_MAX" */
}

external object ENetworkFailure {
    var NetDriverAlreadyExists: String /* "NetDriverAlreadyExists" */
    var NetDriverCreateFailure: String /* "NetDriverCreateFailure" */
    var NetDriverListenFailure: String /* "NetDriverListenFailure" */
    var ConnectionLost: String /* "ConnectionLost" */
    var ConnectionTimeout: String /* "ConnectionTimeout" */
    var FailureReceived: String /* "FailureReceived" */
    var OutdatedClient: String /* "OutdatedClient" */
    var OutdatedServer: String /* "OutdatedServer" */
    var PendingConnectionFailure: String /* "PendingConnectionFailure" */
    var NetGuidMismatch: String /* "NetGuidMismatch" */
    var NetChecksumMismatch: String /* "NetChecksumMismatch" */
    var ENetworkFailure_MAX: String /* "ENetworkFailure_MAX" */
}

external open class GameInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LocalPlayers: Array<LocalPlayer>
    open var OnlineSession: OnlineSession
    open var ReferencedObjects: Array<UObject>
    open fun ReceiveShutdown()
    open fun ReceiveInit()
    open fun HandleTravelError(FailureType: String /* "NoLevel" | "LoadMapFailure" | "InvalidURL" | "PackageMissing" | "PackageVersion" | "NoDownload" | "TravelFailure" | "CheatCommands" | "PendingNetGameCreateFailure" | "CloudSaveFailure" | "ServerTravelFailure" | "ClientTravelFailure" | "ETravelFailure_MAX" */)
    open fun HandleNetworkError(FailureType: String /* "NetDriverAlreadyExists" | "NetDriverCreateFailure" | "NetDriverListenFailure" | "ConnectionLost" | "ConnectionTimeout" | "FailureReceived" | "OutdatedClient" | "OutdatedServer" | "PendingConnectionFailure" | "NetGuidMismatch" | "NetChecksumMismatch" | "ENetworkFailure_MAX" */, bIsServer: Boolean)
    open fun DebugRemovePlayer(ControllerId: Number)
    open fun DebugCreatePlayer(ControllerId: Number)

    companion object {
        fun Load(ResourceName: String): GameInstance
        fun Find(Outer: UObject, ResourceName: String): GameInstance
        fun GetDefaultObject(): GameInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameInstance
        fun C(Other: UObject): GameInstance
        fun C(Other: Any): GameInstance
    }
}

external open class GameViewportClient : ScriptViewportClient {
    constructor()
    constructor(Outer: UObject)
    open var ViewportConsole: Console
    open var DebugProperties: Array<DebugDisplayProperty>
    open var World: World
    open var GameInstance: GameInstance
    open fun SSSwapControllers()
    open fun ShowTitleSafeArea()
    open fun SetConsoleTarget(PlayerIndex: Number)

    companion object {
        fun Load(ResourceName: String): GameViewportClient
        fun Find(Outer: UObject, ResourceName: String): GameViewportClient
        fun GetDefaultObject(): GameViewportClient
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameViewportClient
        fun C(Other: UObject): GameViewportClient
        fun C(Other: Any): GameViewportClient
    }
}

external object EAspectRatioAxisConstraint {
    var AspectRatio_MaintainYFOV: String /* "AspectRatio_MaintainYFOV" */
    var AspectRatio_MaintainXFOV: String /* "AspectRatio_MaintainXFOV" */
    var AspectRatio_MajorAxisFOV: String /* "AspectRatio_MajorAxisFOV" */
    var AspectRatio_MAX: String /* "AspectRatio_MAX" */
}

external open class LocalPlayer : Player {
    constructor()
    constructor(Outer: UObject)
    open var ViewportClient: GameViewportClient
    open var AspectRatioAxisConstraint: String /* "AspectRatio_MaintainYFOV" | "AspectRatio_MaintainXFOV" | "AspectRatio_MajorAxisFOV" | "AspectRatio_MAX" */
    open var PendingLevelPlayerControllerClass: UnrealEngineClass
    open var bSentSplitJoin: Boolean
    open var ControllerId: Number

    companion object {
        fun Load(ResourceName: String): LocalPlayer
        fun Find(Outer: UObject, ResourceName: String): LocalPlayer
        fun GetDefaultObject(): LocalPlayer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalPlayer
        fun C(Other: UObject): LocalPlayer
        fun C(Other: Any): LocalPlayer
    }
}

external open class JavascriptSlateWidget {
    open fun clone(): JavascriptSlateWidget
    open fun EditorAddModalWindow()
    open fun AddWindow(bShowImmediately: Boolean)
    open fun AddWindowAsNativeChild(RootWindow: JavascriptSlateWidget)
    open fun ShowWindow()

    companion object {
        fun C(Other: UObject): JavascriptSlateWidget
        fun C(Other: Any): JavascriptSlateWidget
        fun EditorAddModalWindow(Widget: JavascriptSlateWidget)
        fun AddWindow(NewWindow: JavascriptSlateWidget, bShowImmediately: Boolean)
        fun AddWindowAsNativeChild(NewWindow: JavascriptSlateWidget, RootWindow: JavascriptSlateWidget)
        fun ShowWindow(NewWindow: JavascriptSlateWidget)
        fun CreateLogListingWidget(InLogName: String): JavascriptSlateWidget
        fun GetRootWindow(): JavascriptSlateWidget
    }
}

external object EHorizontalAlignment {
    var HAlign_Fill: String /* "HAlign_Fill" */
    var HAlign_Left: String /* "HAlign_Left" */
    var HAlign_Center: String /* "HAlign_Center" */
    var HAlign_Right: String /* "HAlign_Right" */
    var HAlign_MAX: String /* "HAlign_MAX" */
}

external object EVerticalAlignment {
    var VAlign_Fill: String /* "VAlign_Fill" */
    var VAlign_Top: String /* "VAlign_Top" */
    var VAlign_Center: String /* "VAlign_Center" */
    var VAlign_Bottom: String /* "VAlign_Bottom" */
    var VAlign_MAX: String /* "VAlign_MAX" */
}

external open class BorderSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): BorderSlot
        fun Find(Outer: UObject, ResourceName: String): BorderSlot
        fun GetDefaultObject(): BorderSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BorderSlot
        fun C(Other: UObject): BorderSlot
        fun C(Other: Any): BorderSlot
    }
}

external open class AnchorData {
    open var Offsets: Margin
    open var Anchors: Anchors
    open var Alignment: Vector2D
    open fun clone(): AnchorData

    companion object {
        fun C(Other: UObject): AnchorData
        fun C(Other: Any): AnchorData
    }
}

external open class CanvasPanelSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var LayoutData: AnchorData
    open var bAutoSize: Boolean
    open var ZOrder: Number
    open fun SetZOrder(InZOrder: Number)
    open fun SetSize(InSize: Vector2D)
    open fun SetPosition(InPosition: Vector2D)
    open fun SetOffsets(InOffset: Margin)
    open fun SetMinimum(InMinimumAnchors: Vector2D)
    open fun SetMaximum(InMaximumAnchors: Vector2D)
    open fun SetLayout(InLayoutData: AnchorData)
    open fun SetAutoSize(InbAutoSize: Boolean)
    open fun SetAnchors(InAnchors: Anchors)
    open fun SetAlignment(InAlignment: Vector2D)
    open fun GetZOrder(): Number
    open fun GetSize(): Vector2D
    open fun GetPosition(): Vector2D
    open fun GetOffsets(): Margin
    open fun GetLayout(): AnchorData
    open fun GetAutoSize(): Boolean
    open fun GetAnchors(): Anchors
    open fun GetAlignment(): Vector2D

    companion object {
        fun Load(ResourceName: String): CanvasPanelSlot
        fun Find(Outer: UObject, ResourceName: String): CanvasPanelSlot
        fun GetDefaultObject(): CanvasPanelSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CanvasPanelSlot
        fun C(Other: UObject): CanvasPanelSlot
        fun C(Other: Any): CanvasPanelSlot
    }
}

external open class GridSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open var Row: Number
    open var RowSpan: Number
    open var Column: Number
    open var ColumnSpan: Number
    open var Layer: Number
    open var Nudge: Vector2D
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetRowSpan(InRowSpan: Number)
    open fun SetRow(InRow: Number)
    open fun SetPadding(InPadding: Margin)
    open fun SetNudge(InNudge: Vector2D)
    open fun SetLayer(InLayer: Number)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)
    open fun SetColumnSpan(InColumnSpan: Number)
    open fun SetColumn(InColumn: Number)

    companion object {
        fun Load(ResourceName: String): GridSlot
        fun Find(Outer: UObject, ResourceName: String): GridSlot
        fun GetDefaultObject(): GridSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GridSlot
        fun C(Other: UObject): GridSlot
        fun C(Other: Any): GridSlot
    }
}

external object ESlateSizeRule {
    var Automatic: String /* "Automatic" */
    var Fill: String /* "Fill" */
    var ESlateSizeRule_MAX: String /* "ESlateSizeRule_MAX" */
}

external open class SlateChildSize {
    open var Value: Number
    open var SizeRule: String /* "Automatic" | "Fill" | "ESlateSizeRule_MAX" */
    open fun clone(): SlateChildSize

    companion object {
        fun C(Other: UObject): SlateChildSize
        fun C(Other: Any): SlateChildSize
    }
}

external open class HorizontalBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var Size: SlateChildSize
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetSize(InSize: SlateChildSize)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): HorizontalBoxSlot
        fun Find(Outer: UObject, ResourceName: String): HorizontalBoxSlot
        fun GetDefaultObject(): HorizontalBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HorizontalBoxSlot
        fun C(Other: UObject): HorizontalBoxSlot
        fun C(Other: Any): HorizontalBoxSlot
    }
}

external open class OverlaySlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): OverlaySlot
        fun Find(Outer: UObject, ResourceName: String): OverlaySlot
        fun GetDefaultObject(): OverlaySlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): OverlaySlot
        fun C(Other: UObject): OverlaySlot
        fun C(Other: Any): OverlaySlot
    }
}

external open class ScrollBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): ScrollBoxSlot
        fun Find(Outer: UObject, ResourceName: String): ScrollBoxSlot
        fun GetDefaultObject(): ScrollBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScrollBoxSlot
        fun C(Other: UObject): ScrollBoxSlot
        fun C(Other: Any): ScrollBoxSlot
    }
}

external open class UniformGridSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open var Row: Number
    open var Column: Number
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetRow(InRow: Number)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)
    open fun SetColumn(InColumn: Number)

    companion object {
        fun Load(ResourceName: String): UniformGridSlot
        fun Find(Outer: UObject, ResourceName: String): UniformGridSlot
        fun GetDefaultObject(): UniformGridSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UniformGridSlot
        fun C(Other: UObject): UniformGridSlot
        fun C(Other: Any): UniformGridSlot
    }
}

external open class VerticalBoxSlot : PanelSlot {
    constructor()
    constructor(Outer: UObject)
    open var Padding: Margin
    open var Size: SlateChildSize
    open var HorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */
    open var VerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */
    open fun SetVerticalAlignment(InVerticalAlignment: String /* "VAlign_Fill" | "VAlign_Top" | "VAlign_Center" | "VAlign_Bottom" | "VAlign_MAX" */)
    open fun SetSize(InSize: SlateChildSize)
    open fun SetPadding(InPadding: Margin)
    open fun SetHorizontalAlignment(InHorizontalAlignment: String /* "HAlign_Fill" | "HAlign_Left" | "HAlign_Center" | "HAlign_Right" | "HAlign_MAX" */)

    companion object {
        fun Load(ResourceName: String): VerticalBoxSlot
        fun Find(Outer: UObject, ResourceName: String): VerticalBoxSlot
        fun GetDefaultObject(): VerticalBoxSlot
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VerticalBoxSlot
        fun C(Other: UObject): VerticalBoxSlot
        fun C(Other: Any): VerticalBoxSlot
    }
}

external object EWindowTitleBarMode {
    var Overlay: String /* "Overlay" */
    var VerticalBox: String /* "VerticalBox" */
    var EWindowTitleBarMode_MAX: String /* "EWindowTitleBarMode_MAX" */
}

external open class Widget : Visual {
    constructor()
    constructor(Outer: UObject)
    open var Slot: PanelSlot
    open var bIsEnabledDelegate: UnrealEngineDelegate<() -> Boolean>
    open var ToolTipText: String
    open var ToolTipTextDelegate: UnrealEngineDelegate<() -> String>
    open var ToolTipWidget: Widget
    open var ToolTipWidgetDelegate: UnrealEngineDelegate<() -> Widget>
    open var VisibilityDelegate: UnrealEngineDelegate<() -> String>
    open var RenderTransform: WidgetTransform
    open var RenderTransformPivot: Vector2D
    open var bIsVariable: Boolean
    open var bCreatedByConstructionScript: Boolean
    open var bIsEnabled: Boolean
    open var bOverride_Cursor: Boolean
    open var bOverrideAccessibleDefaults: Boolean
    open var bCanChildrenBeAccessible: Boolean
    open var AccessibleBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleSummaryBehavior: String /* "NotAccessible" | "Auto" | "Summary" | "Custom" | "ToolTip" | "ESlateAccessibleBehavior_MAX" */
    open var AccessibleText: String
    open var AccessibleTextDelegate: UnrealEngineDelegate<() -> String>
    open var AccessibleSummaryText: String
    open var AccessibleSummaryTextDelegate: UnrealEngineDelegate<() -> String>
    open var AccessibleWidgetData: SlateAccessibleWidgetData
    open var bIsVolatile: Boolean
    open var bHiddenInDesigner: Boolean
    open var bExpandedInDesigner: Boolean
    open var bLockedInDesigner: Boolean
    open var Cursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */
    open var Clipping: String /* "Inherit" | "ClipToBounds" | "ClipToBoundsWithoutIntersecting" | "ClipToBoundsAlways" | "OnDemand" | "EWidgetClipping_MAX" */
    open var Visibility: String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */
    open var RenderOpacity: Number
    open var Navigation: WidgetNavigation
    open var FlowDirectionPreference: String /* "Inherit" | "Culture" | "LeftToRight" | "RightToLeft" | "EFlowDirectionPreference_MAX" */
    open var NativeBindings: Array<PropertyBinding>
    open var DesignerFlags: String /* "None" | "Designing" | "ShowOutline" | "ExecutePreConstruct" | "EWidgetDesignFlags_MAX" */
    open var DisplayLabel: String
    open var CategoryName: String
    open fun SetVisibility(InVisibility: String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */)
    open fun SetUserFocus(PlayerController: PlayerController)
    open fun SetToolTipText(InToolTipText: String)
    open fun SetToolTip(Widget: Widget)
    open fun SetRenderTranslation(Translation: Vector2D)
    open fun SetRenderTransformPivot(Pivot: Vector2D)
    open fun SetRenderTransformAngle(Angle: Number)
    open fun SetRenderTransform(InTransform: WidgetTransform)
    open fun SetRenderShear(Shear: Vector2D)
    open fun SetRenderScale(Scale: Vector2D)
    open fun SetRenderOpacity(InOpacity: Number)
    open fun SetNavigationRule(Direction: String /* "Left" | "Right" | "Up" | "Down" | "Next" | "Previous" | "Num" | "Invalid" | "EUINavigation_MAX" */, Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */, WidgetToFocus: String)
    open fun SetKeyboardFocus()
    open fun SetIsEnabled(bInIsEnabled: Boolean)
    open fun SetCursor(InCursor: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */)
    open fun SetClipping(InClipping: String /* "Inherit" | "ClipToBounds" | "ClipToBoundsWithoutIntersecting" | "ClipToBoundsAlways" | "OnDemand" | "EWidgetClipping_MAX" */)
    open fun SetAllNavigationRules(Rule: String /* "Escape" | "Explicit" | "Wrap" | "Stop" | "Custom" | "CustomBoundary" | "Invalid" | "EUINavigationRule_MAX" */, WidgetToFocus: String)
    open fun ResetCursor()
    open fun RemoveFromParent()
    open fun IsVisible(): Boolean
    open fun IsHovered(): Boolean
    open fun InvalidateLayoutAndVolatility()
    open fun HasUserFocusedDescendants(PlayerController: PlayerController): Boolean
    open fun HasUserFocus(PlayerController: PlayerController): Boolean
    open fun HasMouseCaptureByUser(UserIndex: Number, PointerIndex: Number): Boolean
    open fun HasMouseCapture(): Boolean
    open fun HasKeyboardFocus(): Boolean
    open fun HasFocusedDescendants(): Boolean
    open fun HasAnyUserFocus(): Boolean
    open fun GetVisibility(): String /* "Visible" | "Collapsed" | "Hidden" | "HitTestInvisible" | "SelfHitTestInvisible" | "ESlateVisibility_MAX" */
    open fun GetRenderTransformAngle(): Number
    open fun GetRenderOpacity(): Number
    open fun GetParent(): PanelWidget
    open fun GetOwningPlayer(): PlayerController
    open fun GetOwningLocalPlayer(): LocalPlayer
    open fun GetIsEnabled(): Boolean
    open fun GetGameInstance(): GameInstance
    open fun GetDesiredSize(): Vector2D
    open fun GetClipping(): String /* "Inherit" | "ClipToBounds" | "ClipToBoundsWithoutIntersecting" | "ClipToBoundsAlways" | "OnDemand" | "EWidgetClipping_MAX" */
    open fun GetCachedGeometry(): Geometry
    open fun ForceVolatile(bForce: Boolean)
    open fun ForceLayoutPrepass()
    open fun OpenPopupWindow(PopupDesiredSize: Vector2D, HeadingText: String)
    open fun TakeWidget(): JavascriptSlateWidget
    open fun SlotAsBorderSlot(): BorderSlot
    open fun SlotAsCanvasSlot(): CanvasPanelSlot
    open fun SlotAsGridSlot(): GridSlot
    open fun SlotAsHorizontalBoxSlot(): HorizontalBoxSlot
    open fun SlotAsOverlaySlot(): OverlaySlot
    open fun SlotAsScrollBoxSlot(): ScrollBoxSlot
    open fun SlotAsUniformGridSlot(): UniformGridSlot
    open fun SlotAsVerticalBoxSlot(): VerticalBoxSlot
    open fun SetWindowTitleBarState(Mode: String /* "Overlay" | "VerticalBox" | "EWindowTitleBarMode_MAX" */, bTitleBarDragEnabled: Boolean, bWindowButtonsVisible: Boolean, bTitleBarVisible: Boolean)

    companion object {
        fun Load(ResourceName: String): Widget
        fun Find(Outer: UObject, ResourceName: String): Widget
        fun GetDefaultObject(): Widget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Widget
        fun C(Other: UObject): Widget
        fun C(Other: Any): Widget
        fun OpenPopupWindow(Widget: Widget, PopupDesiredSize: Vector2D, HeadingText: String)
        fun TakeWidget(Widget: Widget): JavascriptSlateWidget
        fun SlotAsBorderSlot(Widget: Widget): BorderSlot
        fun SlotAsCanvasSlot(Widget: Widget): CanvasPanelSlot
        fun SlotAsGridSlot(Widget: Widget): GridSlot
        fun SlotAsHorizontalBoxSlot(Widget: Widget): HorizontalBoxSlot
        fun SlotAsOverlaySlot(Widget: Widget): OverlaySlot
        fun SlotAsScrollBoxSlot(Widget: Widget): ScrollBoxSlot
        fun SlotAsUniformGridSlot(Widget: Widget): UniformGridSlot
        fun SlotAsVerticalBoxSlot(Widget: Widget): VerticalBoxSlot
        fun SetWindowTitleBarState(TitleBarContent: Widget, Mode: String /* "Overlay" | "VerticalBox" | "EWindowTitleBarMode_MAX" */, bTitleBarDragEnabled: Boolean, bWindowButtonsVisible: Boolean, bTitleBarVisible: Boolean)
    }
}

external object EDragPivot {
    var MouseDown: String /* "MouseDown" */
    var TopLeft: String /* "TopLeft" */
    var TopCenter: String /* "TopCenter" */
    var TopRight: String /* "TopRight" */
    var CenterLeft: String /* "CenterLeft" */
    var CenterCenter: String /* "CenterCenter" */
    var CenterRight: String /* "CenterRight" */
    var BottomLeft: String /* "BottomLeft" */
    var BottomCenter: String /* "BottomCenter" */
    var BottomRight: String /* "BottomRight" */
    var EDragPivot_MAX: String /* "EDragPivot_MAX" */
}

external open class DragDropOperation : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Tag: String
    open var Payload: UObject
    open var DefaultDragVisual: Widget
    open var Pivot: String /* "MouseDown" | "TopLeft" | "TopCenter" | "TopRight" | "CenterLeft" | "CenterCenter" | "CenterRight" | "BottomLeft" | "BottomCenter" | "BottomRight" | "EDragPivot_MAX" */
    open var Offset: Vector2D
    open var OnDrop: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>
    open var OnDragCancelled: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>
    open var OnDragged: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) -> Unit>
    open fun Drop(UPointerEvent: UPointerEvent)
    open fun Dragged(UPointerEvent: UPointerEvent)
    open fun DragCancelled(UPointerEvent: UPointerEvent)

    companion object {
        fun Load(ResourceName: String): DragDropOperation
        fun Find(Outer: UObject, ResourceName: String): DragDropOperation
        fun GetDefaultObject(): DragDropOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DragDropOperation
        fun C(Other: UObject): DragDropOperation
        fun C(Other: Any): DragDropOperation
    }
}

external interface `T$355` {
    var Results: Array<UnrealEngineClass>
}

external interface `T$356` {
    var Results: Array<UObject>
}

external interface `T$357` {
    var OutUserData: Array<DatasmithAssetUserData>
}

external interface `T$358` {
    var Results: Array<UnrealEngineClass>
}

external interface `T$359` {
    var Results: Array<UObject>
}

external interface `T$360` {
    var OutUserData: Array<DatasmithAssetUserData>
}

external open class Class : Struct {
    constructor()
    constructor(Outer: UObject)
    open fun AddDynamicBinding(BindingObject: DynamicBlueprintBinding)
    open fun GetClassPathName(): String
    open fun GetDerivedClasses(Results: Array<UnrealEngineClass> = definedExternally, bRecursive: Boolean = definedExternally): `T$355`
    open fun GetDynamicBinding(BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding
    open fun GetObjectsOfClass(Results: Array<UObject> = definedExternally, bIncludeDerivedClasses: Boolean = definedExternally, ExcludeFlags: Number = definedExternally, ExclusionInternalFlags: Number = definedExternally): `T$356`
    open fun GetSuperClasses(): Array<UnrealEngineClass>
    open fun IsGeneratedByBlueprint(): Boolean
    open fun GetAllDatasmithUserData(OutUserData: Array<DatasmithAssetUserData> = definedExternally): `T$357`
    open fun GetEngineSubsystem(): EngineSubsystem
    open fun Conv_ClassToSoftClassReference(): Class
    open fun Conv_SoftClassReferenceToClass(): UnrealEngineClass
    open fun Conv_SoftClassReferenceToString(): String
    open fun EqualEqual_SoftClassReference(B: Class): Boolean
    open fun GetClassDisplayName(): String
    open fun GetPrimaryAssetIdFromClass(): PrimaryAssetId
    open fun GetPrimaryAssetIdFromSoftClassReference(): PrimaryAssetId
    open fun IsValidClass(): Boolean
    open fun IsValidSoftClassReference(): Boolean
    open fun LoadClassAsset_Blocking(): UnrealEngineClass
    open fun NotEqual_SoftClassReference(B: Class): Boolean
    open fun ClassIsChildOf(ParentClass: UnrealEngineClass): Boolean
    open fun EqualEqual_ClassClass(B: UnrealEngineClass): Boolean
    open fun NotEqual_ClassClass(B: UnrealEngineClass): Boolean
    open fun SelectClass(B: UnrealEngineClass, bSelectA: Boolean): UnrealEngineClass
    open fun CreateSaveGameObject(): SaveGame
    open fun SpawnObject(Outer: UObject): UObject
    open fun GetEditorSubsystem(): EditorSubsystem
    open fun CreateDragDropOperation(): DragDropOperation

    companion object {
        fun Load(ResourceName: String): Class
        fun Find(Outer: UObject, ResourceName: String): Class
        fun GetDefaultObject(): Class
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Class
        fun C(Other: UObject): Class
        fun C(Other: Any): Class
        fun AddDynamicBinding(Outer: UnrealEngineClass, BindingObject: DynamicBlueprintBinding)
        fun GetClassPathName(Class: UnrealEngineClass): String
        fun GetDerivedClasses(ClassToLookFor: UnrealEngineClass, Results: Array<UnrealEngineClass> = definedExternally, bRecursive: Boolean = definedExternally): `T$358`
        fun GetDynamicBinding(Outer: UnrealEngineClass, BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding
        fun GetObjectsOfClass(ClassToLookFor: UnrealEngineClass, Results: Array<UObject> = definedExternally, bIncludeDerivedClasses: Boolean = definedExternally, ExcludeFlags: Number = definedExternally, ExclusionInternalFlags: Number = definedExternally): `T$359`
        fun GetSuperClasses(InClass: UnrealEngineClass): Array<UnrealEngineClass>
        fun IsGeneratedByBlueprint(InClass: UnrealEngineClass): Boolean
        fun GetAllDatasmithUserData(ObjectClass: UnrealEngineClass, OutUserData: Array<DatasmithAssetUserData> = definedExternally): `T$360`
        fun GetEngineSubsystem(Class: UnrealEngineClass): EngineSubsystem
        fun Conv_ClassToSoftClassReference(Class: UnrealEngineClass): Class
        fun Conv_SoftClassReferenceToClass(softclass: Class): UnrealEngineClass
        fun Conv_SoftClassReferenceToString(SoftClassReference: Class): String
        fun EqualEqual_SoftClassReference(A: Class, B: Class): Boolean
        fun GetClassDisplayName(Class: UnrealEngineClass): String
        fun GetPrimaryAssetIdFromClass(Class: UnrealEngineClass): PrimaryAssetId
        fun GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: Class): PrimaryAssetId
        fun IsValidClass(Class: UnrealEngineClass): Boolean
        fun IsValidSoftClassReference(SoftClassReference: Class): Boolean
        fun LoadClassAsset_Blocking(AssetClass: Class): UnrealEngineClass
        fun NotEqual_SoftClassReference(A: Class, B: Class): Boolean
        fun ClassIsChildOf(TestClass: UnrealEngineClass, ParentClass: UnrealEngineClass): Boolean
        fun EqualEqual_ClassClass(A: UnrealEngineClass, B: UnrealEngineClass): Boolean
        fun NotEqual_ClassClass(A: UnrealEngineClass, B: UnrealEngineClass): Boolean
        fun SelectClass(A: UnrealEngineClass, B: UnrealEngineClass, bSelectA: Boolean): UnrealEngineClass
        fun CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame
        fun SpawnObject(ObjectClass: UnrealEngineClass, Outer: UObject): UObject
        fun GetEditorSubsystem(Class: UnrealEngineClass): EditorSubsystem
        fun CreateDragDropOperation(OperationClass: UnrealEngineClass): DragDropOperation
    }
}

external open class SoftClassPath : SoftObjectPath {
    override fun clone(): SoftClassPath
    open fun BreakSoftClassPath(PathString: String = definedExternally): `T$251`
    open fun Conv_SoftClassPathToSoftClassRef(): Class

    companion object {
        fun C(Other: UObject): SoftClassPath
        fun C(Other: Any): SoftClassPath
        fun BreakSoftClassPath(InSoftClassPath: SoftClassPath, PathString: String = definedExternally): `T$251`
        fun Conv_SoftClassPathToSoftClassRef(SoftClassPath: SoftClassPath): Class
        fun MakeSoftClassPath(PathString: String): SoftClassPath
    }
}

external open class AnimNotifyEventReference {
    open var NotifySource: UObject
    open fun clone(): AnimNotifyEventReference

    companion object {
        fun C(Other: UObject): AnimNotifyEventReference
        fun C(Other: Any): AnimNotifyEventReference
    }
}

external open class AnimNotifyQueue {
    open var AnimNotifies: Array<AnimNotifyEventReference>
    open var UnfilteredMontageAnimNotifies: Any
    open fun clone(): AnimNotifyQueue

    companion object {
        fun C(Other: UObject): AnimNotifyQueue
        fun C(Other: Any): AnimNotifyQueue
    }
}

external open class PoseSnapshot {
    open var LocalTransforms: Array<Transform>
    open var BoneNames: Array<String>
    open var SkeletalMeshName: String
    open var SnapshotName: String
    open var bIsValid: Boolean
    open fun clone(): PoseSnapshot

    companion object {
        fun C(Other: UObject): PoseSnapshot
        fun C(Other: Any): PoseSnapshot
    }
}

external object ETeleportType {
    var None: String /* "None" */
    var TeleportPhysics: String /* "TeleportPhysics" */
    var ResetPhysics: String /* "ResetPhysics" */
    var ETeleportType_MAX: String /* "ETeleportType_MAX" */
}

external object EMontagePlayReturnType {
    var MontageLength: String /* "MontageLength" */
    var Duration: String /* "Duration" */
    var EMontagePlayReturnType_MAX: String /* "EMontagePlayReturnType_MAX" */
}

external open class MarkerSyncAnimPosition {
    open var PreviousMarkerName: String
    open var NextMarkerName: String
    open var PositionBetweenMarkers: Number
    open fun clone(): MarkerSyncAnimPosition

    companion object {
        fun C(Other: UObject): MarkerSyncAnimPosition
        fun C(Other: Any): MarkerSyncAnimPosition
    }
}

external object EAnimCurveType {
    var AttributeCurve: String /* "AttributeCurve" */
    var MaterialCurve: String /* "MaterialCurve" */
    var MorphTargetCurve: String /* "MorphTargetCurve" */
    var MaxAnimCurveType: String /* "MaxAnimCurveType" */
    var EAnimCurveType_MAX: String /* "EAnimCurveType_MAX" */
}

external interface `T$361` {
    var Snapshot: PoseSnapshot
}

external interface `T$362` {
    var OutMarkerTime: Number
    var `$`: Boolean
}

external interface `T$363` {
    var OutSubInstances: Array<AnimInstance>
}

external interface `T$364` {
    var OutNames: Array<String>
}

external interface `T$365` {
    var OutNames: Array<String>
}

external open class AnimInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CurrentSkeleton: Skeleton
    open var RootMotionMode: String /* "NoRootMotionExtraction" | "IgnoreRootMotion" | "RootMotionFromEverything" | "RootMotionFromMontagesOnly" | "ERootMotionMode_MAX" */
    open var DeltaTime: Number
    open var bRunUpdatesInWorkerThreads: Boolean
    open var bCanUseParallelUpdateAnimation: Boolean
    open var bWarnAboutBlueprintUsage: Boolean
    open var bUseMultiThreadedAnimationUpdate: Boolean
    open var bUsingCopyPoseFromMesh: Boolean
    open var bQueueMontageEvents: Boolean
    open var OnMontageBlendingOut: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: Boolean) -> Unit>
    open var OnMontageStarted: UnrealEngineMulticastDelegate<(Montage: AnimMontage) -> Unit>
    open var OnMontageEnded: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: Boolean) -> Unit>
    open var OnAllMontageInstancesEnded: UnrealEngineMulticastDelegate<() -> Unit>
    open var PostCompileValidationClassName: SoftClassPath
    open var NotifyQueue: AnimNotifyQueue
    open var ActiveAnimNotifyState: Array<AnimNotifyEvent>
    open fun UnlockAIResources(bUnlockMovement: Boolean, UnlockAILogic: Boolean)
    open fun TryGetPawnOwner(): Pawn
    open fun StopSlotAnimation(InBlendOutTime: Number, SlotNodeName: String)
    open fun SnapshotPose(Snapshot: PoseSnapshot = definedExternally): `T$361`
    open fun SetSubInstanceClassByTag(InTag: String, InClass: UnrealEngineClass)
    open fun SetRootMotionMode(Value: String /* "NoRootMotionExtraction" | "IgnoreRootMotion" | "RootMotionFromEverything" | "RootMotionFromMontagesOnly" | "ERootMotionMode_MAX" */)
    open fun SetMorphTarget(MorphTargetName: String, Value: Number)
    open fun SetLayerOverlay(InClass: UnrealEngineClass)
    open fun SavePoseSnapshot(SnapshotName: String)
    open fun ResetDynamics(InTeleportType: String /* "None" | "TeleportPhysics" | "ResetPhysics" | "ETeleportType_MAX" */)
    open fun PlaySlotAnimationAsDynamicMontage(Asset: AnimSequenceBase, SlotNodeName: String, BlendInTime: Number, BlendOutTime: Number, InPlayRate: Number, LoopCount: Number, BlendOutTriggerTime: Number, InTimeToStartMontageAt: Number): AnimMontage
    open fun PlaySlotAnimation(Asset: AnimSequenceBase, SlotNodeName: String, BlendInTime: Number, BlendOutTime: Number, InPlayRate: Number, LoopCount: Number): Number
    open fun Montage_Stop(InBlendOutTime: Number, Montage: AnimMontage)
    open fun Montage_SetPosition(Montage: AnimMontage, NewPosition: Number)
    open fun Montage_SetPlayRate(Montage: AnimMontage, NewPlayRate: Number)
    open fun Montage_SetNextSection(SectionNameToChange: String, NextSection: String, Montage: AnimMontage)
    open fun Montage_Resume(Montage: AnimMontage)
    open fun Montage_Play(MontageToPlay: AnimMontage, InPlayRate: Number, ReturnValueType: String /* "MontageLength" | "Duration" | "EMontagePlayReturnType_MAX" */, InTimeToStartMontageAt: Number, bStopAllMontages: Boolean): Number
    open fun Montage_Pause(Montage: AnimMontage)
    open fun Montage_JumpToSectionsEnd(SectionName: String, Montage: AnimMontage)
    open fun Montage_JumpToSection(SectionName: String, Montage: AnimMontage)
    open fun Montage_IsPlaying(Montage: AnimMontage): Boolean
    open fun Montage_IsActive(Montage: AnimMontage): Boolean
    open fun Montage_GetPosition(Montage: AnimMontage): Number
    open fun Montage_GetPlayRate(Montage: AnimMontage): Number
    open fun Montage_GetIsStopped(Montage: AnimMontage): Boolean
    open fun Montage_GetCurrentSection(Montage: AnimMontage): String
    open fun Montage_GetBlendTime(Montage: AnimMontage): Number
    open fun LockAIResources(bLockMovement: Boolean, LockAILogic: Boolean)
    open fun IsSyncGroupBetweenMarkers(InSyncGroupName: String, PreviousMarker: String, NextMarker: String, bRespectMarkerOrder: Boolean): Boolean
    open fun IsPlayingSlotAnimation(Asset: AnimSequenceBase, SlotNodeName: String): Boolean
    open fun IsAnyMontagePlaying(): Boolean
    open fun HasMarkerBeenHitThisFrame(SyncGroup: String, MarkerName: String): Boolean
    open fun GetTimeToClosestMarker(SyncGroup: String, MarkerName: String, OutMarkerTime: Number = definedExternally): `T$362`
    open fun GetSyncGroupPosition(InSyncGroupName: String): MarkerSyncAnimPosition
    open fun GetSubInstancesByTag(InTag: String, OutSubInstances: Array<AnimInstance> = definedExternally): `T$363`
    open fun GetSubInstanceByTag(InTag: String): AnimInstance
    open fun GetRelevantAnimTimeRemainingFraction(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimTimeRemaining(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimTimeFraction(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimTime(MachineIndex: Number, StateIndex: Number): Number
    open fun GetRelevantAnimLength(MachineIndex: Number, StateIndex: Number): Number
    open fun GetOwningComponent(): SkeletalMeshComponent
    open fun GetOwningActor(): Actor
    open fun GetLayerSubInstanceByGroup(InGroup: String): AnimInstance
    open fun GetInstanceTransitionTimeElapsedFraction(MachineIndex: Number, TransitionIndex: Number): Number
    open fun GetInstanceTransitionTimeElapsed(MachineIndex: Number, TransitionIndex: Number): Number
    open fun GetInstanceTransitionCrossfadeDuration(MachineIndex: Number, TransitionIndex: Number): Number
    open fun GetInstanceStateWeight(MachineIndex: Number, StateIndex: Number): Number
    open fun GetInstanceMachineWeight(MachineIndex: Number): Number
    open fun GetInstanceCurrentStateElapsedTime(MachineIndex: Number): Number
    open fun GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex: Number): Number
    open fun GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex: Number): Number
    open fun GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex: Number): Number
    open fun GetInstanceAssetPlayerTime(AssetPlayerIndex: Number): Number
    open fun GetInstanceAssetPlayerLength(AssetPlayerIndex: Number): Number
    open fun GetCurveValue(CurveName: String): Number
    open fun GetCurrentStateName(MachineIndex: Number): String
    open fun GetCurrentActiveMontage(): AnimMontage
    open fun GetAllCurveNames(OutNames: Array<String> = definedExternally): `T$364`
    open fun GetActiveCurveNames(CurveType: String /* "AttributeCurve" | "MaterialCurve" | "MorphTargetCurve" | "MaxAnimCurveType" | "EAnimCurveType_MAX" */, OutNames: Array<String> = definedExternally): `T$365`
    open fun ClearMorphTargets()
    open fun CalculateDirection(Velocity: Vector, BaseRotation: Rotator): Number
    open fun BlueprintUpdateAnimation(DeltaTimeX: Number)
    open fun BlueprintPostEvaluateAnimation()
    open fun BlueprintInitializeAnimation()
    open fun BlueprintBeginPlay()
    open fun LockAIResourcesWithAnimation(bLockMovement: Boolean, LockAILogic: Boolean)
    open fun UnlockAIResourcesWithAnimation(bUnlockMovement: Boolean, UnlockAILogic: Boolean)

    companion object {
        fun Load(ResourceName: String): AnimInstance
        fun Find(Outer: UObject, ResourceName: String): AnimInstance
        fun GetDefaultObject(): AnimInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimInstance
        fun C(Other: UObject): AnimInstance
        fun C(Other: Any): AnimInstance
        fun LockAIResourcesWithAnimation(AnimInstance: AnimInstance, bLockMovement: Boolean, LockAILogic: Boolean)
        fun UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance, bUnlockMovement: Boolean, UnlockAILogic: Boolean)
    }
}

external open class ClothingAssetBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ImportedFilePath: String
    open var AssetGuid: Guid

    companion object {
        fun Load(ResourceName: String): ClothingAssetBase
        fun Find(Outer: UObject, ResourceName: String): ClothingAssetBase
        fun GetDefaultObject(): ClothingAssetBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingAssetBase
        fun C(Other: UObject): ClothingAssetBase
        fun C(Other: Any): ClothingAssetBase
    }
}

external open class SkeletalMeshSamplingRegionMaterialFilter {
    open var MaterialName: String
    open fun clone(): SkeletalMeshSamplingRegionMaterialFilter

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegionMaterialFilter
        fun C(Other: Any): SkeletalMeshSamplingRegionMaterialFilter
    }
}

external open class SkeletalMeshSamplingRegionBoneFilter {
    open var BoneName: String
    open var bIncludeOrExclude: Boolean
    open var bApplyToChildren: Boolean
    open fun clone(): SkeletalMeshSamplingRegionBoneFilter

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegionBoneFilter
        fun C(Other: Any): SkeletalMeshSamplingRegionBoneFilter
    }
}

external open class SkeletalMeshSamplingRegion {
    open var Name: String
    open var LODIndex: Number
    open var bSupportUniformlyDistributedSampling: Boolean
    open var MaterialFilters: Array<SkeletalMeshSamplingRegionMaterialFilter>
    open var BoneFilters: Array<SkeletalMeshSamplingRegionBoneFilter>
    open fun clone(): SkeletalMeshSamplingRegion

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegion
        fun C(Other: Any): SkeletalMeshSamplingRegion
    }
}

external open class SkeletalMeshSamplingLODBuiltData {
    open fun clone(): SkeletalMeshSamplingLODBuiltData

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingLODBuiltData
        fun C(Other: Any): SkeletalMeshSamplingLODBuiltData
    }
}

external open class SkeletalMeshSamplingRegionBuiltData {
    open fun clone(): SkeletalMeshSamplingRegionBuiltData

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingRegionBuiltData
        fun C(Other: Any): SkeletalMeshSamplingRegionBuiltData
    }
}

external open class SkeletalMeshSamplingBuiltData {
    open var WholeMeshBuiltData: Array<SkeletalMeshSamplingLODBuiltData>
    open var RegionBuiltData: Array<SkeletalMeshSamplingRegionBuiltData>
    open fun clone(): SkeletalMeshSamplingBuiltData

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingBuiltData
        fun C(Other: Any): SkeletalMeshSamplingBuiltData
    }
}

external open class SkeletalMeshSamplingInfo {
    open var Regions: Array<SkeletalMeshSamplingRegion>
    open var BuiltData: SkeletalMeshSamplingBuiltData
    open fun clone(): SkeletalMeshSamplingInfo

    companion object {
        fun C(Other: UObject): SkeletalMeshSamplingInfo
        fun C(Other: Any): SkeletalMeshSamplingInfo
    }
}

external open class SkinWeightProfileInfo {
    open var Name: String
    open var DefaultProfile: PerPlatformBool
    open var DefaultProfileFromLODIndex: PerPlatformInt
    open var PerLODSourceFiles: Any
    open fun clone(): SkinWeightProfileInfo

    companion object {
        fun C(Other: UObject): SkinWeightProfileInfo
        fun C(Other: Any): SkinWeightProfileInfo
    }
}

external open class BlueprintCore : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SkeletonGeneratedClass: UnrealEngineClass
    open var GeneratedClass: UnrealEngineClass
    open var bLegacyNeedToPurgeSkelRefs: Boolean
    open var BlueprintGuid: Guid

    companion object {
        fun Load(ResourceName: String): BlueprintCore
        fun Find(Outer: UObject, ResourceName: String): BlueprintCore
        fun GetDefaultObject(): BlueprintCore
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlueprintCore
        fun C(Other: UObject): BlueprintCore
        fun C(Other: Any): BlueprintCore
    }
}

external object EBlueprintNativizationFlag {
    var Disabled: String /* "Disabled" */
    var Dependency: String /* "Dependency" */
    var ExplicitlyEnabled: String /* "ExplicitlyEnabled" */
    var EBlueprintNativizationFlag_MAX: String /* "EBlueprintNativizationFlag_MAX" */
}

external object EBlueprintCompileMode {
    var Default: String /* "Default" */
    var Development: String /* "Development" */
    var FinalRelease: String /* "FinalRelease" */
    var EBlueprintCompileMode_MAX: String /* "EBlueprintCompileMode_MAX" */
}

external open class BlueprintComponentChangedPropertyInfo {
    open var PropertyName: String
    open var ArrayIndex: Number
    open var PropertyScope: Struct
    open fun clone(): BlueprintComponentChangedPropertyInfo

    companion object {
        fun C(Other: UObject): BlueprintComponentChangedPropertyInfo
        fun C(Other: Any): BlueprintComponentChangedPropertyInfo
    }
}

external open class BlueprintCookedComponentInstancingData {
    open var bHasValidCookedData: Boolean
    open var ChangedPropertyList: Array<BlueprintComponentChangedPropertyInfo>
    open fun clone(): BlueprintCookedComponentInstancingData

    companion object {
        fun C(Other: UObject): BlueprintCookedComponentInstancingData
        fun C(Other: Any): BlueprintCookedComponentInstancingData
    }
}

external open class BPVariableMetaDataEntry {
    open var DataKey: String
    open var DataValue: String
    open fun clone(): BPVariableMetaDataEntry

    companion object {
        fun C(Other: UObject): BPVariableMetaDataEntry
        fun C(Other: Any): BPVariableMetaDataEntry
    }
}

external open class SCS_Node : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ComponentClass: UnrealEngineClass
    open var ComponentTemplate: ActorComponent
    open var CookedComponentInstancingData: BlueprintCookedComponentInstancingData
    open var CategoryName: String
    open var AttachToName: String
    open var ParentComponentOrVariableName: String
    open var ParentComponentOwnerClassName: String
    open var bIsParentComponentNative: Boolean
    open var ChildNodes: Array<SCS_Node>
    open var MetaDataArray: Array<BPVariableMetaDataEntry>
    open var VariableGuid: Guid
    open var bIsNative: Boolean
    open var NativeComponentName: String
    open var bVariableNameAutoGenerated: Boolean
    open var InternalVariableName: String

    companion object {
        fun Load(ResourceName: String): SCS_Node
        fun Find(Outer: UObject, ResourceName: String): SCS_Node
        fun GetDefaultObject(): SCS_Node
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SCS_Node
        fun C(Other: UObject): SCS_Node
        fun C(Other: Any): SCS_Node
    }
}

external open class SimpleConstructionScript : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RootNodes: Array<SCS_Node>
    open var AllNodes: Array<SCS_Node>
    open var DefaultSceneRootNode: SCS_Node
    open var RootNode: SCS_Node
    open var ActorComponentNodes: Array<SCS_Node>

    companion object {
        fun Load(ResourceName: String): SimpleConstructionScript
        fun Find(Outer: UObject, ResourceName: String): SimpleConstructionScript
        fun GetDefaultObject(): SimpleConstructionScript
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SimpleConstructionScript
        fun C(Other: UObject): SimpleConstructionScript
        fun C(Other: Any): SimpleConstructionScript
    }
}

external open class EdGraphSchema : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun SetNodeMetaData(UNode: EdGraphNode, KeyValue: String): Boolean
    open fun TryConnection(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin)

    companion object {
        fun Load(ResourceName: String): EdGraphSchema
        fun Find(Outer: UObject, ResourceName: String): EdGraphSchema
        fun GetDefaultObject(): EdGraphSchema
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraphSchema
        fun C(Other: UObject): EdGraphSchema
        fun C(Other: Any): EdGraphSchema
        fun SetNodeMetaData(Schema: EdGraphSchema, UNode: EdGraphNode, KeyValue: String): Boolean
        fun TryConnection(Schema: EdGraphSchema, A: JavascriptEdGraphPin, B: JavascriptEdGraphPin)
    }
}

external open class EdGraph : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Schema: UnrealEngineClass
    open var Nodes: Array<EdGraphNode>
    open var bEditable: Boolean
    open var bAllowDeletion: Boolean
    open var bAllowRenaming: Boolean
    open var SubGraphs: Array<EdGraph>
    open var GraphGuid: Guid
    open var InterfaceGuid: Guid

    companion object {
        fun Load(ResourceName: String): EdGraph
        fun Find(Outer: UObject, ResourceName: String): EdGraph
        fun GetDefaultObject(): EdGraph
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EdGraph
        fun C(Other: UObject): EdGraph
        fun C(Other: Any): EdGraph
    }
}

external object ETimelineLengthMode {
    var TL_TimelineLength: String /* "TL_TimelineLength" */
    var TL_LastKeyFrame: String /* "TL_LastKeyFrame" */
    var TL_MAX: String /* "TL_MAX" */
}

external open class TTTrackBase {
    open var TrackName: String
    open var bIsExternalCurve: Boolean
    open fun clone(): TTTrackBase

    companion object {
        fun C(Other: UObject): TTTrackBase
        fun C(Other: Any): TTTrackBase
    }
}

external open class TTEventTrack : TTTrackBase {
    open var FunctionName: String
    open var CurveKeys: CurveFloat
    override fun clone(): TTEventTrack

    companion object {
        fun C(Other: UObject): TTEventTrack
        fun C(Other: Any): TTEventTrack
    }
}

external open class TTPropertyTrack : TTTrackBase {
    open var PropertyName: String
    override fun clone(): TTPropertyTrack

    companion object {
        fun C(Other: UObject): TTPropertyTrack
        fun C(Other: Any): TTPropertyTrack
    }
}

external open class TTFloatTrack : TTPropertyTrack {
    open var CurveFloat: CurveFloat
    override fun clone(): TTFloatTrack

    companion object {
        fun C(Other: UObject): TTFloatTrack
        fun C(Other: Any): TTFloatTrack
    }
}

external open class CurveVector : CurveBase {
    constructor()
    constructor(Outer: UObject)
    open var FloatCurves: RichCurve
    open fun GetVectorValue(InTime: Number): Vector

    companion object {
        fun Load(ResourceName: String): CurveVector
        fun Find(Outer: UObject, ResourceName: String): CurveVector
        fun GetDefaultObject(): CurveVector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CurveVector
        fun C(Other: UObject): CurveVector
        fun C(Other: Any): CurveVector
    }
}

external open class TTVectorTrack : TTPropertyTrack {
    open var CurveVector: CurveVector
    override fun clone(): TTVectorTrack

    companion object {
        fun C(Other: UObject): TTVectorTrack
        fun C(Other: Any): TTVectorTrack
    }
}

external open class TTLinearColorTrack : TTPropertyTrack {
    open var CurveLinearColor: CurveLinearColor
    override fun clone(): TTLinearColorTrack

    companion object {
        fun C(Other: UObject): TTLinearColorTrack
        fun C(Other: Any): TTLinearColorTrack
    }
}

external open class TimelineTemplate : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TimelineLength: Number
    open var LengthMode: String /* "TL_TimelineLength" | "TL_LastKeyFrame" | "TL_MAX" */
    open var bAutoPlay: Boolean
    open var bLoop: Boolean
    open var bReplicated: Boolean
    open var bIgnoreTimeDilation: Boolean
    open var EventTracks: Array<TTEventTrack>
    open var FloatTracks: Array<TTFloatTrack>
    open var VectorTracks: Array<TTVectorTrack>
    open var LinearColorTracks: Array<TTLinearColorTrack>
    open var MetaDataArray: Array<BPVariableMetaDataEntry>
    open var TimelineGuid: Guid
    open var VariableName: String
    open var DirectionPropertyName: String
    open var UpdateFunctionName: String
    open var FinishedFunctionName: String

    companion object {
        fun Load(ResourceName: String): TimelineTemplate
        fun Find(Outer: UObject, ResourceName: String): TimelineTemplate
        fun GetDefaultObject(): TimelineTemplate
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TimelineTemplate
        fun C(Other: UObject): TimelineTemplate
        fun C(Other: Any): TimelineTemplate
    }
}

external open class ComponentKey {
    open var OwnerClass: UnrealEngineClass
    open var SCSVariableName: String
    open var AssociatedGuid: Guid
    open fun clone(): ComponentKey

    companion object {
        fun C(Other: UObject): ComponentKey
        fun C(Other: Any): ComponentKey
    }
}

external open class ComponentOverrideRecord {
    open var ComponentClass: UnrealEngineClass
    open var ComponentTemplate: ActorComponent
    open var ComponentKey: ComponentKey
    open var CookedComponentInstancingData: BlueprintCookedComponentInstancingData
    open fun clone(): ComponentOverrideRecord

    companion object {
        fun C(Other: UObject): ComponentOverrideRecord
        fun C(Other: Any): ComponentOverrideRecord
    }
}

external open class InheritableComponentHandler : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Records: Array<ComponentOverrideRecord>
    open var UnnecessaryComponents: Array<ActorComponent>

    companion object {
        fun Load(ResourceName: String): InheritableComponentHandler
        fun Find(Outer: UObject, ResourceName: String): InheritableComponentHandler
        fun GetDefaultObject(): InheritableComponentHandler
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InheritableComponentHandler
        fun C(Other: UObject): InheritableComponentHandler
        fun C(Other: Any): InheritableComponentHandler
    }
}

external object EBlueprintType {
    var BPTYPE_Normal: String /* "BPTYPE_Normal" */
    var BPTYPE_Const: String /* "BPTYPE_Const" */
    var BPTYPE_MacroLibrary: String /* "BPTYPE_MacroLibrary" */
    var BPTYPE_Interface: String /* "BPTYPE_Interface" */
    var BPTYPE_LevelScript: String /* "BPTYPE_LevelScript" */
    var BPTYPE_FunctionLibrary: String /* "BPTYPE_FunctionLibrary" */
    var BPTYPE_MAX: String /* "BPTYPE_MAX" */
}

external object EBlueprintStatus {
    var BS_Unknown: String /* "BS_Unknown" */
    var BS_Dirty: String /* "BS_Dirty" */
    var BS_Error: String /* "BS_Error" */
    var BS_UpToDate: String /* "BS_UpToDate" */
    var BS_BeingCreated: String /* "BS_BeingCreated" */
    var BS_UpToDateWithWarnings: String /* "BS_UpToDateWithWarnings" */
    var BS_MAX: String /* "BS_MAX" */
}

external object ELifetimeCondition {
    var COND_None: String /* "COND_None" */
    var COND_InitialOnly: String /* "COND_InitialOnly" */
    var COND_OwnerOnly: String /* "COND_OwnerOnly" */
    var COND_SkipOwner: String /* "COND_SkipOwner" */
    var COND_SimulatedOnly: String /* "COND_SimulatedOnly" */
    var COND_AutonomousOnly: String /* "COND_AutonomousOnly" */
    var COND_SimulatedOrPhysics: String /* "COND_SimulatedOrPhysics" */
    var COND_InitialOrOwner: String /* "COND_InitialOrOwner" */
    var COND_Custom: String /* "COND_Custom" */
    var COND_ReplayOrOwner: String /* "COND_ReplayOrOwner" */
    var COND_ReplayOnly: String /* "COND_ReplayOnly" */
    var COND_SimulatedOnlyNoReplay: String /* "COND_SimulatedOnlyNoReplay" */
    var COND_SimulatedOrPhysicsNoReplay: String /* "COND_SimulatedOrPhysicsNoReplay" */
    var COND_SkipReplay: String /* "COND_SkipReplay" */
    var COND_Never: String /* "COND_Never" */
    var COND_Max: String /* "COND_Max" */
}

external open class BPVariableDescription {
    open var VarName: String
    open var VarGuid: Guid
    open var VarType: EdGraphPinType
    open var FriendlyName: String
    open var Category: String
    open var PropertyFlags: Any
    open var RepNotifyFunc: String
    open var ReplicationCondition: String /* "COND_None" | "COND_InitialOnly" | "COND_OwnerOnly" | "COND_SkipOwner" | "COND_SimulatedOnly" | "COND_AutonomousOnly" | "COND_SimulatedOrPhysics" | "COND_InitialOrOwner" | "COND_Custom" | "COND_ReplayOrOwner" | "COND_ReplayOnly" | "COND_SimulatedOnlyNoReplay" | "COND_SimulatedOrPhysicsNoReplay" | "COND_SkipReplay" | "COND_Never" | "COND_Max" */
    open var MetaDataArray: Array<BPVariableMetaDataEntry>
    open var DefaultValue: String
    open fun clone(): BPVariableDescription

    companion object {
        fun C(Other: UObject): BPVariableDescription
        fun C(Other: Any): BPVariableDescription
    }
}

external open class Interface : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Interface
        fun Find(Outer: UObject, ResourceName: String): Interface
        fun GetDefaultObject(): Interface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Interface
        fun C(Other: UObject): Interface
        fun C(Other: Any): Interface
    }
}

external open class BPInterfaceDescription {
    open var Interface: UnrealEngineClass
    open var Graphs: Array<EdGraph>
    open fun clone(): BPInterfaceDescription

    companion object {
        fun C(Other: UObject): BPInterfaceDescription
        fun C(Other: Any): BPInterfaceDescription
    }
}

external open class EditedDocumentInfo {
    open var EditedObjectPath: SoftObjectPath
    open var SavedViewOffset: Vector2D
    open var SavedZoomAmount: Number
    open var EditedObject: UObject
    open fun clone(): EditedDocumentInfo

    companion object {
        fun C(Other: UObject): EditedDocumentInfo
        fun C(Other: Any): EditedDocumentInfo
    }
}

external open class BPEditorBookmarkNode {
    open var NodeGuid: Guid
    open var ParentGuid: Guid
    open var DisplayName: String
    open fun clone(): BPEditorBookmarkNode

    companion object {
        fun C(Other: UObject): BPEditorBookmarkNode
        fun C(Other: Any): BPEditorBookmarkNode
    }
}

external open class Breakpoint : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bEnabled: Boolean
    open var UNode: EdGraphNode
    open var bStepOnce: Boolean
    open var bStepOnce_WasPreviouslyDisabled: Boolean
    open var bStepOnce_RemoveAfterHit: Boolean

    companion object {
        fun Load(ResourceName: String): Breakpoint
        fun Find(Outer: UObject, ResourceName: String): Breakpoint
        fun GetDefaultObject(): Breakpoint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Breakpoint
        fun C(Other: UObject): Breakpoint
        fun C(Other: Any): Breakpoint
    }
}

external open class EdGraphPinReference {
    open var OwningNode: Any
    open var PinID: Guid
    open fun clone(): EdGraphPinReference

    companion object {
        fun C(Other: UObject): EdGraphPinReference
        fun C(Other: Any): EdGraphPinReference
    }
}

external open class Blueprint : BlueprintCore {
    constructor()
    constructor(Outer: UObject)
    open var bRecompileOnLoad: Boolean
    open var ParentClass: UnrealEngineClass
    open var bHasBeenRegenerated: Boolean
    open var bIsRegeneratingOnLoad: Boolean
    open var bIsNewlyCreated: Boolean
    open var bForceFullEditor: Boolean
    open var bQueuedForCompilation: Boolean
    open var bRunConstructionScriptOnDrag: Boolean
    open var bRunConstructionScriptInSequencer: Boolean
    open var bGenerateConstClass: Boolean
    open var bGenerateAbstractClass: Boolean
    open var BlueprintDisplayName: String
    open var BlueprintDescription: String
    open var BlueprintCategory: String
    open var HideCategories: Array<String>
    open var NativizationFlag: String /* "Disabled" | "Dependency" | "ExplicitlyEnabled" | "EBlueprintNativizationFlag_MAX" */
    open var bDisplayCompilePIEWarning: Boolean
    open var SearchGuid: Guid
    open var bDeprecate: Boolean
    open var CompileMode: String /* "Default" | "Development" | "FinalRelease" | "EBlueprintCompileMode_MAX" */
    open var SimpleConstructionScript: SimpleConstructionScript
    open var UbergraphPages: Array<EdGraph>
    open var FunctionGraphs: Array<EdGraph>
    open var DelegateSignatureGraphs: Array<EdGraph>
    open var MacroGraphs: Array<EdGraph>
    open var IntermediateGeneratedGraphs: Array<EdGraph>
    open var EventGraphs: Array<EdGraph>
    open var PRIVATE_CachedMacroInfo: Any
    open var bDuplicatingReadOnly: Boolean
    open var ComponentTemplates: Array<ActorComponent>
    open var Timelines: Array<TimelineTemplate>
    open var InheritableComponentHandler: InheritableComponentHandler
    open var BlueprintType: String /* "BPTYPE_Normal" | "BPTYPE_Const" | "BPTYPE_MacroLibrary" | "BPTYPE_Interface" | "BPTYPE_LevelScript" | "BPTYPE_FunctionLibrary" | "BPTYPE_MAX" */
    open var Status: String /* "BS_Unknown" | "BS_Dirty" | "BS_Error" | "BS_UpToDate" | "BS_BeingCreated" | "BS_UpToDateWithWarnings" | "BS_MAX" */
    open var NewVariables: Array<BPVariableDescription>
    open var CategorySorting: Array<String>
    open var ImplementedInterfaces: Array<BPInterfaceDescription>
    open var BlueprintSystemVersion: Number
    open var LastEditedDocuments: Array<EditedDocumentInfo>
    open var Bookmarks: Any
    open var BookmarkNodes: Array<BPEditorBookmarkNode>
    open var Breakpoints: Array<Breakpoint>
    open var WatchedPins: Array<EdGraphPinReference>
    open var DeprecatedPinWatches: Array<EdGraphPin_Deprecated>
    open var ComponentTemplateNameIndex: Any
    open var OldToNewComponentTemplateNames: Any
    open var ThumbnailInfo: ThumbnailInfo
    open var bBeingCompiled: Boolean
    open var CrcLastCompiledCDO: Any
    open var CrcLastCompiledSignature: Any
    open var OriginalClass: UnrealEngineClass
    open var bNativize: Boolean
    open fun AddComponentsToBlueprint(Components: Array<ActorComponent>, bHarvesting: Boolean, OptionalNewRootComponent: ActorComponent, bKeepMobility: Boolean)
    open fun CompileBlueprint()
    open fun GetParentClassOfBlueprint(): UnrealEngineClass
    open fun RemoveComponentFromBlueprint(RemoveComponent: ActorComponent, bPromoteChildren: Boolean)
    open fun GetBlueprintGeneratedClass(): UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): Blueprint
        fun Find(Outer: UObject, ResourceName: String): Blueprint
        fun GetDefaultObject(): Blueprint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Blueprint
        fun C(Other: UObject): Blueprint
        fun C(Other: Any): Blueprint
        fun AddComponentsToBlueprint(Blueprint: Blueprint, Components: Array<ActorComponent>, bHarvesting: Boolean, OptionalNewRootComponent: ActorComponent, bKeepMobility: Boolean)
        fun CompileBlueprint(Blueprint: Blueprint)
        fun GetParentClassOfBlueprint(Blueprint: Blueprint): UnrealEngineClass
        fun RemoveComponentFromBlueprint(Blueprint: Blueprint, RemoveComponent: ActorComponent, bPromoteChildren: Boolean)
        fun GetBlueprintGeneratedClass(Blueprint: Blueprint): UnrealEngineClass
    }
}

external interface `T$366` {
    var OutTransform: Transform
    var OutBoneIndex: Number
    var OutIndex: Number
    var `$`: SkeletalMeshSocket
}

external interface `T$367` {
    var OutIndex: Number
    var `$`: SkeletalMeshSocket
}

external open class SkeletalMesh : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Skeleton: Skeleton
    open var ImportedBounds: BoxSphereBounds
    open var ExtendedBounds: BoxSphereBounds
    open var PositiveBoundsExtension: Vector
    open var NegativeBoundsExtension: Vector
    open var Materials: Array<SkeletalMaterial>
    open var SkelMirrorTable: Array<BoneMirrorInfo>
    open var LODInfo: Array<SkeletalMeshLODInfo>
    open var MinLOD: PerPlatformInt
    open var DisableBelowMinLodStripping: PerPlatformBool
    open var LODSettings: SkeletalMeshLODSettings
    open var SkelMirrorAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var SkelMirrorFlipAxis: String /* "None" | "X" | "Y" | "Z" | "EAxis_MAX" */
    open var bUseFullPrecisionUVs: Boolean
    open var bUseHighPrecisionTangentBasis: Boolean
    open var bHasBeenSimplified: Boolean
    open var bHasVertexColors: Boolean
    open var bEnablePerPolyCollision: Boolean
    open var VertexColorGuid: Guid
    open var BodySetup: BodySetup
    open var PhysicsAsset: PhysicsAsset
    open var ShadowPhysicsAsset: PhysicsAsset
    open var NodeMappingData: Array<NodeMappingContainer>
    open var AssetImportData: AssetImportData
    open var SourceFilePath: String
    open var SourceFileTimestamp: String
    open var ThumbnailInfo: ThumbnailInfo
    open var bHasCustomDefaultEditorCamera: Boolean
    open var DefaultEditorCameraLocation: Vector
    open var DefaultEditorCameraRotation: Rotator
    open var DefaultEditorCameraLookAt: Vector
    open var DefaultEditorCameraOrthoZoom: Number
    open var PreviewAttachedAssetContainer: PreviewAssetAttachContainer
    open var MorphTargets: Array<MorphTarget>
    open var FloorOffset: Number
    open var RetargetBasePose: Array<Transform>
    open var ClothingAssets: Array<ClothingAssetData_Legacy>
    open var PostProcessAnimBlueprint: UnrealEngineClass
    open var MeshClothingAssets: Array<ClothingAssetBase>
    open var SamplingInfo: SkeletalMeshSamplingInfo
    open var AssetUserData: Array<AssetUserData>
    open var Sockets: Array<SkeletalMeshSocket>
    open var SkinWeightProfiles: Array<SkinWeightProfileInfo>
    open fun SetLODSettings(InLODSettings: SkeletalMeshLODSettings)
    open fun NumSockets(): Number
    open fun K2_GetAllMorphTargetNames(): Array<String>
    open fun IsSectionUsingCloth(InSectionIndex: Number, bCheckCorrespondingSections: Boolean): Boolean
    open fun GetSocketByIndex(index: Number): SkeletalMeshSocket
    open fun GetNodeMappingContainer(SourceAsset: Blueprint): NodeMappingContainer
    open fun GetImportedBounds(): BoxSphereBounds
    open fun GetBounds(): BoxSphereBounds
    open fun FindSocketInfo(InSocketName: String, OutTransform: Transform = definedExternally, OutBoneIndex: Number = definedExternally, OutIndex: Number = definedExternally): `T$366`
    open fun FindSocketAndIndex(InSocketName: String, OutIndex: Number = definedExternally): `T$367`
    open fun FindSocket(InSocketName: String): SkeletalMeshSocket

    companion object {
        fun Load(ResourceName: String): SkeletalMesh
        fun Find(Outer: UObject, ResourceName: String): SkeletalMesh
        fun GetDefaultObject(): SkeletalMesh
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMesh
        fun C(Other: UObject): SkeletalMesh
        fun C(Other: Any): SkeletalMesh
    }
}

external open class SkelMeshComponentLODInfo {
    open var HiddenMaterials: Array<Boolean>
    open fun clone(): SkelMeshComponentLODInfo

    companion object {
        fun C(Other: UObject): SkelMeshComponentLODInfo
        fun C(Other: Any): SkelMeshComponentLODInfo
    }
}

external object EVisibilityBasedAnimTickOption {
    var AlwaysTickPoseAndRefreshBones: String /* "AlwaysTickPoseAndRefreshBones" */
    var AlwaysTickPose: String /* "AlwaysTickPose" */
    var OnlyTickMontagesWhenNotRendered: String /* "OnlyTickMontagesWhenNotRendered" */
    var OnlyTickPoseWhenRendered: String /* "OnlyTickPoseWhenRendered" */
    var EVisibilityBasedAnimTickOption_MAX: String /* "EVisibilityBasedAnimTickOption_MAX" */
}

external interface `T$368` {
    var Bone0: Number
    var Weight0: Number
    var Bone1: Number
    var Weight1: Number
    var Bone2: Number
    var Weight2: Number
    var Bone3: Number
    var Weight3: Number
}

external open class SkelMeshSkinWeightInfo {
    open var Bones: Number
    open var Weights: Number
    open fun clone(): SkelMeshSkinWeightInfo
    open fun BreakSkinWeightInfo(Bone0: Number = definedExternally, Weight0: Number = definedExternally, Bone1: Number = definedExternally, Weight1: Number = definedExternally, Bone2: Number = definedExternally, Weight2: Number = definedExternally, Bone3: Number = definedExternally, Weight3: Number = definedExternally): `T$368`

    companion object {
        fun C(Other: UObject): SkelMeshSkinWeightInfo
        fun C(Other: Any): SkelMeshSkinWeightInfo
        fun BreakSkinWeightInfo(InWeight: SkelMeshSkinWeightInfo, Bone0: Number = definedExternally, Weight0: Number = definedExternally, Bone1: Number = definedExternally, Weight1: Number = definedExternally, Bone2: Number = definedExternally, Weight2: Number = definedExternally, Bone3: Number = definedExternally, Weight3: Number = definedExternally): `T$368`
        fun MakeSkinWeightInfo(Bone0: Number, Weight0: Number, Bone1: Number, Weight1: Number, Bone2: Number, Weight2: Number, Bone3: Number, Weight3: Number): SkelMeshSkinWeightInfo
    }
}

external object EPhysBodyOp {
    var PBO_None: String /* "PBO_None" */
    var PBO_Term: String /* "PBO_Term" */
    var PBO_MAX: String /* "PBO_MAX" */
}

external interface `T$369` {
    var OutPosition: Vector
    var OutRotation: Rotator
}

external interface `T$370` {
    var OutTwistAngle: Number
    var OutSwingAngle: Number
    var `$`: Boolean
}

external interface `T$371` {
    var BoneLocation: Vector
    var `$`: String
}

external open class SkinnedMeshComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var SkeletalMesh: SkeletalMesh
    open var MasterPoseComponent: Any
    open var WireframeColor: Color
    open var PhysicsAssetOverride: PhysicsAsset
    open var ForcedLodModel: Number
    open var MinLodModel: Number
    open var StreamingDistanceMultiplier: Number
    open var LODInfo: Array<SkelMeshComponentLODInfo>
    open var VisibilityBasedAnimTickOption: String /* "AlwaysTickPoseAndRefreshBones" | "AlwaysTickPose" | "OnlyTickMontagesWhenNotRendered" | "OnlyTickPoseWhenRendered" | "EVisibilityBasedAnimTickOption_MAX" */
    open var bOverrideMinLOD: Boolean
    open var bUseBoundsFromMasterPoseComponent: Boolean
    open var bForceWireframe: Boolean
    open var bDisplayBones: Boolean
    open var bDisableMorphTarget: Boolean
    open var bHideSkin: Boolean
    open var bPerBoneMotionBlur: Boolean
    open var bComponentUseFixedSkelBounds: Boolean
    open var bConsiderAllBodiesForBounds: Boolean
    open var bSyncAttachParentLOD: Boolean
    open var bCanHighlightSelectedSections: Boolean
    open var bRecentlyRendered: Boolean
    open var bCastCapsuleDirectShadow: Boolean
    open var bCastCapsuleIndirectShadow: Boolean
    open var bCPUSkinning: Boolean
    open var bEnableUpdateRateOptimizations: Boolean
    open var bDisplayDebugUpdateRateOptimizations: Boolean
    open var bRenderStatic: Boolean
    open var bIgnoreMasterPoseComponentLOD: Boolean
    open var bCachedLocalBoundsUpToDate: Boolean
    open var bForceMeshObjectUpdate: Boolean
    open var CapsuleIndirectShadowMinVisibility: Number
    open var CachedLocalBounds: BoxSphereBounds
    open fun UnloadSkinWeightProfile(InProfileName: String)
    open fun UnHideBoneByName(BoneName: String)
    open fun TransformToBoneSpace(BoneName: String, InPosition: Vector, InRotation: Rotator, OutPosition: Vector = definedExternally, OutRotation: Rotator = definedExternally): `T$369`
    open fun TransformFromBoneSpace(BoneName: String, InPosition: Vector, InRotation: Rotator, OutPosition: Vector = definedExternally, OutRotation: Rotator = definedExternally): `T$369`
    open fun ShowMaterialSection(MaterialID: Number, bShow: Boolean, LODIndex: Number)
    open fun ShowAllMaterialSections(LODIndex: Number)
    open fun SetVertexColorOverride_LinearColor(LODIndex: Number, VertexColors: Array<LinearColor>)
    open fun SetSkinWeightProfile(InProfileName: String): Boolean
    open fun SetSkinWeightOverride(LODIndex: Number, SkinWeights: Array<SkelMeshSkinWeightInfo>)
    open fun SetSkeletalMesh(NewMesh: SkeletalMesh, bReinitPose: Boolean)
    open fun SetRenderStatic(bNewValue: Boolean)
    open fun SetPhysicsAsset(NewPhysicsAsset: PhysicsAsset, bForceReInit: Boolean)
    open fun SetMinLOD(InNewMinLOD: Number)
    open fun SetMasterPoseComponent(NewMasterBoneComponent: SkinnedMeshComponent, bForceUpdate: Boolean)
    open fun SetForcedLOD(InNewForcedLOD: Number)
    open fun SetCastCapsuleIndirectShadow(bNewValue: Boolean)
    open fun SetCastCapsuleDirectShadow(bNewValue: Boolean)
    open fun SetCapsuleIndirectShadowMinVisibility(NewValue: Number)
    open fun IsUsingSkinWeightProfile(): Boolean
    open fun IsMaterialSectionShown(MaterialID: Number, LODIndex: Number): Boolean
    open fun IsBoneHiddenByName(BoneName: String): Boolean
    open fun HideBoneByName(BoneName: String, PhysBodyOption: String /* "PBO_None" | "PBO_Term" | "PBO_MAX" */)
    open fun GetTwistAndSwingAngleOfDeltaRotationFromRefPose(BoneName: String, OutTwistAngle: Number = definedExternally, OutSwingAngle: Number = definedExternally): `T$370`
    open fun GetSocketBoneName(InSocketName: String): String
    open fun GetRefPosePosition(BoneIndex: Number): Vector
    open fun GetParentBone(BoneName: String): String
    open fun GetNumLODs(): Number
    open fun GetNumBones(): Number
    open fun GetDeltaTransformFromRefPose(BoneName: String, BaseName: String): Transform
    open fun GetCurrentSkinWeightProfileName(): String
    open fun GetBoneName(BoneIndex: Number): String
    open fun GetBoneIndex(BoneName: String): Number
    open fun FindClosestBone_K2(TestLocation: Vector, BoneLocation: Vector = definedExternally, IgnoreScale: Number = definedExternally, bRequirePhysicsAsset: Boolean = definedExternally): `T$371`
    open fun ClearVertexColorOverride(LODIndex: Number)
    open fun ClearSkinWeightProfile()
    open fun ClearSkinWeightOverride(LODIndex: Number)
    open fun BoneIsChildOf(BoneName: String, ParentBoneName: String): Boolean

    companion object {
        fun Load(ResourceName: String): SkinnedMeshComponent
        fun Find(Outer: UObject, ResourceName: String): SkinnedMeshComponent
        fun GetDefaultObject(): SkinnedMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkinnedMeshComponent
        fun C(Other: UObject): SkinnedMeshComponent
        fun C(Other: Any): SkinnedMeshComponent
    }
}

external open class AnimGroupInfo {
    open var Name: String
    open var Color: LinearColor
    open fun clone(): AnimGroupInfo

    companion object {
        fun C(Other: UObject): AnimGroupInfo
        fun C(Other: Any): AnimGroupInfo
    }
}

external open class AnimParentNodeAssetOverride {
    open var NewAsset: AnimationAsset
    open var ParentNodeGuid: Guid
    open fun clone(): AnimParentNodeAssetOverride

    companion object {
        fun C(Other: UObject): AnimParentNodeAssetOverride
        fun C(Other: Any): AnimParentNodeAssetOverride
    }
}

external open class PoseWatch : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UNode: EdGraphNode
    open var PoseWatchColour: Color

    companion object {
        fun Load(ResourceName: String): PoseWatch
        fun Find(Outer: UObject, ResourceName: String): PoseWatch
        fun GetDefaultObject(): PoseWatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PoseWatch
        fun C(Other: UObject): PoseWatch
        fun C(Other: Any): PoseWatch
    }
}

external open class AnimBlueprint : Blueprint {
    constructor()
    constructor(Outer: UObject)
    open var TargetSkeleton: Skeleton
    open var Groups: Array<AnimGroupInfo>
    open var bUseMultiThreadedAnimationUpdate: Boolean
    open var bWarnAboutBlueprintUsage: Boolean
    open var ParentAssetOverrides: Array<AnimParentNodeAssetOverride>
    open var PoseWatches: Array<PoseWatch>
    open var PreviewSkeletalMesh: SkeletalMesh

    companion object {
        fun Load(ResourceName: String): AnimBlueprint
        fun Find(Outer: UObject, ResourceName: String): AnimBlueprint
        fun GetDefaultObject(): AnimBlueprint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AnimBlueprint
        fun C(Other: UObject): AnimBlueprint
        fun C(Other: Any): AnimBlueprint
    }
}

external open class SingleAnimationPlayData {
    open var AnimToPlay: AnimationAsset
    open var bSavedLooping: Boolean
    open var bSavedPlaying: Boolean
    open var SavedPosition: Number
    open var SavedPlayRate: Number
    open fun clone(): SingleAnimationPlayData

    companion object {
        fun C(Other: UObject): SingleAnimationPlayData
        fun C(Other: Any): SingleAnimationPlayData
    }
}

external object EKinematicBonesUpdateToPhysics {
    var SkipSimulatingBones: String /* "SkipSimulatingBones" */
    var SkipAllBones: String /* "SkipAllBones" */
    var EKinematicBonesUpdateToPhysics_MAX: String /* "EKinematicBonesUpdateToPhysics_MAX" */
}

external object EPhysicsTransformUpdateMode {
    var SimulationUpatesComponentTransform: String /* "SimulationUpatesComponentTransform" */
    var ComponentTransformIsKinematic: String /* "ComponentTransformIsKinematic" */
    var EPhysicsTransformUpdateMode_MAX: String /* "EPhysicsTransformUpdateMode_MAX" */
}

external object EAnimationMode {
    var AnimationBlueprint: String /* "AnimationBlueprint" */
    var AnimationSingleNode: String /* "AnimationSingleNode" */
    var AnimationCustomMode: String /* "AnimationCustomMode" */
    var EAnimationMode_MAX: String /* "EAnimationMode_MAX" */
}

external open class ClothingSimulationFactory : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingSimulationFactory
        fun Find(Outer: UObject, ResourceName: String): ClothingSimulationFactory
        fun GetDefaultObject(): ClothingSimulationFactory
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingSimulationFactory
        fun C(Other: UObject): ClothingSimulationFactory
        fun C(Other: Any): ClothingSimulationFactory
    }
}

external open class ClothingSimulationInteractor : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun PhysicsAssetUpdated()
    open fun ClothConfigUpdated()

    companion object {
        fun Load(ResourceName: String): ClothingSimulationInteractor
        fun Find(Outer: UObject, ResourceName: String): ClothingSimulationInteractor
        fun GetDefaultObject(): ClothingSimulationInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingSimulationInteractor
        fun C(Other: UObject): ClothingSimulationInteractor
        fun C(Other: Any): ClothingSimulationInteractor
    }
}

external interface `T$372` {
    var ClosestWorldPosition: Vector
    var Normal: Vector
    var BoneName: String
    var Distance: Number
    var `$`: Boolean
}

external interface `T$373` {
    var OutSubInstances: Array<AnimInstance>
}

external interface `T$374` {
    var Swing1Angle: Number
    var TwistAngle: Number
    var Swing2Angle: Number
}

external open class SkeletalMeshComponent : SkinnedMeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var AnimationBlueprint: AnimBlueprint
    open var AnimBlueprintGeneratedClass: UnrealEngineClass
    open var AnimClass: UnrealEngineClass
    open var AnimScriptInstance: AnimInstance
    open var SubInstances: Array<AnimInstance>
    open var PostProcessAnimInstance: AnimInstance
    open var AnimationData: SingleAnimationPlayData
    open var RootBoneTranslation: Vector
    open var LineCheckBoundsScale: Vector
    open var CachedBoneSpaceTransforms: Array<Transform>
    open var CachedComponentSpaceTransforms: Array<Transform>
    open var GlobalAnimRateScale: Number
    open var KinematicBonesUpdateType: String /* "SkipSimulatingBones" | "SkipAllBones" | "EKinematicBonesUpdateToPhysics_MAX" */
    open var PhysicsTransformUpdateMode: String /* "SimulationUpatesComponentTransform" | "ComponentTransformIsKinematic" | "EPhysicsTransformUpdateMode_MAX" */
    open var AnimationMode: String /* "AnimationBlueprint" | "AnimationSingleNode" | "AnimationCustomMode" | "EAnimationMode_MAX" */
    open var bDisablePostProcessBlueprint: Boolean
    open var bUpdateOverlapsOnAnimationFinalize: Boolean
    open var bHasValidBodies: Boolean
    open var bBlendPhysics: Boolean
    open var bEnablePhysicsOnDedicatedServer: Boolean
    open var bUpdateJointsFromAnimation: Boolean
    open var bDisableClothSimulation: Boolean
    open var bAllowAnimCurveEvaluation: Boolean
    open var bDisableAnimCurves: Boolean
    open var bCollideWithEnvironment: Boolean
    open var bCollideWithAttachedChildren: Boolean
    open var bLocalSpaceSimulation: Boolean
    open var bResetAfterTeleport: Boolean
    open var bDeferKinematicBoneUpdate: Boolean
    open var bNoSkeletonUpdate: Boolean
    open var bPauseAnims: Boolean
    open var bUseRefPoseOnInitAnim: Boolean
    open var bEnablePerPolyCollision: Boolean
    open var bForceRefpose: Boolean
    open var bOnlyAllowAutonomousTickPose: Boolean
    open var bIsAutonomousTickPose: Boolean
    open var bOldForceRefPose: Boolean
    open var bShowPrePhysBones: Boolean
    open var bRequiredBonesUpToDate: Boolean
    open var bAnimTreeInitialised: Boolean
    open var bIncludeComponentLocationIntoBounds: Boolean
    open var bEnableLineCheckWithBounds: Boolean
    open var bUseBendingElements: Boolean
    open var bUseTetrahedralConstraints: Boolean
    open var bUseThinShellVolumeConstraints: Boolean
    open var bUseSelfCollisions: Boolean
    open var bUseContinuousCollisionDetection: Boolean
    open var bPropagateCurvesToSlaves: Boolean
    open var bSkipKinematicUpdateWhenInterpolating: Boolean
    open var bSkipBoundsUpdateWhenInterpolating: Boolean
    open var bUpdateAnimationInEditor: Boolean
    open var bNeedsQueuedAnimEventsDispatched: Boolean
    open var CachedAnimCurveUidVersion: Any
    open var ClothBlendWeight: Number
    open var EdgeStiffness: Number
    open var BendingStiffness: Number
    open var AreaStiffness: Number
    open var VolumeStiffness: Number
    open var StrainLimitingStiffness: Number
    open var ShapeTargetStiffness: Number
    open var DisallowedAnimCurves: Array<String>
    open var BodySetup: BodySetup
    open var OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: Number) -> Unit>
    open var ClothingSimulationFactory: UnrealEngineClass
    open var TeleportDistanceThreshold: Number
    open var TeleportRotationThreshold: Number
    open var LastPoseTickFrame: Any
    open var ClothingInteractor: ClothingSimulationInteractor
    open var OnAnimInitialized: UnrealEngineMulticastDelegate<() -> Unit>
    open var SequenceToPlay: AnimSequence
    open var AnimToPlay: AnimationAsset
    open var bDefaultLooping: Boolean
    open var bDefaultPlaying: Boolean
    open var DefaultPosition: Number
    open var DefaultPlayRate: Number
    open fun UnbindClothFromMasterPoseComponent(bRestoreSimulationSpace: Boolean)
    open fun ToggleDisablePostProcessBlueprint()
    open fun TermBodiesBelow(ParentBoneName: String)
    open fun SuspendClothingSimulation()
    open fun Stop()
    open fun SnapshotPose(Snapshot: PoseSnapshot = definedExternally): `T$361`
    open fun SetUpdateAnimationInEditor(NewUpdateState: Boolean)
    open fun SetTeleportRotationThreshold(Threshold: Number)
    open fun SetTeleportDistanceThreshold(Threshold: Number)
    open fun SetPosition(InPos: Number, bFireNotifies: Boolean)
    open fun SetPlayRate(Rate: Number)
    open fun SetPhysicsBlendWeight(PhysicsBlendWeight: Number)
    open fun SetNotifyRigidBodyCollisionBelow(bNewNotifyRigidBodyCollision: Boolean, BoneName: String, bIncludeSelf: Boolean)
    open fun SetMorphTarget(MorphTargetName: String, Value: Number, bRemoveZeroWeight: Boolean)
    open fun SetLayerOverlay(InClass: UnrealEngineClass)
    open fun SetEnablePhysicsBlending(bNewBlendPhysics: Boolean)
    open fun SetEnableGravityOnAllBodiesBelow(bEnableGravity: Boolean, BoneName: String, bIncludeSelf: Boolean)
    open fun SetEnableBodyGravity(bEnableGravity: Boolean, BoneName: String)
    open fun SetDisablePostProcessBlueprint(bInDisablePostProcess: Boolean)
    open fun SetDisableAnimCurves(bInDisableAnimCurves: Boolean)
    open fun SetConstraintProfileForAll(ProfileName: String, bDefaultIfNotFound: Boolean)
    open fun SetConstraintProfile(JointName: String, ProfileName: String, bDefaultIfNotFound: Boolean)
    open fun SetClothMaxDistanceScale(Scale: Number)
    open fun SetBodyNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: Boolean, BoneName: String)
    open fun SetAnimClass(NewClass: UnrealEngineClass)
    open fun SetAnimationMode(InAnimationMode: String /* "AnimationBlueprint" | "AnimationSingleNode" | "AnimationCustomMode" | "EAnimationMode_MAX" */)
    open fun SetAnimation(NewAnimToPlay: AnimationAsset)
    open fun SetAngularLimits(InBoneName: String, Swing1LimitAngle: Number, TwistLimitAngle: Number, Swing2LimitAngle: Number)
    open fun SetAllowedAnimCurvesEvaluation(List: Array<String>, bAllow: Boolean)
    open fun SetAllowAnimCurveEvaluation(bInAllow: Boolean)
    open fun SetAllMotorsAngularVelocityDrive(bEnableSwingDrive: Boolean, bEnableTwistDrive: Boolean, bSkipCustomPhysicsType: Boolean)
    open fun SetAllMotorsAngularPositionDrive(bEnableSwingDrive: Boolean, bEnableTwistDrive: Boolean, bSkipCustomPhysicsType: Boolean)
    open fun SetAllMotorsAngularDriveParams(InSpring: Number, InDamping: Number, InForceLimit: Number, bSkipCustomPhysicsType: Boolean)
    open fun SetAllBodiesSimulatePhysics(bNewSimulate: Boolean)
    open fun SetAllBodiesPhysicsBlendWeight(PhysicsBlendWeight: Number, bSkipCustomPhysicsType: Boolean)
    open fun SetAllBodiesBelowSimulatePhysics(InBoneName: String, bNewSimulate: Boolean, bIncludeSelf: Boolean)
    open fun SetAllBodiesBelowPhysicsBlendWeight(InBoneName: String, PhysicsBlendWeight: Number, bSkipCustomPhysicsType: Boolean, bIncludeSelf: Boolean)
    open fun ResumeClothingSimulation()
    open fun ResetClothTeleportMode()
    open fun ResetAnimInstanceDynamics(InTeleportType: String /* "None" | "TeleportPhysics" | "ResetPhysics" | "ETeleportType_MAX" */)
    open fun ResetAllowedAnimCurveEvaluation()
    open fun ResetAllBodiesSimulatePhysics()
    open fun PlayAnimation(NewAnimToPlay: AnimationAsset, bLooping: Boolean)
    open fun Play(bLooping: Boolean)
    open fun OverrideAnimationData(InAnimToPlay: AnimationAsset, bIsLooping: Boolean, bIsPlaying: Boolean, Position: Number, PlayRate: Number)
    open fun K2_GetClosestPointOnPhysicsAsset(WorldPosition: Vector, ClosestWorldPosition: Vector = definedExternally, Normal: Vector = definedExternally, BoneName: String = definedExternally, Distance: Number = definedExternally): `T$372`
    open fun IsPlaying(): Boolean
    open fun IsClothingSimulationSuspended(): Boolean
    open fun IsBodyGravityEnabled(BoneName: String): Boolean
    open fun HasValidAnimationInstance(): Boolean
    open fun GetTeleportRotationThreshold(): Number
    open fun GetTeleportDistanceThreshold(): Number
    open fun GetSubInstancesByTag(InTag: String, OutSubInstances: Array<AnimInstance> = definedExternally): `T$373`
    open fun GetSubInstanceByTag(InTag: String): AnimInstance
    open fun GetSkeletalCenterOfMass(): Vector
    open fun GetPostProcessInstance(): AnimInstance
    open fun GetPosition(): Number
    open fun GetPlayRate(): Number
    open fun GetMorphTarget(MorphTargetName: String): Number
    open fun GetLayerSubInstanceByGroup(InGroup: String): AnimInstance
    open fun GetDisablePostProcessBlueprint(): Boolean
    open fun GetDisableAnimCurves(): Boolean
    open fun GetCurrentJointAngles(InBoneName: String, Swing1Angle: Number = definedExternally, TwistAngle: Number = definedExternally, Swing2Angle: Number = definedExternally): `T$374`
    open fun GetClothMaxDistanceScale(): Number
    open fun GetClothingSimulationInteractor(): ClothingSimulationInteractor
    open fun GetBoneMass(BoneName: String, bScaleMass: Boolean): Number
    open fun GetAnimInstance(): AnimInstance
    open fun GetAnimClass(): UnrealEngineClass
    open fun GetAnimationMode(): String /* "AnimationBlueprint" | "AnimationSingleNode" | "AnimationCustomMode" | "EAnimationMode_MAX" */
    open fun GetAllowedAnimCurveEvaluate(): Boolean
    open fun ForceClothNextUpdateTeleportAndReset()
    open fun ForceClothNextUpdateTeleport()
    open fun FindConstraintBoneName(ConstraintIndex: Number): String
    open fun ClearMorphTargets()
    open fun BreakConstraint(Impulse: Vector, HitLocation: Vector, InBoneName: String)
    open fun BindClothToMasterPoseComponent()
    open fun AllowAnimCurveEvaluation(NameOfCurve: String, bAllow: Boolean)
    open fun AddImpulseToAllBodiesBelow(Impulse: Vector, BoneName: String, bVelChange: Boolean, bIncludeSelf: Boolean)
    open fun AddForceToAllBodiesBelow(Force: Vector, BoneName: String, bAccelChange: Boolean, bIncludeSelf: Boolean)
    open fun AccumulateAllBodiesBelowPhysicsBlendWeight(InBoneName: String, AddPhysicsBlendWeight: Number, bSkipCustomPhysicsType: Boolean)
    open fun K2_DirectionBetweenSockets(SocketOrBoneNameFrom: String, SocketOrBoneNameTo: String): Vector
    open fun K2_DistanceBetweenTwoSocketsAndMapRange(SocketOrBoneNameA: String, SocketSpaceA: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, SocketOrBoneNameB: String, SocketSpaceB: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, bRemapRange: Boolean, InRangeMin: Number, InRangeMax: Number, OutRangeMin: Number, OutRangeMax: Number): Number

    companion object {
        fun Load(ResourceName: String): SkeletalMeshComponent
        fun Find(Outer: UObject, ResourceName: String): SkeletalMeshComponent
        fun GetDefaultObject(): SkeletalMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkeletalMeshComponent
        fun C(Other: UObject): SkeletalMeshComponent
        fun C(Other: Any): SkeletalMeshComponent
        fun K2_DirectionBetweenSockets(Component: SkeletalMeshComponent, SocketOrBoneNameFrom: String, SocketOrBoneNameTo: String): Vector
        fun K2_DistanceBetweenTwoSocketsAndMapRange(Component: SkeletalMeshComponent, SocketOrBoneNameA: String, SocketSpaceA: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, SocketOrBoneNameB: String, SocketSpaceB: String /* "RTS_World" | "RTS_Actor" | "RTS_Component" | "RTS_ParentBoneSpace" | "RTS_MAX" */, bRemapRange: Boolean, InRangeMin: Number, InRangeMax: Number, OutRangeMin: Number, OutRangeMax: Number): Number
    }
}

external object EMovementMode {
    var MOVE_None: String /* "MOVE_None" */
    var MOVE_Walking: String /* "MOVE_Walking" */
    var MOVE_NavWalking: String /* "MOVE_NavWalking" */
    var MOVE_Falling: String /* "MOVE_Falling" */
    var MOVE_Swimming: String /* "MOVE_Swimming" */
    var MOVE_Flying: String /* "MOVE_Flying" */
    var MOVE_Custom: String /* "MOVE_Custom" */
    var MOVE_MAX: String /* "MOVE_MAX" */
}

external object ENetworkSmoothingMode {
    var Disabled: String /* "Disabled" */
    var Linear: String /* "Linear" */
    var Exponential: String /* "Exponential" */
    var Replay: String /* "Replay" */
    var ENetworkSmoothingMode_MAX: String /* "ENetworkSmoothingMode_MAX" */
}

external open class FindFloorResult {
    open var bBlockingHit: Boolean
    open var bWalkableFloor: Boolean
    open var bLineTrace: Boolean
    open var FloorDist: Number
    open var LineDist: Number
    open var HitResult: HitResult
    open fun clone(): FindFloorResult

    companion object {
        fun C(Other: UObject): FindFloorResult
        fun C(Other: Any): FindFloorResult
    }
}

external open class NavAvoidanceMask {
    open var bGroup0: Boolean
    open var bGroup1: Boolean
    open var bGroup2: Boolean
    open var bGroup3: Boolean
    open var bGroup4: Boolean
    open var bGroup5: Boolean
    open var bGroup6: Boolean
    open var bGroup7: Boolean
    open var bGroup8: Boolean
    open var bGroup9: Boolean
    open var bGroup10: Boolean
    open var bGroup11: Boolean
    open var bGroup12: Boolean
    open var bGroup13: Boolean
    open var bGroup14: Boolean
    open var bGroup15: Boolean
    open var bGroup16: Boolean
    open var bGroup17: Boolean
    open var bGroup18: Boolean
    open var bGroup19: Boolean
    open var bGroup20: Boolean
    open var bGroup21: Boolean
    open var bGroup22: Boolean
    open var bGroup23: Boolean
    open var bGroup24: Boolean
    open var bGroup25: Boolean
    open var bGroup26: Boolean
    open var bGroup27: Boolean
    open var bGroup28: Boolean
    open var bGroup29: Boolean
    open var bGroup30: Boolean
    open var bGroup31: Boolean
    open fun clone(): NavAvoidanceMask

    companion object {
        fun C(Other: UObject): NavAvoidanceMask
        fun C(Other: Any): NavAvoidanceMask
    }
}

external open class CharacterMovementComponentPostPhysicsTickFunction : TickFunction {
    override fun clone(): CharacterMovementComponentPostPhysicsTickFunction

    companion object {
        fun C(Other: UObject): CharacterMovementComponentPostPhysicsTickFunction
        fun C(Other: Any): CharacterMovementComponentPostPhysicsTickFunction
    }
}

external open class RootMotionSourceSettings {
    open var Flags: Number
    open fun clone(): RootMotionSourceSettings

    companion object {
        fun C(Other: UObject): RootMotionSourceSettings
        fun C(Other: Any): RootMotionSourceSettings
    }
}

external open class Vector_NetQuantize10 : Vector {
    override fun clone(): Vector_NetQuantize10

    companion object {
        fun C(Other: UObject): Vector_NetQuantize10
        fun C(Other: Any): Vector_NetQuantize10
    }
}

external open class RootMotionSourceGroup {
    open var bHasAdditiveSources: Boolean
    open var bHasOverrideSources: Boolean
    open var bIsAdditiveVelocityApplied: Boolean
    open var LastAccumulatedSettings: RootMotionSourceSettings
    open var LastPreAdditiveVelocity: Vector_NetQuantize10
    open fun clone(): RootMotionSourceGroup

    companion object {
        fun C(Other: UObject): RootMotionSourceGroup
        fun C(Other: Any): RootMotionSourceGroup
    }
}

external open class RootMotionMovementParams {
    open var bHasRootMotion: Boolean
    open var BlendWeight: Number
    open var RootMotionTransform: Transform
    open fun clone(): RootMotionMovementParams

    companion object {
        fun C(Other: UObject): RootMotionMovementParams
        fun C(Other: Any): RootMotionMovementParams
    }
}

external interface `T$375` {
    var FloorResult: FindFloorResult
}

external open class CharacterMovementComponent : PawnMovementComponent {
    constructor()
    constructor(Outer: UObject)
    open var CharacterOwner: Character
    open var GravityScale: Number
    open var MaxStepHeight: Number
    open var JumpZVelocity: Number
    open var JumpOffJumpZFactor: Number
    open var WalkableFloorAngle: Number
    open var WalkableFloorZ: Number
    open var MovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var CustomMovementMode: Number
    open var NetworkSmoothingMode: String /* "Disabled" | "Linear" | "Exponential" | "Replay" | "ENetworkSmoothingMode_MAX" */
    open var GroundFriction: Number
    open var MaxWalkSpeed: Number
    open var MaxWalkSpeedCrouched: Number
    open var MaxSwimSpeed: Number
    open var MaxFlySpeed: Number
    open var MaxCustomMovementSpeed: Number
    open var MaxAcceleration: Number
    open var MinAnalogWalkSpeed: Number
    open var BrakingFrictionFactor: Number
    open var BrakingFriction: Number
    open var BrakingSubStepTime: Number
    open var BrakingDecelerationWalking: Number
    open var BrakingDecelerationFalling: Number
    open var BrakingDecelerationSwimming: Number
    open var BrakingDecelerationFlying: Number
    open var AirControl: Number
    open var AirControlBoostMultiplier: Number
    open var AirControlBoostVelocityThreshold: Number
    open var FallingLateralFriction: Number
    open var CrouchedHalfHeight: Number
    open var Buoyancy: Number
    open var PerchRadiusThreshold: Number
    open var PerchAdditionalHeight: Number
    open var RotationRate: Rotator
    open var bUseSeparateBrakingFriction: Boolean
    open var bApplyGravityWhileJumping: Boolean
    open var bUseControllerDesiredRotation: Boolean
    open var bOrientRotationToMovement: Boolean
    open var bSweepWhileNavWalking: Boolean
    open var bMovementInProgress: Boolean
    open var bEnableScopedMovementUpdates: Boolean
    open var bEnableServerDualMoveScopedMovementUpdates: Boolean
    open var bForceMaxAccel: Boolean
    open var bRunPhysicsWithNoController: Boolean
    open var bForceNextFloorCheck: Boolean
    open var bShrinkProxyCapsule: Boolean
    open var bCanWalkOffLedges: Boolean
    open var bCanWalkOffLedgesWhenCrouching: Boolean
    open var bNetworkSkipProxyPredictionOnNetUpdate: Boolean
    open var bNetworkAlwaysReplicateTransformUpdateTimestamp: Boolean
    open var bDeferUpdateMoveComponent: Boolean
    open var bEnablePhysicsInteraction: Boolean
    open var bTouchForceScaledToMass: Boolean
    open var bPushForceScaledToMass: Boolean
    open var bPushForceUsingZOffset: Boolean
    open var bScalePushForceToVelocity: Boolean
    open var DeferredUpdatedMoveComponent: SceneComponent
    open var MaxOutOfWaterStepHeight: Number
    open var OutofWaterZ: Number
    open var Mass: Number
    open var StandingDownwardForceScale: Number
    open var InitialPushForceFactor: Number
    open var PushForceFactor: Number
    open var PushForcePointZOffsetFactor: Number
    open var TouchForceFactor: Number
    open var MinTouchForce: Number
    open var MaxTouchForce: Number
    open var RepulsionForce: Number
    open var bForceBraking: Boolean
    open var CrouchedSpeedMultiplier: Number
    open var UpperImpactNormalScale: Number
    open var Acceleration: Vector
    open var LastUpdateRotation: Quat
    open var LastUpdateLocation: Vector
    open var LastUpdateVelocity: Vector
    open var ServerLastTransformUpdateTimeStamp: Number
    open var ServerLastClientGoodMoveAckTime: Number
    open var ServerLastClientAdjustmentTime: Number
    open var PendingImpulseToApply: Vector
    open var PendingForceToApply: Vector
    open var AnalogInputModifier: Number
    open var MaxSimulationTimeStep: Number
    open var MaxSimulationIterations: Number
    open var MaxJumpApexAttemptsPerSimulation: Number
    open var MaxDepenetrationWithGeometry: Number
    open var MaxDepenetrationWithGeometryAsProxy: Number
    open var MaxDepenetrationWithPawn: Number
    open var MaxDepenetrationWithPawnAsProxy: Number
    open var NetworkSimulatedSmoothLocationTime: Number
    open var NetworkSimulatedSmoothRotationTime: Number
    open var ListenServerNetworkSimulatedSmoothLocationTime: Number
    open var ListenServerNetworkSimulatedSmoothRotationTime: Number
    open var NetProxyShrinkRadius: Number
    open var NetProxyShrinkHalfHeight: Number
    open var NetworkMaxSmoothUpdateDistance: Number
    open var NetworkNoSmoothUpdateDistance: Number
    open var NetworkMinTimeBetweenClientAckGoodMoves: Number
    open var NetworkMinTimeBetweenClientAdjustments: Number
    open var NetworkMinTimeBetweenClientAdjustmentsLargeCorrection: Number
    open var NetworkLargeClientCorrectionDistance: Number
    open var LedgeCheckThreshold: Number
    open var JumpOutOfWaterPitch: Number
    open var CurrentFloor: FindFloorResult
    open var DefaultLandMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var DefaultWaterMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var GroundMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */
    open var bMaintainHorizontalGroundVelocity: Boolean
    open var bImpartBaseVelocityX: Boolean
    open var bImpartBaseVelocityY: Boolean
    open var bImpartBaseVelocityZ: Boolean
    open var bImpartBaseAngularVelocity: Boolean
    open var bJustTeleported: Boolean
    open var bNetworkUpdateReceived: Boolean
    open var bNetworkMovementModeChanged: Boolean
    open var bIgnoreClientMovementErrorChecksAndCorrection: Boolean
    open var bServerAcceptClientAuthoritativePosition: Boolean
    open var bNotifyApex: Boolean
    open var bCheatFlying: Boolean
    open var bWantsToCrouch: Boolean
    open var bCrouchMaintainsBaseLocation: Boolean
    open var bIgnoreBaseRotation: Boolean
    open var bFastAttachedMove: Boolean
    open var bAlwaysCheckFloor: Boolean
    open var bUseFlatBaseForFloorChecks: Boolean
    open var bPerformingJumpOff: Boolean
    open var bWantsToLeaveNavWalking: Boolean
    open var bUseRVOAvoidance: Boolean
    open var bRequestedMoveUseAcceleration: Boolean
    open var bWasSimulatingRootMotion: Boolean
    open var bAllowPhysicsRotationDuringAnimRootMotion: Boolean
    open var bHasRequestedVelocity: Boolean
    open var bRequestedMoveWithMaxSpeed: Boolean
    open var bWasAvoidanceUpdated: Boolean
    open var bProjectNavMeshWalking: Boolean
    open var bProjectNavMeshOnBothWorldChannels: Boolean
    open var AvoidanceConsiderationRadius: Number
    open var RequestedVelocity: Vector
    open var AvoidanceUID: Number
    open var AvoidanceGroup: NavAvoidanceMask
    open var GroupsToAvoid: NavAvoidanceMask
    open var GroupsToIgnore: NavAvoidanceMask
    open var AvoidanceWeight: Number
    open var PendingLaunchVelocity: Vector
    open var NavMeshProjectionInterval: Number
    open var NavMeshProjectionTimer: Number
    open var NavMeshProjectionInterpSpeed: Number
    open var NavMeshProjectionHeightScaleUp: Number
    open var NavMeshProjectionHeightScaleDown: Number
    open var NavWalkingFloorDistTolerance: Number
    open var PostPhysicsTickFunction: CharacterMovementComponentPostPhysicsTickFunction
    open var MinTimeBetweenTimeStampResets: Number
    open var CurrentRootMotion: RootMotionSourceGroup
    open var RootMotionParams: RootMotionMovementParams
    open var AnimRootMotionVelocity: Vector
    open fun SetWalkableFloorZ(InWalkableFloorZ: Number)
    open fun SetWalkableFloorAngle(InWalkableFloorAngle: Number)
    open fun SetMovementMode(NewMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, NewCustomMode: Number)
    open fun SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask)
    open fun SetGroupsToIgnore(GroupFlags: Number)
    open fun SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask)
    open fun SetGroupsToAvoid(GroupFlags: Number)
    open fun SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask)
    open fun SetAvoidanceGroup(GroupFlags: Number)
    open fun SetAvoidanceEnabled(bEnable: Boolean)
    open fun K2_GetWalkableFloorZ(): Number
    open fun K2_GetWalkableFloorAngle(): Number
    open fun K2_GetModifiedMaxAcceleration(): Number
    open fun K2_FindFloor(CapsuleLocation: Vector, FloorResult: FindFloorResult = definedExternally): `T$375`
    open fun K2_ComputeFloorDist(CapsuleLocation: Vector, LineDistance: Number, SweepDistance: Number, SweepRadius: Number, FloorResult: FindFloorResult = definedExternally): `T$375`
    open fun IsWalking(): Boolean
    open fun IsWalkable(Hit: HitResult): Boolean
    open fun GetValidPerchRadius(): Number
    open fun GetPerchRadiusThreshold(): Number
    open fun GetMovementBase(): PrimitiveComponent
    open fun GetMinAnalogSpeed(): Number
    open fun GetMaxJumpHeightWithJumpTime(): Number
    open fun GetMaxJumpHeight(): Number
    open fun GetMaxBrakingDeceleration(): Number
    open fun GetMaxAcceleration(): Number
    open fun GetLastUpdateVelocity(): Vector
    open fun GetLastUpdateRotation(): Rotator
    open fun GetLastUpdateLocation(): Vector
    open fun GetImpartedMovementBaseVelocity(): Vector
    open fun GetCurrentAcceleration(): Vector
    open fun GetCharacterOwner(): Character
    open fun GetAnalogInputModifier(): Number
    open fun DisableMovement()
    open fun ClearAccumulatedForces()
    open fun CapsuleTouched(OverlappedComp: PrimitiveComponent, Other: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: Number, bFromSweep: Boolean, SweepResult: HitResult)
    open fun CalcVelocity(DeltaTime: Number, Friction: Number, bFluid: Boolean, BrakingDeceleration: Number)
    open fun AddImpulse(Impulse: Vector, bVelocityChange: Boolean)
    open fun AddForce(Force: Vector)

    companion object {
        fun Load(ResourceName: String): CharacterMovementComponent
        fun Find(Outer: UObject, ResourceName: String): CharacterMovementComponent
        fun GetDefaultObject(): CharacterMovementComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CharacterMovementComponent
        fun C(Other: UObject): CharacterMovementComponent
        fun C(Other: Any): CharacterMovementComponent
    }
}

external interface `T$376` {
    var OutRadius: Number
    var OutHalfHeightWithoutHemisphere: Number
}

external interface `T$377` {
    var OutRadius: Number
    var OutHalfHeight: Number
}

external open class CapsuleComponent : ShapeComponent {
    constructor()
    constructor(Outer: UObject)
    open var CapsuleHalfHeight: Number
    open var CapsuleRadius: Number
    open var CapsuleHeight: Number
    open fun SetCapsuleSize(InRadius: Number, InHalfHeight: Number, bUpdateOverlaps: Boolean)
    open fun SetCapsuleRadius(Radius: Number, bUpdateOverlaps: Boolean)
    open fun SetCapsuleHalfHeight(HalfHeight: Number, bUpdateOverlaps: Boolean)
    open fun GetUnscaledCapsuleSize_WithoutHemisphere(OutRadius: Number = definedExternally, OutHalfHeightWithoutHemisphere: Number = definedExternally): `T$376`
    open fun GetUnscaledCapsuleSize(OutRadius: Number = definedExternally, OutHalfHeight: Number = definedExternally): `T$377`
    open fun GetUnscaledCapsuleRadius(): Number
    open fun GetUnscaledCapsuleHalfHeight_WithoutHemisphere(): Number
    open fun GetUnscaledCapsuleHalfHeight(): Number
    open fun GetShapeScale(): Number
    open fun GetScaledCapsuleSize_WithoutHemisphere(OutRadius: Number = definedExternally, OutHalfHeightWithoutHemisphere: Number = definedExternally): `T$376`
    open fun GetScaledCapsuleSize(OutRadius: Number = definedExternally, OutHalfHeight: Number = definedExternally): `T$377`
    open fun GetScaledCapsuleRadius(): Number
    open fun GetScaledCapsuleHalfHeight_WithoutHemisphere(): Number
    open fun GetScaledCapsuleHalfHeight(): Number

    companion object {
        fun Load(ResourceName: String): CapsuleComponent
        fun Find(Outer: UObject, ResourceName: String): CapsuleComponent
        fun GetDefaultObject(): CapsuleComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CapsuleComponent
        fun C(Other: UObject): CapsuleComponent
        fun C(Other: Any): CapsuleComponent
    }
}

external open class Vector_NetQuantize100 : Vector {
    override fun clone(): Vector_NetQuantize100

    companion object {
        fun C(Other: UObject): Vector_NetQuantize100
        fun C(Other: Any): Vector_NetQuantize100
    }
}

external open class BasedMovementInfo {
    open var MovementBase: PrimitiveComponent
    open var BoneName: String
    open var Location: Vector_NetQuantize100
    open var Rotation: Rotator
    open var bServerHasBaseComponent: Boolean
    open var bRelativeRotation: Boolean
    open var bServerHasVelocity: Boolean
    open fun clone(): BasedMovementInfo

    companion object {
        fun C(Other: UObject): BasedMovementInfo
        fun C(Other: Any): BasedMovementInfo
    }
}

external open class RepRootMotionMontage {
    open var bIsActive: Boolean
    open var AnimMontage: AnimMontage
    open var Position: Number
    open var Location: Vector_NetQuantize100
    open var Rotation: Rotator
    open var MovementBase: PrimitiveComponent
    open var MovementBaseBoneName: String
    open var bRelativePosition: Boolean
    open var bRelativeRotation: Boolean
    open var AuthoritativeRootMotion: RootMotionSourceGroup
    open var Acceleration: Vector_NetQuantize10
    open var LinearVelocity: Vector_NetQuantize10
    open fun clone(): RepRootMotionMontage

    companion object {
        fun C(Other: UObject): RepRootMotionMontage
        fun C(Other: Any): RepRootMotionMontage
    }
}

external open class SimulatedRootMotionReplicatedMove {
    open var Time: Number
    open var RootMotion: RepRootMotionMontage
    open fun clone(): SimulatedRootMotionReplicatedMove

    companion object {
        fun C(Other: UObject): SimulatedRootMotionReplicatedMove
        fun C(Other: Any): SimulatedRootMotionReplicatedMove
    }
}

external open class Character(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Pawn {
    open var Mesh: SkeletalMeshComponent
    open var CharacterMovement: CharacterMovementComponent
    open var CapsuleComponent: CapsuleComponent
    open var ArrowComponent: ArrowComponent
    open var BasedMovement: BasedMovementInfo
    open var ReplicatedBasedMovement: BasedMovementInfo
    open var AnimRootMotionTranslationScale: Number
    open var BaseTranslationOffset: Vector
    open var BaseRotationOffset: Quat
    open var ReplicatedServerLastTransformUpdateTimeStamp: Number
    open var ReplayLastTransformUpdateTimeStamp: Number
    open var ReplicatedMovementMode: Number
    open var bInBaseReplication: Boolean
    open var CrouchedEyeHeight: Number
    open var bIsCrouched: Boolean
    open var bProxyIsJumpForceApplied: Boolean
    open var bPressedJump: Boolean
    open var bClientUpdating: Boolean
    open var bClientWasFalling: Boolean
    open var bClientResimulateRootMotion: Boolean
    open var bClientResimulateRootMotionSources: Boolean
    open var bSimGravityDisabled: Boolean
    open var bClientCheckEncroachmentOnNetUpdate: Boolean
    open var bServerMoveIgnoreRootMotion: Boolean
    open var bWasJumping: Boolean
    open var JumpKeyHoldTime: Number
    open var JumpForceTimeRemaining: Number
    open var ProxyJumpForceStartedTime: Number
    open var JumpMaxHoldTime: Number
    open var JumpMaxCount: Number
    open var JumpCurrentCount: Number
    open var OnReachedJumpApex: UnrealEngineMulticastDelegate<() -> Unit>
    open var MovementModeChangedDelegate: UnrealEngineMulticastDelegate<(Character: Character, PrevMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, PreviousCustomMode: Number) -> Unit>
    open var OnCharacterMovementUpdated: UnrealEngineMulticastDelegate<(DeltaSeconds: Number, OldLocation: Vector, OldVelocity: Vector) -> Unit>
    open var SavedRootMotion: RootMotionSourceGroup
    open var ClientRootMotionParams: RootMotionMovementParams
    open var RootMotionRepMoves: Array<SimulatedRootMotionReplicatedMove>
    open var RepRootMotion: RepRootMotionMontage
    open fun UnCrouch(bClientSimulation: Boolean)
    open fun StopJumping()
    open fun StopAnimMontage(AnimMontage: AnimMontage)
    open fun ServerMoveOld(OldTimeStamp: Number, OldAccel: Vector_NetQuantize10, OldMoveFlags: Number)
    open fun ServerMoveNoBase(Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: Number, ClientRoll: Number, View: Any, ClientMovementMode: Number)
    open fun ServerMoveDualNoBase(TimeStamp0: Number, InAccel0: Vector_NetQuantize10, PendingFlags: Number, View0: Any, Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: Number, ClientRoll: Number, View: Any, ClientMovementMode: Number)
    open fun ServerMoveDualHybridRootMotion(TimeStamp0: Number, InAccel0: Vector_NetQuantize10, PendingFlags: Number, View0: Any, Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: Number, ClientRoll: Number, View: Any, ClientMovementBase: PrimitiveComponent, ClientBaseBoneName: String, ClientMovementMode: Number)
    open fun ServerMoveDual(TimeStamp0: Number, InAccel0: Vector_NetQuantize10, PendingFlags: Number, View0: Any, Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: Number, ClientRoll: Number, View: Any, ClientMovementBase: PrimitiveComponent, ClientBaseBoneName: String, ClientMovementMode: Number)
    open fun ServerMove(Timestamp: Number, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: Number, ClientRoll: Number, View: Any, ClientMovementBase: PrimitiveComponent, ClientBaseBoneName: String, ClientMovementMode: Number)
    open fun RootMotionDebugClientPrintOnScreen(inString: String)
    open fun PlayAnimMontage(AnimMontage: AnimMontage, InPlayRate: Number, StartSectionName: String): Number
    open fun OnWalkingOffLedge(PreviousFloorImpactNormal: Vector, PreviousFloorContactNormal: Vector, PreviousLocation: Vector, TimeDelta: Number)
    open fun OnRep_RootMotion()
    open fun OnRep_ReplicatedBasedMovement()
    open fun OnRep_ReplayLastTransformUpdateTimeStamp()
    open fun OnRep_IsCrouched()
    open fun OnLaunched(LaunchVelocity: Vector, bXYOverride: Boolean, bZOverride: Boolean)
    open fun OnLanded(Hit: HitResult)
    open fun OnJumped()
    open fun LaunchCharacter(LaunchVelocity: Vector, bXYOverride: Boolean, bZOverride: Boolean)
    open fun K2_UpdateCustomMovement(DeltaTime: Number)
    open fun K2_OnStartCrouch(HalfHeightAdjust: Number, ScaledHalfHeightAdjust: Number)
    open fun K2_OnMovementModeChanged(PrevMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, NewMovementMode: String /* "MOVE_None" | "MOVE_Walking" | "MOVE_NavWalking" | "MOVE_Falling" | "MOVE_Swimming" | "MOVE_Flying" | "MOVE_Custom" | "MOVE_MAX" */, PrevCustomMode: Number, NewCustomMode: Number)
    open fun K2_OnEndCrouch(HalfHeightAdjust: Number, ScaledHalfHeightAdjust: Number)
    open fun Jump()
    open fun IsPlayingRootMotion(): Boolean
    open fun IsPlayingNetworkedRootMotionMontage(): Boolean
    open fun IsJumpProvidingForce(): Boolean
    open fun HasAnyRootMotion(): Boolean
    open fun GetCurrentMontage(): AnimMontage
    open fun GetBaseTranslationOffset(): Vector
    open fun GetBaseRotationOffsetRotator(): Rotator
    open fun GetAnimRootMotionTranslationScale(): Number
    open fun Crouch(bClientSimulation: Boolean)
    open fun ClientVeryShortAdjustPosition(Timestamp: Number, NewLoc: Vector, NewBase: PrimitiveComponent, NewBaseBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientCheatWalk()
    open fun ClientCheatGhost()
    open fun ClientCheatFly()
    open fun ClientAdjustRootMotionSourcePosition(Timestamp: Number, ServerRootMotion: RootMotionSourceGroup, bHasAnimRootMotion: Boolean, ServerMontageTrackPosition: Number, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: Number, ServerBase: PrimitiveComponent, ServerBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientAdjustRootMotionPosition(Timestamp: Number, ServerMontageTrackPosition: Number, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: Number, ServerBase: PrimitiveComponent, ServerBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientAdjustPosition(Timestamp: Number, NewLoc: Vector, NewVel: Vector, NewBase: PrimitiveComponent, NewBaseBoneName: String, bHasBase: Boolean, bBaseRelativePosition: Boolean, ServerMovementMode: Number)
    open fun ClientAckGoodMove(Timestamp: Number)
    open fun CanJumpInternal(): Boolean
    open fun CanJump(): Boolean
    open fun CanCrouch(): Boolean
    open fun CacheInitialMeshOffset(MeshRelativeLocation: Vector, MeshRelativeRotation: Rotator)

    companion object {
        fun GetDefaultObject(): Character
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Character
        fun C(Other: UObject): Character
        fun C(Other: Any): Character
    }
}

external object ENavPathEvent {
    var Cleared: String /* "Cleared" */
    var NewPath: String /* "NewPath" */
    var UpdatedDueToGoalMoved: String /* "UpdatedDueToGoalMoved" */
    var UpdatedDueToNavigationChanged: String /* "UpdatedDueToNavigationChanged" */
    var Invalidated: String /* "Invalidated" */
    var RePathFailed: String /* "RePathFailed" */
    var MetaPathUpdate: String /* "MetaPathUpdate" */
    var Custom: String /* "Custom" */
    var ENavPathEvent_MAX: String /* "ENavPathEvent_MAX" */
}

external object ENavigationOptionFlag {
    var Default: String /* "Default" */
    var Enable: String /* "Enable" */
    var Disable: String /* "Disable" */
    var MAX: String /* "MAX" */
}

external open class NavigationPath : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PathUpdatedNotifier: UnrealEngineMulticastDelegate<(AffectedPath: NavigationPath, PathEvent: String /* "Cleared" | "NewPath" | "UpdatedDueToGoalMoved" | "UpdatedDueToNavigationChanged" | "Invalidated" | "RePathFailed" | "MetaPathUpdate" | "Custom" | "ENavPathEvent_MAX" */) -> Unit>
    open var PathPoints: Array<Vector>
    open var RecalculateOnInvalidation: String /* "Default" | "Enable" | "Disable" | "MAX" */
    override fun IsValid(): Boolean
    open fun IsStringPulled(): Boolean
    open fun IsPartial(): Boolean
    open fun GetPathLength(): Number
    open fun GetPathCost(): Number
    open fun GetDebugString(): String
    open fun EnableRecalculationOnInvalidation(DoRecalculation: String /* "Default" | "Enable" | "Disable" | "MAX" */)
    open fun EnableDebugDrawing(bShouldDrawDebugData: Boolean, PathColor: LinearColor)

    companion object {
        fun Load(ResourceName: String): NavigationPath
        fun Find(Outer: UObject, ResourceName: String): NavigationPath
        fun GetDefaultObject(): NavigationPath
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationPath
        fun C(Other: UObject): NavigationPath
        fun C(Other: Any): NavigationPath
    }
}

external open class Controller(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var PlayerState: PlayerState
    open var OnInstigatedAnyDamage: UnrealEngineMulticastDelegate<(Damage: Number, DamageType: DamageType, DamagedActor: Actor, DamageCauser: Actor) -> Unit>
    open var StateName: String
    open var Pawn: Pawn
    open var Character: Character
    open var TransformComponent: SceneComponent
    open var ControlRotation: Rotator
    open var bAttachToPawn: Boolean
    open fun UnPossess()
    open fun StopMovement()
    open fun SetInitialLocationAndRotation(NewLocation: Vector, NewRotation: Rotator)
    open fun SetIgnoreMoveInput(bNewMoveInput: Boolean)
    open fun SetIgnoreLookInput(bNewLookInput: Boolean)
    open fun SetControlRotation(NewRotation: Rotator)
    open fun ResetIgnoreMoveInput()
    open fun ResetIgnoreLookInput()
    open fun ResetIgnoreInputFlags()
    open fun ReceiveUnPossess(UnpossessedPawn: Pawn)
    open fun ReceivePossess(PossessedPawn: Pawn)
    open fun ReceiveInstigatedAnyDamage(Damage: Number, DamageType: DamageType, DamagedActor: Actor, DamageCauser: Actor)
    open fun Possess(InPawn: Pawn)
    open fun OnRep_PlayerState()
    open fun OnRep_Pawn()
    open fun LineOfSightTo(Other: Actor, ViewPoint: Vector, bAlternateChecks: Boolean): Boolean
    open fun K2_GetPawn(): Pawn
    open fun IsPlayerController(): Boolean
    open fun IsMoveInputIgnored(): Boolean
    open fun IsLookInputIgnored(): Boolean
    open fun IsLocalPlayerController(): Boolean
    open fun IsLocalController(): Boolean
    open fun GetViewTarget(): Actor
    open fun GetDesiredRotation(): Rotator
    open fun GetControlRotation(): Rotator
    open fun ClientSetRotation(NewRotation: Rotator, bResetCamera: Boolean)
    open fun ClientSetLocation(NewLocation: Vector, NewRotation: Rotator)
    open fun CastToPlayerController(): PlayerController
    open fun GetCurrentPath(): NavigationPath
    open fun SimpleMoveToActor(Goal: Actor)
    open fun SimpleMoveToLocation(Goal: Vector)

    companion object {
        fun GetDefaultObject(): Controller
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Controller
        fun C(Other: UObject): Controller
        fun C(Other: Any): Controller
        fun GetCurrentPath(Controller: Controller): NavigationPath
        fun SimpleMoveToActor(Controller: Controller, Goal: Actor)
        fun SimpleMoveToLocation(Controller: Controller, Goal: Vector)
    }
}

external open class Pawn(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var bUseControllerRotationPitch: Boolean
    open var bUseControllerRotationYaw: Boolean
    open var bUseControllerRotationRoll: Boolean
    open var bCanAffectNavigationGeneration: Boolean
    open var BaseEyeHeight: Number
    open var AutoPossessPlayer: String /* "Disabled" | "Player0" | "Player1" | "Player2" | "Player3" | "Player4" | "Player5" | "Player6" | "Player7" | "EAutoReceiveInput_MAX" */
    open var AutoPossessAI: String /* "Disabled" | "PlacedInWorld" | "Spawned" | "PlacedInWorldOrSpawned" | "EAutoPossessAI_MAX" */
    open var RemoteViewPitch: Number
    open var AIControllerClass: UnrealEngineClass
    open var PlayerState: PlayerState
    open var LastHitBy: Controller
    open var Controller: Controller
    open var ControlInputVector: Vector
    open var LastControlInputVector: Vector
    open fun SpawnDefaultController()
    open fun SetCanAffectNavigationGeneration(bNewValue: Boolean, bForceUpdate: Boolean)
    open fun ReceiveUnpossessed(OldController: Controller)
    open fun ReceivePossessed(NewController: Controller)
    open fun PawnMakeNoise(Loudness: Number, NoiseLocation: Vector, bUseNoiseMakerLocation: Boolean, NoiseMaker: Actor)
    open fun OnRep_PlayerState()
    open fun OnRep_Controller()
    open fun LaunchPawn(LaunchVelocity: Vector, bXYOverride: Boolean, bZOverride: Boolean)
    open fun K2_GetMovementInputVector(): Vector
    open fun IsPlayerControlled(): Boolean
    open fun IsMoveInputIgnored(): Boolean
    open fun IsLocallyControlled(): Boolean
    open fun IsControlled(): Boolean
    open fun IsBotControlled(): Boolean
    open fun GetPendingMovementInputVector(): Vector
    open fun GetNavAgentLocation(): Vector
    open fun GetMovementComponent(): PawnMovementComponent
    open fun GetLastMovementInputVector(): Vector
    open fun GetControlRotation(): Rotator
    open fun GetController(): Controller
    open fun GetBaseAimRotation(): Rotator
    open fun DetachFromControllerPendingDestroy()
    open fun ConsumeMovementInputVector(): Vector
    open fun AddMovementInput(WorldDirection: Vector, ScaleValue: Number, bForce: Boolean)
    open fun AddControllerYawInput(Val: Number)
    open fun AddControllerRollInput(Val: Number)
    open fun AddControllerPitchInput(Val: Number)
    open fun SendAIMessage(Message: String, MessageSource: UObject, bSuccess: Boolean)

    companion object {
        fun GetDefaultObject(): Pawn
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Pawn
        fun GetMovementBaseActor(Pawn: Pawn): Actor
        fun C(Other: UObject): Pawn
        fun C(Other: Any): Pawn
        fun SendAIMessage(Target: Pawn, Message: String, MessageSource: UObject, bSuccess: Boolean)
    }
}

external object ERadialImpulseFalloff {
    var RIF_Constant: String /* "RIF_Constant" */
    var RIF_Linear: String /* "RIF_Linear" */
    var RIF_MAX: String /* "RIF_MAX" */
}

external interface `T$378` {
    var HitLocation: Vector
    var HitNormal: Vector
    var BoneName: String
    var OutHit: HitResult
    var `$`: Boolean
}

external interface `T$379` {
    var OutOverlappingComponents: Array<PrimitiveComponent>
}

external interface `T$380` {
    var OverlappingActors: Array<Actor>
}

external interface `T$381` {
    var SectionIndex: Number
    var `$`: MaterialInterface
}

external interface `T$382` {
    var OutPointOnBody: Vector
    var `$`: Number
}

external interface `T$383` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$384` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$385` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$386` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external open class PrimitiveComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var MinDrawDistance: Number
    open var LDMaxDrawDistance: Number
    open var CachedMaxDrawDistance: Number
    open var DepthPriorityGroup: String /* "SDPG_World" | "SDPG_Foreground" | "SDPG_MAX" */
    open var ViewOwnerDepthPriorityGroup: String /* "SDPG_World" | "SDPG_Foreground" | "SDPG_MAX" */
    open var IndirectLightingCacheQuality: String /* "ILCQ_Off" | "ILCQ_Point" | "ILCQ_Volume" | "ILCQ_MAX" */
    open var LightmapType: String /* "Default" | "ForceSurface" | "ForceVolumetric" | "ELightmapType_MAX" */
    open var ExcludeForSpecificHLODLevels: Array<Number>
    open var bEnableAutoLODGeneration: Boolean
    open var bUseMaxLODAsImposter: Boolean
    open var bNeverDistanceCull: Boolean
    open var bAlwaysCreatePhysicsState: Boolean
    open var bGenerateOverlapEvents: Boolean
    open var bMultiBodyOverlap: Boolean
    open var bTraceComplexOnMove: Boolean
    open var bReturnMaterialOnMove: Boolean
    open var bUseViewOwnerDepthPriorityGroup: Boolean
    open var bAllowCullDistanceVolume: Boolean
    open var bHasMotionBlurVelocityMeshes: Boolean
    open var bVisibleInReflectionCaptures: Boolean
    open var bVisibleInRayTracing: Boolean
    open var bRenderInMainPass: Boolean
    open var bReceivesDecals: Boolean
    open var bOwnerNoSee: Boolean
    open var bOnlyOwnerSee: Boolean
    open var bTreatAsBackgroundForOcclusion: Boolean
    open var bUseAsOccluder: Boolean
    open var bSelectable: Boolean
    open var bForceMipStreaming: Boolean
    open var bHasPerInstanceHitProxies: Boolean
    open var CastShadow: Boolean
    open var bAffectDynamicIndirectLighting: Boolean
    open var bAffectDistanceFieldLighting: Boolean
    open var bCastDynamicShadow: Boolean
    open var bCastStaticShadow: Boolean
    open var bCastVolumetricTranslucentShadow: Boolean
    open var bSelfShadowOnly: Boolean
    open var bCastFarShadow: Boolean
    open var bCastInsetShadow: Boolean
    open var bCastCinematicShadow: Boolean
    open var bCastHiddenShadow: Boolean
    open var bCastShadowAsTwoSided: Boolean
    open var bLightAsIfStatic: Boolean
    open var bLightAttachmentsAsGroup: Boolean
    open var bReceiveMobileCSMShadows: Boolean
    open var bSingleSampleShadowFromStationaryLights: Boolean
    open var bIgnoreRadialImpulse: Boolean
    open var bIgnoreRadialForce: Boolean
    open var bApplyImpulseOnDamage: Boolean
    open var bReplicatePhysicsToAutonomousProxy: Boolean
    open var AlwaysLoadOnClient: Boolean
    open var AlwaysLoadOnServer: Boolean
    open var bUseEditorCompositing: Boolean
    open var bRenderCustomDepth: Boolean
    open var bHasCustomNavigableGeometry: String /* "No" | "Yes" | "EvenIfNotCollidable" | "DontExport" | "EHasCustomNavigableGeometry_MAX" */
    open var CanBeCharacterBase: String /* "ECB_No" | "ECB_Yes" | "ECB_Owner" | "ECB_MAX" */
    open var CanCharacterStepUpOn: String /* "ECB_No" | "ECB_Yes" | "ECB_Owner" | "ECB_MAX" */
    open var LightingChannels: LightingChannels
    open var CustomDepthStencilWriteMask: String /* "ERSM_Default" | "ERSM_255" | "ERSM_1" | "ERSM_2" | "ERSM_4" | "ERSM_8" | "ERSM_16" | "ERSM_32" | "ERSM_64" | "ERSM_128" | "ERSM_MAX" */
    open var CustomDepthStencilValue: Number
    open var CustomPrimitiveData: CustomPrimitiveData
    open var TranslucencySortPriority: Number
    open var VisibilityId: Number
    open var RuntimeVirtualTextures: Array<RuntimeVirtualTexture>
    open var VirtualTextureLodBias: Number
    open var VirtualTextureCullMips: Number
    open var VirtualTextureMinCoverage: Number
    open var VirtualTextureRenderPassType: String /* "Never" | "Exclusive" | "Always" | "ERuntimeVirtualTextureMainPassType_MAX" */
    open var LpvBiasMultiplier: Number
    open var BoundsScale: Number
    open var MoveIgnoreActors: Array<Actor>
    open var MoveIgnoreComponents: Array<PrimitiveComponent>
    open var BodyInstance: BodyInstance
    open var OnComponentHit: UnrealEngineMulticastDelegate<(HitComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, NormalImpulse: Vector, Hit: HitResult) -> Unit>
    open var OnComponentBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: Number, bFromSweep: Boolean, SweepResult: HitResult) -> Unit>
    open var OnComponentEndOverlap: UnrealEngineMulticastDelegate<(OverlappedComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: Number) -> Unit>
    open var OnComponentWake: UnrealEngineMulticastDelegate<(WakingComponent: PrimitiveComponent, BoneName: String) -> Unit>
    open var OnComponentSleep: UnrealEngineMulticastDelegate<(SleepingComponent: PrimitiveComponent, BoneName: String) -> Unit>
    open var OnBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) -> Unit>
    open var OnEndCursorOver: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) -> Unit>
    open var OnClicked: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent, ButtonPressed: Key) -> Unit>
    open var OnReleased: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent, ButtonReleased: Key) -> Unit>
    open var OnInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedComponent: PrimitiveComponent) -> Unit>
    open var OnInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedComponent: PrimitiveComponent) -> Unit>
    open var OnInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedComponent: PrimitiveComponent) -> Unit>
    open var OnInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedComponent: PrimitiveComponent) -> Unit>
    open var LODParentPrimitive: PrimitiveComponent
    open fun WakeRigidBody(BoneName: String)
    open fun WakeAllRigidBodies()
    open fun SetWalkableSlopeOverride(NewOverride: WalkableSlopeOverride)
    open fun SetUseCCD(InUseCCD: Boolean, BoneName: String)
    open fun SetTranslucentSortPriority(NewTranslucentSortPriority: Number)
    open fun SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights: Boolean)
    open fun SetSimulatePhysics(bSimulate: Boolean)
    open fun SetRenderInMainPass(bValue: Boolean)
    open fun SetRenderCustomDepth(bValue: Boolean)
    open fun SetReceivesDecals(bNewReceivesDecals: Boolean)
    open fun SetPhysMaterialOverride(NewPhysMaterial: PhysicalMaterial)
    open fun SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel: Number, bAddToCurrent: Boolean, BoneName: String)
    open fun SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel: Number, bAddToCurrent: Boolean, BoneName: String)
    open fun SetPhysicsMaxAngularVelocity(NewMaxAngVel: Number, bAddToCurrent: Boolean, BoneName: String)
    open fun SetPhysicsLinearVelocity(NewVel: Vector, bAddToCurrent: Boolean, BoneName: String)
    open fun SetPhysicsAngularVelocityInRadians(NewAngVel: Vector, bAddToCurrent: Boolean, BoneName: String)
    open fun SetPhysicsAngularVelocityInDegrees(NewAngVel: Vector, bAddToCurrent: Boolean, BoneName: String)
    open fun SetPhysicsAngularVelocity(NewAngVel: Vector, bAddToCurrent: Boolean, BoneName: String)
    open fun SetOwnerNoSee(bNewOwnerNoSee: Boolean)
    open fun SetOnlyOwnerSee(bNewOnlyOwnerSee: Boolean)
    open fun SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: Boolean)
    open fun SetMaterialByName(MaterialSlotName: String, Material: MaterialInterface)
    open fun SetMaterial(ElementIndex: Number, Material: MaterialInterface)
    open fun SetMassScale(BoneName: String, InMassScale: Number)
    open fun SetMassOverrideInKg(BoneName: String, MassInKg: Number, bOverrideMass: Boolean)
    open fun SetLinearDamping(InDamping: Number)
    open fun SetGenerateOverlapEvents(bInGenerateOverlapEvents: Boolean)
    open fun SetEnableGravity(bGravityEnabled: Boolean)
    open fun SetCustomPrimitiveDataVector4(DataIndex: Number, Value: Vector4)
    open fun SetCustomPrimitiveDataVector3(DataIndex: Number, Value: Vector)
    open fun SetCustomPrimitiveDataVector2(DataIndex: Number, Value: Vector2D)
    open fun SetCustomPrimitiveDataFloat(DataIndex: Number, Value: Number)
    open fun SetCustomDepthStencilWriteMask(WriteMaskBit: String /* "ERSM_Default" | "ERSM_255" | "ERSM_1" | "ERSM_2" | "ERSM_4" | "ERSM_8" | "ERSM_16" | "ERSM_32" | "ERSM_64" | "ERSM_128" | "ERSM_MAX" */)
    open fun SetCustomDepthStencilValue(Value: Number)
    open fun SetCullDistance(NewCullDistance: Number)
    open fun SetConstraintMode(ConstraintMode: String /* "Default" | "SixDOF" | "YZPlane" | "XZPlane" | "XYPlane" | "CustomPlane" | "None" | "EDOFMode_MAX" */)
    open fun SetCollisionResponseToChannel(Channel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */, NewResponse: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */)
    open fun SetCollisionResponseToAllChannels(NewResponse: String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */)
    open fun SetCollisionProfileName(InCollisionProfileName: String)
    open fun SetCollisionObjectType(Channel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */)
    open fun SetCollisionEnabled(NewType: String /* "NoCollision" | "QueryOnly" | "PhysicsOnly" | "QueryAndPhysics" | "ECollisionEnabled_MAX" */)
    open fun SetCenterOfMass(CenterOfMassOffset: Vector, BoneName: String)
    open fun SetCastShadow(NewCastShadow: Boolean)
    open fun SetBoundsScale(NewBoundsScale: Number)
    open fun SetAngularDamping(InDamping: Number)
    open fun SetAllUseCCD(InUseCCD: Boolean)
    open fun SetAllPhysicsLinearVelocity(NewVel: Vector, bAddToCurrent: Boolean)
    open fun SetAllPhysicsAngularVelocityInRadians(NewAngVel: Vector, bAddToCurrent: Boolean)
    open fun SetAllPhysicsAngularVelocityInDegrees(NewAngVel: Vector, bAddToCurrent: Boolean)
    open fun SetAllMassScale(InMassScale: Number)
    open fun ScaleByMomentOfInertia(InputVector: Vector, BoneName: String): Vector
    open fun PutRigidBodyToSleep(BoneName: String)
    open fun K2_SphereTraceComponent(TraceStart: Vector, TraceEnd: Vector, SphereRadius: Number, bTraceComplex: Boolean, bShowTrace: Boolean, bPersistentShowTrace: Boolean, HitLocation: Vector = definedExternally, HitNormal: Vector = definedExternally, BoneName: String = definedExternally, OutHit: HitResult = definedExternally): `T$378`
    open fun K2_SphereOverlapComponent(InSphereCentre: Vector, InSphereRadius: Number, bTraceComplex: Boolean, bShowTrace: Boolean, bPersistentShowTrace: Boolean, HitLocation: Vector = definedExternally, HitNormal: Vector = definedExternally, BoneName: String = definedExternally, OutHit: HitResult = definedExternally): `T$378`
    open fun K2_LineTraceComponent(TraceStart: Vector, TraceEnd: Vector, bTraceComplex: Boolean, bShowTrace: Boolean, bPersistentShowTrace: Boolean, HitLocation: Vector = definedExternally, HitNormal: Vector = definedExternally, BoneName: String = definedExternally, OutHit: HitResult = definedExternally): `T$378`
    open fun K2_IsQueryCollisionEnabled(): Boolean
    open fun K2_IsPhysicsCollisionEnabled(): Boolean
    open fun K2_IsCollisionEnabled(): Boolean
    open fun K2_BoxOverlapComponent(InBoxCentre: Vector, InBox: Box, bTraceComplex: Boolean, bShowTrace: Boolean, bPersistentShowTrace: Boolean, HitLocation: Vector = definedExternally, HitNormal: Vector = definedExternally, BoneName: String = definedExternally, OutHit: HitResult = definedExternally): `T$378`
    open fun IsOverlappingComponent(OtherComp: PrimitiveComponent): Boolean
    open fun IsOverlappingActor(Other: Actor): Boolean
    open fun IsGravityEnabled(): Boolean
    open fun IsAnyRigidBodyAwake(): Boolean
    open fun IgnoreComponentWhenMoving(Component: PrimitiveComponent, bShouldIgnore: Boolean)
    open fun IgnoreActorWhenMoving(Actor: Actor, bShouldIgnore: Boolean)
    open fun GetWalkableSlopeOverride(): WalkableSlopeOverride
    open fun GetPhysicsLinearVelocityAtPoint(Point: Vector, BoneName: String): Vector
    open fun GetPhysicsLinearVelocity(BoneName: String): Vector
    open fun GetPhysicsAngularVelocityInRadians(BoneName: String): Vector
    open fun GetPhysicsAngularVelocityInDegrees(BoneName: String): Vector
    open fun GetPhysicsAngularVelocity(BoneName: String): Vector
    open fun GetOverlappingComponents(OutOverlappingComponents: Array<PrimitiveComponent> = definedExternally): `T$379`
    open fun GetOverlappingActors(OverlappingActors: Array<Actor> = definedExternally, ClassFilter: UnrealEngineClass = definedExternally): `T$380`
    open fun GetNumMaterials(): Number
    open fun GetMaterialFromCollisionFaceIndex(FaceIndex: Number, SectionIndex: Number = definedExternally): `T$381`
    open fun GetMaterial(ElementIndex: Number): MaterialInterface
    open fun GetMassScale(BoneName: String): Number
    open fun GetMass(): Number
    open fun GetLinearDamping(): Number
    open fun GetInertiaTensor(BoneName: String): Vector
    open fun GetGenerateOverlapEvents(): Boolean
    open fun GetCollisionResponseToChannel(Channel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): String /* "ECR_Ignore" | "ECR_Overlap" | "ECR_Block" | "ECR_MAX" */
    open fun GetCollisionProfileName(): String
    open fun GetCollisionObjectType(): String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open fun GetCollisionEnabled(): String /* "NoCollision" | "QueryOnly" | "PhysicsOnly" | "QueryAndPhysics" | "ECollisionEnabled_MAX" */
    open fun GetClosestPointOnCollision(Point: Vector, OutPointOnBody: Vector = definedExternally, BoneName: String = definedExternally): `T$382`
    open fun GetCenterOfMass(BoneName: String): Vector
    open fun GetAngularDamping(): Number
    open fun CreateDynamicMaterialInstance(ElementIndex: Number, SourceMaterial: MaterialInterface, OptionalName: String): MaterialInstanceDynamic
    open fun CreateAndSetMaterialInstanceDynamicFromMaterial(ElementIndex: Number, Parent: MaterialInterface): MaterialInstanceDynamic
    open fun CreateAndSetMaterialInstanceDynamic(ElementIndex: Number): MaterialInstanceDynamic
    open fun CopyArrayOfMoveIgnoreComponents(): Array<PrimitiveComponent>
    open fun CopyArrayOfMoveIgnoreActors(): Array<Actor>
    open fun ClearMoveIgnoreComponents()
    open fun ClearMoveIgnoreActors()
    open fun CanCharacterStepUp(Pawn: Pawn): Boolean
    open fun AddTorqueInRadians(Torque: Vector, BoneName: String, bAccelChange: Boolean)
    open fun AddTorqueInDegrees(Torque: Vector, BoneName: String, bAccelChange: Boolean)
    open fun AddTorque(Torque: Vector, BoneName: String, bAccelChange: Boolean)
    open fun AddRadialImpulse(Origin: Vector, Radius: Number, Strength: Number, Falloff: String /* "RIF_Constant" | "RIF_Linear" | "RIF_MAX" */, bVelChange: Boolean)
    open fun AddRadialForce(Origin: Vector, Radius: Number, Strength: Number, Falloff: String /* "RIF_Constant" | "RIF_Linear" | "RIF_MAX" */, bAccelChange: Boolean)
    open fun AddImpulseAtLocation(Impulse: Vector, Location: Vector, BoneName: String)
    open fun AddImpulse(Impulse: Vector, BoneName: String, bVelChange: Boolean)
    open fun AddForceAtLocationLocal(Force: Vector, Location: Vector, BoneName: String)
    open fun AddForceAtLocation(Force: Vector, Location: Vector, BoneName: String)
    open fun AddForce(Force: Vector, BoneName: String, bAccelChange: Boolean)
    open fun AddAngularImpulseInRadians(Impulse: Vector, BoneName: String, bVelChange: Boolean)
    open fun AddAngularImpulseInDegrees(Impulse: Vector, BoneName: String, bVelChange: Boolean)
    open fun AddAngularImpulse(Impulse: Vector, BoneName: String, bVelChange: Boolean)
    open fun ComponentOverlapActors(ComponentTransform: Transform, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$383`
    open fun ComponentOverlapComponents(ComponentTransform: Transform, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$384`

    companion object {
        fun Load(ResourceName: String): PrimitiveComponent
        fun Find(Outer: UObject, ResourceName: String): PrimitiveComponent
        fun GetDefaultObject(): PrimitiveComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PrimitiveComponent
        fun C(Other: UObject): PrimitiveComponent
        fun C(Other: Any): PrimitiveComponent
        fun ComponentOverlapActors(Component: PrimitiveComponent, ComponentTransform: Transform, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$385`
        fun ComponentOverlapComponents(Component: PrimitiveComponent, ComponentTransform: Transform, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$386`
    }
}

external open class MRMeshComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var Material: MaterialInterface
    open var bCreateMeshProxySections: Boolean
    open var bUpdateNavMeshOnMeshUpdate: Boolean
    open var bNeverCreateCollisionMesh: Boolean
    open var CachedBodySetup: BodySetup
    open var BodySetups: Array<BodySetup>
    open var WireframeMaterial: MaterialInterface
    open fun IsConnected(): Boolean
    open fun ForceNavMeshUpdate()
    open fun Clear()

    companion object {
        fun Load(ResourceName: String): MRMeshComponent
        fun Find(Outer: UObject, ResourceName: String): MRMeshComponent
        fun GetDefaultObject(): MRMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MRMeshComponent
        fun C(Other: UObject): MRMeshComponent
        fun C(Other: Any): MRMeshComponent
    }
}

external object EARObjectClassification {
    var NotApplicable: String /* "NotApplicable" */
    var Unknown: String /* "Unknown" */
    var Wall: String /* "Wall" */
    var Ceiling: String /* "Ceiling" */
    var Floor: String /* "Floor" */
    var Table: String /* "Table" */
    var Seat: String /* "Seat" */
    var Face: String /* "Face" */
    var Image: String /* "Image" */
    var World: String /* "World" */
    var SceneObject: String /* "SceneObject" */
    var EARObjectClassification_MAX: String /* "EARObjectClassification_MAX" */
}

external open class ARTrackedGeometry : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UniqueId: Guid
    open var LocalToTrackingTransform: Transform
    open var LocalToAlignedTrackingTransform: Transform
    open var TrackingState: String /* "Unknown" | "Tracking" | "NotTracking" | "StoppedTracking" | "EARTrackingState_MAX" */
    open var UnderlyingMesh: MRMeshComponent
    open var ObjectClassification: String /* "NotApplicable" | "Unknown" | "Wall" | "Ceiling" | "Floor" | "Table" | "Seat" | "Face" | "Image" | "World" | "SceneObject" | "EARObjectClassification_MAX" */
    open var LastUpdateFrameNumber: Number
    open var DebugName: String
    open fun IsTracked(): Boolean
    open fun GetUnderlyingMesh(): MRMeshComponent
    open fun GetTrackingState(): String /* "Unknown" | "Tracking" | "NotTracking" | "StoppedTracking" | "EARTrackingState_MAX" */
    open fun GetObjectClassification(): String /* "NotApplicable" | "Unknown" | "Wall" | "Ceiling" | "Floor" | "Table" | "Seat" | "Face" | "Image" | "World" | "SceneObject" | "EARObjectClassification_MAX" */
    open fun GetLocalToWorldTransform(): Transform
    open fun GetLocalToTrackingTransform(): Transform
    open fun GetLastUpdateTimestamp(): Number
    open fun GetLastUpdateFrameNumber(): Number
    open fun GetDebugName(): String
    open fun DebugDrawTrackedGeometry(WorldContextObject: UObject, Color: LinearColor, OutlineThickness: Number, PersistForSeconds: Number)

    companion object {
        fun Load(ResourceName: String): ARTrackedGeometry
        fun Find(Outer: UObject, ResourceName: String): ARTrackedGeometry
        fun GetDefaultObject(): ARTrackedGeometry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTrackedGeometry
        fun C(Other: UObject): ARTrackedGeometry
        fun C(Other: Any): ARTrackedGeometry
        fun DebugDrawTrackedGeometry(TrackedGeometry: ARTrackedGeometry, WorldContextObject: UObject, Color: LinearColor, OutlineThickness: Number, PersistForSeconds: Number)
    }
}

external open class ARTraceResult {
    open var DistanceFromCamera: Number
    open var TraceChannel: String /* "None" | "FeaturePoint" | "GroundPlane" | "PlaneUsingExtent" | "PlaneUsingBoundaryPolygon" | "EARLineTraceChannels_MAX" */
    open var LocalToTrackingTransform: Transform
    open var TrackedGeometry: ARTrackedGeometry
    open fun clone(): ARTraceResult
    open fun GetDistanceFromCamera(): Number
    open fun GetLocalToTrackingTransform(): Transform
    open fun GetLocalToWorldTransform(): Transform
    open fun GetTraceChannel(): String /* "None" | "FeaturePoint" | "GroundPlane" | "PlaneUsingExtent" | "PlaneUsingBoundaryPolygon" | "EARLineTraceChannels_MAX" */
    open fun GetTrackedGeometry(): ARTrackedGeometry

    companion object {
        fun C(Other: UObject): ARTraceResult
        fun C(Other: Any): ARTraceResult
        fun GetDistanceFromCamera(TraceResult: ARTraceResult): Number
        fun GetLocalToTrackingTransform(TraceResult: ARTraceResult): Transform
        fun GetLocalToWorldTransform(TraceResult: ARTraceResult): Transform
        fun GetTraceChannel(TraceResult: ARTraceResult): String /* "None" | "FeaturePoint" | "GroundPlane" | "PlaneUsingExtent" | "PlaneUsingBoundaryPolygon" | "EARLineTraceChannels_MAX" */
        fun GetTrackedGeometry(TraceResult: ARTraceResult): ARTrackedGeometry
    }
}

external interface `T$387` {
    var X: Number
    var Y: Number
}

external interface `T$388` {
    var A: Vector2D
}

external interface `T$389` {
    var OutDir: Vector2D
    var OutLength: Number
}

external open class Vector2D {
    open var X: Number
    open var Y: Number
    open fun clone(): Vector2D
    open fun Conv_Vector2dToText(): String
    open fun Conv_Vector2dToString(): String
    open fun Add_Vector2DFloat(B: Number): Vector2D
    open fun Add_Vector2DVector2D(B: Vector2D): Vector2D
    open fun BreakVector2D(X: Number = definedExternally, Y: Number = definedExternally): `T$387`
    open fun ClampAxes2D(MinAxisVal: Number, MaxAxisVal: Number): Vector2D
    open fun Conv_Vector2DToIntPoint(): IntPoint
    open fun Conv_Vector2DToVector(Z: Number): Vector
    open fun CrossProduct2D(B: Vector2D): Number
    open fun Distance2D(v2: Vector2D): Number
    open fun DistanceSquared2D(v2: Vector2D): Number
    open fun Divide_Vector2DFloat(B: Number): Vector2D
    open fun Divide_Vector2DVector2D(B: Vector2D): Vector2D
    open fun DotProduct2D(B: Vector2D): Number
    open fun EqualEqual_Vector2DVector2D(B: Vector2D, ErrorTolerance: Number): Boolean
    open fun EqualExactly_Vector2DVector2D(B: Vector2D): Boolean
    open fun GetAbs2D(): Vector2D
    open fun GetAbsMax2D(): Number
    open fun GetMax2D(): Number
    open fun GetMin2D(): Number
    open fun GetRotated2D(AngleDeg: Number): Vector2D
    open fun IsNearlyZero2D(Tolerance: Number): Boolean
    open fun IsZero2D(): Boolean
    open fun MakeBox2D(Max: Vector2D): Box2D
    open fun Multiply_Vector2DFloat(B: Number): Vector2D
    open fun Multiply_Vector2DVector2D(B: Vector2D): Vector2D
    open fun Negated2D(): Vector2D
    open fun Normal2D(): Vector2D
    open fun Normalize2D(Tolerance: Number = definedExternally): `T$388`
    open fun NormalSafe2D(Tolerance: Number): Vector2D
    open fun NotEqual_Vector2DVector2D(B: Vector2D, ErrorTolerance: Number): Boolean
    open fun NotEqualExactly_Vector2DVector2D(B: Vector2D): Boolean
    open fun Set2D(X: Number = definedExternally, Y: Number = definedExternally): `T$388`
    open fun Spherical2DToUnitCartesian(): Vector
    open fun Subtract_Vector2DFloat(B: Number): Vector2D
    open fun Subtract_Vector2DVector2D(B: Vector2D): Vector2D
    open fun ToDirectionAndLength2D(OutDir: Vector2D = definedExternally, OutLength: Number = definedExternally): `T$389`
    open fun ToRounded2D(): Vector2D
    open fun ToSign2D(): Vector2D
    open fun Vector2DInterpTo(Target: Vector2D, DeltaTime: Number, InterpSpeed: Number): Vector2D
    open fun Vector2DInterpTo_Constant(Target: Vector2D, DeltaTime: Number, InterpSpeed: Number): Vector2D
    open fun VSize2D(): Number
    open fun VSize2DSquared(): Number
    open fun SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMax: Vector2D, TextureRectMin: Vector2D, TextureRectMax: Vector2D, bDrawEyeFirst: Boolean, bClearBlack: Boolean, bUseAlpha: Boolean)
    open fun LineTraceTrackedObjects(bTestFeaturePoints: Boolean, bTestGroundPlane: Boolean, bTestPlaneExtents: Boolean, bTestPlaneBoundaryPolygon: Boolean): Array<ARTraceResult>

    companion object {
        fun C(Other: UObject): Vector2D
        fun C(Other: Any): Vector2D
        fun Conv_Vector2dToText(InVec: Vector2D): String
        fun Conv_Vector2dToString(InVec: Vector2D): String
        fun Add_Vector2DFloat(A: Vector2D, B: Number): Vector2D
        fun Add_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D
        fun BreakVector2D(InVec: Vector2D, X: Number = definedExternally, Y: Number = definedExternally): `T$387`
        fun ClampAxes2D(A: Vector2D, MinAxisVal: Number, MaxAxisVal: Number): Vector2D
        fun Conv_Vector2DToIntPoint(InVector2D: Vector2D): IntPoint
        fun Conv_Vector2DToVector(InVector2D: Vector2D, Z: Number): Vector
        fun CrossProduct2D(A: Vector2D, B: Vector2D): Number
        fun Distance2D(v1: Vector2D, v2: Vector2D): Number
        fun DistanceSquared2D(v1: Vector2D, v2: Vector2D): Number
        fun Divide_Vector2DFloat(A: Vector2D, B: Number): Vector2D
        fun Divide_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D
        fun DotProduct2D(A: Vector2D, B: Vector2D): Number
        fun EqualEqual_Vector2DVector2D(A: Vector2D, B: Vector2D, ErrorTolerance: Number): Boolean
        fun EqualExactly_Vector2DVector2D(A: Vector2D, B: Vector2D): Boolean
        fun GetAbs2D(A: Vector2D): Vector2D
        fun GetAbsMax2D(A: Vector2D): Number
        fun GetMax2D(A: Vector2D): Number
        fun GetMin2D(A: Vector2D): Number
        fun GetRotated2D(A: Vector2D, AngleDeg: Number): Vector2D
        fun IsNearlyZero2D(A: Vector2D, Tolerance: Number): Boolean
        fun IsZero2D(A: Vector2D): Boolean
        fun MakeBox2D(Min: Vector2D, Max: Vector2D): Box2D
        fun Multiply_Vector2DFloat(A: Vector2D, B: Number): Vector2D
        fun Multiply_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D
        fun Negated2D(A: Vector2D): Vector2D
        fun Normal2D(A: Vector2D): Vector2D
        fun Normalize2D(A: Vector2D = definedExternally, Tolerance: Number = definedExternally): `T$388`
        fun NormalSafe2D(A: Vector2D, Tolerance: Number): Vector2D
        fun NotEqual_Vector2DVector2D(A: Vector2D, B: Vector2D, ErrorTolerance: Number): Boolean
        fun NotEqualExactly_Vector2DVector2D(A: Vector2D, B: Vector2D): Boolean
        fun Set2D(A: Vector2D = definedExternally, X: Number = definedExternally, Y: Number = definedExternally): `T$388`
        fun Spherical2DToUnitCartesian(A: Vector2D): Vector
        fun Subtract_Vector2DFloat(A: Vector2D, B: Number): Vector2D
        fun Subtract_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D
        fun ToDirectionAndLength2D(A: Vector2D, OutDir: Vector2D = definedExternally, OutLength: Number = definedExternally): `T$389`
        fun ToRounded2D(A: Vector2D): Vector2D
        fun ToSign2D(A: Vector2D): Vector2D
        fun Vector2DInterpTo(Current: Vector2D, Target: Vector2D, DeltaTime: Number, InterpSpeed: Number): Vector2D
        fun Vector2DInterpTo_Constant(Current: Vector2D, Target: Vector2D, DeltaTime: Number, InterpSpeed: Number): Vector2D
        fun VSize2D(A: Vector2D): Number
        fun VSize2DSquared(A: Vector2D): Number
        fun SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D, EyeRectMax: Vector2D, TextureRectMin: Vector2D, TextureRectMax: Vector2D, bDrawEyeFirst: Boolean, bClearBlack: Boolean, bUseAlpha: Boolean)
        fun LineTraceTrackedObjects(ScreenCoord: Vector2D, bTestFeaturePoints: Boolean, bTestGroundPlane: Boolean, bTestPlaneExtents: Boolean, bTestPlaneBoundaryPolygon: Boolean): Array<ARTraceResult>
        fun GenerateDynamicImageResource(InDynamicBrushName: String): Vector2D
        fun MakeVector2D(X: Number, Y: Number): Vector2D
        fun Vector2D_One(): Vector2D
        fun Vector2D_Unit45Deg(): Vector2D
        fun Vector2D_Zero(): Vector2D
        fun NextSobolCell2D(index: Number, NumCells: Number, PreviousValue: Vector2D): Vector2D
        fun RandomSobolCell2D(index: Number, NumCells: Number, Cell: Vector2D, Seed: Vector2D): Vector2D
        fun GetMousePositionOnPlatform(): Vector2D
    }
}

external object EBoundaryType {
    var Boundary_Outer: String /* "Boundary_Outer" */
    var Boundary_PlayArea: String /* "Boundary_PlayArea" */
    var Boundary_MAX: String /* "Boundary_MAX" */
}

external object ETrackedDeviceType {
    var None: String /* "None" */
    var HMD: String /* "HMD" */
    var LTouch: String /* "LTouch" */
    var RTouch: String /* "RTouch" */
    var Touch: String /* "Touch" */
    var DeviceObjectZero: String /* "DeviceObjectZero" */
    var All: String /* "All" */
    var ETrackedDeviceType_MAX: String /* "ETrackedDeviceType_MAX" */
}

external open class GuardianTestResult {
    open var IsTriggering: Boolean
    open var DeviceType: String /* "None" | "HMD" | "LTouch" | "RTouch" | "Touch" | "DeviceObjectZero" | "All" | "ETrackedDeviceType_MAX" */
    open var ClosestDistance: Number
    open var ClosestPoint: Vector
    open var ClosestPointNormal: Vector
    open fun clone(): GuardianTestResult

    companion object {
        fun C(Other: UObject): GuardianTestResult
        fun C(Other: Any): GuardianTestResult
        fun GetNodeGuardianIntersection(DeviceType: String /* "None" | "HMD" | "LTouch" | "RTouch" | "Touch" | "DeviceObjectZero" | "All" | "ETrackedDeviceType_MAX" */, BoundaryType: String /* "Boundary_Outer" | "Boundary_PlayArea" | "Boundary_MAX" */): GuardianTestResult
    }
}

external object EPassableWorldError {
    var None: String /* "None" */
    var LowMapQuality: String /* "LowMapQuality" */
    var UnableToLocalize: String /* "UnableToLocalize" */
    var Unavailable: String /* "Unavailable" */
    var PrivilegeDenied: String /* "PrivilegeDenied" */
    var InvalidParam: String /* "InvalidParam" */
    var UnspecifiedFailure: String /* "UnspecifiedFailure" */
    var PrivilegeRequestPending: String /* "PrivilegeRequestPending" */
    var EPassableWorldError_MAX: String /* "EPassableWorldError_MAX" */
}

external open class IntVector {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open fun clone(): IntVector
    open fun Conv_IntVectorToString(): String
    open fun Conv_IntVectorToVector(): Vector

    companion object {
        fun C(Other: UObject): IntVector
        fun C(Other: Any): IntVector
        fun Conv_IntVectorToString(InIntVec: IntVector): String
        fun Conv_IntVectorToVector(InIntVector: IntVector): Vector
        fun Conv_IntToIntVector(inInt: Number): IntVector
    }
}

external interface `T$390` {
    var SpringState: VectorSpringState
}

external open class VectorSpringState {
    open fun clone(): VectorSpringState
    open fun ResetVectorSpringState(): `T$390`

    companion object {
        fun C(Other: UObject): VectorSpringState
        fun C(Other: Any): VectorSpringState
        fun ResetVectorSpringState(SpringState: VectorSpringState = definedExternally): `T$390`
    }
}

external interface `T$391` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external interface `T$392` {
    var X: Number
    var Y: Number
    var Z: Number
}

external interface `T$393` {
    var Segment1Point: Vector
    var Segment2Point: Vector
}

external interface `T$394` {
    var Azimuth: Number
    var Elevation: Number
}

external interface `T$395` {
    var OutSlopePitchDegreeAngle: Number
    var OutSlopeRollDegreeAngle: Number
}

external interface `T$396` {
    var Yaw: Number
    var Pitch: Number
}

external interface `T$397` {
    var T: Number
    var Intersection: Vector
    var `$`: Boolean
}

external interface `T$398` {
    var A: Vector
}

external interface `T$399` {
    var SpringState: VectorSpringState
    var `$`: Vector
}

external interface `T$400` {
    var OutJointPos: Vector
    var OutEndPos: Vector
}

external interface `T$401` {
    var CameraOrigin: Vector
    var CameraRotation: Rotator
    var HFOV: Number
    var VFOV: Number
    var CameraDistance: Number
    var NearPlane: Number
    var FarPlane: Number
}

external interface `T$402` {
    var Origin: Vector
    var Rotation: Rotator
    var LeftFOV: Number
    var RightFOV: Number
    var TopFOV: Number
    var BottomFOV: Number
    var Distance: Number
    var NearPlane: Number
    var FarPlane: Number
    var IsActive: Boolean
}

external interface `T$403` {
    var Vertices: Array<Vector>
    var Triangles: Array<Number>
    var Normals: Array<Vector>
    var UVs: Array<Vector2D>
    var Tangents: Array<ProcMeshTangent>
}

external open class Vector {
    open var X: Number
    open var Y: Number
    open var Z: Number
    open fun clone(): Vector
    open fun SegmentIntersection2D(SegmentEndA: Vector, SegmentStartB: Vector, SegmentEndB: Vector, IntersectionPoint: Vector = definedExternally): `T$128`
    open fun GetSelectionBounds(BoxExtent: Vector = definedExternally, SphereRadius: Number = definedExternally): `T$98`
    open fun GenerateBoxMesh(Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$391`
    open fun GetPointGuardianIntersection(BoundaryType: String /* "Boundary_Outer" | "Boundary_PlayArea" | "Boundary_MAX" */): GuardianTestResult
    open fun GetRawSensorData(LinearAcceleration: Vector = definedExternally, AngularVelocity: Vector = definedExternally, LinearVelocity: Vector = definedExternally, TimeInSeconds: Number = definedExternally, DeviceType: String /* "None" | "HMD" | "LTouch" | "RTouch" | "Touch" | "DeviceObjectZero" | "All" | "ETrackedDeviceType_MAX" */ = definedExternally): `T$65`
    open fun SetPositionScale3D()
    open fun SetBasePosition()
    open fun GetClosestARPin(PinID: Guid = definedExternally): `T$52`
    open fun IsValidAIDirection(): Boolean
    open fun IsValidAILocation(): Boolean
    open fun Conv_VectorToText(): String
    open fun Conv_VectorToString(): String
    open fun Add_VectorFloat(B: Number): Vector
    open fun Add_VectorInt(B: Number): Vector
    open fun Add_VectorVector(B: Vector): Vector
    open fun BreakVector(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally): `T$392`
    open fun ClampVectorSize(Min: Number, Max: Number): Vector
    open fun Conv_VectorToLinearColor(): LinearColor
    open fun Conv_VectorToQuaterion(): Quat
    open fun Conv_VectorToRotator(): Rotator
    open fun Conv_VectorToTransform(): Transform
    open fun Conv_VectorToVector2D(): Vector2D
    open fun Cross_VectorVector(B: Vector): Vector
    open fun Divide_VectorFloat(B: Number): Vector
    open fun Divide_VectorInt(B: Number): Vector
    open fun Divide_VectorVector(B: Vector): Vector
    open fun Dot_VectorVector(B: Vector): Number
    open fun DynamicWeightedMovingAverage_FVector(PreviousSample: Vector, MaxDistance: Number, MinWeight: Number, MaxWeight: Number): Vector
    open fun EqualEqual_VectorVector(B: Vector, ErrorTolerance: Number): Boolean
    open fun EqualExactly_VectorVector(B: Vector): Boolean
    open fun FindClosestPointOnLine(LineOrigin: Vector, LineDirection: Vector): Vector
    open fun FindClosestPointOnSegment(SegmentStart: Vector, SegmentEnd: Vector): Vector
    open fun FindLookAtRotation(Target: Vector): Rotator
    open fun FindNearestPointsOnLineSegments(Segment1End: Vector, Segment2Start: Vector, Segment2End: Vector, Segment1Point: Vector = definedExternally, Segment2Point: Vector = definedExternally): `T$393`
    open fun FTruncVector(): IntVector
    open fun GetAzimuthAndElevation(ReferenceFrame: Transform, Azimuth: Number = definedExternally, Elevation: Number = definedExternally): `T$394`
    open fun GetDirectionUnitVector(To: Vector): Vector
    open fun GetMaxElement(): Number
    open fun GetMinElement(): Number
    open fun GetPointDistanceToLine(LineOrigin: Vector, LineDirection: Vector): Number
    open fun GetPointDistanceToSegment(SegmentStart: Vector, SegmentEnd: Vector): Number
    open fun GetReflectionVector(SurfaceNormal: Vector): Vector
    open fun GetSlopeDegreeAngles(FloorNormal: Vector, UpVector: Vector, OutSlopePitchDegreeAngle: Number = definedExternally, OutSlopeRollDegreeAngle: Number = definedExternally): `T$395`
    open fun GetYawPitchFromVector(Yaw: Number = definedExternally, Pitch: Number = definedExternally): `T$396`
    open fun GreaterGreater_VectorRotator(B: Rotator): Vector
    open fun IsPointInBox(BoxOrigin: Vector, BoxExtent: Vector): Boolean
    open fun IsPointInBoxWithTransform(BoxWorldTransform: Transform, BoxExtent: Vector): Boolean
    open fun LessLess_VectorRotator(B: Rotator): Vector
    open fun LinePlaneIntersection(LineEnd: Vector, APlane: Plane, T: Number = definedExternally, Intersection: Vector = definedExternally): `T$397`
    open fun LinePlaneIntersection_OriginNormal(LineEnd: Vector, PlaneOrigin: Vector, PlaneNormal: Vector, T: Number = definedExternally, Intersection: Vector = definedExternally): `T$397`
    open fun MakeBox(Max: Vector): Box
    open fun MakePlaneFromPointAndNormal(Normal: Vector): Plane
    open fun MakeRotationFromAxes(Right: Vector, Up: Vector): Rotator
    open fun MakeRotFromX(): Rotator
    open fun MakeRotFromXY(Y: Vector): Rotator
    open fun MakeRotFromXZ(Z: Vector): Rotator
    open fun MakeRotFromY(): Rotator
    open fun MakeRotFromYX(X: Vector): Rotator
    open fun MakeRotFromYZ(Z: Vector): Rotator
    open fun MakeRotFromZ(): Rotator
    open fun MakeRotFromZX(X: Vector): Rotator
    open fun MakeRotFromZY(Y: Vector): Rotator
    open fun MakeTransform(Rotation: Rotator, Scale: Vector): Transform
    open fun MirrorVectorByNormal(InNormal: Vector): Vector
    open fun Multiply_VectorFloat(B: Number): Vector
    open fun Multiply_VectorInt(B: Number): Vector
    open fun Multiply_VectorVector(B: Vector): Vector
    open fun NegateVector(): Vector
    open fun Normal(Tolerance: Number): Vector
    open fun NotEqual_VectorVector(B: Vector, ErrorTolerance: Number): Boolean
    open fun NotEqualExactly_VectorVector(B: Vector): Boolean
    open fun ProjectPointOnToPlane(PlaneBase: Vector, PlaneNormal: Vector): Vector
    open fun ProjectVectorOnToPlane(PlaneNormal: Vector): Vector
    open fun ProjectVectorOnToVector(Target: Vector): Vector
    open fun Quat_MakeFromEuler(): Quat
    open fun RandomPointInBoundingBox(BoxExtent: Vector): Vector
    open fun RandomUnitVectorInConeInDegrees(ConeHalfAngleInDegrees: Number): Vector
    open fun RandomUnitVectorInConeInDegreesFromStream(ConeHalfAngleInDegrees: Number, Stream: RandomStream): Vector
    open fun RandomUnitVectorInConeInRadians(ConeHalfAngleInRadians: Number): Vector
    open fun RandomUnitVectorInConeInRadiansFromStream(ConeHalfAngleInRadians: Number, Stream: RandomStream): Vector
    open fun RandomUnitVectorInEllipticalConeInDegrees(MaxYawInDegrees: Number, MaxPitchInDegrees: Number): Vector
    open fun RandomUnitVectorInEllipticalConeInDegreesFromStream(MaxYawInDegrees: Number, MaxPitchInDegrees: Number, Stream: RandomStream): Vector
    open fun RandomUnitVectorInEllipticalConeInRadians(MaxYawInRadians: Number, MaxPitchInRadians: Number): Vector
    open fun RandomUnitVectorInEllipticalConeInRadiansFromStream(MaxYawInRadians: Number, MaxPitchInRadians: Number, Stream: RandomStream): Vector
    open fun RotateAngleAxis(AngleDeg: Number, Axis: Vector): Vector
    open fun RotatorFromAxisAndAngle(Angle: Number): Rotator
    open fun SelectVector(B: Vector, bPickA: Boolean): Vector
    open fun Subtract_VectorFloat(B: Number): Vector
    open fun Subtract_VectorInt(B: Number): Vector
    open fun Subtract_VectorVector(B: Vector): Vector
    open fun VEase(B: Vector, Alpha: Number, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Vector
    open fun Vector_AddBounded(InAddVect: Vector = definedExternally, InRadius: Number = definedExternally): `T$398`
    open fun Vector_Assign(InVector: Vector = definedExternally): `T$398`
    open fun Vector_BoundedToBox(InBoxMin: Vector, InBoxMax: Vector): Vector
    open fun Vector_BoundedToCube(InRadius: Number): Vector
    open fun Vector_ClampSize2D(Min: Number, Max: Number): Vector
    open fun Vector_ClampSizeMax(Max: Number): Vector
    open fun Vector_ClampSizeMax2D(Max: Number): Vector
    open fun Vector_ComponentMax(B: Vector): Vector
    open fun Vector_ComponentMin(B: Vector): Vector
    open fun Vector_CosineAngle2D(B: Vector): Number
    open fun Vector_Distance(v2: Vector): Number
    open fun Vector_Distance2D(v2: Vector): Number
    open fun Vector_Distance2DSquared(v2: Vector): Number
    open fun Vector_DistanceSquared(v2: Vector): Number
    open fun Vector_GetAbs(): Vector
    open fun Vector_GetAbsMax(): Number
    open fun Vector_GetAbsMin(): Number
    open fun Vector_GetProjection(): Vector
    open fun Vector_GetSignVector(): Vector
    open fun Vector_HeadingAngle(): Number
    open fun Vector_IsNAN(): Boolean
    open fun Vector_IsNearlyZero(Tolerance: Number): Boolean
    open fun Vector_IsNormal(): Boolean
    open fun Vector_IsUniform(Tolerance: Number): Boolean
    open fun Vector_IsUnit(SquaredLenthTolerance: Number): Boolean
    open fun Vector_IsZero(): Boolean
    open fun Vector_MirrorByPlane(InPlane: Plane): Vector
    open fun Vector_Normal2D(Tolerance: Number): Vector
    open fun Vector_Normalize(Tolerance: Number = definedExternally): `T$398`
    open fun Vector_NormalUnsafe(): Vector
    open fun Vector_ProjectOnToNormal(InNormal: Vector): Vector
    open fun Vector_Reciprocal(): Vector
    open fun Vector_Set(X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally): `T$398`
    open fun Vector_SnappedToGrid(InGridSize: Number): Vector
    open fun Vector_ToDegrees(): Vector
    open fun Vector_ToRadians(): Vector
    open fun Vector_UnitCartesianToSpherical(): Vector2D
    open fun Vector_UnwindEuler(): `T$398`
    open fun VectorSpringInterp(Target: Vector, SpringState: VectorSpringState = definedExternally, Stiffness: Number = definedExternally, CriticalDampingFactor: Number = definedExternally, DeltaTime: Number = definedExternally, Mass: Number = definedExternally): `T$399`
    open fun VInterpTo(Target: Vector, DeltaTime: Number, InterpSpeed: Number): Vector
    open fun VInterpTo_Constant(Target: Vector, DeltaTime: Number, InterpSpeed: Number): Vector
    open fun VLerp(B: Vector, Alpha: Number): Vector
    open fun VSize(): Number
    open fun VSizeSquared(): Number
    open fun VSizeXY(): Number
    open fun VSizeXYSquared(): Number
    open fun WeightedMovingAverage_FVector(PreviousSample: Vector, Weight: Number): Vector
    open fun K2_TwoBoneIK(JointPos: Vector, EndPos: Vector, JointTarget: Vector, Effector: Vector, OutJointPos: Vector = definedExternally, OutEndPos: Vector = definedExternally, bAllowStretching: Boolean = definedExternally, StartStretchRatio: Number = definedExternally, MaxStretchScale: Number = definedExternally): `T$400`
    open fun GetPositionalTrackingCameraParameters(CameraRotation: Rotator = definedExternally, HFOV: Number = definedExternally, VFOV: Number = definedExternally, CameraDistance: Number = definedExternally, NearPlane: Number = definedExternally, FarPlane: Number = definedExternally): `T$401`
    open fun GetTrackingSensorParameters(Rotation: Rotator = definedExternally, LeftFOV: Number = definedExternally, RightFOV: Number = definedExternally, TopFOV: Number = definedExternally, BottomFOV: Number = definedExternally, Distance: Number = definedExternally, NearPlane: Number = definedExternally, FarPlane: Number = definedExternally, IsActive: Boolean = definedExternally, index: Number = definedExternally): `T$402`
    open fun AddManualEnvironmentCaptureProbe(Extent: Vector): Boolean
    open fun LineTraceTrackedObjects3D(End: Vector, bTestFeaturePoints: Boolean, bTestGroundPlane: Boolean, bTestPlaneExtents: Boolean, bTestPlaneBoundaryPolygon: Boolean): Array<ARTraceResult>

    companion object {
        fun C(Other: UObject): Vector
        fun C(Other: Any): Vector
        fun SegmentIntersection2D(SegmentStartA: Vector, SegmentEndA: Vector, SegmentStartB: Vector, SegmentEndB: Vector, IntersectionPoint: Vector = definedExternally): `T$128`
        fun GetSelectionBounds(Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally, SphereRadius: Number = definedExternally): `T$98`
        fun GenerateBoxMesh(BoxRadius: Vector, Vertices: Array<Vector> = definedExternally, Triangles: Array<Number> = definedExternally, Normals: Array<Vector> = definedExternally, UVs: Array<Vector2D> = definedExternally, Tangents: Array<ProcMeshTangent> = definedExternally): `T$403`
        fun GetPointGuardianIntersection(Point: Vector, BoundaryType: String /* "Boundary_Outer" | "Boundary_PlayArea" | "Boundary_MAX" */): GuardianTestResult
        fun GetRawSensorData(AngularAcceleration: Vector = definedExternally, LinearAcceleration: Vector = definedExternally, AngularVelocity: Vector = definedExternally, LinearVelocity: Vector = definedExternally, TimeInSeconds: Number = definedExternally, DeviceType: String /* "None" | "HMD" | "LTouch" | "RTouch" | "Touch" | "DeviceObjectZero" | "All" | "ETrackedDeviceType_MAX" */ = definedExternally): `T$65`
        fun SetPositionScale3D(PosScale3D: Vector)
        fun SetBasePosition(InBasePosition: Vector)
        fun GetClosestARPin(SearchPoint: Vector, PinID: Guid = definedExternally): `T$52`
        fun IsValidAIDirection(DirectionVector: Vector): Boolean
        fun IsValidAILocation(Location: Vector): Boolean
        fun Conv_VectorToText(InVec: Vector): String
        fun Conv_VectorToString(InVec: Vector): String
        fun Add_VectorFloat(A: Vector, B: Number): Vector
        fun Add_VectorInt(A: Vector, B: Number): Vector
        fun Add_VectorVector(A: Vector, B: Vector): Vector
        fun BreakVector(InVec: Vector, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally): `T$392`
        fun ClampVectorSize(A: Vector, Min: Number, Max: Number): Vector
        fun Conv_VectorToLinearColor(InVec: Vector): LinearColor
        fun Conv_VectorToQuaterion(InVec: Vector): Quat
        fun Conv_VectorToRotator(InVec: Vector): Rotator
        fun Conv_VectorToTransform(InLocation: Vector): Transform
        fun Conv_VectorToVector2D(InVector: Vector): Vector2D
        fun Cross_VectorVector(A: Vector, B: Vector): Vector
        fun Divide_VectorFloat(A: Vector, B: Number): Vector
        fun Divide_VectorInt(A: Vector, B: Number): Vector
        fun Divide_VectorVector(A: Vector, B: Vector): Vector
        fun Dot_VectorVector(A: Vector, B: Vector): Number
        fun DynamicWeightedMovingAverage_FVector(CurrentSample: Vector, PreviousSample: Vector, MaxDistance: Number, MinWeight: Number, MaxWeight: Number): Vector
        fun EqualEqual_VectorVector(A: Vector, B: Vector, ErrorTolerance: Number): Boolean
        fun EqualExactly_VectorVector(A: Vector, B: Vector): Boolean
        fun FindClosestPointOnLine(Point: Vector, LineOrigin: Vector, LineDirection: Vector): Vector
        fun FindClosestPointOnSegment(Point: Vector, SegmentStart: Vector, SegmentEnd: Vector): Vector
        fun FindLookAtRotation(Start: Vector, Target: Vector): Rotator
        fun FindNearestPointsOnLineSegments(Segment1Start: Vector, Segment1End: Vector, Segment2Start: Vector, Segment2End: Vector, Segment1Point: Vector = definedExternally, Segment2Point: Vector = definedExternally): `T$393`
        fun FTruncVector(InVector: Vector): IntVector
        fun GetAzimuthAndElevation(InDirection: Vector, ReferenceFrame: Transform, Azimuth: Number = definedExternally, Elevation: Number = definedExternally): `T$394`
        fun GetDirectionUnitVector(From: Vector, To: Vector): Vector
        fun GetMaxElement(A: Vector): Number
        fun GetMinElement(A: Vector): Number
        fun GetPointDistanceToLine(Point: Vector, LineOrigin: Vector, LineDirection: Vector): Number
        fun GetPointDistanceToSegment(Point: Vector, SegmentStart: Vector, SegmentEnd: Vector): Number
        fun GetReflectionVector(Direction: Vector, SurfaceNormal: Vector): Vector
        fun GetSlopeDegreeAngles(MyRightYAxis: Vector, FloorNormal: Vector, UpVector: Vector, OutSlopePitchDegreeAngle: Number = definedExternally, OutSlopeRollDegreeAngle: Number = definedExternally): `T$395`
        fun GetYawPitchFromVector(InVec: Vector, Yaw: Number = definedExternally, Pitch: Number = definedExternally): `T$396`
        fun GreaterGreater_VectorRotator(A: Vector, B: Rotator): Vector
        fun IsPointInBox(Point: Vector, BoxOrigin: Vector, BoxExtent: Vector): Boolean
        fun IsPointInBoxWithTransform(Point: Vector, BoxWorldTransform: Transform, BoxExtent: Vector): Boolean
        fun LessLess_VectorRotator(A: Vector, B: Rotator): Vector
        fun LinePlaneIntersection(LineStart: Vector, LineEnd: Vector, APlane: Plane, T: Number = definedExternally, Intersection: Vector = definedExternally): `T$397`
        fun LinePlaneIntersection_OriginNormal(LineStart: Vector, LineEnd: Vector, PlaneOrigin: Vector, PlaneNormal: Vector, T: Number = definedExternally, Intersection: Vector = definedExternally): `T$397`
        fun MakeBox(Min: Vector, Max: Vector): Box
        fun MakePlaneFromPointAndNormal(Point: Vector, Normal: Vector): Plane
        fun MakeRotationFromAxes(Forward: Vector, Right: Vector, Up: Vector): Rotator
        fun MakeRotFromX(X: Vector): Rotator
        fun MakeRotFromXY(X: Vector, Y: Vector): Rotator
        fun MakeRotFromXZ(X: Vector, Z: Vector): Rotator
        fun MakeRotFromY(Y: Vector): Rotator
        fun MakeRotFromYX(Y: Vector, X: Vector): Rotator
        fun MakeRotFromYZ(Y: Vector, Z: Vector): Rotator
        fun MakeRotFromZ(Z: Vector): Rotator
        fun MakeRotFromZX(Z: Vector, X: Vector): Rotator
        fun MakeRotFromZY(Z: Vector, Y: Vector): Rotator
        fun MakeTransform(Location: Vector, Rotation: Rotator, Scale: Vector): Transform
        fun MirrorVectorByNormal(InVect: Vector, InNormal: Vector): Vector
        fun Multiply_VectorFloat(A: Vector, B: Number): Vector
        fun Multiply_VectorInt(A: Vector, B: Number): Vector
        fun Multiply_VectorVector(A: Vector, B: Vector): Vector
        fun NegateVector(A: Vector): Vector
        fun Normal(A: Vector, Tolerance: Number): Vector
        fun NotEqual_VectorVector(A: Vector, B: Vector, ErrorTolerance: Number): Boolean
        fun NotEqualExactly_VectorVector(A: Vector, B: Vector): Boolean
        fun ProjectPointOnToPlane(Point: Vector, PlaneBase: Vector, PlaneNormal: Vector): Vector
        fun ProjectVectorOnToPlane(V: Vector, PlaneNormal: Vector): Vector
        fun ProjectVectorOnToVector(V: Vector, Target: Vector): Vector
        fun Quat_MakeFromEuler(Euler: Vector): Quat
        fun RandomPointInBoundingBox(Origin: Vector, BoxExtent: Vector): Vector
        fun RandomUnitVectorInConeInDegrees(ConeDir: Vector, ConeHalfAngleInDegrees: Number): Vector
        fun RandomUnitVectorInConeInDegreesFromStream(ConeDir: Vector, ConeHalfAngleInDegrees: Number, Stream: RandomStream): Vector
        fun RandomUnitVectorInConeInRadians(ConeDir: Vector, ConeHalfAngleInRadians: Number): Vector
        fun RandomUnitVectorInConeInRadiansFromStream(ConeDir: Vector, ConeHalfAngleInRadians: Number, Stream: RandomStream): Vector
        fun RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector, MaxYawInDegrees: Number, MaxPitchInDegrees: Number): Vector
        fun RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: Vector, MaxYawInDegrees: Number, MaxPitchInDegrees: Number, Stream: RandomStream): Vector
        fun RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector, MaxYawInRadians: Number, MaxPitchInRadians: Number): Vector
        fun RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: Vector, MaxYawInRadians: Number, MaxPitchInRadians: Number, Stream: RandomStream): Vector
        fun RotateAngleAxis(InVect: Vector, AngleDeg: Number, Axis: Vector): Vector
        fun RotatorFromAxisAndAngle(Axis: Vector, Angle: Number): Rotator
        fun SelectVector(A: Vector, B: Vector, bPickA: Boolean): Vector
        fun Subtract_VectorFloat(A: Vector, B: Number): Vector
        fun Subtract_VectorInt(A: Vector, B: Number): Vector
        fun Subtract_VectorVector(A: Vector, B: Vector): Vector
        fun VEase(A: Vector, B: Vector, Alpha: Number, EasingFunc: String /* "Linear" | "Step" | "SinusoidalIn" | "SinusoidalOut" | "SinusoidalInOut" | "EaseIn" | "EaseOut" | "EaseInOut" | "ExpoIn" | "ExpoOut" | "ExpoInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "EEasingFunc_MAX" */, BlendExp: Number, Steps: Number): Vector
        fun Vector_AddBounded(A: Vector = definedExternally, InAddVect: Vector = definedExternally, InRadius: Number = definedExternally): `T$398`
        fun Vector_Assign(A: Vector = definedExternally, InVector: Vector = definedExternally): `T$398`
        fun Vector_BoundedToBox(InVect: Vector, InBoxMin: Vector, InBoxMax: Vector): Vector
        fun Vector_BoundedToCube(InVect: Vector, InRadius: Number): Vector
        fun Vector_ClampSize2D(A: Vector, Min: Number, Max: Number): Vector
        fun Vector_ClampSizeMax(A: Vector, Max: Number): Vector
        fun Vector_ClampSizeMax2D(A: Vector, Max: Number): Vector
        fun Vector_ComponentMax(A: Vector, B: Vector): Vector
        fun Vector_ComponentMin(A: Vector, B: Vector): Vector
        fun Vector_CosineAngle2D(A: Vector, B: Vector): Number
        fun Vector_Distance(v1: Vector, v2: Vector): Number
        fun Vector_Distance2D(v1: Vector, v2: Vector): Number
        fun Vector_Distance2DSquared(v1: Vector, v2: Vector): Number
        fun Vector_DistanceSquared(v1: Vector, v2: Vector): Number
        fun Vector_GetAbs(A: Vector): Vector
        fun Vector_GetAbsMax(A: Vector): Number
        fun Vector_GetAbsMin(A: Vector): Number
        fun Vector_GetProjection(A: Vector): Vector
        fun Vector_GetSignVector(A: Vector): Vector
        fun Vector_HeadingAngle(A: Vector): Number
        fun Vector_IsNAN(A: Vector): Boolean
        fun Vector_IsNearlyZero(A: Vector, Tolerance: Number): Boolean
        fun Vector_IsNormal(A: Vector): Boolean
        fun Vector_IsUniform(A: Vector, Tolerance: Number): Boolean
        fun Vector_IsUnit(A: Vector, SquaredLenthTolerance: Number): Boolean
        fun Vector_IsZero(A: Vector): Boolean
        fun Vector_MirrorByPlane(A: Vector, InPlane: Plane): Vector
        fun Vector_Normal2D(A: Vector, Tolerance: Number): Vector
        fun Vector_Normalize(A: Vector = definedExternally, Tolerance: Number = definedExternally): `T$398`
        fun Vector_NormalUnsafe(A: Vector): Vector
        fun Vector_ProjectOnToNormal(V: Vector, InNormal: Vector): Vector
        fun Vector_Reciprocal(A: Vector): Vector
        fun Vector_Set(A: Vector = definedExternally, X: Number = definedExternally, Y: Number = definedExternally, Z: Number = definedExternally): `T$398`
        fun Vector_SnappedToGrid(InVect: Vector, InGridSize: Number): Vector
        fun Vector_ToDegrees(A: Vector): Vector
        fun Vector_ToRadians(A: Vector): Vector
        fun Vector_UnitCartesianToSpherical(A: Vector): Vector2D
        fun Vector_UnwindEuler(A: Vector = definedExternally): `T$398`
        fun VectorSpringInterp(Current: Vector, Target: Vector, SpringState: VectorSpringState = definedExternally, Stiffness: Number = definedExternally, CriticalDampingFactor: Number = definedExternally, DeltaTime: Number = definedExternally, Mass: Number = definedExternally): `T$399`
        fun VInterpTo(Current: Vector, Target: Vector, DeltaTime: Number, InterpSpeed: Number): Vector
        fun VInterpTo_Constant(Current: Vector, Target: Vector, DeltaTime: Number, InterpSpeed: Number): Vector
        fun VLerp(A: Vector, B: Vector, Alpha: Number): Vector
        fun VSize(A: Vector): Number
        fun VSizeSquared(A: Vector): Number
        fun VSizeXY(A: Vector): Number
        fun VSizeXYSquared(A: Vector): Number
        fun WeightedMovingAverage_FVector(CurrentSample: Vector, PreviousSample: Vector, Weight: Number): Vector
        fun K2_TwoBoneIK(RootPos: Vector, JointPos: Vector, EndPos: Vector, JointTarget: Vector, Effector: Vector, OutJointPos: Vector = definedExternally, OutEndPos: Vector = definedExternally, bAllowStretching: Boolean = definedExternally, StartStretchRatio: Number = definedExternally, MaxStretchScale: Number = definedExternally): `T$400`
        fun GetPositionalTrackingCameraParameters(CameraOrigin: Vector = definedExternally, CameraRotation: Rotator = definedExternally, HFOV: Number = definedExternally, VFOV: Number = definedExternally, CameraDistance: Number = definedExternally, NearPlane: Number = definedExternally, FarPlane: Number = definedExternally): `T$401`
        fun GetTrackingSensorParameters(Origin: Vector = definedExternally, Rotation: Rotator = definedExternally, LeftFOV: Number = definedExternally, RightFOV: Number = definedExternally, TopFOV: Number = definedExternally, BottomFOV: Number = definedExternally, Distance: Number = definedExternally, NearPlane: Number = definedExternally, FarPlane: Number = definedExternally, IsActive: Boolean = definedExternally, index: Number = definedExternally): `T$402`
        fun AddManualEnvironmentCaptureProbe(Location: Vector, Extent: Vector): Boolean
        fun LineTraceTrackedObjects3D(Start: Vector, End: Vector, bTestFeaturePoints: Boolean, bTestGroundPlane: Boolean, bTestPlaneExtents: Boolean, bTestPlaneBoundaryPolygon: Boolean): Array<ARTraceResult>
        fun GetGuardianDimensions(BoundaryType: String /* "Boundary_Outer" | "Boundary_PlayArea" | "Boundary_MAX" */): Vector
        fun Conv_FloatToVector(InFloat: Number): Vector
        fun CreateVectorFromYawPitch(Yaw: Number, Pitch: Number, Length: Number): Vector
        fun GetVectorArrayAverage(Vectors: Array<Vector>): Vector
        fun MakeVector(X: Number, Y: Number, Z: Number): Vector
        fun RandomUnitVector(): Vector
        fun Vector_Backward(): Vector
        fun Vector_Down(): Vector
        fun Vector_Forward(): Vector
        fun Vector_Left(): Vector
        fun Vector_One(): Vector
        fun Vector_Right(): Vector
        fun Vector_Up(): Vector
        fun Vector_Zero(): Vector
        fun NextSobolCell3D(index: Number, NumCells: Number, PreviousValue: Vector): Vector
        fun RandomSobolCell3D(index: Number, NumCells: Number, Cell: Vector, Seed: Vector): Vector
        fun GetActorArrayAverageLocation(Actors: Array<Actor>): Vector
        fun K2_MakePerlinNoiseVectorAndRemap(X: Number, Y: Number, Z: Number, RangeOutMinX: Number, RangeOutMaxX: Number, RangeOutMinY: Number, RangeOutMaxY: Number, RangeOutMinZ: Number, RangeOutMaxZ: Number): Vector
    }
}

external object EVectorQuantization {
    var RoundWholeNumber: String /* "RoundWholeNumber" */
    var RoundOneDecimal: String /* "RoundOneDecimal" */
    var RoundTwoDecimals: String /* "RoundTwoDecimals" */
    var EVectorQuantization_MAX: String /* "EVectorQuantization_MAX" */
}

external object ERotatorQuantization {
    var ByteComponents: String /* "ByteComponents" */
    var ShortComponents: String /* "ShortComponents" */
    var ERotatorQuantization_MAX: String /* "ERotatorQuantization_MAX" */
}

external open class RepMovement {
    open var LinearVelocity: Vector
    open var AngularVelocity: Vector
    open var Location: Vector
    open var Rotation: Rotator
    open var bSimulatedPhysicSleep: Boolean
    open var bRepPhysics: Boolean
    open var LocationQuantizationLevel: String /* "RoundWholeNumber" | "RoundOneDecimal" | "RoundTwoDecimals" | "EVectorQuantization_MAX" */
    open var VelocityQuantizationLevel: String /* "RoundWholeNumber" | "RoundOneDecimal" | "RoundTwoDecimals" | "EVectorQuantization_MAX" */
    open var RotationQuantizationLevel: String /* "ByteComponents" | "ShortComponents" | "ERotatorQuantization_MAX" */
    open fun clone(): RepMovement

    companion object {
        fun C(Other: UObject): RepMovement
        fun C(Other: Any): RepMovement
    }
}

external open class RepAttachment {
    open var AttachParent: Actor
    open var LocationOffset: Vector_NetQuantize100
    open var RelativeScale3D: Vector_NetQuantize100
    open var RotationOffset: Rotator
    open var AttachSocket: String
    open var AttachComponent: SceneComponent
    open fun clone(): RepAttachment

    companion object {
        fun C(Other: UObject): RepAttachment
        fun C(Other: Any): RepAttachment
    }
}

external object ENetDormancy {
    var DORM_Never: String /* "DORM_Never" */
    var DORM_Awake: String /* "DORM_Awake" */
    var DORM_DormantAll: String /* "DORM_DormantAll" */
    var DORM_DormantPartial: String /* "DORM_DormantPartial" */
    var DORM_Initial: String /* "DORM_Initial" */
    var DORM_MAX: String /* "DORM_MAX" */
}

external object ESpawnActorCollisionHandlingMethod {
    var Undefined: String /* "Undefined" */
    var AlwaysSpawn: String /* "AlwaysSpawn" */
    var AdjustIfPossibleButAlwaysSpawn: String /* "AdjustIfPossibleButAlwaysSpawn" */
    var AdjustIfPossibleButDontSpawnIfColliding: String /* "AdjustIfPossibleButDontSpawnIfColliding" */
    var DontSpawnIfColliding: String /* "DontSpawnIfColliding" */
    var ESpawnActorCollisionHandlingMethod_MAX: String /* "ESpawnActorCollisionHandlingMethod_MAX" */
}

external open class InterpFilter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Caption: String

    companion object {
        fun Load(ResourceName: String): InterpFilter
        fun Find(Outer: UObject, ResourceName: String): InterpFilter
        fun GetDefaultObject(): InterpFilter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpFilter
        fun C(Other: UObject): InterpFilter
        fun C(Other: Any): InterpFilter
    }
}

external open class InterpGroupDirector : InterpGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): InterpGroupDirector
        fun Find(Outer: UObject, ResourceName: String): InterpGroupDirector
        fun GetDefaultObject(): InterpGroupDirector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpGroupDirector
        fun C(Other: UObject): InterpGroupDirector
        fun C(Other: Any): InterpGroupDirector
    }
}

external open class InterpData : UObject {
    constructor()
    constructor(Outer: UObject)
    open var InterpLength: Number
    open var PathBuildTime: Number
    open var InterpGroups: Array<InterpGroup>
    open var CurveEdSetup: InterpCurveEdSetup
    open var InterpFilters: Array<InterpFilter>
    open var SelectedFilter: InterpFilter
    open var DefaultFilters: Array<InterpFilter>
    open var EdSectionStart: Number
    open var EdSectionEnd: Number
    open var bShouldBakeAndPrune: Boolean
    open var CachedDirectorGroup: InterpGroupDirector
    open var AllEventNames: Array<String>

    companion object {
        fun Load(ResourceName: String): InterpData
        fun Find(Outer: UObject, ResourceName: String): InterpData
        fun GetDefaultObject(): InterpData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterpData
        fun C(Other: UObject): InterpData
        fun C(Other: Any): InterpData
    }
}

external open class InterpGroupActorInfo {
    open var ObjectName: String
    open var Actors: Array<Actor>
    open fun clone(): InterpGroupActorInfo

    companion object {
        fun C(Other: UObject): InterpGroupActorInfo
        fun C(Other: Any): InterpGroupActorInfo
    }
}

external open class CameraCutInfo {
    open var Location: Vector
    open var Timestamp: Number
    open fun clone(): CameraCutInfo

    companion object {
        fun C(Other: UObject): CameraCutInfo
        fun C(Other: Any): CameraCutInfo
    }
}

external open class MatineeActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var MatineeData: InterpData
    open var MatineeControllerName: String
    open var PlayRate: Number
    open var bPlayOnLevelLoad: Boolean
    open var bForceStartPos: Boolean
    open var ForceStartPosition: Number
    open var bLooping: Boolean
    open var bRewindOnPlay: Boolean
    open var bNoResetOnRewind: Boolean
    open var bRewindIfAlreadyPlaying: Boolean
    open var bDisableRadioFilter: Boolean
    open var bClientSideOnly: Boolean
    open var bSkipUpdateIfNotVisible: Boolean
    open var bIsSkippable: Boolean
    open var PreferredSplitScreenNum: Number
    open var bDisableMovementInput: Boolean
    open var bDisableLookAtInput: Boolean
    open var bHidePlayer: Boolean
    open var bHideHud: Boolean
    open var GroupActorInfos: Array<InterpGroupActorInfo>
    open var bShouldShowGore: Boolean
    open var GroupInst: Array<InterpGroupInst>
    open var CameraCuts: Array<CameraCutInfo>
    open var SpriteComponent: BillboardComponent
    open var bIsBeingEdited: Boolean
    open var bIsScrubbing: Boolean
    open var bIsPlaying: Boolean
    open var bReversePlayback: Boolean
    open var bPaused: Boolean
    open var bPendingStop: Boolean
    open var InterpPosition: Number
    open var ReplicationForceIsPlaying: Number
    open var OnPlay: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnStop: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnPause: UnrealEngineMulticastDelegate<() -> Unit>
    open fun Stop()
    open fun SetPosition(NewPosition: Number, bJump: Boolean)
    open fun SetLoopingState(bNewLooping: Boolean)
    open fun Reverse()
    open fun Play()
    open fun Pause()
    open fun EnableGroupByName(GroupName: String, bEnable: Boolean)
    open fun ChangePlaybackDirection()

    companion object {
        fun GetDefaultObject(): MatineeActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MatineeActor
        fun C(Other: UObject): MatineeActor
        fun C(Other: Any): MatineeActor
    }
}

external open class ChildActorComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var ChildActorClass: UnrealEngineClass
    open var ChildActor: Actor
    open var ChildActorTemplate: Actor
    open fun SetChildActorClass(InClass: UnrealEngineClass)

    companion object {
        fun Load(ResourceName: String): ChildActorComponent
        fun Find(Outer: UObject, ResourceName: String): ChildActorComponent
        fun GetDefaultObject(): ChildActorComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ChildActorComponent
        fun C(Other: UObject): ChildActorComponent
        fun C(Other: Any): ChildActorComponent
    }
}

external open class ModelComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var ModelBodySetup: BodySetup

    companion object {
        fun Load(ResourceName: String): ModelComponent
        fun Find(Outer: UObject, ResourceName: String): ModelComponent
        fun GetDefaultObject(): ModelComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ModelComponent
        fun C(Other: UObject): ModelComponent
        fun C(Other: Any): ModelComponent
    }
}

external open class LevelActorContainer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Actors: Array<Actor>

    companion object {
        fun Load(ResourceName: String): LevelActorContainer
        fun Find(Outer: UObject, ResourceName: String): LevelActorContainer
        fun GetDefaultObject(): LevelActorContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelActorContainer
        fun C(Other: UObject): LevelActorContainer
        fun C(Other: Any): LevelActorContainer
    }
}

external open class LevelScriptBlueprint : Blueprint {
    constructor()
    constructor(Outer: UObject)
    open var FriendlyName: String

    companion object {
        fun Load(ResourceName: String): LevelScriptBlueprint
        fun Find(Outer: UObject, ResourceName: String): LevelScriptBlueprint
        fun GetDefaultObject(): LevelScriptBlueprint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelScriptBlueprint
        fun C(Other: UObject): LevelScriptBlueprint
        fun C(Other: Any): LevelScriptBlueprint
    }
}

external open class LevelScriptActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var bInputEnabled: Boolean
    open fun WorldOriginLocationChanged(OldOriginLocation: IntVector, NewOriginLocation: IntVector)
    open fun SetCinematicMode(bCinematicMode: Boolean, bHidePlayer: Boolean, bAffectsHUD: Boolean, bAffectsMovement: Boolean, bAffectsTurning: Boolean)
    open fun RemoteEvent(EventName: String): Boolean
    open fun LevelReset()

    companion object {
        fun GetDefaultObject(): LevelScriptActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelScriptActor
        fun C(Other: UObject): LevelScriptActor
        fun C(Other: Any): LevelScriptActor
    }
}

external open class NavigationObjectBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var CapsuleComponent: CapsuleComponent
    open var GoodSprite: BillboardComponent
    open var BadSprite: BillboardComponent
    open var bIsPIEPlayerStart: Boolean

    companion object {
        fun GetDefaultObject(): NavigationObjectBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationObjectBase
        fun C(Other: UObject): NavigationObjectBase
        fun C(Other: Any): NavigationObjectBase
    }
}

external open class NavigationDataChunk : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NavigationDataName: String

    companion object {
        fun Load(ResourceName: String): NavigationDataChunk
        fun Find(Outer: UObject, ResourceName: String): NavigationDataChunk
        fun GetDefaultObject(): NavigationDataChunk
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationDataChunk
        fun C(Other: UObject): NavigationDataChunk
        fun C(Other: Any): NavigationDataChunk
    }
}

external object ELightingBuildQuality {
    var Quality_Preview: String /* "Quality_Preview" */
    var Quality_Medium: String /* "Quality_Medium" */
    var Quality_High: String /* "Quality_High" */
    var Quality_Production: String /* "Quality_Production" */
    var Quality_MAX: String /* "Quality_MAX" */
}

external open class MapBuildDataRegistry : UObject {
    constructor()
    constructor(Outer: UObject)
    open var LevelLightingQuality: String /* "Quality_Preview" | "Quality_Medium" | "Quality_High" | "Quality_Production" | "Quality_MAX" */

    companion object {
        fun Load(ResourceName: String): MapBuildDataRegistry
        fun Find(Outer: UObject, ResourceName: String): MapBuildDataRegistry
        fun GetDefaultObject(): MapBuildDataRegistry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MapBuildDataRegistry
        fun C(Other: UObject): MapBuildDataRegistry
        fun C(Other: Any): MapBuildDataRegistry
    }
}

external object ETextureSizingType {
    var TextureSizingType_UseSingleTextureSize: String /* "TextureSizingType_UseSingleTextureSize" */
    var TextureSizingType_UseAutomaticBiasedSizes: String /* "TextureSizingType_UseAutomaticBiasedSizes" */
    var TextureSizingType_UseManualOverrideTextureSize: String /* "TextureSizingType_UseManualOverrideTextureSize" */
    var TextureSizingType_UseSimplygonAutomaticSizing: String /* "TextureSizingType_UseSimplygonAutomaticSizing" */
    var TextureSizingType_MAX: String /* "TextureSizingType_MAX" */
}

external object EMaterialMergeType {
    var MaterialMergeType_Default: String /* "MaterialMergeType_Default" */
    var MaterialMergeType_Simplygon: String /* "MaterialMergeType_Simplygon" */
    var MaterialMergeType_MAX: String /* "MaterialMergeType_MAX" */
}

external open class MaterialProxySettings {
    open var TextureSize: IntPoint
    open var GutterSpace: Number
    open var MetallicConstant: Number
    open var RoughnessConstant: Number
    open var SpecularConstant: Number
    open var OpacityConstant: Number
    open var OpacityMaskConstant: Number
    open var AmbientOcclusionConstant: Number
    open var TextureSizingType: String /* "TextureSizingType_UseSingleTextureSize" | "TextureSizingType_UseAutomaticBiasedSizes" | "TextureSizingType_UseManualOverrideTextureSize" | "TextureSizingType_UseSimplygonAutomaticSizing" | "TextureSizingType_MAX" */
    open var MaterialMergeType: String /* "MaterialMergeType_Default" | "MaterialMergeType_Simplygon" | "MaterialMergeType_MAX" */
    open var BlendMode: String /* "BLEND_Opaque" | "BLEND_Masked" | "BLEND_Translucent" | "BLEND_Additive" | "BLEND_Modulate" | "BLEND_AlphaComposite" | "BLEND_AlphaHoldout" | "BLEND_MAX" */
    open var bAllowTwoSidedMaterial: Boolean
    open var bNormalMap: Boolean
    open var bMetallicMap: Boolean
    open var bRoughnessMap: Boolean
    open var bSpecularMap: Boolean
    open var bEmissiveMap: Boolean
    open var bOpacityMap: Boolean
    open var bOpacityMaskMap: Boolean
    open var bAmbientOcclusionMap: Boolean
    open var DiffuseTextureSize: IntPoint
    open var NormalTextureSize: IntPoint
    open var MetallicTextureSize: IntPoint
    open var RoughnessTextureSize: IntPoint
    open var SpecularTextureSize: IntPoint
    open var EmissiveTextureSize: IntPoint
    open var OpacityTextureSize: IntPoint
    open var OpacityMaskTextureSize: IntPoint
    open var AmbientOcclusionTextureSize: IntPoint
    open fun clone(): MaterialProxySettings

    companion object {
        fun C(Other: UObject): MaterialProxySettings
        fun C(Other: Any): MaterialProxySettings
    }
}

external open class LevelSimplificationDetails {
    open var bCreatePackagePerAsset: Boolean
    open var DetailsPercentage: Number
    open var StaticMeshMaterialSettings: MaterialProxySettings
    open var bOverrideLandscapeExportLOD: Boolean
    open var LandscapeExportLOD: Number
    open var LandscapeMaterialSettings: MaterialProxySettings
    open var bBakeFoliageToLandscape: Boolean
    open var bBakeGrassToLandscape: Boolean
    open var bGenerateMeshNormalMap: Boolean
    open var bGenerateMeshMetallicMap: Boolean
    open var bGenerateMeshRoughnessMap: Boolean
    open var bGenerateMeshSpecularMap: Boolean
    open var bGenerateLandscapeNormalMap: Boolean
    open var bGenerateLandscapeMetallicMap: Boolean
    open var bGenerateLandscapeRoughnessMap: Boolean
    open var bGenerateLandscapeSpecularMap: Boolean
    open fun clone(): LevelSimplificationDetails

    companion object {
        fun C(Other: UObject): LevelSimplificationDetails
        fun C(Other: Any): LevelSimplificationDetails
    }
}

external object EVisibilityAggressiveness {
    var VIS_LeastAggressive: String /* "VIS_LeastAggressive" */
    var VIS_ModeratelyAggressive: String /* "VIS_ModeratelyAggressive" */
    var VIS_MostAggressive: String /* "VIS_MostAggressive" */
    var VIS_Max: String /* "VIS_Max" */
}

external open class NavigationSystemConfig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NavigationSystemClass: SoftClassPath
    open var bIsOverriden: Boolean

    companion object {
        fun Load(ResourceName: String): NavigationSystemConfig
        fun Find(Outer: UObject, ResourceName: String): NavigationSystemConfig
        fun GetDefaultObject(): NavigationSystemConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationSystemConfig
        fun C(Other: UObject): NavigationSystemConfig
        fun C(Other: Any): NavigationSystemConfig
    }
}

external open class DefaultPhysicsVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : PhysicsVolume {
    companion object {
        fun GetDefaultObject(): DefaultPhysicsVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DefaultPhysicsVolume
        fun C(Other: UObject): DefaultPhysicsVolume
        fun C(Other: Any): DefaultPhysicsVolume
    }
}

external open class PhysicsCollisionHandler : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ImpactThreshold: Number
    open var ImpactReFireDelay: Number
    open var DefaultImpactSound: SoundBase
    open var LastImpactSoundTime: Number

    companion object {
        fun Load(ResourceName: String): PhysicsCollisionHandler
        fun Find(Outer: UObject, ResourceName: String): PhysicsCollisionHandler
        fun GetDefaultObject(): PhysicsCollisionHandler
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PhysicsCollisionHandler
        fun C(Other: UObject): PhysicsCollisionHandler
        fun C(Other: Any): PhysicsCollisionHandler
    }
}

external open class GameSession(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var MaxSpectators: Number
    open var MaxPlayers: Number
    open var MaxPartySize: Number
    open var MaxSplitscreensPerConnection: Number
    open var bRequiresPushToTalk: Boolean
    open var SessionName: String

    companion object {
        fun GetDefaultObject(): GameSession
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameSession
        fun C(Other: UObject): GameSession
        fun C(Other: Any): GameSession
    }
}

external open class GameStateBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var GameModeClass: UnrealEngineClass
    open var AuthorityGameMode: GameModeBase
    open var SpectatorClass: UnrealEngineClass
    open var PlayerArray: Array<PlayerState>
    open var bReplicatedHasBegunPlay: Boolean
    open var ReplicatedWorldTimeSeconds: Number
    open var ServerWorldTimeSecondsDelta: Number
    open var ServerWorldTimeSecondsUpdateFrequency: Number
    open fun OnRep_SpectatorClass()
    open fun OnRep_ReplicatedWorldTimeSeconds()
    open fun OnRep_ReplicatedHasBegunPlay()
    open fun OnRep_GameModeClass()
    open fun HasMatchStarted(): Boolean
    open fun HasBegunPlay(): Boolean
    open fun GetServerWorldTimeSeconds(): Number
    open fun GetPlayerStartTime(Controller: Controller): Number
    open fun GetPlayerRespawnDelay(Controller: Controller): Number

    companion object {
        fun GetDefaultObject(): GameStateBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameStateBase
        fun C(Other: UObject): GameStateBase
        fun C(Other: Any): GameStateBase
    }
}

external open class ServerStatReplicator(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var bUpdateStatNet: Boolean
    open var bOverwriteClientStats: Boolean
    open var Channels: Any
    open var InRate: Any
    open var OutRate: Any
    open var OutSaturation: Any
    open var MaxPacketOverhead: Any
    open var InRateClientMax: Any
    open var InRateClientMin: Any
    open var InRateClientAvg: Any
    open var InPacketsClientMax: Any
    open var InPacketsClientMin: Any
    open var InPacketsClientAvg: Any
    open var OutRateClientMax: Any
    open var OutRateClientMin: Any
    open var OutRateClientAvg: Any
    open var OutPacketsClientMax: Any
    open var OutPacketsClientMin: Any
    open var OutPacketsClientAvg: Any
    open var NetNumClients: Any
    open var InPackets: Any
    open var OutPackets: Any
    open var InBunches: Any
    open var OutBunches: Any
    open var OutLoss: Any
    open var InLoss: Any
    open var VoiceBytesSent: Any
    open var VoiceBytesRecv: Any
    open var VoicePacketsSent: Any
    open var VoicePacketsRecv: Any
    open var PercentInVoice: Any
    open var PercentOutVoice: Any
    open var NumActorChannels: Any
    open var NumConsideredActors: Any
    open var PrioritizedActors: Any
    open var NumRelevantActors: Any
    open var NumRelevantDeletedActors: Any
    open var NumReplicatedActorAttempts: Any
    open var NumReplicatedActors: Any
    open var NumActors: Any
    open var NumNetActors: Any
    open var NumDormantActors: Any
    open var NumInitiallyDormantActors: Any
    open var NumNetGUIDsAckd: Any
    open var NumNetGUIDsPending: Any
    open var NumNetGUIDsUnAckd: Any
    open var ObjPathBytes: Any
    open var NetGUIDOutRate: Any
    open var NetGUIDInRate: Any
    open var NetSaturated: Any

    companion object {
        fun GetDefaultObject(): ServerStatReplicator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ServerStatReplicator
        fun C(Other: UObject): ServerStatReplicator
        fun C(Other: Any): ServerStatReplicator
    }
}

external open class GameModeBase(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var OptionsString: String
    open var GameSessionClass: UnrealEngineClass
    open var GameStateClass: UnrealEngineClass
    open var PlayerControllerClass: UnrealEngineClass
    open var PlayerStateClass: UnrealEngineClass
    open var HUDClass: UnrealEngineClass
    open var DefaultPawnClass: UnrealEngineClass
    open var SpectatorClass: UnrealEngineClass
    open var ReplaySpectatorPlayerControllerClass: UnrealEngineClass
    open var ServerStatReplicatorClass: UnrealEngineClass
    open var GameSession: GameSession
    open var GameState: GameStateBase
    open var ServerStatReplicator: ServerStatReplicator
    open var DefaultPlayerName: String
    open var bUseSeamlessTravel: Boolean
    open var bStartPlayersAsSpectators: Boolean
    open var bPauseable: Boolean
    open fun StartPlay()
    open fun SpawnDefaultPawnFor(NewPlayer: Controller, StartSpot: Actor): Pawn
    open fun SpawnDefaultPawnAtTransform(NewPlayer: Controller, SpawnTransform: Transform): Pawn
    open fun ShouldReset(ActorToReset: Actor): Boolean
    open fun ReturnToMainMenuHost()
    open fun RestartPlayerAtTransform(NewPlayer: Controller, SpawnTransform: Transform)
    open fun RestartPlayerAtPlayerStart(NewPlayer: Controller, StartSpot: Actor)
    open fun RestartPlayer(NewPlayer: Controller)
    open fun ResetLevel()
    open fun PlayerCanRestart(Player: PlayerController): Boolean
    open fun MustSpectate(NewPlayerController: PlayerController): Boolean
    open fun K2_PostLogin(NewPlayer: PlayerController)
    open fun K2_OnSwapPlayerControllers(OldPC: PlayerController, NewPC: PlayerController)
    open fun K2_OnRestartPlayer(NewPlayer: Controller)
    open fun K2_OnLogout(ExitingController: Controller)
    open fun K2_OnChangeName(Other: Controller, NewName: String, bNameChange: Boolean)
    open fun K2_FindPlayerStart(Player: Controller, IncomingName: String): Actor
    open fun InitStartSpot(StartSpot: Actor, NewPlayer: Controller)
    open fun InitializeHUDForPlayer(NewPlayer: PlayerController)
    open fun HasMatchStarted(): Boolean
    open fun HandleStartingNewPlayer(NewPlayer: PlayerController)
    open fun GetNumSpectators(): Number
    open fun GetNumPlayers(): Number
    open fun GetDefaultPawnClassForController(InController: Controller): UnrealEngineClass
    open fun FindPlayerStart(Player: Controller, IncomingName: String): Actor
    open fun ChoosePlayerStart(Player: Controller): Actor
    open fun ChangeName(Controller: Controller, NewName: String, bNameChange: Boolean)
    open fun CanSpectate(Viewer: PlayerController, ViewTarget: PlayerState): Boolean
    open fun HandleSeamlessTravelPlayer(C: Controller = definedExternally): `T$131`

    companion object {
        fun GetDefaultObject(): GameModeBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameModeBase
        fun C(Other: UObject): GameModeBase
        fun C(Other: Any): GameModeBase
        fun HandleSeamlessTravelPlayer(GameMode: GameModeBase, C: Controller = definedExternally): `T$131`
    }
}

external open class GameNetworkManager(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var BadPacketLossThreshold: Number
    open var SeverePacketLossThreshold: Number
    open var BadPingThreshold: Number
    open var SeverePingThreshold: Number
    open var AdjustedNetSpeed: Number
    open var LastNetSpeedUpdateTime: Number
    open var TotalNetBandwidth: Number
    open var MinDynamicBandwidth: Number
    open var MaxDynamicBandwidth: Number
    open var bIsStandbyCheckingEnabled: Boolean
    open var bHasStandbyCheatTriggered: Boolean
    open var StandbyRxCheatTime: Number
    open var StandbyTxCheatTime: Number
    open var PercentMissingForRxStandby: Number
    open var PercentMissingForTxStandby: Number
    open var PercentForBadPing: Number
    open var JoinInProgressStandbyWaitTime: Number
    open var MoveRepSize: Number
    open var MAXPOSITIONERRORSQUARED: Number
    open var MAXNEARZEROVELOCITYSQUARED: Number
    open var CLIENTADJUSTUPDATECOST: Number
    open var MAXCLIENTUPDATEINTERVAL: Number
    open var MaxClientForcedUpdateDuration: Number
    open var ServerForcedUpdateHitchThreshold: Number
    open var ServerForcedUpdateHitchCooldown: Number
    open var MaxMoveDeltaTime: Number
    open var MaxClientSmoothingDeltaTime: Number
    open var ClientNetSendMoveDeltaTime: Number
    open var ClientNetSendMoveDeltaTimeThrottled: Number
    open var ClientNetSendMoveDeltaTimeStationary: Number
    open var ClientNetSendMoveThrottleAtNetSpeed: Number
    open var ClientNetSendMoveThrottleOverPlayerCount: Number
    open var ClientAuthorativePosition: Boolean
    open var ClientErrorUpdateRateLimit: Number
    open var ClientNetCamUpdateDeltaTime: Number
    open var ClientNetCamUpdatePositionLimit: Number
    open var bMovementTimeDiscrepancyDetection: Boolean
    open var bMovementTimeDiscrepancyResolution: Boolean
    open var MovementTimeDiscrepancyMaxTimeMargin: Number
    open var MovementTimeDiscrepancyMinTimeMargin: Number
    open var MovementTimeDiscrepancyResolutionRate: Number
    open var MovementTimeDiscrepancyDriftAllowance: Number
    open var bMovementTimeDiscrepancyForceCorrectionsDuringResolution: Boolean
    open var bUseDistanceBasedRelevancy: Boolean

    companion object {
        fun GetDefaultObject(): GameNetworkManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameNetworkManager
        fun C(Other: UObject): GameNetworkManager
        fun C(Other: Any): GameNetworkManager
    }
}

external object EVolumeLightingMethod {
    var VLM_VolumetricLightmap: String /* "VLM_VolumetricLightmap" */
    var VLM_SparseVolumeLightingSamples: String /* "VLM_SparseVolumeLightingSamples" */
    var VLM_MAX: String /* "VLM_MAX" */
}

external open class LightmassWorldInfoSettings {
    open var StaticLightingLevelScale: Number
    open var NumIndirectLightingBounces: Number
    open var NumSkyLightingBounces: Number
    open var IndirectLightingQuality: Number
    open var IndirectLightingSmoothness: Number
    open var EnvironmentColor: Color
    open var EnvironmentIntensity: Number
    open var EmissiveBoost: Number
    open var DiffuseBoost: Number
    open var VolumeLightingMethod: String /* "VLM_VolumetricLightmap" | "VLM_SparseVolumeLightingSamples" | "VLM_MAX" */
    open var bUseAmbientOcclusion: Boolean
    open var bGenerateAmbientOcclusionMaterialMask: Boolean
    open var bVisualizeMaterialDiffuse: Boolean
    open var bVisualizeAmbientOcclusion: Boolean
    open var bCompressLightmaps: Boolean
    open var VolumetricLightmapDetailCellSize: Number
    open var VolumetricLightmapMaximumBrickMemoryMb: Number
    open var VolumetricLightmapSphericalHarmonicSmoothing: Number
    open var VolumeLightSamplePlacementScale: Number
    open var DirectIlluminationOcclusionFraction: Number
    open var IndirectIlluminationOcclusionFraction: Number
    open var OcclusionExponent: Number
    open var FullyOccludedSamplesFraction: Number
    open var MaxOcclusionDistance: Number
    open fun clone(): LightmassWorldInfoSettings

    companion object {
        fun C(Other: UObject): LightmassWorldInfoSettings
        fun C(Other: Any): LightmassWorldInfoSettings
    }
}

external object ReverbPreset {
    var REVERB_Default: String /* "REVERB_Default" */
    var REVERB_Bathroom: String /* "REVERB_Bathroom" */
    var REVERB_StoneRoom: String /* "REVERB_StoneRoom" */
    var REVERB_Auditorium: String /* "REVERB_Auditorium" */
    var REVERB_ConcertHall: String /* "REVERB_ConcertHall" */
    var REVERB_Cave: String /* "REVERB_Cave" */
    var REVERB_Hallway: String /* "REVERB_Hallway" */
    var REVERB_StoneCorridor: String /* "REVERB_StoneCorridor" */
    var REVERB_Alley: String /* "REVERB_Alley" */
    var REVERB_Forest: String /* "REVERB_Forest" */
    var REVERB_City: String /* "REVERB_City" */
    var REVERB_Mountains: String /* "REVERB_Mountains" */
    var REVERB_Quarry: String /* "REVERB_Quarry" */
    var REVERB_Plain: String /* "REVERB_Plain" */
    var REVERB_ParkingLot: String /* "REVERB_ParkingLot" */
    var REVERB_SewerPipe: String /* "REVERB_SewerPipe" */
    var REVERB_Underwater: String /* "REVERB_Underwater" */
    var REVERB_SmallRoom: String /* "REVERB_SmallRoom" */
    var REVERB_MediumRoom: String /* "REVERB_MediumRoom" */
    var REVERB_LargeRoom: String /* "REVERB_LargeRoom" */
    var REVERB_MediumHall: String /* "REVERB_MediumHall" */
    var REVERB_LargeHall: String /* "REVERB_LargeHall" */
    var REVERB_Plate: String /* "REVERB_Plate" */
    var REVERB_MAX: String /* "REVERB_MAX" */
}

external open class ReverbEffect : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Density: Number
    open var Diffusion: Number
    open var Gain: Number
    open var GainHF: Number
    open var DecayTime: Number
    open var DecayHFRatio: Number
    open var ReflectionsGain: Number
    open var ReflectionsDelay: Number
    open var LateGain: Number
    open var LateDelay: Number
    open var AirAbsorptionGainHF: Number
    open var RoomRolloffFactor: Number
    open var bChanged: Boolean

    companion object {
        fun Load(ResourceName: String): ReverbEffect
        fun Find(Outer: UObject, ResourceName: String): ReverbEffect
        fun GetDefaultObject(): ReverbEffect
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ReverbEffect
        fun C(Other: UObject): ReverbEffect
        fun C(Other: Any): ReverbEffect
    }
}

external open class ReverbSettings {
    open var bApplyReverb: Boolean
    open var ReverbType: String /* "REVERB_Default" | "REVERB_Bathroom" | "REVERB_StoneRoom" | "REVERB_Auditorium" | "REVERB_ConcertHall" | "REVERB_Cave" | "REVERB_Hallway" | "REVERB_StoneCorridor" | "REVERB_Alley" | "REVERB_Forest" | "REVERB_City" | "REVERB_Mountains" | "REVERB_Quarry" | "REVERB_Plain" | "REVERB_ParkingLot" | "REVERB_SewerPipe" | "REVERB_Underwater" | "REVERB_SmallRoom" | "REVERB_MediumRoom" | "REVERB_LargeRoom" | "REVERB_MediumHall" | "REVERB_LargeHall" | "REVERB_Plate" | "REVERB_MAX" */
    open var ReverbEffect: ReverbEffect
    open var ReverbPluginEffect: SoundEffectSubmixPreset
    open var Volume: Number
    open var FadeTime: Number
    open fun clone(): ReverbSettings

    companion object {
        fun C(Other: UObject): ReverbSettings
        fun C(Other: Any): ReverbSettings
    }
}

external open class InteriorSettings {
    open var bIsWorldSettings: Boolean
    open var ExteriorVolume: Number
    open var ExteriorTime: Number
    open var ExteriorLPF: Number
    open var ExteriorLPFTime: Number
    open var InteriorVolume: Number
    open var InteriorTime: Number
    open var InteriorLPF: Number
    open var InteriorLPFTime: Number
    open fun clone(): InteriorSettings

    companion object {
        fun C(Other: UObject): InteriorSettings
        fun C(Other: Any): InteriorSettings
    }
}

external object EProxyNormalComputationMethod {
    var AngleWeighted: String /* "AngleWeighted" */
    var AreaWeighted: String /* "AreaWeighted" */
    var EqualWeighted: String /* "EqualWeighted" */
    var EProxyNormalComputationMethod_MAX: String /* "EProxyNormalComputationMethod_MAX" */
}

external object ELandscapeCullingPrecision {
    var High: String /* "High" */
    var Medium: String /* "Medium" */
    var Low: String /* "Low" */
    var ELandscapeCullingPrecision_MAX: String /* "ELandscapeCullingPrecision_MAX" */
}

external open class MeshProxySettings {
    open var ScreenSize: Number
    open var VoxelSize: Number
    open var MaterialSettings: MaterialProxySettings
    open var TextureWidth: Number
    open var TextureHeight: Number
    open var bExportNormalMap: Boolean
    open var bExportMetallicMap: Boolean
    open var bExportRoughnessMap: Boolean
    open var bExportSpecularMap: Boolean
    open var bBakeVertexData: Boolean
    open var MergeDistance: Number
    open var UnresolvedGeometryColor: Color
    open var MaxRayCastDist: Number
    open var HardAngleThreshold: Number
    open var LightMapResolution: Number
    open var NormalCalculationMethod: String /* "AngleWeighted" | "AreaWeighted" | "EqualWeighted" | "EProxyNormalComputationMethod_MAX" */
    open var LandscapeCullingPrecision: String /* "High" | "Medium" | "Low" | "ELandscapeCullingPrecision_MAX" */
    open var bCalculateCorrectLODModel: Boolean
    open var bOverrideVoxelSize: Boolean
    open var bOverrideTransferDistance: Boolean
    open var bUseHardAngleThreshold: Boolean
    open var bComputeLightMapResolution: Boolean
    open var bRecalculateNormals: Boolean
    open var bUseLandscapeCulling: Boolean
    open var bAllowAdjacency: Boolean
    open var bAllowDistanceField: Boolean
    open var bReuseMeshLightmapUVs: Boolean
    open var bCreateCollision: Boolean
    open var bAllowVertexColors: Boolean
    open var bGenerateLightmapUVs: Boolean
    open fun clone(): MeshProxySettings

    companion object {
        fun C(Other: UObject): MeshProxySettings
        fun C(Other: Any): MeshProxySettings
    }
}

external object EUVOutput {
    var DoNotOutputChannel: String /* "DoNotOutputChannel" */
    var OutputChannel: String /* "OutputChannel" */
    var EUVOutput_MAX: String /* "EUVOutput_MAX" */
}

external object EMeshLODSelectionType {
    var AllLODs: String /* "AllLODs" */
    var SpecificLOD: String /* "SpecificLOD" */
    var CalculateLOD: String /* "CalculateLOD" */
    var LowestDetailLOD: String /* "LowestDetailLOD" */
    var EMeshLODSelectionType_MAX: String /* "EMeshLODSelectionType_MAX" */
}

external open class MeshMergingSettings {
    open var TargetLightMapResolution: Number
    open var OutputUVs: String /* "DoNotOutputChannel" | "OutputChannel" | "EUVOutput_MAX" */
    open var MaterialSettings: MaterialProxySettings
    open var GutterSize: Number
    open var SpecificLOD: Number
    open var LODSelectionType: String /* "AllLODs" | "SpecificLOD" | "CalculateLOD" | "LowestDetailLOD" | "EMeshLODSelectionType_MAX" */
    open var bGenerateLightMapUV: Boolean
    open var bComputedLightMapResolution: Boolean
    open var bPivotPointAtZero: Boolean
    open var bMergePhysicsData: Boolean
    open var bMergeMaterials: Boolean
    open var bBakeVertexDataToMesh: Boolean
    open var bUseVertexDataForBakingMaterial: Boolean
    open var bUseTextureBinning: Boolean
    open var bReuseMeshLightmapUVs: Boolean
    open var bMergeEquivalentMaterials: Boolean
    open var bUseLandscapeCulling: Boolean
    open var bIncludeImposters: Boolean
    open var bAllowDistanceField: Boolean
    open var bImportVertexColors: Boolean
    open var bCalculateCorrectLODModel: Boolean
    open var bExportNormalMap: Boolean
    open var bExportMetallicMap: Boolean
    open var bExportRoughnessMap: Boolean
    open var bExportSpecularMap: Boolean
    open var MergedMaterialAtlasResolution: Number
    open var ExportSpecificLOD: Number
    open fun clone(): MeshMergingSettings

    companion object {
        fun C(Other: UObject): MeshMergingSettings
        fun C(Other: Any): MeshMergingSettings
    }
}

external open class HierarchicalSimplification {
    open var TransitionScreenSize: Number
    open var OverrideDrawDistance: Number
    open var bUseOverrideDrawDistance: Boolean
    open var bAllowSpecificExclusion: Boolean
    open var bSimplifyMesh: Boolean
    open var bOnlyGenerateClustersForVolumes: Boolean
    open var bReusePreviousLevelClusters: Boolean
    open var ProxySetting: MeshProxySettings
    open var MergeSetting: MeshMergingSettings
    open var DesiredBoundRadius: Number
    open var DesiredFillingPercentage: Number
    open var MinNumberOfActorsToBuild: Number
    open fun clone(): HierarchicalSimplification

    companion object {
        fun C(Other: UObject): HierarchicalSimplification
        fun C(Other: Any): HierarchicalSimplification
    }
}

external open class BookmarkBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BookmarkBase
        fun Find(Outer: UObject, ResourceName: String): BookmarkBase
        fun GetDefaultObject(): BookmarkBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BookmarkBase
        fun C(Other: UObject): BookmarkBase
        fun C(Other: Any): BookmarkBase
    }
}

external open class BookMark : BookmarkBase {
    constructor()
    constructor(Outer: UObject)
    open var Location: Vector
    open var Rotation: Rotator
    open var HiddenLevels: Array<String>

    companion object {
        fun Load(ResourceName: String): BookMark
        fun Find(Outer: UObject, ResourceName: String): BookMark
        fun GetDefaultObject(): BookMark
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BookMark
        fun C(Other: UObject): BookMark
        fun C(Other: Any): BookMark
    }
}

external open class BroadphaseSettings {
    open var bUseMBPOnClient: Boolean
    open var bUseMBPOnServer: Boolean
    open var bUseMBPOuterBounds: Boolean
    open var MBPBounds: Box
    open var MBPOuterBounds: Box
    open var MBPNumSubdivs: Any
    open fun clone(): BroadphaseSettings

    companion object {
        fun C(Other: UObject): BroadphaseSettings
        fun C(Other: Any): BroadphaseSettings
    }
}

external open class NetViewer {
    open var Connection: NetConnection
    open var InViewer: Actor
    open var ViewTarget: Actor
    open var ViewLocation: Vector
    open var ViewDir: Vector
    open fun clone(): NetViewer

    companion object {
        fun C(Other: UObject): NetViewer
        fun C(Other: Any): NetViewer
    }
}

external open class WorldSettings(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var VisibilityCellSize: Number
    open var VisibilityAggressiveness: String /* "VIS_LeastAggressive" | "VIS_ModeratelyAggressive" | "VIS_MostAggressive" | "VIS_Max" */
    open var bPrecomputeVisibility: Boolean
    open var bPlaceCellsOnlyAlongCameraTracks: Boolean
    open var bEnableWorldBoundsChecks: Boolean
    open var bEnableNavigationSystem: Boolean
    open var bEnableAISystem: Boolean
    open var bEnableWorldComposition: Boolean
    open var bUseClientSideLevelStreamingVolumes: Boolean
    open var bEnableWorldOriginRebasing: Boolean
    open var bWorldGravitySet: Boolean
    open var bGlobalGravitySet: Boolean
    open var bMinimizeBSPSections: Boolean
    open var bForceNoPrecomputedLighting: Boolean
    open var bHighPriorityLoading: Boolean
    open var bHighPriorityLoadingLocal: Boolean
    open var bOverrideDefaultBroadphaseSettings: Boolean
    open var NavigationSystemConfig: NavigationSystemConfig
    open var NavigationSystemConfigOverride: NavigationSystemConfig
    open var WorldToMeters: Number
    open var KillZ: Number
    open var KillZDamageType: UnrealEngineClass
    open var WorldGravityZ: Number
    open var GlobalGravityZ: Number
    open var DefaultPhysicsVolumeClass: UnrealEngineClass
    open var PhysicsCollisionHandlerClass: UnrealEngineClass
    open var DefaultGameMode: UnrealEngineClass
    open var GameNetworkManagerClass: UnrealEngineClass
    open var PackedLightAndShadowMapTextureSize: Number
    open var DefaultColorScale: Vector
    open var DefaultMaxDistanceFieldOcclusionDistance: Number
    open var GlobalDistanceFieldViewDistance: Number
    open var DynamicIndirectShadowsSelfShadowingIntensity: Number
    open var LightmassSettings: LightmassWorldInfoSettings
    open var DefaultReverbSettings: ReverbSettings
    open var DefaultAmbientZoneSettings: InteriorSettings
    open var MonoCullingDistance: Number
    open var DefaultBaseSoundMix: SoundMix
    open var bEnableHierarchicalLODSystem: Boolean
    open var HLODSetupAsset: Class
    open var OverrideBaseMaterial: MaterialInterface
    open var HierarchicalLODSetup: Array<HierarchicalSimplification>
    open var NumHLODLevels: Number
    open var bGenerateSingleClusterForLevel: Boolean
    open var Bookmarks: BookMark
    open var TimeDilation: Number
    open var MatineeTimeDilation: Number
    open var DemoPlayTimeDilation: Number
    open var MinGlobalTimeDilation: Number
    open var MaxGlobalTimeDilation: Number
    open var MinUndilatedFrameTime: Number
    open var MaxUndilatedFrameTime: Number
    open var BroadphaseSettings: BroadphaseSettings
    open var Pauser: PlayerState
    open var ReplicationViewers: Array<NetViewer>
    open var AssetUserData: Array<AssetUserData>
    open var PauserPlayerState: PlayerState
    open var MaxNumberOfBookmarks: Number
    open var DefaultBookmarkClass: UnrealEngineClass
    open var BookmarkArray: Array<BookmarkBase>
    open var LastBookmarkClass: UnrealEngineClass
    open fun OnRep_WorldGravityZ()

    companion object {
        fun GetDefaultObject(): WorldSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldSettings
        fun C(Other: UObject): WorldSettings
        fun C(Other: Any): WorldSettings
    }
}

external open class ReplicatedStaticActorDestructionInfo {
    open var ObjClass: UnrealEngineClass
    open fun clone(): ReplicatedStaticActorDestructionInfo

    companion object {
        fun C(Other: UObject): ReplicatedStaticActorDestructionInfo
        fun C(Other: Any): ReplicatedStaticActorDestructionInfo
    }
}

external open class Level : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OwningWorld: World
    open var Model: Model
    open var ModelComponents: Array<ModelComponent>
    open var ActorCluster: LevelActorContainer
    open var LevelScriptBlueprint: LevelScriptBlueprint
    open var TextureStreamingResourceGuids: Array<Guid>
    open var NumTextureStreamingUnbuiltComponents: Number
    open var NumTextureStreamingDirtyResources: Number
    open var LevelScriptActor: LevelScriptActor
    open var NavListStart: NavigationObjectBase
    open var NavListEnd: NavigationObjectBase
    open var NavDataChunks: Array<NavigationDataChunk>
    open var LightmapTotalSize: Number
    open var ShadowmapTotalSize: Number
    open var StaticNavigableGeometry: Array<Vector>
    open var StreamingTextureGuids: Array<Guid>
    open var LevelBuildDataId: Guid
    open var MapBuildData: MapBuildDataRegistry
    open var LightBuildLevelOffset: IntVector
    open var bIsLightingScenario: Boolean
    open var bTextureStreamingRotationChanged: Boolean
    open var bStaticComponentsRegisteredInStreamingManager: Boolean
    open var bIsVisible: Boolean
    open var bLocked: Boolean
    open var LevelSimplification: LevelSimplificationDetails
    open var LevelColor: LinearColor
    open var bLevelOkayForPlacementWhileCheckedIn: Boolean
    open var WorldSettings: WorldSettings
    open var AssetUserData: Array<AssetUserData>
    open var DestroyedReplicatedStaticActors: Array<ReplicatedStaticActorDestructionInfo>
    open fun UpdateModelComponents()

    companion object {
        fun Load(ResourceName: String): Level
        fun Find(Outer: UObject, ResourceName: String): Level
        fun GetDefaultObject(): Level
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Level
        fun C(Other: UObject): Level
        fun C(Other: Any): Level
        fun UpdateModelComponents(Level: Level)
    }
}

external open class NavDataConfig : NavAgentProperties {
    open var Name: String
    open var Color: Color
    open var DefaultQueryExtent: Vector
    open var NavigationDataClass: UnrealEngineClass
    open var NavigationDataClassName: SoftClassPath
    override fun clone(): NavDataConfig

    companion object {
        fun C(Other: UObject): NavDataConfig
        fun C(Other: Any): NavDataConfig
    }
}

external object ERuntimeGenerationType {
    var Static: String /* "Static" */
    var DynamicModifiersOnly: String /* "DynamicModifiersOnly" */
    var Dynamic: String /* "Dynamic" */
    var LegacyGeneration: String /* "LegacyGeneration" */
    var ERuntimeGenerationType_MAX: String /* "ERuntimeGenerationType_MAX" */
}

external open class SupportedAreaData {
    open var AreaClassName: String
    open var AreaID: Number
    open var AreaClass: UnrealEngineClass
    open fun clone(): SupportedAreaData

    companion object {
        fun C(Other: UObject): SupportedAreaData
        fun C(Other: Any): SupportedAreaData
    }
}

external open class NavigationData(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var RenderingComp: PrimitiveComponent
    open var NavDataConfig: NavDataConfig
    open var bEnableDrawing: Boolean
    open var bForceRebuildOnLoad: Boolean
    open var bCanBeMainNavData: Boolean
    open var bCanSpawnOnRebuild: Boolean
    open var bRebuildAtRuntime: Boolean
    open var RuntimeGeneration: String /* "Static" | "DynamicModifiersOnly" | "Dynamic" | "LegacyGeneration" | "ERuntimeGenerationType_MAX" */
    open var ObservedPathsTickInterval: Number
    open var DataVersion: Any
    open var SupportedAreas: Array<SupportedAreaData>

    companion object {
        fun GetDefaultObject(): NavigationData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationData
        fun C(Other: UObject): NavigationData
        fun C(Other: Any): NavigationData
    }
}

external object EPathFollowingAction {
    var Error: String /* "Error" */
    var NoMove: String /* "NoMove" */
    var DirectMove: String /* "DirectMove" */
    var PartialPath: String /* "PartialPath" */
    var PathToGoal: String /* "PathToGoal" */
    var EPathFollowingAction_MAX: String /* "EPathFollowingAction_MAX" */
}

external open class PathFollowingComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var MovementComp: NavMovementComponent
    open var MyNavData: NavigationData
    open fun OnNavDataRegistered(NavData: NavigationData)
    open fun OnActorBump(SelfActor: Actor, OtherActor: Actor, NormalImpulse: Vector, Hit: HitResult)
    open fun GetPathDestination(): Vector
    open fun GetPathActionType(): String /* "Error" | "NoMove" | "DirectMove" | "PartialPath" | "PathToGoal" | "EPathFollowingAction_MAX" */

    companion object {
        fun Load(ResourceName: String): PathFollowingComponent
        fun Find(Outer: UObject, ResourceName: String): PathFollowingComponent
        fun GetDefaultObject(): PathFollowingComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PathFollowingComponent
        fun C(Other: UObject): PathFollowingComponent
        fun C(Other: Any): PathFollowingComponent
    }
}

external open class BlackboardKeyType : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BlackboardKeyType
        fun Find(Outer: UObject, ResourceName: String): BlackboardKeyType
        fun GetDefaultObject(): BlackboardKeyType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlackboardKeyType
        fun C(Other: UObject): BlackboardKeyType
        fun C(Other: Any): BlackboardKeyType
    }
}

external open class BlackboardEntry {
    open var EntryName: String
    open var EntryDescription: String
    open var KeyType: BlackboardKeyType
    open var bInstanceSynced: Boolean
    open fun clone(): BlackboardEntry

    companion object {
        fun C(Other: UObject): BlackboardEntry
        fun C(Other: Any): BlackboardEntry
    }
}

external open class BlackboardData : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var Parent: BlackboardData
    open var ParentKeys: Array<BlackboardEntry>
    open var Keys: Array<BlackboardEntry>
    open var bHasSynchronizedKeys: Boolean

    companion object {
        fun Load(ResourceName: String): BlackboardData
        fun Find(Outer: UObject, ResourceName: String): BlackboardData
        fun GetDefaultObject(): BlackboardData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlackboardData
        fun C(Other: UObject): BlackboardData
        fun C(Other: Any): BlackboardData
    }
}

external interface `T$404` {
    var ResultRotation: Rotator
    var `$`: Boolean
}

external interface `T$405` {
    var ResultLocation: Vector
    var `$`: Boolean
}

external open class BlackboardComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var BrainComp: BrainComponent
    open var BlackboardAsset: BlackboardData
    open var KeyInstances: Array<BlackboardKeyType>
    open fun SetValueAsVector(KeyName: String, VectorValue: Vector)
    open fun SetValueAsString(KeyName: String, StringValue: String)
    open fun SetValueAsRotator(KeyName: String, VectorValue: Rotator)
    open fun SetValueAsObject(KeyName: String, ObjectValue: UObject)
    open fun SetValueAsName(KeyName: String, NameValue: String)
    open fun SetValueAsInt(KeyName: String, IntValue: Number)
    open fun SetValueAsFloat(KeyName: String, FloatValue: Number)
    open fun SetValueAsEnum(KeyName: String, EnumValue: Number)
    open fun SetValueAsClass(KeyName: String, ClassValue: UnrealEngineClass)
    open fun SetValueAsBool(KeyName: String, BoolValue: Boolean)
    open fun IsVectorValueSet(KeyName: String): Boolean
    open fun GetValueAsVector(KeyName: String): Vector
    open fun GetValueAsString(KeyName: String): String
    open fun GetValueAsRotator(KeyName: String): Rotator
    open fun GetValueAsObject(KeyName: String): UObject
    open fun GetValueAsName(KeyName: String): String
    open fun GetValueAsInt(KeyName: String): Number
    open fun GetValueAsFloat(KeyName: String): Number
    open fun GetValueAsEnum(KeyName: String): Number
    open fun GetValueAsClass(KeyName: String): UnrealEngineClass
    open fun GetValueAsBool(KeyName: String): Boolean
    open fun GetRotationFromEntry(KeyName: String, ResultRotation: Rotator = definedExternally): `T$404`
    open fun GetLocationFromEntry(KeyName: String, ResultLocation: Vector = definedExternally): `T$405`
    open fun ClearValue(KeyName: String)

    companion object {
        fun Load(ResourceName: String): BlackboardComponent
        fun Find(Outer: UObject, ResourceName: String): BlackboardComponent
        fun GetDefaultObject(): BlackboardComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlackboardComponent
        fun C(Other: UObject): BlackboardComponent
        fun C(Other: Any): BlackboardComponent
    }
}

external open class BrainComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var BlackboardComp: BlackboardComponent
    open var AIOwner: AIController
    open fun StopLogic(Reason: String)
    open fun RestartLogic()
    open fun IsRunning(): Boolean
    open fun IsPaused(): Boolean

    companion object {
        fun Load(ResourceName: String): BrainComponent
        fun Find(Outer: UObject, ResourceName: String): BrainComponent
        fun GetDefaultObject(): BrainComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BrainComponent
        fun C(Other: UObject): BrainComponent
        fun C(Other: Any): BrainComponent
    }
}

external open class AISenseConfig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DebugColor: Color
    open var MaxAge: Number
    open var bStartsEnabled: Boolean

    companion object {
        fun Load(ResourceName: String): AISenseConfig
        fun Find(Outer: UObject, ResourceName: String): AISenseConfig
        fun GetDefaultObject(): AISenseConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISenseConfig
        fun C(Other: UObject): AISenseConfig
        fun C(Other: Any): AISenseConfig
    }
}

external object EAISenseNotifyType {
    var OnEveryPerception: String /* "OnEveryPerception" */
    var OnPerceptionChange: String /* "OnPerceptionChange" */
    var EAISenseNotifyType_MAX: String /* "EAISenseNotifyType_MAX" */
}

external open class AISystemBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AISystemClassName: SoftClassPath
    open var AISystemModuleName: String
    open var bInstantiateAISystemOnClient: Boolean

    companion object {
        fun Load(ResourceName: String): AISystemBase
        fun Find(Outer: UObject, ResourceName: String): AISystemBase
        fun GetDefaultObject(): AISystemBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISystemBase
        fun C(Other: UObject): AISystemBase
        fun C(Other: Any): AISystemBase
    }
}

external open class BlackboardKeySelector {
    open var AllowedTypes: Array<BlackboardKeyType>
    open var SelectedKeyName: String
    open var SelectedKeyType: UnrealEngineClass
    open var SelectedKeyID: Number
    open var bNoneIsAllowedValue: Boolean
    open fun clone(): BlackboardKeySelector

    companion object {
        fun C(Other: UObject): BlackboardKeySelector
        fun C(Other: Any): BlackboardKeySelector
    }
}

external open class GameplayTagQuery {
    open var TokenStreamVersion: Number
    open var TagDictionary: Array<GameplayTag>
    open var QueryTokenStream: Array<Number>
    open var UserDescription: String
    open var AutoDescription: String
    open fun clone(): GameplayTagQuery
    open fun IsTagQueryEmpty(): Boolean
    open fun MakeGameplayTagQuery(): GameplayTagQuery

    companion object {
        fun C(Other: UObject): GameplayTagQuery
        fun C(Other: Any): GameplayTagQuery
        fun IsTagQueryEmpty(TagQuery: GameplayTagQuery): Boolean
        fun MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery
    }
}

external interface `T$406` {
    var TagContainer: GameplayTagContainer
}

external interface `T$407` {
    var InOutTagContainer: GameplayTagContainer
}

external interface `T$408` {
    var GameplayTags: Array<GameplayTag>
}

external interface `T$409` {
    var TagContainer: GameplayTagContainer
    var `$`: Boolean
}

external interface `T$410` {
    var GameplayTags: Array<GameplayTag>
}

external open class GameplayTagContainer {
    open var GameplayTags: Array<GameplayTag>
    open var ParentTags: Array<GameplayTag>
    open fun clone(): GameplayTagContainer
    open fun AddGameplayTag(Tag: GameplayTag = definedExternally): `T$406`
    open fun AppendGameplayTagContainers(InTagContainer: GameplayTagContainer = definedExternally): `T$407`
    open fun BreakGameplayTagContainer(GameplayTags: Array<GameplayTag> = definedExternally): `T$408`
    open fun DoesContainerMatchTagQuery(TagQuery: GameplayTagQuery): Boolean
    open fun EqualEqual_GameplayTagContainer(B: GameplayTagContainer): Boolean
    open fun GetDebugStringFromGameplayTagContainer(): String
    open fun GetNumGameplayTagsInContainer(): Number
    open fun HasAllTags(OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
    open fun HasAnyTags(OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
    open fun HasTag(Tag: GameplayTag, bExactMatch: Boolean): Boolean
    open fun MakeLiteralGameplayTagContainer(): GameplayTagContainer
    open fun NotEqual_GameplayTagContainer(B: GameplayTagContainer): Boolean
    open fun NotEqual_TagContainerTagContainer(B: String): Boolean
    open fun RemoveGameplayTag(Tag: GameplayTag = definedExternally): `T$409`

    companion object {
        fun C(Other: UObject): GameplayTagContainer
        fun C(Other: Any): GameplayTagContainer
        fun AddGameplayTag(TagContainer: GameplayTagContainer = definedExternally, Tag: GameplayTag = definedExternally): `T$406`
        fun AppendGameplayTagContainers(InOutTagContainer: GameplayTagContainer = definedExternally, InTagContainer: GameplayTagContainer = definedExternally): `T$407`
        fun BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer, GameplayTags: Array<GameplayTag> = definedExternally): `T$410`
        fun DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer, TagQuery: GameplayTagQuery): Boolean
        fun EqualEqual_GameplayTagContainer(A: GameplayTagContainer, B: GameplayTagContainer): Boolean
        fun GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): String
        fun GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): Number
        fun HasAllTags(TagContainer: GameplayTagContainer, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun HasAnyTags(TagContainer: GameplayTagContainer, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun HasTag(TagContainer: GameplayTagContainer, Tag: GameplayTag, bExactMatch: Boolean): Boolean
        fun MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer
        fun NotEqual_GameplayTagContainer(A: GameplayTagContainer, B: GameplayTagContainer): Boolean
        fun NotEqual_TagContainerTagContainer(A: GameplayTagContainer, B: String): Boolean
        fun RemoveGameplayTag(TagContainer: GameplayTagContainer = definedExternally, Tag: GameplayTag = definedExternally): `T$409`
        fun MakeGameplayTagContainerFromArray(GameplayTags: Array<GameplayTag>): GameplayTagContainer
    }
}

external open class GameplayTag {
    open var TagName: String
    open fun clone(): GameplayTag
    open fun EqualEqual_GameplayTag(B: GameplayTag): Boolean
    open fun GetDebugStringFromGameplayTag(): String
    open fun GetTagName(): String
    open fun IsGameplayTagValid(): Boolean
    open fun MakeGameplayTagContainerFromTag(): GameplayTagContainer
    open fun MakeLiteralGameplayTag(): GameplayTag
    open fun MatchesAnyTags(OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
    open fun MatchesTag(TagTwo: GameplayTag, bExactMatch: Boolean): Boolean
    open fun NotEqual_GameplayTag(B: GameplayTag): Boolean
    open fun NotEqual_TagTag(B: String): Boolean

    companion object {
        fun C(Other: UObject): GameplayTag
        fun C(Other: Any): GameplayTag
        fun EqualEqual_GameplayTag(A: GameplayTag, B: GameplayTag): Boolean
        fun GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): String
        fun GetTagName(GameplayTag: GameplayTag): String
        fun IsGameplayTagValid(GameplayTag: GameplayTag): Boolean
        fun MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer
        fun MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag
        fun MatchesAnyTags(TagOne: GameplayTag, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun MatchesTag(TagOne: GameplayTag, TagTwo: GameplayTag, bExactMatch: Boolean): Boolean
        fun NotEqual_GameplayTag(A: GameplayTag, B: GameplayTag): Boolean
        fun NotEqual_TagTag(A: GameplayTag, B: String): Boolean
    }
}

external open class BehaviorTreeComponent : BrainComponent {
    constructor()
    constructor(Outer: UObject)
    open var NodeInstances: Array<BTNode>
    open fun SetDynamicSubtree(InjectTag: GameplayTag, BehaviorAsset: BehaviorTree)
    open fun GetTagCooldownEndTime(CooldownTag: GameplayTag): Number
    open fun AddCooldownTagDuration(CooldownTag: GameplayTag, CooldownDuration: Number, bAddToExistingDuration: Boolean)

    companion object {
        fun Load(ResourceName: String): BehaviorTreeComponent
        fun Find(Outer: UObject, ResourceName: String): BehaviorTreeComponent
        fun GetDefaultObject(): BehaviorTreeComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BehaviorTreeComponent
        fun C(Other: UObject): BehaviorTreeComponent
        fun C(Other: Any): BehaviorTreeComponent
    }
}

external open class BTNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NodeName: String
    open var TreeAsset: BehaviorTree
    open var ParentNode: BTCompositeNode
    open fun ClearBlackboardValue(Key: BlackboardKeySelector)
    open fun ClearBlackboardValueAsVector(Key: BlackboardKeySelector)
    open fun GetBlackboardValueAsActor(Key: BlackboardKeySelector): Actor
    open fun GetBlackboardValueAsBool(Key: BlackboardKeySelector): Boolean
    open fun GetBlackboardValueAsClass(Key: BlackboardKeySelector): UnrealEngineClass
    open fun GetBlackboardValueAsEnum(Key: BlackboardKeySelector): Number
    open fun GetBlackboardValueAsFloat(Key: BlackboardKeySelector): Number
    open fun GetBlackboardValueAsInt(Key: BlackboardKeySelector): Number
    open fun GetBlackboardValueAsName(Key: BlackboardKeySelector): String
    open fun GetBlackboardValueAsObject(Key: BlackboardKeySelector): UObject
    open fun GetBlackboardValueAsRotator(Key: BlackboardKeySelector): Rotator
    open fun GetBlackboardValueAsString(Key: BlackboardKeySelector): String
    open fun GetBlackboardValueAsVector(Key: BlackboardKeySelector): Vector
    open fun GetOwnerComponent(): BehaviorTreeComponent
    open fun GetOwnersBlackboard(): BlackboardComponent
    open fun SetBlackboardValueAsBool(Key: BlackboardKeySelector, Value: Boolean)
    open fun SetBlackboardValueAsClass(Key: BlackboardKeySelector, Value: UnrealEngineClass)
    open fun SetBlackboardValueAsEnum(Key: BlackboardKeySelector, Value: Number)
    open fun SetBlackboardValueAsFloat(Key: BlackboardKeySelector, Value: Number)
    open fun SetBlackboardValueAsInt(Key: BlackboardKeySelector, Value: Number)
    open fun SetBlackboardValueAsName(Key: BlackboardKeySelector, Value: String)
    open fun SetBlackboardValueAsObject(Key: BlackboardKeySelector, Value: UObject)
    open fun SetBlackboardValueAsRotator(Key: BlackboardKeySelector, Value: Rotator)
    open fun SetBlackboardValueAsString(Key: BlackboardKeySelector, Value: String)
    open fun SetBlackboardValueAsVector(Key: BlackboardKeySelector, Value: Vector)
    open fun StartUsingExternalEvent(OwningActor: Actor)
    open fun StopUsingExternalEvent()

    companion object {
        fun Load(ResourceName: String): BTNode
        fun Find(Outer: UObject, ResourceName: String): BTNode
        fun GetDefaultObject(): BTNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTNode
        fun C(Other: UObject): BTNode
        fun C(Other: Any): BTNode
        fun ClearBlackboardValue(NodeOwner: BTNode, Key: BlackboardKeySelector)
        fun ClearBlackboardValueAsVector(NodeOwner: BTNode, Key: BlackboardKeySelector)
        fun GetBlackboardValueAsActor(NodeOwner: BTNode, Key: BlackboardKeySelector): Actor
        fun GetBlackboardValueAsBool(NodeOwner: BTNode, Key: BlackboardKeySelector): Boolean
        fun GetBlackboardValueAsClass(NodeOwner: BTNode, Key: BlackboardKeySelector): UnrealEngineClass
        fun GetBlackboardValueAsEnum(NodeOwner: BTNode, Key: BlackboardKeySelector): Number
        fun GetBlackboardValueAsFloat(NodeOwner: BTNode, Key: BlackboardKeySelector): Number
        fun GetBlackboardValueAsInt(NodeOwner: BTNode, Key: BlackboardKeySelector): Number
        fun GetBlackboardValueAsName(NodeOwner: BTNode, Key: BlackboardKeySelector): String
        fun GetBlackboardValueAsObject(NodeOwner: BTNode, Key: BlackboardKeySelector): UObject
        fun GetBlackboardValueAsRotator(NodeOwner: BTNode, Key: BlackboardKeySelector): Rotator
        fun GetBlackboardValueAsString(NodeOwner: BTNode, Key: BlackboardKeySelector): String
        fun GetBlackboardValueAsVector(NodeOwner: BTNode, Key: BlackboardKeySelector): Vector
        fun GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent
        fun GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent
        fun SetBlackboardValueAsBool(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Boolean)
        fun SetBlackboardValueAsClass(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: UnrealEngineClass)
        fun SetBlackboardValueAsEnum(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Number)
        fun SetBlackboardValueAsFloat(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Number)
        fun SetBlackboardValueAsInt(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Number)
        fun SetBlackboardValueAsName(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: String)
        fun SetBlackboardValueAsObject(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: UObject)
        fun SetBlackboardValueAsRotator(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Rotator)
        fun SetBlackboardValueAsString(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: String)
        fun SetBlackboardValueAsVector(NodeOwner: BTNode, Key: BlackboardKeySelector, Value: Vector)
        fun StartUsingExternalEvent(NodeOwner: BTNode, OwningActor: Actor)
        fun StopUsingExternalEvent(NodeOwner: BTNode)
    }
}

external open class BTAuxiliaryNode : BTNode {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BTAuxiliaryNode
        fun Find(Outer: UObject, ResourceName: String): BTAuxiliaryNode
        fun GetDefaultObject(): BTAuxiliaryNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTAuxiliaryNode
        fun C(Other: UObject): BTAuxiliaryNode
        fun C(Other: Any): BTAuxiliaryNode
    }
}

external open class BTService : BTAuxiliaryNode {
    constructor()
    constructor(Outer: UObject)
    open var Interval: Number
    open var RandomDeviation: Number
    open var bCallTickOnSearchStart: Boolean
    open var bRestartTimerOnEachActivation: Boolean

    companion object {
        fun Load(ResourceName: String): BTService
        fun Find(Outer: UObject, ResourceName: String): BTService
        fun GetDefaultObject(): BTService
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTService
        fun C(Other: UObject): BTService
        fun C(Other: Any): BTService
    }
}

external open class BTTaskNode : BTNode {
    constructor()
    constructor(Outer: UObject)
    open var Services: Array<BTService>
    open var bIgnoreRestartSelf: Boolean

    companion object {
        fun Load(ResourceName: String): BTTaskNode
        fun Find(Outer: UObject, ResourceName: String): BTTaskNode
        fun GetDefaultObject(): BTTaskNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTTaskNode
        fun C(Other: UObject): BTTaskNode
        fun C(Other: Any): BTTaskNode
    }
}

external object EBTFlowAbortMode {
    var None: String /* "None" */
    var LowerPriority: String /* "LowerPriority" */
    var Self: String /* "Self" */
    var Both: String /* "Both" */
    var EBTFlowAbortMode_MAX: String /* "EBTFlowAbortMode_MAX" */
}

external open class BTDecorator : BTAuxiliaryNode {
    constructor()
    constructor(Outer: UObject)
    open var bInverseCondition: Boolean
    open var FlowAbortMode: String /* "None" | "LowerPriority" | "Self" | "Both" | "EBTFlowAbortMode_MAX" */

    companion object {
        fun Load(ResourceName: String): BTDecorator
        fun Find(Outer: UObject, ResourceName: String): BTDecorator
        fun GetDefaultObject(): BTDecorator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTDecorator
        fun C(Other: UObject): BTDecorator
        fun C(Other: Any): BTDecorator
    }
}

external object EBTDecoratorLogic {
    var Invalid: String /* "Invalid" */
    var Test: String /* "Test" */
    var And: String /* "And" */
    var Or: String /* "Or" */
    var Not: String /* "Not" */
    var EBTDecoratorLogic_MAX: String /* "EBTDecoratorLogic_MAX" */
}

external open class BTDecoratorLogic {
    open var Operation: String /* "Invalid" | "Test" | "And" | "Or" | "Not" | "EBTDecoratorLogic_MAX" */
    open var Number: Any
    open fun clone(): BTDecoratorLogic

    companion object {
        fun C(Other: UObject): BTDecoratorLogic
        fun C(Other: Any): BTDecoratorLogic
    }
}

external open class BTCompositeChild {
    open var ChildComposite: BTCompositeNode
    open var ChildTask: BTTaskNode
    open var Decorators: Array<BTDecorator>
    open var DecoratorOps: Array<BTDecoratorLogic>
    open fun clone(): BTCompositeChild

    companion object {
        fun C(Other: UObject): BTCompositeChild
        fun C(Other: Any): BTCompositeChild
    }
}

external open class BTCompositeNode : BTNode {
    constructor()
    constructor(Outer: UObject)
    open var Children: Array<BTCompositeChild>
    open var Services: Array<BTService>
    open var bApplyDecoratorScope: Boolean

    companion object {
        fun Load(ResourceName: String): BTCompositeNode
        fun Find(Outer: UObject, ResourceName: String): BTCompositeNode
        fun GetDefaultObject(): BTCompositeNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BTCompositeNode
        fun C(Other: UObject): BTCompositeNode
        fun C(Other: Any): BTCompositeNode
    }
}

external open class BehaviorTree : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RootNode: BTCompositeNode
    open var BTGraph: EdGraph
    open var LastEditedDocuments: Array<EditedDocumentInfo>
    open var BlackboardAsset: BlackboardData
    open var RootDecorators: Array<BTDecorator>
    open var RootDecoratorOps: Array<BTDecoratorLogic>

    companion object {
        fun Load(ResourceName: String): BehaviorTree
        fun Find(Outer: UObject, ResourceName: String): BehaviorTree
        fun GetDefaultObject(): BehaviorTree
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BehaviorTree
        fun C(Other: UObject): BehaviorTree
        fun C(Other: Any): BehaviorTree
    }
}

external open class BehaviorTreeTemplateInfo {
    open var Asset: BehaviorTree
    open var Template: BTCompositeNode
    open fun clone(): BehaviorTreeTemplateInfo

    companion object {
        fun C(Other: UObject): BehaviorTreeTemplateInfo
        fun C(Other: Any): BehaviorTreeTemplateInfo
    }
}

external open class BehaviorTreeManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaxDebuggerSteps: Number
    open var LoadedTemplates: Array<BehaviorTreeTemplateInfo>
    open var ActiveComponents: Array<BehaviorTreeComponent>

    companion object {
        fun Load(ResourceName: String): BehaviorTreeManager
        fun Find(Outer: UObject, ResourceName: String): BehaviorTreeManager
        fun GetDefaultObject(): BehaviorTreeManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BehaviorTreeManager
        fun C(Other: UObject): BehaviorTreeManager
        fun C(Other: Any): BehaviorTreeManager
    }
}

external open class EnvQueryNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var VerNum: Number

    companion object {
        fun Load(ResourceName: String): EnvQueryNode
        fun Find(Outer: UObject, ResourceName: String): EnvQueryNode
        fun GetDefaultObject(): EnvQueryNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryNode
        fun C(Other: UObject): EnvQueryNode
        fun C(Other: Any): EnvQueryNode
    }
}

external open class EnvQueryItemType : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EnvQueryItemType
        fun Find(Outer: UObject, ResourceName: String): EnvQueryItemType
        fun GetDefaultObject(): EnvQueryItemType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryItemType
        fun C(Other: UObject): EnvQueryItemType
        fun C(Other: Any): EnvQueryItemType
    }
}

external open class EnvQueryGenerator : EnvQueryNode {
    constructor()
    constructor(Outer: UObject)
    open var OptionName: String
    open var ItemType: UnrealEngineClass
    open var bAutoSortTests: Boolean

    companion object {
        fun Load(ResourceName: String): EnvQueryGenerator
        fun Find(Outer: UObject, ResourceName: String): EnvQueryGenerator
        fun GetDefaultObject(): EnvQueryGenerator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryGenerator
        fun C(Other: UObject): EnvQueryGenerator
        fun C(Other: Any): EnvQueryGenerator
    }
}

external object EEnvTestPurpose {
    var Filter: String /* "Filter" */
    var Score: String /* "Score" */
    var FilterAndScore: String /* "FilterAndScore" */
    var EEnvTestPurpose_MAX: String /* "EEnvTestPurpose_MAX" */
}

external object EEnvTestFilterOperator {
    var AllPass: String /* "AllPass" */
    var AnyPass: String /* "AnyPass" */
    var EEnvTestFilterOperator_MAX: String /* "EEnvTestFilterOperator_MAX" */
}

external object EEnvTestScoreOperator {
    var AverageScore: String /* "AverageScore" */
    var MinScore: String /* "MinScore" */
    var MaxScore: String /* "MaxScore" */
    var EEnvTestScoreOperator_MAX: String /* "EEnvTestScoreOperator_MAX" */
}

external object EEnvTestFilterType {
    var Minimum: String /* "Minimum" */
    var Maximum: String /* "Maximum" */
    var Range: String /* "Range" */
    var Match: String /* "Match" */
    var EEnvTestFilterType_MAX: String /* "EEnvTestFilterType_MAX" */
}

external open class AIDataProvider : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AIDataProvider
        fun Find(Outer: UObject, ResourceName: String): AIDataProvider
        fun GetDefaultObject(): AIDataProvider
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIDataProvider
        fun C(Other: UObject): AIDataProvider
        fun C(Other: Any): AIDataProvider
    }
}

external open class AIDataProviderValue {
    open var CachedProperty: Property
    open var DataBinding: AIDataProvider
    open var DataField: String
    open fun clone(): AIDataProviderValue

    companion object {
        fun C(Other: UObject): AIDataProviderValue
        fun C(Other: Any): AIDataProviderValue
    }
}

external open class AIDataProviderTypedValue : AIDataProviderValue {
    open var PropertyType: UnrealEngineClass
    override fun clone(): AIDataProviderTypedValue

    companion object {
        fun C(Other: UObject): AIDataProviderTypedValue
        fun C(Other: Any): AIDataProviderTypedValue
    }
}

external open class AIDataProviderBoolValue : AIDataProviderTypedValue {
    open var DefaultValue: Boolean
    override fun clone(): AIDataProviderBoolValue

    companion object {
        fun C(Other: UObject): AIDataProviderBoolValue
        fun C(Other: Any): AIDataProviderBoolValue
    }
}

external open class AIDataProviderFloatValue : AIDataProviderTypedValue {
    open var DefaultValue: Number
    override fun clone(): AIDataProviderFloatValue

    companion object {
        fun C(Other: UObject): AIDataProviderFloatValue
        fun C(Other: Any): AIDataProviderFloatValue
    }
}

external object EEnvTestScoreEquation {
    var Linear: String /* "Linear" */
    var Square: String /* "Square" */
    var InverseLinear: String /* "InverseLinear" */
    var SquareRoot: String /* "SquareRoot" */
    var Constant: String /* "Constant" */
    var EEnvTestScoreEquation_MAX: String /* "EEnvTestScoreEquation_MAX" */
}

external object EEnvQueryTestClamping {
    var None: String /* "None" */
    var SpecifiedValue: String /* "SpecifiedValue" */
    var FilterThreshold: String /* "FilterThreshold" */
    var EEnvQueryTestClamping_MAX: String /* "EEnvQueryTestClamping_MAX" */
}

external object EEQSNormalizationType {
    var Absolute: String /* "Absolute" */
    var RelativeToScores: String /* "RelativeToScores" */
    var EEQSNormalizationType_MAX: String /* "EEQSNormalizationType_MAX" */
}

external open class EnvQueryTest : EnvQueryNode {
    constructor()
    constructor(Outer: UObject)
    open var TestOrder: Number
    open var TestPurpose: String /* "Filter" | "Score" | "FilterAndScore" | "EEnvTestPurpose_MAX" */
    open var TestComment: String
    open var MultipleContextFilterOp: String /* "AllPass" | "AnyPass" | "EEnvTestFilterOperator_MAX" */
    open var MultipleContextScoreOp: String /* "AverageScore" | "MinScore" | "MaxScore" | "EEnvTestScoreOperator_MAX" */
    open var FilterType: String /* "Minimum" | "Maximum" | "Range" | "Match" | "EEnvTestFilterType_MAX" */
    open var BoolValue: AIDataProviderBoolValue
    open var FloatValueMin: AIDataProviderFloatValue
    open var FloatValueMax: AIDataProviderFloatValue
    open var ScoringEquation: String /* "Linear" | "Square" | "InverseLinear" | "SquareRoot" | "Constant" | "EEnvTestScoreEquation_MAX" */
    open var ClampMinType: String /* "None" | "SpecifiedValue" | "FilterThreshold" | "EEnvQueryTestClamping_MAX" */
    open var ClampMaxType: String /* "None" | "SpecifiedValue" | "FilterThreshold" | "EEnvQueryTestClamping_MAX" */
    open var NormalizationType: String /* "Absolute" | "RelativeToScores" | "EEQSNormalizationType_MAX" */
    open var ScoreClampMin: AIDataProviderFloatValue
    open var ScoreClampMax: AIDataProviderFloatValue
    open var ScoringFactor: AIDataProviderFloatValue
    open var ReferenceValue: AIDataProviderFloatValue
    open var bDefineReferenceValue: Boolean
    open var bWorkOnFloatValues: Boolean

    companion object {
        fun Load(ResourceName: String): EnvQueryTest
        fun Find(Outer: UObject, ResourceName: String): EnvQueryTest
        fun GetDefaultObject(): EnvQueryTest
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryTest
        fun C(Other: UObject): EnvQueryTest
        fun C(Other: Any): EnvQueryTest
    }
}

external open class EnvQueryOption : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Generator: EnvQueryGenerator
    open var Tests: Array<EnvQueryTest>

    companion object {
        fun Load(ResourceName: String): EnvQueryOption
        fun Find(Outer: UObject, ResourceName: String): EnvQueryOption
        fun GetDefaultObject(): EnvQueryOption
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryOption
        fun C(Other: UObject): EnvQueryOption
        fun C(Other: Any): EnvQueryOption
    }
}

external open class EnvQuery : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var EdGraph: EdGraph
    open var QueryName: String
    open var Options: Array<EnvQueryOption>

    companion object {
        fun Load(ResourceName: String): EnvQuery
        fun Find(Outer: UObject, ResourceName: String): EnvQuery
        fun GetDefaultObject(): EnvQuery
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQuery
        fun C(Other: UObject): EnvQuery
        fun C(Other: Any): EnvQuery
    }
}

external open class EnvQueryInstanceCache {
    open var Template: EnvQuery
    open fun clone(): EnvQueryInstanceCache

    companion object {
        fun C(Other: UObject): EnvQueryInstanceCache
        fun C(Other: Any): EnvQueryInstanceCache
    }
}

external open class EnvQueryContext : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EnvQueryContext
        fun Find(Outer: UObject, ResourceName: String): EnvQueryContext
        fun GetDefaultObject(): EnvQueryContext
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryContext
        fun C(Other: UObject): EnvQueryContext
        fun C(Other: Any): EnvQueryContext
    }
}

external object EEnvQueryStatus {
    var Processing: String /* "Processing" */
    var Success: String /* "Success" */
    var Failed: String /* "Failed" */
    var Aborted: String /* "Aborted" */
    var OwnerLost: String /* "OwnerLost" */
    var MissingParam: String /* "MissingParam" */
    var EEnvQueryStatus_MAX: String /* "EEnvQueryStatus_MAX" */
}

external interface `T$411` {
    var ResultLocations: Array<Vector>
    var `$`: Boolean
}

external interface `T$412` {
    var ResultActors: Array<Actor>
    var `$`: Boolean
}

external open class EnvQueryInstanceBlueprintWrapper : UObject {
    constructor()
    constructor(Outer: UObject)
    open var QueryID: Number
    open var ItemType: UnrealEngineClass
    open var OptionIndex: Number
    open var OnQueryFinishedEvent: UnrealEngineMulticastDelegate<(QueryInstance: EnvQueryInstanceBlueprintWrapper, QueryStatus: String /* "Processing" | "Success" | "Failed" | "Aborted" | "OwnerLost" | "MissingParam" | "EEnvQueryStatus_MAX" */) -> Unit>
    open fun SetNamedParam(ParamName: String, Value: Number)
    open fun GetResultsAsLocations(): Array<Vector>
    open fun GetResultsAsActors(): Array<Actor>
    open fun GetQueryResultsAsLocations(ResultLocations: Array<Vector> = definedExternally): `T$411`
    open fun GetQueryResultsAsActors(ResultActors: Array<Actor> = definedExternally): `T$412`
    open fun GetItemScore(ItemIndex: Number): Number

    companion object {
        fun Load(ResourceName: String): EnvQueryInstanceBlueprintWrapper
        fun Find(Outer: UObject, ResourceName: String): EnvQueryInstanceBlueprintWrapper
        fun GetDefaultObject(): EnvQueryInstanceBlueprintWrapper
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryInstanceBlueprintWrapper
        fun C(Other: UObject): EnvQueryInstanceBlueprintWrapper
        fun C(Other: Any): EnvQueryInstanceBlueprintWrapper
    }
}

external object EEnvQueryRunMode {
    var SingleResult: String /* "SingleResult" */
    var RandomBest5Pct: String /* "RandomBest5Pct" */
    var RandomBest25Pct: String /* "RandomBest25Pct" */
    var AllMatching: String /* "AllMatching" */
    var EEnvQueryRunMode_MAX: String /* "EEnvQueryRunMode_MAX" */
}

external open class EnvQueryManager : AISubsystem {
    constructor()
    constructor(Outer: UObject)
    open var InstanceCache: Array<EnvQueryInstanceCache>
    open var LocalContexts: Array<EnvQueryContext>
    open var GCShieldedWrappers: Array<EnvQueryInstanceBlueprintWrapper>
    open var MaxAllowedTestingTime: Number
    open var bTestQueriesUsingBreadth: Boolean
    open var QueryCountWarningThreshold: Number
    open var QueryCountWarningInterval: Any

    companion object {
        fun Load(ResourceName: String): EnvQueryManager
        fun Find(Outer: UObject, ResourceName: String): EnvQueryManager
        fun GetDefaultObject(): EnvQueryManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnvQueryManager
        fun RunEQSQuery(WorldContextObject: UObject, QueryTemplate: EnvQuery, Querier: UObject, RunMode: String /* "SingleResult" | "RandomBest5Pct" | "RandomBest25Pct" | "AllMatching" | "EEnvQueryRunMode_MAX" */, WrapperClass: UnrealEngineClass): EnvQueryInstanceBlueprintWrapper
        fun C(Other: UObject): EnvQueryManager
        fun C(Other: Any): EnvQueryManager
    }
}

external object EPathFollowingResult {
    var Success: String /* "Success" */
    var Blocked: String /* "Blocked" */
    var OffPath: String /* "OffPath" */
    var Aborted: String /* "Aborted" */
    var Skipped_DEPRECATED: String /* "Skipped_DEPRECATED" */
    var Invalid: String /* "Invalid" */
    var EPathFollowingResult_MAX: String /* "EPathFollowingResult_MAX" */
}

external open class AIRequestID {
    open var RequestID: Any
    open fun clone(): AIRequestID

    companion object {
        fun C(Other: UObject): AIRequestID
        fun C(Other: Any): AIRequestID
    }
}

external open class AIAsyncTaskBlueprintProxy : UObject {
    constructor()
    constructor(Outer: UObject)
    open var OnSuccess: UnrealEngineMulticastDelegate<(MovementResult: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */) -> Unit>
    open var OnFail: UnrealEngineMulticastDelegate<(MovementResult: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */) -> Unit>
    open fun OnMoveCompleted(RequestID: AIRequestID, MovementResult: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */)

    companion object {
        fun Load(ResourceName: String): AIAsyncTaskBlueprintProxy
        fun Find(Outer: UObject, ResourceName: String): AIAsyncTaskBlueprintProxy
        fun GetDefaultObject(): AIAsyncTaskBlueprintProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIAsyncTaskBlueprintProxy
        fun C(Other: UObject): AIAsyncTaskBlueprintProxy
        fun C(Other: Any): AIAsyncTaskBlueprintProxy
    }
}

external open class AIHotSpotManager : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AIHotSpotManager
        fun Find(Outer: UObject, ResourceName: String): AIHotSpotManager
        fun GetDefaultObject(): AIHotSpotManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIHotSpotManager
        fun C(Other: UObject): AIHotSpotManager
        fun C(Other: Any): AIHotSpotManager
    }
}

external interface `T$413` {
    var PathPoints: Array<Vector>
    var `$`: Boolean
}

external open class NavLocalGridManager : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavLocalGridManager
        fun Find(Outer: UObject, ResourceName: String): NavLocalGridManager
        fun GetDefaultObject(): NavLocalGridManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLocalGridManager
        fun SetLocalNavigationGridDensity(WorldContextObject: UObject, CellSize: Number): Boolean
        fun RemoveLocalNavigationGrid(WorldContextObject: UObject, GridId: Number, bRebuildGrids: Boolean)
        fun FindLocalNavigationGridPath(WorldContextObject: UObject, Start: Vector, End: Vector, PathPoints: Array<Vector> = definedExternally): `T$413`
        fun AddLocalNavigationGridForPoints(WorldContextObject: UObject, Locations: Array<Vector>, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun AddLocalNavigationGridForPoint(WorldContextObject: UObject, Location: Vector, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun AddLocalNavigationGridForCapsule(WorldContextObject: UObject, Location: Vector, CapsuleRadius: Number, CapsuleHalfHeight: Number, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun AddLocalNavigationGridForBox(WorldContextObject: UObject, Location: Vector, Extent: Vector, Rotation: Rotator, Radius2D: Number, Height: Number, bRebuildGrids: Boolean): Number
        fun C(Other: UObject): NavLocalGridManager
        fun C(Other: Any): NavLocalGridManager
    }
}

external open class AISystem : AISystemBase {
    constructor()
    constructor(Outer: UObject)
    open var PerceptionSystemClassName: SoftClassPath
    open var HotSpotManagerClassName: SoftClassPath
    open var AcceptanceRadius: Number
    open var PathfollowingRegularPathPointAcceptanceRadius: Number
    open var PathfollowingNavLinkAcceptanceRadius: Number
    open var bFinishMoveOnGoalOverlap: Boolean
    open var bAcceptPartialPaths: Boolean
    open var bAllowStrafing: Boolean
    open var bEnableBTAITasks: Boolean
    open var bAllowControllersAsEQSQuerier: Boolean
    open var bEnableDebuggerPlugin: Boolean
    open var DefaultSightCollisionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var BehaviorTreeManager: BehaviorTreeManager
    open var EnvironmentQueryManager: EnvQueryManager
    open var PerceptionSystem: AIPerceptionSystem
    open var AllProxyObjects: Array<AIAsyncTaskBlueprintProxy>
    open var HotSpotManager: AIHotSpotManager
    open var NavLocalGrids: NavLocalGridManager
    open fun AILoggingVerbose()
    open fun AIIgnorePlayers()

    companion object {
        fun Load(ResourceName: String): AISystem
        fun Find(Outer: UObject, ResourceName: String): AISystem
        fun GetDefaultObject(): AISystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISystem
        fun C(Other: UObject): AISystem
        fun C(Other: Any): AISystem
    }
}

external open class AISubsystem : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AISystem: AISystem

    companion object {
        fun Load(ResourceName: String): AISubsystem
        fun Find(Outer: UObject, ResourceName: String): AISubsystem
        fun GetDefaultObject(): AISubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISubsystem
        fun C(Other: UObject): AISubsystem
        fun C(Other: Any): AISubsystem
    }
}

external open class AISenseEvent : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AISenseEvent
        fun Find(Outer: UObject, ResourceName: String): AISenseEvent
        fun GetDefaultObject(): AISenseEvent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISenseEvent
        fun C(Other: UObject): AISenseEvent
        fun C(Other: Any): AISenseEvent
    }
}

external open class AIStimulus {
    open var Age: Number
    open var ExpirationAge: Number
    open var Strength: Number
    open var StimulusLocation: Vector
    open var ReceiverLocation: Vector
    open var Tag: String
    open var bSuccessfullySensed: Boolean
    open fun clone(): AIStimulus

    companion object {
        fun C(Other: UObject): AIStimulus
        fun C(Other: Any): AIStimulus
    }
}

external open class AIPerceptionSystem : AISubsystem {
    constructor()
    constructor(Outer: UObject)
    open var Senses: Array<AISense>
    open var PerceptionAgingRate: Number
    open fun ReportEvent(PerceptionEvent: AISenseEvent)
    open fun OnPerceptionStimuliSourceEndPlay(Actor: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)

    companion object {
        fun Load(ResourceName: String): AIPerceptionSystem
        fun Find(Outer: UObject, ResourceName: String): AIPerceptionSystem
        fun GetDefaultObject(): AIPerceptionSystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIPerceptionSystem
        fun ReportPerceptionEvent(WorldContextObject: UObject, PerceptionEvent: AISenseEvent)
        fun RegisterPerceptionStimuliSource(WorldContextObject: UObject, Sense: UnrealEngineClass, Target: Actor): Boolean
        fun GetSenseClassForStimulus(WorldContextObject: UObject, Stimulus: AIStimulus): UnrealEngineClass
        fun C(Other: UObject): AIPerceptionSystem
        fun C(Other: Any): AIPerceptionSystem
    }
}

external open class AISense : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultExpirationAge: Number
    open var NotifyType: String /* "OnEveryPerception" | "OnPerceptionChange" | "EAISenseNotifyType_MAX" */
    open var bWantsNewPawnNotification: Boolean
    open var bAutoRegisterAllPawnsAsSources: Boolean
    open var PerceptionSystemInstance: AIPerceptionSystem

    companion object {
        fun Load(ResourceName: String): AISense
        fun Find(Outer: UObject, ResourceName: String): AISense
        fun GetDefaultObject(): AISense
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AISense
        fun C(Other: UObject): AISense
        fun C(Other: Any): AISense
    }
}

external open class ActorPerceptionBlueprintInfo {
    open var Target: Actor
    open var LastSensedStimuli: Array<AIStimulus>
    open var bIsHostile: Boolean
    open fun clone(): ActorPerceptionBlueprintInfo

    companion object {
        fun C(Other: UObject): ActorPerceptionBlueprintInfo
        fun C(Other: Any): ActorPerceptionBlueprintInfo
    }
}

external interface `T$414` {
    var OutActors: Array<Actor>
}

external interface `T$415` {
    var OutActors: Array<Actor>
}

external interface `T$416` {
    var OutActors: Array<Actor>
}

external interface `T$417` {
    var OutActors: Array<Actor>
}

external interface `T$418` {
    var Info: ActorPerceptionBlueprintInfo
    var `$`: Boolean
}

external open class AIPerceptionComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var SensesConfig: Array<AISenseConfig>
    open var DominantSense: UnrealEngineClass
    open var AIOwner: AIController
    open var OnPerceptionUpdated: UnrealEngineMulticastDelegate<(UpdatedActors: Array<Actor>) -> Unit>
    open var OnTargetPerceptionUpdated: UnrealEngineMulticastDelegate<(Actor: Actor, Stimulus: AIStimulus) -> Unit>
    open fun SetSenseEnabled(SenseClass: UnrealEngineClass, bEnable: Boolean)
    open fun RequestStimuliListenerUpdate()
    open fun OnOwnerEndPlay(Actor: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)
    open fun GetPerceivedHostileActors(OutActors: Array<Actor> = definedExternally): `T$414`
    open fun GetPerceivedActors(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$415`
    open fun GetKnownPerceivedActors(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$416`
    open fun GetCurrentlyPerceivedActors(SenseToUse: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$417`
    open fun GetActorsPerception(Actor: Actor, Info: ActorPerceptionBlueprintInfo = definedExternally): `T$418`

    companion object {
        fun Load(ResourceName: String): AIPerceptionComponent
        fun Find(Outer: UObject, ResourceName: String): AIPerceptionComponent
        fun GetDefaultObject(): AIPerceptionComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIPerceptionComponent
        fun C(Other: UObject): AIPerceptionComponent
        fun C(Other: Any): AIPerceptionComponent
    }
}

external object EAIRequestPriority {
    var SoftScript: String /* "SoftScript" */
    var Logic: String /* "Logic" */
    var HardScript: String /* "HardScript" */
    var Reaction: String /* "Reaction" */
    var Ultimate: String /* "Ultimate" */
    var MAX: String /* "MAX" */
}

external object EPawnActionResult {
    var NotStarted: String /* "NotStarted" */
    var InProgress: String /* "InProgress" */
    var Success: String /* "Success" */
    var Failed: String /* "Failed" */
    var Aborted: String /* "Aborted" */
    var EPawnActionResult_MAX: String /* "EPawnActionResult_MAX" */
}

external open class PawnAction : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChildAction: PawnAction
    open var ParentAction: PawnAction
    open var OwnerComponent: PawnActionsComponent
    open var Instigator: UObject
    open var BrainComp: BrainComponent
    open var bAllowNewSameClassInstance: Boolean
    open var bReplaceActiveSameClassInstance: Boolean
    open var bShouldPauseMovement: Boolean
    open var bAlwaysNotifyOnFinished: Boolean
    open fun GetActionPriority(): String /* "SoftScript" | "Logic" | "HardScript" | "Reaction" | "Ultimate" | "MAX" */
    open fun Finish(WithResult: String /* "NotStarted" | "InProgress" | "Success" | "Failed" | "Aborted" | "EPawnActionResult_MAX" */)

    companion object {
        fun Load(ResourceName: String): PawnAction
        fun Find(Outer: UObject, ResourceName: String): PawnAction
        fun GetDefaultObject(): PawnAction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PawnAction
        fun CreateActionInstance(WorldContextObject: UObject, ActionClass: UnrealEngineClass): PawnAction
        fun C(Other: UObject): PawnAction
        fun C(Other: Any): PawnAction
    }
}

external open class PawnActionStack {
    open var TopAction: PawnAction
    open fun clone(): PawnActionStack

    companion object {
        fun C(Other: UObject): PawnActionStack
        fun C(Other: Any): PawnActionStack
    }
}

external open class PawnActionEvent {
    open var Action: PawnAction
    open fun clone(): PawnActionEvent

    companion object {
        fun C(Other: UObject): PawnActionEvent
        fun C(Other: Any): PawnActionEvent
    }
}

external object EPawnActionAbortState {
    var NeverStarted: String /* "NeverStarted" */
    var NotBeingAborted: String /* "NotBeingAborted" */
    var MarkPendingAbort: String /* "MarkPendingAbort" */
    var LatentAbortInProgress: String /* "LatentAbortInProgress" */
    var AbortDone: String /* "AbortDone" */
    var MAX: String /* "MAX" */
}

external open class PawnActionsComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var ControlledPawn: Pawn
    open var ActionStacks: Array<PawnActionStack>
    open var ActionEvents: Array<PawnActionEvent>
    open var CurrentAction: PawnAction
    open fun K2_PushAction(NewAction: PawnAction, Priority: String /* "SoftScript" | "Logic" | "HardScript" | "Reaction" | "Ultimate" | "MAX" */, Instigator: UObject): Boolean
    open fun K2_ForceAbortAction(ActionToAbort: PawnAction): String /* "NeverStarted" | "NotBeingAborted" | "MarkPendingAbort" | "LatentAbortInProgress" | "AbortDone" | "MAX" */
    open fun K2_AbortAction(ActionToAbort: PawnAction): String /* "NeverStarted" | "NotBeingAborted" | "MarkPendingAbort" | "LatentAbortInProgress" | "AbortDone" | "MAX" */

    companion object {
        fun Load(ResourceName: String): PawnActionsComponent
        fun Find(Outer: UObject, ResourceName: String): PawnActionsComponent
        fun GetDefaultObject(): PawnActionsComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PawnActionsComponent
        fun K2_PerformAction(Pawn: Pawn, Action: PawnAction, Priority: String /* "SoftScript" | "Logic" | "HardScript" | "Reaction" | "Ultimate" | "MAX" */): Boolean
        fun C(Other: UObject): PawnActionsComponent
        fun C(Other: Any): PawnActionsComponent
    }
}

external object ETaskResourceOverlapPolicy {
    var StartOnTop: String /* "StartOnTop" */
    var StartAtEnd: String /* "StartAtEnd" */
    var ETaskResourceOverlapPolicy_MAX: String /* "ETaskResourceOverlapPolicy_MAX" */
}

external open class GameplayTask : UObject {
    constructor()
    constructor(Outer: UObject)
    open var InstanceName: String
    open var ResourceOverlapPolicy: String /* "StartOnTop" | "StartAtEnd" | "ETaskResourceOverlapPolicy_MAX" */
    open var ChildTask: GameplayTask
    open fun ReadyForActivation()
    open fun EndTask()

    companion object {
        fun Load(ResourceName: String): GameplayTask
        fun Find(Outer: UObject, ResourceName: String): GameplayTask
        fun GetDefaultObject(): GameplayTask
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTask
        fun C(Other: UObject): GameplayTask
        fun C(Other: Any): GameplayTask
    }
}

external open class GameplayResourceSet {
    open fun clone(): GameplayResourceSet

    companion object {
        fun C(Other: UObject): GameplayResourceSet
        fun C(Other: Any): GameplayResourceSet
    }
}

external open class GameplayTasksComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var bIsNetDirty: Boolean
    open var SimulatedTasks: Array<GameplayTask>
    open var TaskPriorityQueue: Array<GameplayTask>
    open var TickingTasks: Array<GameplayTask>
    open var KnownTasks: Array<GameplayTask>
    open var OnClaimedResourcesChange: UnrealEngineMulticastDelegate<(NewlyClaimed: GameplayResourceSet, FreshlyReleased: GameplayResourceSet) -> Unit>
    open fun OnRep_SimulatedTasks()

    companion object {
        fun Load(ResourceName: String): GameplayTasksComponent
        fun Find(Outer: UObject, ResourceName: String): GameplayTasksComponent
        fun GetDefaultObject(): GameplayTasksComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTasksComponent
        fun C(Other: UObject): GameplayTasksComponent
        fun C(Other: Any): GameplayTasksComponent
    }
}

external open class NavAgentSelector {
    open var bSupportsAgent0: Boolean
    open var bSupportsAgent1: Boolean
    open var bSupportsAgent2: Boolean
    open var bSupportsAgent3: Boolean
    open var bSupportsAgent4: Boolean
    open var bSupportsAgent5: Boolean
    open var bSupportsAgent6: Boolean
    open var bSupportsAgent7: Boolean
    open var bSupportsAgent8: Boolean
    open var bSupportsAgent9: Boolean
    open var bSupportsAgent10: Boolean
    open var bSupportsAgent11: Boolean
    open var bSupportsAgent12: Boolean
    open var bSupportsAgent13: Boolean
    open var bSupportsAgent14: Boolean
    open var bSupportsAgent15: Boolean
    open fun clone(): NavAgentSelector

    companion object {
        fun C(Other: UObject): NavAgentSelector
        fun C(Other: Any): NavAgentSelector
    }
}

external open class NavArea : NavAreaBase {
    constructor()
    constructor(Outer: UObject)
    open var DefaultCost: Number
    open var FixedAreaEnteringCost: Number
    open var DrawColor: Color
    open var SupportedAgents: NavAgentSelector
    open var bSupportsAgent0: Boolean
    open var bSupportsAgent1: Boolean
    open var bSupportsAgent2: Boolean
    open var bSupportsAgent3: Boolean
    open var bSupportsAgent4: Boolean
    open var bSupportsAgent5: Boolean
    open var bSupportsAgent6: Boolean
    open var bSupportsAgent7: Boolean
    open var bSupportsAgent8: Boolean
    open var bSupportsAgent9: Boolean
    open var bSupportsAgent10: Boolean
    open var bSupportsAgent11: Boolean
    open var bSupportsAgent12: Boolean
    open var bSupportsAgent13: Boolean
    open var bSupportsAgent14: Boolean
    open var bSupportsAgent15: Boolean

    companion object {
        fun Load(ResourceName: String): NavArea
        fun Find(Outer: UObject, ResourceName: String): NavArea
        fun GetDefaultObject(): NavArea
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavArea
        fun C(Other: UObject): NavArea
        fun C(Other: Any): NavArea
    }
}

external open class NavigationFilterArea {
    open var AreaClass: UnrealEngineClass
    open var TravelCostOverride: Number
    open var EnteringCostOverride: Number
    open var bIsExcluded: Boolean
    open var bOverrideTravelCost: Boolean
    open var bOverrideEnteringCost: Boolean
    open fun clone(): NavigationFilterArea

    companion object {
        fun C(Other: UObject): NavigationFilterArea
        fun C(Other: Any): NavigationFilterArea
    }
}

external open class NavigationFilterFlags {
    open var bNavFlag0: Boolean
    open var bNavFlag1: Boolean
    open var bNavFlag2: Boolean
    open var bNavFlag3: Boolean
    open var bNavFlag4: Boolean
    open var bNavFlag5: Boolean
    open var bNavFlag6: Boolean
    open var bNavFlag7: Boolean
    open var bNavFlag8: Boolean
    open var bNavFlag9: Boolean
    open var bNavFlag10: Boolean
    open var bNavFlag11: Boolean
    open var bNavFlag12: Boolean
    open var bNavFlag13: Boolean
    open var bNavFlag14: Boolean
    open var bNavFlag15: Boolean
    open fun clone(): NavigationFilterFlags

    companion object {
        fun C(Other: UObject): NavigationFilterFlags
        fun C(Other: Any): NavigationFilterFlags
    }
}

external open class NavigationQueryFilter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Areas: Array<NavigationFilterArea>
    open var IncludeFlags: NavigationFilterFlags
    open var ExcludeFlags: NavigationFilterFlags

    companion object {
        fun Load(ResourceName: String): NavigationQueryFilter
        fun Find(Outer: UObject, ResourceName: String): NavigationQueryFilter
        fun GetDefaultObject(): NavigationQueryFilter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationQueryFilter
        fun C(Other: UObject): NavigationQueryFilter
        fun C(Other: Any): NavigationQueryFilter
    }
}

external open class GameplayTaskResource : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ManualResourceID: Number
    open var AutoResourceID: Any
    open var bManuallySetID: Boolean

    companion object {
        fun Load(ResourceName: String): GameplayTaskResource
        fun Find(Outer: UObject, ResourceName: String): GameplayTaskResource
        fun GetDefaultObject(): GameplayTaskResource
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTaskResource
        fun C(Other: UObject): GameplayTaskResource
        fun C(Other: Any): GameplayTaskResource
    }
}

external object EPathFollowingRequestResult {
    var Failed: String /* "Failed" */
    var AlreadyAtGoal: String /* "AlreadyAtGoal" */
    var RequestSuccessful: String /* "RequestSuccessful" */
    var EPathFollowingRequestResult_MAX: String /* "EPathFollowingRequestResult_MAX" */
}

external object EPathFollowingStatus {
    var Idle: String /* "Idle" */
    var Waiting: String /* "Waiting" */
    var Paused: String /* "Paused" */
    var Moving: String /* "Moving" */
    var EPathFollowingStatus_MAX: String /* "EPathFollowingStatus_MAX" */
}

external interface `T$419` {
    var BlackboardComponent: BlackboardComponent
    var `$`: Boolean
}

external open class AIController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Controller {
    open var bStopAILogicOnUnposses: Boolean
    open var bLOSflag: Boolean
    open var bSkipExtraLOSChecks: Boolean
    open var bAllowStrafe: Boolean
    open var bWantsPlayerState: Boolean
    open var bSetControlRotationFromPawnOrientation: Boolean
    open var PathFollowingComponent: PathFollowingComponent
    open var BrainComponent: BrainComponent
    open var PerceptionComponent: AIPerceptionComponent
    open var ActionsComp: PawnActionsComponent
    open var Blackboard: BlackboardComponent
    open var CachedGameplayTasksComponent: GameplayTasksComponent
    open var DefaultNavigationFilterClass: UnrealEngineClass
    open var ReceiveMoveCompleted: UnrealEngineMulticastDelegate<(RequestID: AIRequestID, Result: String /* "Success" | "Blocked" | "OffPath" | "Aborted" | "Skipped_DEPRECATED" | "Invalid" | "EPathFollowingResult_MAX" */) -> Unit>
    open fun UseBlackboard(BlackboardAsset: BlackboardData, BlackboardComponent: BlackboardComponent = definedExternally): `T$419`
    open fun UnclaimTaskResource(ResourceClass: UnrealEngineClass)
    open fun SetPathFollowingComponent(NewPFComponent: PathFollowingComponent)
    open fun SetMoveBlockDetection(bEnable: Boolean)
    open fun RunBehaviorTree(BTAsset: BehaviorTree): Boolean
    open fun OnUsingBlackBoard(BlackboardComp: BlackboardComponent, BlackboardAsset: BlackboardData)
    open fun OnGameplayTaskResourcesClaimed(NewlyClaimed: GameplayResourceSet, FreshlyReleased: GameplayResourceSet)
    open fun MoveToLocation(Dest: Vector, AcceptanceRadius: Number, bStopOnOverlap: Boolean, bUsePathfinding: Boolean, bProjectDestinationToNavigation: Boolean, bCanStrafe: Boolean, FilterClass: UnrealEngineClass, bAllowPartialPath: Boolean): String /* "Failed" | "AlreadyAtGoal" | "RequestSuccessful" | "EPathFollowingRequestResult_MAX" */
    open fun MoveToActor(Goal: Actor, AcceptanceRadius: Number, bStopOnOverlap: Boolean, bUsePathfinding: Boolean, bCanStrafe: Boolean, FilterClass: UnrealEngineClass, bAllowPartialPath: Boolean): String /* "Failed" | "AlreadyAtGoal" | "RequestSuccessful" | "EPathFollowingRequestResult_MAX" */
    open fun K2_SetFocus(NewFocus: Actor)
    open fun K2_SetFocalPoint(FP: Vector)
    open fun K2_ClearFocus()
    open fun HasPartialPath(): Boolean
    open fun GetPathFollowingComponent(): PathFollowingComponent
    open fun GetMoveStatus(): String /* "Idle" | "Waiting" | "Paused" | "Moving" | "EPathFollowingStatus_MAX" */
    open fun GetImmediateMoveDestination(): Vector
    open fun GetFocusActor(): Actor
    open fun GetFocalPointOnActor(Actor: Actor): Vector
    open fun GetFocalPoint(): Vector
    open fun GetAIPerceptionComponent(): AIPerceptionComponent
    open fun ClaimTaskResource(ResourceClass: UnrealEngineClass)

    companion object {
        fun GetDefaultObject(): AIController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AIController
        fun C(Other: UObject): AIController
        fun C(Other: Any): AIController
    }
}

external interface `T$420` {
    var bIsTracked: Boolean
    var Orientation: Rotator
    var bHasPositionalTracking: Boolean
    var Position: Vector
}

external open class XRDeviceId {
    open var SystemName: String
    open var DeviceID: Number
    open fun clone(): XRDeviceId
    open fun GetDevicePose(bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, Position: Vector = definedExternally): `T$420`
    open fun IsDeviceTracking(): Boolean

    companion object {
        fun C(Other: UObject): XRDeviceId
        fun C(Other: Any): XRDeviceId
        fun GetDevicePose(XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, Position: Vector = definedExternally): `T$420`
        fun IsDeviceTracking(XRDeviceId: XRDeviceId): Boolean
    }
}

external interface `T$421` {
    var OverlappingComponents: Array<PrimitiveComponent>
}

external interface `T$422` {
    var OverlappingActors: Array<Actor>
}

external interface `T$423` {
    var OutActors: Array<Actor>
}

external interface `T$424` {
    var ChildActors: Array<Actor>
}

external interface `T$425` {
    var OutLocation: Vector
    var OutRotation: Rotator
}

external interface `T$426` {
    var Origin: Vector
    var BoxExtent: Vector
}

external interface `T$427` {
    var XRDeviceId: XRDeviceId
    var `$`: PrimitiveComponent
}

external open class Actor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : UObject {
    open var PrimaryActorTick: ActorTickFunction
    open var bHidden: Boolean
    open var bNetTemporary: Boolean
    open var bNetStartup: Boolean
    open var bOnlyRelevantToOwner: Boolean
    open var bAlwaysRelevant: Boolean
    open var bReplicateMovement: Boolean
    open var bTearOff: Boolean
    open var bExchangedRoles: Boolean
    open var bNetLoadOnClient: Boolean
    open var bNetUseOwnerRelevancy: Boolean
    open var bRelevantForNetworkReplays: Boolean
    open var bRelevantForLevelBounds: Boolean
    open var bReplayRewindable: Boolean
    open var bAllowTickBeforeBeginPlay: Boolean
    open var bAutoDestroyWhenFinished: Boolean
    open var bBlockInput: Boolean
    open var bCanBeDamaged: Boolean
    open var bCollideWhenPlacing: Boolean
    open var bFindCameraComponentWhenViewTarget: Boolean
    open var bGenerateOverlapEventsDuringLevelStreaming: Boolean
    open var bIgnoresOriginShifting: Boolean
    open var bEnableAutoLODGeneration: Boolean
    open var bIsEditorOnlyActor: Boolean
    open var bActorSeamlessTraveled: Boolean
    open var bReplicates: Boolean
    open var bCanBeInCluster: Boolean
    open var bAllowReceiveTickEventOnDedicatedServer: Boolean
    open var bActorEnableCollision: Boolean
    open var bActorIsBeingDestroyed: Boolean
    open var RemoteRole: String /* "ROLE_None" | "ROLE_SimulatedProxy" | "ROLE_AutonomousProxy" | "ROLE_Authority" | "ROLE_MAX" */
    open var ReplicatedMovement: RepMovement
    open var InitialLifeSpan: Number
    open var CustomTimeDilation: Number
    open var AttachmentReplication: RepAttachment
    open var Owner: Actor
    open var NetDriverName: String
    open var Role: String /* "ROLE_None" | "ROLE_SimulatedProxy" | "ROLE_AutonomousProxy" | "ROLE_Authority" | "ROLE_MAX" */
    open var NetDormancy: String /* "DORM_Never" | "DORM_Awake" | "DORM_DormantAll" | "DORM_DormantPartial" | "DORM_Initial" | "DORM_MAX" */
    open var SpawnCollisionHandlingMethod: String /* "Undefined" | "AlwaysSpawn" | "AdjustIfPossibleButAlwaysSpawn" | "AdjustIfPossibleButDontSpawnIfColliding" | "DontSpawnIfColliding" | "ESpawnActorCollisionHandlingMethod_MAX" */
    open var AutoReceiveInput: String /* "Disabled" | "Player0" | "Player1" | "Player2" | "Player3" | "Player4" | "Player5" | "Player6" | "Player7" | "EAutoReceiveInput_MAX" */
    open var InputPriority: Number
    open var InputComponent: InputComponent
    open var NetCullDistanceSquared: Number
    open var NetTag: Number
    open var NetUpdateFrequency: Number
    open var MinNetUpdateFrequency: Number
    open var NetPriority: Number
    open var Instigator: Pawn
    open var Children: Array<Actor>
    open var RootComponent: SceneComponent
    open var PivotOffset: Vector
    open var ControllingMatineeActors: Array<MatineeActor>
    open var Layers: Array<String>
    open var ParentComponentActor: Any
    open var ParentComponent: Any
    open var GroupActor: Actor
    open var SpriteScale: Number
    open var HiddenEditorViews: Any
    open var ActorLabel: String
    open var FolderPath: String
    open var bHiddenEd: Boolean
    open var bIsEditorPreviewActor: Boolean
    open var bHiddenEdLayer: Boolean
    open var bHiddenEdLevel: Boolean
    open var bLockLocation: Boolean
    open var bActorLabelEditable: Boolean
    open var bEditable: Boolean
    open var bListedInSceneOutliner: Boolean
    open var bOptimizeBPComponentData: Boolean
    open var bHiddenEdTemporary: Boolean
    open var Tags: Array<String>
    open var OnTakeAnyDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: Number, DamageType: DamageType, InstigatedBy: Controller, DamageCauser: Actor) -> Unit>
    open var OnTakePointDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: Number, InstigatedBy: Controller, HitLocation: Vector, FHitComponent: PrimitiveComponent, BoneName: String, ShotFromDirection: Vector, DamageType: DamageType, DamageCauser: Actor) -> Unit>
    open var OnTakeRadialDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: Number, DamageType: DamageType, Origin: Vector, HitInfo: HitResult, InstigatedBy: Controller, DamageCauser: Actor) -> Unit>
    open var OnActorBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor, OtherActor: Actor) -> Unit>
    open var OnActorEndOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor, OtherActor: Actor) -> Unit>
    open var OnBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) -> Unit>
    open var OnEndCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) -> Unit>
    open var OnClicked: UnrealEngineMulticastDelegate<(TouchedActor: Actor, ButtonPressed: Key) -> Unit>
    open var OnReleased: UnrealEngineMulticastDelegate<(TouchedActor: Actor, ButtonReleased: Key) -> Unit>
    open var OnInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedActor: Actor) -> Unit>
    open var OnInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedActor: Actor) -> Unit>
    open var OnInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedActor: Actor) -> Unit>
    open var OnInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */, TouchedActor: Actor) -> Unit>
    open var OnActorHit: UnrealEngineMulticastDelegate<(SelfActor: Actor, OtherActor: Actor, NormalImpulse: Vector, Hit: HitResult) -> Unit>
    open var OnDestroyed: UnrealEngineMulticastDelegate<(DestroyedActor: Actor) -> Unit>
    open var OnEndPlay: UnrealEngineMulticastDelegate<(Actor: Actor, EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */) -> Unit>
    open var InstanceComponents: Array<ActorComponent>
    open var BlueprintCreatedComponents: Array<ActorComponent>
    open fun WasRecentlyRendered(Tolerance: Number): Boolean
    open fun UserConstructionScript()
    open fun TearOff()
    open fun SnapRootComponentTo(InParentActor: Actor, InSocketName: String)
    open fun SetTickGroup(NewTickGroup: String /* "TG_PrePhysics" | "TG_StartPhysics" | "TG_DuringPhysics" | "TG_EndPhysics" | "TG_PostPhysics" | "TG_PostUpdateWork" | "TG_LastDemotable" | "TG_NewlySpawned" | "TG_MAX" */)
    open fun SetTickableWhenPaused(bTickableWhenPaused: Boolean)
    open fun SetReplicates(bInReplicates: Boolean)
    open fun SetReplicateMovement(bInReplicateMovement: Boolean)
    open fun SetOwner(NewOwner: Actor)
    open fun SetNetDormancy(NewDormancy: String /* "DORM_Never" | "DORM_Awake" | "DORM_DormantAll" | "DORM_DormantPartial" | "DORM_Initial" | "DORM_MAX" */)
    open fun SetLifeSpan(InLifespan: Number)
    open fun SetIsTemporarilyHiddenInEditor(bIsHidden: Boolean)
    open fun SetFolderPath(NewFolderPath: String)
    open fun SetActorTickInterval(TickInterval: Number)
    open fun SetActorTickEnabled(bEnabled: Boolean)
    open fun SetActorScale3D(NewScale3D: Vector)
    open fun SetActorRelativeScale3D(NewRelativeScale: Vector)
    open fun SetActorLabel(NewActorLabel: String, bMarkDirty: Boolean)
    open fun SetActorHiddenInGame(bNewHidden: Boolean)
    open fun SetActorEnableCollision(bNewActorEnableCollision: Boolean)
    open fun RemoveTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent)
    open fun RemoveTickPrerequisiteActor(PrerequisiteActor: Actor)
    open fun ReceiveTick(DeltaSeconds: Number)
    open fun ReceiveRadialDamage(DamageReceived: Number, DamageType: DamageType, Origin: Vector, HitInfo: HitResult, InstigatedBy: Controller, DamageCauser: Actor)
    open fun ReceivePointDamage(Damage: Number, DamageType: DamageType, HitLocation: Vector, HitNormal: Vector, HitComponent: PrimitiveComponent, BoneName: String, ShotFromDirection: Vector, InstigatedBy: Controller, DamageCauser: Actor, HitInfo: HitResult)
    open fun ReceiveHit(MyComp: PrimitiveComponent, Other: Actor, OtherComp: PrimitiveComponent, bSelfMoved: Boolean, HitLocation: Vector, HitNormal: Vector, NormalImpulse: Vector, Hit: HitResult)
    open fun ReceiveEndPlay(EndPlayReason: String /* "Destroyed" | "LevelTransition" | "EndPlayInEditor" | "RemovedFromWorld" | "Quit" | "EEndPlayReason_MAX" */)
    open fun ReceiveDestroyed()
    open fun ReceiveBeginPlay()
    open fun ReceiveAnyDamage(Damage: Number, DamageType: DamageType, InstigatedBy: Controller, DamageCauser: Actor)
    open fun ReceiveActorOnReleased(ButtonReleased: Key)
    open fun ReceiveActorOnInputTouchLeave(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */)
    open fun ReceiveActorOnInputTouchEnter(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */)
    open fun ReceiveActorOnInputTouchEnd(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */)
    open fun ReceiveActorOnInputTouchBegin(FingerIndex: String /* "Touch1" | "Touch2" | "Touch3" | "Touch4" | "Touch5" | "Touch6" | "Touch7" | "Touch8" | "Touch9" | "Touch10" | "CursorPointerIndex" | "MAX_TOUCHES" | "ETouchIndex_MAX" */)
    open fun ReceiveActorOnClicked(ButtonPressed: Key)
    open fun ReceiveActorEndOverlap(OtherActor: Actor)
    open fun ReceiveActorEndCursorOver()
    open fun ReceiveActorBeginOverlap(OtherActor: Actor)
    open fun ReceiveActorBeginCursorOver()
    open fun PrestreamTextures(Seconds: Number, bEnableStreaming: Boolean, CinematicTextureGroups: Number)
    open fun OnRep_ReplicateMovement()
    open fun OnRep_ReplicatedMovement()
    open fun OnRep_Owner()
    open fun OnRep_Instigator()
    open fun OnRep_AttachmentReplication()
    open fun MakeNoise(Loudness: Number, NoiseInstigator: Pawn, NoiseLocation: Vector, MaxRange: Number, Tag: String)
    open fun MakeMIDForMaterial(Parent: MaterialInterface): MaterialInstanceDynamic
    open fun K2_TeleportTo(DestLocation: Vector, DestRotation: Rotator): Boolean
    open fun K2_SetActorTransform(NewTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$208`
    open fun K2_SetActorRotation(NewRotation: Rotator, bTeleportPhysics: Boolean): Boolean
    open fun K2_SetActorRelativeTransform(NewRelativeTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$208`
    open fun K2_SetActorLocation(NewLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$208`
    open fun K2_OnReset()
    open fun K2_OnEndViewTarget(PC: PlayerController)
    open fun K2_OnBecomeViewTarget(PC: PlayerController)
    open fun K2_GetRootComponent(): SceneComponent
    open fun K2_GetActorRotation(): Rotator
    open fun K2_GetActorLocation(): Vector
    open fun K2_DetachFromActor(LocationRule: String /* "KeepRelative" | "KeepWorld" | "EDetachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "EDetachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "EDetachmentRule_MAX" */)
    open fun K2_DestroyComponent(Component: ActorComponent)
    open fun K2_DestroyActor()
    open fun K2_AttachToComponent(Parent: SceneComponent, SocketName: String, LocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, bWeldSimulatedBodies: Boolean)
    open fun K2_AttachToActor(ParentActor: Actor, SocketName: String, LocationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, RotationRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, ScaleRule: String /* "KeepRelative" | "KeepWorld" | "SnapToTarget" | "EAttachmentRule_MAX" */, bWeldSimulatedBodies: Boolean)
    open fun K2_AttachRootComponentToActor(InParentActor: Actor, InSocketName: String, AttachLocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bWeldSimulatedBodies: Boolean)
    open fun K2_AttachRootComponentTo(InParent: SceneComponent, InSocketName: String, AttachLocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bWeldSimulatedBodies: Boolean)
    open fun K2_AddActorWorldTransform(DeltaTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddActorWorldOffset(DeltaLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddActorLocalTransform(NewTransform: Transform, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun K2_AddActorLocalOffset(DeltaLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$248`
    open fun IsTemporarilyHiddenInEditor(bIncludeParent: Boolean): Boolean
    open fun IsSelectable(): Boolean
    open fun IsOverlappingActor(Other: Actor): Boolean
    open fun IsHiddenEdAtStartup(): Boolean
    open fun IsHiddenEd(): Boolean
    open fun IsEditable(): Boolean
    open fun IsChildActor(): Boolean
    open fun IsActorTickEnabled(): Boolean
    open fun IsActorBeingDestroyed(): Boolean
    open fun HasAuthority(): Boolean
    open fun GetVerticalDistanceTo(OtherActor: Actor): Number
    open fun GetVelocity(): Vector
    open fun GetTransform(): Transform
    open fun GetTickableWhenPaused(): Boolean
    open fun GetSquaredDistanceTo(OtherActor: Actor): Number
    open fun GetRemoteRole(): String /* "ROLE_None" | "ROLE_SimulatedProxy" | "ROLE_AutonomousProxy" | "ROLE_Authority" | "ROLE_MAX" */
    open fun GetParentComponent(): ChildActorComponent
    open fun GetParentActor(): Actor
    open fun GetOwner(): Actor
    open fun GetOverlappingComponents(OverlappingComponents: Array<PrimitiveComponent> = definedExternally): `T$421`
    open fun GetOverlappingActors(OverlappingActors: Array<Actor> = definedExternally, ClassFilter: UnrealEngineClass = definedExternally): `T$422`
    open fun GetLocalRole(): String /* "ROLE_None" | "ROLE_SimulatedProxy" | "ROLE_AutonomousProxy" | "ROLE_Authority" | "ROLE_MAX" */
    open fun GetLifeSpan(): Number
    open fun GetInstigatorController(): Controller
    open fun GetInstigator(): Pawn
    open fun GetInputVectorAxisValue(InputAxisKey: Key): Vector
    open fun GetInputAxisValue(InputAxisName: String): Number
    open fun GetInputAxisKeyValue(InputAxisKey: Key): Number
    open fun GetHorizontalDotProductTo(OtherActor: Actor): Number
    open fun GetHorizontalDistanceTo(OtherActor: Actor): Number
    open fun GetGameTimeSinceCreation(): Number
    open fun GetFolderPath(): String
    open fun GetDotProductTo(OtherActor: Actor): Number
    open fun GetDistanceTo(OtherActor: Actor): Number
    open fun GetComponentsByTag(ComponentClass: UnrealEngineClass, Tag: String): Array<ActorComponent>
    open fun GetComponentsByClass(ComponentClass: UnrealEngineClass): Array<ActorComponent>
    open fun GetComponentByClass(ComponentClass: UnrealEngineClass): ActorComponent
    open fun GetAttachParentSocketName(): String
    open fun GetAttachParentActor(): Actor
    open fun GetAttachedActors(OutActors: Array<Actor> = definedExternally): `T$423`
    open fun GetAllChildActors(ChildActors: Array<Actor> = definedExternally, bIncludeDescendants: Boolean = definedExternally): `T$424`
    open fun GetActorUpVector(): Vector
    open fun GetActorTimeDilation(): Number
    open fun GetActorTickInterval(): Number
    open fun GetActorScale3D(): Vector
    open fun GetActorRightVector(): Vector
    open fun GetActorRelativeScale3D(): Vector
    open fun GetActorLabel(): String
    open fun GetActorForwardVector(): Vector
    open fun GetActorEyesViewPoint(OutLocation: Vector = definedExternally, OutRotation: Rotator = definedExternally): `T$425`
    open fun GetActorEnableCollision(): Boolean
    open fun GetActorBounds(bOnlyCollidingComponents: Boolean, Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally): `T$426`
    open fun GetActorBounds(bOnlyCollidingComponents: Boolean): `T$426`
    open fun GetActorBounds(bOnlyCollidingComponents: Boolean, Origin: Vector = definedExternally): `T$426`
    open fun ForceNetUpdate()
    open fun FlushNetDormancy()
    open fun EnableInput(PlayerController: PlayerController)
    open fun DisableInput(PlayerController: PlayerController)
    open fun DetachRootComponentFromParent(bMaintainWorldPosition: Boolean)
    open fun AddTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent)
    open fun AddTickPrerequisiteActor(PrerequisiteActor: Actor)
    open fun AddComponent(TemplateName: String, bManualAttachment: Boolean, RelativeTransform: Transform, ComponentTemplateContext: UObject): ActorComponent
    open fun ActorHasTag(Tag: String): Boolean
    open fun ClearActorLabel()
    open fun GetActorLocation(): Vector
    open fun IsActorLabelEditable(): Boolean
    open fun SetActorLocation(NewLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$208`
    open fun SetFolderPath_Recursively(NewFolderPath: String)
    open fun Actor_GetWorld(): World
    open fun GetLastRenderTime(): Number
    open fun GetLevel(): Level
    open fun IsPendingKill(): Boolean
    open fun ReregisterAllComponents()
    open fun SetActorFlags(Flags: Number)
    open fun SetRootComponent(Component: SceneComponent)
    open fun SetFocusActor()
    open fun GetAIController(): AIController
    open fun GetBlackboard(): BlackboardComponent
    open fun GetActorBounds(Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally): `T$426`
    open fun GetActorBounds(): `T$426`
    open fun GetActorBounds(Origin: Vector = definedExternally): `T$426`
    open fun ApplyDamage(BaseDamage: Number, EventInstigator: Controller, DamageCauser: Actor, DamageTypeClass: UnrealEngineClass): Number
    open fun ApplyPointDamage(BaseDamage: Number, HitFromDirection: Vector, HitInfo: HitResult, EventInstigator: Controller, DamageCauser: Actor, DamageTypeClass: UnrealEngineClass): Number
    open fun FinishSpawningActor(SpawnTransform: Transform): Actor
    open fun AddDeviceVisualizationComponentBlocking(XRDeviceId: XRDeviceId, bManualAttachment: Boolean, RelativeTransform: Transform): PrimitiveComponent
    open fun AddNamedDeviceVisualizationComponentBlocking(SystemName: String, DeviceName: String, bManualAttachment: Boolean, RelativeTransform: Transform, XRDeviceId: XRDeviceId = definedExternally): `T$427`

    companion object {
        fun GetDefaultObject(): Actor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Actor
        fun C(Other: UObject): Actor
        fun C(Other: Any): Actor
        fun ClearActorLabel(Actor: Actor)
        fun GetActorLabel(Actor: Actor): String
        fun GetActorLocation(Actor: Actor): Vector
        fun GetFolderPath(Actor: Actor): String
        fun IsActorLabelEditable(Actor: Actor): Boolean
        fun SetActorLabel(Actor: Actor, NewActorLabel: String, bMarkDirty: Boolean)
        fun SetActorLocation(Actor: Actor, NewLocation: Vector, bSweep: Boolean, SweepHitResult: HitResult = definedExternally, bTeleport: Boolean = definedExternally): `T$208`
        fun SetFolderPath(Actor: Actor, NewFolderPath: String)
        fun SetFolderPath_Recursively(Actor: Actor, NewFolderPath: String)
        fun SetIsTemporarilyHiddenInEditor(Actor: Actor, bIsHidden: Boolean)
        fun Actor_GetWorld(Actor: Actor): World
        fun GetLastRenderTime(Actor: Actor): Number
        fun GetLevel(Actor: Actor): Level
        fun IsPendingKill(InActor: Actor): Boolean
        fun ReregisterAllComponents(Actor: Actor)
        fun SetActorFlags(Actor: Actor, Flags: Number)
        fun SetRootComponent(Actor: Actor, Component: SceneComponent)
        fun SetFocusActor(InFocusActor: Actor)
        fun GetAIController(ControlledActor: Actor): AIController
        fun GetBlackboard(Target: Actor): BlackboardComponent
        fun GetActorBounds(Actor: Actor, Origin: Vector = definedExternally, BoxExtent: Vector = definedExternally): `T$426`
        fun ApplyDamage(DamagedActor: Actor, BaseDamage: Number, EventInstigator: Controller, DamageCauser: Actor, DamageTypeClass: UnrealEngineClass): Number
        fun ApplyPointDamage(DamagedActor: Actor, BaseDamage: Number, HitFromDirection: Vector, HitInfo: HitResult, EventInstigator: Controller, DamageCauser: Actor, DamageTypeClass: UnrealEngineClass): Number
        fun FinishSpawningActor(Actor: Actor, SpawnTransform: Transform): Actor
        fun AddDeviceVisualizationComponentBlocking(Target: Actor, XRDeviceId: XRDeviceId, bManualAttachment: Boolean, RelativeTransform: Transform): PrimitiveComponent
        fun AddNamedDeviceVisualizationComponentBlocking(Target: Actor, SystemName: String, DeviceName: String, bManualAttachment: Boolean, RelativeTransform: Transform, XRDeviceId: XRDeviceId = definedExternally): `T$427`
    }
}

external open class LineBatchComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LineBatchComponent
        fun Find(Outer: UObject, ResourceName: String): LineBatchComponent
        fun GetDefaultObject(): LineBatchComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LineBatchComponent
        fun C(Other: UObject): LineBatchComponent
        fun C(Other: Any): LineBatchComponent
    }
}

external object EStreamingVolumeUsage {
    var SVB_Loading: String /* "SVB_Loading" */
    var SVB_LoadingAndVisibility: String /* "SVB_LoadingAndVisibility" */
    var SVB_VisibilityBlockingOnLoad: String /* "SVB_VisibilityBlockingOnLoad" */
    var SVB_BlockingOnLoad: String /* "SVB_BlockingOnLoad" */
    var SVB_LoadingNotVisible: String /* "SVB_LoadingNotVisible" */
    var SVB_MAX: String /* "SVB_MAX" */
}

external open class LevelStreamingVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Volume {
    open var StreamingLevelNames: Array<String>
    open var bEditorPreVisOnly: Boolean
    open var bDisabled: Boolean
    open var StreamingUsage: String /* "SVB_Loading" | "SVB_LoadingAndVisibility" | "SVB_VisibilityBlockingOnLoad" | "SVB_BlockingOnLoad" | "SVB_LoadingNotVisible" | "SVB_MAX" */

    companion object {
        fun GetDefaultObject(): LevelStreamingVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelStreamingVolume
        fun C(Other: UObject): LevelStreamingVolume
        fun C(Other: Any): LevelStreamingVolume
    }
}

external open class LevelStreaming : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PackageName: String
    open var WorldAsset: World
    open var PackageNameToLoad: String
    open var LODPackageNames: Array<String>
    open var LevelTransform: Transform
    open var LevelLODIndex: Number
    open var StreamingPriority: Number
    open var bShouldBeVisibleInEditor: Boolean
    open var bShouldBeVisible: Boolean
    open var bShouldBeLoaded: Boolean
    open var bLocked: Boolean
    open var bIsStatic: Boolean
    open var bShouldBlockOnLoad: Boolean
    open var bShouldBlockOnUnload: Boolean
    open var bDisableDistanceStreaming: Boolean
    open var bDrawOnLevelStatusMap: Boolean
    open var DrawColor: Color
    open var LevelColor: LinearColor
    open var EditorStreamingVolumes: Array<LevelStreamingVolume>
    open var MinTimeBetweenVolumeUnloadRequests: Number
    open var Keywords: Array<String>
    open var OnLevelLoaded: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnLevelUnloaded: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnLevelShown: UnrealEngineMulticastDelegate<() -> Unit>
    open var OnLevelHidden: UnrealEngineMulticastDelegate<() -> Unit>
    open var LoadedLevel: Level
    open var PendingUnloadLevel: Level
    open var FolderPath: String
    open fun ShouldBeLoaded(): Boolean
    open fun SetShouldBeVisible(bInShouldBeVisible: Boolean)
    open fun SetShouldBeLoaded(bInShouldBeLoaded: Boolean)
    open fun SetPriority(NewPriority: Number)
    open fun SetLevelLODIndex(LODIndex: Number)
    open fun IsStreamingStatePending(): Boolean
    open fun IsLevelVisible(): Boolean
    open fun IsLevelLoaded(): Boolean
    open fun GetWorldAssetPackageFName(): String
    open fun GetLoadedLevel(): Level
    open fun GetLevelScriptActor(): LevelScriptActor
    open fun CreateInstance(UniqueInstanceName: String): LevelStreaming

    companion object {
        fun Load(ResourceName: String): LevelStreaming
        fun Find(Outer: UObject, ResourceName: String): LevelStreaming
        fun GetDefaultObject(): LevelStreaming
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelStreaming
        fun C(Other: UObject): LevelStreaming
        fun C(Other: Any): LevelStreaming
    }
}

external open class LevelStreamingWrapper {
    open var StreamingLevel: LevelStreaming
    open fun clone(): LevelStreamingWrapper

    companion object {
        fun C(Other: UObject): LevelStreamingWrapper
        fun C(Other: Any): LevelStreamingWrapper
    }
}

external open class StreamingLevelsToConsider {
    open var StreamingLevels: Array<LevelStreamingWrapper>
    open fun clone(): StreamingLevelsToConsider

    companion object {
        fun C(Other: UObject): StreamingLevelsToConsider
        fun C(Other: Any): StreamingLevelsToConsider
    }
}

external open class MulticastRecordOptions {
    open var FuncPathName: String
    open var bServerSkip: Boolean
    open var bClientSkip: Boolean
    open fun clone(): MulticastRecordOptions

    companion object {
        fun C(Other: UObject): MulticastRecordOptions
        fun C(Other: Any): MulticastRecordOptions
    }
}

external open class DemoNetDriver : NetDriver {
    constructor()
    constructor(Outer: UObject)
    open var RollbackNetStartupActors: Any
    open var CheckpointSaveMaxMSPerFrame: Number
    open var MulticastRecordOptions: Array<MulticastRecordOptions>
    open var bIsLocalReplay: Boolean
    open var SpectatorControllers: Array<PlayerController>

    companion object {
        fun Load(ResourceName: String): DemoNetDriver
        fun Find(Outer: UObject, ResourceName: String): DemoNetDriver
        fun GetDefaultObject(): DemoNetDriver
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DemoNetDriver
        fun C(Other: UObject): DemoNetDriver
        fun C(Other: Any): DemoNetDriver
    }
}

external open class ParticleEventManager(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    companion object {
        fun GetDefaultObject(): ParticleEventManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ParticleEventManager
        fun C(Other: UObject): ParticleEventManager
        fun C(Other: Any): ParticleEventManager
    }
}

external open class NavigationSystemBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavigationSystemBase
        fun Find(Outer: UObject, ResourceName: String): NavigationSystemBase
        fun GetDefaultObject(): NavigationSystemBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationSystemBase
        fun C(Other: UObject): NavigationSystemBase
        fun C(Other: Any): NavigationSystemBase
    }
}

external open class AvoidanceManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultTimeToLive: Number
    open var LockTimeAfterAvoid: Number
    open var LockTimeAfterClean: Number
    open var DeltaTimeToPredict: Number
    open var ArtificialRadiusExpansion: Number
    open var TestHeightDifference: Number
    open var HeightCheckMargin: Number
    open fun RegisterMovementComponent(MovementComp: MovementComponent, AvoidanceWeight: Number): Boolean
    open fun GetObjectCount(): Number
    open fun GetNewAvoidanceUID(): Number
    open fun GetAvoidanceVelocityForComponent(MovementComp: MovementComponent): Vector

    companion object {
        fun Load(ResourceName: String): AvoidanceManager
        fun Find(Outer: UObject, ResourceName: String): AvoidanceManager
        fun GetDefaultObject(): AvoidanceManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AvoidanceManager
        fun C(Other: UObject): AvoidanceManager
        fun C(Other: Any): AvoidanceManager
    }
}

external open class LevelCollection {
    open var GameState: GameStateBase
    open var NetDriver: NetDriver
    open var DemoNetDriver: DemoNetDriver
    open var PersistentLevel: Level
    open var Levels: Any
    open fun clone(): LevelCollection

    companion object {
        fun C(Other: UObject): LevelCollection
        fun C(Other: Any): LevelCollection
    }
}

external open class MaterialParameterCollectionInstance : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Collection: MaterialParameterCollection

    companion object {
        fun Load(ResourceName: String): MaterialParameterCollectionInstance
        fun Find(Outer: UObject, ResourceName: String): MaterialParameterCollectionInstance
        fun GetDefaultObject(): MaterialParameterCollectionInstance
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialParameterCollectionInstance
        fun C(Other: UObject): MaterialParameterCollectionInstance
        fun C(Other: Any): MaterialParameterCollectionInstance
    }
}

external open class LevelViewportInfo {
    open var CamPosition: Vector
    open var CamRotation: Rotator
    open var CamOrthoZoom: Number
    open var CamUpdated: Boolean
    open fun clone(): LevelViewportInfo

    companion object {
        fun C(Other: UObject): LevelViewportInfo
        fun C(Other: Any): LevelViewportInfo
    }
}

external open class WorldComposition : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TilesStreaming: Array<LevelStreaming>
    open var TilesStreamingTimeThreshold: Any
    open var bLoadAllTilesDuringCinematic: Boolean
    open var bRebaseOriginIn3DSpace: Boolean
    open var bLockTilesLocation: Boolean
    open var RebaseOriginDistance: Number

    companion object {
        fun Load(ResourceName: String): WorldComposition
        fun Find(Outer: UObject, ResourceName: String): WorldComposition
        fun GetDefaultObject(): WorldComposition
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WorldComposition
        fun C(Other: UObject): WorldComposition
        fun C(Other: Any): WorldComposition
    }
}

external open class WorldPSCPool {
    open var WorldParticleSystemPools: Any
    open fun clone(): WorldPSCPool

    companion object {
        fun C(Other: UObject): WorldPSCPool
        fun C(Other: Any): WorldPSCPool
    }
}

external open class ActorLayer {
    open var Name: String
    open fun clone(): ActorLayer

    companion object {
        fun C(Other: UObject): ActorLayer
        fun C(Other: Any): ActorLayer
    }
}

external open class URL {
    open var Protocol: String
    open var Host: String
    open var Port: Number
    open var Valid: Number
    open var Map: String
    open var RedirectURL: String
    open var Op: Array<String>
    open var Portal: String
    open fun clone(): URL

    companion object {
        fun C(Other: UObject): URL
        fun C(Other: Any): URL
    }
}

external object ERecastPartitioning {
    var Monotone: String /* "Monotone" */
    var Watershed: String /* "Watershed" */
    var ChunkyMonotone: String /* "ChunkyMonotone" */
    var ERecastPartitioning_MAX: String /* "ERecastPartitioning_MAX" */
}

external open class RecastNavMesh(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : NavigationData {
    open var bDrawTriangleEdges: Boolean
    open var bDrawPolyEdges: Boolean
    open var bDrawFilledPolys: Boolean
    open var bDrawNavMeshEdges: Boolean
    open var bDrawTileBounds: Boolean
    open var bDrawPathCollidingGeometry: Boolean
    open var bDrawTileLabels: Boolean
    open var bDrawPolygonLabels: Boolean
    open var bDrawDefaultPolygonCost: Boolean
    open var bDrawLabelsOnPathNodes: Boolean
    open var bDrawNavLinks: Boolean
    open var bDrawFailedNavLinks: Boolean
    open var bDrawClusters: Boolean
    open var bDrawOctree: Boolean
    open var bDrawOctreeDetails: Boolean
    open var bDrawMarkedForbiddenPolys: Boolean
    open var bDistinctlyDrawTilesBeingBuilt: Boolean
    open var bDrawNavMesh: Boolean
    open var DrawOffset: Number
    open var bFixedTilePoolSize: Boolean
    open var TilePoolSize: Number
    open var TileSizeUU: Number
    open var CellSize: Number
    open var CellHeight: Number
    open var AgentRadius: Number
    open var AgentHeight: Number
    open var AgentMaxHeight: Number
    open var AgentMaxSlope: Number
    open var AgentMaxStepHeight: Number
    open var MinRegionArea: Number
    open var MergeRegionSize: Number
    open var MaxSimplificationError: Number
    open var MaxSimultaneousTileGenerationJobsCount: Number
    open var TileNumberHardLimit: Number
    open var PolyRefTileBits: Number
    open var PolyRefNavPolyBits: Number
    open var PolyRefSaltBits: Number
    open var NavMeshOriginOffset: Vector
    open var DefaultDrawDistance: Number
    open var DefaultMaxSearchNodes: Number
    open var DefaultMaxHierarchicalSearchNodes: Number
    open var RegionPartitioning: String /* "Monotone" | "Watershed" | "ChunkyMonotone" | "ERecastPartitioning_MAX" */
    open var LayerPartitioning: String /* "Monotone" | "Watershed" | "ChunkyMonotone" | "ERecastPartitioning_MAX" */
    open var RegionChunkSplits: Number
    open var LayerChunkSplits: Number
    open var bSortNavigationAreasByCost: Boolean
    open var bPerformVoxelFiltering: Boolean
    open var bMarkLowHeightAreas: Boolean
    open var bFilterLowSpanSequences: Boolean
    open var bFilterLowSpanFromTileCache: Boolean
    open var bDoFullyAsyncNavDataGathering: Boolean
    open var bUseBetterOffsetsFromCorners: Boolean
    open var bStoreEmptyTileLayers: Boolean
    open var bUseVirtualFilters: Boolean
    open var bAllowNavLinkAsPathEnd: Boolean
    open var bUseVoxelCache: Boolean
    open var TileSetUpdateInterval: Number
    open var HeuristicScale: Number
    open var VerticalDeviationFromGroundCompensation: Number
    open fun K2_ReplaceAreaInTileBounds(Bounds: Box, OldArea: UnrealEngineClass, NewArea: UnrealEngineClass, ReplaceLinks: Boolean): Boolean

    companion object {
        fun GetDefaultObject(): RecastNavMesh
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RecastNavMesh
        fun C(Other: UObject): RecastNavMesh
        fun C(Other: Any): RecastNavMesh
    }
}

external object EARWorldAlignment {
    var Gravity: String /* "Gravity" */
    var GravityAndHeading: String /* "GravityAndHeading" */
    var Camera: String /* "Camera" */
    var EARWorldAlignment_MAX: String /* "EARWorldAlignment_MAX" */
}

external object EARSessionType {
    var None: String /* "None" */
    var Orientation: String /* "Orientation" */
    var World: String /* "World" */
    var Face: String /* "Face" */
    var Image: String /* "Image" */
    var ObjectScanning: String /* "ObjectScanning" */
    var PoseTracking: String /* "PoseTracking" */
    var EARSessionType_MAX: String /* "EARSessionType_MAX" */
}

external object EARPlaneDetectionMode {
    var None: String /* "None" */
    var HorizontalPlaneDetection: String /* "HorizontalPlaneDetection" */
    var VerticalPlaneDetection: String /* "VerticalPlaneDetection" */
    var EARPlaneDetectionMode_MAX: String /* "EARPlaneDetectionMode_MAX" */
}

external object EARLightEstimationMode {
    var None: String /* "None" */
    var AmbientLightEstimate: String /* "AmbientLightEstimate" */
    var DirectionalLightEstimate: String /* "DirectionalLightEstimate" */
    var EARLightEstimationMode_MAX: String /* "EARLightEstimationMode_MAX" */
}

external object EARFrameSyncMode {
    var SyncTickWithCameraImage: String /* "SyncTickWithCameraImage" */
    var SyncTickWithoutCameraImage: String /* "SyncTickWithoutCameraImage" */
    var EARFrameSyncMode_MAX: String /* "EARFrameSyncMode_MAX" */
}

external object EARCandidateImageOrientation {
    var Landscape: String /* "Landscape" */
    var Portrait: String /* "Portrait" */
    var EARCandidateImageOrientation_MAX: String /* "EARCandidateImageOrientation_MAX" */
}

external open class ARCandidateImage : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var CandidateTexture: Texture2D
    open var FriendlyName: String
    open var Width: Number
    open var Height: Number
    open var Orientation: String /* "Landscape" | "Portrait" | "EARCandidateImageOrientation_MAX" */
    open fun GetPhysicalWidth(): Number
    open fun GetPhysicalHeight(): Number
    open fun GetOrientation(): String /* "Landscape" | "Portrait" | "EARCandidateImageOrientation_MAX" */
    open fun GetFriendlyName(): String
    open fun GetCandidateTexture(): Texture2D

    companion object {
        fun Load(ResourceName: String): ARCandidateImage
        fun Find(Outer: UObject, ResourceName: String): ARCandidateImage
        fun GetDefaultObject(): ARCandidateImage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARCandidateImage
        fun C(Other: UObject): ARCandidateImage
        fun C(Other: Any): ARCandidateImage
    }
}

external object EAREnvironmentCaptureProbeType {
    var None: String /* "None" */
    var Manual: String /* "Manual" */
    var Automatic: String /* "Automatic" */
    var EAREnvironmentCaptureProbeType_MAX: String /* "EAREnvironmentCaptureProbeType_MAX" */
}

external open class ARCandidateObject : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var CandidateObjectData: Array<Number>
    open var FriendlyName: String
    open var BoundingBox: Box
    open fun SetFriendlyName(NewName: String)
    open fun SetCandidateObjectData(InCandidateObject: Array<Number>)
    open fun SetBoundingBox(InBoundingBox: Box)
    open fun GetFriendlyName(): String
    open fun GetCandidateObjectData(): Array<Number>
    open fun GetBoundingBox(): Box

    companion object {
        fun Load(ResourceName: String): ARCandidateObject
        fun Find(Outer: UObject, ResourceName: String): ARCandidateObject
        fun GetDefaultObject(): ARCandidateObject
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARCandidateObject
        fun C(Other: UObject): ARCandidateObject
        fun C(Other: Any): ARCandidateObject
    }
}

external open class ARVideoFormat {
    open var FPS: Number
    open var Width: Number
    open var Height: Number
    open fun clone(): ARVideoFormat

    companion object {
        fun C(Other: UObject): ARVideoFormat
        fun C(Other: Any): ARVideoFormat
    }
}

external object EARFaceTrackingDirection {
    var FaceRelative: String /* "FaceRelative" */
    var FaceMirrored: String /* "FaceMirrored" */
    var EARFaceTrackingDirection_MAX: String /* "EARFaceTrackingDirection_MAX" */
}

external object EARFaceTrackingUpdate {
    var CurvesAndGeo: String /* "CurvesAndGeo" */
    var CurvesOnly: String /* "CurvesOnly" */
    var EARFaceTrackingUpdate_MAX: String /* "EARFaceTrackingUpdate_MAX" */
}

external object EARSessionTrackingFeature {
    var None: String /* "None" */
    var PoseDetection2D: String /* "PoseDetection2D" */
    var PersonSegmentation: String /* "PersonSegmentation" */
    var PersonSegmentationWithDepth: String /* "PersonSegmentationWithDepth" */
    var EARSessionTrackingFeature_MAX: String /* "EARSessionTrackingFeature_MAX" */
}

external open class ARSessionConfig : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var bGenerateMeshDataFromTrackedGeometry: Boolean
    open var bGenerateCollisionForMeshData: Boolean
    open var bGenerateNavMeshForMeshData: Boolean
    open var bUseMeshDataForOcclusion: Boolean
    open var bRenderMeshDataInWireframe: Boolean
    open var bTrackSceneObjects: Boolean
    open var bUsePersonSegmentationForOcclusion: Boolean
    open var WorldAlignment: String /* "Gravity" | "GravityAndHeading" | "Camera" | "EARWorldAlignment_MAX" */
    open var SessionType: String /* "None" | "Orientation" | "World" | "Face" | "Image" | "ObjectScanning" | "PoseTracking" | "EARSessionType_MAX" */
    open var PlaneDetectionMode: String /* "None" | "HorizontalPlaneDetection" | "VerticalPlaneDetection" | "EARPlaneDetectionMode_MAX" */
    open var bHorizontalPlaneDetection: Boolean
    open var bVerticalPlaneDetection: Boolean
    open var bEnableAutoFocus: Boolean
    open var LightEstimationMode: String /* "None" | "AmbientLightEstimate" | "DirectionalLightEstimate" | "EARLightEstimationMode_MAX" */
    open var FrameSyncMode: String /* "SyncTickWithCameraImage" | "SyncTickWithoutCameraImage" | "EARFrameSyncMode_MAX" */
    open var bEnableAutomaticCameraOverlay: Boolean
    open var bEnableAutomaticCameraTracking: Boolean
    open var bResetCameraTracking: Boolean
    open var bResetTrackedObjects: Boolean
    open var CandidateImages: Array<ARCandidateImage>
    open var MaxNumSimultaneousImagesTracked: Number
    open var EnvironmentCaptureProbeType: String /* "None" | "Manual" | "Automatic" | "EAREnvironmentCaptureProbeType_MAX" */
    open var WorldMapData: Array<Number>
    open var CandidateObjects: Array<ARCandidateObject>
    open var DesiredVideoFormat: ARVideoFormat
    open var FaceTrackingDirection: String /* "FaceRelative" | "FaceMirrored" | "EARFaceTrackingDirection_MAX" */
    open var FaceTrackingUpdate: String /* "CurvesAndGeo" | "CurvesOnly" | "EARFaceTrackingUpdate_MAX" */
    open var SerializedARCandidateImageDatabase: Array<Number>
    open var EnabledSessionTrackingFeature: String /* "None" | "PoseDetection2D" | "PersonSegmentation" | "PersonSegmentationWithDepth" | "EARSessionTrackingFeature_MAX" */
    open fun ShouldResetTrackedObjects(): Boolean
    open fun ShouldResetCameraTracking(): Boolean
    open fun ShouldRenderCameraOverlay(): Boolean
    open fun ShouldEnableCameraTracking(): Boolean
    open fun ShouldEnableAutoFocus(): Boolean
    open fun SetWorldMapData(WorldMapData: Array<Number>)
    open fun SetSessionTrackingFeatureToEnable(InSessionTrackingFeature: String /* "None" | "PoseDetection2D" | "PersonSegmentation" | "PersonSegmentationWithDepth" | "EARSessionTrackingFeature_MAX" */)
    open fun SetResetTrackedObjects(bNewValue: Boolean)
    open fun SetResetCameraTracking(bNewValue: Boolean)
    open fun SetFaceTrackingUpdate(InUpdate: String /* "CurvesAndGeo" | "CurvesOnly" | "EARFaceTrackingUpdate_MAX" */)
    open fun SetFaceTrackingDirection(InDirection: String /* "FaceRelative" | "FaceMirrored" | "EARFaceTrackingDirection_MAX" */)
    open fun SetEnableAutoFocus(bNewValue: Boolean)
    open fun SetDesiredVideoFormat(NewFormat: ARVideoFormat)
    open fun SetCandidateObjectList(InCandidateObjects: Array<ARCandidateObject>)
    open fun GetWorldMapData(): Array<Number>
    open fun GetWorldAlignment(): String /* "Gravity" | "GravityAndHeading" | "Camera" | "EARWorldAlignment_MAX" */
    open fun GetSessionType(): String /* "None" | "Orientation" | "World" | "Face" | "Image" | "ObjectScanning" | "PoseTracking" | "EARSessionType_MAX" */
    open fun GetPlaneDetectionMode(): String /* "None" | "HorizontalPlaneDetection" | "VerticalPlaneDetection" | "EARPlaneDetectionMode_MAX" */
    open fun GetMaxNumSimultaneousImagesTracked(): Number
    open fun GetLightEstimationMode(): String /* "None" | "AmbientLightEstimate" | "DirectionalLightEstimate" | "EARLightEstimationMode_MAX" */
    open fun GetFrameSyncMode(): String /* "SyncTickWithCameraImage" | "SyncTickWithoutCameraImage" | "EARFrameSyncMode_MAX" */
    open fun GetFaceTrackingUpdate(): String /* "CurvesAndGeo" | "CurvesOnly" | "EARFaceTrackingUpdate_MAX" */
    open fun GetFaceTrackingDirection(): String /* "FaceRelative" | "FaceMirrored" | "EARFaceTrackingDirection_MAX" */
    open fun GetEnvironmentCaptureProbeType(): String /* "None" | "Manual" | "Automatic" | "EAREnvironmentCaptureProbeType_MAX" */
    open fun GetEnabledSessionTrackingFeature(): String /* "None" | "PoseDetection2D" | "PersonSegmentation" | "PersonSegmentationWithDepth" | "EARSessionTrackingFeature_MAX" */
    open fun GetDesiredVideoFormat(): ARVideoFormat
    open fun GetCandidateObjectList(): Array<ARCandidateObject>
    open fun GetCandidateImageList(): Array<ARCandidateImage>
    open fun AddCandidateObject(CandidateObject: ARCandidateObject)
    open fun AddCandidateImage(NewCandidateImage: ARCandidateImage)
    open fun AddRuntimeCandidateImage(CandidateTexture: Texture2D, FriendlyName: String, PhysicalWidth: Number): ARCandidateImage
    open fun StartARSession()

    companion object {
        fun Load(ResourceName: String): ARSessionConfig
        fun Find(Outer: UObject, ResourceName: String): ARSessionConfig
        fun GetDefaultObject(): ARSessionConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARSessionConfig
        fun C(Other: UObject): ARSessionConfig
        fun C(Other: Any): ARSessionConfig
        fun AddRuntimeCandidateImage(SessionConfig: ARSessionConfig, CandidateTexture: Texture2D, FriendlyName: String, PhysicalWidth: Number): ARCandidateImage
        fun StartARSession(SessionConfig: ARSessionConfig)
    }
}

external object EPlaneQueryFlags {
    var Vertical: String /* "Vertical" */
    var Horizontal: String /* "Horizontal" */
    var Arbitrary: String /* "Arbitrary" */
    var OrientToGravity: String /* "OrientToGravity" */
    var PreferInner: String /* "PreferInner" */
    var IgnoreHoles: String /* "IgnoreHoles" */
    var Ceiling: String /* "Ceiling" */
    var Floor: String /* "Floor" */
    var Wall: String /* "Wall" */
    var EPlaneQueryFlags_MAX: String /* "EPlaneQueryFlags_MAX" */
}

external open class LuminARSessionConfig : ARSessionConfig {
    constructor()
    constructor(Outer: UObject)
    open var MaxPlaneQueryResults: Number
    open var MinPlaneArea: Number
    open var bArbitraryOrientationPlaneDetection: Boolean
    open var PlaneSearchExtents: Vector
    open var PlaneQueryFlags: Array<String /* "Vertical" | "Horizontal" | "Arbitrary" | "OrientToGravity" | "PreferInner" | "IgnoreHoles" | "Ceiling" | "Floor" | "Wall" | "EPlaneQueryFlags_MAX" */>
    open var bDiscardZeroExtentPlanes: Boolean

    companion object {
        fun Load(ResourceName: String): LuminARSessionConfig
        fun Find(Outer: UObject, ResourceName: String): LuminARSessionConfig
        fun GetDefaultObject(): LuminARSessionConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LuminARSessionConfig
        fun C(Other: UObject): LuminARSessionConfig
        fun C(Other: Any): LuminARSessionConfig
    }
}

external open class TraceChannelTestBatchOptions {
    open var bLineTrace: Boolean
    open var bSphereTrace: Boolean
    open var bCapsuleTrace: Boolean
    open var bBoxTrace: Boolean
    open var bChannelTrace: Boolean
    open var bObjectsTrace: Boolean
    open var bProfileTrace: Boolean
    open fun clone(): TraceChannelTestBatchOptions

    companion object {
        fun C(Other: UObject): TraceChannelTestBatchOptions
        fun C(Other: Any): TraceChannelTestBatchOptions
    }
}

external object EDrawDebugTrace {
    var None: String /* "None" */
    var ForOneFrame: String /* "ForOneFrame" */
    var ForDuration: String /* "ForDuration" */
    var Persistent: String /* "Persistent" */
    var EDrawDebugTrace_MAX: String /* "EDrawDebugTrace_MAX" */
}

external open class TraceQueryTestNames {
    open var ComponentName: String
    open var PhysicalMaterialName: String
    open var ActorName: String
    open fun clone(): TraceQueryTestNames

    companion object {
        fun C(Other: UObject): TraceQueryTestNames
        fun C(Other: Any): TraceQueryTestNames
    }
}

external open class TraceQueryTestResultsInnerMost {
    open var SingleHit: HitResult
    open var SingleNames: TraceQueryTestNames
    open var bSingleResult: Boolean
    open var MultiHits: Array<HitResult>
    open var MultiNames: Array<TraceQueryTestNames>
    open var bMultiResult: Boolean
    open fun clone(): TraceQueryTestResultsInnerMost

    companion object {
        fun C(Other: UObject): TraceQueryTestResultsInnerMost
        fun C(Other: Any): TraceQueryTestResultsInnerMost
    }
}

external open class TraceQueryTestResultsInner {
    open var LineResults: TraceQueryTestResultsInnerMost
    open var SphereResults: TraceQueryTestResultsInnerMost
    open var CapsuleResults: TraceQueryTestResultsInnerMost
    open var BoxResults: TraceQueryTestResultsInnerMost
    open fun clone(): TraceQueryTestResultsInner

    companion object {
        fun C(Other: UObject): TraceQueryTestResultsInner
        fun C(Other: Any): TraceQueryTestResultsInner
    }
}

external open class TraceQueryTestResults : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChannelResults: TraceQueryTestResultsInner
    open var ObjectResults: TraceQueryTestResultsInner
    open var ProfileResults: TraceQueryTestResultsInner
    open var BatchOptions: TraceChannelTestBatchOptions
    open fun ToString(): String

    companion object {
        fun Load(ResourceName: String): TraceQueryTestResults
        fun Find(Outer: UObject, ResourceName: String): TraceQueryTestResults
        fun GetDefaultObject(): TraceQueryTestResults
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TraceQueryTestResults
        fun C(Other: UObject): TraceQueryTestResults
        fun C(Other: Any): TraceQueryTestResults
    }
}

external open class AutomationViewSettings : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var AntiAliasing: Boolean
    open var MotionBlur: Boolean
    open var TemporalAA: Boolean
    open var ScreenSpaceReflections: Boolean
    open var ScreenSpaceAO: Boolean
    open var DistanceFieldAO: Boolean
    open var ContactShadows: Boolean
    open var EyeAdaptation: Boolean
    open var Bloom: Boolean

    companion object {
        fun Load(ResourceName: String): AutomationViewSettings
        fun Find(Outer: UObject, ResourceName: String): AutomationViewSettings
        fun GetDefaultObject(): AutomationViewSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AutomationViewSettings
        fun C(Other: UObject): AutomationViewSettings
        fun C(Other: Any): AutomationViewSettings
    }
}

external object EComparisonTolerance {
    var Zero: String /* "Zero" */
    var Low: String /* "Low" */
    var Medium: String /* "Medium" */
    var High: String /* "High" */
    var Custom: String /* "Custom" */
    var EComparisonTolerance_MAX: String /* "EComparisonTolerance_MAX" */
}

external open class ComparisonToleranceAmount {
    open var red: Number
    open var green: Number
    open var blue: Number
    open var Alpha: Number
    open var MinBrightness: Number
    open var MaxBrightness: Number
    open fun clone(): ComparisonToleranceAmount

    companion object {
        fun C(Other: UObject): ComparisonToleranceAmount
        fun C(Other: Any): ComparisonToleranceAmount
    }
}

external open class AutomationScreenshotOptions {
    open var Resolution: Vector2D
    open var Delay: Number
    open var bOverride_OverrideTimeTo: Boolean
    open var OverrideTimeTo: Number
    open var bDisableNoisyRenderingFeatures: Boolean
    open var bDisableTonemapping: Boolean
    open var ViewSettings: AutomationViewSettings
    open var VisualizeBuffer: String
    open var Tolerance: String /* "Zero" | "Low" | "Medium" | "High" | "Custom" | "EComparisonTolerance_MAX" */
    open var ToleranceAmount: ComparisonToleranceAmount
    open var MaximumLocalError: Number
    open var MaximumGlobalError: Number
    open var bIgnoreAntiAliasing: Boolean
    open var bIgnoreColors: Boolean
    open fun clone(): AutomationScreenshotOptions

    companion object {
        fun C(Other: UObject): AutomationScreenshotOptions
        fun C(Other: Any): AutomationScreenshotOptions
        fun GetDefaultScreenshotOptionsForGameplay(Tolerance: String /* "Zero" | "Low" | "Medium" | "High" | "Custom" | "EComparisonTolerance_MAX" */, Delay: Number): AutomationScreenshotOptions
        fun GetDefaultScreenshotOptionsForRendering(Tolerance: String /* "Zero" | "Low" | "Medium" | "High" | "Custom" | "EComparisonTolerance_MAX" */, Delay: Number): AutomationScreenshotOptions
    }
}

external open class DebugFloatHistory {
    open var Samples: Array<Number>
    open var MaxSamples: Number
    open var MinValue: Number
    open var MaxValue: Number
    open var bAutoAdjustMinMax: Boolean
    open fun clone(): DebugFloatHistory

    companion object {
        fun C(Other: UObject): DebugFloatHistory
        fun C(Other: Any): DebugFloatHistory
        fun AddFloatHistorySample(Value: Number, FloatHistory: DebugFloatHistory): DebugFloatHistory
    }
}

external interface `T$428` {
    var Handle: TimerHandle
    var `$`: TimerHandle
}

external open class TimerHandle {
    open var Handle: Any
    open fun clone(): TimerHandle
    open fun K2_InvalidateTimerHandle(): `T$428`
    open fun K2_IsValidTimerHandle(): Boolean

    companion object {
        fun C(Other: UObject): TimerHandle
        fun C(Other: Any): TimerHandle
        fun K2_InvalidateTimerHandle(Handle: TimerHandle = definedExternally): `T$428`
        fun K2_IsValidTimerHandle(Handle: TimerHandle): Boolean
        fun K2_SetTimerDelegate(delegate: UnrealEngineDelegate<() -> Unit>, Time: Number, bLooping: Boolean, InitialStartDelay: Number, InitialStartDelayVariance: Number): TimerHandle
    }
}

external object EQuitPreference {
    var Quit: String /* "Quit" */
    var Background: String /* "Background" */
    var EQuitPreference_MAX: String /* "EQuitPreference_MAX" */
}

external open class TextureRenderTarget : Texture {
    constructor()
    constructor(Outer: UObject)
    open var TargetGamma: Number

    companion object {
        fun Load(ResourceName: String): TextureRenderTarget
        fun Find(Outer: UObject, ResourceName: String): TextureRenderTarget
        fun GetDefaultObject(): TextureRenderTarget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureRenderTarget
        fun C(Other: UObject): TextureRenderTarget
        fun C(Other: Any): TextureRenderTarget
    }
}

external object ETextureRenderTargetFormat {
    var RTF_R8: String /* "RTF_R8" */
    var RTF_RG8: String /* "RTF_RG8" */
    var RTF_RGBA8: String /* "RTF_RGBA8" */
    var RTF_R16f: String /* "RTF_R16f" */
    var RTF_RG16f: String /* "RTF_RG16f" */
    var RTF_RGBA16f: String /* "RTF_RGBA16f" */
    var RTF_R32f: String /* "RTF_R32f" */
    var RTF_RG32f: String /* "RTF_RG32f" */
    var RTF_RGBA32f: String /* "RTF_RGBA32f" */
    var RTF_RGB10A2: String /* "RTF_RGB10A2" */
    var RTF_MAX: String /* "RTF_MAX" */
}

external object EPixelFormat {
    var PF_Unknown: String /* "PF_Unknown" */
    var PF_A32B32G32R32F: String /* "PF_A32B32G32R32F" */
    var PF_B8G8R8A8: String /* "PF_B8G8R8A8" */
    var PF_G8: String /* "PF_G8" */
    var PF_G16: String /* "PF_G16" */
    var PF_DXT1: String /* "PF_DXT1" */
    var PF_DXT3: String /* "PF_DXT3" */
    var PF_DXT5: String /* "PF_DXT5" */
    var PF_UYVY: String /* "PF_UYVY" */
    var PF_FloatRGB: String /* "PF_FloatRGB" */
    var PF_FloatRGBA: String /* "PF_FloatRGBA" */
    var PF_DepthStencil: String /* "PF_DepthStencil" */
    var PF_ShadowDepth: String /* "PF_ShadowDepth" */
    var PF_R32_FLOAT: String /* "PF_R32_FLOAT" */
    var PF_G16R16: String /* "PF_G16R16" */
    var PF_G16R16F: String /* "PF_G16R16F" */
    var PF_G16R16F_FILTER: String /* "PF_G16R16F_FILTER" */
    var PF_G32R32F: String /* "PF_G32R32F" */
    var PF_A2B10G10R10: String /* "PF_A2B10G10R10" */
    var PF_A16B16G16R16: String /* "PF_A16B16G16R16" */
    var PF_D24: String /* "PF_D24" */
    var PF_R16F: String /* "PF_R16F" */
    var PF_R16F_FILTER: String /* "PF_R16F_FILTER" */
    var PF_BC5: String /* "PF_BC5" */
    var PF_V8U8: String /* "PF_V8U8" */
    var PF_A1: String /* "PF_A1" */
    var PF_FloatR11G11B10: String /* "PF_FloatR11G11B10" */
    var PF_A8: String /* "PF_A8" */
    var PF_R32_UINT: String /* "PF_R32_UINT" */
    var PF_R32_SINT: String /* "PF_R32_SINT" */
    var PF_PVRTC2: String /* "PF_PVRTC2" */
    var PF_PVRTC4: String /* "PF_PVRTC4" */
    var PF_R16_UINT: String /* "PF_R16_UINT" */
    var PF_R16_SINT: String /* "PF_R16_SINT" */
    var PF_R16G16B16A16_UINT: String /* "PF_R16G16B16A16_UINT" */
    var PF_R16G16B16A16_SINT: String /* "PF_R16G16B16A16_SINT" */
    var PF_R5G6B5_UNORM: String /* "PF_R5G6B5_UNORM" */
    var PF_R8G8B8A8: String /* "PF_R8G8B8A8" */
    var PF_A8R8G8B8: String /* "PF_A8R8G8B8" */
    var PF_BC4: String /* "PF_BC4" */
    var PF_R8G8: String /* "PF_R8G8" */
    var PF_ATC_RGB: String /* "PF_ATC_RGB" */
    var PF_ATC_RGBA_E: String /* "PF_ATC_RGBA_E" */
    var PF_ATC_RGBA_I: String /* "PF_ATC_RGBA_I" */
    var PF_X24_G8: String /* "PF_X24_G8" */
    var PF_ETC1: String /* "PF_ETC1" */
    var PF_ETC2_RGB: String /* "PF_ETC2_RGB" */
    var PF_ETC2_RGBA: String /* "PF_ETC2_RGBA" */
    var PF_R32G32B32A32_UINT: String /* "PF_R32G32B32A32_UINT" */
    var PF_R16G16_UINT: String /* "PF_R16G16_UINT" */
    var PF_ASTC_4x4: String /* "PF_ASTC_4x4" */
    var PF_ASTC_6x6: String /* "PF_ASTC_6x6" */
    var PF_ASTC_8x8: String /* "PF_ASTC_8x8" */
    var PF_ASTC_10x10: String /* "PF_ASTC_10x10" */
    var PF_ASTC_12x12: String /* "PF_ASTC_12x12" */
    var PF_BC6H: String /* "PF_BC6H" */
    var PF_BC7: String /* "PF_BC7" */
    var PF_R8_UINT: String /* "PF_R8_UINT" */
    var PF_L8: String /* "PF_L8" */
    var PF_XGXR8: String /* "PF_XGXR8" */
    var PF_R8G8B8A8_UINT: String /* "PF_R8G8B8A8_UINT" */
    var PF_R8G8B8A8_SNORM: String /* "PF_R8G8B8A8_SNORM" */
    var PF_R16G16B16A16_UNORM: String /* "PF_R16G16B16A16_UNORM" */
    var PF_R16G16B16A16_SNORM: String /* "PF_R16G16B16A16_SNORM" */
    var PF_PLATFORM_HDR_0: String /* "PF_PLATFORM_HDR_0" */
    var PF_PLATFORM_HDR_1: String /* "PF_PLATFORM_HDR_1" */
    var PF_PLATFORM_HDR_2: String /* "PF_PLATFORM_HDR_2" */
    var PF_NV12: String /* "PF_NV12" */
    var PF_R32G32_UINT: String /* "PF_R32G32_UINT" */
    var PF_MAX: String /* "PF_MAX" */
}

external open class TextureRenderTarget2D : TextureRenderTarget {
    constructor()
    constructor(Outer: UObject)
    open var SizeX: Number
    open var SizeY: Number
    open var ClearColor: LinearColor
    open var AddressX: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var AddressY: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var bForceLinearGamma: Boolean
    open var bHDR: Boolean
    open var bGPUSharedFlag: Boolean
    open var RenderTargetFormat: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */
    open var bAutoGenerateMips: Boolean
    open var MipsSamplerFilter: String /* "TF_Nearest" | "TF_Bilinear" | "TF_Trilinear" | "TF_Default" | "TF_MAX" */
    open var MipsAddressU: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var MipsAddressV: String /* "TA_Wrap" | "TA_Clamp" | "TA_Mirror" | "TA_MAX" */
    open var OverrideFormat: String /* "PF_Unknown" | "PF_A32B32G32R32F" | "PF_B8G8R8A8" | "PF_G8" | "PF_G16" | "PF_DXT1" | "PF_DXT3" | "PF_DXT5" | "PF_UYVY" | "PF_FloatRGB" | "PF_FloatRGBA" | "PF_DepthStencil" | "PF_ShadowDepth" | "PF_R32_FLOAT" | "PF_G16R16" | "PF_G16R16F" | "PF_G16R16F_FILTER" | "PF_G32R32F" | "PF_A2B10G10R10" | "PF_A16B16G16R16" | "PF_D24" | "PF_R16F" | "PF_R16F_FILTER" | "PF_BC5" | "PF_V8U8" | "PF_A1" | "PF_FloatR11G11B10" | "PF_A8" | "PF_R32_UINT" | "PF_R32_SINT" | "PF_PVRTC2" | "PF_PVRTC4" | "PF_R16_UINT" | "PF_R16_SINT" | "PF_R16G16B16A16_UINT" | "PF_R16G16B16A16_SINT" | "PF_R5G6B5_UNORM" | "PF_R8G8B8A8" | "PF_A8R8G8B8" | "PF_BC4" | "PF_R8G8" | "PF_ATC_RGB" | "PF_ATC_RGBA_E" | "PF_ATC_RGBA_I" | "PF_X24_G8" | "PF_ETC1" | "PF_ETC2_RGB" | "PF_ETC2_RGBA" | "PF_R32G32B32A32_UINT" | "PF_R16G16_UINT" | "PF_ASTC_4x4" | "PF_ASTC_6x6" | "PF_ASTC_8x8" | "PF_ASTC_10x10" | "PF_ASTC_12x12" | "PF_BC6H" | "PF_BC7" | "PF_R8_UINT" | "PF_L8" | "PF_XGXR8" | "PF_R8G8B8A8_UINT" | "PF_R8G8B8A8_SNORM" | "PF_R16G16B16A16_UNORM" | "PF_R16G16B16A16_SNORM" | "PF_PLATFORM_HDR_0" | "PF_PLATFORM_HDR_1" | "PF_PLATFORM_HDR_2" | "PF_NV12" | "PF_R32G32_UINT" | "PF_MAX" */
    open fun ReleaseRenderTarget2D()
    open fun RenderTargetCreateStaticTexture2DEditorOnly(Name: String, CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_MAX" */, MipSettings: String /* "TMGS_FromTextureGroup" | "TMGS_SimpleAverage" | "TMGS_Sharpen0" | "TMGS_Sharpen1" | "TMGS_Sharpen2" | "TMGS_Sharpen3" | "TMGS_Sharpen4" | "TMGS_Sharpen5" | "TMGS_Sharpen6" | "TMGS_Sharpen7" | "TMGS_Sharpen8" | "TMGS_Sharpen9" | "TMGS_Sharpen10" | "TMGS_NoMipmaps" | "TMGS_LeaveExistingMips" | "TMGS_Blur1" | "TMGS_Blur2" | "TMGS_Blur3" | "TMGS_Blur4" | "TMGS_Blur5" | "TMGS_Unfiltered" | "TMGS_MAX" */): Texture2D

    companion object {
        fun Load(ResourceName: String): TextureRenderTarget2D
        fun Find(Outer: UObject, ResourceName: String): TextureRenderTarget2D
        fun GetDefaultObject(): TextureRenderTarget2D
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureRenderTarget2D
        fun C(Other: UObject): TextureRenderTarget2D
        fun C(Other: Any): TextureRenderTarget2D
        fun ReleaseRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D)
        fun RenderTargetCreateStaticTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D, Name: String, CompressionSettings: String /* "TC_Default" | "TC_Normalmap" | "TC_Masks" | "TC_Grayscale" | "TC_Displacementmap" | "TC_VectorDisplacementmap" | "TC_HDR" | "TC_EditorIcon" | "TC_Alpha" | "TC_DistanceFieldFont" | "TC_HDR_Compressed" | "TC_BC7" | "TC_MAX" */, MipSettings: String /* "TMGS_FromTextureGroup" | "TMGS_SimpleAverage" | "TMGS_Sharpen0" | "TMGS_Sharpen1" | "TMGS_Sharpen2" | "TMGS_Sharpen3" | "TMGS_Sharpen4" | "TMGS_Sharpen5" | "TMGS_Sharpen6" | "TMGS_Sharpen7" | "TMGS_Sharpen8" | "TMGS_Sharpen9" | "TMGS_Sharpen10" | "TMGS_NoMipmaps" | "TMGS_LeaveExistingMips" | "TMGS_Blur1" | "TMGS_Blur2" | "TMGS_Blur3" | "TMGS_Blur4" | "TMGS_Blur5" | "TMGS_Unfiltered" | "TMGS_MAX" */): Texture2D
    }
}

external open class DrawToRenderTargetContext {
    open var RenderTarget: TextureRenderTarget2D
    open fun clone(): DrawToRenderTargetContext

    companion object {
        fun C(Other: UObject): DrawToRenderTargetContext
        fun C(Other: Any): DrawToRenderTargetContext
    }
}

external open class PredictProjectilePathParams {
    open var StartLocation: Vector
    open var LaunchVelocity: Vector
    open var bTraceWithCollision: Boolean
    open var ProjectileRadius: Number
    open var MaxSimTime: Number
    open var bTraceWithChannel: Boolean
    open var TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */
    open var ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>
    open var ActorsToIgnore: Array<Actor>
    open var SimFrequency: Number
    open var OverrideGravityZ: Number
    open var DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */
    open var DrawDebugTime: Number
    open var bTraceComplex: Boolean
    open fun clone(): PredictProjectilePathParams

    companion object {
        fun C(Other: UObject): PredictProjectilePathParams
        fun C(Other: Any): PredictProjectilePathParams
    }
}

external open class PredictProjectilePathPointData {
    open var Location: Vector
    open var Velocity: Vector
    open var Time: Number
    open fun clone(): PredictProjectilePathPointData

    companion object {
        fun C(Other: UObject): PredictProjectilePathPointData
        fun C(Other: Any): PredictProjectilePathPointData
    }
}

external open class PredictProjectilePathResult {
    open var PathData: Array<PredictProjectilePathPointData>
    open var LastTraceDestination: PredictProjectilePathPointData
    open var HitResult: HitResult
    open fun clone(): PredictProjectilePathResult

    companion object {
        fun C(Other: UObject): PredictProjectilePathResult
        fun C(Other: Any): PredictProjectilePathResult
    }
}

external object ESuggestProjVelocityTraceOption {
    var DoNotTrace: String /* "DoNotTrace" */
    var TraceFullPath: String /* "TraceFullPath" */
    var OnlyTraceWhileAscending: String /* "OnlyTraceWhileAscending" */
    var ESuggestProjVelocityTraceOption_MAX: String /* "ESuggestProjVelocityTraceOption_MAX" */
}

external object EMouseCaptureMode {
    var NoCapture: String /* "NoCapture" */
    var CapturePermanently: String /* "CapturePermanently" */
    var CapturePermanently_IncludingInitialMouseDown: String /* "CapturePermanently_IncludingInitialMouseDown" */
    var CaptureDuringMouseDown: String /* "CaptureDuringMouseDown" */
    var CaptureDuringRightMouseDown: String /* "CaptureDuringRightMouseDown" */
    var EMouseCaptureMode_MAX: String /* "EMouseCaptureMode_MAX" */
}

external object EGrammaticalGender {
    var Neuter: String /* "Neuter" */
    var Masculine: String /* "Masculine" */
    var Feminine: String /* "Feminine" */
    var Mixed: String /* "Mixed" */
    var EGrammaticalGender_MAX: String /* "EGrammaticalGender_MAX" */
}

external object EGrammaticalNumber {
    var Singular: String /* "Singular" */
    var Plural: String /* "Plural" */
    var EGrammaticalNumber_MAX: String /* "EGrammaticalNumber_MAX" */
}

external open class DialogueVoice : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Gender: String /* "Neuter" | "Masculine" | "Feminine" | "Mixed" | "EGrammaticalGender_MAX" */
    open var Plurality: String /* "Singular" | "Plural" | "EGrammaticalNumber_MAX" */
    open var LocalizationGUID: Guid

    companion object {
        fun Load(ResourceName: String): DialogueVoice
        fun Find(Outer: UObject, ResourceName: String): DialogueVoice
        fun GetDefaultObject(): DialogueVoice
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DialogueVoice
        fun C(Other: UObject): DialogueVoice
        fun C(Other: Any): DialogueVoice
    }
}

external open class DialogueContext {
    open var Speaker: DialogueVoice
    open var Targets: Array<DialogueVoice>
    open fun clone(): DialogueContext

    companion object {
        fun C(Other: UObject): DialogueContext
        fun C(Other: Any): DialogueContext
    }
}

external open class DialogueSoundWaveProxy : SoundBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DialogueSoundWaveProxy
        fun Find(Outer: UObject, ResourceName: String): DialogueSoundWaveProxy
        fun GetDefaultObject(): DialogueSoundWaveProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DialogueSoundWaveProxy
        fun C(Other: UObject): DialogueSoundWaveProxy
        fun C(Other: Any): DialogueSoundWaveProxy
    }
}

external open class DialogueContextMapping {
    open var Context: DialogueContext
    open var SoundWave: SoundWave
    open var LocalizationKeyFormat: String
    open var Proxy: DialogueSoundWaveProxy
    open fun clone(): DialogueContextMapping

    companion object {
        fun C(Other: UObject): DialogueContextMapping
        fun C(Other: Any): DialogueContextMapping
    }
}

external open class DialogueWave : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bMature: Boolean
    open var bOverride_SubtitleOverride: Boolean
    open var SpokenText: String
    open var SubtitleOverride: String
    open var VoiceActorDirection: String
    open var ContextMappings: Array<DialogueContextMapping>
    open var LocalizationGUID: Guid
    open fun SpawnDialogueAttached(Context: DialogueContext, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent

    companion object {
        fun Load(ResourceName: String): DialogueWave
        fun Find(Outer: UObject, ResourceName: String): DialogueWave
        fun GetDefaultObject(): DialogueWave
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DialogueWave
        fun C(Other: UObject): DialogueWave
        fun C(Other: Any): DialogueWave
        fun SpawnDialogueAttached(Dialogue: DialogueWave, Context: DialogueContext, AttachToComponent: SceneComponent, AttachPointName: String, Location: Vector, Rotation: Rotator, LocationType: String /* "KeepRelativeOffset" | "KeepWorldPosition" | "SnapToTarget" | "SnapToTargetIncludingScale" | "EAttachLocation_MAX" */, bStopWhenAttachedToDestroyed: Boolean, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent
    }
}

external object EFFTSize {
    var DefaultSize: String /* "DefaultSize" */
    var Min: String /* "Min" */
    var Small: String /* "Small" */
    var Medium: String /* "Medium" */
    var Large: String /* "Large" */
    var Max: String /* "Max" */
    var EFFTSize_MAX: String /* "EFFTSize_MAX" */
}

external object EFFTPeakInterpolationMethod {
    var NearestNeighbor: String /* "NearestNeighbor" */
    var Linear: String /* "Linear" */
    var Quadratic: String /* "Quadratic" */
    var EFFTPeakInterpolationMethod_MAX: String /* "EFFTPeakInterpolationMethod_MAX" */
}

external object EFFTWindowType {
    var None: String /* "None" */
    var Hamming: String /* "Hamming" */
    var Hann: String /* "Hann" */
    var Blackman: String /* "Blackman" */
    var EFFTWindowType_MAX: String /* "EFFTWindowType_MAX" */
}

external interface `T$429` {
    var OutActors: Array<Actor>
}

external interface `T$430` {
    var OutHitResults: Array<ARTraceResult>
    var `$`: Boolean
}

external interface `T$431` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$432` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$433` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$434` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$435` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$436` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$437` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$438` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$439` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$440` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$441` {
    var Handle: TimerHandle
}

external interface `T$442` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$443` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$444` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$445` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$446` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$447` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$448` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$449` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$450` {
    var Canvas: Canvas
    var Size: Vector2D
    var Context: DrawToRenderTargetContext
}

external interface `T$451` {
    var OutRectCenter: Vector
    var OutRectRotation: Rotator
    var OutSideLengthX: Number
    var OutSideLengthY: Number
}

external interface `T$452` {
    var PredictResult: PredictProjectilePathResult
    var `$`: Boolean
}

external interface `T$453` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$454` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$455` {
    var TossVelocity: Vector
    var `$`: Boolean
}

external interface `T$456` {
    var Seconds: Number
    var PartialSeconds: Number
}

external interface `T$457` {
    var OutActors: Array<Actor>
}

external interface `T$458` {
    var OutActors: Array<Actor>
}

external interface `T$459` {
    var OutActors: Array<Actor>
}

external interface `T$460` {
    var OutActors: Array<Actor>
}

external interface `T$461` {
    var OutLaunchVelocity: Vector
    var `$`: Boolean
}

external interface `T$462` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$463` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$464` {
    var SafePadding: Vector4
    var SafePaddingScale: Vector2D
    var SpillOverPadding: Vector4
}

external interface `T$465` {
    var PixelPosition: Vector2D
    var ViewportPosition: Vector2D
}

external interface `T$466` {
    var ViewportPosition: Vector2D
}

external interface `T$467` {
    var AbsoluteCoordinate: Vector2D
}

external interface `T$468` {
    var LocalCoordinate: Vector2D
}

external interface `T$469` {
    var Magnitudes: Array<Number>
}

external interface `T$470` {
    var Phases: Array<Number>
}

external interface `T$471` {
    var OutActors: Array<Actor>
}

external interface `T$472` {
    var OutActors: Array<Actor>
}

external interface `T$473` {
    var OutHitResults: Array<ARTraceResult>
    var `$`: Boolean
}

external interface `T$474` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$475` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$476` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$477` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$478` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$479` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$480` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$481` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$482` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$483` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$484` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$485` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$486` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$487` {
    var OutActors: Array<Actor>
    var `$`: Boolean
}

external interface `T$488` {
    var OutComponents: Array<PrimitiveComponent>
    var `$`: Boolean
}

external interface `T$489` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$490` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$491` {
    var OutHits: Array<HitResult>
    var `$`: Boolean
}

external interface `T$492` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$493` {
    var OutHit: HitResult
    var OutPathPositions: Array<Vector>
    var OutLastTraceDestination: Vector
    var `$`: Boolean
}

external interface `T$494` {
    var OutActors: Array<Actor>
}

external interface `T$495` {
    var OutActors: Array<Actor>
}

external interface `T$496` {
    var OutActors: Array<Actor>
}

external interface `T$497` {
    var OutActors: Array<Actor>
}

external interface `T$498` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$499` {
    var FoundWidgets: Array<UserWidget>
}

external interface `T$500` {
    var Magnitudes: Array<Number>
}

external interface `T$501` {
    var Phases: Array<Number>
}

external interface `T$502` {
    var OutActors: Array<Actor>
}

external open class World : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Layers: Array<Layer>
    open var ActiveGroupActors: Array<Actor>
    open var ThumbnailInfo: ThumbnailInfo
    open var PersistentLevel: Level
    open var NetDriver: NetDriver
    open var LineBatcher: LineBatchComponent
    open var PersistentLineBatcher: LineBatchComponent
    open var ForegroundLineBatcher: LineBatchComponent
    open var NetworkManager: GameNetworkManager
    open var PhysicsCollisionHandler: PhysicsCollisionHandler
    open var ExtraReferencedObjects: Array<UObject>
    open var PerModuleDataObjects: Array<UObject>
    open var LevelSequenceActors: Array<Actor>
    open var StreamingLevels: Array<LevelStreaming>
    open var StreamingLevelsToConsider: StreamingLevelsToConsider
    open var StreamingLevelsPrefix: String
    open var CurrentLevelPendingVisibility: Level
    open var CurrentLevelPendingInvisibility: Level
    open var DemoNetDriver: DemoNetDriver
    open var MyParticleEventManager: ParticleEventManager
    open var DefaultPhysicsVolume: PhysicsVolume
    open var bAreConstraintsDirty: Boolean
    open var NavigationSystem: NavigationSystemBase
    open var AuthorityGameMode: GameModeBase
    open var GameState: GameStateBase
    open var AISystem: AISystemBase
    open var AvoidanceManager: AvoidanceManager
    open var Levels: Array<Level>
    open var LevelCollections: Array<LevelCollection>
    open var CurrentLevel: Level
    open var OwningGameInstance: GameInstance
    open var ParameterCollectionInstances: Array<MaterialParameterCollectionInstance>
    open var CanvasForRenderingToTarget: Canvas
    open var CanvasForDrawMaterialToRenderTarget: Canvas
    open var EditorViews: Array<LevelViewportInfo>
    open var ComponentsThatNeedEndOfFrameUpdate: Array<ActorComponent>
    open var ComponentsThatNeedEndOfFrameUpdate_OnGameThread: Array<ActorComponent>
    open var SelectedLevels: Array<Level>
    open var WorldComposition: WorldComposition
    open var PSCPool: WorldPSCPool
    open fun K2_GetWorldSettings(): WorldSettings
    open fun HandleTimelineScrubbed()
    open fun EditorDestroyActor(Actor: Actor, bShouldModifyLevel: Boolean): Boolean
    open fun ExportNavigation(Path: String): String
    open fun GetDefaultBrush(): Brush
    open fun InvalidateModelGeometry(InLevel: Level)
    open fun RemoveLevelInstance()
    open fun GetActors(ActorLayer: ActorLayer): Array<Actor>
    open fun BeginPlay()
    open fun DestroyWorld()
    open fun InitializeActorsForPlay(URL: URL)
    open fun GenerateNavigation(NavData: RecastNavMesh)
    open fun GetAllActorsOfClassAndTags(ActorClass: UnrealEngineClass, Tags_Accept: Array<String>, Tags_Deny: Array<String>, OutActors: Array<Actor> = definedExternally): `T$429`
    open fun GetLevels(): Array<Level>
    open fun GetModel(): Model
    open fun GetWorldBounds(): Box
    open fun IsGameWorld(): Boolean
    open fun IsPlayInEditor(): Boolean
    open fun IsPlayInPreview(): Boolean
    open fun LuminARLineTrace(ScreenPosition: Vector2D, TraceChannels: Any, OutHitResults: Array<ARTraceResult> = definedExternally): `T$430`
    open fun StartLuminARSession(LatentInfo: LatentActionInfo, Configuration: LuminARSessionConfig)
    open fun TraceChannelTestUtil(BatchOptions: TraceChannelTestBatchOptions, Start: Vector, End: Vector, SphereCapsuleRadius: Number, CapsuleHalfHeight: Number, BoxHalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, bIgnoreSelf: Boolean, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: Number): TraceQueryTestResults
    open fun RunAllFunctionalTests(bNewLog: Boolean, bRunLooped: Boolean, FailedTestsReproString: String): Boolean
    open fun AutomationWaitForLoading(LatentInfo: LatentActionInfo)
    open fun DisableStatGroup(GroupName: String)
    open fun EnableStatGroup(GroupName: String)
    open fun SetScalabilityQualityLevelRelativeToMax(Value: Number)
    open fun SetScalabilityQualityToEpic()
    open fun SetScalabilityQualityToLow()
    open fun TakeAutomationScreenshot(LatentInfo: LatentActionInfo, Name: String, Notes: String, Options: AutomationScreenshotOptions)
    open fun TakeAutomationScreenshotAtCamera(LatentInfo: LatentActionInfo, Camera: CameraActor, NameOverride: String, Notes: String, Options: AutomationScreenshotOptions)
    open fun TakeAutomationScreenshotOfUI(LatentInfo: LatentActionInfo, Name: String, Options: AutomationScreenshotOptions)
    open fun GetIsMyTurn(PlayerController: PlayerController, MatchID: String, bIsMyTurn: Boolean = definedExternally): `T$63`
    open fun GetMyPlayerIndex(PlayerController: PlayerController, MatchID: String, PlayerIndex: Number = definedExternally): `T$62`
    open fun GetPlayerDisplayName(PlayerController: PlayerController, MatchID: String, PlayerIndex: Number, PlayerDisplayName: String = definedExternally): `T$61`
    open fun RegisterTurnBasedMatchInterfaceObject(PlayerController: PlayerController, UObject: UObject)
    open fun GetCachedAchievementDescription(PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Title: String = definedExternally, LockedDescription: String = definedExternally, UnlockedDescription: String = definedExternally, bHidden: Boolean = definedExternally): `T$60`
    open fun GetCachedAchievementProgress(PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Progress: Number = definedExternally): `T$59`
    open fun CreateMoveToProxyObject(Pawn: Pawn, Destination: Vector, TargetActor: Actor, AcceptanceRadius: Number, bStopOnOverlap: Boolean): AIAsyncTaskBlueprintProxy
    open fun SpawnAIFromClass(PawnClass: UnrealEngineClass, BehaviorTree: BehaviorTree, Location: Vector, Rotation: Rotator, bNoCollisionFail: Boolean): Pawn
    open fun LogBox(BoxShape: Box, text: String, ObjectColor: LinearColor, LogCategory: String, bAddToMessageLog: Boolean)
    open fun LogLocation(Location: Vector, text: String, ObjectColor: LinearColor, Radius: Number, LogCategory: String, bAddToMessageLog: Boolean)
    open fun LogSegment(SegmentStart: Vector, SegmentEnd: Vector, text: String, ObjectColor: LinearColor, Thickness: Number, CategoryName: String, bAddToMessageLog: Boolean)
    open fun LogText(text: String, LogCategory: String, bAddToMessageLog: Boolean)
    open fun BoxOverlapActors(BoxPos: Vector, BoxExtent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$431`
    open fun BoxOverlapComponents(BoxPos: Vector, Extent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$432`
    open fun BoxTraceMulti(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$433`
    open fun BoxTraceMultiByProfile(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$434`
    open fun BoxTraceMultiForObjects(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$435`
    open fun BoxTraceSingle(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun BoxTraceSingleByProfile(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun BoxTraceSingleForObjects(Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun CapsuleOverlapActors(CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$436`
    open fun CapsuleOverlapComponents(CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$437`
    open fun CapsuleTraceMulti(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$438`
    open fun CapsuleTraceMultiByProfile(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$439`
    open fun CapsuleTraceMultiForObjects(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$440`
    open fun CapsuleTraceSingle(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun CapsuleTraceSingleByProfile(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun CapsuleTraceSingleForObjects(Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun Delay(Duration: Number, LatentInfo: LatentActionInfo)
    open fun DrawDebugArrow(LineStart: Vector, LineEnd: Vector, ArrowSize: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugBox(Center: Vector, Extent: Vector, LineColor: LinearColor, Rotation: Rotator, Duration: Number, Thickness: Number)
    open fun DrawDebugCapsule(Center: Vector, HalfHeight: Number, Radius: Number, Rotation: Rotator, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugCircle(Center: Vector, Radius: Number, NumSegments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number, YAxis: Vector, ZAxis: Vector, bDrawAxis: Boolean)
    open fun DrawDebugCone(Origin: Vector, Direction: Vector, Length: Number, AngleWidth: Number, AngleHeight: Number, NumSides: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugConeInDegrees(Origin: Vector, Direction: Vector, Length: Number, AngleWidth: Number, AngleHeight: Number, NumSides: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugCoordinateSystem(AxisLoc: Vector, AxisRot: Rotator, Scale: Number, Duration: Number, Thickness: Number)
    open fun DrawDebugCylinder(Start: Vector, End: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugFloatHistoryLocation(FloatHistory: DebugFloatHistory, DrawLocation: Vector, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
    open fun DrawDebugFloatHistoryTransform(FloatHistory: DebugFloatHistory, DrawTransform: Transform, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
    open fun DrawDebugFrustum(FrustumTransform: Transform, FrustumColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugLine(LineStart: Vector, LineEnd: Vector, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugPlane(PlaneCoordinates: Plane, Location: Vector, Size: Number, PlaneColor: LinearColor, Duration: Number)
    open fun DrawDebugPoint(Position: Vector, Size: Number, PointColor: LinearColor, Duration: Number)
    open fun DrawDebugSphere(Center: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
    open fun DrawDebugString(TextLocation: Vector, text: String, TestBaseActor: Actor, TextColor: LinearColor, Duration: Number)
    open fun ExecuteConsoleCommand(Command: String, SpecificPlayer: PlayerController)
    open fun FlushDebugStrings()
    open fun FlushPersistentDebugLines()
    open fun GetGameTimeInSeconds(): Number
    open fun IsDedicatedServer(): Boolean
    open fun IsServer(): Boolean
    open fun IsStandalone(): Boolean
    open fun K2_ClearAndInvalidateTimerHandle(Handle: TimerHandle = definedExternally): `T$441`
    open fun K2_ClearTimerHandle(Handle: TimerHandle)
    open fun K2_GetTimerElapsedTimeHandle(Handle: TimerHandle): Number
    open fun K2_GetTimerRemainingTimeHandle(Handle: TimerHandle): Number
    open fun K2_IsTimerActiveHandle(Handle: TimerHandle): Boolean
    open fun K2_IsTimerPausedHandle(Handle: TimerHandle): Boolean
    open fun K2_PauseTimerHandle(Handle: TimerHandle)
    open fun K2_TimerExistsHandle(Handle: TimerHandle): Boolean
    open fun K2_UnPauseTimerHandle(Handle: TimerHandle)
    open fun LineTraceMulti(Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$442`
    open fun LineTraceMultiByProfile(Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$443`
    open fun LineTraceMultiForObjects(Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$444`
    open fun LineTraceSingle(Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun LineTraceSingleByProfile(Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun LineTraceSingleForObjects(Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun LoadAsset(Asset: UObject, OnLoaded: UnrealEngineDelegate<(Loaded: UObject) -> Unit>, LatentInfo: LatentActionInfo)
    open fun LoadAssetClass(AssetClass: Class, OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) -> Unit>, LatentInfo: LatentActionInfo)
    open fun PrintString(inString: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number)
    open fun PrintText(InText: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number)
    open fun QuitGame(SpecificPlayer: PlayerController, QuitPreference: String /* "Quit" | "Background" | "EQuitPreference_MAX" */, bIgnorePlatformRestrictions: Boolean)
    open fun RetriggerableDelay(Duration: Number, LatentInfo: LatentActionInfo)
    open fun SetSuppressViewportTransitionMessage(bState: Boolean)
    open fun SphereOverlapActors(SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$445`
    open fun SphereOverlapComponents(SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$446`
    open fun SphereTraceMulti(Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$447`
    open fun SphereTraceMultiByProfile(Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$448`
    open fun SphereTraceMultiForObjects(Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$449`
    open fun SphereTraceSingle(Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun SphereTraceSingleByProfile(Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun SphereTraceSingleForObjects(Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
    open fun BeginDrawCanvasToRenderTarget(TextureRenderTarget: TextureRenderTarget2D, Canvas: Canvas = definedExternally, Size: Vector2D = definedExternally, Context: DrawToRenderTargetContext = definedExternally): `T$450`
    open fun ClearRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D, ClearColor: LinearColor)
    open fun ConvertRenderTargetToTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D, Texture: Texture2D)
    open fun CreateRenderTarget2D(Width: Number, Height: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor): TextureRenderTarget2D
    open fun DrawMaterialToRenderTarget(TextureRenderTarget: TextureRenderTarget2D, Material: MaterialInterface)
    open fun EndDrawCanvasToRenderTarget(Context: DrawToRenderTargetContext)
    open fun ExportRenderTarget(TextureRenderTarget: TextureRenderTarget2D, FilePath: String, Filename: String)
    open fun ExportTexture2D(Texture: Texture2D, FilePath: String, Filename: String)
    open fun ImportBufferAsTexture2D(Buffer: Array<Number>): Texture2D
    open fun ImportFileAsTexture2D(Filename: String): Texture2D
    open fun ReadRenderTargetPixel(TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number): Color
    open fun ReadRenderTargetRawPixel(TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number): LinearColor
    open fun ReadRenderTargetRawUV(TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number): LinearColor
    open fun ReadRenderTargetUV(TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number): Color
    open fun MinimumAreaRectangle(InVerts: Array<Vector>, SampleSurfaceNormal: Vector, OutRectCenter: Vector = definedExternally, OutRectRotation: Rotator = definedExternally, OutSideLengthX: Number = definedExternally, OutSideLengthY: Number = definedExternally, bDebugDraw: Boolean = definedExternally): `T$451`
    open fun CreateDynamicMaterialInstance(Parent: MaterialInterface, OptionalName: String): MaterialInstanceDynamic
    open fun GetScalarParameterValue(Collection: MaterialParameterCollection, ParameterName: String): Number
    open fun GetVectorParameterValue(Collection: MaterialParameterCollection, ParameterName: String): LinearColor
    open fun SetScalarParameterValue(Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: Number)
    open fun SetVectorParameterValue(Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: LinearColor)
    open fun ActivateReverbEffect(ReverbEffect: ReverbEffect, TagName: String, Priority: Number, Volume: Number, FadeTime: Number)
    open fun ApplyRadialDamage(BaseDamage: Number, Origin: Vector, DamageRadius: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, bDoFullDamage: Boolean, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
    open fun ApplyRadialDamageWithFalloff(BaseDamage: Number, MinimumDamage: Number, Origin: Vector, DamageInnerRadius: Number, DamageOuterRadius: Number, DamageFalloff: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
    open fun AreAnyListenersWithinRange(Location: Vector, MaximumRange: Number): Boolean
    open fun BeginDeferredActorSpawnFromClass(ActorClass: UnrealEngineClass, SpawnTransform: Transform, CollisionHandlingOverride: String /* "Undefined" | "AlwaysSpawn" | "AdjustIfPossibleButAlwaysSpawn" | "AdjustIfPossibleButDontSpawnIfColliding" | "DontSpawnIfColliding" | "ESpawnActorCollisionHandlingMethod_MAX" */, Owner: Actor): Actor
    open fun BeginSpawningActorFromBlueprint(Blueprint: Blueprint, SpawnTransform: Transform, bNoCollisionFail: Boolean): Actor
    open fun BeginSpawningActorFromClass(ActorClass: UnrealEngineClass, SpawnTransform: Transform, bNoCollisionFail: Boolean, Owner: Actor): Actor
    open fun Blueprint_PredictProjectilePath_Advanced(PredictParams: PredictProjectilePathParams, PredictResult: PredictProjectilePathResult = definedExternally): `T$452`
    open fun Blueprint_PredictProjectilePath_ByObjectType(OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */> = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$453`
    open fun Blueprint_PredictProjectilePath_ByTraceChannel(OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */ = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$454`
    open fun BlueprintSuggestProjectileVelocity(TossVelocity: Vector = definedExternally, StartLocation: Vector = definedExternally, EndLocation: Vector = definedExternally, LaunchSpeed: Number = definedExternally, OverrideGravityZ: Number = definedExternally, TraceOption: String /* "DoNotTrace" | "TraceFullPath" | "OnlyTraceWhileAscending" | "ESuggestProjVelocityTraceOption_MAX" */ = definedExternally, CollisionRadius: Number = definedExternally, bFavorHighArc: Boolean = definedExternally, bDrawDebug: Boolean = definedExternally): `T$455`
    open fun ClearSoundMixClassOverride(InSoundMixModifier: SoundMix, InSoundClass: SoundClass, FadeOutTime: Number)
    open fun ClearSoundMixModifiers()
    open fun CreatePlayer(ControllerId: Number, bSpawnPlayerController: Boolean): PlayerController
    open fun CreateSound2D(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
    open fun DeactivateReverbEffect(TagName: String)
    open fun FlushLevelStreaming()
    open fun GetAccurateRealTime(Seconds: Number = definedExternally, PartialSeconds: Number = definedExternally): `T$456`
    open fun GetActorOfClass(ActorClass: UnrealEngineClass): Actor
    open fun GetAllActorsOfClass(ActorClass: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$457`
    open fun GetAllActorsOfClassWithTag(ActorClass: UnrealEngineClass, Tag: String, OutActors: Array<Actor> = definedExternally): `T$458`
    open fun GetAllActorsWithInterface(Interface: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$459`
    open fun GetAllActorsWithTag(Tag: String, OutActors: Array<Actor> = definedExternally): `T$460`
    open fun GetAudioTimeSeconds(): Number
    open fun GetCurrentLevelName(bRemovePrefixString: Boolean): String
    open fun GetCurrentReverbEffect(): ReverbEffect
    open fun GetEnableWorldRendering(): Boolean
    open fun GetGameInstance(): GameInstance
    open fun GetGameMode(): GameModeBase
    open fun GetGameState(): GameStateBase
    open fun GetGlobalTimeDilation(): Number
    open fun GetMaxAudioChannelCount(): Number
    open fun GetPlayerCameraManager(PlayerIndex: Number): PlayerCameraManager
    open fun GetPlayerCharacter(PlayerIndex: Number): Character
    open fun GetPlayerController(PlayerIndex: Number): PlayerController
    open fun GetPlayerControllerFromID(ControllerId: Number): PlayerController
    open fun GetPlayerPawn(PlayerIndex: Number): Pawn
    open fun GetRealTimeSeconds(): Number
    open fun GetStreamingLevel(PackageName: String): LevelStreaming
    open fun GetTimeSeconds(): Number
    open fun GetUnpausedTimeSeconds(): Number
    open fun GetViewportMouseCaptureMode(): String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */
    open fun GetWorldDeltaSeconds(): Number
    open fun GetWorldOriginLocation(): IntVector
    open fun GrassOverlappingSphereCount(StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
    open fun IsGamePaused(): Boolean
    open fun LoadStreamLevel(LevelName: String, bMakeVisibleAfterLoad: Boolean, bShouldBlockOnLoad: Boolean, LatentInfo: LatentActionInfo)
    open fun OpenLevel(LevelName: String, bAbsolute: Boolean, Options: String)
    open fun PlayDialogue2D(Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number)
    open fun PlayDialogueAtLocation(Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation)
    open fun PlaySound2D(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, OwningActor: Actor)
    open fun PlaySoundAtLocation(Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, OwningActor: Actor)
    open fun PlayWorldCameraShake(Shake: UnrealEngineClass, Epicenter: Vector, InnerRadius: Number, OuterRadius: Number, Falloff: Number, bOrientShakeTowardsEpicenter: Boolean)
    open fun PopSoundMixModifier(InSoundMixModifier: SoundMix)
    open fun PushSoundMixModifier(InSoundMixModifier: SoundMix)
    open fun RebaseLocalOriginOntoZero(WorldLocation: Vector): Vector
    open fun RebaseZeroOriginOntoLocal(WorldLocation: Vector): Vector
    open fun SetBaseSoundMix(InSoundMix: SoundMix)
    open fun SetEnableWorldRendering(bEnable: Boolean)
    open fun SetGamePaused(bPaused: Boolean): Boolean
    open fun SetGlobalListenerFocusParameters(FocusAzimuthScale: Number, NonFocusAzimuthScale: Number, FocusDistanceScale: Number, NonFocusDistanceScale: Number, FocusVolumeScale: Number, NonFocusVolumeScale: Number, FocusPriorityScale: Number, NonFocusPriorityScale: Number)
    open fun SetGlobalPitchModulation(PitchModulation: Number, TimeSec: Number)
    open fun SetGlobalTimeDilation(TimeDilation: Number)
    open fun SetMaxAudioChannelsScaled(MaxChannelCountScale: Number)
    open fun SetSoundMixClassOverride(InSoundMixModifier: SoundMix, InSoundClass: SoundClass, Volume: Number, Pitch: Number, FadeInTime: Number, bApplyToChildren: Boolean)
    open fun SetViewportMouseCaptureMode(MouseCaptureMode: String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */)
    open fun SetWorldOriginLocation(NewLocation: IntVector)
    open fun SpawnDecalAtLocation(DecalMaterial: MaterialInterface, DecalSize: Vector, Location: Vector, Rotation: Rotator, LifeSpan: Number): DecalComponent
    open fun SpawnDialogue2D(Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, bAutoDestroy: Boolean): AudioComponent
    open fun SpawnDialogueAtLocation(Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent
    open fun SpawnEmitterAtLocation(EmitterTemplate: ParticleSystem, Location: Vector, Rotation: Rotator, Scale: Vector, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */): ParticleSystemComponent
    open fun SpawnForceFeedbackAtLocation(ForceFeedbackEffect: ForceFeedbackEffect, Location: Vector, Rotation: Rotator, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent
    open fun SpawnSound2D(Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
    open fun SpawnSoundAtLocation(Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent
    open fun SuggestProjectileVelocity_CustomArc(OutLaunchVelocity: Vector = definedExternally, StartPos: Vector = definedExternally, EndPos: Vector = definedExternally, OverrideGravityZ: Number = definedExternally, ArcParam: Number = definedExternally): `T$461`
    open fun UnloadStreamLevel(LevelName: String, LatentInfo: LatentActionInfo, bShouldBlockOnUnload: Boolean)
    open fun FoliageOverlappingBoxCount(StaticMesh: StaticMesh, Box: Box): Number
    open fun FoliageOverlappingSphereCount(StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
    open fun GetMousePositionOnViewport(): Vector2D
    open fun GetViewportScale(): Number
    open fun GetViewportSize(): Vector2D
    open fun GetViewportWidgetGeometry(): Geometry
    open fun RemoveAllWidgets()
    open fun Create(WidgetType: UnrealEngineClass, OwningPlayer: PlayerController): UserWidget
    open fun GetAllWidgetsOfClass(FoundWidgets: Array<UserWidget> = definedExternally, WidgetClass: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$462`
    open fun GetAllWidgetsWithInterface(FoundWidgets: Array<UserWidget> = definedExternally, Interface: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$463`
    open fun GetSafeZonePadding(SafePadding: Vector4 = definedExternally, SafePaddingScale: Vector2D = definedExternally, SpillOverPadding: Vector4 = definedExternally): `T$464`
    open fun SetHardwareCursor(CursorShape: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */, CursorName: String, HotSpot: Vector2D): Boolean
    open fun AbsoluteToViewport(AbsoluteDesktopCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$465`
    open fun LocalToViewport(Geometry: Geometry, LocalCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$465`
    open fun ScreenToViewport(ScreenPosition: Vector2D, ViewportPosition: Vector2D = definedExternally): `T$466`
    open fun ScreenToWidgetAbsolute(ScreenPosition: Vector2D, AbsoluteCoordinate: Vector2D = definedExternally): `T$467`
    open fun ScreenToWidgetLocal(Geometry: Geometry, ScreenPosition: Vector2D, LocalCoordinate: Vector2D = definedExternally): `T$468`
    open fun AddMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun AddSourceEffectToPresetChain(PresetChain: SoundEffectSourcePresetChain, Entry: SourceEffectChainEntry)
    open fun ClearMasterSubmixEffects()
    open fun GetMagnitudeForFrequencies(Frequencies: Array<Number>, Magnitudes: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$469`
    open fun GetNumberOfEntriesInSourceEffectChain(PresetChain: SoundEffectSourcePresetChain): Number
    open fun GetPhaseForFrequencies(Frequencies: Array<Number>, Phases: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$470`
    open fun PauseRecordingOutput(SubmixToPause: SoundSubmix)
    open fun RemoveMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset)
    open fun RemoveSourceEffectFromPresetChain(PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number)
    open fun ResumeRecordingOutput(SubmixToPause: SoundSubmix)
    open fun SetBypassSourceEffectChainEntry(PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number, bBypassed: Boolean)
    open fun StartAnalyzingOutput(SubmixToAnalyze: SoundSubmix, FFTSize: String /* "DefaultSize" | "Min" | "Small" | "Medium" | "Large" | "Max" | "EFFTSize_MAX" */, InterpolationMethod: String /* "NearestNeighbor" | "Linear" | "Quadratic" | "EFFTPeakInterpolationMethod_MAX" */, WindowType: String /* "None" | "Hamming" | "Hann" | "Blackman" | "EFFTWindowType_MAX" */, HopSize: Number)
    open fun StartRecordingOutput(ExpectedDuration: Number, SubmixToRecord: SoundSubmix)
    open fun StopAnalyzingOutput(SubmixToStopAnalyzing: SoundSubmix)
    open fun StopRecordingOutput(ExportType: String /* "SoundWave" | "WavFile" | "EAudioRecordingExportType_MAX" */, Name: String, Path: String, SubmixToRecord: SoundSubmix, ExistingSoundWaveToOverwrite: SoundWave): SoundWave
    open fun GetDeviceWorldPose(XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, Position: Vector = definedExternally): `T$420`
    open fun GetTrackingToWorldTransform(): Transform
    open fun GetWorldToMetersScale(): Number
    open fun SetWorldToMetersScale(NewScale: Number)
    open fun GetAllActorsOfClassMatchingTagQuery(ActorClass: UnrealEngineClass, GameplayTagQuery: GameplayTagQuery, OutActors: Array<Actor> = definedExternally): `T$471`

    companion object {
        fun Load(ResourceName: String): World
        fun Find(Outer: UObject, ResourceName: String): World
        fun GetDefaultObject(): World
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): World
        fun C(Other: UObject): World
        fun C(Other: Any): World
        fun EditorDestroyActor(World: World, Actor: Actor, bShouldModifyLevel: Boolean): Boolean
        fun ExportNavigation(InWorld: World, Path: String): String
        fun GetDefaultBrush(World: World): Brush
        fun InvalidateModelGeometry(World: World, InLevel: Level)
        fun RemoveLevelInstance(World: World)
        fun GetActors(WorldContextObject: UObject, ActorLayer: ActorLayer): Array<Actor>
        fun BeginPlay(World: World)
        fun DestroyWorld(World: World)
        fun InitializeActorsForPlay(World: World, URL: URL)
        fun GenerateNavigation(InWorld: World, NavData: RecastNavMesh)
        fun GetAllActorsOfClassAndTags(WorldContextObject: UObject, ActorClass: UnrealEngineClass, Tags_Accept: Array<String>, Tags_Deny: Array<String>, OutActors: Array<Actor> = definedExternally): `T$472`
        fun GetLevels(World: World): Array<Level>
        fun GetModel(World: World): Model
        fun GetWorldBounds(InWorld: World): Box
        fun IsGameWorld(World: World): Boolean
        fun IsPlayInEditor(World: World): Boolean
        fun IsPlayInPreview(World: World): Boolean
        fun LuminARLineTrace(WorldContextObject: UObject, ScreenPosition: Vector2D, TraceChannels: Any, OutHitResults: Array<ARTraceResult> = definedExternally): `T$473`
        fun StartLuminARSession(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Configuration: LuminARSessionConfig)
        fun TraceChannelTestUtil(WorldContextObject: UObject, BatchOptions: TraceChannelTestBatchOptions, Start: Vector, End: Vector, SphereCapsuleRadius: Number, CapsuleHalfHeight: Number, BoxHalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, bIgnoreSelf: Boolean, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: Number): TraceQueryTestResults
        fun RunAllFunctionalTests(WorldContextObject: UObject, bNewLog: Boolean, bRunLooped: Boolean, FailedTestsReproString: String): Boolean
        fun AutomationWaitForLoading(WorldContextObject: UObject, LatentInfo: LatentActionInfo)
        fun DisableStatGroup(WorldContextObject: UObject, GroupName: String)
        fun EnableStatGroup(WorldContextObject: UObject, GroupName: String)
        fun SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject, Value: Number)
        fun SetScalabilityQualityToEpic(WorldContextObject: UObject)
        fun SetScalabilityQualityToLow(WorldContextObject: UObject)
        fun TakeAutomationScreenshot(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Name: String, Notes: String, Options: AutomationScreenshotOptions)
        fun TakeAutomationScreenshotAtCamera(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Camera: CameraActor, NameOverride: String, Notes: String, Options: AutomationScreenshotOptions)
        fun TakeAutomationScreenshotOfUI(WorldContextObject: UObject, LatentInfo: LatentActionInfo, Name: String, Options: AutomationScreenshotOptions)
        fun GetIsMyTurn(WorldContextObject: UObject, PlayerController: PlayerController, MatchID: String, bIsMyTurn: Boolean = definedExternally): `T$63`
        fun GetMyPlayerIndex(WorldContextObject: UObject, PlayerController: PlayerController, MatchID: String, PlayerIndex: Number = definedExternally): `T$62`
        fun GetPlayerDisplayName(WorldContextObject: UObject, PlayerController: PlayerController, MatchID: String, PlayerIndex: Number, PlayerDisplayName: String = definedExternally): `T$61`
        fun RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject, PlayerController: PlayerController, UObject: UObject)
        fun GetCachedAchievementDescription(WorldContextObject: UObject, PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Title: String = definedExternally, LockedDescription: String = definedExternally, UnlockedDescription: String = definedExternally, bHidden: Boolean = definedExternally): `T$60`
        fun GetCachedAchievementProgress(WorldContextObject: UObject, PlayerController: PlayerController, AchievementID: String, bFoundID: Boolean = definedExternally, Progress: Number = definedExternally): `T$59`
        fun CreateMoveToProxyObject(WorldContextObject: UObject, Pawn: Pawn, Destination: Vector, TargetActor: Actor, AcceptanceRadius: Number, bStopOnOverlap: Boolean): AIAsyncTaskBlueprintProxy
        fun SpawnAIFromClass(WorldContextObject: UObject, PawnClass: UnrealEngineClass, BehaviorTree: BehaviorTree, Location: Vector, Rotation: Rotator, bNoCollisionFail: Boolean): Pawn
        fun LogBox(WorldContextObject: UObject, BoxShape: Box, text: String, ObjectColor: LinearColor, LogCategory: String, bAddToMessageLog: Boolean)
        fun LogLocation(WorldContextObject: UObject, Location: Vector, text: String, ObjectColor: LinearColor, Radius: Number, LogCategory: String, bAddToMessageLog: Boolean)
        fun LogSegment(WorldContextObject: UObject, SegmentStart: Vector, SegmentEnd: Vector, text: String, ObjectColor: LinearColor, Thickness: Number, CategoryName: String, bAddToMessageLog: Boolean)
        fun LogText(WorldContextObject: UObject, text: String, LogCategory: String, bAddToMessageLog: Boolean)
        fun BoxOverlapActors(WorldContextObject: UObject, BoxPos: Vector, BoxExtent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$474`
        fun BoxOverlapComponents(WorldContextObject: UObject, BoxPos: Vector, Extent: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$475`
        fun BoxTraceMulti(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$476`
        fun BoxTraceMultiByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$477`
        fun BoxTraceMultiForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$478`
        fun BoxTraceSingle(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun BoxTraceSingleByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun BoxTraceSingleForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun CapsuleOverlapActors(WorldContextObject: UObject, CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$479`
        fun CapsuleOverlapComponents(WorldContextObject: UObject, CapsulePos: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$480`
        fun CapsuleTraceMulti(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$481`
        fun CapsuleTraceMultiByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$482`
        fun CapsuleTraceMultiForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$483`
        fun CapsuleTraceSingle(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun CapsuleTraceSingleByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun CapsuleTraceSingleForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, HalfHeight: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun Delay(WorldContextObject: UObject, Duration: Number, LatentInfo: LatentActionInfo)
        fun DrawDebugArrow(WorldContextObject: UObject, LineStart: Vector, LineEnd: Vector, ArrowSize: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugBox(WorldContextObject: UObject, Center: Vector, Extent: Vector, LineColor: LinearColor, Rotation: Rotator, Duration: Number, Thickness: Number)
        fun DrawDebugCapsule(WorldContextObject: UObject, Center: Vector, HalfHeight: Number, Radius: Number, Rotation: Rotator, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugCircle(WorldContextObject: UObject, Center: Vector, Radius: Number, NumSegments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number, YAxis: Vector, ZAxis: Vector, bDrawAxis: Boolean)
        fun DrawDebugCone(WorldContextObject: UObject, Origin: Vector, Direction: Vector, Length: Number, AngleWidth: Number, AngleHeight: Number, NumSides: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugConeInDegrees(WorldContextObject: UObject, Origin: Vector, Direction: Vector, Length: Number, AngleWidth: Number, AngleHeight: Number, NumSides: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugCoordinateSystem(WorldContextObject: UObject, AxisLoc: Vector, AxisRot: Rotator, Scale: Number, Duration: Number, Thickness: Number)
        fun DrawDebugCylinder(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugFloatHistoryLocation(WorldContextObject: UObject, FloatHistory: DebugFloatHistory, DrawLocation: Vector, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
        fun DrawDebugFloatHistoryTransform(WorldContextObject: UObject, FloatHistory: DebugFloatHistory, DrawTransform: Transform, DrawSize: Vector2D, DrawColor: LinearColor, Duration: Number)
        fun DrawDebugFrustum(WorldContextObject: UObject, FrustumTransform: Transform, FrustumColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugLine(WorldContextObject: UObject, LineStart: Vector, LineEnd: Vector, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugPlane(WorldContextObject: UObject, PlaneCoordinates: Plane, Location: Vector, Size: Number, PlaneColor: LinearColor, Duration: Number)
        fun DrawDebugPoint(WorldContextObject: UObject, Position: Vector, Size: Number, PointColor: LinearColor, Duration: Number)
        fun DrawDebugSphere(WorldContextObject: UObject, Center: Vector, Radius: Number, Segments: Number, LineColor: LinearColor, Duration: Number, Thickness: Number)
        fun DrawDebugString(WorldContextObject: UObject, TextLocation: Vector, text: String, TestBaseActor: Actor, TextColor: LinearColor, Duration: Number)
        fun ExecuteConsoleCommand(WorldContextObject: UObject, Command: String, SpecificPlayer: PlayerController)
        fun FlushDebugStrings(WorldContextObject: UObject)
        fun FlushPersistentDebugLines(WorldContextObject: UObject)
        fun GetGameTimeInSeconds(WorldContextObject: UObject): Number
        fun IsDedicatedServer(WorldContextObject: UObject): Boolean
        fun IsServer(WorldContextObject: UObject): Boolean
        fun IsStandalone(WorldContextObject: UObject): Boolean
        fun K2_ClearAndInvalidateTimerHandle(WorldContextObject: UObject, Handle: TimerHandle = definedExternally): `T$441`
        fun K2_ClearTimerHandle(WorldContextObject: UObject, Handle: TimerHandle)
        fun K2_GetTimerElapsedTimeHandle(WorldContextObject: UObject, Handle: TimerHandle): Number
        fun K2_GetTimerRemainingTimeHandle(WorldContextObject: UObject, Handle: TimerHandle): Number
        fun K2_IsTimerActiveHandle(WorldContextObject: UObject, Handle: TimerHandle): Boolean
        fun K2_IsTimerPausedHandle(WorldContextObject: UObject, Handle: TimerHandle): Boolean
        fun K2_PauseTimerHandle(WorldContextObject: UObject, Handle: TimerHandle)
        fun K2_TimerExistsHandle(WorldContextObject: UObject, Handle: TimerHandle): Boolean
        fun K2_UnPauseTimerHandle(WorldContextObject: UObject, Handle: TimerHandle)
        fun LineTraceMulti(WorldContextObject: UObject, Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$484`
        fun LineTraceMultiByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$485`
        fun LineTraceMultiForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$486`
        fun LineTraceSingle(WorldContextObject: UObject, Start: Vector, End: Vector, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun LineTraceSingleByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun LineTraceSingleForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun LoadAsset(WorldContextObject: UObject, Asset: UObject, OnLoaded: UnrealEngineDelegate<(Loaded: UObject) -> Unit>, LatentInfo: LatentActionInfo)
        fun LoadAssetClass(WorldContextObject: UObject, AssetClass: Class, OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) -> Unit>, LatentInfo: LatentActionInfo)
        fun PrintString(WorldContextObject: UObject, inString: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number)
        fun PrintText(WorldContextObject: UObject, InText: String, bPrintToScreen: Boolean, bPrintToLog: Boolean, TextColor: LinearColor, Duration: Number)
        fun QuitGame(WorldContextObject: UObject, SpecificPlayer: PlayerController, QuitPreference: String /* "Quit" | "Background" | "EQuitPreference_MAX" */, bIgnorePlatformRestrictions: Boolean)
        fun RetriggerableDelay(WorldContextObject: UObject, Duration: Number, LatentInfo: LatentActionInfo)
        fun SetSuppressViewportTransitionMessage(WorldContextObject: UObject, bState: Boolean)
        fun SphereOverlapActors(WorldContextObject: UObject, SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ActorClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutActors: Array<Actor> = definedExternally): `T$487`
        fun SphereOverlapComponents(WorldContextObject: UObject, SpherePos: Vector, SphereRadius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, ComponentClassFilter: UnrealEngineClass, ActorsToIgnore: Array<Actor>, OutComponents: Array<PrimitiveComponent> = definedExternally): `T$488`
        fun SphereTraceMulti(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$489`
        fun SphereTraceMultiByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$490`
        fun SphereTraceMultiForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHits: Array<HitResult> = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$491`
        fun SphereTraceSingle(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, TraceChannel: String /* "TraceTypeQuery1" | "TraceTypeQuery2" | "TraceTypeQuery3" | "TraceTypeQuery4" | "TraceTypeQuery5" | "TraceTypeQuery6" | "TraceTypeQuery7" | "TraceTypeQuery8" | "TraceTypeQuery9" | "TraceTypeQuery10" | "TraceTypeQuery11" | "TraceTypeQuery12" | "TraceTypeQuery13" | "TraceTypeQuery14" | "TraceTypeQuery15" | "TraceTypeQuery16" | "TraceTypeQuery17" | "TraceTypeQuery18" | "TraceTypeQuery19" | "TraceTypeQuery20" | "TraceTypeQuery21" | "TraceTypeQuery22" | "TraceTypeQuery23" | "TraceTypeQuery24" | "TraceTypeQuery25" | "TraceTypeQuery26" | "TraceTypeQuery27" | "TraceTypeQuery28" | "TraceTypeQuery29" | "TraceTypeQuery30" | "TraceTypeQuery31" | "TraceTypeQuery32" | "TraceTypeQuery_MAX" | "ETraceTypeQuery_MAX" */, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun SphereTraceSingleByProfile(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ProfileName: String, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun SphereTraceSingleForObjects(WorldContextObject: UObject, Start: Vector, End: Vector, Radius: Number, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */>, bTraceComplex: Boolean, ActorsToIgnore: Array<Actor>, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */, OutHit: HitResult = definedExternally, bIgnoreSelf: Boolean = definedExternally, TraceColor: LinearColor = definedExternally, TraceHitColor: LinearColor = definedExternally, DrawTime: Number = definedExternally): `T$152`
        fun BeginDrawCanvasToRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, Canvas: Canvas = definedExternally, Size: Vector2D = definedExternally, Context: DrawToRenderTargetContext = definedExternally): `T$450`
        fun ClearRenderTarget2D(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, ClearColor: LinearColor)
        fun ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: UObject, RenderTarget: TextureRenderTarget2D, Texture: Texture2D)
        fun CreateRenderTarget2D(WorldContextObject: UObject, Width: Number, Height: Number, Format: String /* "RTF_R8" | "RTF_RG8" | "RTF_RGBA8" | "RTF_R16f" | "RTF_RG16f" | "RTF_RGBA16f" | "RTF_R32f" | "RTF_RG32f" | "RTF_RGBA32f" | "RTF_RGB10A2" | "RTF_MAX" */, ClearColor: LinearColor): TextureRenderTarget2D
        fun DrawMaterialToRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, Material: MaterialInterface)
        fun EndDrawCanvasToRenderTarget(WorldContextObject: UObject, Context: DrawToRenderTargetContext)
        fun ExportRenderTarget(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, FilePath: String, Filename: String)
        fun ExportTexture2D(WorldContextObject: UObject, Texture: Texture2D, FilePath: String, Filename: String)
        fun ImportBufferAsTexture2D(WorldContextObject: UObject, Buffer: Array<Number>): Texture2D
        fun ImportFileAsTexture2D(WorldContextObject: UObject, Filename: String): Texture2D
        fun ReadRenderTargetPixel(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number): Color
        fun ReadRenderTargetRawPixel(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, X: Number, Y: Number): LinearColor
        fun ReadRenderTargetRawUV(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number): LinearColor
        fun ReadRenderTargetUV(WorldContextObject: UObject, TextureRenderTarget: TextureRenderTarget2D, U: Number, V: Number): Color
        fun MinimumAreaRectangle(WorldContextObject: UObject, InVerts: Array<Vector>, SampleSurfaceNormal: Vector, OutRectCenter: Vector = definedExternally, OutRectRotation: Rotator = definedExternally, OutSideLengthX: Number = definedExternally, OutSideLengthY: Number = definedExternally, bDebugDraw: Boolean = definedExternally): `T$451`
        fun CreateDynamicMaterialInstance(WorldContextObject: UObject, Parent: MaterialInterface, OptionalName: String): MaterialInstanceDynamic
        fun GetScalarParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String): Number
        fun GetVectorParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String): LinearColor
        fun SetScalarParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: Number)
        fun SetVectorParameterValue(WorldContextObject: UObject, Collection: MaterialParameterCollection, ParameterName: String, ParameterValue: LinearColor)
        fun ActivateReverbEffect(WorldContextObject: UObject, ReverbEffect: ReverbEffect, TagName: String, Priority: Number, Volume: Number, FadeTime: Number)
        fun ApplyRadialDamage(WorldContextObject: UObject, BaseDamage: Number, Origin: Vector, DamageRadius: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, bDoFullDamage: Boolean, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
        fun ApplyRadialDamageWithFalloff(WorldContextObject: UObject, BaseDamage: Number, MinimumDamage: Number, Origin: Vector, DamageInnerRadius: Number, DamageOuterRadius: Number, DamageFalloff: Number, DamageTypeClass: UnrealEngineClass, IgnoreActors: Array<Actor>, DamageCauser: Actor, InstigatedByController: Controller, DamagePreventionChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */): Boolean
        fun AreAnyListenersWithinRange(WorldContextObject: UObject, Location: Vector, MaximumRange: Number): Boolean
        fun BeginDeferredActorSpawnFromClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass, SpawnTransform: Transform, CollisionHandlingOverride: String /* "Undefined" | "AlwaysSpawn" | "AdjustIfPossibleButAlwaysSpawn" | "AdjustIfPossibleButDontSpawnIfColliding" | "DontSpawnIfColliding" | "ESpawnActorCollisionHandlingMethod_MAX" */, Owner: Actor): Actor
        fun BeginSpawningActorFromBlueprint(WorldContextObject: UObject, Blueprint: Blueprint, SpawnTransform: Transform, bNoCollisionFail: Boolean): Actor
        fun BeginSpawningActorFromClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass, SpawnTransform: Transform, bNoCollisionFail: Boolean, Owner: Actor): Actor
        fun Blueprint_PredictProjectilePath_Advanced(WorldContextObject: UObject, PredictParams: PredictProjectilePathParams, PredictResult: PredictProjectilePathResult = definedExternally): `T$452`
        fun Blueprint_PredictProjectilePath_ByObjectType(WorldContextObject: UObject, OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, ObjectTypes: Array<String /* "ObjectTypeQuery1" | "ObjectTypeQuery2" | "ObjectTypeQuery3" | "ObjectTypeQuery4" | "ObjectTypeQuery5" | "ObjectTypeQuery6" | "ObjectTypeQuery7" | "ObjectTypeQuery8" | "ObjectTypeQuery9" | "ObjectTypeQuery10" | "ObjectTypeQuery11" | "ObjectTypeQuery12" | "ObjectTypeQuery13" | "ObjectTypeQuery14" | "ObjectTypeQuery15" | "ObjectTypeQuery16" | "ObjectTypeQuery17" | "ObjectTypeQuery18" | "ObjectTypeQuery19" | "ObjectTypeQuery20" | "ObjectTypeQuery21" | "ObjectTypeQuery22" | "ObjectTypeQuery23" | "ObjectTypeQuery24" | "ObjectTypeQuery25" | "ObjectTypeQuery26" | "ObjectTypeQuery27" | "ObjectTypeQuery28" | "ObjectTypeQuery29" | "ObjectTypeQuery30" | "ObjectTypeQuery31" | "ObjectTypeQuery32" | "ObjectTypeQuery_MAX" | "EObjectTypeQuery_MAX" */> = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$492`
        fun Blueprint_PredictProjectilePath_ByTraceChannel(WorldContextObject: UObject, OutHit: HitResult = definedExternally, OutPathPositions: Array<Vector> = definedExternally, OutLastTraceDestination: Vector = definedExternally, StartPos: Vector = definedExternally, LaunchVelocity: Vector = definedExternally, bTracePath: Boolean = definedExternally, ProjectileRadius: Number = definedExternally, TraceChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */ = definedExternally, bTraceComplex: Boolean = definedExternally, ActorsToIgnore: Array<Actor> = definedExternally, DrawDebugType: String /* "None" | "ForOneFrame" | "ForDuration" | "Persistent" | "EDrawDebugTrace_MAX" */ = definedExternally, DrawDebugTime: Number = definedExternally, SimFrequency: Number = definedExternally, MaxSimTime: Number = definedExternally, OverrideGravityZ: Number = definedExternally): `T$493`
        fun BlueprintSuggestProjectileVelocity(WorldContextObject: UObject, TossVelocity: Vector = definedExternally, StartLocation: Vector = definedExternally, EndLocation: Vector = definedExternally, LaunchSpeed: Number = definedExternally, OverrideGravityZ: Number = definedExternally, TraceOption: String /* "DoNotTrace" | "TraceFullPath" | "OnlyTraceWhileAscending" | "ESuggestProjVelocityTraceOption_MAX" */ = definedExternally, CollisionRadius: Number = definedExternally, bFavorHighArc: Boolean = definedExternally, bDrawDebug: Boolean = definedExternally): `T$455`
        fun ClearSoundMixClassOverride(WorldContextObject: UObject, InSoundMixModifier: SoundMix, InSoundClass: SoundClass, FadeOutTime: Number)
        fun ClearSoundMixModifiers(WorldContextObject: UObject)
        fun CreatePlayer(WorldContextObject: UObject, ControllerId: Number, bSpawnPlayerController: Boolean): PlayerController
        fun CreateSound2D(WorldContextObject: UObject, Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
        fun DeactivateReverbEffect(WorldContextObject: UObject, TagName: String)
        fun FlushLevelStreaming(WorldContextObject: UObject)
        fun GetAccurateRealTime(WorldContextObject: UObject, Seconds: Number = definedExternally, PartialSeconds: Number = definedExternally): `T$456`
        fun GetActorOfClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass): Actor
        fun GetAllActorsOfClass(WorldContextObject: UObject, ActorClass: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$494`
        fun GetAllActorsOfClassWithTag(WorldContextObject: UObject, ActorClass: UnrealEngineClass, Tag: String, OutActors: Array<Actor> = definedExternally): `T$495`
        fun GetAllActorsWithInterface(WorldContextObject: UObject, Interface: UnrealEngineClass, OutActors: Array<Actor> = definedExternally): `T$496`
        fun GetAllActorsWithTag(WorldContextObject: UObject, Tag: String, OutActors: Array<Actor> = definedExternally): `T$497`
        fun GetAudioTimeSeconds(WorldContextObject: UObject): Number
        fun GetCurrentLevelName(WorldContextObject: UObject, bRemovePrefixString: Boolean): String
        fun GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect
        fun GetEnableWorldRendering(WorldContextObject: UObject): Boolean
        fun GetGameInstance(WorldContextObject: UObject): GameInstance
        fun GetGameMode(WorldContextObject: UObject): GameModeBase
        fun GetGameState(WorldContextObject: UObject): GameStateBase
        fun GetGlobalTimeDilation(WorldContextObject: UObject): Number
        fun GetMaxAudioChannelCount(WorldContextObject: UObject): Number
        fun GetPlayerCameraManager(WorldContextObject: UObject, PlayerIndex: Number): PlayerCameraManager
        fun GetPlayerCharacter(WorldContextObject: UObject, PlayerIndex: Number): Character
        fun GetPlayerController(WorldContextObject: UObject, PlayerIndex: Number): PlayerController
        fun GetPlayerControllerFromID(WorldContextObject: UObject, ControllerId: Number): PlayerController
        fun GetPlayerPawn(WorldContextObject: UObject, PlayerIndex: Number): Pawn
        fun GetRealTimeSeconds(WorldContextObject: UObject): Number
        fun GetStreamingLevel(WorldContextObject: UObject, PackageName: String): LevelStreaming
        fun GetTimeSeconds(WorldContextObject: UObject): Number
        fun GetUnpausedTimeSeconds(WorldContextObject: UObject): Number
        fun GetViewportMouseCaptureMode(WorldContextObject: UObject): String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */
        fun GetWorldDeltaSeconds(WorldContextObject: UObject): Number
        fun GetWorldOriginLocation(WorldContextObject: UObject): IntVector
        fun GrassOverlappingSphereCount(WorldContextObject: UObject, StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
        fun IsGamePaused(WorldContextObject: UObject): Boolean
        fun LoadStreamLevel(WorldContextObject: UObject, LevelName: String, bMakeVisibleAfterLoad: Boolean, bShouldBlockOnLoad: Boolean, LatentInfo: LatentActionInfo)
        fun OpenLevel(WorldContextObject: UObject, LevelName: String, bAbsolute: Boolean, Options: String)
        fun PlayDialogue2D(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number)
        fun PlayDialogueAtLocation(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation)
        fun PlaySound2D(WorldContextObject: UObject, Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, OwningActor: Actor)
        fun PlaySoundAtLocation(WorldContextObject: UObject, Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, OwningActor: Actor)
        fun PlayWorldCameraShake(WorldContextObject: UObject, Shake: UnrealEngineClass, Epicenter: Vector, InnerRadius: Number, OuterRadius: Number, Falloff: Number, bOrientShakeTowardsEpicenter: Boolean)
        fun PopSoundMixModifier(WorldContextObject: UObject, InSoundMixModifier: SoundMix)
        fun PushSoundMixModifier(WorldContextObject: UObject, InSoundMixModifier: SoundMix)
        fun RebaseLocalOriginOntoZero(WorldContextObject: UObject, WorldLocation: Vector): Vector
        fun RebaseZeroOriginOntoLocal(WorldContextObject: UObject, WorldLocation: Vector): Vector
        fun SetBaseSoundMix(WorldContextObject: UObject, InSoundMix: SoundMix)
        fun SetEnableWorldRendering(WorldContextObject: UObject, bEnable: Boolean)
        fun SetGamePaused(WorldContextObject: UObject, bPaused: Boolean): Boolean
        fun SetGlobalListenerFocusParameters(WorldContextObject: UObject, FocusAzimuthScale: Number, NonFocusAzimuthScale: Number, FocusDistanceScale: Number, NonFocusDistanceScale: Number, FocusVolumeScale: Number, NonFocusVolumeScale: Number, FocusPriorityScale: Number, NonFocusPriorityScale: Number)
        fun SetGlobalPitchModulation(WorldContextObject: UObject, PitchModulation: Number, TimeSec: Number)
        fun SetGlobalTimeDilation(WorldContextObject: UObject, TimeDilation: Number)
        fun SetMaxAudioChannelsScaled(WorldContextObject: UObject, MaxChannelCountScale: Number)
        fun SetSoundMixClassOverride(WorldContextObject: UObject, InSoundMixModifier: SoundMix, InSoundClass: SoundClass, Volume: Number, Pitch: Number, FadeInTime: Number, bApplyToChildren: Boolean)
        fun SetViewportMouseCaptureMode(WorldContextObject: UObject, MouseCaptureMode: String /* "NoCapture" | "CapturePermanently" | "CapturePermanently_IncludingInitialMouseDown" | "CaptureDuringMouseDown" | "CaptureDuringRightMouseDown" | "EMouseCaptureMode_MAX" */)
        fun SetWorldOriginLocation(WorldContextObject: UObject, NewLocation: IntVector)
        fun SpawnDecalAtLocation(WorldContextObject: UObject, DecalMaterial: MaterialInterface, DecalSize: Vector, Location: Vector, Rotation: Rotator, LifeSpan: Number): DecalComponent
        fun SpawnDialogue2D(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, bAutoDestroy: Boolean): AudioComponent
        fun SpawnDialogueAtLocation(WorldContextObject: UObject, Dialogue: DialogueWave, Context: DialogueContext, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, bAutoDestroy: Boolean): AudioComponent
        fun SpawnEmitterAtLocation(WorldContextObject: UObject, EmitterTemplate: ParticleSystem, Location: Vector, Rotation: Rotator, Scale: Vector, bAutoDestroy: Boolean, PoolingMethod: String /* "None" | "AutoRelease" | "ManualRelease" | "ManualRelease_OnComplete" | "FreeInPool" | "EPSCPoolMethod_MAX" */): ParticleSystemComponent
        fun SpawnForceFeedbackAtLocation(WorldContextObject: UObject, ForceFeedbackEffect: ForceFeedbackEffect, Location: Vector, Rotation: Rotator, bLooping: Boolean, IntensityMultiplier: Number, StartTime: Number, AttenuationSettings: ForceFeedbackAttenuation, bAutoDestroy: Boolean): ForceFeedbackComponent
        fun SpawnSound2D(WorldContextObject: UObject, Sound: SoundBase, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, ConcurrencySettings: SoundConcurrency, bPersistAcrossLevelTransition: Boolean, bAutoDestroy: Boolean): AudioComponent
        fun SpawnSoundAtLocation(WorldContextObject: UObject, Sound: SoundBase, Location: Vector, Rotation: Rotator, VolumeMultiplier: Number, PitchMultiplier: Number, StartTime: Number, AttenuationSettings: SoundAttenuation, ConcurrencySettings: SoundConcurrency, bAutoDestroy: Boolean): AudioComponent
        fun SuggestProjectileVelocity_CustomArc(WorldContextObject: UObject, OutLaunchVelocity: Vector = definedExternally, StartPos: Vector = definedExternally, EndPos: Vector = definedExternally, OverrideGravityZ: Number = definedExternally, ArcParam: Number = definedExternally): `T$461`
        fun UnloadStreamLevel(WorldContextObject: UObject, LevelName: String, LatentInfo: LatentActionInfo, bShouldBlockOnUnload: Boolean)
        fun FoliageOverlappingBoxCount(WorldContextObject: UObject, StaticMesh: StaticMesh, Box: Box): Number
        fun FoliageOverlappingSphereCount(WorldContextObject: UObject, StaticMesh: StaticMesh, CenterPosition: Vector, Radius: Number): Number
        fun GetMousePositionOnViewport(WorldContextObject: UObject): Vector2D
        fun GetViewportScale(WorldContextObject: UObject): Number
        fun GetViewportSize(WorldContextObject: UObject): Vector2D
        fun GetViewportWidgetGeometry(WorldContextObject: UObject): Geometry
        fun RemoveAllWidgets(WorldContextObject: UObject)
        fun Create(WorldContextObject: UObject, WidgetType: UnrealEngineClass, OwningPlayer: PlayerController): UserWidget
        fun GetAllWidgetsOfClass(WorldContextObject: UObject, FoundWidgets: Array<UserWidget> = definedExternally, WidgetClass: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$498`
        fun GetAllWidgetsWithInterface(WorldContextObject: UObject, FoundWidgets: Array<UserWidget> = definedExternally, Interface: UnrealEngineClass = definedExternally, TopLevelOnly: Boolean = definedExternally): `T$499`
        fun GetSafeZonePadding(WorldContextObject: UObject, SafePadding: Vector4 = definedExternally, SafePaddingScale: Vector2D = definedExternally, SpillOverPadding: Vector4 = definedExternally): `T$464`
        fun SetHardwareCursor(WorldContextObject: UObject, CursorShape: String /* "None" | "Default" | "TextEditBeam" | "ResizeLeftRight" | "ResizeUpDown" | "ResizeSouthEast" | "ResizeSouthWest" | "CardinalCross" | "Crosshairs" | "Hand" | "GrabHand" | "GrabHandClosed" | "SlashedCircle" | "EyeDropper" | "EMouseCursor_MAX" */, CursorName: String, HotSpot: Vector2D): Boolean
        fun AbsoluteToViewport(WorldContextObject: UObject, AbsoluteDesktopCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$465`
        fun LocalToViewport(WorldContextObject: UObject, Geometry: Geometry, LocalCoordinate: Vector2D, PixelPosition: Vector2D = definedExternally, ViewportPosition: Vector2D = definedExternally): `T$465`
        fun ScreenToViewport(WorldContextObject: UObject, ScreenPosition: Vector2D, ViewportPosition: Vector2D = definedExternally): `T$466`
        fun ScreenToWidgetAbsolute(WorldContextObject: UObject, ScreenPosition: Vector2D, AbsoluteCoordinate: Vector2D = definedExternally): `T$467`
        fun ScreenToWidgetLocal(WorldContextObject: UObject, Geometry: Geometry, ScreenPosition: Vector2D, LocalCoordinate: Vector2D = definedExternally): `T$468`
        fun AddMasterSubmixEffect(WorldContextObject: UObject, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun AddSourceEffectToPresetChain(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain, Entry: SourceEffectChainEntry)
        fun ClearMasterSubmixEffects(WorldContextObject: UObject)
        fun GetMagnitudeForFrequencies(WorldContextObject: UObject, Frequencies: Array<Number>, Magnitudes: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$500`
        fun GetNumberOfEntriesInSourceEffectChain(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain): Number
        fun GetPhaseForFrequencies(WorldContextObject: UObject, Frequencies: Array<Number>, Phases: Array<Number> = definedExternally, SubmixToAnalyze: SoundSubmix = definedExternally): `T$501`
        fun PauseRecordingOutput(WorldContextObject: UObject, SubmixToPause: SoundSubmix)
        fun RemoveMasterSubmixEffect(WorldContextObject: UObject, SubmixEffectPreset: SoundEffectSubmixPreset)
        fun RemoveSourceEffectFromPresetChain(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number)
        fun ResumeRecordingOutput(WorldContextObject: UObject, SubmixToPause: SoundSubmix)
        fun SetBypassSourceEffectChainEntry(WorldContextObject: UObject, PresetChain: SoundEffectSourcePresetChain, EntryIndex: Number, bBypassed: Boolean)
        fun StartAnalyzingOutput(WorldContextObject: UObject, SubmixToAnalyze: SoundSubmix, FFTSize: String /* "DefaultSize" | "Min" | "Small" | "Medium" | "Large" | "Max" | "EFFTSize_MAX" */, InterpolationMethod: String /* "NearestNeighbor" | "Linear" | "Quadratic" | "EFFTPeakInterpolationMethod_MAX" */, WindowType: String /* "None" | "Hamming" | "Hann" | "Blackman" | "EFFTWindowType_MAX" */, HopSize: Number)
        fun StartRecordingOutput(WorldContextObject: UObject, ExpectedDuration: Number, SubmixToRecord: SoundSubmix)
        fun StopAnalyzingOutput(WorldContextObject: UObject, SubmixToStopAnalyzing: SoundSubmix)
        fun StopRecordingOutput(WorldContextObject: UObject, ExportType: String /* "SoundWave" | "WavFile" | "EAudioRecordingExportType_MAX" */, Name: String, Path: String, SubmixToRecord: SoundSubmix, ExistingSoundWaveToOverwrite: SoundWave): SoundWave
        fun GetDeviceWorldPose(WorldContext: UObject, XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, Position: Vector = definedExternally): `T$420`
        fun GetTrackingToWorldTransform(WorldContext: UObject): Transform
        fun GetWorldToMetersScale(WorldContext: UObject): Number
        fun SetWorldToMetersScale(WorldContext: UObject, NewScale: Number)
        fun GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject, ActorClass: UnrealEngineClass, GameplayTagQuery: GameplayTagQuery, OutActors: Array<Actor> = definedExternally): `T$502`
    }
}

external open class Package : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun DeletePackage(): Boolean
    open fun FindWorldInPackage(): World
    open fun SavePackage(Filename: String): Boolean
    open fun GetLongPackagePath(): String
    open fun HasAnyPackageFlags(Flags: Number): Boolean
    open fun LoadPackage(PackageName: String): Package

    companion object {
        fun Load(ResourceName: String): Package
        fun Find(Outer: UObject, ResourceName: String): Package
        fun GetDefaultObject(): Package
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Package
        fun C(Other: UObject): Package
        fun C(Other: Any): Package
        fun DeletePackage(Package: Package): Boolean
        fun FindWorldInPackage(Package: Package): World
        fun SavePackage(Package: Package, Filename: String): Boolean
        fun GetLongPackagePath(InPackage: Package): String
        fun HasAnyPackageFlags(Package: Package, Flags: Number): Boolean
        fun LoadPackage(InOuter: Package, PackageName: String): Package
    }
}

external open class DirectoryItem {
    open var Name: String
    open var bIsDirectory: Boolean
    open fun clone(): DirectoryItem

    companion object {
        fun C(Other: UObject): DirectoryItem
        fun C(Other: Any): DirectoryItem
    }
}

external object EJavascriptEncodingOptions {
    var AutoDetect: String /* "AutoDetect" */
    var ForceAnsi: String /* "ForceAnsi" */
    var ForceUnicode: String /* "ForceUnicode" */
    var ForceUTF8: String /* "ForceUTF8" */
    var ForceUTF8WithoutBOM: String /* "ForceUTF8WithoutBOM" */
    var EJavascriptEncodingOptions_MAX: String /* "EJavascriptEncodingOptions_MAX" */
}

external open class GameInstanceSubsystem : Subsystem {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): GameInstanceSubsystem
        fun Find(Outer: UObject, ResourceName: String): GameInstanceSubsystem
        fun GetDefaultObject(): GameInstanceSubsystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameInstanceSubsystem
        fun C(Other: UObject): GameInstanceSubsystem
        fun C(Other: Any): GameInstanceSubsystem
    }
}

external open class CollisionProfileName {
    open var Name: String
    open fun clone(): CollisionProfileName

    companion object {
        fun C(Other: UObject): CollisionProfileName
        fun C(Other: Any): CollisionProfileName
    }
}

external open class GenericStruct {
    open var Data: Number
    open fun clone(): GenericStruct

    companion object {
        fun C(Other: UObject): GenericStruct
        fun C(Other: Any): GenericStruct
    }
}

external interface `T$503` {
    var Results: Array<UObject>
}

external interface `T$504` {
    var OutItems: Array<DirectoryItem>
    var `$`: Boolean
}

external interface `T$505` {
    var OutKeys: Array<String>
    var OutValues: Array<String>
}

external interface `T$506` {
    var Results: Array<UObject>
}

external interface `T$507` {
    var OutItems: Array<DirectoryItem>
    var `$`: Boolean
}

external interface `T$508` {
    var OutKeys: Array<String>
    var OutValues: Array<String>
}

external open class UObject {
    constructor()
    constructor(Outer: UObject)
    open fun ExecuteUbergraph(EntryPoint: Number)
    open fun AddWhitelistedObject()
    open fun BroadcastAssetCreated()
    open fun MarkPackageDirty(): Boolean
    open fun ModifyObject(bAlwaysMarkDirty: Boolean)
    open fun OpenEditorForAsset(): Boolean
    open fun PostEditChange()
    open fun DestroyUObject()
    open fun ConvertRelativePathToFull(RelativePath: String): String
    open fun CreateEnum(Name: String, DisplayNames: Array<String>, Flags: Array<String>): Enum
    open fun CreatePackage(PackageName: String): Package
    open fun Duplicate(Outer: UObject, Name: String): UObject
    open fun FindObjectWithOuter(ClassToLookFor: UnrealEngineClass, NameToLookFor: String): UObject
    open fun FindPackage(PackageName: String): Package
    open fun GetArchetypePathName(): String
    open fun GetDir(WhichDir: String): String
    open fun GetFields(bIncludeSuper: Boolean): Array<Field>
    open fun GetFileSize(Filename: String): Number
    open fun GetName(): String
    open fun GetObjectsWithOuter(Results: Array<UObject> = definedExternally, bIncludeNestedObjects: Boolean = definedExternally, ExclusionFlags: Number = definedExternally, ExclusionInternalFlags: Number = definedExternally): `T$503`
    open fun GetOuter(): UObject
    open fun GetOutermost(): UObject
    open fun HasAnyFlags(Flags: Number): Boolean
    open fun ReadDirectory(Directory: String, OutItems: Array<DirectoryItem> = definedExternally): `T$504`
    open fun ReadFile(Filename: String): Boolean
    open fun ReadStringFromFile(Filename: String): String
    open fun SetObjectFlags(Flags: Number)
    open fun WriteFile(Filename: String): Boolean
    open fun WriteStringToFile(Filename: String, Data: String, EncodingOptions: String /* "AutoDetect" | "ForceAnsi" | "ForceUnicode" | "ForceUTF8" | "ForceUTF8WithoutBOM" | "EJavascriptEncodingOptions_MAX" */): Boolean
    open fun RenameAsset(NewName: String)
    open fun GetDatasmithUserData(): DatasmithAssetUserData
    open fun GetDatasmithUserDataKeysAndValuesForValue(StringToMatch: String, OutKeys: Array<String> = definedExternally, OutValues: Array<String> = definedExternally): `T$505`
    open fun GetDatasmithUserDataValueForKey(Key: String): String
    open fun RedirectVislog(DestinationOwner: UObject)
    open fun GetGameInstanceSubsystem(Class: UnrealEngineClass): GameInstanceSubsystem
    open fun GetLocalPlayerSubsystem(Class: UnrealEngineClass): LocalPlayerSubsystem
    open fun Conv_ObjectToText(): String
    open fun Conv_ObjectToSoftObjectReference(): UObject
    open fun Conv_SoftObjectReferenceToObject(): UObject
    open fun Conv_SoftObjectReferenceToString(): String
    open fun CreateCopyForUndoBuffer()
    open fun DoesImplementInterface(Interface: UnrealEngineClass): Boolean
    open fun EqualEqual_SoftObjectReference(B: UObject): Boolean
    open fun GetDisplayName(): String
    open fun GetObjectName(): String
    open fun GetOuterObject(): UObject
    open fun GetPathName(): String
    open fun GetPrimaryAssetIdFromObject(): PrimaryAssetId
    open fun GetPrimaryAssetIdFromSoftObjectReference(): PrimaryAssetId
    open fun IsValid(): Boolean
    open fun IsValidSoftObjectReference(): Boolean
    open fun K2_ClearTimer(FunctionName: String)
    open fun K2_GetTimerElapsedTime(FunctionName: String): Number
    open fun K2_GetTimerRemainingTime(FunctionName: String): Number
    open fun K2_IsTimerActive(FunctionName: String): Boolean
    open fun K2_IsTimerPaused(FunctionName: String): Boolean
    open fun K2_PauseTimer(FunctionName: String)
    open fun K2_SetTimer(FunctionName: String, Time: Number, bLooping: Boolean, InitialStartDelay: Number, InitialStartDelayVariance: Number): TimerHandle
    open fun K2_TimerExists(FunctionName: String): Boolean
    open fun K2_UnPauseTimer(FunctionName: String)
    open fun LoadAsset_Blocking(): UObject
    open fun NotEqual_SoftObjectReference(B: UObject): Boolean
    open fun SetBoolPropertyByName(PropertyName: String, Value: Boolean)
    open fun SetBytePropertyByName(PropertyName: String, Value: Number)
    open fun SetClassPropertyByName(PropertyName: String, Value: UnrealEngineClass)
    open fun SetCollisionProfileNameProperty(PropertyName: String, Value: CollisionProfileName)
    open fun SetFloatPropertyByName(PropertyName: String, Value: Number)
    open fun SetInt64PropertyByName(PropertyName: String, Value: Any)
    open fun SetInterfacePropertyByName(PropertyName: String, Value: Any)
    open fun SetIntPropertyByName(PropertyName: String, Value: Number)
    open fun SetLinearColorPropertyByName(PropertyName: String, Value: LinearColor)
    open fun SetNamePropertyByName(PropertyName: String, Value: String)
    open fun SetObjectPropertyByName(PropertyName: String, Value: UObject)
    open fun SetRotatorPropertyByName(PropertyName: String, Value: Rotator)
    open fun SetSoftClassPropertyByName(PropertyName: String, Value: Class)
    open fun SetSoftObjectPropertyByName(PropertyName: String, Value: UObject)
    open fun SetStringPropertyByName(PropertyName: String, Value: String)
    open fun SetStructurePropertyByName(PropertyName: String, Value: GenericStruct)
    open fun SetTextPropertyByName(PropertyName: String, Value: String)
    open fun SetTransformPropertyByName(PropertyName: String, Value: Transform)
    open fun SetVectorPropertyByName(PropertyName: String, Value: Vector)
    open fun TransactObject()
    open fun Conv_ObjectToString(): String
    open fun EqualEqual_ObjectObject(B: UObject): Boolean
    open fun NotEqual_ObjectObject(B: UObject): Boolean
    open fun SelectObject(B: UObject, bSelectA: Boolean): UObject
    open fun SetArrayPropertyByName(PropertyName: String, Value: Array<Number>)
    open fun GetObjectClass(): UnrealEngineClass
    open fun SetSetPropertyByName(PropertyName: String, Value: Any)
    open fun SetMapPropertyByName(PropertyName: String, Value: Any)

    companion object {
        fun Load(ResourceName: String): UObject
        fun Find(Outer: UObject, ResourceName: String): UObject
        var StaticClass: Any
        fun GetClassObject(): Class
        fun GetDefaultObject(): UObject
        fun GetDefaultSubobjectByName(Name: String): UObject
        fun SetDefaultSubobjectClass(Name: String)
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UObject
        fun C(Other: UObject): UObject
        fun C(Other: Any): UObject
        fun AddWhitelistedObject(InObject: UObject)
        fun BroadcastAssetCreated(NewAsset: UObject)
        fun MarkPackageDirty(InObject: UObject): Boolean
        fun ModifyObject(UObject: UObject, bAlwaysMarkDirty: Boolean)
        fun OpenEditorForAsset(Asset: UObject): Boolean
        fun PostEditChange(InObject: UObject)
        fun DestroyUObject(UObject: UObject)
        fun ConvertRelativePathToFull(UObject: UObject, RelativePath: String): String
        fun CreateEnum(Outer: UObject, Name: String, DisplayNames: Array<String>, Flags: Array<String>): Enum
        fun CreatePackage(Outer: UObject, PackageName: String): Package
        fun Duplicate(UObject: UObject, Outer: UObject, Name: String): UObject
        fun FindObjectWithOuter(Outer: UObject, ClassToLookFor: UnrealEngineClass, NameToLookFor: String): UObject
        fun FindPackage(InOuter: UObject, PackageName: String): Package
        fun GetArchetypePathName(UObject: UObject): String
        fun GetDir(UObject: UObject, WhichDir: String): String
        fun GetFields(UObject: UObject, bIncludeSuper: Boolean): Array<Field>
        fun GetFileSize(UObject: UObject, Filename: String): Number
        fun GetName(UObject: UObject): String
        fun GetObjectsWithOuter(Outer: UObject, Results: Array<UObject> = definedExternally, bIncludeNestedObjects: Boolean = definedExternally, ExclusionFlags: Number = definedExternally, ExclusionInternalFlags: Number = definedExternally): `T$506`
        fun GetOuter(UObject: UObject): UObject
        fun GetOutermost(UObject: UObject): UObject
        fun HasAnyFlags(UObject: UObject, Flags: Number): Boolean
        fun ReadDirectory(UObject: UObject, Directory: String, OutItems: Array<DirectoryItem> = definedExternally): `T$507`
        fun ReadFile(UObject: UObject, Filename: String): Boolean
        fun ReadStringFromFile(UObject: UObject, Filename: String): String
        fun SetObjectFlags(Obj: UObject, Flags: Number)
        fun WriteFile(UObject: UObject, Filename: String): Boolean
        fun WriteStringToFile(UObject: UObject, Filename: String, Data: String, EncodingOptions: String /* "AutoDetect" | "ForceAnsi" | "ForceUnicode" | "ForceUTF8" | "ForceUTF8WithoutBOM" | "EJavascriptEncodingOptions_MAX" */): Boolean
        fun RenameAsset(Asset: UObject, NewName: String)
        fun GetDatasmithUserData(UObject: UObject): DatasmithAssetUserData
        fun GetDatasmithUserDataKeysAndValuesForValue(UObject: UObject, StringToMatch: String, OutKeys: Array<String> = definedExternally, OutValues: Array<String> = definedExternally): `T$508`
        fun GetDatasmithUserDataValueForKey(UObject: UObject, Key: String): String
        fun RedirectVislog(SourceOwner: UObject, DestinationOwner: UObject)
        fun GetGameInstanceSubsystem(ContextObject: UObject, Class: UnrealEngineClass): GameInstanceSubsystem
        fun GetLocalPlayerSubsystem(ContextObject: UObject, Class: UnrealEngineClass): LocalPlayerSubsystem
        fun Conv_ObjectToText(InObj: UObject): String
        fun Conv_ObjectToSoftObjectReference(UObject: UObject): UObject
        fun Conv_SoftObjectReferenceToObject(softobject: UObject): UObject
        fun Conv_SoftObjectReferenceToString(SoftObjectReference: UObject): String
        fun CreateCopyForUndoBuffer(ObjectToModify: UObject)
        fun DoesImplementInterface(TestObject: UObject, Interface: UnrealEngineClass): Boolean
        fun EqualEqual_SoftObjectReference(A: UObject, B: UObject): Boolean
        fun GetDisplayName(UObject: UObject): String
        fun GetObjectName(UObject: UObject): String
        fun GetOuterObject(UObject: UObject): UObject
        fun GetPathName(UObject: UObject): String
        fun GetPrimaryAssetIdFromObject(UObject: UObject): PrimaryAssetId
        fun GetPrimaryAssetIdFromSoftObjectReference(SoftObjectReference: UObject): PrimaryAssetId
        fun IsValid(UObject: UObject): Boolean
        fun IsValidSoftObjectReference(SoftObjectReference: UObject): Boolean
        fun K2_ClearTimer(UObject: UObject, FunctionName: String)
        fun K2_GetTimerElapsedTime(UObject: UObject, FunctionName: String): Number
        fun K2_GetTimerRemainingTime(UObject: UObject, FunctionName: String): Number
        fun K2_IsTimerActive(UObject: UObject, FunctionName: String): Boolean
        fun K2_IsTimerPaused(UObject: UObject, FunctionName: String): Boolean
        fun K2_PauseTimer(UObject: UObject, FunctionName: String)
        fun K2_SetTimer(UObject: UObject, FunctionName: String, Time: Number, bLooping: Boolean, InitialStartDelay: Number, InitialStartDelayVariance: Number): TimerHandle
        fun K2_TimerExists(UObject: UObject, FunctionName: String): Boolean
        fun K2_UnPauseTimer(UObject: UObject, FunctionName: String)
        fun LoadAsset_Blocking(Asset: UObject): UObject
        fun NotEqual_SoftObjectReference(A: UObject, B: UObject): Boolean
        fun SetBoolPropertyByName(UObject: UObject, PropertyName: String, Value: Boolean)
        fun SetBytePropertyByName(UObject: UObject, PropertyName: String, Value: Number)
        fun SetClassPropertyByName(UObject: UObject, PropertyName: String, Value: UnrealEngineClass)
        fun SetCollisionProfileNameProperty(UObject: UObject, PropertyName: String, Value: CollisionProfileName)
        fun SetFloatPropertyByName(UObject: UObject, PropertyName: String, Value: Number)
        fun SetInt64PropertyByName(UObject: UObject, PropertyName: String, Value: Any)
        fun SetInterfacePropertyByName(UObject: UObject, PropertyName: String, Value: Any)
        fun SetIntPropertyByName(UObject: UObject, PropertyName: String, Value: Number)
        fun SetLinearColorPropertyByName(UObject: UObject, PropertyName: String, Value: LinearColor)
        fun SetNamePropertyByName(UObject: UObject, PropertyName: String, Value: String)
        fun SetObjectPropertyByName(UObject: UObject, PropertyName: String, Value: UObject)
        fun SetRotatorPropertyByName(UObject: UObject, PropertyName: String, Value: Rotator)
        fun SetSoftClassPropertyByName(UObject: UObject, PropertyName: String, Value: Class)
        fun SetSoftObjectPropertyByName(UObject: UObject, PropertyName: String, Value: UObject)
        fun SetStringPropertyByName(UObject: UObject, PropertyName: String, Value: String)
        fun SetStructurePropertyByName(UObject: UObject, PropertyName: String, Value: GenericStruct)
        fun SetTextPropertyByName(UObject: UObject, PropertyName: String, Value: String)
        fun SetTransformPropertyByName(UObject: UObject, PropertyName: String, Value: Transform)
        fun SetVectorPropertyByName(UObject: UObject, PropertyName: String, Value: Vector)
        fun TransactObject(UObject: UObject)
        fun Conv_ObjectToString(InObj: UObject): String
        fun EqualEqual_ObjectObject(A: UObject, B: UObject): Boolean
        fun NotEqual_ObjectObject(A: UObject, B: UObject): Boolean
        fun SelectObject(A: UObject, B: UObject, bSelectA: Boolean): UObject
        fun SetArrayPropertyByName(UObject: UObject, PropertyName: String, Value: Array<Number>)
        fun GetObjectClass(UObject: UObject): UnrealEngineClass
        fun SetSetPropertyByName(UObject: UObject, PropertyName: String, Value: Any)
        fun SetMapPropertyByName(UObject: UObject, PropertyName: String, Value: Any)
    }
}

external open class GCObjectReferencer : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): GCObjectReferencer
        fun Find(Outer: UObject, ResourceName: String): GCObjectReferencer
        fun GetDefaultObject(): GCObjectReferencer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GCObjectReferencer
        fun C(Other: UObject): GCObjectReferencer
        fun C(Other: Any): GCObjectReferencer
    }
}

external open class TextBuffer : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): TextBuffer
        fun Find(Outer: UObject, ResourceName: String): TextBuffer
        fun GetDefaultObject(): TextBuffer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextBuffer
        fun C(Other: UObject): TextBuffer
        fun C(Other: Any): TextBuffer
    }
}

external open class ScriptStruct : Struct {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ScriptStruct
        fun Find(Outer: UObject, ResourceName: String): ScriptStruct
        fun GetDefaultObject(): ScriptStruct
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScriptStruct
        fun C(Other: UObject): ScriptStruct
        fun C(Other: Any): ScriptStruct
    }
}

external open class DelegateFunction : UFunction {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DelegateFunction
        fun Find(Outer: UObject, ResourceName: String): DelegateFunction
        fun GetDefaultObject(): DelegateFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DelegateFunction
        fun C(Other: UObject): DelegateFunction
        fun C(Other: Any): DelegateFunction
    }
}

external open class SparseDelegateFunction : DelegateFunction {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SparseDelegateFunction
        fun Find(Outer: UObject, ResourceName: String): SparseDelegateFunction
        fun GetDefaultObject(): SparseDelegateFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SparseDelegateFunction
        fun C(Other: UObject): SparseDelegateFunction
        fun C(Other: Any): SparseDelegateFunction
    }
}

external open class DynamicClass : Class {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DynamicClass
        fun Find(Outer: UObject, ResourceName: String): DynamicClass
        fun GetDefaultObject(): DynamicClass
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DynamicClass
        fun C(Other: UObject): DynamicClass
        fun C(Other: Any): DynamicClass
    }
}

external open class EnumProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EnumProperty
        fun Find(Outer: UObject, ResourceName: String): EnumProperty
        fun GetDefaultObject(): EnumProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EnumProperty
        fun C(Other: UObject): EnumProperty
        fun C(Other: Any): EnumProperty
    }
}

external open class LinkerPlaceholderClass : Class {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LinkerPlaceholderClass
        fun Find(Outer: UObject, ResourceName: String): LinkerPlaceholderClass
        fun GetDefaultObject(): LinkerPlaceholderClass
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LinkerPlaceholderClass
        fun C(Other: UObject): LinkerPlaceholderClass
        fun C(Other: Any): LinkerPlaceholderClass
    }
}

external open class LinkerPlaceholderExportObject : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LinkerPlaceholderExportObject
        fun Find(Outer: UObject, ResourceName: String): LinkerPlaceholderExportObject
        fun GetDefaultObject(): LinkerPlaceholderExportObject
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LinkerPlaceholderExportObject
        fun C(Other: UObject): LinkerPlaceholderExportObject
        fun C(Other: Any): LinkerPlaceholderExportObject
    }
}

external open class LinkerPlaceholderFunction : UFunction {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LinkerPlaceholderFunction
        fun Find(Outer: UObject, ResourceName: String): LinkerPlaceholderFunction
        fun GetDefaultObject(): LinkerPlaceholderFunction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LinkerPlaceholderFunction
        fun C(Other: UObject): LinkerPlaceholderFunction
        fun C(Other: Any): LinkerPlaceholderFunction
    }
}

external open class MetaData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MetaData
        fun Find(Outer: UObject, ResourceName: String): MetaData
        fun GetDefaultObject(): MetaData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MetaData
        fun C(Other: UObject): MetaData
        fun C(Other: Any): MetaData
    }
}

external open class ObjectRedirector : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ObjectRedirector
        fun Find(Outer: UObject, ResourceName: String): ObjectRedirector
        fun GetDefaultObject(): ObjectRedirector
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ObjectRedirector
        fun C(Other: UObject): ObjectRedirector
        fun C(Other: Any): ObjectRedirector
    }
}

external open class ArrayProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ArrayProperty
        fun Find(Outer: UObject, ResourceName: String): ArrayProperty
        fun GetDefaultObject(): ArrayProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ArrayProperty
        fun C(Other: UObject): ArrayProperty
        fun C(Other: Any): ArrayProperty
    }
}

external open class ObjectPropertyBase : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ObjectPropertyBase
        fun Find(Outer: UObject, ResourceName: String): ObjectPropertyBase
        fun GetDefaultObject(): ObjectPropertyBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ObjectPropertyBase
        fun C(Other: UObject): ObjectPropertyBase
        fun C(Other: Any): ObjectPropertyBase
    }
}

external open class BoolProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BoolProperty
        fun Find(Outer: UObject, ResourceName: String): BoolProperty
        fun GetDefaultObject(): BoolProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BoolProperty
        fun C(Other: UObject): BoolProperty
        fun C(Other: Any): BoolProperty
    }
}

external open class NumericProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NumericProperty
        fun Find(Outer: UObject, ResourceName: String): NumericProperty
        fun GetDefaultObject(): NumericProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NumericProperty
        fun C(Other: UObject): NumericProperty
        fun C(Other: Any): NumericProperty
    }
}

external open class ByteProperty : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ByteProperty
        fun Find(Outer: UObject, ResourceName: String): ByteProperty
        fun GetDefaultObject(): ByteProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ByteProperty
        fun C(Other: UObject): ByteProperty
        fun C(Other: Any): ByteProperty
    }
}

external open class ObjectProperty : ObjectPropertyBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ObjectProperty
        fun Find(Outer: UObject, ResourceName: String): ObjectProperty
        fun GetDefaultObject(): ObjectProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ObjectProperty
        fun C(Other: UObject): ObjectProperty
        fun C(Other: Any): ObjectProperty
    }
}

external open class ClassProperty : ObjectProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClassProperty
        fun Find(Outer: UObject, ResourceName: String): ClassProperty
        fun GetDefaultObject(): ClassProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClassProperty
        fun C(Other: UObject): ClassProperty
        fun C(Other: Any): ClassProperty
    }
}

external open class DelegateProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DelegateProperty
        fun Find(Outer: UObject, ResourceName: String): DelegateProperty
        fun GetDefaultObject(): DelegateProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DelegateProperty
        fun C(Other: UObject): DelegateProperty
        fun C(Other: Any): DelegateProperty
    }
}

external open class DoubleProperty : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DoubleProperty
        fun Find(Outer: UObject, ResourceName: String): DoubleProperty
        fun GetDefaultObject(): DoubleProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DoubleProperty
        fun C(Other: UObject): DoubleProperty
        fun C(Other: Any): DoubleProperty
    }
}

external open class FloatProperty : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FloatProperty
        fun Find(Outer: UObject, ResourceName: String): FloatProperty
        fun GetDefaultObject(): FloatProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FloatProperty
        fun C(Other: UObject): FloatProperty
        fun C(Other: Any): FloatProperty
    }
}

external open class IntProperty : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): IntProperty
        fun Find(Outer: UObject, ResourceName: String): IntProperty
        fun GetDefaultObject(): IntProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): IntProperty
        fun C(Other: UObject): IntProperty
        fun C(Other: Any): IntProperty
    }
}

external open class Int16Property : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Int16Property
        fun Find(Outer: UObject, ResourceName: String): Int16Property
        fun GetDefaultObject(): Int16Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Int16Property
        fun C(Other: UObject): Int16Property
        fun C(Other: Any): Int16Property
    }
}

external open class Int64Property : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Int64Property
        fun Find(Outer: UObject, ResourceName: String): Int64Property
        fun GetDefaultObject(): Int64Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Int64Property
        fun C(Other: UObject): Int64Property
        fun C(Other: Any): Int64Property
    }
}

external open class Int8Property : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): Int8Property
        fun Find(Outer: UObject, ResourceName: String): Int8Property
        fun GetDefaultObject(): Int8Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Int8Property
        fun C(Other: UObject): Int8Property
        fun C(Other: Any): Int8Property
    }
}

external open class InterfaceProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): InterfaceProperty
        fun Find(Outer: UObject, ResourceName: String): InterfaceProperty
        fun GetDefaultObject(): InterfaceProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InterfaceProperty
        fun C(Other: UObject): InterfaceProperty
        fun C(Other: Any): InterfaceProperty
    }
}

external open class LazyObjectProperty : ObjectPropertyBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LazyObjectProperty
        fun Find(Outer: UObject, ResourceName: String): LazyObjectProperty
        fun GetDefaultObject(): LazyObjectProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LazyObjectProperty
        fun C(Other: UObject): LazyObjectProperty
        fun C(Other: Any): LazyObjectProperty
    }
}

external open class MapProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MapProperty
        fun Find(Outer: UObject, ResourceName: String): MapProperty
        fun GetDefaultObject(): MapProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MapProperty
        fun C(Other: UObject): MapProperty
        fun C(Other: Any): MapProperty
    }
}

external open class MulticastDelegateProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MulticastDelegateProperty
        fun Find(Outer: UObject, ResourceName: String): MulticastDelegateProperty
        fun GetDefaultObject(): MulticastDelegateProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MulticastDelegateProperty
        fun C(Other: UObject): MulticastDelegateProperty
        fun C(Other: Any): MulticastDelegateProperty
    }
}

external open class MulticastInlineDelegateProperty : MulticastDelegateProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MulticastInlineDelegateProperty
        fun Find(Outer: UObject, ResourceName: String): MulticastInlineDelegateProperty
        fun GetDefaultObject(): MulticastInlineDelegateProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MulticastInlineDelegateProperty
        fun C(Other: UObject): MulticastInlineDelegateProperty
        fun C(Other: Any): MulticastInlineDelegateProperty
    }
}

external open class MulticastSparseDelegateProperty : MulticastDelegateProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MulticastSparseDelegateProperty
        fun Find(Outer: UObject, ResourceName: String): MulticastSparseDelegateProperty
        fun GetDefaultObject(): MulticastSparseDelegateProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MulticastSparseDelegateProperty
        fun C(Other: UObject): MulticastSparseDelegateProperty
        fun C(Other: Any): MulticastSparseDelegateProperty
    }
}

external open class NameProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NameProperty
        fun Find(Outer: UObject, ResourceName: String): NameProperty
        fun GetDefaultObject(): NameProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NameProperty
        fun C(Other: UObject): NameProperty
        fun C(Other: Any): NameProperty
    }
}

external open class SetProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SetProperty
        fun Find(Outer: UObject, ResourceName: String): SetProperty
        fun GetDefaultObject(): SetProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SetProperty
        fun C(Other: UObject): SetProperty
        fun C(Other: Any): SetProperty
    }
}

external open class SoftObjectProperty : ObjectPropertyBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoftObjectProperty
        fun Find(Outer: UObject, ResourceName: String): SoftObjectProperty
        fun GetDefaultObject(): SoftObjectProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoftObjectProperty
        fun C(Other: UObject): SoftObjectProperty
        fun C(Other: Any): SoftObjectProperty
    }
}

external open class SoftClassProperty : SoftObjectProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SoftClassProperty
        fun Find(Outer: UObject, ResourceName: String): SoftClassProperty
        fun GetDefaultObject(): SoftClassProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoftClassProperty
        fun C(Other: UObject): SoftClassProperty
        fun C(Other: Any): SoftClassProperty
    }
}

external open class StrProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): StrProperty
        fun Find(Outer: UObject, ResourceName: String): StrProperty
        fun GetDefaultObject(): StrProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StrProperty
        fun C(Other: UObject): StrProperty
        fun C(Other: Any): StrProperty
    }
}

external open class StructProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): StructProperty
        fun Find(Outer: UObject, ResourceName: String): StructProperty
        fun GetDefaultObject(): StructProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StructProperty
        fun C(Other: UObject): StructProperty
        fun C(Other: Any): StructProperty
    }
}

external open class UInt16Property : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): UInt16Property
        fun Find(Outer: UObject, ResourceName: String): UInt16Property
        fun GetDefaultObject(): UInt16Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UInt16Property
        fun C(Other: UObject): UInt16Property
        fun C(Other: Any): UInt16Property
    }
}

external open class UInt32Property : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): UInt32Property
        fun Find(Outer: UObject, ResourceName: String): UInt32Property
        fun GetDefaultObject(): UInt32Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UInt32Property
        fun C(Other: UObject): UInt32Property
        fun C(Other: Any): UInt32Property
    }
}

external open class UInt64Property : NumericProperty {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): UInt64Property
        fun Find(Outer: UObject, ResourceName: String): UInt64Property
        fun GetDefaultObject(): UInt64Property
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UInt64Property
        fun C(Other: UObject): UInt64Property
        fun C(Other: Any): UInt64Property
    }
}

external open class WeakObjectProperty : ObjectPropertyBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): WeakObjectProperty
        fun Find(Outer: UObject, ResourceName: String): WeakObjectProperty
        fun GetDefaultObject(): WeakObjectProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WeakObjectProperty
        fun C(Other: UObject): WeakObjectProperty
        fun C(Other: Any): WeakObjectProperty
    }
}

external open class TextProperty : Property {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): TextProperty
        fun Find(Outer: UObject, ResourceName: String): TextProperty
        fun GetDefaultObject(): TextProperty
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextProperty
        fun C(Other: UObject): TextProperty
        fun C(Other: Any): TextProperty
    }
}

external open class InputCoreTypes : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): InputCoreTypes
        fun Find(Outer: UObject, ResourceName: String): InputCoreTypes
        fun GetDefaultObject(): InputCoreTypes
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): InputCoreTypes
        fun C(Other: UObject): InputCoreTypes
        fun C(Other: Any): InputCoreTypes
    }
}

external open class FontFaceInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FontFaceInterface
        fun Find(Outer: UObject, ResourceName: String): FontFaceInterface
        fun GetDefaultObject(): FontFaceInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FontFaceInterface
        fun C(Other: UObject): FontFaceInterface
        fun C(Other: Any): FontFaceInterface
    }
}

external open class FontProviderInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FontProviderInterface
        fun Find(Outer: UObject, ResourceName: String): FontProviderInterface
        fun GetDefaultObject(): FontProviderInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FontProviderInterface
        fun C(Other: UObject): FontProviderInterface
        fun C(Other: Any): FontProviderInterface
    }
}

external open class SlateTypes : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SlateTypes
        fun Find(Outer: UObject, ResourceName: String): SlateTypes
        fun GetDefaultObject(): SlateTypes
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateTypes
        fun C(Other: UObject): SlateTypes
        fun C(Other: Any): SlateTypes
    }
}

external open class SlateWidgetStyleContainerBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SlateWidgetStyleContainerBase
        fun Find(Outer: UObject, ResourceName: String): SlateWidgetStyleContainerBase
        fun GetDefaultObject(): SlateWidgetStyleContainerBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateWidgetStyleContainerBase
        fun C(Other: UObject): SlateWidgetStyleContainerBase
        fun C(Other: Any): SlateWidgetStyleContainerBase
    }
}

external open class SlateWidgetStyleAsset : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CustomStyle: SlateWidgetStyleContainerBase

    companion object {
        fun Load(ResourceName: String): SlateWidgetStyleAsset
        fun Find(Outer: UObject, ResourceName: String): SlateWidgetStyleAsset
        fun GetDefaultObject(): SlateWidgetStyleAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateWidgetStyleAsset
        fun C(Other: UObject): SlateWidgetStyleAsset
        fun C(Other: Any): SlateWidgetStyleAsset
    }
}

external open class SlateWidgetStyleContainerInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SlateWidgetStyleContainerInterface
        fun Find(Outer: UObject, ResourceName: String): SlateWidgetStyleContainerInterface
        fun GetDefaultObject(): SlateWidgetStyleContainerInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateWidgetStyleContainerInterface
        fun C(Other: UObject): SlateWidgetStyleContainerInterface
        fun C(Other: Any): SlateWidgetStyleContainerInterface
    }
}

external open class SlateWidgetStyle {
    open fun clone(): SlateWidgetStyle

    companion object {
        fun C(Other: UObject): SlateWidgetStyle
        fun C(Other: Any): SlateWidgetStyle
    }
}

external open class SlateSound {
    open var ResourceObject: UObject
    open fun clone(): SlateSound

    companion object {
        fun C(Other: UObject): SlateSound
        fun C(Other: Any): SlateSound
    }
}

external open class ButtonStyle : SlateWidgetStyle {
    open var Normal: SlateBrush
    open var Hovered: SlateBrush
    open var Pressed: SlateBrush
    open var Disabled: SlateBrush
    open var NormalPadding: Margin
    open var PressedPadding: Margin
    open var PressedSlateSound: SlateSound
    open var HoveredSlateSound: SlateSound
    open var PressedSound: String
    open var HoveredSound: String
    override fun clone(): ButtonStyle

    companion object {
        fun C(Other: UObject): ButtonStyle
        fun C(Other: Any): ButtonStyle
    }
}

external open class ButtonWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var ButtonStyle: ButtonStyle

    companion object {
        fun Load(ResourceName: String): ButtonWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): ButtonWidgetStyle
        fun GetDefaultObject(): ButtonWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ButtonWidgetStyle
        fun C(Other: UObject): ButtonWidgetStyle
        fun C(Other: Any): ButtonWidgetStyle
    }
}

external object ESlateCheckBoxType {
    var CheckBox: String /* "CheckBox" */
    var ToggleButton: String /* "ToggleButton" */
    var ESlateCheckBoxType_MAX: String /* "ESlateCheckBoxType_MAX" */
}

external open class CheckBoxStyle : SlateWidgetStyle {
    open var CheckBoxType: String /* "CheckBox" | "ToggleButton" | "ESlateCheckBoxType_MAX" */
    open var UncheckedImage: SlateBrush
    open var UncheckedHoveredImage: SlateBrush
    open var UncheckedPressedImage: SlateBrush
    open var CheckedImage: SlateBrush
    open var CheckedHoveredImage: SlateBrush
    open var CheckedPressedImage: SlateBrush
    open var UndeterminedImage: SlateBrush
    open var UndeterminedHoveredImage: SlateBrush
    open var UndeterminedPressedImage: SlateBrush
    open var Padding: Margin
    open var ForegroundColor: SlateColor
    open var BorderBackgroundColor: SlateColor
    open var CheckedSlateSound: SlateSound
    open var UncheckedSlateSound: SlateSound
    open var HoveredSlateSound: SlateSound
    open var CheckedSound: String
    open var UncheckedSound: String
    open var HoveredSound: String
    override fun clone(): CheckBoxStyle

    companion object {
        fun C(Other: UObject): CheckBoxStyle
        fun C(Other: Any): CheckBoxStyle
    }
}

external open class CheckBoxWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var CheckBoxStyle: CheckBoxStyle

    companion object {
        fun Load(ResourceName: String): CheckBoxWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): CheckBoxWidgetStyle
        fun GetDefaultObject(): CheckBoxWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CheckBoxWidgetStyle
        fun C(Other: UObject): CheckBoxWidgetStyle
        fun C(Other: Any): CheckBoxWidgetStyle
    }
}

external open class ComboButtonStyle : SlateWidgetStyle {
    open var ButtonStyle: ButtonStyle
    open var DownArrowImage: SlateBrush
    open var MenuBorderBrush: SlateBrush
    open var MenuBorderPadding: Margin
    override fun clone(): ComboButtonStyle

    companion object {
        fun C(Other: UObject): ComboButtonStyle
        fun C(Other: Any): ComboButtonStyle
    }
}

external open class ComboBoxStyle : SlateWidgetStyle {
    open var ComboButtonStyle: ComboButtonStyle
    open var PressedSlateSound: SlateSound
    open var SelectionChangeSlateSound: SlateSound
    open var PressedSound: String
    open var SelectionChangeSound: String
    override fun clone(): ComboBoxStyle

    companion object {
        fun C(Other: UObject): ComboBoxStyle
        fun C(Other: Any): ComboBoxStyle
    }
}

external open class ComboBoxWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var ComboBoxStyle: ComboBoxStyle

    companion object {
        fun Load(ResourceName: String): ComboBoxWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): ComboBoxWidgetStyle
        fun GetDefaultObject(): ComboBoxWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ComboBoxWidgetStyle
        fun C(Other: UObject): ComboBoxWidgetStyle
        fun C(Other: Any): ComboBoxWidgetStyle
    }
}

external open class ComboButtonWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var ComboButtonStyle: ComboButtonStyle

    companion object {
        fun Load(ResourceName: String): ComboButtonWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): ComboButtonWidgetStyle
        fun GetDefaultObject(): ComboButtonWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ComboButtonWidgetStyle
        fun C(Other: UObject): ComboButtonWidgetStyle
        fun C(Other: Any): ComboButtonWidgetStyle
    }
}

external open class FontOutlineSettings {
    open var OutlineSize: Number
    open var bSeparateFillAlpha: Boolean
    open var bApplyOutlineToDropShadows: Boolean
    open var OutlineMaterial: UObject
    open var OutlineColor: LinearColor
    open fun clone(): FontOutlineSettings

    companion object {
        fun C(Other: UObject): FontOutlineSettings
        fun C(Other: Any): FontOutlineSettings
    }
}

external open class SlateFontInfo {
    open var FontObject: UObject
    open var FontMaterial: UObject
    open var OutlineSettings: FontOutlineSettings
    open var TypefaceFontName: String
    open var Size: Number
    open var FontName: String
    open var Hinting: String /* "Default" | "Auto" | "AutoLight" | "Monochrome" | "None" | "EFontHinting_MAX" */
    open fun clone(): SlateFontInfo

    companion object {
        fun C(Other: UObject): SlateFontInfo
        fun C(Other: Any): SlateFontInfo
    }
}

external open class ScrollBarStyle : SlateWidgetStyle {
    open var HorizontalBackgroundImage: SlateBrush
    open var VerticalBackgroundImage: SlateBrush
    open var VerticalTopSlotImage: SlateBrush
    open var HorizontalTopSlotImage: SlateBrush
    open var VerticalBottomSlotImage: SlateBrush
    open var HorizontalBottomSlotImage: SlateBrush
    open var NormalThumbImage: SlateBrush
    open var HoveredThumbImage: SlateBrush
    open var DraggedThumbImage: SlateBrush
    override fun clone(): ScrollBarStyle

    companion object {
        fun C(Other: UObject): ScrollBarStyle
        fun C(Other: Any): ScrollBarStyle
    }
}

external open class EditableTextBoxStyle : SlateWidgetStyle {
    open var BackgroundImageNormal: SlateBrush
    open var BackgroundImageHovered: SlateBrush
    open var BackgroundImageFocused: SlateBrush
    open var BackgroundImageReadOnly: SlateBrush
    open var Padding: Margin
    open var Font: SlateFontInfo
    open var ForegroundColor: SlateColor
    open var BackgroundColor: SlateColor
    open var ReadOnlyForegroundColor: SlateColor
    open var HScrollBarPadding: Margin
    open var VScrollBarPadding: Margin
    open var ScrollBarStyle: ScrollBarStyle
    override fun clone(): EditableTextBoxStyle

    companion object {
        fun C(Other: UObject): EditableTextBoxStyle
        fun C(Other: Any): EditableTextBoxStyle
    }
}

external open class EditableTextBoxWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var EditableTextBoxStyle: EditableTextBoxStyle

    companion object {
        fun Load(ResourceName: String): EditableTextBoxWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): EditableTextBoxWidgetStyle
        fun GetDefaultObject(): EditableTextBoxWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableTextBoxWidgetStyle
        fun C(Other: UObject): EditableTextBoxWidgetStyle
        fun C(Other: Any): EditableTextBoxWidgetStyle
    }
}

external open class EditableTextStyle : SlateWidgetStyle {
    open var Font: SlateFontInfo
    open var ColorAndOpacity: SlateColor
    open var BackgroundImageSelected: SlateBrush
    open var BackgroundImageComposing: SlateBrush
    open var CaretImage: SlateBrush
    override fun clone(): EditableTextStyle

    companion object {
        fun C(Other: UObject): EditableTextStyle
        fun C(Other: Any): EditableTextStyle
    }
}

external open class EditableTextWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var EditableTextStyle: EditableTextStyle

    companion object {
        fun Load(ResourceName: String): EditableTextWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): EditableTextWidgetStyle
        fun GetDefaultObject(): EditableTextWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableTextWidgetStyle
        fun C(Other: UObject): EditableTextWidgetStyle
        fun C(Other: Any): EditableTextWidgetStyle
    }
}

external open class ProgressBarStyle : SlateWidgetStyle {
    open var BackgroundImage: SlateBrush
    open var FillImage: SlateBrush
    open var MarqueeImage: SlateBrush
    override fun clone(): ProgressBarStyle

    companion object {
        fun C(Other: UObject): ProgressBarStyle
        fun C(Other: Any): ProgressBarStyle
    }
}

external open class ProgressWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var ProgressBarStyle: ProgressBarStyle

    companion object {
        fun Load(ResourceName: String): ProgressWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): ProgressWidgetStyle
        fun GetDefaultObject(): ProgressWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ProgressWidgetStyle
        fun C(Other: UObject): ProgressWidgetStyle
        fun C(Other: Any): ProgressWidgetStyle
    }
}

external open class ScrollBarWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var ScrollBarStyle: ScrollBarStyle

    companion object {
        fun Load(ResourceName: String): ScrollBarWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): ScrollBarWidgetStyle
        fun GetDefaultObject(): ScrollBarWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScrollBarWidgetStyle
        fun C(Other: UObject): ScrollBarWidgetStyle
        fun C(Other: Any): ScrollBarWidgetStyle
    }
}

external open class ScrollBoxStyle : SlateWidgetStyle {
    open var TopShadowBrush: SlateBrush
    open var BottomShadowBrush: SlateBrush
    open var LeftShadowBrush: SlateBrush
    open var RightShadowBrush: SlateBrush
    override fun clone(): ScrollBoxStyle

    companion object {
        fun C(Other: UObject): ScrollBoxStyle
        fun C(Other: Any): ScrollBoxStyle
    }
}

external open class ScrollBoxWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var ScrollBoxStyle: ScrollBoxStyle

    companion object {
        fun Load(ResourceName: String): ScrollBoxWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): ScrollBoxWidgetStyle
        fun GetDefaultObject(): ScrollBoxWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScrollBoxWidgetStyle
        fun C(Other: UObject): ScrollBoxWidgetStyle
        fun C(Other: Any): ScrollBoxWidgetStyle
    }
}

external open class SlateSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bExplicitCanvasChildZOrder: Boolean

    companion object {
        fun Load(ResourceName: String): SlateSettings
        fun Find(Outer: UObject, ResourceName: String): SlateSettings
        fun GetDefaultObject(): SlateSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SlateSettings
        fun C(Other: UObject): SlateSettings
        fun C(Other: Any): SlateSettings
    }
}

external open class SpinBoxStyle : SlateWidgetStyle {
    open var BackgroundBrush: SlateBrush
    open var HoveredBackgroundBrush: SlateBrush
    open var ActiveFillBrush: SlateBrush
    open var InactiveFillBrush: SlateBrush
    open var ArrowsImage: SlateBrush
    open var ForegroundColor: SlateColor
    open var TextPadding: Margin
    override fun clone(): SpinBoxStyle

    companion object {
        fun C(Other: UObject): SpinBoxStyle
        fun C(Other: Any): SpinBoxStyle
    }
}

external open class SpinBoxWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var SpinBoxStyle: SpinBoxStyle

    companion object {
        fun Load(ResourceName: String): SpinBoxWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): SpinBoxWidgetStyle
        fun GetDefaultObject(): SpinBoxWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SpinBoxWidgetStyle
        fun C(Other: UObject): SpinBoxWidgetStyle
        fun C(Other: Any): SpinBoxWidgetStyle
    }
}

external open class TextBlockStyle : SlateWidgetStyle {
    open var Font: SlateFontInfo
    open var ColorAndOpacity: SlateColor
    open var ShadowOffset: Vector2D
    open var ShadowColorAndOpacity: LinearColor
    open var SelectedBackgroundColor: SlateColor
    open var HighlightColor: LinearColor
    open var HighlightShape: SlateBrush
    open var StrikeBrush: SlateBrush
    open var UnderlineBrush: SlateBrush
    override fun clone(): TextBlockStyle

    companion object {
        fun C(Other: UObject): TextBlockStyle
        fun C(Other: Any): TextBlockStyle
    }
}

external open class TextBlockWidgetStyle : SlateWidgetStyleContainerBase {
    constructor()
    constructor(Outer: UObject)
    open var TextBlockStyle: TextBlockStyle

    companion object {
        fun Load(ResourceName: String): TextBlockWidgetStyle
        fun Find(Outer: UObject, ResourceName: String): TextBlockWidgetStyle
        fun GetDefaultObject(): TextBlockWidgetStyle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextBlockWidgetStyle
        fun C(Other: UObject): TextBlockWidgetStyle
        fun C(Other: Any): TextBlockWidgetStyle
    }
}

external object EColorVisionDeficiency {
    var NormalVision: String /* "NormalVision" */
    var Deuteranope: String /* "Deuteranope" */
    var Protanope: String /* "Protanope" */
    var Tritanope: String /* "Tritanope" */
    var EColorVisionDeficiency_MAX: String /* "EColorVisionDeficiency_MAX" */
}

external object ELogTimes {
    var None: String /* "None" */
    var UTC: String /* "UTC" */
    var SinceGStartTime: String /* "SinceGStartTime" */
    var Local: String /* "Local" */
    var ELogTimes_MAX: String /* "ELogTimes_MAX" */
}

external object EAssetEditorOpenLocation {
    var Default: String /* "Default" */
    var NewWindow: String /* "NewWindow" */
    var MainWindow: String /* "MainWindow" */
    var ContentBrowser: String /* "ContentBrowser" */
    var LastDockedWindowOrNewWindow: String /* "LastDockedWindowOrNewWindow" */
    var LastDockedWindowOrMainWindow: String /* "LastDockedWindowOrMainWindow" */
    var LastDockedWindowOrContentBrowser: String /* "LastDockedWindowOrContentBrowser" */
    var EAssetEditorOpenLocation_MAX: String /* "EAssetEditorOpenLocation_MAX" */
}

external open class EditorStyleSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bEnableHighDPIAwareness: Boolean
    open var ColorVisionDeficiencyPreviewType: String /* "NormalVision" | "Deuteranope" | "Protanope" | "Tritanope" | "EColorVisionDeficiency_MAX" */
    open var ColorVisionDeficiencySeverity: Number
    open var bColorVisionDeficiencyCorrection: Boolean
    open var bColorVisionDeficiencyCorrectionPreviewWithDeficiency: Boolean
    open var SelectionColor: LinearColor
    open var PressedSelectionColor: LinearColor
    open var InactiveSelectionColor: LinearColor
    open var KeyboardFocusColor: LinearColor
    open var EditorWindowBackgroundColor: LinearColor
    open var EditorMainWindowBackgroundOverride: SlateBrush
    open var EditorChildWindowBackgroundOverride: SlateBrush
    open var bResetEditorWindowBackgroundSettings: Boolean
    open var bUseSmallToolBarIcons: Boolean
    open var bUseGrid: Boolean
    open var RegularColor: LinearColor
    open var RuleColor: LinearColor
    open var CenterColor: LinearColor
    open var GridSnapSize: Any
    open var bEnableWindowAnimations: Boolean
    open var bShowFriendlyNames: Boolean
    open var bExpandConfigurationMenus: Boolean
    open var bShowProjectMenus: Boolean
    open var bShowLaunchMenus: Boolean
    open var LogBackgroundColor: LinearColor
    open var LogSelectionBackgroundColor: LinearColor
    open var LogNormalColor: LinearColor
    open var LogCommandColor: LinearColor
    open var LogWarningColor: LinearColor
    open var LogErrorColor: LinearColor
    open var bShowAllAdvancedDetails: Boolean
    open var bShowHiddenPropertiesWhilePlaying: Boolean
    open var LogFontSize: Number
    open var LogTimestampMode: String /* "None" | "UTC" | "SinceGStartTime" | "Local" | "ELogTimes_MAX" */
    open var bPromoteOutputLogWarningsDuringPIE: Boolean
    open var AssetEditorOpenLocation: String /* "Default" | "NewWindow" | "MainWindow" | "ContentBrowser" | "LastDockedWindowOrNewWindow" | "LastDockedWindowOrMainWindow" | "LastDockedWindowOrContentBrowser" | "EAssetEditorOpenLocation_MAX" */
    open var bEnableColorizedEditorTabs: Boolean

    companion object {
        fun Load(ResourceName: String): EditorStyleSettings
        fun Find(Outer: UObject, ResourceName: String): EditorStyleSettings
        fun GetDefaultObject(): EditorStyleSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditorStyleSettings
        fun C(Other: UObject): EditorStyleSettings
        fun C(Other: Any): EditorStyleSettings
    }
}

external open class MaterialShaderQualitySettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ForwardSettingMap: Any

    companion object {
        fun Load(ResourceName: String): MaterialShaderQualitySettings
        fun Find(Outer: UObject, ResourceName: String): MaterialShaderQualitySettings
        fun GetDefaultObject(): MaterialShaderQualitySettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MaterialShaderQualitySettings
        fun C(Other: UObject): MaterialShaderQualitySettings
        fun C(Other: Any): MaterialShaderQualitySettings
    }
}

external object EMobileCSMQuality {
    var NoFiltering: String /* "NoFiltering" */
    var PCF_1x1: String /* "PCF_1x1" */
    var PCF_2x2: String /* "PCF_2x2" */
    var EMobileCSMQuality_MAX: String /* "EMobileCSMQuality_MAX" */
}

external open class MaterialQualityOverrides {
    open var bDiscardQualityDuringCook: Boolean
    open var bEnableOverride: Boolean
    open var bForceFullyRough: Boolean
    open var bForceNonMetal: Boolean
    open var bForceDisableLMDirectionality: Boolean
    open var bForceLQReflections: Boolean
    open var bDisableMaterialNormalCalculation: Boolean
    open var MobileCSMQuality: String /* "NoFiltering" | "PCF_1x1" | "PCF_2x2" | "EMobileCSMQuality_MAX" */
    open fun clone(): MaterialQualityOverrides

    companion object {
        fun C(Other: UObject): MaterialQualityOverrides
        fun C(Other: Any): MaterialQualityOverrides
    }
}

external open class ShaderPlatformQualitySettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var QualityOverrides: MaterialQualityOverrides

    companion object {
        fun Load(ResourceName: String): ShaderPlatformQualitySettings
        fun Find(Outer: UObject, ResourceName: String): ShaderPlatformQualitySettings
        fun GetDefaultObject(): ShaderPlatformQualitySettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ShaderPlatformQualitySettings
        fun C(Other: UObject): ShaderPlatformQualitySettings
        fun C(Other: Any): ShaderPlatformQualitySettings
    }
}

external open class MeshDescription : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MeshDescription
        fun Find(Outer: UObject, ResourceName: String): MeshDescription
        fun GetDefaultObject(): MeshDescription
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshDescription
        fun C(Other: UObject): MeshDescription
        fun C(Other: Any): MeshDescription
    }
}

external open class ClothingAssetFactoryBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingAssetFactoryBase
        fun Find(Outer: UObject, ResourceName: String): ClothingAssetFactoryBase
        fun GetDefaultObject(): ClothingAssetFactoryBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingAssetFactoryBase
        fun C(Other: UObject): ClothingAssetFactoryBase
        fun C(Other: Any): ClothingAssetFactoryBase
    }
}

external open class AssetRegistryImpl : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AssetRegistryImpl
        fun Find(Outer: UObject, ResourceName: String): AssetRegistryImpl
        fun GetDefaultObject(): AssetRegistryImpl
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetRegistryImpl
        fun C(Other: UObject): AssetRegistryImpl
        fun C(Other: Any): AssetRegistryImpl
    }
}

external open class ARFilter {
    open var PackageNames: Array<String>
    open var PackagePaths: Array<String>
    open var ObjectPaths: Array<String>
    open var ClassNames: Array<String>
    open var RecursiveClassesExclusionSet: Any
    open var bRecursivePaths: Boolean
    open var bRecursiveClasses: Boolean
    open var bIncludeOnlyOnDiskAssets: Boolean
    open fun clone(): ARFilter

    companion object {
        fun C(Other: UObject): ARFilter
        fun C(Other: Any): ARFilter
    }
}

external open class TagAndValue {
    open var Tag: String
    open var Value: String
    open fun clone(): TagAndValue

    companion object {
        fun C(Other: UObject): TagAndValue
        fun C(Other: Any): TagAndValue
    }
}

external interface `T$509` {
    var OutTagValue: String
    var `$`: Boolean
}

external open class AssetRegistryHelpers : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AssetRegistryHelpers
        fun Find(Outer: UObject, ResourceName: String): AssetRegistryHelpers
        fun GetDefaultObject(): AssetRegistryHelpers
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetRegistryHelpers
        fun ToSoftObjectPath(InAssetData: AssetData): SoftObjectPath
        fun SetFilterTagsAndValues(InFilter: ARFilter, InTagsAndValues: Array<TagAndValue>): ARFilter
        fun IsValid(InAssetData: AssetData): Boolean
        fun IsUAsset(InAssetData: AssetData): Boolean
        fun IsRedirector(InAssetData: AssetData): Boolean
        fun IsAssetLoaded(InAssetData: AssetData): Boolean
        fun GetTagValue(InAssetData: AssetData, InTagName: String, OutTagValue: String = definedExternally): `T$509`
        fun GetFullName(InAssetData: AssetData): String
        fun GetExportTextName(InAssetData: AssetData): String
        fun GetClass(InAssetData: AssetData): UnrealEngineClass
        fun GetAsset(InAssetData: AssetData): UObject
        fun CreateAssetData(InAsset: UObject, bAllowBlueprintClass: Boolean): AssetData
        fun C(Other: UObject): AssetRegistryHelpers
        fun C(Other: Any): AssetRegistryHelpers
    }
}

external open class AssetRegistryDependencyOptions {
    open var bIncludeSoftPackageReferences: Boolean
    open var bIncludeHardPackageReferences: Boolean
    open var bIncludeSearchableNames: Boolean
    open var bIncludeSoftManagementReferences: Boolean
    open var bIncludeHardManagementReferences: Boolean
    open fun clone(): AssetRegistryDependencyOptions

    companion object {
        fun C(Other: UObject): AssetRegistryDependencyOptions
        fun C(Other: Any): AssetRegistryDependencyOptions
    }
}

external interface `T$510` {
    var AssetDataList: Array<AssetData>
}

external interface `T$511` {
    var AssetDataList: Array<AssetData>
}

external interface `T$512` {
    var OutReferencers: Array<String>
    var `$`: Boolean
}

external interface `T$513` {
    var OutDependencies: Array<String>
    var `$`: Boolean
}

external interface `T$514` {
    var OutPathList: Array<String>
}

external interface `T$515` {
    var OutAssetData: Array<AssetData>
    var `$`: Boolean
}

external interface `T$516` {
    var OutAssetData: Array<AssetData>
    var `$`: Boolean
}

external interface `T$517` {
    var OutAssetData: Array<AssetData>
    var `$`: Boolean
}

external interface `T$518` {
    var OutAssetData: Array<AssetData>
    var `$`: Boolean
}

external interface `T$519` {
    var OutPathList: Array<String>
}

external interface `T$520` {
    var OutAssetData: Array<AssetData>
    var `$`: Boolean
}

external open class AssetRegistry : Interface {
    constructor()
    constructor(Outer: UObject)
    open fun UseFilterToExcludeAssets(AssetDataList: Array<AssetData> = definedExternally, Filter: ARFilter = definedExternally): `T$510`
    open fun SearchAllAssets(bSynchronousSearch: Boolean)
    open fun ScanPathsSynchronous(InPaths: Array<String>, bForceRescan: Boolean)
    open fun ScanModifiedAssetFiles(InFilePaths: Array<String>)
    open fun ScanFilesSynchronous(InFilePaths: Array<String>, bForceRescan: Boolean)
    open fun RunAssetsThroughFilter(AssetDataList: Array<AssetData> = definedExternally, Filter: ARFilter = definedExternally): `T$511`
    open fun PrioritizeSearchPath(PathToPrioritize: String)
    open fun K2_GetReferencers(PackageName: String, ReferenceOptions: AssetRegistryDependencyOptions, OutReferencers: Array<String> = definedExternally): `T$512`
    open fun K2_GetDependencies(PackageName: String, DependencyOptions: AssetRegistryDependencyOptions, OutDependencies: Array<String> = definedExternally): `T$513`
    open fun IsLoadingAssets(): Boolean
    open fun HasAssets(PackagePath: String, bRecursive: Boolean): Boolean
    open fun GetSubPaths(InBasePath: String, OutPathList: Array<String> = definedExternally, bInRecurse: Boolean = definedExternally): `T$514`
    open fun GetAssetsByPath(PackagePath: String, OutAssetData: Array<AssetData> = definedExternally, bRecursive: Boolean = definedExternally, bIncludeOnlyOnDiskAssets: Boolean = definedExternally): `T$515`
    open fun GetAssetsByPackageName(PackageName: String, OutAssetData: Array<AssetData> = definedExternally, bIncludeOnlyOnDiskAssets: Boolean = definedExternally): `T$516`
    open fun GetAssetsByClass(ClassName: String, OutAssetData: Array<AssetData> = definedExternally, bSearchSubClasses: Boolean = definedExternally): `T$517`
    open fun GetAssets(Filter: ARFilter, OutAssetData: Array<AssetData> = definedExternally): `T$518`
    open fun GetAssetByObjectPath(ObjectPath: String, bIncludeOnlyOnDiskAssets: Boolean): AssetData
    open fun GetAllCachedPaths(OutPathList: Array<String> = definedExternally): `T$519`
    open fun GetAllAssets(OutAssetData: Array<AssetData> = definedExternally, bIncludeOnlyOnDiskAssets: Boolean = definedExternally): `T$520`

    companion object {
        fun Load(ResourceName: String): AssetRegistry
        fun Find(Outer: UObject, ResourceName: String): AssetRegistry
        fun GetDefaultObject(): AssetRegistry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetRegistry
        fun C(Other: UObject): AssetRegistry
        fun C(Other: Any): AssetRegistry
    }
}

external open class AutoCompleteCommand {
    open var Command: String
    open var Desc: String
    open fun clone(): AutoCompleteCommand

    companion object {
        fun C(Other: UObject): AutoCompleteCommand
        fun C(Other: Any): AutoCompleteCommand
    }
}

external open class ConsoleSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaxScrollbackSize: Number
    open var ManualAutoCompleteList: Array<AutoCompleteCommand>
    open var AutoCompleteMapPaths: Array<String>
    open var BackgroundOpacityPercentage: Number
    open var bOrderTopToBottom: Boolean
    open var InputColor: Color
    open var HistoryColor: Color
    open var AutoCompleteCommandColor: Color
    open var AutoCompleteCVarColor: Color
    open var AutoCompleteFadedColor: Color

    companion object {
        fun Load(ResourceName: String): ConsoleSettings
        fun Find(Outer: UObject, ResourceName: String): ConsoleSettings
        fun GetDefaultObject(): ConsoleSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ConsoleSettings
        fun C(Other: UObject): ConsoleSettings
        fun C(Other: Any): ConsoleSettings
    }
}

external object ETwoPlayerSplitScreenType {
    var Horizontal: String /* "Horizontal" */
    var Vertical: String /* "Vertical" */
    var ETwoPlayerSplitScreenType_MAX: String /* "ETwoPlayerSplitScreenType_MAX" */
}

external object EThreePlayerSplitScreenType {
    var FavorTop: String /* "FavorTop" */
    var FavorBottom: String /* "FavorBottom" */
    var Vertical: String /* "Vertical" */
    var Horizontal: String /* "Horizontal" */
    var EThreePlayerSplitScreenType_MAX: String /* "EThreePlayerSplitScreenType_MAX" */
}

external object EFourPlayerSplitScreenType {
    var Grid: String /* "Grid" */
    var Vertical: String /* "Vertical" */
    var Horizontal: String /* "Horizontal" */
    var EFourPlayerSplitScreenType_MAX: String /* "EFourPlayerSplitScreenType_MAX" */
}

external open class GameModeName {
    open var Name: String
    open var GameMode: SoftClassPath
    open fun clone(): GameModeName

    companion object {
        fun C(Other: UObject): GameModeName
        fun C(Other: Any): GameModeName
    }
}

external open class GameMapsSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var EditorStartupMap: SoftObjectPath
    open var LocalMapOptions: String
    open var TransitionMap: SoftObjectPath
    open var bUseSplitscreen: Boolean
    open var TwoPlayerSplitscreenLayout: String /* "Horizontal" | "Vertical" | "ETwoPlayerSplitScreenType_MAX" */
    open var ThreePlayerSplitscreenLayout: String /* "FavorTop" | "FavorBottom" | "Vertical" | "Horizontal" | "EThreePlayerSplitScreenType_MAX" */
    open var FourPlayerSplitscreenLayout: String /* "Grid" | "Vertical" | "Horizontal" | "EFourPlayerSplitScreenType_MAX" */
    open var bOffsetPlayerGamepadIds: Boolean
    open var GameInstanceClass: SoftClassPath
    open var GameDefaultMap: SoftObjectPath
    open var ServerDefaultMap: SoftObjectPath
    open var GlobalDefaultGameMode: SoftClassPath
    open var GlobalDefaultServerGameMode: SoftClassPath
    open var GameModeMapPrefixes: Array<GameModeName>
    open var GameModeClassAliases: Array<GameModeName>

    companion object {
        fun Load(ResourceName: String): GameMapsSettings
        fun Find(Outer: UObject, ResourceName: String): GameMapsSettings
        fun GetDefaultObject(): GameMapsSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameMapsSettings
        fun C(Other: UObject): GameMapsSettings
        fun C(Other: Any): GameMapsSettings
    }
}

external open class GameNetworkManagerSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MinDynamicBandwidth: Number
    open var MaxDynamicBandwidth: Number
    open var TotalNetBandwidth: Number
    open var BadPingThreshold: Number
    open var bIsStandbyCheckingEnabled: Boolean
    open var StandbyRxCheatTime: Number
    open var StandbyTxCheatTime: Number
    open var PercentMissingForRxStandby: Number
    open var PercentMissingForTxStandby: Number
    open var PercentForBadPing: Number
    open var JoinInProgressStandbyWaitTime: Number

    companion object {
        fun Load(ResourceName: String): GameNetworkManagerSettings
        fun Find(Outer: UObject, ResourceName: String): GameNetworkManagerSettings
        fun GetDefaultObject(): GameNetworkManagerSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameNetworkManagerSettings
        fun C(Other: UObject): GameNetworkManagerSettings
        fun C(Other: Any): GameNetworkManagerSettings
    }
}

external open class GameSessionSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var MaxSpectators: Number
    open var MaxPlayers: Number
    open var bRequiresPushToTalk: Boolean

    companion object {
        fun Load(ResourceName: String): GameSessionSettings
        fun Find(Outer: UObject, ResourceName: String): GameSessionSettings
        fun GetDefaultObject(): GameSessionSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameSessionSettings
        fun C(Other: UObject): GameSessionSettings
        fun C(Other: Any): GameSessionSettings
    }
}

external open class GeneralEngineSettings : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): GeneralEngineSettings
        fun Find(Outer: UObject, ResourceName: String): GeneralEngineSettings
        fun GetDefaultObject(): GeneralEngineSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GeneralEngineSettings
        fun C(Other: UObject): GeneralEngineSettings
        fun C(Other: Any): GeneralEngineSettings
    }
}

external open class GeneralProjectSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var CompanyName: String
    open var CompanyDistinguishedName: String
    open var CopyrightNotice: String
    open var Description: String
    open var Homepage: String
    open var LicensingTerms: String
    open var PrivacyPolicy: String
    open var ProjectID: Guid
    open var ProjectName: String
    open var ProjectVersion: String
    open var SupportContact: String
    open var ProjectDisplayedTitle: String
    open var ProjectDebugTitleInfo: String
    open var bShouldWindowPreserveAspectRatio: Boolean
    open var bUseBorderlessWindow: Boolean
    open var bStartInVR: Boolean
    open var bStartInAR: Boolean
    open var bSupportAR: Boolean
    open var bAllowWindowResize: Boolean
    open var bAllowClose: Boolean
    open var bAllowMaximize: Boolean
    open var bAllowMinimize: Boolean

    companion object {
        fun Load(ResourceName: String): GeneralProjectSettings
        fun Find(Outer: UObject, ResourceName: String): GeneralProjectSettings
        fun GetDefaultObject(): GeneralProjectSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GeneralProjectSettings
        fun C(Other: UObject): GeneralProjectSettings
        fun C(Other: Any): GeneralProjectSettings
    }
}

external open class HudSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bShowHUD: Boolean
    open var DebugDisplay: Array<String>

    companion object {
        fun Load(ResourceName: String): HudSettings
        fun Find(Outer: UObject, ResourceName: String): HudSettings
        fun GetDefaultObject(): HudSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HudSettings
        fun C(Other: UObject): HudSettings
        fun C(Other: Any): HudSettings
    }
}

external open class HandlerComponentFactory : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): HandlerComponentFactory
        fun Find(Outer: UObject, ResourceName: String): HandlerComponentFactory
        fun GetDefaultObject(): HandlerComponentFactory
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HandlerComponentFactory
        fun C(Other: UObject): HandlerComponentFactory
        fun C(Other: Any): HandlerComponentFactory
    }
}

external open class NetAnalyticsDataConfig {
    open var DataName: String
    open var bEnabled: Boolean
    open fun clone(): NetAnalyticsDataConfig

    companion object {
        fun C(Other: UObject): NetAnalyticsDataConfig
        fun C(Other: Any): NetAnalyticsDataConfig
    }
}

external open class NetAnalyticsAggregatorConfig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var NetAnalyticsData: Array<NetAnalyticsDataConfig>

    companion object {
        fun Load(ResourceName: String): NetAnalyticsAggregatorConfig
        fun Find(Outer: UObject, ResourceName: String): NetAnalyticsAggregatorConfig
        fun GetDefaultObject(): NetAnalyticsAggregatorConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NetAnalyticsAggregatorConfig
        fun C(Other: UObject): NetAnalyticsAggregatorConfig
        fun C(Other: Any): NetAnalyticsAggregatorConfig
    }
}

external open class PacketHandlerProfileConfig : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Components: Array<String>

    companion object {
        fun Load(ResourceName: String): PacketHandlerProfileConfig
        fun Find(Outer: UObject, ResourceName: String): PacketHandlerProfileConfig
        fun GetDefaultObject(): PacketHandlerProfileConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PacketHandlerProfileConfig
        fun C(Other: UObject): PacketHandlerProfileConfig
        fun C(Other: Any): PacketHandlerProfileConfig
    }
}

external open class JsonUtilitiesDummyObject : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): JsonUtilitiesDummyObject
        fun Find(Outer: UObject, ResourceName: String): JsonUtilitiesDummyObject
        fun GetDefaultObject(): JsonUtilitiesDummyObject
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): JsonUtilitiesDummyObject
        fun C(Other: UObject): JsonUtilitiesDummyObject
        fun C(Other: Any): JsonUtilitiesDummyObject
    }
}

external object EPIEPreviewDeviceType {
    var Unset: String /* "Unset" */
    var Android: String /* "Android" */
    var IOS: String /* "IOS" */
    var TVOS: String /* "TVOS" */
    var Switch: String /* "Switch" */
    var MAX: String /* "MAX" */
}

external open class PIEPreviewDeviceSpecification : UObject {
    constructor()
    constructor(Outer: UObject)
    open var PreviewDeviceType: String /* "Unset" | "Android" | "IOS" | "TVOS" | "Switch" | "MAX" */
    open var GPUFamily: String
    open var GLVersion: String
    open var VulkanVersion: String
    open var AndroidVersion: String
    open var DeviceMake: String
    open var DeviceModel: String
    open var DeviceBuildNumber: String
    open var UsingHoudini: Boolean
    open var Hardware: String
    open var Chipset: String

    companion object {
        fun Load(ResourceName: String): PIEPreviewDeviceSpecification
        fun Find(Outer: UObject, ResourceName: String): PIEPreviewDeviceSpecification
        fun GetDefaultObject(): PIEPreviewDeviceSpecification
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PIEPreviewDeviceSpecification
        fun C(Other: UObject): PIEPreviewDeviceSpecification
        fun C(Other: Any): PIEPreviewDeviceSpecification
    }
}

external open class BlueprintFunctionLibrary : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BlueprintFunctionLibrary
        fun Find(Outer: UObject, ResourceName: String): BlueprintFunctionLibrary
        fun GetDefaultObject(): BlueprintFunctionLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlueprintFunctionLibrary
        fun C(Other: UObject): BlueprintFunctionLibrary
        fun C(Other: Any): BlueprintFunctionLibrary
    }
}

external interface `T$521` {
    var OutActors: Array<Actor>
}

external interface `T$522` {
    var GameplayTags: Array<GameplayTag>
}

external open class BlueprintGameplayTagLibrary : BlueprintFunctionLibrary {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): BlueprintGameplayTagLibrary
        fun Find(Outer: UObject, ResourceName: String): BlueprintGameplayTagLibrary
        fun GetDefaultObject(): BlueprintGameplayTagLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlueprintGameplayTagLibrary
        fun RemoveGameplayTag(TagContainer: GameplayTagContainer = definedExternally, Tag: GameplayTag = definedExternally): `T$409`
        fun NotEqual_TagTag(A: GameplayTag, B: String): Boolean
        fun NotEqual_TagContainerTagContainer(A: GameplayTagContainer, B: String): Boolean
        fun NotEqual_GameplayTagContainer(A: GameplayTagContainer, B: GameplayTagContainer): Boolean
        fun NotEqual_GameplayTag(A: GameplayTag, B: GameplayTag): Boolean
        fun MatchesTag(TagOne: GameplayTag, TagTwo: GameplayTag, bExactMatch: Boolean): Boolean
        fun MatchesAnyTags(TagOne: GameplayTag, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer
        fun MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag
        fun MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery
        fun MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer
        fun MakeGameplayTagContainerFromArray(GameplayTags: Array<GameplayTag>): GameplayTagContainer
        fun IsTagQueryEmpty(TagQuery: GameplayTagQuery): Boolean
        fun IsGameplayTagValid(GameplayTag: GameplayTag): Boolean
        fun HasTag(TagContainer: GameplayTagContainer, Tag: GameplayTag, bExactMatch: Boolean): Boolean
        fun HasAnyTags(TagContainer: GameplayTagContainer, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun HasAllTags(TagContainer: GameplayTagContainer, OtherContainer: GameplayTagContainer, bExactMatch: Boolean): Boolean
        fun GetTagName(GameplayTag: GameplayTag): String
        fun GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): Number
        fun GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): String
        fun GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): String
        fun GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject, ActorClass: UnrealEngineClass, GameplayTagQuery: GameplayTagQuery, OutActors: Array<Actor> = definedExternally): `T$521`
        fun EqualEqual_GameplayTagContainer(A: GameplayTagContainer, B: GameplayTagContainer): Boolean
        fun EqualEqual_GameplayTag(A: GameplayTag, B: GameplayTag): Boolean
        fun DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer, TagQuery: GameplayTagQuery): Boolean
        fun BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer, GameplayTags: Array<GameplayTag> = definedExternally): `T$522`
        fun AppendGameplayTagContainers(InOutTagContainer: GameplayTagContainer = definedExternally, InTagContainer: GameplayTagContainer = definedExternally): `T$407`
        fun AddGameplayTag(TagContainer: GameplayTagContainer = definedExternally, Tag: GameplayTag = definedExternally): `T$406`
        fun C(Other: UObject): BlueprintGameplayTagLibrary
        fun C(Other: Any): BlueprintGameplayTagLibrary
    }
}

external open class GameplayTagAssetInterface : Interface {
    constructor()
    constructor(Outer: UObject)
    open fun HasMatchingGameplayTag(TagToCheck: GameplayTag): Boolean
    open fun HasAnyMatchingGameplayTags(TagContainer: GameplayTagContainer): Boolean
    open fun HasAllMatchingGameplayTags(TagContainer: GameplayTagContainer): Boolean
    open fun GetOwnedGameplayTags(TagContainer: GameplayTagContainer = definedExternally): `T$406`

    companion object {
        fun Load(ResourceName: String): GameplayTagAssetInterface
        fun Find(Outer: UObject, ResourceName: String): GameplayTagAssetInterface
        fun GetDefaultObject(): GameplayTagAssetInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTagAssetInterface
        fun C(Other: UObject): GameplayTagAssetInterface
        fun C(Other: Any): GameplayTagAssetInterface
    }
}

external open class EditableGameplayTagQueryExpression : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression
        fun GetDefaultObject(): EditableGameplayTagQueryExpression
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression
        fun C(Other: UObject): EditableGameplayTagQueryExpression
        fun C(Other: Any): EditableGameplayTagQueryExpression
    }
}

external open class EditableGameplayTagQuery : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UserDescription: String
    open var RootExpression: EditableGameplayTagQueryExpression
    open var TagQueryExportText_Helper: GameplayTagQuery

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQuery
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQuery
        fun GetDefaultObject(): EditableGameplayTagQuery
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQuery
        fun C(Other: UObject): EditableGameplayTagQuery
        fun C(Other: Any): EditableGameplayTagQuery
    }
}

external open class EditableGameplayTagQueryExpression_AnyTagsMatch : EditableGameplayTagQueryExpression {
    constructor()
    constructor(Outer: UObject)
    open var Tags: GameplayTagContainer

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression_AnyTagsMatch
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression_AnyTagsMatch
        fun GetDefaultObject(): EditableGameplayTagQueryExpression_AnyTagsMatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression_AnyTagsMatch
        fun C(Other: UObject): EditableGameplayTagQueryExpression_AnyTagsMatch
        fun C(Other: Any): EditableGameplayTagQueryExpression_AnyTagsMatch
    }
}

external open class EditableGameplayTagQueryExpression_AllTagsMatch : EditableGameplayTagQueryExpression {
    constructor()
    constructor(Outer: UObject)
    open var Tags: GameplayTagContainer

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression_AllTagsMatch
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression_AllTagsMatch
        fun GetDefaultObject(): EditableGameplayTagQueryExpression_AllTagsMatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression_AllTagsMatch
        fun C(Other: UObject): EditableGameplayTagQueryExpression_AllTagsMatch
        fun C(Other: Any): EditableGameplayTagQueryExpression_AllTagsMatch
    }
}

external open class EditableGameplayTagQueryExpression_NoTagsMatch : EditableGameplayTagQueryExpression {
    constructor()
    constructor(Outer: UObject)
    open var Tags: GameplayTagContainer

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression_NoTagsMatch
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression_NoTagsMatch
        fun GetDefaultObject(): EditableGameplayTagQueryExpression_NoTagsMatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression_NoTagsMatch
        fun C(Other: UObject): EditableGameplayTagQueryExpression_NoTagsMatch
        fun C(Other: Any): EditableGameplayTagQueryExpression_NoTagsMatch
    }
}

external open class EditableGameplayTagQueryExpression_AnyExprMatch : EditableGameplayTagQueryExpression {
    constructor()
    constructor(Outer: UObject)
    open var Expressions: Array<EditableGameplayTagQueryExpression>

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression_AnyExprMatch
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression_AnyExprMatch
        fun GetDefaultObject(): EditableGameplayTagQueryExpression_AnyExprMatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression_AnyExprMatch
        fun C(Other: UObject): EditableGameplayTagQueryExpression_AnyExprMatch
        fun C(Other: Any): EditableGameplayTagQueryExpression_AnyExprMatch
    }
}

external open class EditableGameplayTagQueryExpression_AllExprMatch : EditableGameplayTagQueryExpression {
    constructor()
    constructor(Outer: UObject)
    open var Expressions: Array<EditableGameplayTagQueryExpression>

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression_AllExprMatch
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression_AllExprMatch
        fun GetDefaultObject(): EditableGameplayTagQueryExpression_AllExprMatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression_AllExprMatch
        fun C(Other: UObject): EditableGameplayTagQueryExpression_AllExprMatch
        fun C(Other: Any): EditableGameplayTagQueryExpression_AllExprMatch
    }
}

external open class EditableGameplayTagQueryExpression_NoExprMatch : EditableGameplayTagQueryExpression {
    constructor()
    constructor(Outer: UObject)
    open var Expressions: Array<EditableGameplayTagQueryExpression>

    companion object {
        fun Load(ResourceName: String): EditableGameplayTagQueryExpression_NoExprMatch
        fun Find(Outer: UObject, ResourceName: String): EditableGameplayTagQueryExpression_NoExprMatch
        fun GetDefaultObject(): EditableGameplayTagQueryExpression_NoExprMatch
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditableGameplayTagQueryExpression_NoExprMatch
        fun C(Other: UObject): EditableGameplayTagQueryExpression_NoExprMatch
        fun C(Other: Any): EditableGameplayTagQueryExpression_NoExprMatch
    }
}

external object EGameplayTagSourceType {
    var Native: String /* "Native" */
    var DefaultTagList: String /* "DefaultTagList" */
    var TagList: String /* "TagList" */
    var RestrictedTagList: String /* "RestrictedTagList" */
    var DataTable: String /* "DataTable" */
    var Invalid: String /* "Invalid" */
    var EGameplayTagSourceType_MAX: String /* "EGameplayTagSourceType_MAX" */
}

external open class TableRowBase {
    open fun clone(): TableRowBase

    companion object {
        fun C(Other: UObject): TableRowBase
        fun C(Other: Any): TableRowBase
    }
}

external open class GameplayTagTableRow : TableRowBase {
    open var Tag: String
    open var DevComment: String
    override fun clone(): GameplayTagTableRow

    companion object {
        fun C(Other: UObject): GameplayTagTableRow
        fun C(Other: Any): GameplayTagTableRow
    }
}

external open class GameplayTagsList : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ConfigFileName: String
    open var GameplayTagList: Array<GameplayTagTableRow>

    companion object {
        fun Load(ResourceName: String): GameplayTagsList
        fun Find(Outer: UObject, ResourceName: String): GameplayTagsList
        fun GetDefaultObject(): GameplayTagsList
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTagsList
        fun C(Other: UObject): GameplayTagsList
        fun C(Other: Any): GameplayTagsList
    }
}

external open class RestrictedGameplayTagTableRow : GameplayTagTableRow {
    open var bAllowNonRestrictedChildren: Boolean
    override fun clone(): RestrictedGameplayTagTableRow

    companion object {
        fun C(Other: UObject): RestrictedGameplayTagTableRow
        fun C(Other: Any): RestrictedGameplayTagTableRow
    }
}

external open class RestrictedGameplayTagsList : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ConfigFileName: String
    open var RestrictedGameplayTagList: Array<RestrictedGameplayTagTableRow>

    companion object {
        fun Load(ResourceName: String): RestrictedGameplayTagsList
        fun Find(Outer: UObject, ResourceName: String): RestrictedGameplayTagsList
        fun GetDefaultObject(): RestrictedGameplayTagsList
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RestrictedGameplayTagsList
        fun C(Other: UObject): RestrictedGameplayTagsList
        fun C(Other: Any): RestrictedGameplayTagsList
    }
}

external open class GameplayTagSource {
    open var SourceName: String
    open var SourceType: String /* "Native" | "DefaultTagList" | "TagList" | "RestrictedTagList" | "DataTable" | "Invalid" | "EGameplayTagSourceType_MAX" */
    open var SourceTagList: GameplayTagsList
    open var SourceRestrictedTagList: RestrictedGameplayTagsList
    open fun clone(): GameplayTagSource

    companion object {
        fun C(Other: UObject): GameplayTagSource
        fun C(Other: Any): GameplayTagSource
    }
}

external interface `T$523` {
    var OutRow: TableRowBase
    var `$`: Boolean
}

external interface `T$524` {
    var OutRowNames: Array<String>
}

external interface `T$525` {
    var OutRowNames: Array<String>
}

external open class DataTable : UObject {
    constructor()
    constructor(Outer: UObject)
    open var RowStruct: ScriptStruct
    open var bStripFromClientBuilds: Boolean
    open var bIgnoreExtraFields: Boolean
    open var bIgnoreMissingFields: Boolean
    open var ImportKeyField: String
    open var AssetImportData: AssetImportData
    open var ImportPath: String
    open var RowStructName: String
    open var RowsSerializedWithTags: Array<Number>
    open var TemporarilyReferencedObjects: Any
    open fun GetDataTableAsJSON(InDTExportFlags: Number): String
    open fun DoesDataTableRowExist(RowName: String): Boolean
    open fun FillDataTableFromCSVFile(CSVFilePath: String): Boolean
    open fun FillDataTableFromCSVString(CSVString: String): Boolean
    open fun FillDataTableFromJSONFile(JSONFilePath: String): Boolean
    open fun FillDataTableFromJSONString(JsonString: String): Boolean
    open fun GetDataTableColumnAsString(PropertyName: String): Array<String>
    open fun GetDataTableRowFromName(RowName: String, OutRow: TableRowBase = definedExternally): `T$523`
    open fun GetDataTableRowNames(OutRowNames: Array<String> = definedExternally): `T$524`

    companion object {
        fun Load(ResourceName: String): DataTable
        fun Find(Outer: UObject, ResourceName: String): DataTable
        fun GetDefaultObject(): DataTable
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DataTable
        fun C(Other: UObject): DataTable
        fun C(Other: Any): DataTable
        fun GetDataTableAsJSON(InDataTable: DataTable, InDTExportFlags: Number): String
        fun DoesDataTableRowExist(Table: DataTable, RowName: String): Boolean
        fun FillDataTableFromCSVFile(DataTable: DataTable, CSVFilePath: String): Boolean
        fun FillDataTableFromCSVString(DataTable: DataTable, CSVString: String): Boolean
        fun FillDataTableFromJSONFile(DataTable: DataTable, JSONFilePath: String): Boolean
        fun FillDataTableFromJSONString(DataTable: DataTable, JsonString: String): Boolean
        fun GetDataTableColumnAsString(DataTable: DataTable, PropertyName: String): Array<String>
        fun GetDataTableRowFromName(Table: DataTable, RowName: String, OutRow: TableRowBase = definedExternally): `T$523`
        fun GetDataTableRowNames(Table: DataTable, OutRowNames: Array<String> = definedExternally): `T$525`
    }
}

external open class GameplayTagsManager : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TagSources: Array<GameplayTagSource>
    open var GameplayTagTables: Array<DataTable>

    companion object {
        fun Load(ResourceName: String): GameplayTagsManager
        fun Find(Outer: UObject, ResourceName: String): GameplayTagsManager
        fun GetDefaultObject(): GameplayTagsManager
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTagsManager
        fun C(Other: UObject): GameplayTagsManager
        fun C(Other: Any): GameplayTagsManager
    }
}

external open class GameplayTagCategoryRemap {
    open var BaseCategory: String
    open var RemapCategories: Array<String>
    open fun clone(): GameplayTagCategoryRemap

    companion object {
        fun C(Other: UObject): GameplayTagCategoryRemap
        fun C(Other: Any): GameplayTagCategoryRemap
    }
}

external open class GameplayTagRedirect {
    open var OldTagName: String
    open var NewTagName: String
    open fun clone(): GameplayTagRedirect

    companion object {
        fun C(Other: UObject): GameplayTagRedirect
        fun C(Other: Any): GameplayTagRedirect
    }
}

external open class RestrictedConfigInfo {
    open var RestrictedConfigName: String
    open var Owners: Array<String>
    open fun clone(): RestrictedConfigInfo

    companion object {
        fun C(Other: UObject): RestrictedConfigInfo
        fun C(Other: Any): RestrictedConfigInfo
    }
}

external open class GameplayTagsSettings : GameplayTagsList {
    constructor()
    constructor(Outer: UObject)
    open var ImportTagsFromConfig: Boolean
    open var WarnOnInvalidTags: Boolean
    open var FastReplication: Boolean
    open var InvalidTagCharacters: String
    open var CategoryRemapping: Array<GameplayTagCategoryRemap>
    open var GameplayTagTableList: Array<SoftObjectPath>
    open var GameplayTagRedirects: Array<GameplayTagRedirect>
    open var CommonlyReplicatedTags: Array<String>
    open var NumBitsForContainerSize: Number
    open var NetIndexFirstBitSegment: Number
    open var RestrictedConfigFiles: Array<RestrictedConfigInfo>
    open var RestrictedTagList: String

    companion object {
        fun Load(ResourceName: String): GameplayTagsSettings
        fun Find(Outer: UObject, ResourceName: String): GameplayTagsSettings
        fun GetDefaultObject(): GameplayTagsSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTagsSettings
        fun C(Other: UObject): GameplayTagsSettings
        fun C(Other: Any): GameplayTagsSettings
    }
}

external open class GameplayTagsDeveloperSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DeveloperConfigName: String

    companion object {
        fun Load(ResourceName: String): GameplayTagsDeveloperSettings
        fun Find(Outer: UObject, ResourceName: String): GameplayTagsDeveloperSettings
        fun GetDefaultObject(): GameplayTagsDeveloperSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameplayTagsDeveloperSettings
        fun C(Other: UObject): GameplayTagsDeveloperSettings
        fun C(Other: Any): GameplayTagsDeveloperSettings
    }
}

external open class AbstractNavData(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : NavigationData {
    companion object {
        fun GetDefaultObject(): AbstractNavData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AbstractNavData
        fun C(Other: UObject): AbstractNavData
        fun C(Other: Any): AbstractNavData
    }
}

external open class CrowdManagerBase : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): CrowdManagerBase
        fun Find(Outer: UObject, ResourceName: String): CrowdManagerBase
        fun GetDefaultObject(): CrowdManagerBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CrowdManagerBase
        fun C(Other: UObject): CrowdManagerBase
        fun C(Other: Any): CrowdManagerBase
    }
}

external open class NavArea_Default : NavArea {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavArea_Default
        fun Find(Outer: UObject, ResourceName: String): NavArea_Default
        fun GetDefaultObject(): NavArea_Default
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavArea_Default
        fun C(Other: UObject): NavArea_Default
        fun C(Other: Any): NavArea_Default
    }
}

external open class NavArea_LowHeight : NavArea {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavArea_LowHeight
        fun Find(Outer: UObject, ResourceName: String): NavArea_LowHeight
        fun GetDefaultObject(): NavArea_LowHeight
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavArea_LowHeight
        fun C(Other: UObject): NavArea_LowHeight
        fun C(Other: Any): NavArea_LowHeight
    }
}

external open class NavArea_Null : NavArea {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavArea_Null
        fun Find(Outer: UObject, ResourceName: String): NavArea_Null
        fun GetDefaultObject(): NavArea_Null
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavArea_Null
        fun C(Other: UObject): NavArea_Null
        fun C(Other: Any): NavArea_Null
    }
}

external open class NavArea_Obstacle : NavArea {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavArea_Obstacle
        fun Find(Outer: UObject, ResourceName: String): NavArea_Obstacle
        fun GetDefaultObject(): NavArea_Obstacle
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavArea_Obstacle
        fun C(Other: UObject): NavArea_Obstacle
        fun C(Other: Any): NavArea_Obstacle
    }
}

external open class NavAreaMeta : NavArea {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavAreaMeta
        fun Find(Outer: UObject, ResourceName: String): NavAreaMeta
        fun GetDefaultObject(): NavAreaMeta
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavAreaMeta
        fun C(Other: UObject): NavAreaMeta
        fun C(Other: Any): NavAreaMeta
    }
}

external open class NavAreaMeta_SwitchByAgent : NavAreaMeta {
    constructor()
    constructor(Outer: UObject)
    open var Agent0Area: UnrealEngineClass
    open var Agent1Area: UnrealEngineClass
    open var Agent2Area: UnrealEngineClass
    open var Agent3Area: UnrealEngineClass
    open var Agent4Area: UnrealEngineClass
    open var Agent5Area: UnrealEngineClass
    open var Agent6Area: UnrealEngineClass
    open var Agent7Area: UnrealEngineClass
    open var Agent8Area: UnrealEngineClass
    open var Agent9Area: UnrealEngineClass
    open var Agent10Area: UnrealEngineClass
    open var Agent11Area: UnrealEngineClass
    open var Agent12Area: UnrealEngineClass
    open var Agent13Area: UnrealEngineClass
    open var Agent14Area: UnrealEngineClass
    open var Agent15Area: UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): NavAreaMeta_SwitchByAgent
        fun Find(Outer: UObject, ResourceName: String): NavAreaMeta_SwitchByAgent
        fun GetDefaultObject(): NavAreaMeta_SwitchByAgent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavAreaMeta_SwitchByAgent
        fun C(Other: UObject): NavAreaMeta_SwitchByAgent
        fun C(Other: Any): NavAreaMeta_SwitchByAgent
    }
}

external open class NavCollisionCylinder {
    open var Offset: Vector
    open var Radius: Number
    open var Height: Number
    open fun clone(): NavCollisionCylinder

    companion object {
        fun C(Other: UObject): NavCollisionCylinder
        fun C(Other: Any): NavCollisionCylinder
    }
}

external open class NavCollisionBox {
    open var Offset: Vector
    open var Extent: Vector
    open fun clone(): NavCollisionBox

    companion object {
        fun C(Other: UObject): NavCollisionBox
        fun C(Other: Any): NavCollisionBox
    }
}

external open class NavCollision : NavCollisionBase {
    constructor()
    constructor(Outer: UObject)
    open var CylinderCollision: Array<NavCollisionCylinder>
    open var BoxCollision: Array<NavCollisionBox>
    open var AreaClass: UnrealEngineClass
    open var bGatherConvexGeometry: Boolean
    open var bCreateOnClient: Boolean

    companion object {
        fun Load(ResourceName: String): NavCollision
        fun Find(Outer: UObject, ResourceName: String): NavCollision
        fun GetDefaultObject(): NavCollision
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavCollision
        fun C(Other: UObject): NavCollision
        fun C(Other: Any): NavCollision
    }
}

external open class NavigationGraph(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : NavigationData {
    companion object {
        fun GetDefaultObject(): NavigationGraph
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationGraph
        fun C(Other: UObject): NavigationGraph
        fun C(Other: Any): NavigationGraph
    }
}

external open class NavigationGraphNode(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    companion object {
        fun GetDefaultObject(): NavigationGraphNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationGraphNode
        fun C(Other: UObject): NavigationGraphNode
        fun C(Other: Any): NavigationGraphNode
    }
}

external open class NavGraphNode {
    open var Owner: UObject
    open fun clone(): NavGraphNode

    companion object {
        fun C(Other: UObject): NavGraphNode
        fun C(Other: Any): NavGraphNode
    }
}

external open class NavigationGraphNodeComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var UNode: NavGraphNode
    open var NextNodeComponent: NavigationGraphNodeComponent
    open var PrevNodeComponent: NavigationGraphNodeComponent

    companion object {
        fun Load(ResourceName: String): NavigationGraphNodeComponent
        fun Find(Outer: UObject, ResourceName: String): NavigationGraphNodeComponent
        fun GetDefaultObject(): NavigationGraphNodeComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationGraphNodeComponent
        fun C(Other: UObject): NavigationGraphNodeComponent
        fun C(Other: Any): NavigationGraphNodeComponent
    }
}

external open class NavigationInvokerComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var TileGenerationRadius: Number
    open var TileRemovalRadius: Number

    companion object {
        fun Load(ResourceName: String): NavigationInvokerComponent
        fun Find(Outer: UObject, ResourceName: String): NavigationInvokerComponent
        fun GetDefaultObject(): NavigationInvokerComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationInvokerComponent
        fun C(Other: UObject): NavigationInvokerComponent
        fun C(Other: Any): NavigationInvokerComponent
    }
}

external open class NavigationPathGenerator : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavigationPathGenerator
        fun Find(Outer: UObject, ResourceName: String): NavigationPathGenerator
        fun GetDefaultObject(): NavigationPathGenerator
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationPathGenerator
        fun C(Other: UObject): NavigationPathGenerator
        fun C(Other: Any): NavigationPathGenerator
    }
}

external object ENavDataGatheringModeConfig {
    var Invalid: String /* "Invalid" */
    var Instant: String /* "Instant" */
    var Lazy: String /* "Lazy" */
    var ENavDataGatheringModeConfig_MAX: String /* "ENavDataGatheringModeConfig_MAX" */
}

external object FNavigationSystemRunMode {
    var InvalidMode: String /* "InvalidMode" */
    var GameMode: String /* "GameMode" */
    var EditorMode: String /* "EditorMode" */
    var SimulationMode: String /* "SimulationMode" */
    var PIEMode: String /* "PIEMode" */
    var FNavigationSystemRunMode_MAX: String /* "FNavigationSystemRunMode_MAX" */
}

external open class NavMeshBoundsVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Volume {
    open var SupportedAgents: NavAgentSelector

    companion object {
        fun GetDefaultObject(): NavMeshBoundsVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavMeshBoundsVolume
        fun C(Other: UObject): NavMeshBoundsVolume
        fun C(Other: Any): NavMeshBoundsVolume
    }
}

external object ENavigationQueryResult {
    var Invalid: String /* "Invalid" */
    var Error: String /* "Error" */
    var Fail: String /* "Fail" */
    var Success: String /* "Success" */
    var ENavigationQueryResult_MAX: String /* "ENavigationQueryResult_MAX" */
}

external interface `T$526` {
    var HitLocation: Vector
    var `$`: Boolean
}

external interface `T$527` {
    var ProjectedLocation: Vector
    var `$`: Boolean
}

external interface `T$528` {
    var RandomLocation: Vector
    var `$`: Boolean
}

external interface `T$529` {
    var PathLength: Number
    var `$`: String /* "Invalid" | "Error" | "Fail" | "Success" | "ENavigationQueryResult_MAX" */
}

external interface `T$530` {
    var PathCost: Number
    var `$`: String /* "Invalid" | "Error" | "Fail" | "Success" | "ENavigationQueryResult_MAX" */
}

external open class NavigationSystemV1 : NavigationSystemBase {
    constructor()
    constructor(Outer: UObject)
    open var MainNavData: NavigationData
    open var AbstractNavData: NavigationData
    open var CrowdManagerClass: Class
    open var bAutoCreateNavigationData: Boolean
    open var bSpawnNavDataInNavBoundsLevel: Boolean
    open var bAllowClientSideNavigation: Boolean
    open var bShouldDiscardSubLevelNavData: Boolean
    open var bTickWhilePaused: Boolean
    open var bSupportRebuilding: Boolean
    open var bInitialBuildingLocked: Boolean
    open var bSkipAgentHeightCheckWhenPickingNavData: Boolean
    open var DataGatheringMode: String /* "Invalid" | "Instant" | "Lazy" | "ENavDataGatheringModeConfig_MAX" */
    open var bGenerateNavigationOnlyAroundNavigationInvokers: Boolean
    open var ActiveTilesUpdateInterval: Number
    open var SupportedAgents: Array<NavDataConfig>
    open var DirtyAreasUpdateFreq: Number
    open var NavDataSet: Array<NavigationData>
    open var NavDataRegistrationQueue: Array<NavigationData>
    open var OnNavDataRegisteredEvent: UnrealEngineMulticastDelegate<(NavData: NavigationData) -> Unit>
    open var OnNavigationGenerationFinishedDelegate: UnrealEngineMulticastDelegate<(NavData: NavigationData) -> Unit>
    open var OperationMode: String /* "InvalidMode" | "GameMode" | "EditorMode" | "SimulationMode" | "PIEMode" | "FNavigationSystemRunMode_MAX" */
    open fun UnregisterNavigationInvoker(Invoker: Actor)
    open fun SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: Number)
    open fun SetGeometryGatheringMode(NewMode: String /* "Invalid" | "Instant" | "Lazy" | "ENavDataGatheringModeConfig_MAX" */)
    open fun ResetMaxSimultaneousTileGenerationJobsCount()
    open fun RegisterNavigationInvoker(Invoker: Actor, TileGenerationRadius: Number, TileRemovalRadius: Number)
    open fun OnNavigationBoundsUpdated(NavVolume: NavMeshBoundsVolume)
    open fun K2_ReplaceAreaInOctreeData(UObject: UObject, OldArea: UnrealEngineClass, NewArea: UnrealEngineClass): Boolean

    companion object {
        fun Load(ResourceName: String): NavigationSystemV1
        fun Find(Outer: UObject, ResourceName: String): NavigationSystemV1
        fun GetDefaultObject(): NavigationSystemV1
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationSystemV1
        fun SimpleMoveToLocation(Controller: Controller, Goal: Vector)
        fun SimpleMoveToActor(Controller: Controller, Goal: Actor)
        fun ProjectPointToNavigation(WorldContextObject: UObject, Point: Vector, NavData: NavigationData, FilterClass: UnrealEngineClass, QueryExtent: Vector): Vector
        fun NavigationRaycast(WorldContextObject: UObject, RayStart: Vector, RayEnd: Vector, HitLocation: Vector = definedExternally, FilterClass: UnrealEngineClass = definedExternally, Querier: Controller = definedExternally): `T$526`
        fun K2_ProjectPointToNavigation(WorldContextObject: UObject, Point: Vector, ProjectedLocation: Vector = definedExternally, NavData: NavigationData = definedExternally, FilterClass: UnrealEngineClass = definedExternally, QueryExtent: Vector = definedExternally): `T$527`
        fun K2_GetRandomReachablePointInRadius(WorldContextObject: UObject, Origin: Vector, RandomLocation: Vector = definedExternally, Radius: Number = definedExternally, NavData: NavigationData = definedExternally, FilterClass: UnrealEngineClass = definedExternally): `T$528`
        fun K2_GetRandomPointInNavigableRadius(WorldContextObject: UObject, Origin: Vector, RandomLocation: Vector = definedExternally, Radius: Number = definedExternally, NavData: NavigationData = definedExternally, FilterClass: UnrealEngineClass = definedExternally): `T$528`
        fun K2_GetRandomLocationInNavigableRadius(WorldContextObject: UObject, Origin: Vector, RandomLocation: Vector = definedExternally, Radius: Number = definedExternally, NavData: NavigationData = definedExternally, FilterClass: UnrealEngineClass = definedExternally): `T$528`
        fun IsNavigationBeingBuiltOrLocked(WorldContextObject: UObject): Boolean
        fun IsNavigationBeingBuilt(WorldContextObject: UObject): Boolean
        fun GetRandomReachablePointInRadius(WorldContextObject: UObject, Origin: Vector, Radius: Number, NavData: NavigationData, FilterClass: UnrealEngineClass): Vector
        fun GetRandomPointInNavigableRadius(WorldContextObject: UObject, Origin: Vector, Radius: Number, NavData: NavigationData, FilterClass: UnrealEngineClass): Vector
        fun GetPathLength(WorldContextObject: UObject, PathStart: Vector, PathEnd: Vector, PathLength: Number = definedExternally, NavData: NavigationData = definedExternally, FilterClass: UnrealEngineClass = definedExternally): `T$529`
        fun GetPathCost(WorldContextObject: UObject, PathStart: Vector, PathEnd: Vector, PathCost: Number = definedExternally, NavData: NavigationData = definedExternally, FilterClass: UnrealEngineClass = definedExternally): `T$530`
        fun GetNavigationSystem(WorldContextObject: UObject): NavigationSystemV1
        fun FindPathToLocationSynchronously(WorldContextObject: UObject, PathStart: Vector, PathEnd: Vector, PathfindingContext: Actor, FilterClass: UnrealEngineClass): NavigationPath
        fun FindPathToActorSynchronously(WorldContextObject: UObject, PathStart: Vector, GoalActor: Actor, TetherDistance: Number, PathfindingContext: Actor, FilterClass: UnrealEngineClass): NavigationPath
        fun C(Other: UObject): NavigationSystemV1
        fun C(Other: Any): NavigationSystemV1
    }
}

external open class NavigationSystemModuleConfig : NavigationSystemConfig {
    constructor()
    constructor(Outer: UObject)
    open var bStrictlyStatic: Boolean
    open var bCreateOnClient: Boolean
    open var bAutoSpawnMissingNavData: Boolean
    open var bSpawnNavDataInNavBoundsLevel: Boolean

    companion object {
        fun Load(ResourceName: String): NavigationSystemModuleConfig
        fun Find(Outer: UObject, ResourceName: String): NavigationSystemModuleConfig
        fun GetDefaultObject(): NavigationSystemModuleConfig
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationSystemModuleConfig
        fun C(Other: UObject): NavigationSystemModuleConfig
        fun C(Other: Any): NavigationSystemModuleConfig
    }
}

external open class NavTestRenderingComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavTestRenderingComponent
        fun Find(Outer: UObject, ResourceName: String): NavTestRenderingComponent
        fun GetDefaultObject(): NavTestRenderingComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavTestRenderingComponent
        fun C(Other: UObject): NavTestRenderingComponent
        fun C(Other: Any): NavTestRenderingComponent
    }
}

external object ENavCostDisplay {
    var TotalCost: String /* "TotalCost" */
    var HeuristicOnly: String /* "HeuristicOnly" */
    var RealCostOnly: String /* "RealCostOnly" */
    var ENavCostDisplay_MAX: String /* "ENavCostDisplay_MAX" */
}

external open class NavigationTestingActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var CapsuleComponent: CapsuleComponent
    open var EdRenderComp: NavTestRenderingComponent
    open var InvokerComponent: NavigationInvokerComponent
    open var bActAsNavigationInvoker: Boolean
    open var NavAgentProps: NavAgentProperties
    open var QueryingExtent: Vector
    open var MyNavData: NavigationData
    open var ProjectedLocation: Vector
    open var bProjectedLocationValid: Boolean
    open var bSearchStart: Boolean
    open var bBacktracking: Boolean
    open var bUseHierarchicalPathfinding: Boolean
    open var bGatherDetailedInfo: Boolean
    open var bDrawDistanceToWall: Boolean
    open var bShowNodePool: Boolean
    open var bShowBestPath: Boolean
    open var bShowDiffWithPreviousStep: Boolean
    open var bShouldBeVisibleInGame: Boolean
    open var CostDisplayMode: String /* "TotalCost" | "HeuristicOnly" | "RealCostOnly" | "ENavCostDisplay_MAX" */
    open var TextCanvasOffset: Vector2D
    open var bPathExist: Boolean
    open var bPathIsPartial: Boolean
    open var bPathSearchOutOfNodes: Boolean
    open var PathfindingTime: Number
    open var PathCost: Number
    open var PathfindingSteps: Number
    open var OtherActor: NavigationTestingActor
    open var FilterClass: UnrealEngineClass
    open var ShowStepIndex: Number
    open var OffsetFromCornersDistance: Number

    companion object {
        fun GetDefaultObject(): NavigationTestingActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavigationTestingActor
        fun C(Other: UObject): NavigationTestingActor
        fun C(Other: Any): NavigationTestingActor
    }
}

external object ENavLinkDirection {
    var BothWays: String /* "BothWays" */
    var LeftToRight: String /* "LeftToRight" */
    var RightToLeft: String /* "RightToLeft" */
    var ENavLinkDirection_MAX: String /* "ENavLinkDirection_MAX" */
}

external open class NavigationLinkBase {
    open var LeftProjectHeight: Number
    open var MaxFallDownLength: Number
    open var Direction: String /* "BothWays" | "LeftToRight" | "RightToLeft" | "ENavLinkDirection_MAX" */
    open var SnapRadius: Number
    open var SnapHeight: Number
    open var SupportedAgents: NavAgentSelector
    open var bSupportsAgent0: Boolean
    open var bSupportsAgent1: Boolean
    open var bSupportsAgent2: Boolean
    open var bSupportsAgent3: Boolean
    open var bSupportsAgent4: Boolean
    open var bSupportsAgent5: Boolean
    open var bSupportsAgent6: Boolean
    open var bSupportsAgent7: Boolean
    open var bSupportsAgent8: Boolean
    open var bSupportsAgent9: Boolean
    open var bSupportsAgent10: Boolean
    open var bSupportsAgent11: Boolean
    open var bSupportsAgent12: Boolean
    open var bSupportsAgent13: Boolean
    open var bSupportsAgent14: Boolean
    open var bSupportsAgent15: Boolean
    open var Description: String
    open var bUseSnapHeight: Boolean
    open var bSnapToCheapestArea: Boolean
    open var bCustomFlag0: Boolean
    open var bCustomFlag1: Boolean
    open var bCustomFlag2: Boolean
    open var bCustomFlag3: Boolean
    open var bCustomFlag4: Boolean
    open var bCustomFlag5: Boolean
    open var bCustomFlag6: Boolean
    open var bCustomFlag7: Boolean
    open var AreaClass: UnrealEngineClass
    open fun clone(): NavigationLinkBase

    companion object {
        fun C(Other: UObject): NavigationLinkBase
        fun C(Other: Any): NavigationLinkBase
    }
}

external open class NavigationLink : NavigationLinkBase {
    open var Left: Vector
    open var Right: Vector
    override fun clone(): NavigationLink

    companion object {
        fun C(Other: UObject): NavigationLink
        fun C(Other: Any): NavigationLink
    }
}

external open class NavLinkComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var Links: Array<NavigationLink>

    companion object {
        fun Load(ResourceName: String): NavLinkComponent
        fun Find(Outer: UObject, ResourceName: String): NavLinkComponent
        fun GetDefaultObject(): NavLinkComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkComponent
        fun C(Other: UObject): NavLinkComponent
        fun C(Other: Any): NavLinkComponent
    }
}

external open class NavRelevantComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var bAttachToOwnersRoot: Boolean
    open var CachedNavParent: UObject
    open fun SetNavigationRelevancy(bRelevant: Boolean)

    companion object {
        fun Load(ResourceName: String): NavRelevantComponent
        fun Find(Outer: UObject, ResourceName: String): NavRelevantComponent
        fun GetDefaultObject(): NavRelevantComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavRelevantComponent
        fun C(Other: UObject): NavRelevantComponent
        fun C(Other: Any): NavRelevantComponent
    }
}

external open class NavLinkCustomComponent : NavRelevantComponent {
    constructor()
    constructor(Outer: UObject)
    open var NavLinkUserId: Any
    open var EnabledAreaClass: UnrealEngineClass
    open var DisabledAreaClass: UnrealEngineClass
    open var SupportedAgents: NavAgentSelector
    open var LinkRelativeStart: Vector
    open var LinkRelativeEnd: Vector
    open var LinkDirection: String /* "BothWays" | "LeftToRight" | "RightToLeft" | "ENavLinkDirection_MAX" */
    open var bLinkEnabled: Boolean
    open var bNotifyWhenEnabled: Boolean
    open var bNotifyWhenDisabled: Boolean
    open var bCreateBoxObstacle: Boolean
    open var ObstacleOffset: Vector
    open var ObstacleExtent: Vector
    open var ObstacleAreaClass: UnrealEngineClass
    open var BroadcastRadius: Number
    open var BroadcastInterval: Number
    open var BroadcastChannel: String /* "ECC_WorldStatic" | "ECC_WorldDynamic" | "ECC_Pawn" | "ECC_Visibility" | "ECC_Camera" | "ECC_PhysicsBody" | "ECC_Vehicle" | "ECC_Destructible" | "ECC_EngineTraceChannel1" | "ECC_EngineTraceChannel2" | "ECC_EngineTraceChannel3" | "ECC_EngineTraceChannel4" | "ECC_EngineTraceChannel5" | "ECC_EngineTraceChannel6" | "ECC_GameTraceChannel1" | "ECC_GameTraceChannel2" | "ECC_GameTraceChannel3" | "ECC_GameTraceChannel4" | "ECC_GameTraceChannel5" | "ECC_GameTraceChannel6" | "ECC_GameTraceChannel7" | "ECC_GameTraceChannel8" | "ECC_GameTraceChannel9" | "ECC_GameTraceChannel10" | "ECC_GameTraceChannel11" | "ECC_GameTraceChannel12" | "ECC_GameTraceChannel13" | "ECC_GameTraceChannel14" | "ECC_GameTraceChannel15" | "ECC_GameTraceChannel16" | "ECC_GameTraceChannel17" | "ECC_GameTraceChannel18" | "ECC_OverlapAll_Deprecated" | "ECC_MAX" */

    companion object {
        fun Load(ResourceName: String): NavLinkCustomComponent
        fun Find(Outer: UObject, ResourceName: String): NavLinkCustomComponent
        fun GetDefaultObject(): NavLinkCustomComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkCustomComponent
        fun C(Other: UObject): NavLinkCustomComponent
        fun C(Other: Any): NavLinkCustomComponent
    }
}

external open class NavLinkCustomInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavLinkCustomInterface
        fun Find(Outer: UObject, ResourceName: String): NavLinkCustomInterface
        fun GetDefaultObject(): NavLinkCustomInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkCustomInterface
        fun C(Other: UObject): NavLinkCustomInterface
        fun C(Other: Any): NavLinkCustomInterface
    }
}

external open class NavLinkHostInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavLinkHostInterface
        fun Find(Outer: UObject, ResourceName: String): NavLinkHostInterface
        fun GetDefaultObject(): NavLinkHostInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkHostInterface
        fun C(Other: UObject): NavLinkHostInterface
        fun C(Other: Any): NavLinkHostInterface
    }
}

external open class NavLinkRenderingComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavLinkRenderingComponent
        fun Find(Outer: UObject, ResourceName: String): NavLinkRenderingComponent
        fun GetDefaultObject(): NavLinkRenderingComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkRenderingComponent
        fun C(Other: UObject): NavLinkRenderingComponent
        fun C(Other: Any): NavLinkRenderingComponent
    }
}

external open class NavigationSegmentLink : NavigationLinkBase {
    open var LeftStart: Vector
    open var LeftEnd: Vector
    open var RightStart: Vector
    open var RightEnd: Vector
    override fun clone(): NavigationSegmentLink

    companion object {
        fun C(Other: UObject): NavigationSegmentLink
        fun C(Other: Any): NavigationSegmentLink
    }
}

external open class NavLinkDefinition : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Links: Array<NavigationLink>
    open var SegmentLinks: Array<NavigationSegmentLink>

    companion object {
        fun Load(ResourceName: String): NavLinkDefinition
        fun Find(Outer: UObject, ResourceName: String): NavLinkDefinition
        fun GetDefaultObject(): NavLinkDefinition
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkDefinition
        fun C(Other: UObject): NavLinkDefinition
        fun C(Other: Any): NavLinkDefinition
    }
}

external open class NavLinkTrivial : NavLinkDefinition {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavLinkTrivial
        fun Find(Outer: UObject, ResourceName: String): NavLinkTrivial
        fun GetDefaultObject(): NavLinkTrivial
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavLinkTrivial
        fun C(Other: UObject): NavLinkTrivial
        fun C(Other: Any): NavLinkTrivial
    }
}

external open class NavMeshRenderingComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavMeshRenderingComponent
        fun Find(Outer: UObject, ResourceName: String): NavMeshRenderingComponent
        fun GetDefaultObject(): NavMeshRenderingComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavMeshRenderingComponent
        fun C(Other: UObject): NavMeshRenderingComponent
        fun C(Other: Any): NavMeshRenderingComponent
    }
}

external open class NavModifierComponent : NavRelevantComponent {
    constructor()
    constructor(Outer: UObject)
    open var AreaClass: UnrealEngineClass
    open var FailsafeExtent: Vector
    open var bIncludeAgentHeight: Boolean
    open fun SetAreaClass(NewAreaClass: UnrealEngineClass)

    companion object {
        fun Load(ResourceName: String): NavModifierComponent
        fun Find(Outer: UObject, ResourceName: String): NavModifierComponent
        fun GetDefaultObject(): NavModifierComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavModifierComponent
        fun C(Other: UObject): NavModifierComponent
        fun C(Other: Any): NavModifierComponent
    }
}

external open class NavModifierVolume(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Volume {
    open var AreaClass: UnrealEngineClass
    open fun SetAreaClass(NewAreaClass: UnrealEngineClass)

    companion object {
        fun GetDefaultObject(): NavModifierVolume
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavModifierVolume
        fun C(Other: UObject): NavModifierVolume
        fun C(Other: Any): NavModifierVolume
    }
}

external open class NavNodeInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NavNodeInterface
        fun Find(Outer: UObject, ResourceName: String): NavNodeInterface
        fun GetDefaultObject(): NavNodeInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavNodeInterface
        fun C(Other: UObject): NavNodeInterface
        fun C(Other: Any): NavNodeInterface
    }
}

external open class NavSystemConfigOverride(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var SpriteComponent: BillboardComponent
    open var NavigationSystemConfig: NavigationSystemConfig
    open var bLoadOnClient: Boolean
    open fun ApplyChanges()

    companion object {
        fun GetDefaultObject(): NavSystemConfigOverride
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NavSystemConfigOverride
        fun C(Other: UObject): NavSystemConfigOverride
        fun C(Other: Any): NavSystemConfigOverride
    }
}

external open class RecastFilter_UseDefaultArea : NavigationQueryFilter {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): RecastFilter_UseDefaultArea
        fun Find(Outer: UObject, ResourceName: String): RecastFilter_UseDefaultArea
        fun GetDefaultObject(): RecastFilter_UseDefaultArea
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RecastFilter_UseDefaultArea
        fun C(Other: UObject): RecastFilter_UseDefaultArea
        fun C(Other: Any): RecastFilter_UseDefaultArea
    }
}

external open class RecastNavMeshDataChunk : NavigationDataChunk {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): RecastNavMeshDataChunk
        fun Find(Outer: UObject, ResourceName: String): RecastNavMeshDataChunk
        fun GetDefaultObject(): RecastNavMeshDataChunk
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RecastNavMeshDataChunk
        fun C(Other: UObject): RecastNavMeshDataChunk
        fun C(Other: Any): RecastNavMeshDataChunk
    }
}

external open class PIEPreviewSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var WindowPosX: Number
    open var WindowPosY: Number
    open var WindowScalingFactor: Number

    companion object {
        fun Load(ResourceName: String): PIEPreviewSettings
        fun Find(Outer: UObject, ResourceName: String): PIEPreviewSettings
        fun GetDefaultObject(): PIEPreviewSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PIEPreviewSettings
        fun C(Other: UObject): PIEPreviewSettings
        fun C(Other: Any): PIEPreviewSettings
    }
}

external open class ClothingAssetCustomData : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingAssetCustomData
        fun Find(Outer: UObject, ResourceName: String): ClothingAssetCustomData
        fun GetDefaultObject(): ClothingAssetCustomData
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingAssetCustomData
        fun C(Other: UObject): ClothingAssetCustomData
        fun C(Other: Any): ClothingAssetCustomData
    }
}

external object EClothingWindMethod {
    var Legacy: String /* "Legacy" */
    var Accurate: String /* "Accurate" */
    var EClothingWindMethod_MAX: String /* "EClothingWindMethod_MAX" */
}

external open class ClothConstraintSetup {
    open var Stiffness: Number
    open var StiffnessMultiplier: Number
    open var StretchLimit: Number
    open var CompressionLimit: Number
    open fun clone(): ClothConstraintSetup

    companion object {
        fun C(Other: UObject): ClothConstraintSetup
        fun C(Other: Any): ClothConstraintSetup
    }
}

external open class ClothConfig {
    open var WindMethod: String /* "Legacy" | "Accurate" | "EClothingWindMethod_MAX" */
    open var VerticalConstraintConfig: ClothConstraintSetup
    open var HorizontalConstraintConfig: ClothConstraintSetup
    open var BendConstraintConfig: ClothConstraintSetup
    open var ShearConstraintConfig: ClothConstraintSetup
    open var SelfCollisionRadius: Number
    open var SelfCollisionStiffness: Number
    open var SelfCollisionCullScale: Number
    open var Damping: Vector
    open var Friction: Number
    open var WindDragCoefficient: Number
    open var WindLiftCoefficient: Number
    open var LinearDrag: Vector
    open var AngularDrag: Vector
    open var LinearInertiaScale: Vector
    open var AngularInertiaScale: Vector
    open var CentrifugalInertiaScale: Vector
    open var SolverFrequency: Number
    open var StiffnessFrequency: Number
    open var GravityScale: Number
    open var GravityOverride: Vector
    open var bUseGravityOverride: Boolean
    open var TetherStiffness: Number
    open var TetherLimit: Number
    open var CollisionThickness: Number
    open var AnimDriveSpringStiffness: Number
    open var AnimDriveDamperStiffness: Number
    open fun clone(): ClothConfig

    companion object {
        fun C(Other: UObject): ClothConfig
        fun C(Other: Any): ClothConfig
    }
}

external open class ClothVertBoneData {
    open var NumInfluences: Number
    open var BoneIndices: Any
    open var BoneWeights: Number
    open fun clone(): ClothVertBoneData

    companion object {
        fun C(Other: UObject): ClothVertBoneData
        fun C(Other: Any): ClothVertBoneData
    }
}

external open class ClothPhysicalMeshData {
    open var Vertices: Array<Vector>
    open var Normals: Array<Vector>
    open var VertexColors: Array<Color>
    open var Indices: Array<Any>
    open var MaxDistances: Array<Number>
    open var BackstopDistances: Array<Number>
    open var BackstopRadiuses: Array<Number>
    open var AnimDriveMultipliers: Array<Number>
    open var InverseMasses: Array<Number>
    open var BoneData: Array<ClothVertBoneData>
    open var MaxBoneWeights: Number
    open var NumFixedVerts: Number
    open var SelfCollisionIndices: Array<Any>
    open fun clone(): ClothPhysicalMeshData

    companion object {
        fun C(Other: UObject): ClothPhysicalMeshData
        fun C(Other: Any): ClothPhysicalMeshData
    }
}

external open class ClothCollisionPrim_Sphere {
    open var BoneIndex: Number
    open var Radius: Number
    open var LocalPosition: Vector
    open fun clone(): ClothCollisionPrim_Sphere

    companion object {
        fun C(Other: UObject): ClothCollisionPrim_Sphere
        fun C(Other: Any): ClothCollisionPrim_Sphere
    }
}

external open class ClothCollisionPrim_SphereConnection {
    open var SphereIndices: Number
    open fun clone(): ClothCollisionPrim_SphereConnection

    companion object {
        fun C(Other: UObject): ClothCollisionPrim_SphereConnection
        fun C(Other: Any): ClothCollisionPrim_SphereConnection
    }
}

external open class ClothCollisionPrim_Convex {
    open var Planes: Array<Plane>
    open var BoneIndex: Number
    open fun clone(): ClothCollisionPrim_Convex

    companion object {
        fun C(Other: UObject): ClothCollisionPrim_Convex
        fun C(Other: Any): ClothCollisionPrim_Convex
    }
}

external open class ClothCollisionData {
    open var Spheres: Array<ClothCollisionPrim_Sphere>
    open var SphereConnections: Array<ClothCollisionPrim_SphereConnection>
    open var Convexes: Array<ClothCollisionPrim_Convex>
    open fun clone(): ClothCollisionData

    companion object {
        fun C(Other: UObject): ClothCollisionData
        fun C(Other: Any): ClothCollisionData
    }
}

external object MaskTarget_PhysMesh {
    var None: String /* "None" */
    var MaxDistance: String /* "MaxDistance" */
    var BackstopDistance: String /* "BackstopDistance" */
    var BackstopRadius: String /* "BackstopRadius" */
    var AnimDriveMultiplier: String /* "AnimDriveMultiplier" */
    var MaskTarget_MAX: String /* "MaskTarget_MAX" */
}

external open class ClothParameterMask_PhysMesh {
    open var MaskName: String
    open var CurrentTarget: String /* "None" | "MaxDistance" | "BackstopDistance" | "BackstopRadius" | "AnimDriveMultiplier" | "MaskTarget_MAX" */
    open var MaxValue: Number
    open var MinValue: Number
    open var Values: Array<Number>
    open var bEnabled: Boolean
    open fun clone(): ClothParameterMask_PhysMesh

    companion object {
        fun C(Other: UObject): ClothParameterMask_PhysMesh
        fun C(Other: Any): ClothParameterMask_PhysMesh
    }
}

external open class ClothLODData {
    open var PhysicalMeshData: ClothPhysicalMeshData
    open var CollisionData: ClothCollisionData
    open var ParameterMasks: Array<ClothParameterMask_PhysMesh>
    open fun clone(): ClothLODData

    companion object {
        fun C(Other: UObject): ClothLODData
        fun C(Other: Any): ClothLODData
    }
}

external open class ClothingAsset : ClothingAssetBase {
    constructor()
    constructor(Outer: UObject)
    open var PhysicsAsset: PhysicsAsset
    open var ClothConfig: ClothConfig
    open var LodData: Array<ClothLODData>
    open var LodMap: Array<Number>
    open var UsedBoneNames: Array<String>
    open var UsedBoneIndices: Array<Number>
    open var ReferenceBoneIndex: Number
    open var CustomData: ClothingAssetCustomData

    companion object {
        fun Load(ResourceName: String): ClothingAsset
        fun Find(Outer: UObject, ResourceName: String): ClothingAsset
        fun GetDefaultObject(): ClothingAsset
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingAsset
        fun C(Other: UObject): ClothingAsset
        fun C(Other: Any): ClothingAsset
    }
}

external open class ClothingSimulationFactoryNv : ClothingSimulationFactory {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingSimulationFactoryNv
        fun Find(Outer: UObject, ResourceName: String): ClothingSimulationFactoryNv
        fun GetDefaultObject(): ClothingSimulationFactoryNv
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingSimulationFactoryNv
        fun C(Other: UObject): ClothingSimulationFactoryNv
        fun C(Other: Any): ClothingSimulationFactoryNv
    }
}

external open class ClothingSimulationInteractorNv : ClothingSimulationInteractor {
    constructor()
    constructor(Outer: UObject)
    open fun SetAnimDriveSpringStiffness(InStiffness: Number)
    open fun SetAnimDriveDamperStiffness(InStiffness: Number)
    open fun EnableGravityOverride(InVector: Vector)
    open fun DisableGravityOverride()

    companion object {
        fun Load(ResourceName: String): ClothingSimulationInteractorNv
        fun Find(Outer: UObject, ResourceName: String): ClothingSimulationInteractorNv
        fun GetDefaultObject(): ClothingSimulationInteractorNv
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingSimulationInteractorNv
        fun C(Other: UObject): ClothingSimulationInteractorNv
        fun C(Other: Any): ClothingSimulationInteractorNv
    }
}

external open class ClothingAssetFactory : ClothingAssetFactoryBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ClothingAssetFactory
        fun Find(Outer: UObject, ResourceName: String): ClothingAssetFactory
        fun GetDefaultObject(): ClothingAssetFactory
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ClothingAssetFactory
        fun C(Other: UObject): ClothingAssetFactory
        fun C(Other: Any): ClothingAssetFactory
    }
}

external object EMovieSceneCaptureProtocolState {
    var Idle: String /* "Idle" */
    var Initialized: String /* "Initialized" */
    var Capturing: String /* "Capturing" */
    var Finalizing: String /* "Finalizing" */
    var EMovieSceneCaptureProtocolState_MAX: String /* "EMovieSceneCaptureProtocolState_MAX" */
}

external open class MovieSceneCaptureProtocolBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open var State: String /* "Idle" | "Initialized" | "Capturing" | "Finalizing" | "EMovieSceneCaptureProtocolState_MAX" */
    open fun IsCapturing(): Boolean
    open fun GetState(): String /* "Idle" | "Initialized" | "Capturing" | "Finalizing" | "EMovieSceneCaptureProtocolState_MAX" */

    companion object {
        fun Load(ResourceName: String): MovieSceneCaptureProtocolBase
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCaptureProtocolBase
        fun GetDefaultObject(): MovieSceneCaptureProtocolBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCaptureProtocolBase
        fun C(Other: UObject): MovieSceneCaptureProtocolBase
        fun C(Other: Any): MovieSceneCaptureProtocolBase
    }
}

external open class MovieSceneAudioCaptureProtocolBase : MovieSceneCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MovieSceneAudioCaptureProtocolBase
        fun Find(Outer: UObject, ResourceName: String): MovieSceneAudioCaptureProtocolBase
        fun GetDefaultObject(): MovieSceneAudioCaptureProtocolBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneAudioCaptureProtocolBase
        fun C(Other: UObject): MovieSceneAudioCaptureProtocolBase
        fun C(Other: Any): MovieSceneAudioCaptureProtocolBase
    }
}

external open class NullAudioCaptureProtocol : MovieSceneAudioCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): NullAudioCaptureProtocol
        fun Find(Outer: UObject, ResourceName: String): NullAudioCaptureProtocol
        fun GetDefaultObject(): NullAudioCaptureProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): NullAudioCaptureProtocol
        fun C(Other: UObject): NullAudioCaptureProtocol
        fun C(Other: Any): NullAudioCaptureProtocol
    }
}

external open class MasterAudioSubmixCaptureProtocol : MovieSceneAudioCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)
    open var Filename: String

    companion object {
        fun Load(ResourceName: String): MasterAudioSubmixCaptureProtocol
        fun Find(Outer: UObject, ResourceName: String): MasterAudioSubmixCaptureProtocol
        fun GetDefaultObject(): MasterAudioSubmixCaptureProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MasterAudioSubmixCaptureProtocol
        fun C(Other: UObject): MasterAudioSubmixCaptureProtocol
        fun C(Other: Any): MasterAudioSubmixCaptureProtocol
    }
}

external open class MovieSceneImageCaptureProtocolBase : MovieSceneCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MovieSceneImageCaptureProtocolBase
        fun Find(Outer: UObject, ResourceName: String): MovieSceneImageCaptureProtocolBase
        fun GetDefaultObject(): MovieSceneImageCaptureProtocolBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneImageCaptureProtocolBase
        fun C(Other: UObject): MovieSceneImageCaptureProtocolBase
        fun C(Other: Any): MovieSceneImageCaptureProtocolBase
    }
}

external open class CompositionGraphCapturePasses {
    open var Value: Array<String>
    open fun clone(): CompositionGraphCapturePasses

    companion object {
        fun C(Other: UObject): CompositionGraphCapturePasses
        fun C(Other: Any): CompositionGraphCapturePasses
    }
}

external object EHDRCaptureGamut {
    var HCGM_Rec709: String /* "HCGM_Rec709" */
    var HCGM_P3DCI: String /* "HCGM_P3DCI" */
    var HCGM_Rec2020: String /* "HCGM_Rec2020" */
    var HCGM_ACES: String /* "HCGM_ACES" */
    var HCGM_ACEScg: String /* "HCGM_ACEScg" */
    var HCGM_Linear: String /* "HCGM_Linear" */
    var HCGM_MAX: String /* "HCGM_MAX" */
}

external open class CompositionGraphCaptureProtocol : MovieSceneImageCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)
    open var IncludeRenderPasses: CompositionGraphCapturePasses
    open var bCaptureFramesInHDR: Boolean
    open var HDRCompressionQuality: Number
    open var CaptureGamut: String /* "HCGM_Rec709" | "HCGM_P3DCI" | "HCGM_Rec2020" | "HCGM_ACES" | "HCGM_ACEScg" | "HCGM_Linear" | "HCGM_MAX" */
    open var PostProcessingMaterial: SoftObjectPath
    open var bDisableScreenPercentage: Boolean
    open var PostProcessingMaterialPtr: MaterialInterface

    companion object {
        fun Load(ResourceName: String): CompositionGraphCaptureProtocol
        fun Find(Outer: UObject, ResourceName: String): CompositionGraphCaptureProtocol
        fun GetDefaultObject(): CompositionGraphCaptureProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CompositionGraphCaptureProtocol
        fun C(Other: UObject): CompositionGraphCaptureProtocol
        fun C(Other: Any): CompositionGraphCaptureProtocol
    }
}

external open class FrameGrabberProtocol : MovieSceneImageCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): FrameGrabberProtocol
        fun Find(Outer: UObject, ResourceName: String): FrameGrabberProtocol
        fun GetDefaultObject(): FrameGrabberProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FrameGrabberProtocol
        fun C(Other: UObject): FrameGrabberProtocol
        fun C(Other: Any): FrameGrabberProtocol
    }
}

external open class ImageSequenceProtocol : FrameGrabberProtocol {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ImageSequenceProtocol
        fun Find(Outer: UObject, ResourceName: String): ImageSequenceProtocol
        fun GetDefaultObject(): ImageSequenceProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ImageSequenceProtocol
        fun C(Other: UObject): ImageSequenceProtocol
        fun C(Other: Any): ImageSequenceProtocol
    }
}

external open class CompressedImageSequenceProtocol : ImageSequenceProtocol {
    constructor()
    constructor(Outer: UObject)
    open var CompressionQuality: Number

    companion object {
        fun Load(ResourceName: String): CompressedImageSequenceProtocol
        fun Find(Outer: UObject, ResourceName: String): CompressedImageSequenceProtocol
        fun GetDefaultObject(): CompressedImageSequenceProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CompressedImageSequenceProtocol
        fun C(Other: UObject): CompressedImageSequenceProtocol
        fun C(Other: Any): CompressedImageSequenceProtocol
    }
}

external open class ImageSequenceProtocol_BMP : ImageSequenceProtocol {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ImageSequenceProtocol_BMP
        fun Find(Outer: UObject, ResourceName: String): ImageSequenceProtocol_BMP
        fun GetDefaultObject(): ImageSequenceProtocol_BMP
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ImageSequenceProtocol_BMP
        fun C(Other: UObject): ImageSequenceProtocol_BMP
        fun C(Other: Any): ImageSequenceProtocol_BMP
    }
}

external open class ImageSequenceProtocol_PNG : CompressedImageSequenceProtocol {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ImageSequenceProtocol_PNG
        fun Find(Outer: UObject, ResourceName: String): ImageSequenceProtocol_PNG
        fun GetDefaultObject(): ImageSequenceProtocol_PNG
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ImageSequenceProtocol_PNG
        fun C(Other: UObject): ImageSequenceProtocol_PNG
        fun C(Other: Any): ImageSequenceProtocol_PNG
    }
}

external open class ImageSequenceProtocol_JPG : CompressedImageSequenceProtocol {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ImageSequenceProtocol_JPG
        fun Find(Outer: UObject, ResourceName: String): ImageSequenceProtocol_JPG
        fun GetDefaultObject(): ImageSequenceProtocol_JPG
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ImageSequenceProtocol_JPG
        fun C(Other: UObject): ImageSequenceProtocol_JPG
        fun C(Other: Any): ImageSequenceProtocol_JPG
    }
}

external open class ImageSequenceProtocol_EXR : ImageSequenceProtocol {
    constructor()
    constructor(Outer: UObject)
    open var bCompressed: Boolean
    open var CaptureGamut: String /* "HCGM_Rec709" | "HCGM_P3DCI" | "HCGM_Rec2020" | "HCGM_ACES" | "HCGM_ACEScg" | "HCGM_Linear" | "HCGM_MAX" */

    companion object {
        fun Load(ResourceName: String): ImageSequenceProtocol_EXR
        fun Find(Outer: UObject, ResourceName: String): ImageSequenceProtocol_EXR
        fun GetDefaultObject(): ImageSequenceProtocol_EXR
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ImageSequenceProtocol_EXR
        fun C(Other: UObject): ImageSequenceProtocol_EXR
        fun C(Other: Any): ImageSequenceProtocol_EXR
    }
}

external open class MovieSceneCaptureInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MovieSceneCaptureInterface
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCaptureInterface
        fun GetDefaultObject(): MovieSceneCaptureInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCaptureInterface
        fun C(Other: UObject): MovieSceneCaptureInterface
        fun C(Other: Any): MovieSceneCaptureInterface
    }
}

external open class DirectoryPath {
    open var Path: String
    open fun clone(): DirectoryPath

    companion object {
        fun C(Other: UObject): DirectoryPath
        fun C(Other: Any): DirectoryPath
    }
}

external open class CaptureResolution {
    open var ResX: Number
    open var ResY: Number
    open fun clone(): CaptureResolution

    companion object {
        fun C(Other: UObject): CaptureResolution
        fun C(Other: Any): CaptureResolution
    }
}

external open class MovieSceneCaptureSettings {
    open var OutputDirectory: DirectoryPath
    open var GameModeOverride: UnrealEngineClass
    open var OutputFormat: String
    open var bOverwriteExisting: Boolean
    open var bUseRelativeFrameNumbers: Boolean
    open var HandleFrames: Number
    open var MovieExtension: String
    open var ZeroPadFrameNumbers: Number
    open var FrameRate: FrameRate
    open var bUseCustomFrameRate: Boolean
    open var CustomFrameRate: FrameRate
    open var Resolution: CaptureResolution
    open var bEnableTextureStreaming: Boolean
    open var bCinematicEngineScalability: Boolean
    open var bCinematicMode: Boolean
    open var bAllowMovement: Boolean
    open var bAllowTurning: Boolean
    open var bShowPlayer: Boolean
    open var bShowHUD: Boolean
    open var bUsePathTracer: Boolean
    open var PathTracerSamplePerPixel: Number
    open fun clone(): MovieSceneCaptureSettings

    companion object {
        fun C(Other: UObject): MovieSceneCaptureSettings
        fun C(Other: Any): MovieSceneCaptureSettings
    }
}

external open class MovieSceneCapture : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ImageCaptureProtocolType: SoftClassPath
    open var AudioCaptureProtocolType: SoftClassPath
    open var ImageCaptureProtocol: MovieSceneImageCaptureProtocolBase
    open var AudioCaptureProtocol: MovieSceneAudioCaptureProtocolBase
    open var Settings: MovieSceneCaptureSettings
    open var bUseSeparateProcess: Boolean
    open var bCloseEditorWhenCaptureStarts: Boolean
    open var AdditionalCommandLineArguments: String
    open var InheritedCommandLineArguments: String
    open fun SetImageCaptureProtocolType(ProtocolType: UnrealEngineClass)
    open fun SetAudioCaptureProtocolType(ProtocolType: UnrealEngineClass)
    open fun GetImageCaptureProtocol(): MovieSceneCaptureProtocolBase
    open fun GetAudioCaptureProtocol(): MovieSceneCaptureProtocolBase

    companion object {
        fun Load(ResourceName: String): MovieSceneCapture
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCapture
        fun GetDefaultObject(): MovieSceneCapture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCapture
        fun C(Other: UObject): MovieSceneCapture
        fun C(Other: Any): MovieSceneCapture
    }
}

external open class LevelCapture : MovieSceneCapture {
    constructor()
    constructor(Outer: UObject)
    open var bAutoStartCapture: Boolean
    open var PrerequisiteActorId: Guid

    companion object {
        fun Load(ResourceName: String): LevelCapture
        fun Find(Outer: UObject, ResourceName: String): LevelCapture
        fun GetDefaultObject(): LevelCapture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelCapture
        fun C(Other: UObject): LevelCapture
        fun C(Other: Any): LevelCapture
    }
}

external open class MovieSceneCaptureEnvironment : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MovieSceneCaptureEnvironment
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCaptureEnvironment
        fun GetDefaultObject(): MovieSceneCaptureEnvironment
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCaptureEnvironment
        fun IsCaptureInProgress(): Boolean
        fun GetCaptureFrameNumber(): Number
        fun GetCaptureElapsedTime(): Number
        fun FindImageCaptureProtocol(): MovieSceneImageCaptureProtocolBase
        fun FindAudioCaptureProtocol(): MovieSceneAudioCaptureProtocolBase
        fun C(Other: UObject): MovieSceneCaptureEnvironment
        fun C(Other: Any): MovieSceneCaptureEnvironment
    }
}

external open class CapturedPixelsID {
    open var Identifiers: Any
    open fun clone(): CapturedPixelsID

    companion object {
        fun C(Other: UObject): CapturedPixelsID
        fun C(Other: Any): CapturedPixelsID
    }
}

external open class CapturedPixels {
    open fun clone(): CapturedPixels

    companion object {
        fun C(Other: UObject): CapturedPixels
        fun C(Other: Any): CapturedPixels
    }
}

external open class FrameMetrics {
    open var TotalElapsedTime: Number
    open var FrameDelta: Number
    open var FrameNumber: Number
    open var NumDroppedFrames: Number
    open fun clone(): FrameMetrics

    companion object {
        fun C(Other: UObject): FrameMetrics
        fun C(Other: Any): FrameMetrics
    }
}

external open class UserDefinedCaptureProtocol : MovieSceneImageCaptureProtocolBase {
    constructor()
    constructor(Outer: UObject)
    open var World: World
    open fun StopCapturingFinalPixels()
    open fun StartCapturingFinalPixels(StreamID: CapturedPixelsID)
    open fun ResolveBuffer(Buffer: Texture, BufferID: CapturedPixelsID)
    open fun OnWarmUp()
    open fun OnTick()
    open fun OnStartCapture()
    open fun OnSetup(): Boolean
    open fun OnPreTick()
    open fun OnPixelsReceived(Pixels: CapturedPixels, ID: CapturedPixelsID, FrameMetrics: FrameMetrics)
    open fun OnPauseCapture()
    open fun OnFinalize()
    open fun OnCaptureFrame()
    open fun OnCanFinalize(): Boolean
    open fun OnBeginFinalize()
    open fun GetCurrentFrameMetrics(): FrameMetrics
    open fun GenerateFilename(InFrameMetrics: FrameMetrics): String

    companion object {
        fun Load(ResourceName: String): UserDefinedCaptureProtocol
        fun Find(Outer: UObject, ResourceName: String): UserDefinedCaptureProtocol
        fun GetDefaultObject(): UserDefinedCaptureProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UserDefinedCaptureProtocol
        fun C(Other: UObject): UserDefinedCaptureProtocol
        fun C(Other: Any): UserDefinedCaptureProtocol
    }
}

external open class UserDefinedImageCaptureProtocol : UserDefinedCaptureProtocol {
    constructor()
    constructor(Outer: UObject)
    open var Format: String /* "PNG" | "JPG" | "BMP" | "EXR" | "EDesiredImageFormat_MAX" */
    open var bEnableCompression: Boolean
    open var CompressionQuality: Number
    open fun WriteImageToDisk(PixelData: CapturedPixels, StreamID: CapturedPixelsID, FrameMetrics: FrameMetrics, bCopyImageData: Boolean)
    open fun GenerateFilenameForCurrentFrame(): String
    open fun GenerateFilenameForBuffer(Buffer: Texture, StreamID: CapturedPixelsID): String

    companion object {
        fun Load(ResourceName: String): UserDefinedImageCaptureProtocol
        fun Find(Outer: UObject, ResourceName: String): UserDefinedImageCaptureProtocol
        fun GetDefaultObject(): UserDefinedImageCaptureProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UserDefinedImageCaptureProtocol
        fun C(Other: UObject): UserDefinedImageCaptureProtocol
        fun C(Other: Any): UserDefinedImageCaptureProtocol
    }
}

external open class VideoCaptureProtocol : FrameGrabberProtocol {
    constructor()
    constructor(Outer: UObject)
    open var bUseCompression: Boolean
    open var CompressionQuality: Number

    companion object {
        fun Load(ResourceName: String): VideoCaptureProtocol
        fun Find(Outer: UObject, ResourceName: String): VideoCaptureProtocol
        fun GetDefaultObject(): VideoCaptureProtocol
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VideoCaptureProtocol
        fun C(Other: UObject): VideoCaptureProtocol
        fun C(Other: Any): VideoCaptureProtocol
    }
}

external open class LevelSequenceBurnInInitSettings : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): LevelSequenceBurnInInitSettings
        fun Find(Outer: UObject, ResourceName: String): LevelSequenceBurnInInitSettings
        fun GetDefaultObject(): LevelSequenceBurnInInitSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelSequenceBurnInInitSettings
        fun C(Other: UObject): LevelSequenceBurnInInitSettings
        fun C(Other: Any): LevelSequenceBurnInInitSettings
    }
}

external open class LevelSequenceBurnInOptions : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bUseBurnIn: Boolean
    open var BurnInClass: SoftClassPath
    open var Settings: LevelSequenceBurnInInitSettings
    open fun SetBurnIn(InBurnInClass: SoftClassPath)

    companion object {
        fun Load(ResourceName: String): LevelSequenceBurnInOptions
        fun Find(Outer: UObject, ResourceName: String): LevelSequenceBurnInOptions
        fun GetDefaultObject(): LevelSequenceBurnInOptions
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LevelSequenceBurnInOptions
        fun C(Other: UObject): LevelSequenceBurnInOptions
        fun C(Other: Any): LevelSequenceBurnInOptions
    }
}

external open class AutomatedLevelSequenceCapture : MovieSceneCapture {
    constructor()
    constructor(Outer: UObject)
    open var LevelSequenceAsset: SoftObjectPath
    open var ShotName: String
    open var bUseCustomStartFrame: Boolean
    open var CustomStartFrame: FrameNumber
    open var bUseCustomEndFrame: Boolean
    open var CustomEndFrame: FrameNumber
    open var WarmUpFrameCount: Number
    open var DelayBeforeWarmUp: Number
    open var DelayBeforeShotWarmUp: Number
    open var DelayEveryFrame: Number
    open var BurnInOptions: LevelSequenceBurnInOptions
    open var bWriteEditDecisionList: Boolean
    open var bWriteFinalCutProXML: Boolean
    open var LevelSequenceActor: Any

    companion object {
        fun Load(ResourceName: String): AutomatedLevelSequenceCapture
        fun Find(Outer: UObject, ResourceName: String): AutomatedLevelSequenceCapture
        fun GetDefaultObject(): AutomatedLevelSequenceCapture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AutomatedLevelSequenceCapture
        fun C(Other: UObject): AutomatedLevelSequenceCapture
        fun C(Other: Any): AutomatedLevelSequenceCapture
    }
}

external open class MovieSceneTangentData {
    open var ArriveTangent: Number
    open var LeaveTangent: Number
    open var TangentWeightMode: String /* "RCTWM_WeightedNone" | "RCTWM_WeightedArrive" | "RCTWM_WeightedLeave" | "RCTWM_WeightedBoth" | "RCTWM_MAX" */
    open var ArriveTangentWeight: Number
    open var LeaveTangentWeight: Number
    open fun clone(): MovieSceneTangentData

    companion object {
        fun C(Other: UObject): MovieSceneTangentData
        fun C(Other: Any): MovieSceneTangentData
    }
}

external open class MovieSceneFloatValue {
    open var Value: Number
    open var InterpMode: String /* "RCIM_Linear" | "RCIM_Constant" | "RCIM_Cubic" | "RCIM_None" | "RCIM_MAX" */
    open var TangentMode: String /* "RCTM_Auto" | "RCTM_User" | "RCTM_Break" | "RCTM_None" | "RCTM_MAX" */
    open var Tangent: MovieSceneTangentData
    open fun clone(): MovieSceneFloatValue

    companion object {
        fun C(Other: UObject): MovieSceneFloatValue
        fun C(Other: Any): MovieSceneFloatValue
    }
}

external open class FloatChannelKeyProxy : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Time: FrameNumber
    open var Value: MovieSceneFloatValue

    companion object {
        fun Load(ResourceName: String): FloatChannelKeyProxy
        fun Find(Outer: UObject, ResourceName: String): FloatChannelKeyProxy
        fun GetDefaultObject(): FloatChannelKeyProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FloatChannelKeyProxy
        fun C(Other: UObject): FloatChannelKeyProxy
        fun C(Other: Any): FloatChannelKeyProxy
    }
}

external open class K2Node : EdGraphNode {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): K2Node
        fun Find(Outer: UObject, ResourceName: String): K2Node
        fun GetDefaultObject(): K2Node
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): K2Node
        fun C(Other: UObject): K2Node
        fun C(Other: Any): K2Node
    }
}

external object EMovieSceneObjectBindingSpace {
    var Local: String /* "Local" */
    var Root: String /* "Root" */
    var EMovieSceneObjectBindingSpace_MAX: String /* "EMovieSceneObjectBindingSpace_MAX" */
}

external open class MovieSceneObjectBindingID {
    open var SequenceID: Number
    open var Space: String /* "Local" | "Root" | "EMovieSceneObjectBindingSpace_MAX" */
    open var Guid: Guid
    open fun clone(): MovieSceneObjectBindingID

    companion object {
        fun C(Other: UObject): MovieSceneObjectBindingID
        fun C(Other: Any): MovieSceneObjectBindingID
    }
}

external open class K2Node_GetSequenceBinding : K2Node {
    constructor()
    constructor(Outer: UObject)
    open var SourceSequence: SoftObjectPath
    open var Binding: MovieSceneObjectBindingID

    companion object {
        fun Load(ResourceName: String): K2Node_GetSequenceBinding
        fun Find(Outer: UObject, ResourceName: String): K2Node_GetSequenceBinding
        fun GetDefaultObject(): K2Node_GetSequenceBinding
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): K2Node_GetSequenceBinding
        fun C(Other: UObject): K2Node_GetSequenceBinding
        fun C(Other: Any): K2Node_GetSequenceBinding
    }
}

external open class MovieSceneToolsPropertyTrackSettings {
    open var ComponentName: String
    open var PropertyName: String
    open fun clone(): MovieSceneToolsPropertyTrackSettings

    companion object {
        fun C(Other: UObject): MovieSceneToolsPropertyTrackSettings
        fun C(Other: Any): MovieSceneToolsPropertyTrackSettings
    }
}

external open class MovieSceneToolsFbxSettings {
    open var FbxPropertyName: String
    open var PropertyPath: MovieSceneToolsPropertyTrackSettings
    open fun clone(): MovieSceneToolsFbxSettings

    companion object {
        fun C(Other: UObject): MovieSceneToolsFbxSettings
        fun C(Other: Any): MovieSceneToolsFbxSettings
    }
}

external open class MovieSceneToolsProjectSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var DefaultStartTime: Number
    open var DefaultDuration: Number
    open var ShotDirectory: String
    open var ShotPrefix: String
    open var FirstShotNumber: Any
    open var ShotIncrement: Any
    open var ShotNumDigits: Any
    open var TakeNumDigits: Any
    open var FirstTakeNumber: Any
    open var TakeSeparator: String
    open var SubSequenceSeparator: String
    open var FbxSettings: Array<MovieSceneToolsFbxSettings>

    companion object {
        fun Load(ResourceName: String): MovieSceneToolsProjectSettings
        fun Find(Outer: UObject, ResourceName: String): MovieSceneToolsProjectSettings
        fun GetDefaultObject(): MovieSceneToolsProjectSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneToolsProjectSettings
        fun C(Other: UObject): MovieSceneToolsProjectSettings
        fun C(Other: Any): MovieSceneToolsProjectSettings
    }
}

external object EThumbnailQuality {
    var Draft: String /* "Draft" */
    var Normal: String /* "Normal" */
    var Best: String /* "Best" */
    var EThumbnailQuality_MAX: String /* "EThumbnailQuality_MAX" */
}

external open class MovieSceneUserThumbnailSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bDrawThumbnails: Boolean
    open var bDrawSingleThumbnails: Boolean
    open var ThumbnailSize: IntPoint
    open var Quality: String /* "Draft" | "Normal" | "Best" | "EThumbnailQuality_MAX" */

    companion object {
        fun Load(ResourceName: String): MovieSceneUserThumbnailSettings
        fun Find(Outer: UObject, ResourceName: String): MovieSceneUserThumbnailSettings
        fun GetDefaultObject(): MovieSceneUserThumbnailSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneUserThumbnailSettings
        fun C(Other: UObject): MovieSceneUserThumbnailSettings
        fun C(Other: Any): MovieSceneUserThumbnailSettings
    }
}

external open class MovieSceneUserImportFBXSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bMatchByNameOnly: Boolean
    open var bForceFrontXAxis: Boolean
    open var bCreateCameras: Boolean
    open var bReduceKeys: Boolean
    open var ReduceKeysTolerance: Number

    companion object {
        fun Load(ResourceName: String): MovieSceneUserImportFBXSettings
        fun Find(Outer: UObject, ResourceName: String): MovieSceneUserImportFBXSettings
        fun GetDefaultObject(): MovieSceneUserImportFBXSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneUserImportFBXSettings
        fun C(Other: UObject): MovieSceneUserImportFBXSettings
        fun C(Other: Any): MovieSceneUserImportFBXSettings
    }
}

external open class MovieSceneCopyableBinding : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SpawnableObjectTemplate: UObject
    open var Tracks: Array<MovieSceneTrack>
    open var Binding: MovieSceneBinding
    open var Spawnable: MovieSceneSpawnable
    open var Possessable: MovieScenePossessable

    companion object {
        fun Load(ResourceName: String): MovieSceneCopyableBinding
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCopyableBinding
        fun GetDefaultObject(): MovieSceneCopyableBinding
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCopyableBinding
        fun C(Other: UObject): MovieSceneCopyableBinding
        fun C(Other: Any): MovieSceneCopyableBinding
    }
}

external open class MovieSceneCopyableTrack : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Track: MovieSceneTrack
    open var bIsAMasterTrack: Boolean

    companion object {
        fun Load(ResourceName: String): MovieSceneCopyableTrack
        fun Find(Outer: UObject, ResourceName: String): MovieSceneCopyableTrack
        fun GetDefaultObject(): MovieSceneCopyableTrack
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneCopyableTrack
        fun C(Other: UObject): MovieSceneCopyableTrack
        fun C(Other: Any): MovieSceneCopyableTrack
    }
}

external open class Exporter : UObject {
    constructor()
    constructor(Outer: UObject)
    open var SupportedClass: UnrealEngineClass
    open var ExportRootScope: UObject
    open var FormatExtension: Array<String>
    open var FormatDescription: Array<String>
    open var PreferredFormatIndex: Number
    open var TextIndent: Number
    open var bText: Boolean
    open var bSelectedOnly: Boolean
    open var bForceFileOperations: Boolean
    open var ExportTask: AssetExportTask
    open fun ScriptRunAssetExportTask(Task: AssetExportTask): Boolean

    companion object {
        fun Load(ResourceName: String): Exporter
        fun Find(Outer: UObject, ResourceName: String): Exporter
        fun GetDefaultObject(): Exporter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): Exporter
        fun RunAssetExportTasks(ExportTasks: Array<AssetExportTask>): Boolean
        fun RunAssetExportTask(Task: AssetExportTask): Boolean
        fun C(Other: UObject): Exporter
        fun C(Other: Any): Exporter
    }
}

external open class AssetExportTask : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UObject: UObject
    open var Exporter: Exporter
    open var Filename: String
    open var bSelected: Boolean
    open var bReplaceIdentical: Boolean
    open var bPrompt: Boolean
    open var bAutomated: Boolean
    open var bUseFileArchive: Boolean
    open var bWriteEmptyFiles: Boolean
    open var IgnoreObjectList: Array<UObject>
    open var Options: UObject
    open var Errors: Array<String>

    companion object {
        fun Load(ResourceName: String): AssetExportTask
        fun Find(Outer: UObject, ResourceName: String): AssetExportTask
        fun GetDefaultObject(): AssetExportTask
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetExportTask
        fun C(Other: UObject): AssetExportTask
        fun C(Other: Any): AssetExportTask
    }
}

external open class SequencerExportTask : AssetExportTask {
    constructor()
    constructor(Outer: UObject)
    open var SequencerContext: UObject

    companion object {
        fun Load(ResourceName: String): SequencerExportTask
        fun Find(Outer: UObject, ResourceName: String): SequencerExportTask
        fun GetDefaultObject(): SequencerExportTask
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequencerExportTask
        fun C(Other: UObject): SequencerExportTask
        fun C(Other: Any): SequencerExportTask
    }
}

external open class MovieSceneSectionEvalOptions {
    open var bCanEditCompletionMode: Boolean
    open var CompletionMode: String /* "KeepState" | "RestoreState" | "ProjectDefault" | "EMovieSceneCompletionMode_MAX" */
    open fun clone(): MovieSceneSectionEvalOptions

    companion object {
        fun C(Other: UObject): MovieSceneSectionEvalOptions
        fun C(Other: Any): MovieSceneSectionEvalOptions
    }
}

external open class MovieSceneEasingSettings {
    open var AutoEaseInDuration: Number
    open var AutoEaseOutDuration: Number
    open var EaseIn: Any
    open var bManualEaseIn: Boolean
    open var ManualEaseInDuration: Number
    open var EaseOut: Any
    open var bManualEaseOut: Boolean
    open var ManualEaseOutDuration: Number
    open var AutoEaseInTime: Number
    open var AutoEaseOutTime: Number
    open var ManualEaseInTime: Number
    open var ManualEaseOutTime: Number
    open fun clone(): MovieSceneEasingSettings

    companion object {
        fun C(Other: UObject): MovieSceneEasingSettings
        fun C(Other: Any): MovieSceneEasingSettings
    }
}

external object EMovieSceneBlendType {
    var Absolute: String /* "Absolute" */
    var Additive: String /* "Additive" */
    var Relative: String /* "Relative" */
    var EMovieSceneBlendType_MAX: String /* "EMovieSceneBlendType_MAX" */
}

external open class OptionalMovieSceneBlendType {
    open var BlendType: String /* "Absolute" | "Additive" | "Relative" | "EMovieSceneBlendType_MAX" */
    open var bIsValid: Boolean
    open fun clone(): OptionalMovieSceneBlendType

    companion object {
        fun C(Other: UObject): OptionalMovieSceneBlendType
        fun C(Other: Any): OptionalMovieSceneBlendType
    }
}

external open class MovieSceneSection : MovieSceneSignedObject {
    constructor()
    constructor(Outer: UObject)
    open var EvalOptions: MovieSceneSectionEvalOptions
    open var Easing: MovieSceneEasingSettings
    open var SectionRange: MovieSceneFrameRange
    open var TimecodeSource: MovieSceneTimecodeSource
    open var PreRollFrames: FrameNumber
    open var PostRollFrames: FrameNumber
    open var RowIndex: Number
    open var OverlapPriority: Number
    open var bIsActive: Boolean
    open var bIsLocked: Boolean
    open var StartTime: Number
    open var EndTime: Number
    open var PrerollTime: Number
    open var PostrollTime: Number
    open var bIsInfinite: Boolean
    open var bSupportsInfiniteRange: Boolean
    open var BlendType: OptionalMovieSceneBlendType
    open fun SetRowIndex(NewRowIndex: Number)
    open fun SetPreRollFrames(InPreRollFrames: Number)
    open fun SetPostRollFrames(InPostRollFrames: Number)
    open fun SetOverlapPriority(NewPriority: Number)
    open fun SetIsLocked(bInIsLocked: Boolean)
    open fun SetIsActive(bInIsActive: Boolean)
    open fun IsLocked(): Boolean
    open fun IsActive(): Boolean
    open fun GetRowIndex(): Number
    open fun GetPreRollFrames(): Number
    open fun GetPostRollFrames(): Number
    open fun GetOverlapPriority(): Number

    companion object {
        fun Load(ResourceName: String): MovieSceneSection
        fun Find(Outer: UObject, ResourceName: String): MovieSceneSection
        fun GetDefaultObject(): MovieSceneSection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneSection
        fun C(Other: UObject): MovieSceneSection
        fun C(Other: Any): MovieSceneSection
    }
}

external open class MovieSceneTransformMask {
    open var mask: Any
    open fun clone(): MovieSceneTransformMask

    companion object {
        fun C(Other: UObject): MovieSceneTransformMask
        fun C(Other: Any): MovieSceneTransformMask
    }
}

external open class MovieSceneChannel {
    open fun clone(): MovieSceneChannel

    companion object {
        fun C(Other: UObject): MovieSceneChannel
        fun C(Other: Any): MovieSceneChannel
    }
}

external open class KeyHandleLookupTable {
    open fun clone(): KeyHandleLookupTable

    companion object {
        fun C(Other: UObject): KeyHandleLookupTable
        fun C(Other: Any): KeyHandleLookupTable
    }
}

external open class MovieSceneKeyHandleMap : KeyHandleLookupTable {
    override fun clone(): MovieSceneKeyHandleMap

    companion object {
        fun C(Other: UObject): MovieSceneKeyHandleMap
        fun C(Other: Any): MovieSceneKeyHandleMap
    }
}

external open class MovieSceneFloatChannel : MovieSceneChannel {
    open var PreInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var PostInfinityExtrap: String /* "RCCE_Cycle" | "RCCE_CycleWithOffset" | "RCCE_Oscillate" | "RCCE_Linear" | "RCCE_Constant" | "RCCE_None" | "RCCE_MAX" */
    open var Times: Array<FrameNumber>
    open var Values: Array<MovieSceneFloatValue>
    open var DefaultValue: Number
    open var bHasDefaultValue: Boolean
    open var KeyHandles: MovieSceneKeyHandleMap
    open var TickResolution: FrameRate
    override fun clone(): MovieSceneFloatChannel

    companion object {
        fun C(Other: UObject): MovieSceneFloatChannel
        fun C(Other: Any): MovieSceneFloatChannel
    }
}

external object EShow3DTrajectory {
    var EST_OnlyWhenSelected: String /* "EST_OnlyWhenSelected" */
    var EST_Always: String /* "EST_Always" */
    var EST_Never: String /* "EST_Never" */
    var EST_MAX: String /* "EST_MAX" */
}

external open class MovieScene3DTransformSection : MovieSceneSection {
    constructor()
    constructor(Outer: UObject)
    open var TransformMask: MovieSceneTransformMask
    open var Translation: MovieSceneFloatChannel
    open var Rotation: MovieSceneFloatChannel
    open var Scale: MovieSceneFloatChannel
    open var ManualWeight: MovieSceneFloatChannel
    open var bUseQuaternionInterpolation: Boolean
    open var Show3DTrajectory: String /* "EST_OnlyWhenSelected" | "EST_Always" | "EST_Never" | "EST_MAX" */

    companion object {
        fun Load(ResourceName: String): MovieScene3DTransformSection
        fun Find(Outer: UObject, ResourceName: String): MovieScene3DTransformSection
        fun GetDefaultObject(): MovieScene3DTransformSection
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieScene3DTransformSection
        fun C(Other: UObject): MovieScene3DTransformSection
        fun C(Other: Any): MovieScene3DTransformSection
    }
}

external open class SequencerKeyActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var KeyMeshComponent: StaticMeshComponent
    open var AssociatedActor: Actor
    open var TrackSection: MovieScene3DTransformSection
    open var KeyTime: Number

    companion object {
        fun GetDefaultObject(): SequencerKeyActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequencerKeyActor
        fun C(Other: UObject): SequencerKeyActor
        fun C(Other: Any): SequencerKeyActor
    }
}

external open class MovieSceneKeyStructType : ScriptStruct {
    constructor()
    constructor(Outer: UObject)
    open var SourceTimesProperty: ArrayProperty
    open var SourceValuesProperty: ArrayProperty
    open var DestTimeProperty: StructProperty
    open var DestValueProperty: Property

    companion object {
        fun Load(ResourceName: String): MovieSceneKeyStructType
        fun Find(Outer: UObject, ResourceName: String): MovieSceneKeyStructType
        fun GetDefaultObject(): MovieSceneKeyStructType
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MovieSceneKeyStructType
        fun C(Other: UObject): MovieSceneKeyStructType
        fun C(Other: Any): MovieSceneKeyStructType
    }
}

external open class SequencerMeshTrail(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    companion object {
        fun GetDefaultObject(): SequencerMeshTrail
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequencerMeshTrail
        fun C(Other: UObject): SequencerMeshTrail
        fun C(Other: Any): SequencerMeshTrail
    }
}

external open class SequencerSettingsContainer : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SequencerSettingsContainer
        fun Find(Outer: UObject, ResourceName: String): SequencerSettingsContainer
        fun GetDefaultObject(): SequencerSettingsContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequencerSettingsContainer
        fun C(Other: UObject): SequencerSettingsContainer
        fun C(Other: Any): SequencerSettingsContainer
    }
}

external object EAutoChangeMode {
    var AutoKey: String /* "AutoKey" */
    var AutoTrack: String /* "AutoTrack" */
    var All: String /* "All" */
    var None: String /* "None" */
    var EAutoChangeMode_MAX: String /* "EAutoChangeMode_MAX" */
}

external object EAllowEditsMode {
    var AllEdits: String /* "AllEdits" */
    var AllowSequencerEditsOnly: String /* "AllowSequencerEditsOnly" */
    var AllowLevelEditsOnly: String /* "AllowLevelEditsOnly" */
    var EAllowEditsMode_MAX: String /* "EAllowEditsMode_MAX" */
}

external object EKeyGroupMode {
    var KeyChanged: String /* "KeyChanged" */
    var KeyGroup: String /* "KeyGroup" */
    var KeyAll: String /* "KeyAll" */
    var EKeyGroupMode_MAX: String /* "EKeyGroupMode_MAX" */
}

external object EMovieSceneKeyInterpolation {
    var Auto: String /* "Auto" */
    var User: String /* "User" */
    var Break: String /* "Break" */
    var Linear: String /* "Linear" */
    var Constant: String /* "Constant" */
    var EMovieSceneKeyInterpolation_MAX: String /* "EMovieSceneKeyInterpolation_MAX" */
}

external object ESequencerSpawnPosition {
    var SSP_Origin: String /* "SSP_Origin" */
    var SSP_PlaceInFrontOfCamera: String /* "SSP_PlaceInFrontOfCamera" */
    var SSP_MAX: String /* "SSP_MAX" */
}

external object ESequencerZoomPosition {
    var SZP_CurrentTime: String /* "SZP_CurrentTime" */
    var SZP_MousePosition: String /* "SZP_MousePosition" */
    var SZP_MAX: String /* "SZP_MAX" */
}

external object ESequencerLoopMode {
    var SLM_NoLoop: String /* "SLM_NoLoop" */
    var SLM_Loop: String /* "SLM_Loop" */
    var SLM_LoopSelectionRange: String /* "SLM_LoopSelectionRange" */
    var SLM_MAX: String /* "SLM_MAX" */
}

external object EFrameNumberDisplayFormats {
    var NonDropFrameTimecode: String /* "NonDropFrameTimecode" */
    var DropFrameTimecode: String /* "DropFrameTimecode" */
    var Seconds: String /* "Seconds" */
    var Frames: String /* "Frames" */
    var MAX_Count: String /* "MAX_Count" */
    var EFrameNumberDisplayFormats_MAX: String /* "EFrameNumberDisplayFormats_MAX" */
}

external open class SequencerSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var AutoChangeMode: String /* "AutoKey" | "AutoTrack" | "All" | "None" | "EAutoChangeMode_MAX" */
    open var AllowEditsMode: String /* "AllEdits" | "AllowSequencerEditsOnly" | "AllowLevelEditsOnly" | "EAllowEditsMode_MAX" */
    open var KeyGroupMode: String /* "KeyChanged" | "KeyGroup" | "KeyAll" | "EKeyGroupMode_MAX" */
    open var bKeyInterpPropertiesOnly: Boolean
    open var KeyInterpolation: String /* "Auto" | "User" | "Break" | "Linear" | "Constant" | "EMovieSceneKeyInterpolation_MAX" */
    open var bAutoSetTrackDefaults: Boolean
    open var SpawnPosition: String /* "SSP_Origin" | "SSP_PlaceInFrontOfCamera" | "SSP_MAX" */
    open var bCreateSpawnableCameras: Boolean
    open var bShowRangeSlider: Boolean
    open var bIsSnapEnabled: Boolean
    open var bSnapKeyTimesToInterval: Boolean
    open var bSnapKeyTimesToKeys: Boolean
    open var bSnapSectionTimesToInterval: Boolean
    open var bSnapSectionTimesToSections: Boolean
    open var bSnapKeysAndSectionsToPlayRange: Boolean
    open var bSnapPlayTimeToKeys: Boolean
    open var bSnapPlayTimeToInterval: Boolean
    open var bSnapPlayTimeToPressedKey: Boolean
    open var bSnapPlayTimeToDraggedKey: Boolean
    open var bSnapCurveValueToInterval: Boolean
    open var bLabelBrowserVisible: Boolean
    open var bShowSelectedNodesOnly: Boolean
    open var bRewindOnRecord: Boolean
    open var ZoomPosition: String /* "SZP_CurrentTime" | "SZP_MousePosition" | "SZP_MAX" */
    open var bAutoScrollEnabled: Boolean
    open var bLinkCurveEditorTimeRange: Boolean
    open var bSynchronizeCurveEditorSelection: Boolean
    open var bIsolateCurveEditorToSelection: Boolean
    open var LoopMode: String /* "SLM_NoLoop" | "SLM_Loop" | "SLM_LoopSelectionRange" | "SLM_MAX" */
    open var bKeepCursorInPlayRangeWhileScrubbing: Boolean
    open var bKeepCursorInPlayRange: Boolean
    open var bKeepPlayRangeInSectionBounds: Boolean
    open var ZeroPadFrames: Number
    open var bShowCombinedKeyframes: Boolean
    open var bInfiniteKeyAreas: Boolean
    open var bShowChannelColors: Boolean
    open var bActivateRealtimeViewports: Boolean
    open var bEvaluateSubSequencesInIsolation: Boolean
    open var bRerunConstructionScripts: Boolean
    open var bShowDebugVisualization: Boolean
    open var bVisualizePreAndPostRoll: Boolean
    open var bCompileDirectorOnEvaluate: Boolean
    open var TrajectoryPathCap: Any
    open var bShowOutlinerInfoColumn: Boolean
    open var FrameNumberDisplayFormat: String /* "NonDropFrameTimecode" | "DropFrameTimecode" | "Seconds" | "Frames" | "MAX_Count" | "EFrameNumberDisplayFormats_MAX" */

    companion object {
        fun Load(ResourceName: String): SequencerSettings
        fun Find(Outer: UObject, ResourceName: String): SequencerSettings
        fun GetDefaultObject(): SequencerSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequencerSettings
        fun C(Other: UObject): SequencerSettings
        fun C(Other: Any): SequencerSettings
    }
}

external open class SequencerTrackFilterExtension : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SequencerTrackFilterExtension
        fun Find(Outer: UObject, ResourceName: String): SequencerTrackFilterExtension
        fun GetDefaultObject(): SequencerTrackFilterExtension
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SequencerTrackFilterExtension
        fun C(Other: UObject): SequencerTrackFilterExtension
        fun C(Other: Any): SequencerTrackFilterExtension
    }
}

external open class SoundNode : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ChildNodes: Array<SoundNode>
    open var GraphNode: EdGraphNode

    companion object {
        fun Load(ResourceName: String): SoundNode
        fun Find(Outer: UObject, ResourceName: String): SoundNode
        fun GetDefaultObject(): SoundNode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundNode
        fun C(Other: UObject): SoundNode
        fun C(Other: Any): SoundNode
    }
}

external open class SoundCue : SoundBase {
    constructor()
    constructor(Outer: UObject)
    open var bOverrideAttenuation: Boolean
    open var bExcludeFromRandomNodeBranchCulling: Boolean
    open var FirstNode: SoundNode
    open var VolumeMultiplier: Number
    open var PitchMultiplier: Number
    open var AttenuationOverrides: SoundAttenuationSettings
    open var AllNodes: Array<SoundNode>
    open var SoundCueGraph: EdGraph
    open var SubtitlePriority: Number
    open var bHasPlayWhenSilent: Boolean

    companion object {
        fun Load(ResourceName: String): SoundCue
        fun Find(Outer: UObject, ResourceName: String): SoundCue
        fun GetDefaultObject(): SoundCue
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SoundCue
        fun C(Other: UObject): SoundCue
        fun C(Other: Any): SoundCue
    }
}

external open class VREditorAssetContainer : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var DockableWindowCloseSound: SoundBase
    open var DockableWindowOpenSound: SoundBase
    open var DockableWindowDropSound: SoundBase
    open var DockableWindowDragSound: SoundBase
    open var DropFromContentBrowserSound: SoundBase
    open var RadialMenuOpenSound: SoundBase
    open var RadialMenuCloseSound: SoundBase
    open var TeleportSound: SoundBase
    open var ButtonPressSound: SoundCue
    open var AutoScaleSound: SoundBase
    open var GenericHMDMesh: StaticMesh
    open var PlaneMesh: StaticMesh
    open var CylinderMesh: StaticMesh
    open var LaserPointerStartMesh: StaticMesh
    open var LaserPointerMesh: StaticMesh
    open var LaserPointerEndMesh: StaticMesh
    open var LaserPointerHoverMesh: StaticMesh
    open var VivePreControllerMesh: StaticMesh
    open var OculusControllerMesh: StaticMesh
    open var GenericControllerMesh: StaticMesh
    open var TeleportRootMesh: StaticMesh
    open var WindowMesh: StaticMesh
    open var WindowSelectionBarMesh: StaticMesh
    open var WindowCloseButtonMesh: StaticMesh
    open var RadialMenuMainMesh: StaticMesh
    open var RadialMenuPointerMesh: StaticMesh
    open var PointerCursorMesh: StaticMesh
    open var LineSegmentCylinderMesh: StaticMesh
    open var JointSphereMesh: StaticMesh
    open var DockingButtonMesh: StaticMesh
    open var GridMaterial: MaterialInterface
    open var LaserPointerMaterial: MaterialInterface
    open var LaserPointerTranslucentMaterial: MaterialInterface
    open var WorldMovementPostProcessMaterial: Material
    open var TextMaterial: MaterialInterface
    open var VivePreControllerMaterial: MaterialInterface
    open var OculusControllerMaterial: MaterialInterface
    open var TeleportMaterial: MaterialInterface
    open var WindowMaterial: MaterialInterface
    open var WindowTranslucentMaterial: MaterialInterface
    open var LineMaterial: Material
    open var TranslucentTextMaterial: MaterialInterface
    open var TextFont: Font

    companion object {
        fun Load(ResourceName: String): VREditorAssetContainer
        fun Find(Outer: UObject, ResourceName: String): VREditorAssetContainer
        fun GetDefaultObject(): VREditorAssetContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorAssetContainer
        fun C(Other: UObject): VREditorAssetContainer
        fun C(Other: Any): VREditorAssetContainer
    }
}

external open class EditorWorldExtensionActorData {
    open var Actor: Actor
    open var bValidForPIE: Boolean
    open fun clone(): EditorWorldExtensionActorData

    companion object {
        fun C(Other: UObject): EditorWorldExtensionActorData
        fun C(Other: Any): EditorWorldExtensionActorData
    }
}

external open class EditorWorldExtension : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ExtensionActors: Array<EditorWorldExtensionActorData>

    companion object {
        fun Load(ResourceName: String): EditorWorldExtension
        fun Find(Outer: UObject, ResourceName: String): EditorWorldExtension
        fun GetDefaultObject(): EditorWorldExtension
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): EditorWorldExtension
        fun C(Other: UObject): EditorWorldExtension
        fun C(Other: Any): EditorWorldExtension
    }
}

external object EHorizTextAligment {
    var EHTA_Left: String /* "EHTA_Left" */
    var EHTA_Center: String /* "EHTA_Center" */
    var EHTA_Right: String /* "EHTA_Right" */
    var EHTA_MAX: String /* "EHTA_MAX" */
}

external object EVerticalTextAligment {
    var EVRTA_TextTop: String /* "EVRTA_TextTop" */
    var EVRTA_TextCenter: String /* "EVRTA_TextCenter" */
    var EVRTA_TextBottom: String /* "EVRTA_TextBottom" */
    var EVRTA_QuadTop: String /* "EVRTA_QuadTop" */
    var EVRTA_MAX: String /* "EVRTA_MAX" */
}

external open class TextRenderComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var text: String
    open var TextMaterial: MaterialInterface
    open var Font: Font
    open var HorizontalAlignment: String /* "EHTA_Left" | "EHTA_Center" | "EHTA_Right" | "EHTA_MAX" */
    open var VerticalAlignment: String /* "EVRTA_TextTop" | "EVRTA_TextCenter" | "EVRTA_TextBottom" | "EVRTA_QuadTop" | "EVRTA_MAX" */
    open var TextRenderColor: Color
    open var XScale: Number
    open var YScale: Number
    open var WorldSize: Number
    open var InvDefaultSize: Number
    open var HorizSpacingAdjust: Number
    open var VertSpacingAdjust: Number
    open var bAlwaysRenderAsText: Boolean
    open fun SetYScale(Value: Number)
    open fun SetXScale(Value: Number)
    open fun SetWorldSize(Value: Number)
    open fun SetVertSpacingAdjust(Value: Number)
    open fun SetVerticalAlignment(Value: String /* "EVRTA_TextTop" | "EVRTA_TextCenter" | "EVRTA_TextBottom" | "EVRTA_QuadTop" | "EVRTA_MAX" */)
    open fun SetTextRenderColor(Value: Color)
    open fun SetTextMaterial(Material: MaterialInterface)
    open fun SetText(Value: String)
    open fun SetHorizSpacingAdjust(Value: Number)
    open fun SetHorizontalAlignment(Value: String /* "EHTA_Left" | "EHTA_Center" | "EHTA_Right" | "EHTA_MAX" */)
    open fun SetFont(Value: Font)
    open fun K2_SetText(Value: String)
    open fun GetTextWorldSize(): Vector
    open fun GetTextLocalSize(): Vector

    companion object {
        fun Load(ResourceName: String): TextRenderComponent
        fun Find(Outer: UObject, ResourceName: String): TextRenderComponent
        fun GetDefaultObject(): TextRenderComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextRenderComponent
        fun C(Other: UObject): TextRenderComponent
        fun C(Other: Any): TextRenderComponent
    }
}

external open class PostProcessComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var Settings: PostProcessSettings
    open var Priority: Number
    open var BlendRadius: Number
    open var BlendWeight: Number
    open var bEnabled: Boolean
    open var bUnbound: Boolean

    companion object {
        fun Load(ResourceName: String): PostProcessComponent
        fun Find(Outer: UObject, ResourceName: String): PostProcessComponent
        fun GetDefaultObject(): PostProcessComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PostProcessComponent
        fun C(Other: UObject): PostProcessComponent
        fun C(Other: Any): PostProcessComponent
    }
}

external open class VREditorAvatarActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var HeadMeshComponent: StaticMeshComponent
    open var WorldMovementGridMeshComponent: StaticMeshComponent
    open var WorldMovementGridMID: MaterialInstanceDynamic
    open var WorldMovementGridOpacity: Number
    open var bIsDrawingWorldMovementPostProcess: Boolean
    open var WorldMovementPostProcessMaterial: MaterialInstanceDynamic
    open var ScaleProgressMeshComponent: StaticMeshComponent
    open var CurrentScaleProgressMeshComponent: StaticMeshComponent
    open var UserScaleIndicatorText: TextRenderComponent
    open var FixedUserScaleMID: MaterialInstanceDynamic
    open var TranslucentFixedUserScaleMID: MaterialInstanceDynamic
    open var CurrentUserScaleMID: MaterialInstanceDynamic
    open var TranslucentCurrentUserScaleMID: MaterialInstanceDynamic
    open var PostProcessComponent: PostProcessComponent
    open var VRMode: VREditorMode

    companion object {
        fun GetDefaultObject(): VREditorAvatarActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorAvatarActor
        fun C(Other: UObject): VREditorAvatarActor
        fun C(Other: Any): VREditorAvatarActor
    }
}

external open class VREditorBaseActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var VRMode: VREditorMode

    companion object {
        fun GetDefaultObject(): VREditorBaseActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorBaseActor
        fun C(Other: UObject): VREditorBaseActor
        fun C(Other: Any): VREditorBaseActor
    }
}

external open class VREditorFloatingUICreationContext {
    open var WidgetClass: UnrealEngineClass
    open var PanelID: String
    open var PanelSpawnOffset: Transform
    open var PanelSize: Vector2D
    open var PanelMesh: StaticMesh
    open var EditorUISize: Number
    open var bHideWindowHandles: Boolean
    open fun clone(): VREditorFloatingUICreationContext

    companion object {
        fun C(Other: UObject): VREditorFloatingUICreationContext
        fun C(Other: Any): VREditorFloatingUICreationContext
    }
}

external object EWidgetSpace {
    var World: String /* "World" */
    var Screen: String /* "Screen" */
    var EWidgetSpace_MAX: String /* "EWidgetSpace_MAX" */
}

external object EWidgetTimingPolicy {
    var RealTime: String /* "RealTime" */
    var GameTime: String /* "GameTime" */
    var EWidgetTimingPolicy_MAX: String /* "EWidgetTimingPolicy_MAX" */
}

external object EWindowVisibility {
    var Visible: String /* "Visible" */
    var SelfHitTestInvisible: String /* "SelfHitTestInvisible" */
    var EWindowVisibility_MAX: String /* "EWindowVisibility_MAX" */
}

external object EWidgetBlendMode {
    var Opaque: String /* "Opaque" */
    var Masked: String /* "Masked" */
    var Transparent: String /* "Transparent" */
    var EWidgetBlendMode_MAX: String /* "EWidgetBlendMode_MAX" */
}

external object EWidgetGeometryMode {
    var Plane: String /* "Plane" */
    var Cylinder: String /* "Cylinder" */
    var EWidgetGeometryMode_MAX: String /* "EWidgetGeometryMode_MAX" */
}

external open class WidgetComponent : MeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var Space: String /* "World" | "Screen" | "EWidgetSpace_MAX" */
    open var TimingPolicy: String /* "RealTime" | "GameTime" | "EWidgetTimingPolicy_MAX" */
    open var WidgetClass: UnrealEngineClass
    open var DrawSize: IntPoint
    open var bManuallyRedraw: Boolean
    open var bRedrawRequested: Boolean
    open var RedrawTime: Number
    open var CurrentDrawSize: IntPoint
    open var bDrawAtDesiredSize: Boolean
    open var Pivot: Vector2D
    open var bReceiveHardwareInput: Boolean
    open var bWindowFocusable: Boolean
    open var WindowVisibility: String /* "Visible" | "SelfHitTestInvisible" | "EWindowVisibility_MAX" */
    open var bApplyGammaCorrection: Boolean
    open var OwnerPlayer: LocalPlayer
    open var BackgroundColor: LinearColor
    open var TintColorAndOpacity: LinearColor
    open var OpacityFromTexture: Number
    open var BlendMode: String /* "Opaque" | "Masked" | "Transparent" | "EWidgetBlendMode_MAX" */
    open var bIsTwoSided: Boolean
    open var TickWhenOffscreen: Boolean
    open var Widget: UserWidget
    open var BodySetup: BodySetup
    open var TranslucentMaterial: MaterialInterface
    open var TranslucentMaterial_OneSided: MaterialInterface
    open var OpaqueMaterial: MaterialInterface
    open var OpaqueMaterial_OneSided: MaterialInterface
    open var MaskedMaterial: MaterialInterface
    open var MaskedMaterial_OneSided: MaterialInterface
    open var RenderTarget: TextureRenderTarget2D
    open var MaterialInstance: MaterialInstanceDynamic
    open var bAddedToScreen: Boolean
    open var bEditTimeUsable: Boolean
    open var SharedLayerName: String
    open var LayerZOrder: Number
    open var GeometryMode: String /* "Plane" | "Cylinder" | "EWidgetGeometryMode_MAX" */
    open var CylinderArcAngle: Number
    open fun SetWindowVisibility(InVisibility: String /* "Visible" | "SelfHitTestInvisible" | "EWindowVisibility_MAX" */)
    open fun SetWindowFocusable(bInWindowFocusable: Boolean)
    open fun SetWidgetSpace(NewSpace: String /* "World" | "Screen" | "EWidgetSpace_MAX" */)
    open fun SetWidget(Widget: UserWidget)
    open fun SetTwoSided(bWantTwoSided: Boolean)
    open fun SetTintColorAndOpacity(NewTintColorAndOpacity: LinearColor)
    open fun SetTickWhenOffscreen(bWantTickWhenOffscreen: Boolean)
    open fun SetRedrawTime(InRedrawTime: Number)
    open fun SetPivot(InPivot: Vector2D)
    open fun SetOwnerPlayer(LocalPlayer: LocalPlayer)
    open fun SetManuallyRedraw(bUseManualRedraw: Boolean)
    open fun SetGeometryMode(InGeometryMode: String /* "Plane" | "Cylinder" | "EWidgetGeometryMode_MAX" */)
    open fun SetDrawSize(Size: Vector2D)
    open fun SetDrawAtDesiredSize(bInDrawAtDesiredSize: Boolean)
    open fun SetCylinderArcAngle(InCylinderArcAngle: Number)
    open fun SetBackgroundColor(NewBackgroundColor: LinearColor)
    open fun RequestRedraw()
    open fun GetWindowVisiblility(): String /* "Visible" | "SelfHitTestInvisible" | "EWindowVisibility_MAX" */
    open fun GetWindowFocusable(): Boolean
    open fun GetWidgetSpace(): String /* "World" | "Screen" | "EWidgetSpace_MAX" */
    open fun GetUserWidgetObject(): UserWidget
    open fun GetTwoSided(): Boolean
    open fun GetTickWhenOffscreen(): Boolean
    open fun GetRenderTarget(): TextureRenderTarget2D
    open fun GetRedrawTime(): Number
    open fun GetPivot(): Vector2D
    open fun GetOwnerPlayer(): LocalPlayer
    open fun GetMaterialInstance(): MaterialInstanceDynamic
    open fun GetManuallyRedraw(): Boolean
    open fun GetGeometryMode(): String /* "Plane" | "Cylinder" | "EWidgetGeometryMode_MAX" */
    open fun GetDrawSize(): Vector2D
    open fun GetDrawAtDesiredSize(): Boolean
    open fun GetCylinderArcAngle(): Number
    open fun GetCurrentDrawSize(): Vector2D

    companion object {
        fun Load(ResourceName: String): WidgetComponent
        fun Find(Outer: UObject, ResourceName: String): WidgetComponent
        fun GetDefaultObject(): WidgetComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): WidgetComponent
        fun C(Other: UObject): WidgetComponent
        fun C(Other: Any): WidgetComponent
    }
}

external object EVREditorWidgetDrawingPolicy {
    var Always: String /* "Always" */
    var Hovering: String /* "Hovering" */
    var EVREditorWidgetDrawingPolicy_MAX: String /* "EVREditorWidgetDrawingPolicy_MAX" */
}

external open class VREditorWidgetComponent : WidgetComponent {
    constructor()
    constructor(Outer: UObject)
    open var DrawingPolicy: String /* "Always" | "Hovering" | "EVREditorWidgetDrawingPolicy_MAX" */
    open var bIsHovering: Boolean
    open var bHasEverDrawn: Boolean

    companion object {
        fun Load(ResourceName: String): VREditorWidgetComponent
        fun Find(Outer: UObject, ResourceName: String): VREditorWidgetComponent
        fun GetDefaultObject(): VREditorWidgetComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorWidgetComponent
        fun C(Other: UObject): VREditorWidgetComponent
        fun C(Other: Any): VREditorWidgetComponent
    }
}

external open class VREditorFloatingUI(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : VREditorBaseActor {
    open var CreationContext: VREditorFloatingUICreationContext
    open var UserWidget: UserWidget
    open var WidgetComponent: VREditorWidgetComponent
    open var WindowMeshComponent: StaticMeshComponent
    open var UserWidgetClass: UnrealEngineClass

    companion object {
        fun GetDefaultObject(): VREditorFloatingUI
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorFloatingUI
        fun C(Other: UObject): VREditorFloatingUI
        fun C(Other: Any): VREditorFloatingUI
    }
}

external open class VREditorRadialFloatingUI(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : VREditorBaseActor {
    open var WidgetComponents: Array<VREditorWidgetComponent>
    open var WindowMeshComponent: StaticMeshComponent
    open var ArrowMeshComponent: StaticMeshComponent
    open var CentralWidgetComponent: VREditorWidgetComponent

    companion object {
        fun GetDefaultObject(): VREditorRadialFloatingUI
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorRadialFloatingUI
        fun C(Other: UObject): VREditorRadialFloatingUI
        fun C(Other: Any): VREditorRadialFloatingUI
    }
}

external open class ViewportDragOperation : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ViewportDragOperation
        fun Find(Outer: UObject, ResourceName: String): ViewportDragOperation
        fun GetDefaultObject(): ViewportDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportDragOperation
        fun C(Other: UObject): ViewportDragOperation
        fun C(Other: Any): ViewportDragOperation
    }
}

external open class ViewportDragOperationComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var DragOperation: ViewportDragOperation
    open var DragOperationSubclass: UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): ViewportDragOperationComponent
        fun Find(Outer: UObject, ResourceName: String): ViewportDragOperationComponent
        fun GetDefaultObject(): ViewportDragOperationComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportDragOperationComponent
        fun C(Other: UObject): ViewportDragOperationComponent
        fun C(Other: Any): ViewportDragOperationComponent
    }
}

external open class VREditorDockableWindow(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : VREditorFloatingUI {
    open var DockButtonMeshComponent: StaticMeshComponent
    open var SelectionBarMeshComponent: StaticMeshComponent
    open var CloseButtonMeshComponent: StaticMeshComponent
    open var DockButtonMID: MaterialInstanceDynamic
    open var SelectionBarMID: MaterialInstanceDynamic
    open var SelectionBarTranslucentMID: MaterialInstanceDynamic
    open var CloseButtonMID: MaterialInstanceDynamic
    open var CloseButtonTranslucentMID: MaterialInstanceDynamic
    open var DragOperationComponent: ViewportDragOperationComponent

    companion object {
        fun GetDefaultObject(): VREditorDockableWindow
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorDockableWindow
        fun C(Other: UObject): VREditorDockableWindow
        fun C(Other: Any): VREditorDockableWindow
    }
}

external open class ViewportTransformer : UObject {
    constructor()
    constructor(Outer: UObject)
    open var ViewportWorldInteraction: ViewportWorldInteraction
    open fun Shutdown()
    open fun ShouldCenterTransformGizmoPivot(): Boolean
    open fun OnStopDragging(Interactor: ViewportInteractor)
    open fun OnStartDragging(Interactor: ViewportInteractor)
    open fun Init(InitViewportWorldInteraction: ViewportWorldInteraction)
    open fun CanAlignToActors(): Boolean

    companion object {
        fun Load(ResourceName: String): ViewportTransformer
        fun Find(Outer: UObject, ResourceName: String): ViewportTransformer
        fun GetDefaultObject(): ViewportTransformer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportTransformer
        fun C(Other: UObject): ViewportTransformer
        fun C(Other: Any): ViewportTransformer
    }
}

external open class GizmoHandle {
    open fun clone(): GizmoHandle

    companion object {
        fun C(Other: UObject): GizmoHandle
        fun C(Other: Any): GizmoHandle
    }
}

external open class GizmoHandleGroup : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var GizmoMaterial: MaterialInterface
    open var TranslucentGizmoMaterial: MaterialInterface
    open var Handles: Array<GizmoHandle>
    open var OwningTransformGizmoActor: BaseTransformGizmo
    open var DragOperationComponent: ViewportDragOperationComponent

    companion object {
        fun Load(ResourceName: String): GizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): GizmoHandleGroup
        fun GetDefaultObject(): GizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GizmoHandleGroup
        fun C(Other: UObject): GizmoHandleGroup
        fun C(Other: Any): GizmoHandleGroup
    }
}

external open class BaseTransformGizmo(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var SceneComponent: SceneComponent
    open var AllHandleGroups: Array<GizmoHandleGroup>
    open var WorldInteraction: ViewportWorldInteraction

    companion object {
        fun GetDefaultObject(): BaseTransformGizmo
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BaseTransformGizmo
        fun C(Other: UObject): BaseTransformGizmo
        fun C(Other: Any): BaseTransformGizmo
    }
}

external open class MouseCursorInteractor : ViewportInteractor {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MouseCursorInteractor
        fun Find(Outer: UObject, ResourceName: String): MouseCursorInteractor
        fun GetDefaultObject(): MouseCursorInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MouseCursorInteractor
        fun C(Other: UObject): MouseCursorInteractor
        fun C(Other: Any): MouseCursorInteractor
    }
}

external open class ViewportInteractionAssetContainer : DataAsset {
    constructor()
    constructor(Outer: UObject)
    open var GizmoHandleSelectedSound: SoundBase
    open var GizmoHandleDropSound: SoundBase
    open var SelectionChangeSound: SoundBase
    open var SelectionDropSound: SoundBase
    open var SelectionStartDragSound: SoundBase
    open var GridSnapSound: SoundBase
    open var ActorSnapSound: SoundBase
    open var UndoSound: SoundBase
    open var RedoSound: SoundBase
    open var GridMesh: StaticMesh
    open var TranslationHandleMesh: StaticMesh
    open var UniformScaleHandleMesh: StaticMesh
    open var ScaleHandleMesh: StaticMesh
    open var PlaneTranslationHandleMesh: StaticMesh
    open var RotationHandleMesh: StaticMesh
    open var RotationHandleSelectedMesh: StaticMesh
    open var StartRotationIndicatorMesh: StaticMesh
    open var CurrentRotationIndicatorMesh: StaticMesh
    open var FreeRotationHandleMesh: StaticMesh
    open var GridMaterial: MaterialInterface
    open var TransformGizmoMaterial: MaterialInterface
    open var TranslucentTransformGizmoMaterial: MaterialInterface

    companion object {
        fun Load(ResourceName: String): ViewportInteractionAssetContainer
        fun Find(Outer: UObject, ResourceName: String): ViewportInteractionAssetContainer
        fun GetDefaultObject(): ViewportInteractionAssetContainer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportInteractionAssetContainer
        fun C(Other: UObject): ViewportInteractionAssetContainer
        fun C(Other: Any): ViewportInteractionAssetContainer
    }
}

external open class ViewportWorldInteraction : EditorWorldExtension {
    constructor()
    constructor(Outer: UObject)
    open var Interactors: Array<ViewportInteractor>
    open var ViewportTransformer: ViewportTransformer
    open var TransformGizmoActor: BaseTransformGizmo
    open var SnapGridActor: Actor
    open var SnapGridMeshComponent: StaticMeshComponent
    open var SnapGridMID: MaterialInstanceDynamic
    open var DefaultMouseCursorInteractor: MouseCursorInteractor
    open var ActorsToExcludeFromHitTest: Array<Any>
    open var AssetContainer: ViewportInteractionAssetContainer
    open fun SetRoomTransformForNextFrame(NewRoomTransform: Transform)
    open fun SetHeadTransform(NewHeadTransform: Transform)
    open fun RemoveInteractor(Interactor: ViewportInteractor)
    open fun GetWorldScaleFactor(): Number
    open fun GetTransformGizmoActor(): BaseTransformGizmo
    open fun GetRoomTransform(): Transform
    open fun GetRoomSpaceHeadTransform(): Transform
    open fun GetInteractors(): Array<ViewportInteractor>
    open fun GetHeadTransform(): Transform
    open fun AddInteractor(Interactor: ViewportInteractor)
    open fun AddActorToExcludeFromHitTests(ActorToExcludeFromHitTests: Actor)

    companion object {
        fun Load(ResourceName: String): ViewportWorldInteraction
        fun Find(Outer: UObject, ResourceName: String): ViewportWorldInteraction
        fun GetDefaultObject(): ViewportWorldInteraction
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportWorldInteraction
        fun C(Other: UObject): ViewportWorldInteraction
        fun C(Other: Any): ViewportWorldInteraction
    }
}

external object EViewportInteractionDraggingMode {
    var Nothing: String /* "Nothing" */
    var TransformablesWithGizmo: String /* "TransformablesWithGizmo" */
    var TransformablesAtLaserImpact: String /* "TransformablesAtLaserImpact" */
    var AssistingDrag: String /* "AssistingDrag" */
    var TransformablesFreely: String /* "TransformablesFreely" */
    var World: String /* "World" */
    var Interactable: String /* "Interactable" */
    var Material: String /* "Material" */
    var EViewportInteractionDraggingMode_MAX: String /* "EViewportInteractionDraggingMode_MAX" */
}

external open class ViewportActionKeyInput {
    open var ActionType: String
    open var Event: String /* "IE_Pressed" | "IE_Released" | "IE_Repeat" | "IE_DoubleClick" | "IE_Axis" | "IE_MAX" */
    open var bIsInputCaptured: Boolean
    open fun clone(): ViewportActionKeyInput

    companion object {
        fun C(Other: UObject): ViewportActionKeyInput
        fun C(Other: Any): ViewportActionKeyInput
    }
}

external interface `T$531` {
    var bOutWasHandled: Boolean
}

external interface `T$532` {
    var OutHandTransform: Transform
    var OutForwardVector: Vector
    var `$`: Boolean
}

external interface `T$533` {
    var LaserPointerStart: Vector
    var LaserPointerEnd: Vector
    var `$`: Boolean
}

external open class ViewportInteractor : UObject {
    constructor()
    constructor(Outer: UObject)
    open var KeyToActionMap: Any
    open var WorldInteraction: ViewportWorldInteraction
    open var OtherInteractor: ViewportInteractor
    open fun Tick(DeltaTime: Number)
    open fun Shutdown()
    open fun SetDraggingMode(NewDraggingMode: String /* "Nothing" | "TransformablesWithGizmo" | "TransformablesAtLaserImpact" | "AssistingDrag" | "TransformablesFreely" | "World" | "Interactable" | "Material" | "EViewportInteractionDraggingMode_MAX" */)
    open fun IsHoveringOverGizmo(): Boolean
    open fun HandleInputKey_BP(Action: ViewportActionKeyInput, Key: Key, Event: String /* "IE_Pressed" | "IE_Released" | "IE_Repeat" | "IE_DoubleClick" | "IE_Axis" | "IE_MAX" */, bOutWasHandled: Boolean = definedExternally): `T$531`
    open fun HandleInputAxis_BP(Action: ViewportActionKeyInput, Key: Key, Delta: Number, DeltaTime: Number, bOutWasHandled: Boolean = definedExternally): `T$531`
    open fun GetWorldInteraction(): ViewportWorldInteraction
    open fun GetTransformAndForwardVector(OutHandTransform: Transform = definedExternally, OutForwardVector: Vector = definedExternally): `T$532`
    open fun GetTransform(): Transform
    open fun GetOtherInteractor(): ViewportInteractor
    open fun GetLaserPointer(LaserPointerStart: Vector = definedExternally, LaserPointerEnd: Vector = definedExternally, bEvenIfBlocked: Boolean = definedExternally, LaserLengthOverride: Number = definedExternally): `T$533`
    open fun GetHoverLocation(): Vector
    open fun GetDraggingMode(): String /* "Nothing" | "TransformablesWithGizmo" | "TransformablesAtLaserImpact" | "AssistingDrag" | "TransformablesFreely" | "World" | "Interactable" | "Material" | "EViewportInteractionDraggingMode_MAX" */

    companion object {
        fun Load(ResourceName: String): ViewportInteractor
        fun Find(Outer: UObject, ResourceName: String): ViewportInteractor
        fun GetDefaultObject(): ViewportInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportInteractor
        fun C(Other: UObject): ViewportInteractor
        fun C(Other: Any): ViewportInteractor
    }
}

external object ETrackingStatus {
    var NotTracked: String /* "NotTracked" */
    var InertialOnly: String /* "InertialOnly" */
    var Tracked: String /* "Tracked" */
    var ETrackingStatus_MAX: String /* "ETrackingStatus_MAX" */
}

external interface `T$534` {
    var bValueFound: Boolean
    var `$`: Number
}

external interface `T$535` {
    var bValueFound: Boolean
    var `$`: Vector
}

external open class MotionControllerComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var PlayerIndex: Number
    open var Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */
    open var MotionSource: String
    open var bDisableLowLatencyUpdate: Boolean
    open var CurrentTrackingStatus: String /* "NotTracked" | "InertialOnly" | "Tracked" | "ETrackingStatus_MAX" */
    open var bDisplayDeviceModel: Boolean
    open var DisplayModelSource: String
    open var CustomDisplayMesh: StaticMesh
    open var DisplayMeshMaterialOverrides: Array<MaterialInterface>
    open var DisplayComponent: PrimitiveComponent
    open fun SetTrackingSource(NewSource: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */)
    open fun SetTrackingMotionSource(NewSource: String)
    open fun SetShowDeviceModel(bShowControllerModel: Boolean)
    open fun SetDisplayModelSource(NewDisplayModelSource: String)
    open fun SetCustomDisplayMesh(NewDisplayMesh: StaticMesh)
    open fun SetAssociatedPlayerIndex(NewPlayer: Number)
    open fun OnMotionControllerUpdated()
    open fun IsTracked(): Boolean
    open fun GetTrackingSource(): String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */
    open fun GetParameterValue(InName: String, bValueFound: Boolean = definedExternally): `T$534`
    open fun GetHandJointPosition(jointIndex: Number, bValueFound: Boolean = definedExternally): `T$535`
    open fun DisableMotionTrackingForComponent()
    open fun EnableMotionTrackingForComponent(): Boolean
    open fun IsMotionTrackingEnabledForComponent(): Boolean

    companion object {
        fun Load(ResourceName: String): MotionControllerComponent
        fun Find(Outer: UObject, ResourceName: String): MotionControllerComponent
        fun GetDefaultObject(): MotionControllerComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MotionControllerComponent
        fun C(Other: UObject): MotionControllerComponent
        fun C(Other: Any): MotionControllerComponent
        fun DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent)
        fun EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): Boolean
        fun IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): Boolean
    }
}

external open class InterpCurvePointQuat {
    open var InVal: Number
    open var OutVal: Quat
    open var ArriveTangent: Quat
    open var LeaveTangent: Quat
    open var InterpMode: String /* "CIM_Linear" | "CIM_CurveAuto" | "CIM_Constant" | "CIM_CurveUser" | "CIM_CurveBreak" | "CIM_CurveAutoClamped" | "CIM_MAX" */
    open fun clone(): InterpCurvePointQuat

    companion object {
        fun C(Other: UObject): InterpCurvePointQuat
        fun C(Other: Any): InterpCurvePointQuat
    }
}

external open class InterpCurveQuat {
    open var Points: Array<InterpCurvePointQuat>
    open var bIsLooped: Boolean
    open var LoopKeyOffset: Number
    open fun clone(): InterpCurveQuat

    companion object {
        fun C(Other: UObject): InterpCurveQuat
        fun C(Other: Any): InterpCurveQuat
    }
}

external open class InterpCurvePointFloat {
    open var InVal: Number
    open var OutVal: Number
    open var ArriveTangent: Number
    open var LeaveTangent: Number
    open var InterpMode: String /* "CIM_Linear" | "CIM_CurveAuto" | "CIM_Constant" | "CIM_CurveUser" | "CIM_CurveBreak" | "CIM_CurveAutoClamped" | "CIM_MAX" */
    open fun clone(): InterpCurvePointFloat

    companion object {
        fun C(Other: UObject): InterpCurvePointFloat
        fun C(Other: Any): InterpCurvePointFloat
    }
}

external open class InterpCurveFloat {
    open var Points: Array<InterpCurvePointFloat>
    open var bIsLooped: Boolean
    open var LoopKeyOffset: Number
    open fun clone(): InterpCurveFloat

    companion object {
        fun C(Other: UObject): InterpCurveFloat
        fun C(Other: Any): InterpCurveFloat
    }
}

external open class SplineMetadata : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): SplineMetadata
        fun Find(Outer: UObject, ResourceName: String): SplineMetadata
        fun GetDefaultObject(): SplineMetadata
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SplineMetadata
        fun C(Other: UObject): SplineMetadata
        fun C(Other: Any): SplineMetadata
    }
}

external open class SplineCurves {
    open var Position: InterpCurveVector
    open var Rotation: InterpCurveQuat
    open var Scale: InterpCurveVector
    open var ReparamTable: InterpCurveFloat
    open var MetaData: SplineMetadata
    open fun clone(): SplineCurves

    companion object {
        fun C(Other: UObject): SplineCurves
        fun C(Other: Any): SplineCurves
    }
}

external object ESplineCoordinateSpace {
    var Local: String /* "Local" */
    var World: String /* "World" */
    var ESplineCoordinateSpace_MAX: String /* "ESplineCoordinateSpace_MAX" */
}

external object ESplinePointType {
    var Linear: String /* "Linear" */
    var Curve: String /* "Curve" */
    var Constant: String /* "Constant" */
    var CurveClamped: String /* "CurveClamped" */
    var CurveCustomTangent: String /* "CurveCustomTangent" */
    var ESplinePointType_MAX: String /* "ESplinePointType_MAX" */
}

external open class SplinePoint {
    open var InputKey: Number
    open var Position: Vector
    open var ArriveTangent: Vector
    open var LeaveTangent: Vector
    open var Rotation: Rotator
    open var Scale: Vector
    open var Type: String /* "Linear" | "Curve" | "Constant" | "CurveClamped" | "CurveCustomTangent" | "ESplinePointType_MAX" */
    open fun clone(): SplinePoint

    companion object {
        fun C(Other: UObject): SplinePoint
        fun C(Other: Any): SplinePoint
    }
}

external interface `T$536` {
    var Location: Vector
    var Tangent: Vector
}

external interface `T$537` {
    var LocalLocation: Vector
    var LocalTangent: Vector
}

external open class SplineComponent : PrimitiveComponent {
    constructor()
    constructor(Outer: UObject)
    open var SplineCurves: SplineCurves
    open var SplineInfo: InterpCurveVector
    open var SplineRotInfo: InterpCurveQuat
    open var SplineScaleInfo: InterpCurveVector
    open var SplineReparamTable: InterpCurveFloat
    open var bAllowSplineEditingPerInstance: Boolean
    open var ReparamStepsPerSegment: Number
    open var Duration: Number
    open var bStationaryEndpoints: Boolean
    open var bSplineHasBeenEdited: Boolean
    open var bModifiedByConstructionScript: Boolean
    open var bInputSplinePointsToConstructionScript: Boolean
    open var bDrawDebug: Boolean
    open var bClosedLoop: Boolean
    open var bLoopPositionOverride: Boolean
    open var LoopPosition: Number
    open var DefaultUpVector: Vector
    open var EditorUnselectedSplineSegmentColor: LinearColor
    open var EditorSelectedSplineSegmentColor: LinearColor
    open var bAllowDiscontinuousSpline: Boolean
    open var bShouldVisualizeScale: Boolean
    open var ScaleVisualizationWidth: Number
    open fun UpdateSpline()
    open fun SetWorldLocationAtSplinePoint(PointIndex: Number, InLocation: Vector)
    open fun SetUpVectorAtSplinePoint(PointIndex: Number, InUpVector: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun SetUnselectedSplineSegmentColor(SegmentColor: LinearColor)
    open fun SetTangentsAtSplinePoint(PointIndex: Number, InArriveTangent: Vector, InLeaveTangent: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun SetTangentAtSplinePoint(PointIndex: Number, InTangent: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun SetSplineWorldPoints(Points: Array<Vector>)
    open fun SetSplinePointType(PointIndex: Number, Type: String /* "Linear" | "Curve" | "Constant" | "CurveClamped" | "CurveCustomTangent" | "ESplinePointType_MAX" */, bUpdateSpline: Boolean)
    open fun SetSplinePoints(Points: Array<Vector>, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun SetSplineLocalPoints(Points: Array<Vector>)
    open fun SetSelectedSplineSegmentColor(SegmentColor: LinearColor)
    open fun SetLocationAtSplinePoint(PointIndex: Number, InLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun SetDrawDebug(bShow: Boolean)
    open fun SetDefaultUpVector(UpVector: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */)
    open fun SetClosedLoopAtPosition(bInClosedLoop: Boolean, Key: Number, bUpdateSpline: Boolean)
    open fun SetClosedLoop(bInClosedLoop: Boolean, bUpdateSpline: Boolean)
    open fun RemoveSplinePoint(index: Number, bUpdateSpline: Boolean)
    open fun IsClosedLoop(): Boolean
    open fun GetWorldTangentAtDistanceAlongSpline(Distance: Number): Vector
    open fun GetWorldRotationAtTime(Time: Number, bUseConstantVelocity: Boolean): Rotator
    open fun GetWorldRotationAtDistanceAlongSpline(Distance: Number): Rotator
    open fun GetWorldLocationAtTime(Time: Number, bUseConstantVelocity: Boolean): Vector
    open fun GetWorldLocationAtSplinePoint(PointIndex: Number): Vector
    open fun GetWorldLocationAtDistanceAlongSpline(Distance: Number): Vector
    open fun GetWorldDirectionAtTime(Time: Number, bUseConstantVelocity: Boolean): Vector
    open fun GetWorldDirectionAtDistanceAlongSpline(Distance: Number): Vector
    open fun GetUpVectorAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Vector
    open fun GetUpVectorAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetUpVectorAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetTransformAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean, bUseScale: Boolean): Transform
    open fun GetTransformAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseScale: Boolean): Transform
    open fun GetTransformAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseScale: Boolean): Transform
    open fun GetTangentAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Vector
    open fun GetTangentAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetTangentAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetSplinePointType(PointIndex: Number): String /* "Linear" | "Curve" | "Constant" | "CurveClamped" | "CurveCustomTangent" | "ESplinePointType_MAX" */
    open fun GetSplineLength(): Number
    open fun GetScaleAtTime(Time: Number, bUseConstantVelocity: Boolean): Vector
    open fun GetScaleAtSplinePoint(PointIndex: Number): Vector
    open fun GetScaleAtDistanceAlongSpline(Distance: Number): Vector
    open fun GetRotationAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Rotator
    open fun GetRotationAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Rotator
    open fun GetRotationAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Rotator
    open fun GetRollAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Number
    open fun GetRollAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Number
    open fun GetRollAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Number
    open fun GetRightVectorAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Vector
    open fun GetRightVectorAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetRightVectorAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetNumberOfSplinePoints(): Number
    open fun GetLocationAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Vector
    open fun GetLocationAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetLocationAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetLocationAndTangentAtSplinePoint(PointIndex: Number, Location: Vector = definedExternally, Tangent: Vector = definedExternally, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */ = definedExternally): `T$536`
    open fun GetLocalLocationAndTangentAtSplinePoint(PointIndex: Number, LocalLocation: Vector = definedExternally, LocalTangent: Vector = definedExternally): `T$537`
    open fun GetLeaveTangentAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetInputKeyAtDistanceAlongSpline(Distance: Number): Number
    open fun GetFloatPropertyAtSplinePoint(index: Number, PropertyName: String): Number
    open fun GetDistanceAlongSplineAtSplinePoint(PointIndex: Number): Number
    open fun GetDirectionAtTime(Time: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseConstantVelocity: Boolean): Vector
    open fun GetDirectionAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetDirectionAtDistanceAlongSpline(Distance: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetDefaultUpVector(CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun GetArriveTangentAtSplinePoint(PointIndex: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun FindUpVectorClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun FindTransformClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUseScale: Boolean): Transform
    open fun FindTangentClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun FindScaleClosestToWorldLocation(WorldLocation: Vector): Vector
    open fun FindRotationClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Rotator
    open fun FindRollClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Number
    open fun FindRightVectorClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun FindLocationClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun FindInputKeyClosestToWorldLocation(WorldLocation: Vector): Number
    open fun FindDirectionClosestToWorldLocation(WorldLocation: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */): Vector
    open fun ClearSplinePoints(bUpdateSpline: Boolean)
    open fun AddSplineWorldPoint(Position: Vector)
    open fun AddSplinePointAtIndex(Position: Vector, index: Number, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun AddSplinePoint(Position: Vector, CoordinateSpace: String /* "Local" | "World" | "ESplineCoordinateSpace_MAX" */, bUpdateSpline: Boolean)
    open fun AddSplineLocalPoint(Position: Vector)
    open fun AddPoints(Points: Array<SplinePoint>, bUpdateSpline: Boolean)
    open fun AddPoint(Point: SplinePoint, bUpdateSpline: Boolean)

    companion object {
        fun Load(ResourceName: String): SplineComponent
        fun Find(Outer: UObject, ResourceName: String): SplineComponent
        fun GetDefaultObject(): SplineComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SplineComponent
        fun C(Other: UObject): SplineComponent
        fun C(Other: Any): SplineComponent
    }
}

external open class SplineMeshParams {
    open var StartPos: Vector
    open var StartTangent: Vector
    open var StartScale: Vector2D
    open var StartRoll: Number
    open var StartOffset: Vector2D
    open var EndPos: Vector
    open var EndTangent: Vector
    open var EndScale: Vector2D
    open var EndRoll: Number
    open var EndOffset: Vector2D
    open fun clone(): SplineMeshParams

    companion object {
        fun C(Other: UObject): SplineMeshParams
        fun C(Other: Any): SplineMeshParams
    }
}

external object ESplineMeshAxis {
    var X: String /* "X" */
    var Y: String /* "Y" */
    var Z: String /* "Z" */
    var ESplineMeshAxis_MAX: String /* "ESplineMeshAxis_MAX" */
}

external open class SplineMeshComponent : StaticMeshComponent {
    constructor()
    constructor(Outer: UObject)
    open var SplineParams: SplineMeshParams
    open var SplineUpDir: Vector
    open var bAllowSplineEditingPerInstance: Boolean
    open var bSmoothInterpRollScale: Boolean
    open var ForwardAxis: String /* "X" | "Y" | "Z" | "ESplineMeshAxis_MAX" */
    open var SplineBoundaryMin: Number
    open var SplineBoundaryMax: Number
    open var BodySetup: BodySetup
    open var CachedMeshBodySetupGuid: Guid
    open var bSelected: Boolean
    open var bMeshDirty: Boolean
    open fun UpdateMesh()
    open fun SetStartTangent(StartTangent: Vector, bUpdateMesh: Boolean)
    open fun SetStartScale(StartScale: Vector2D, bUpdateMesh: Boolean)
    open fun SetStartRoll(StartRoll: Number, bUpdateMesh: Boolean)
    open fun SetStartPosition(StartPos: Vector, bUpdateMesh: Boolean)
    open fun SetStartOffset(StartOffset: Vector2D, bUpdateMesh: Boolean)
    open fun SetStartAndEnd(StartPos: Vector, StartTangent: Vector, EndPos: Vector, EndTangent: Vector, bUpdateMesh: Boolean)
    open fun SetSplineUpDir(InSplineUpDir: Vector, bUpdateMesh: Boolean)
    open fun SetForwardAxis(InForwardAxis: String /* "X" | "Y" | "Z" | "ESplineMeshAxis_MAX" */, bUpdateMesh: Boolean)
    open fun SetEndTangent(EndTangent: Vector, bUpdateMesh: Boolean)
    open fun SetEndScale(EndScale: Vector2D, bUpdateMesh: Boolean)
    open fun SetEndRoll(EndRoll: Number, bUpdateMesh: Boolean)
    open fun SetEndPosition(EndPos: Vector, bUpdateMesh: Boolean)
    open fun SetEndOffset(EndOffset: Vector2D, bUpdateMesh: Boolean)
    open fun SetBoundaryMin(InBoundaryMin: Number, bUpdateMesh: Boolean)
    open fun SetBoundaryMax(InBoundaryMax: Number, bUpdateMesh: Boolean)
    open fun GetStartTangent(): Vector
    open fun GetStartScale(): Vector2D
    open fun GetStartRoll(): Number
    open fun GetStartPosition(): Vector
    open fun GetStartOffset(): Vector2D
    open fun GetSplineUpDir(): Vector
    open fun GetForwardAxis(): String /* "X" | "Y" | "Z" | "ESplineMeshAxis_MAX" */
    open fun GetEndTangent(): Vector
    open fun GetEndScale(): Vector2D
    open fun GetEndRoll(): Number
    open fun GetEndPosition(): Vector
    open fun GetEndOffset(): Vector2D
    open fun GetBoundaryMin(): Number
    open fun GetBoundaryMax(): Number

    companion object {
        fun Load(ResourceName: String): SplineMeshComponent
        fun Find(Outer: UObject, ResourceName: String): SplineMeshComponent
        fun GetDefaultObject(): SplineMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SplineMeshComponent
        fun C(Other: UObject): SplineMeshComponent
        fun C(Other: Any): SplineMeshComponent
    }
}

external open class LightComponentBase : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var LightGuid: Guid
    open var Brightness: Number
    open var Intensity: Number
    open var LightColor: Color
    open var bAffectsWorld: Boolean
    open var CastShadows: Boolean
    open var CastStaticShadows: Boolean
    open var CastDynamicShadows: Boolean
    open var bAffectTranslucentLighting: Boolean
    open var bTransmission: Boolean
    open var bCastVolumetricShadow: Boolean
    open var bCastRaytracedShadow: Boolean
    open var bAffectReflection: Boolean
    open var bAffectGlobalIllumination: Boolean
    open var IndirectLightingIntensity: Number
    open var VolumetricScatteringIntensity: Number
    open var SamplesPerPixel: Number
    open var StaticEditorTexture: Texture2D
    open var StaticEditorTextureScale: Number
    open var DynamicEditorTexture: Texture2D
    open var DynamicEditorTextureScale: Number
    open fun SetSamplesPerPixel(NewValue: Number)
    open fun SetCastVolumetricShadow(bNewValue: Boolean)
    open fun SetCastShadows(bNewValue: Boolean)
    open fun SetCastRaytracedShadow(bNewValue: Boolean)
    open fun SetAffectReflection(bNewValue: Boolean)
    open fun SetAffectGlobalIllumination(bNewValue: Boolean)
    open fun GetLightColor(): LinearColor

    companion object {
        fun Load(ResourceName: String): LightComponentBase
        fun Find(Outer: UObject, ResourceName: String): LightComponentBase
        fun GetDefaultObject(): LightComponentBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LightComponentBase
        fun C(Other: UObject): LightComponentBase
        fun C(Other: Any): LightComponentBase
    }
}

external open class TextureLightProfile : Texture2D {
    constructor()
    constructor(Outer: UObject)
    open var Brightness: Number
    open var TextureMultiplier: Number

    companion object {
        fun Load(ResourceName: String): TextureLightProfile
        fun Find(Outer: UObject, ResourceName: String): TextureLightProfile
        fun GetDefaultObject(): TextureLightProfile
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureLightProfile
        fun C(Other: UObject): TextureLightProfile
        fun C(Other: Any): TextureLightProfile
    }
}

external open class LightComponent : LightComponentBase {
    constructor()
    constructor(Outer: UObject)
    open var Temperature: Number
    open var MaxDrawDistance: Number
    open var MaxDistanceFadeRange: Number
    open var bUseTemperature: Boolean
    open var ShadowMapChannel: Number
    open var MinRoughness: Number
    open var SpecularScale: Number
    open var ShadowResolutionScale: Number
    open var ShadowBias: Number
    open var ShadowSlopeBias: Number
    open var ShadowSharpen: Number
    open var ContactShadowLength: Number
    open var ContactShadowLengthInWS: Boolean
    open var InverseSquaredFalloff: Boolean
    open var CastTranslucentShadows: Boolean
    open var bCastShadowsFromCinematicObjectsOnly: Boolean
    open var bAffectDynamicIndirectLighting: Boolean
    open var bForceCachedShadowsForMovablePrimitives: Boolean
    open var LightingChannels: LightingChannels
    open var LightFunctionMaterial: MaterialInterface
    open var LightFunctionScale: Vector
    open var IESTexture: TextureLightProfile
    open var bUseIESBrightness: Boolean
    open var IESBrightnessScale: Number
    open var LightFunctionFadeDistance: Number
    open var DisabledBrightness: Number
    open var bEnableLightShaftBloom: Boolean
    open var BloomScale: Number
    open var BloomThreshold: Number
    open var BloomTint: Color
    open var bUseRayTracedDistanceFieldShadows: Boolean
    open var RayStartOffsetDepthScale: Number
    open fun SetVolumetricScatteringIntensity(NewIntensity: Number)
    open fun SetUseIESBrightness(bNewValue: Boolean)
    open fun SetTransmission(bNewValue: Boolean)
    open fun SetTemperature(NewTemperature: Number)
    open fun SetSpecularScale(NewValue: Number)
    open fun SetShadowSlopeBias(NewValue: Number)
    open fun SetShadowBias(NewValue: Number)
    open fun SetLightFunctionScale(NewLightFunctionScale: Vector)
    open fun SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface)
    open fun SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: Number)
    open fun SetLightFunctionDisabledBrightness(NewValue: Number)
    open fun SetLightColor(NewLightColor: LinearColor, bSRGB: Boolean)
    open fun SetIntensity(NewIntensity: Number)
    open fun SetIndirectLightingIntensity(NewIntensity: Number)
    open fun SetIESTexture(NewValue: TextureLightProfile)
    open fun SetIESBrightnessScale(NewValue: Number)
    open fun SetForceCachedShadowsForMovablePrimitives(bNewValue: Boolean)
    open fun SetEnableLightShaftBloom(bNewValue: Boolean)
    open fun SetBloomTint(NewValue: Color)
    open fun SetBloomThreshold(NewValue: Number)
    open fun SetBloomScale(NewValue: Number)
    open fun SetAffectTranslucentLighting(bNewValue: Boolean)
    open fun SetAffectDynamicIndirectLighting(bNewValue: Boolean)

    companion object {
        fun Load(ResourceName: String): LightComponent
        fun Find(Outer: UObject, ResourceName: String): LightComponent
        fun GetDefaultObject(): LightComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LightComponent
        fun C(Other: UObject): LightComponent
        fun C(Other: Any): LightComponent
    }
}

external object ELightUnits {
    var Unitless: String /* "Unitless" */
    var Candelas: String /* "Candelas" */
    var Lumens: String /* "Lumens" */
    var ELightUnits_MAX: String /* "ELightUnits_MAX" */
}

external open class LightmassLightSettings {
    open var IndirectLightingSaturation: Number
    open var ShadowExponent: Number
    open var bUseAreaShadowsForStationaryLight: Boolean
    open fun clone(): LightmassLightSettings

    companion object {
        fun C(Other: UObject): LightmassLightSettings
        fun C(Other: Any): LightmassLightSettings
    }
}

external open class LightmassPointLightSettings : LightmassLightSettings {
    override fun clone(): LightmassPointLightSettings

    companion object {
        fun C(Other: UObject): LightmassPointLightSettings
        fun C(Other: Any): LightmassPointLightSettings
    }
}

external open class LocalLightComponent : LightComponent {
    constructor()
    constructor(Outer: UObject)
    open var IntensityUnits: String /* "Unitless" | "Candelas" | "Lumens" | "ELightUnits_MAX" */
    open var Radius: Number
    open var AttenuationRadius: Number
    open var LightmassSettings: LightmassPointLightSettings
    open fun SetIntensityUnits(NewIntensityUnits: String /* "Unitless" | "Candelas" | "Lumens" | "ELightUnits_MAX" */)
    open fun SetAttenuationRadius(NewRadius: Number)

    companion object {
        fun Load(ResourceName: String): LocalLightComponent
        fun Find(Outer: UObject, ResourceName: String): LocalLightComponent
        fun GetDefaultObject(): LocalLightComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalLightComponent
        fun GetUnitsConversionFactor(SrcUnits: String /* "Unitless" | "Candelas" | "Lumens" | "ELightUnits_MAX" */, TargetUnits: String /* "Unitless" | "Candelas" | "Lumens" | "ELightUnits_MAX" */, CosHalfConeAngle: Number): Number
        fun C(Other: UObject): LocalLightComponent
        fun C(Other: Any): LocalLightComponent
    }
}

external open class PointLightComponent : LocalLightComponent {
    constructor()
    constructor(Outer: UObject)
    open var bUseInverseSquaredFalloff: Boolean
    open var LightFalloffExponent: Number
    open var SourceRadius: Number
    open var SoftSourceRadius: Number
    open var SourceLength: Number
    open fun SetSourceRadius(bNewValue: Number)
    open fun SetSourceLength(NewValue: Number)
    open fun SetSoftSourceRadius(bNewValue: Number)
    open fun SetLightFalloffExponent(NewLightFalloffExponent: Number)

    companion object {
        fun Load(ResourceName: String): PointLightComponent
        fun Find(Outer: UObject, ResourceName: String): PointLightComponent
        fun GetDefaultObject(): PointLightComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PointLightComponent
        fun C(Other: UObject): PointLightComponent
        fun C(Other: Any): PointLightComponent
    }
}

external object EControllerType {
    var Laser: String /* "Laser" */
    var AssistingLaser: String /* "AssistingLaser" */
    var UI: String /* "UI" */
    var Navigation: String /* "Navigation" */
    var Unknown: String /* "Unknown" */
    var EControllerType_MAX: String /* "EControllerType_MAX" */
}

external open class VREditorTeleporter(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var VRMode: VREditorMode
    open var TeleportDirectionMeshComponent: StaticMeshComponent
    open var HMDMeshComponent: StaticMeshComponent
    open var LeftMotionControllerMeshComponent: StaticMeshComponent
    open var RightMotionControllerMeshComponent: StaticMeshComponent
    open var TeleportMID: MaterialInstanceDynamic
    open var InteractorTryingTeleport: ViewportInteractor
    open fun TeleportDone()
    open fun StopAiming()
    open fun StartTeleport()
    open fun StartAiming(Interactor: ViewportInteractor)
    open fun Shutdown()
    open fun SetVisibility(bVisible: Boolean)
    open fun SetColor(Color: LinearColor)
    open fun IsTeleporting(): Boolean
    open fun IsAiming(): Boolean
    open fun Init(InMode: VREditorMode)
    open fun GetVRMode(): VREditorMode
    open fun GetSlideDelta(Interactor: VREditorInteractor, Axis: Boolean): Number
    open fun GetInteractorTryingTeleport(): ViewportInteractor
    open fun DoTeleport()

    companion object {
        fun GetDefaultObject(): VREditorTeleporter
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorTeleporter
        fun C(Other: UObject): VREditorTeleporter
        fun C(Other: Any): VREditorTeleporter
    }
}

external open class VREditorInteractor : ViewportInteractor {
    constructor()
    constructor(Outer: UObject)
    open var MotionControllerComponent: MotionControllerComponent
    open var HandMeshComponent: StaticMeshComponent
    open var LaserSplineComponent: SplineComponent
    open var LaserSplineMeshComponents: Array<SplineMeshComponent>
    open var LaserPointerMID: MaterialInstanceDynamic
    open var TranslucentLaserPointerMID: MaterialInstanceDynamic
    open var HoverMeshComponent: StaticMeshComponent
    open var HoverPointLightComponent: PointLightComponent
    open var HandMeshMID: MaterialInstanceDynamic
    open var ControllerType: String /* "Laser" | "AssistingLaser" | "UI" | "Navigation" | "Unknown" | "EControllerType_MAX" */
    open var OverrideControllerType: String /* "Laser" | "AssistingLaser" | "UI" | "Navigation" | "Unknown" | "EControllerType_MAX" */
    open var ControllerMotionSource: String
    open var VRMode: VREditorMode
    open fun TryOverrideControllerType(InControllerType: String /* "Laser" | "AssistingLaser" | "UI" | "Navigation" | "Unknown" | "EControllerType_MAX" */): Boolean
    open fun SetupComponent(OwningActor: Actor)
    open fun SetForceShowLaser(bInForceShow: Boolean)
    open fun SetForceLaserColor(InColor: LinearColor)
    open fun SetControllerType(InControllerType: String /* "Laser" | "AssistingLaser" | "UI" | "Navigation" | "Unknown" | "EControllerType_MAX" */)
    open fun SetControllerHandSide(InControllerHandSide: String)
    open fun IsTouchingTrackpad(): Boolean
    open fun IsHoveringOverUI(): Boolean
    open fun IsClickingOnUI(): Boolean
    open fun Init(InVRMode: VREditorMode)
    open fun GetTrackpadPosition(): Vector2D
    open fun GetTeleportActor(): VREditorTeleporter
    open fun GetSlideDelta(): Number
    open fun GetSelectAndMoveTriggerValue(): Number
    open fun GetMotionControllerComponent(): MotionControllerComponent
    open fun GetLastTrackpadPosition(): Vector2D
    open fun GetLaserStart(): Vector
    open fun GetLaserEnd(): Vector
    open fun GetHMDDeviceType(): String
    open fun GetControllerType(): String /* "Laser" | "AssistingLaser" | "UI" | "Navigation" | "Unknown" | "EControllerType_MAX" */
    open fun GetControllerSide(): String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */

    companion object {
        fun Load(ResourceName: String): VREditorInteractor
        fun Find(Outer: UObject, ResourceName: String): VREditorInteractor
        fun GetDefaultObject(): VREditorInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorInteractor
        fun C(Other: UObject): VREditorInteractor
        fun C(Other: Any): VREditorInteractor
    }
}

external open class VRButton {
    open var ButtonWidget: VREditorWidgetComponent
    open fun clone(): VRButton

    companion object {
        fun C(Other: UObject): VRButton
        fun C(Other: Any): VRButton
    }
}

external open class VRRadialMenuHandler : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): VRRadialMenuHandler
        fun Find(Outer: UObject, ResourceName: String): VRRadialMenuHandler
        fun GetDefaultObject(): VRRadialMenuHandler
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VRRadialMenuHandler
        fun C(Other: UObject): VRRadialMenuHandler
        fun C(Other: Any): VRRadialMenuHandler
    }
}

external open class VREditorUISystem : UObject {
    constructor()
    constructor(Outer: UObject)
    open var VRMode: VREditorMode
    open var FloatingUIs: Any
    open var PreviewWindowInfo: Any
    open var InfoDisplayPanel: VREditorFloatingUI
    open var QuickRadialMenu: VREditorRadialFloatingUI
    open var DraggingUI: VREditorDockableWindow
    open var ColorPickerUI: VREditorDockableWindow
    open var LaserInteractor: VREditorInteractor
    open var UIInteractor: VREditorInteractor
    open var VRButtons: Array<VRButton>
    open var RadialMenuHandler: VRRadialMenuHandler

    companion object {
        fun Load(ResourceName: String): VREditorUISystem
        fun Find(Outer: UObject, ResourceName: String): VREditorUISystem
        fun GetDefaultObject(): VREditorUISystem
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorUISystem
        fun C(Other: UObject): VREditorUISystem
        fun C(Other: Any): VREditorUISystem
    }
}

external open class VREditorPlacement : UObject {
    constructor()
    constructor(Outer: UObject)
    open var VRMode: VREditorMode
    open var ViewportWorldInteraction: ViewportWorldInteraction
    open var FloatingUIAssetDraggedFrom: WidgetComponent
    open var PlacingMaterialOrTextureAsset: UObject

    companion object {
        fun Load(ResourceName: String): VREditorPlacement
        fun Find(Outer: UObject, ResourceName: String): VREditorPlacement
        fun GetDefaultObject(): VREditorPlacement
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorPlacement
        fun C(Other: UObject): VREditorPlacement
        fun C(Other: Any): VREditorPlacement
    }
}

external open class VREditorMode : EditorWorldExtension {
    constructor()
    constructor(Outer: UObject)
    open var AvatarActor: VREditorAvatarActor
    open var UISystem: VREditorUISystem
    open var TeleportActor: VREditorTeleporter
    open var AutoScalerSystem: VREditorAutoScaler
    open var WorldInteraction: ViewportWorldInteraction
    open var PlacementSystem: VREditorPlacement
    open var Interactors: Array<VREditorInteractor>
    open var AssetContainer: VREditorAssetContainer
    open fun GetWorldScaleFactor(): Number

    companion object {
        fun Load(ResourceName: String): VREditorMode
        fun Find(Outer: UObject, ResourceName: String): VREditorMode
        fun GetDefaultObject(): VREditorMode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorMode
        fun C(Other: UObject): VREditorMode
        fun C(Other: Any): VREditorMode
    }
}

external open class VREditorAutoScaler : UObject {
    constructor()
    constructor(Outer: UObject)
    open var VRMode: VREditorMode

    companion object {
        fun Load(ResourceName: String): VREditorAutoScaler
        fun Find(Outer: UObject, ResourceName: String): VREditorAutoScaler
        fun GetDefaultObject(): VREditorAutoScaler
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorAutoScaler
        fun C(Other: UObject): VREditorAutoScaler
        fun C(Other: Any): VREditorAutoScaler
    }
}

external open class VREditorBaseUserWidget : UserWidget {
    constructor()
    constructor(Outer: UObject)
    open var Owner: Any

    companion object {
        fun Load(ResourceName: String): VREditorBaseUserWidget
        fun Find(Outer: UObject, ResourceName: String): VREditorBaseUserWidget
        fun GetDefaultObject(): VREditorBaseUserWidget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorBaseUserWidget
        fun C(Other: UObject): VREditorBaseUserWidget
        fun C(Other: Any): VREditorBaseUserWidget
    }
}

external open class DockableWindowDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): DockableWindowDragOperation
        fun Find(Outer: UObject, ResourceName: String): DockableWindowDragOperation
        fun GetDefaultObject(): DockableWindowDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): DockableWindowDragOperation
        fun C(Other: UObject): DockableWindowDragOperation
        fun C(Other: Any): DockableWindowDragOperation
    }
}

external open class VREditorFloatingCameraUI(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : VREditorFloatingUI {
    open var LinkedActor: Any

    companion object {
        fun GetDefaultObject(): VREditorFloatingCameraUI
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VREditorFloatingCameraUI
        fun C(Other: UObject): VREditorFloatingCameraUI
        fun C(Other: Any): VREditorFloatingCameraUI
    }
}

external open class FloatingText(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    open var SceneComponent: SceneComponent
    open var FirstLineComponent: StaticMeshComponent
    open var JointSphereComponent: StaticMeshComponent
    open var SecondLineComponent: StaticMeshComponent
    open var TextComponent: TextRenderComponent
    open var MaskedTextMaterial: MaterialInterface
    open var TranslucentTextMaterial: MaterialInterface
    open var LineMaterial: MaterialInterface
    open var LineMaterialMID: MaterialInstanceDynamic

    companion object {
        fun GetDefaultObject(): FloatingText
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): FloatingText
        fun C(Other: UObject): FloatingText
        fun C(Other: Any): FloatingText
    }
}

external open class VISettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var bScaleWorldFromFloor: Boolean
    open var bScaleWorldWithDynamicPivot: Boolean
    open var bAllowSimultaneousWorldScalingAndRotation: Boolean

    companion object {
        fun Load(ResourceName: String): VISettings
        fun Find(Outer: UObject, ResourceName: String): VISettings
        fun GetDefaultObject(): VISettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VISettings
        fun C(Other: UObject): VISettings
        fun C(Other: Any): VISettings
    }
}

external object EInteractorHand {
    var Right: String /* "Right" */
    var Left: String /* "Left" */
    var EInteractorHand_MAX: String /* "EInteractorHand_MAX" */
}

external open class VRModeSettings : VISettings {
    constructor()
    constructor(Outer: UObject)
    open var bEnableAutoVREditMode: Boolean
    open var bAutokeySequences: Boolean
    open var InteractorHand: String /* "Right" | "Left" | "EInteractorHand_MAX" */
    open var bShowWorldMovementGrid: Boolean
    open var bShowWorldMovementPostProcess: Boolean
    open var bShowWorldScaleProgressBar: Boolean
    open var UIBrightness: Number
    open var GizmoScale: Number
    open var DoubleClickTime: Number
    open var TriggerPressedThreshold_Vive: Number
    open var TriggerPressedThreshold_Rift: Number
    open var InteractorClass: Class
    open var TeleporterClass: UnrealEngineClass

    companion object {
        fun Load(ResourceName: String): VRModeSettings
        fun Find(Outer: UObject, ResourceName: String): VRModeSettings
        fun GetDefaultObject(): VRModeSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VRModeSettings
        fun C(Other: UObject): VRModeSettings
        fun C(Other: Any): VRModeSettings
    }
}

external open class VRScoutingInteractor : VREditorInteractor {
    constructor()
    constructor(Outer: UObject)
    open var FlyingIndicatorComponent: StaticMeshComponent

    companion object {
        fun Load(ResourceName: String): VRScoutingInteractor
        fun Find(Outer: UObject, ResourceName: String): VRScoutingInteractor
        fun GetDefaultObject(): VRScoutingInteractor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VRScoutingInteractor
        fun GetSelectedActors(): Array<Actor>
        fun C(Other: UObject): VRScoutingInteractor
        fun C(Other: Any): VRScoutingInteractor
    }
}

external open class ActorTransformer : ViewportTransformer {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ActorTransformer
        fun Find(Outer: UObject, ResourceName: String): ActorTransformer
        fun GetDefaultObject(): ActorTransformer
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ActorTransformer
        fun C(Other: UObject): ActorTransformer
        fun C(Other: Any): ActorTransformer
    }
}

external open class ViewportInteractableInterface : Interface {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ViewportInteractableInterface
        fun Find(Outer: UObject, ResourceName: String): ViewportInteractableInterface
        fun GetDefaultObject(): ViewportInteractableInterface
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ViewportInteractableInterface
        fun C(Other: UObject): ViewportInteractableInterface
        fun C(Other: Any): ViewportInteractableInterface
    }
}

external open class TranslationDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): TranslationDragOperation
        fun Find(Outer: UObject, ResourceName: String): TranslationDragOperation
        fun GetDefaultObject(): TranslationDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TranslationDragOperation
        fun C(Other: UObject): TranslationDragOperation
        fun C(Other: Any): TranslationDragOperation
    }
}

external open class PlaneTranslationDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PlaneTranslationDragOperation
        fun Find(Outer: UObject, ResourceName: String): PlaneTranslationDragOperation
        fun GetDefaultObject(): PlaneTranslationDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PlaneTranslationDragOperation
        fun C(Other: UObject): PlaneTranslationDragOperation
        fun C(Other: Any): PlaneTranslationDragOperation
    }
}

external open class RotateOnAngleDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): RotateOnAngleDragOperation
        fun Find(Outer: UObject, ResourceName: String): RotateOnAngleDragOperation
        fun GetDefaultObject(): RotateOnAngleDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): RotateOnAngleDragOperation
        fun C(Other: UObject): RotateOnAngleDragOperation
        fun C(Other: Any): RotateOnAngleDragOperation
    }
}

external open class ScaleDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ScaleDragOperation
        fun Find(Outer: UObject, ResourceName: String): ScaleDragOperation
        fun GetDefaultObject(): ScaleDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ScaleDragOperation
        fun C(Other: UObject): ScaleDragOperation
        fun C(Other: Any): ScaleDragOperation
    }
}

external open class UniformScaleDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): UniformScaleDragOperation
        fun Find(Outer: UObject, ResourceName: String): UniformScaleDragOperation
        fun GetDefaultObject(): UniformScaleDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UniformScaleDragOperation
        fun C(Other: UObject): UniformScaleDragOperation
        fun C(Other: Any): UniformScaleDragOperation
    }
}

external open class AxisGizmoHandleGroup : GizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): AxisGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): AxisGizmoHandleGroup
        fun GetDefaultObject(): AxisGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AxisGizmoHandleGroup
        fun C(Other: UObject): AxisGizmoHandleGroup
        fun C(Other: Any): AxisGizmoHandleGroup
    }
}

external open class GizmoHandleMeshComponent : StaticMeshComponent {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): GizmoHandleMeshComponent
        fun Find(Outer: UObject, ResourceName: String): GizmoHandleMeshComponent
        fun GetDefaultObject(): GizmoHandleMeshComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GizmoHandleMeshComponent
        fun C(Other: UObject): GizmoHandleMeshComponent
        fun C(Other: Any): GizmoHandleMeshComponent
    }
}

external open class UniformScaleGizmoHandleGroup : GizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): UniformScaleGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): UniformScaleGizmoHandleGroup
        fun GetDefaultObject(): UniformScaleGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): UniformScaleGizmoHandleGroup
        fun C(Other: UObject): UniformScaleGizmoHandleGroup
        fun C(Other: Any): UniformScaleGizmoHandleGroup
    }
}

external open class PivotTranslationGizmoHandleGroup : AxisGizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PivotTranslationGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): PivotTranslationGizmoHandleGroup
        fun GetDefaultObject(): PivotTranslationGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PivotTranslationGizmoHandleGroup
        fun C(Other: UObject): PivotTranslationGizmoHandleGroup
        fun C(Other: Any): PivotTranslationGizmoHandleGroup
    }
}

external open class PivotScaleGizmoHandleGroup : AxisGizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PivotScaleGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): PivotScaleGizmoHandleGroup
        fun GetDefaultObject(): PivotScaleGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PivotScaleGizmoHandleGroup
        fun C(Other: UObject): PivotScaleGizmoHandleGroup
        fun C(Other: Any): PivotScaleGizmoHandleGroup
    }
}

external open class PivotPlaneTranslationGizmoHandleGroup : AxisGizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): PivotPlaneTranslationGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): PivotPlaneTranslationGizmoHandleGroup
        fun GetDefaultObject(): PivotPlaneTranslationGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PivotPlaneTranslationGizmoHandleGroup
        fun C(Other: UObject): PivotPlaneTranslationGizmoHandleGroup
        fun C(Other: Any): PivotPlaneTranslationGizmoHandleGroup
    }
}

external open class PivotRotationGizmoHandleGroup : AxisGizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)
    open var RootFullRotationHandleComponent: SceneComponent
    open var FullRotationHandleMeshComponent: GizmoHandleMeshComponent
    open var StartRotationIndicatorMeshComponent: GizmoHandleMeshComponent
    open var RootStartRotationIdicatorComponent: SceneComponent
    open var DeltaRotationIndicatorMeshComponent: GizmoHandleMeshComponent
    open var RootDeltaRotationIndicatorComponent: SceneComponent

    companion object {
        fun Load(ResourceName: String): PivotRotationGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): PivotRotationGizmoHandleGroup
        fun GetDefaultObject(): PivotRotationGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PivotRotationGizmoHandleGroup
        fun C(Other: UObject): PivotRotationGizmoHandleGroup
        fun C(Other: Any): PivotRotationGizmoHandleGroup
    }
}

external open class StretchGizmoHandleGroup : GizmoHandleGroup {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): StretchGizmoHandleGroup
        fun Find(Outer: UObject, ResourceName: String): StretchGizmoHandleGroup
        fun GetDefaultObject(): StretchGizmoHandleGroup
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StretchGizmoHandleGroup
        fun C(Other: UObject): StretchGizmoHandleGroup
        fun C(Other: Any): StretchGizmoHandleGroup
    }
}

external open class PivotTransformGizmo(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : BaseTransformGizmo {
    open var UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup
    open var TranslationGizmoHandleGroup: PivotTranslationGizmoHandleGroup
    open var ScaleGizmoHandleGroup: PivotScaleGizmoHandleGroup
    open var PlaneTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup
    open var RotationGizmoHandleGroup: PivotRotationGizmoHandleGroup
    open var StretchGizmoHandleGroup: StretchGizmoHandleGroup
    open var LastDraggingHandle: ActorComponent

    companion object {
        fun GetDefaultObject(): PivotTransformGizmo
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PivotTransformGizmo
        fun C(Other: UObject): PivotTransformGizmo
        fun C(Other: Any): PivotTransformGizmo
    }
}

external open class StretchGizmoHandleDragOperation : ViewportDragOperation {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): StretchGizmoHandleDragOperation
        fun Find(Outer: UObject, ResourceName: String): StretchGizmoHandleDragOperation
        fun GetDefaultObject(): StretchGizmoHandleDragOperation
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StretchGizmoHandleDragOperation
        fun C(Other: UObject): StretchGizmoHandleDragOperation
        fun C(Other: Any): StretchGizmoHandleDragOperation
    }
}

external object ELocalizationTargetConflictStatus {
    var Unknown: String /* "Unknown" */
    var ConflictsPresent: String /* "ConflictsPresent" */
    var Clear: String /* "Clear" */
    var ELocalizationTargetConflictStatus_MAX: String /* "ELocalizationTargetConflictStatus_MAX" */
}

external open class FilePath {
    open var FilePath: String
    open fun clone(): FilePath

    companion object {
        fun C(Other: UObject): FilePath
        fun C(Other: Any): FilePath
    }
}

external object ELocalizationGatherPathRoot {
    var Auto: String /* "Auto" */
    var Engine: String /* "Engine" */
    var Project: String /* "Project" */
    var ELocalizationGatherPathRoot_MAX: String /* "ELocalizationGatherPathRoot_MAX" */
}

external open class GatherTextSearchDirectory {
    open var PathRoot: String /* "Auto" | "Engine" | "Project" | "ELocalizationGatherPathRoot_MAX" */
    open var Path: String
    open fun clone(): GatherTextSearchDirectory

    companion object {
        fun C(Other: UObject): GatherTextSearchDirectory
        fun C(Other: Any): GatherTextSearchDirectory
    }
}

external open class GatherTextExcludePath {
    open var PathRoot: String /* "Auto" | "Engine" | "Project" | "ELocalizationGatherPathRoot_MAX" */
    open var Pattern: String
    open fun clone(): GatherTextExcludePath

    companion object {
        fun C(Other: UObject): GatherTextExcludePath
        fun C(Other: Any): GatherTextExcludePath
    }
}

external open class GatherTextFileExtension {
    open var Pattern: String
    open fun clone(): GatherTextFileExtension

    companion object {
        fun C(Other: UObject): GatherTextFileExtension
        fun C(Other: Any): GatherTextFileExtension
    }
}

external open class GatherTextFromTextFilesConfiguration {
    open var IsEnabled: Boolean
    open var SearchDirectories: Array<GatherTextSearchDirectory>
    open var ExcludePathWildcards: Array<GatherTextExcludePath>
    open var FileExtensions: Array<GatherTextFileExtension>
    open var ShouldGatherFromEditorOnlyData: Boolean
    open fun clone(): GatherTextFromTextFilesConfiguration

    companion object {
        fun C(Other: UObject): GatherTextFromTextFilesConfiguration
        fun C(Other: Any): GatherTextFromTextFilesConfiguration
    }
}

external open class GatherTextIncludePath {
    open var PathRoot: String /* "Auto" | "Engine" | "Project" | "ELocalizationGatherPathRoot_MAX" */
    open var Pattern: String
    open fun clone(): GatherTextIncludePath

    companion object {
        fun C(Other: UObject): GatherTextIncludePath
        fun C(Other: Any): GatherTextIncludePath
    }
}

external open class GatherTextFromPackagesConfiguration {
    open var IsEnabled: Boolean
    open var IncludePathWildcards: Array<GatherTextIncludePath>
    open var ExcludePathWildcards: Array<GatherTextExcludePath>
    open var FileExtensions: Array<GatherTextFileExtension>
    open var Collections: Array<String>
    open var ShouldGatherFromEditorOnlyData: Boolean
    open var SkipGatherCache: Boolean
    open fun clone(): GatherTextFromPackagesConfiguration

    companion object {
        fun C(Other: UObject): GatherTextFromPackagesConfiguration
        fun C(Other: Any): GatherTextFromPackagesConfiguration
    }
}

external open class MetaDataKeyName {
    open var Name: String
    open fun clone(): MetaDataKeyName

    companion object {
        fun C(Other: UObject): MetaDataKeyName
        fun C(Other: Any): MetaDataKeyName
    }
}

external open class MetaDataTextKeyPattern {
    open var Pattern: String
    open fun clone(): MetaDataTextKeyPattern

    companion object {
        fun C(Other: UObject): MetaDataTextKeyPattern
        fun C(Other: Any): MetaDataTextKeyPattern
    }
}

external open class MetaDataKeyGatherSpecification {
    open var MetaDataKey: MetaDataKeyName
    open var TextNamespace: String
    open var TextKeyPattern: MetaDataTextKeyPattern
    open fun clone(): MetaDataKeyGatherSpecification

    companion object {
        fun C(Other: UObject): MetaDataKeyGatherSpecification
        fun C(Other: Any): MetaDataKeyGatherSpecification
    }
}

external open class GatherTextFromMetaDataConfiguration {
    open var IsEnabled: Boolean
    open var IncludePathWildcards: Array<GatherTextIncludePath>
    open var ExcludePathWildcards: Array<GatherTextExcludePath>
    open var KeySpecifications: Array<MetaDataKeyGatherSpecification>
    open var ShouldGatherFromEditorOnlyData: Boolean
    open fun clone(): GatherTextFromMetaDataConfiguration

    companion object {
        fun C(Other: UObject): GatherTextFromMetaDataConfiguration
        fun C(Other: Any): GatherTextFromMetaDataConfiguration
    }
}

external object ELocalizedTextCollapseMode {
    var IdenticalTextIdAndSource: String /* "IdenticalTextIdAndSource" */
    var IdenticalPackageIdTextIdAndSource: String /* "IdenticalPackageIdTextIdAndSource" */
    var IdenticalNamespaceAndSource: String /* "IdenticalNamespaceAndSource" */
    var ELocalizedTextCollapseMode_MAX: String /* "ELocalizedTextCollapseMode_MAX" */
}

external open class LocalizationExportingSettings {
    open var CollapseMode: String /* "IdenticalTextIdAndSource" | "IdenticalPackageIdTextIdAndSource" | "IdenticalNamespaceAndSource" | "ELocalizedTextCollapseMode_MAX" */
    open var ShouldPersistCommentsOnExport: Boolean
    open var ShouldAddSourceLocationsAsComments: Boolean
    open fun clone(): LocalizationExportingSettings

    companion object {
        fun C(Other: UObject): LocalizationExportingSettings
        fun C(Other: Any): LocalizationExportingSettings
    }
}

external open class LocalizationCompilationSettings {
    open var SkipSourceCheck: Boolean
    open var ValidateFormatPatterns: Boolean
    open var ValidateSafeWhitespace: Boolean
    open fun clone(): LocalizationCompilationSettings

    companion object {
        fun C(Other: UObject): LocalizationCompilationSettings
        fun C(Other: Any): LocalizationCompilationSettings
    }
}

external open class LocalizationImportDialogueSettings {
    open var RawAudioPath: DirectoryPath
    open var ImportedDialogueFolder: String
    open var bImportNativeAsSource: Boolean
    open fun clone(): LocalizationImportDialogueSettings

    companion object {
        fun C(Other: UObject): LocalizationImportDialogueSettings
        fun C(Other: Any): LocalizationImportDialogueSettings
    }
}

external open class CultureStatistics {
    open var CultureName: String
    open var WordCount: Any
    open fun clone(): CultureStatistics

    companion object {
        fun C(Other: UObject): CultureStatistics
        fun C(Other: Any): CultureStatistics
    }
}

external open class LocalizationTargetSettings {
    open var Name: String
    open var Guid: Guid
    open var ConflictStatus: String /* "Unknown" | "ConflictsPresent" | "Clear" | "ELocalizationTargetConflictStatus_MAX" */
    open var TargetDependencies: Array<Guid>
    open var AdditionalManifestDependencies: Array<FilePath>
    open var RequiredModuleNames: Array<String>
    open var GatherFromTextFiles: GatherTextFromTextFilesConfiguration
    open var GatherFromPackages: GatherTextFromPackagesConfiguration
    open var GatherFromMetaData: GatherTextFromMetaDataConfiguration
    open var ExportSettings: LocalizationExportingSettings
    open var CompileSettings: LocalizationCompilationSettings
    open var ImportDialogueSettings: LocalizationImportDialogueSettings
    open var NativeCultureIndex: Number
    open var SupportedCulturesStatistics: Array<CultureStatistics>
    open fun clone(): LocalizationTargetSettings

    companion object {
        fun C(Other: UObject): LocalizationTargetSettings
        fun C(Other: Any): LocalizationTargetSettings
    }
}

external open class LocalizationTarget : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Settings: LocalizationTargetSettings

    companion object {
        fun Load(ResourceName: String): LocalizationTarget
        fun Find(Outer: UObject, ResourceName: String): LocalizationTarget
        fun GetDefaultObject(): LocalizationTarget
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalizationTarget
        fun C(Other: UObject): LocalizationTarget
        fun C(Other: Any): LocalizationTarget
    }
}

external open class LocalizationTargetSet : UObject {
    constructor()
    constructor(Outer: UObject)
    open var TargetObjects: Array<LocalizationTarget>

    companion object {
        fun Load(ResourceName: String): LocalizationTargetSet
        fun Find(Outer: UObject, ResourceName: String): LocalizationTargetSet
        fun GetDefaultObject(): LocalizationTargetSet
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalizationTargetSet
        fun C(Other: UObject): LocalizationTargetSet
        fun C(Other: Any): LocalizationTargetSet
    }
}

external open class LocalizationSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var EngineTargetSet: LocalizationTargetSet
    open var EngineTargetsSettings: Array<LocalizationTargetSettings>
    open var GameTargetSet: LocalizationTargetSet
    open var GameTargetsSettings: Array<LocalizationTargetSettings>

    companion object {
        fun Load(ResourceName: String): LocalizationSettings
        fun Find(Outer: UObject, ResourceName: String): LocalizationSettings
        fun GetDefaultObject(): LocalizationSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalizationSettings
        fun C(Other: UObject): LocalizationSettings
        fun C(Other: Any): LocalizationSettings
    }
}

external open class MeshReconstructorBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun StopReconstruction()
    open fun StartReconstruction()
    open fun PauseReconstruction()
    open fun IsReconstructionStarted(): Boolean
    open fun IsReconstructionPaused(): Boolean
    open fun DisconnectMRMesh()
    open fun ConnectMRMesh(Mesh: MRMeshComponent)

    companion object {
        fun Load(ResourceName: String): MeshReconstructorBase
        fun Find(Outer: UObject, ResourceName: String): MeshReconstructorBase
        fun GetDefaultObject(): MeshReconstructorBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MeshReconstructorBase
        fun C(Other: UObject): MeshReconstructorBase
        fun C(Other: Any): MeshReconstructorBase
    }
}

external object EMeshTrackerVertexColorMode {
    var None: String /* "None" */
    var Confidence: String /* "Confidence" */
    var Block: String /* "Block" */
    var EMeshTrackerVertexColorMode_MAX: String /* "EMeshTrackerVertexColorMode_MAX" */
}

external open class MockDataMeshTrackerComponent : SceneComponent {
    constructor()
    constructor(Outer: UObject)
    open var OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(index: Number, Vertices: Array<Vector>, Triangles: Array<Number>, Normals: Array<Vector>, Confidence: Array<Number>) -> Unit>
    open var ScanWorld: Boolean
    open var RequestNormals: Boolean
    open var RequestVertexConfidence: Boolean
    open var VertexColorMode: String /* "None" | "Confidence" | "Block" | "EMeshTrackerVertexColorMode_MAX" */
    open var BlockVertexColors: Array<Color>
    open var VertexColorFromConfidenceZero: LinearColor
    open var VertexColorFromConfidenceOne: LinearColor
    open var UpdateInterval: Number
    open var MRMesh: MRMeshComponent
    open fun DisconnectMRMesh(InMRMeshPtr: MRMeshComponent)
    open fun ConnectMRMesh(InMRMeshPtr: MRMeshComponent)

    companion object {
        fun Load(ResourceName: String): MockDataMeshTrackerComponent
        fun Find(Outer: UObject, ResourceName: String): MockDataMeshTrackerComponent
        fun GetDefaultObject(): MockDataMeshTrackerComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MockDataMeshTrackerComponent
        fun C(Other: UObject): MockDataMeshTrackerComponent
        fun C(Other: Any): MockDataMeshTrackerComponent
    }
}

external object EARWorldMappingState {
    var NotAvailable: String /* "NotAvailable" */
    var StillMappingNotRelocalizable: String /* "StillMappingNotRelocalizable" */
    var StillMappingRelocalizable: String /* "StillMappingRelocalizable" */
    var Mapped: String /* "Mapped" */
    var EARWorldMappingState_MAX: String /* "EARWorldMappingState_MAX" */
}

external object EARTrackingQualityReason {
    var None: String /* "None" */
    var Initializing: String /* "Initializing" */
    var Relocalizing: String /* "Relocalizing" */
    var ExcessiveMotion: String /* "ExcessiveMotion" */
    var InsufficientFeatures: String /* "InsufficientFeatures" */
    var EARTrackingQualityReason_MAX: String /* "EARTrackingQualityReason_MAX" */
}

external object EARTrackingQuality {
    var NotTracking: String /* "NotTracking" */
    var OrientationOnly: String /* "OrientationOnly" */
    var OrientationAndPosition: String /* "OrientationAndPosition" */
    var EARTrackingQuality_MAX: String /* "EARTrackingQuality_MAX" */
}

external object EARTextureType {
    var CameraImage: String /* "CameraImage" */
    var CameraDepth: String /* "CameraDepth" */
    var EnvironmentCapture: String /* "EnvironmentCapture" */
    var EARTextureType_MAX: String /* "EARTextureType_MAX" */
}

external open class ARTexture : Texture {
    constructor()
    constructor(Outer: UObject)
    open var TextureType: String /* "CameraImage" | "CameraDepth" | "EnvironmentCapture" | "EARTextureType_MAX" */
    open var Timestamp: Number
    open var ExternalTextureGuid: Guid
    open var Size: Vector2D

    companion object {
        fun Load(ResourceName: String): ARTexture
        fun Find(Outer: UObject, ResourceName: String): ARTexture
        fun GetDefaultObject(): ARTexture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTexture
        fun C(Other: UObject): ARTexture
        fun C(Other: Any): ARTexture
    }
}

external open class ARTextureCameraImage : ARTexture {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARTextureCameraImage
        fun Find(Outer: UObject, ResourceName: String): ARTextureCameraImage
        fun GetDefaultObject(): ARTextureCameraImage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTextureCameraImage
        fun C(Other: UObject): ARTextureCameraImage
        fun C(Other: Any): ARTextureCameraImage
    }
}

external open class ARLightEstimate : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARLightEstimate
        fun Find(Outer: UObject, ResourceName: String): ARLightEstimate
        fun GetDefaultObject(): ARLightEstimate
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARLightEstimate
        fun C(Other: UObject): ARLightEstimate
        fun C(Other: Any): ARLightEstimate
    }
}

external object EARDepthQuality {
    var Unkown: String /* "Unkown" */
    var Low: String /* "Low" */
    var High: String /* "High" */
    var EARDepthQuality_MAX: String /* "EARDepthQuality_MAX" */
}

external object EARDepthAccuracy {
    var Unkown: String /* "Unkown" */
    var Approximate: String /* "Approximate" */
    var Accurate: String /* "Accurate" */
    var EARDepthAccuracy_MAX: String /* "EARDepthAccuracy_MAX" */
}

external open class ARTextureCameraDepth : ARTexture {
    constructor()
    constructor(Outer: UObject)
    open var DepthQuality: String /* "Unkown" | "Low" | "High" | "EARDepthQuality_MAX" */
    open var DepthAccuracy: String /* "Unkown" | "Approximate" | "Accurate" | "EARDepthAccuracy_MAX" */
    open var bIsTemporallySmoothed: Boolean

    companion object {
        fun Load(ResourceName: String): ARTextureCameraDepth
        fun Find(Outer: UObject, ResourceName: String): ARTextureCameraDepth
        fun GetDefaultObject(): ARTextureCameraDepth
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTextureCameraDepth
        fun C(Other: UObject): ARTextureCameraDepth
        fun C(Other: Any): ARTextureCameraDepth
    }
}

external object EARSessionStatus {
    var NotStarted: String /* "NotStarted" */
    var Running: String /* "Running" */
    var NotSupported: String /* "NotSupported" */
    var FatalError: String /* "FatalError" */
    var PermissionNotGranted: String /* "PermissionNotGranted" */
    var UnsupportedConfiguration: String /* "UnsupportedConfiguration" */
    var Other: String /* "Other" */
    var EARSessionStatus_MAX: String /* "EARSessionStatus_MAX" */
}

external open class ARSessionStatus {
    open var AdditionalInfo: String
    open var Status: String /* "NotStarted" | "Running" | "NotSupported" | "FatalError" | "PermissionNotGranted" | "UnsupportedConfiguration" | "Other" | "EARSessionStatus_MAX" */
    open fun clone(): ARSessionStatus

    companion object {
        fun C(Other: UObject): ARSessionStatus
        fun C(Other: Any): ARSessionStatus
        fun GetARSessionStatus(): ARSessionStatus
    }
}

external open class ARSkeletonDefinition {
    open var NumJoints: Number
    open var JointNames: Array<String>
    open var ParentIndices: Array<Number>
    open fun clone(): ARSkeletonDefinition

    companion object {
        fun C(Other: UObject): ARSkeletonDefinition
        fun C(Other: Any): ARSkeletonDefinition
    }
}

external object EARJointTransformSpace {
    var Model: String /* "Model" */
    var ParentJoint: String /* "ParentJoint" */
    var EARJointTransformSpace_MAX: String /* "EARJointTransformSpace_MAX" */
}

external open class ARPose3D {
    open var SkeletonDefinition: ARSkeletonDefinition
    open var JointTransforms: Array<Transform>
    open var IsJointTracked: Array<Boolean>
    open var JointTransformSpace: String /* "Model" | "ParentJoint" | "EARJointTransformSpace_MAX" */
    open fun clone(): ARPose3D

    companion object {
        fun C(Other: UObject): ARPose3D
        fun C(Other: Any): ARPose3D
    }
}

external open class ARTrackedPose : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)
    open fun GetTrackedPoseData(): ARPose3D

    companion object {
        fun Load(ResourceName: String): ARTrackedPose
        fun Find(Outer: UObject, ResourceName: String): ARTrackedPose
        fun GetDefaultObject(): ARTrackedPose
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTrackedPose
        fun C(Other: UObject): ARTrackedPose
        fun C(Other: Any): ARTrackedPose
    }
}

external open class ARTrackedPoint : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARTrackedPoint
        fun Find(Outer: UObject, ResourceName: String): ARTrackedPoint
        fun GetDefaultObject(): ARTrackedPoint
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTrackedPoint
        fun C(Other: UObject): ARTrackedPoint
        fun C(Other: Any): ARTrackedPoint
    }
}

external object EARPlaneOrientation {
    var Horizontal: String /* "Horizontal" */
    var Vertical: String /* "Vertical" */
    var Diagonal: String /* "Diagonal" */
    var EARPlaneOrientation_MAX: String /* "EARPlaneOrientation_MAX" */
}

external open class ARPlaneGeometry : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)
    open var Orientation: String /* "Horizontal" | "Vertical" | "Diagonal" | "EARPlaneOrientation_MAX" */
    open var Center: Vector
    open var Extent: Vector
    open var SubsumedBy: ARPlaneGeometry
    open fun GetSubsumedBy(): ARPlaneGeometry
    open fun GetOrientation(): String /* "Horizontal" | "Vertical" | "Diagonal" | "EARPlaneOrientation_MAX" */
    open fun GetExtent(): Vector
    open fun GetCenter(): Vector
    open fun GetBoundaryPolygonInLocalSpace(): Array<Vector>

    companion object {
        fun Load(ResourceName: String): ARPlaneGeometry
        fun Find(Outer: UObject, ResourceName: String): ARPlaneGeometry
        fun GetDefaultObject(): ARPlaneGeometry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARPlaneGeometry
        fun C(Other: UObject): ARPlaneGeometry
        fun C(Other: Any): ARPlaneGeometry
    }
}

external open class ARTrackedImage : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)
    open var DetectedImage: ARCandidateImage
    open var EstimatedSize: Vector2D
    open fun GetEstimateSize(): Vector2D
    open fun GetDetectedImage(): ARCandidateImage

    companion object {
        fun Load(ResourceName: String): ARTrackedImage
        fun Find(Outer: UObject, ResourceName: String): ARTrackedImage
        fun GetDefaultObject(): ARTrackedImage
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTrackedImage
        fun C(Other: UObject): ARTrackedImage
        fun C(Other: Any): ARTrackedImage
    }
}

external open class AREnvironmentCaptureProbeTexture : TextureCube {
    constructor()
    constructor(Outer: UObject)
    open var TextureType: String /* "CameraImage" | "CameraDepth" | "EnvironmentCapture" | "EARTextureType_MAX" */
    open var Timestamp: Number
    open var ExternalTextureGuid: Guid
    open var Size: Vector2D

    companion object {
        fun Load(ResourceName: String): AREnvironmentCaptureProbeTexture
        fun Find(Outer: UObject, ResourceName: String): AREnvironmentCaptureProbeTexture
        fun GetDefaultObject(): AREnvironmentCaptureProbeTexture
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AREnvironmentCaptureProbeTexture
        fun C(Other: UObject): AREnvironmentCaptureProbeTexture
        fun C(Other: Any): AREnvironmentCaptureProbeTexture
    }
}

external open class AREnvironmentCaptureProbe : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)
    open var EnvironmentCaptureTexture: AREnvironmentCaptureProbeTexture
    open fun GetExtent(): Vector
    open fun GetEnvironmentCaptureTexture(): AREnvironmentCaptureProbeTexture

    companion object {
        fun Load(ResourceName: String): AREnvironmentCaptureProbe
        fun Find(Outer: UObject, ResourceName: String): AREnvironmentCaptureProbe
        fun GetDefaultObject(): AREnvironmentCaptureProbe
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AREnvironmentCaptureProbe
        fun C(Other: UObject): AREnvironmentCaptureProbe
        fun C(Other: Any): AREnvironmentCaptureProbe
    }
}

external open class ARPose2D {
    open var SkeletonDefinition: ARSkeletonDefinition
    open var JointLocations: Array<Vector2D>
    open var IsJointTracked: Array<Boolean>
    open fun clone(): ARPose2D

    companion object {
        fun C(Other: UObject): ARPose2D
        fun C(Other: Any): ARPose2D
    }
}

external open class ARBlueprintLibrary : BlueprintFunctionLibrary {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARBlueprintLibrary
        fun Find(Outer: UObject, ResourceName: String): ARBlueprintLibrary
        fun GetDefaultObject(): ARBlueprintLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARBlueprintLibrary
        fun UnpinComponent(ComponentToUnpin: SceneComponent)
        fun StopARSession()
        fun StartARSession(SessionConfig: ARSessionConfig)
        fun SetAlignmentTransform(InAlignmentTransform: Transform)
        fun RemovePin(PinToRemove: ARPin)
        fun PinComponentToTraceResult(ComponentToPin: SceneComponent, TraceResult: ARTraceResult, DebugName: String): ARPin
        fun PinComponent(ComponentToPin: SceneComponent, PinToWorldTransform: Transform, TrackedGeometry: ARTrackedGeometry, DebugName: String): ARPin
        fun PauseARSession()
        fun LineTraceTrackedObjects3D(Start: Vector, End: Vector, bTestFeaturePoints: Boolean, bTestGroundPlane: Boolean, bTestPlaneExtents: Boolean, bTestPlaneBoundaryPolygon: Boolean): Array<ARTraceResult>
        fun LineTraceTrackedObjects(ScreenCoord: Vector2D, bTestFeaturePoints: Boolean, bTestGroundPlane: Boolean, bTestPlaneExtents: Boolean, bTestPlaneBoundaryPolygon: Boolean): Array<ARTraceResult>
        fun IsSessionTypeSupported(SessionType: String /* "None" | "Orientation" | "World" | "Face" | "Image" | "ObjectScanning" | "PoseTracking" | "EARSessionType_MAX" */): Boolean
        fun IsSessionTrackingFeatureSupported(SessionType: String /* "None" | "Orientation" | "World" | "Face" | "Image" | "ObjectScanning" | "PoseTracking" | "EARSessionType_MAX" */, SessionTrackingFeature: String /* "None" | "PoseDetection2D" | "PersonSegmentation" | "PersonSegmentationWithDepth" | "EARSessionTrackingFeature_MAX" */): Boolean
        fun IsARSupported(): Boolean
        fun GetWorldMappingStatus(): String /* "NotAvailable" | "StillMappingNotRelocalizable" | "StillMappingRelocalizable" | "Mapped" | "EARWorldMappingState_MAX" */
        fun GetTrackingQualityReason(): String /* "None" | "Initializing" | "Relocalizing" | "ExcessiveMotion" | "InsufficientFeatures" | "EARTrackingQualityReason_MAX" */
        fun GetTrackingQuality(): String /* "NotTracking" | "OrientationOnly" | "OrientationAndPosition" | "EARTrackingQuality_MAX" */
        fun GetSupportedVideoFormats(SessionType: String /* "None" | "Orientation" | "World" | "Face" | "Image" | "ObjectScanning" | "PoseTracking" | "EARSessionType_MAX" */): Array<ARVideoFormat>
        fun GetSessionConfig(): ARSessionConfig
        fun GetPointCloud(): Array<Vector>
        fun GetPersonSegmentationImage(): ARTextureCameraImage
        fun GetPersonSegmentationDepthImage(): ARTextureCameraImage
        fun GetCurrentLightEstimate(): ARLightEstimate
        fun GetCameraImage(): ARTextureCameraImage
        fun GetCameraDepth(): ARTextureCameraDepth
        fun GetARSessionStatus(): ARSessionStatus
        fun GetAllTrackedPoses(): Array<ARTrackedPose>
        fun GetAllTrackedPoints(): Array<ARTrackedPoint>
        fun GetAllTrackedPlanes(): Array<ARPlaneGeometry>
        fun GetAllTrackedImages(): Array<ARTrackedImage>
        fun GetAllTrackedEnvironmentCaptureProbes(): Array<AREnvironmentCaptureProbe>
        fun GetAllTracked2DPoses(): Array<ARPose2D>
        fun GetAllPins(): Array<ARPin>
        fun GetAllGeometries(): Array<ARTrackedGeometry>
        fun DebugDrawTrackedGeometry(TrackedGeometry: ARTrackedGeometry, WorldContextObject: UObject, Color: LinearColor, OutlineThickness: Number, PersistForSeconds: Number)
        fun DebugDrawPin(ARPin: ARPin, WorldContextObject: UObject, Color: LinearColor, Scale: Number, PersistForSeconds: Number)
        fun AddRuntimeCandidateImage(SessionConfig: ARSessionConfig, CandidateTexture: Texture2D, FriendlyName: String, PhysicalWidth: Number): ARCandidateImage
        fun AddManualEnvironmentCaptureProbe(Location: Vector, Extent: Vector): Boolean
        fun C(Other: UObject): ARBlueprintLibrary
        fun C(Other: Any): ARBlueprintLibrary
    }
}

external open class ARTraceResultLibrary : BlueprintFunctionLibrary {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARTraceResultLibrary
        fun Find(Outer: UObject, ResourceName: String): ARTraceResultLibrary
        fun GetDefaultObject(): ARTraceResultLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTraceResultLibrary
        fun GetTrackedGeometry(TraceResult: ARTraceResult): ARTrackedGeometry
        fun GetTraceChannel(TraceResult: ARTraceResult): String /* "None" | "FeaturePoint" | "GroundPlane" | "PlaneUsingExtent" | "PlaneUsingBoundaryPolygon" | "EARLineTraceChannels_MAX" */
        fun GetLocalToWorldTransform(TraceResult: ARTraceResult): Transform
        fun GetLocalToTrackingTransform(TraceResult: ARTraceResult): Transform
        fun GetDistanceFromCamera(TraceResult: ARTraceResult): Number
        fun C(Other: UObject): ARTraceResultLibrary
        fun C(Other: Any): ARTraceResultLibrary
    }
}

external open class BlueprintAsyncActionBase : UObject {
    constructor()
    constructor(Outer: UObject)
    open fun Activate()

    companion object {
        fun Load(ResourceName: String): BlueprintAsyncActionBase
        fun Find(Outer: UObject, ResourceName: String): BlueprintAsyncActionBase
        fun GetDefaultObject(): BlueprintAsyncActionBase
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): BlueprintAsyncActionBase
        fun C(Other: UObject): BlueprintAsyncActionBase
        fun C(Other: Any): BlueprintAsyncActionBase
    }
}

external open class ARBaseAsyncTaskBlueprintProxy : BlueprintAsyncActionBase {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARBaseAsyncTaskBlueprintProxy
        fun Find(Outer: UObject, ResourceName: String): ARBaseAsyncTaskBlueprintProxy
        fun GetDefaultObject(): ARBaseAsyncTaskBlueprintProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARBaseAsyncTaskBlueprintProxy
        fun C(Other: UObject): ARBaseAsyncTaskBlueprintProxy
        fun C(Other: Any): ARBaseAsyncTaskBlueprintProxy
    }
}

external open class ARSaveWorldAsyncTaskBlueprintProxy : ARBaseAsyncTaskBlueprintProxy {
    constructor()
    constructor(Outer: UObject)
    open var OnSuccess: UnrealEngineMulticastDelegate<(SavedWorld: Array<Number>) -> Unit>
    open var OnFailed: UnrealEngineMulticastDelegate<(SavedWorld: Array<Number>) -> Unit>

    companion object {
        fun Load(ResourceName: String): ARSaveWorldAsyncTaskBlueprintProxy
        fun Find(Outer: UObject, ResourceName: String): ARSaveWorldAsyncTaskBlueprintProxy
        fun GetDefaultObject(): ARSaveWorldAsyncTaskBlueprintProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARSaveWorldAsyncTaskBlueprintProxy
        fun ARSaveWorld(WorldContextObject: UObject): ARSaveWorldAsyncTaskBlueprintProxy
        fun C(Other: UObject): ARSaveWorldAsyncTaskBlueprintProxy
        fun C(Other: Any): ARSaveWorldAsyncTaskBlueprintProxy
    }
}

external open class ARGetCandidateObjectAsyncTaskBlueprintProxy : ARBaseAsyncTaskBlueprintProxy {
    constructor()
    constructor(Outer: UObject)
    open var OnSuccess: UnrealEngineMulticastDelegate<(SavedObject: ARCandidateObject) -> Unit>
    open var OnFailed: UnrealEngineMulticastDelegate<(SavedObject: ARCandidateObject) -> Unit>

    companion object {
        fun Load(ResourceName: String): ARGetCandidateObjectAsyncTaskBlueprintProxy
        fun Find(Outer: UObject, ResourceName: String): ARGetCandidateObjectAsyncTaskBlueprintProxy
        fun GetDefaultObject(): ARGetCandidateObjectAsyncTaskBlueprintProxy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARGetCandidateObjectAsyncTaskBlueprintProxy
        fun ARGetCandidateObject(WorldContextObject: UObject, Location: Vector, Extent: Vector): ARGetCandidateObjectAsyncTaskBlueprintProxy
        fun C(Other: UObject): ARGetCandidateObjectAsyncTaskBlueprintProxy
        fun C(Other: Any): ARGetCandidateObjectAsyncTaskBlueprintProxy
    }
}

external open class ARBasicLightEstimate : ARLightEstimate {
    constructor()
    constructor(Outer: UObject)
    open var AmbientIntensityLumens: Number
    open var AmbientColorTemperatureKelvin: Number
    open var AmbientColor: LinearColor
    open fun GetAmbientIntensityLumens(): Number
    open fun GetAmbientColorTemperatureKelvin(): Number
    open fun GetAmbientColor(): LinearColor

    companion object {
        fun Load(ResourceName: String): ARBasicLightEstimate
        fun Find(Outer: UObject, ResourceName: String): ARBasicLightEstimate
        fun GetDefaultObject(): ARBasicLightEstimate
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARBasicLightEstimate
        fun C(Other: UObject): ARBasicLightEstimate
        fun C(Other: Any): ARBasicLightEstimate
    }
}

external open class AROriginActor(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Actor {
    companion object {
        fun GetDefaultObject(): AROriginActor
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AROriginActor
        fun C(Other: UObject): AROriginActor
        fun C(Other: Any): AROriginActor
    }
}

external open class GameMode(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : GameModeBase {
    open var MatchState: String
    open var bDelayedStart: Boolean
    open var NumSpectators: Number
    open var NumPlayers: Number
    open var NumBots: Number
    open var MinRespawnDelay: Number
    open var NumTravellingPlayers: Number
    open var EngineMessageClass: UnrealEngineClass
    open var InactivePlayerArray: Array<PlayerState>
    open var InactivePlayerStateLifeSpan: Number
    open var MaxInactivePlayers: Number
    open var bHandleDedicatedServerReplays: Boolean
    open fun StartMatch()
    open fun SetBandwidthLimit(AsyncIOBandwidthLimit: Number)
    open fun Say(Msg: String)
    open fun RestartGame()
    open fun ReadyToStartMatch(): Boolean
    open fun ReadyToEndMatch(): Boolean
    open fun K2_OnSetMatchState(NewState: String)
    open fun IsMatchInProgress(): Boolean
    open fun HasMatchEnded(): Boolean
    open fun GetMatchState(): String
    open fun EndMatch()
    open fun AbortMatch()

    companion object {
        fun GetDefaultObject(): GameMode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameMode
        fun C(Other: UObject): GameMode
        fun C(Other: Any): GameMode
    }
}

external open class GameState(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : GameStateBase {
    open var MatchState: String
    open var PreviousMatchState: String
    open var ElapsedTime: Number
    open fun OnRep_MatchState()
    open fun OnRep_ElapsedTime()

    companion object {
        fun GetDefaultObject(): GameState
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): GameState
        fun C(Other: UObject): GameState
        fun C(Other: Any): GameState
    }
}

external open class ARSharedWorldGameState(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : GameState {
    open var PreviewImageData: Array<Number>
    open var ARWorldData: Array<Number>
    open var PreviewImageBytesTotal: Number
    open var ARWorldBytesTotal: Number
    open var PreviewImageBytesDelivered: Number
    open var ARWorldBytesDelivered: Number
    open fun K2_OnARWorldMapIsReady()

    companion object {
        fun GetDefaultObject(): ARSharedWorldGameState
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARSharedWorldGameState
        fun C(Other: UObject): ARSharedWorldGameState
        fun C(Other: Any): ARSharedWorldGameState
    }
}

external open class ARSharedWorldGameMode(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : GameMode {
    open var BufferSizePerChunk: Number
    open fun SetPreviewImageData(ImageData: Array<Number>)
    open fun SetARWorldSharingIsReady()
    open fun SetARSharedWorldData(ARWorldData: Array<Number>)
    open fun GetARSharedWorldGameState(): ARSharedWorldGameState

    companion object {
        fun GetDefaultObject(): ARSharedWorldGameMode
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARSharedWorldGameMode
        fun C(Other: UObject): ARSharedWorldGameMode
        fun C(Other: Any): ARSharedWorldGameMode
    }
}

external open class ARSharedWorldPlayerController(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : PlayerController {
    open fun ServerMarkReadyForReceiving()
    open fun ClientUpdatePreviewImageData(Offset: Number, Buffer: Array<Number>)
    open fun ClientUpdateARWorldData(Offset: Number, Buffer: Array<Number>)
    open fun ClientInitSharedWorld(PreviewImageSize: Number, ARWorldDataSize: Number)

    companion object {
        fun GetDefaultObject(): ARSharedWorldPlayerController
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARSharedWorldPlayerController
        fun C(Other: UObject): ARSharedWorldPlayerController
        fun C(Other: Any): ARSharedWorldPlayerController
    }
}

external object ESkyLightSourceType {
    var SLS_CapturedScene: String /* "SLS_CapturedScene" */
    var SLS_SpecifiedCubemap: String /* "SLS_SpecifiedCubemap" */
    var SLS_MAX: String /* "SLS_MAX" */
}

external object EOcclusionCombineMode {
    var OCM_Minimum: String /* "OCM_Minimum" */
    var OCM_Multiply: String /* "OCM_Multiply" */
    var OCM_MAX: String /* "OCM_MAX" */
}

external open class SkyLightComponent : LightComponentBase {
    constructor()
    constructor(Outer: UObject)
    open var SourceType: String /* "SLS_CapturedScene" | "SLS_SpecifiedCubemap" | "SLS_MAX" */
    open var CubeMap: TextureCube
    open var SourceCubemapAngle: Number
    open var CubemapResolution: Number
    open var SkyDistanceThreshold: Number
    open var bCaptureEmissiveOnly: Boolean
    open var bLowerHemisphereIsBlack: Boolean
    open var LowerHemisphereColor: LinearColor
    open var OcclusionMaxDistance: Number
    open var Contrast: Number
    open var OcclusionExponent: Number
    open var MinOcclusion: Number
    open var OcclusionTint: Color
    open var OcclusionCombineMode: String /* "OCM_Minimum" | "OCM_Multiply" | "OCM_MAX" */
    open var BlendDestinationCubemap: TextureCube
    open fun SetVolumetricScatteringIntensity(NewIntensity: Number)
    open fun SetOcclusionTint(InTint: Color)
    open fun SetOcclusionExponent(InOcclusionExponent: Number)
    open fun SetOcclusionContrast(InOcclusionContrast: Number)
    open fun SetMinOcclusion(InMinOcclusion: Number)
    open fun SetLowerHemisphereColor(InLowerHemisphereColor: LinearColor)
    open fun SetLightColor(NewLightColor: LinearColor)
    open fun SetIntensity(NewIntensity: Number)
    open fun SetIndirectLightingIntensity(NewIntensity: Number)
    open fun SetCubemapBlend(SourceCubemap: TextureCube, DestinationCubemap: TextureCube, InBlendFraction: Number)
    open fun SetCubemap(NewCubemap: TextureCube)
    open fun RecaptureSky()

    companion object {
        fun Load(ResourceName: String): SkyLightComponent
        fun Find(Outer: UObject, ResourceName: String): SkyLightComponent
        fun GetDefaultObject(): SkyLightComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkyLightComponent
        fun C(Other: UObject): SkyLightComponent
        fun C(Other: Any): SkyLightComponent
    }
}

external open class SkyLight(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : Info {
    open var LightComponent: SkyLightComponent
    open var bEnabled: Boolean
    open fun OnRep_bEnabled()

    companion object {
        fun GetDefaultObject(): SkyLight
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SkyLight
        fun C(Other: UObject): SkyLight
        fun C(Other: Any): SkyLight
    }
}

external open class ARSkyLight(InWorld: World, Location: Vector = definedExternally, Rotation: Rotator = definedExternally) : SkyLight {
    open var CaptureProbe: AREnvironmentCaptureProbe
    open fun SetEnvironmentCaptureProbe(InCaptureProbe: AREnvironmentCaptureProbe)

    companion object {
        fun GetDefaultObject(): ARSkyLight
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARSkyLight
        fun C(Other: UObject): ARSkyLight
        fun C(Other: Any): ARSkyLight
    }
}

external open class ARTraceResultDummy : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARTraceResultDummy
        fun Find(Outer: UObject, ResourceName: String): ARTraceResultDummy
        fun GetDefaultObject(): ARTraceResultDummy
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTraceResultDummy
        fun C(Other: UObject): ARTraceResultDummy
        fun C(Other: Any): ARTraceResultDummy
    }
}

external object EAREye {
    var LeftEye: String /* "LeftEye" */
    var RightEye: String /* "RightEye" */
    var EAREye_MAX: String /* "EAREye_MAX" */
}

external object EARFaceBlendShape {
    var EyeBlinkLeft: String /* "EyeBlinkLeft" */
    var EyeLookDownLeft: String /* "EyeLookDownLeft" */
    var EyeLookInLeft: String /* "EyeLookInLeft" */
    var EyeLookOutLeft: String /* "EyeLookOutLeft" */
    var EyeLookUpLeft: String /* "EyeLookUpLeft" */
    var EyeSquintLeft: String /* "EyeSquintLeft" */
    var EyeWideLeft: String /* "EyeWideLeft" */
    var EyeBlinkRight: String /* "EyeBlinkRight" */
    var EyeLookDownRight: String /* "EyeLookDownRight" */
    var EyeLookInRight: String /* "EyeLookInRight" */
    var EyeLookOutRight: String /* "EyeLookOutRight" */
    var EyeLookUpRight: String /* "EyeLookUpRight" */
    var EyeSquintRight: String /* "EyeSquintRight" */
    var EyeWideRight: String /* "EyeWideRight" */
    var JawForward: String /* "JawForward" */
    var JawLeft: String /* "JawLeft" */
    var JawRight: String /* "JawRight" */
    var JawOpen: String /* "JawOpen" */
    var MouthClose: String /* "MouthClose" */
    var MouthFunnel: String /* "MouthFunnel" */
    var MouthPucker: String /* "MouthPucker" */
    var MouthLeft: String /* "MouthLeft" */
    var MouthRight: String /* "MouthRight" */
    var MouthSmileLeft: String /* "MouthSmileLeft" */
    var MouthSmileRight: String /* "MouthSmileRight" */
    var MouthFrownLeft: String /* "MouthFrownLeft" */
    var MouthFrownRight: String /* "MouthFrownRight" */
    var MouthDimpleLeft: String /* "MouthDimpleLeft" */
    var MouthDimpleRight: String /* "MouthDimpleRight" */
    var MouthStretchLeft: String /* "MouthStretchLeft" */
    var MouthStretchRight: String /* "MouthStretchRight" */
    var MouthRollLower: String /* "MouthRollLower" */
    var MouthRollUpper: String /* "MouthRollUpper" */
    var MouthShrugLower: String /* "MouthShrugLower" */
    var MouthShrugUpper: String /* "MouthShrugUpper" */
    var MouthPressLeft: String /* "MouthPressLeft" */
    var MouthPressRight: String /* "MouthPressRight" */
    var MouthLowerDownLeft: String /* "MouthLowerDownLeft" */
    var MouthLowerDownRight: String /* "MouthLowerDownRight" */
    var MouthUpperUpLeft: String /* "MouthUpperUpLeft" */
    var MouthUpperUpRight: String /* "MouthUpperUpRight" */
    var BrowDownLeft: String /* "BrowDownLeft" */
    var BrowDownRight: String /* "BrowDownRight" */
    var BrowInnerUp: String /* "BrowInnerUp" */
    var BrowOuterUpLeft: String /* "BrowOuterUpLeft" */
    var BrowOuterUpRight: String /* "BrowOuterUpRight" */
    var CheekPuff: String /* "CheekPuff" */
    var CheekSquintLeft: String /* "CheekSquintLeft" */
    var CheekSquintRight: String /* "CheekSquintRight" */
    var NoseSneerLeft: String /* "NoseSneerLeft" */
    var NoseSneerRight: String /* "NoseSneerRight" */
    var TongueOut: String /* "TongueOut" */
    var HeadYaw: String /* "HeadYaw" */
    var HeadPitch: String /* "HeadPitch" */
    var HeadRoll: String /* "HeadRoll" */
    var LeftEyeYaw: String /* "LeftEyeYaw" */
    var LeftEyePitch: String /* "LeftEyePitch" */
    var LeftEyeRoll: String /* "LeftEyeRoll" */
    var RightEyeYaw: String /* "RightEyeYaw" */
    var RightEyePitch: String /* "RightEyePitch" */
    var RightEyeRoll: String /* "RightEyeRoll" */
    var MAX: String /* "MAX" */
}

external open class ARFaceGeometry : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)
    open var LookAtTarget: Vector
    open var bIsTracked: Boolean
    open var BlendShapes: Any
    open fun GetWorldSpaceEyeTransform(Eye: String /* "LeftEye" | "RightEye" | "EAREye_MAX" */): Transform
    open fun GetLocalSpaceEyeTransform(Eye: String /* "LeftEye" | "RightEye" | "EAREye_MAX" */): Transform
    open fun GetBlendShapeValue(BlendShape: String /* "EyeBlinkLeft" | "EyeLookDownLeft" | "EyeLookInLeft" | "EyeLookOutLeft" | "EyeLookUpLeft" | "EyeSquintLeft" | "EyeWideLeft" | "EyeBlinkRight" | "EyeLookDownRight" | "EyeLookInRight" | "EyeLookOutRight" | "EyeLookUpRight" | "EyeSquintRight" | "EyeWideRight" | "JawForward" | "JawLeft" | "JawRight" | "JawOpen" | "MouthClose" | "MouthFunnel" | "MouthPucker" | "MouthLeft" | "MouthRight" | "MouthSmileLeft" | "MouthSmileRight" | "MouthFrownLeft" | "MouthFrownRight" | "MouthDimpleLeft" | "MouthDimpleRight" | "MouthStretchLeft" | "MouthStretchRight" | "MouthRollLower" | "MouthRollUpper" | "MouthShrugLower" | "MouthShrugUpper" | "MouthPressLeft" | "MouthPressRight" | "MouthLowerDownLeft" | "MouthLowerDownRight" | "MouthUpperUpLeft" | "MouthUpperUpRight" | "BrowDownLeft" | "BrowDownRight" | "BrowInnerUp" | "BrowOuterUpLeft" | "BrowOuterUpRight" | "CheekPuff" | "CheekSquintLeft" | "CheekSquintRight" | "NoseSneerLeft" | "NoseSneerRight" | "TongueOut" | "HeadYaw" | "HeadPitch" | "HeadRoll" | "LeftEyeYaw" | "LeftEyePitch" | "LeftEyeRoll" | "RightEyeYaw" | "RightEyePitch" | "RightEyeRoll" | "MAX" */): Number
    open fun GetBlendShapes(): Any

    companion object {
        fun Load(ResourceName: String): ARFaceGeometry
        fun Find(Outer: UObject, ResourceName: String): ARFaceGeometry
        fun GetDefaultObject(): ARFaceGeometry
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARFaceGeometry
        fun C(Other: UObject): ARFaceGeometry
        fun C(Other: Any): ARFaceGeometry
    }
}

external open class ARTrackedObject : ARTrackedGeometry {
    constructor()
    constructor(Outer: UObject)
    open var DetectedObject: ARCandidateObject
    open fun GetDetectedObject(): ARCandidateObject

    companion object {
        fun Load(ResourceName: String): ARTrackedObject
        fun Find(Outer: UObject, ResourceName: String): ARTrackedObject
        fun GetDefaultObject(): ARTrackedObject
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTrackedObject
        fun C(Other: UObject): ARTrackedObject
        fun C(Other: Any): ARTrackedObject
    }
}

external open class ARTrackableNotifyComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var OnAddTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) -> Unit>
    open var OnUpdateTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) -> Unit>
    open var OnRemoveTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) -> Unit>
    open var OnAddTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) -> Unit>
    open var OnUpdateTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) -> Unit>
    open var OnRemoveTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) -> Unit>
    open var OnAddTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) -> Unit>
    open var OnUpdateTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) -> Unit>
    open var OnRemoveTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) -> Unit>
    open var OnAddTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) -> Unit>
    open var OnUpdateTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) -> Unit>
    open var OnRemoveTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) -> Unit>
    open var OnAddTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) -> Unit>
    open var OnUpdateTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) -> Unit>
    open var OnRemoveTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) -> Unit>
    open var OnAddTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) -> Unit>
    open var OnUpdateTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) -> Unit>
    open var OnRemoveTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) -> Unit>
    open var OnAddTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) -> Unit>
    open var OnUpdateTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) -> Unit>
    open var OnRemoveTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) -> Unit>

    companion object {
        fun Load(ResourceName: String): ARTrackableNotifyComponent
        fun Find(Outer: UObject, ResourceName: String): ARTrackableNotifyComponent
        fun GetDefaultObject(): ARTrackableNotifyComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTrackableNotifyComponent
        fun C(Other: UObject): ARTrackableNotifyComponent
        fun C(Other: Any): ARTrackableNotifyComponent
    }
}

external open class ARTypesDummyClass : UObject {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): ARTypesDummyClass
        fun Find(Outer: UObject, ResourceName: String): ARTypesDummyClass
        fun GetDefaultObject(): ARTypesDummyClass
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): ARTypesDummyClass
        fun C(Other: UObject): ARTypesDummyClass
        fun C(Other: Any): ARTypesDummyClass
    }
}

external object EHMDTrackingOrigin {
    var Floor: String /* "Floor" */
    var Eye: String /* "Eye" */
    var Stage: String /* "Stage" */
    var EHMDTrackingOrigin_MAX: String /* "EHMDTrackingOrigin_MAX" */
}

external object ESpectatorScreenMode {
    var Disabled: String /* "Disabled" */
    var SingleEyeLetterboxed: String /* "SingleEyeLetterboxed" */
    var Undistorted: String /* "Undistorted" */
    var Distorted: String /* "Distorted" */
    var SingleEye: String /* "SingleEye" */
    var SingleEyeCroppedToFill: String /* "SingleEyeCroppedToFill" */
    var Texture: String /* "Texture" */
    var TexturePlusEye: String /* "TexturePlusEye" */
    var ESpectatorScreenMode_MAX: String /* "ESpectatorScreenMode_MAX" */
}

external object EHMDWornState {
    var Unknown: String /* "Unknown" */
    var Worn: String /* "Worn" */
    var NotWorn: String /* "NotWorn" */
    var EHMDWornState_MAX: String /* "EHMDWornState_MAX" */
}

external object EXRTrackedDeviceType {
    var HeadMountedDisplay: String /* "HeadMountedDisplay" */
    var Controller: String /* "Controller" */
    var TrackingReference: String /* "TrackingReference" */
    var Other: String /* "Other" */
    var Invalid: String /* "Invalid" */
    var Any: String /* "Any" */
    var EXRTrackedDeviceType_MAX: String /* "EXRTrackedDeviceType_MAX" */
}

external interface `T$538` {
    var bUseFocus: Boolean
    var bHasFocus: Boolean
}

external open class HeadMountedDisplayFunctionLibrary : BlueprintFunctionLibrary {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): HeadMountedDisplayFunctionLibrary
        fun Find(Outer: UObject, ResourceName: String): HeadMountedDisplayFunctionLibrary
        fun GetDefaultObject(): HeadMountedDisplayFunctionLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): HeadMountedDisplayFunctionLibrary
        fun UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform)
        fun SetWorldToMetersScale(WorldContext: UObject, NewScale: Number)
        fun SetTrackingOrigin(Origin: String /* "Floor" | "Eye" | "Stage" | "EHMDTrackingOrigin_MAX" */)
        fun SetSpectatorScreenTexture(InTexture: Texture)
        fun SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D, EyeRectMax: Vector2D, TextureRectMin: Vector2D, TextureRectMax: Vector2D, bDrawEyeFirst: Boolean, bClearBlack: Boolean, bUseAlpha: Boolean)
        fun SetSpectatorScreenMode(Mode: String /* "Disabled" | "SingleEyeLetterboxed" | "Undistorted" | "Distorted" | "SingleEye" | "SingleEyeCroppedToFill" | "Texture" | "TexturePlusEye" | "ESpectatorScreenMode_MAX" */)
        fun SetClippingPlanes(Near: Number, Far: Number)
        fun ResetOrientationAndPosition(Yaw: Number, Options: String /* "Orientation" | "Position" | "OrientationAndPosition" | "EOrientPositionSelector_MAX" */)
        fun IsSpectatorScreenModeControllable(): Boolean
        fun IsInLowPersistenceMode(): Boolean
        fun IsHeadMountedDisplayEnabled(): Boolean
        fun IsHeadMountedDisplayConnected(): Boolean
        fun IsDeviceTracking(XRDeviceId: XRDeviceId): Boolean
        fun HasValidTrackingPosition(): Boolean
        fun GetWorldToMetersScale(WorldContext: UObject): Number
        fun GetVRFocusState(bUseFocus: Boolean = definedExternally, bHasFocus: Boolean = definedExternally): `T$538`
        fun GetTrackingToWorldTransform(WorldContext: UObject): Transform
        fun GetTrackingSensorParameters(Origin: Vector = definedExternally, Rotation: Rotator = definedExternally, LeftFOV: Number = definedExternally, RightFOV: Number = definedExternally, TopFOV: Number = definedExternally, BottomFOV: Number = definedExternally, Distance: Number = definedExternally, NearPlane: Number = definedExternally, FarPlane: Number = definedExternally, IsActive: Boolean = definedExternally, index: Number = definedExternally): `T$402`
        fun GetTrackingOrigin(): String /* "Floor" | "Eye" | "Stage" | "EHMDTrackingOrigin_MAX" */
        fun GetScreenPercentage(): Number
        fun GetPositionalTrackingCameraParameters(CameraOrigin: Vector = definedExternally, CameraRotation: Rotator = definedExternally, HFOV: Number = definedExternally, VFOV: Number = definedExternally, CameraDistance: Number = definedExternally, NearPlane: Number = definedExternally, FarPlane: Number = definedExternally): `T$401`
        fun GetPixelDensity(): Number
        fun GetOrientationAndPosition(DeviceRotation: Rotator = definedExternally, DevicePosition: Vector = definedExternally): `T$234`
        fun GetNumOfTrackingSensors(): Number
        fun GetHMDWornState(): String /* "Unknown" | "Worn" | "NotWorn" | "EHMDWornState_MAX" */
        fun GetHMDDeviceName(): String
        fun GetDeviceWorldPose(WorldContext: UObject, XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, Position: Vector = definedExternally): `T$420`
        fun GetDevicePose(XRDeviceId: XRDeviceId, bIsTracked: Boolean = definedExternally, Orientation: Rotator = definedExternally, bHasPositionalTracking: Boolean = definedExternally, Position: Vector = definedExternally): `T$420`
        fun EnumerateTrackedDevices(SystemId: String, DeviceType: String /* "HeadMountedDisplay" | "Controller" | "TrackingReference" | "Other" | "Invalid" | "Any" | "EXRTrackedDeviceType_MAX" */): Array<XRDeviceId>
        fun EnableLowPersistenceMode(bEnable: Boolean)
        fun EnableHMD(bEnable: Boolean): Boolean
        fun CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform)
        fun C(Other: UObject): HeadMountedDisplayFunctionLibrary
        fun C(Other: Any): HeadMountedDisplayFunctionLibrary
    }
}

external open class MotionTrackedDeviceFunctionLibrary : BlueprintFunctionLibrary {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): MotionTrackedDeviceFunctionLibrary
        fun Find(Outer: UObject, ResourceName: String): MotionTrackedDeviceFunctionLibrary
        fun GetDefaultObject(): MotionTrackedDeviceFunctionLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): MotionTrackedDeviceFunctionLibrary
        fun SetIsControllerMotionTrackingEnabledByDefault(Enable: Boolean)
        fun IsMotionTrackingEnabledForSource(PlayerIndex: Number, SourceName: String): Boolean
        fun IsMotionTrackingEnabledForDevice(PlayerIndex: Number, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */): Boolean
        fun IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): Boolean
        fun IsMotionTrackedDeviceCountManagementNecessary(): Boolean
        fun IsMotionSourceTracking(PlayerIndex: Number, SourceName: String): Boolean
        fun GetMotionTrackingEnabledControllerCount(): Number
        fun GetMaximumMotionTrackedControllerCount(): Number
        fun GetActiveTrackingSystemName(): String
        fun EnumerateMotionSources(): Array<String>
        fun EnableMotionTrackingOfSource(PlayerIndex: Number, SourceName: String): Boolean
        fun EnableMotionTrackingOfDevice(PlayerIndex: Number, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */): Boolean
        fun EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): Boolean
        fun DisableMotionTrackingOfSource(PlayerIndex: Number, SourceName: String)
        fun DisableMotionTrackingOfDevice(PlayerIndex: Number, Hand: String /* "Left" | "Right" | "AnyHand" | "Pad" | "ExternalCamera" | "Gun" | "Special_1" | "Special_2" | "Special_3" | "Special_4" | "Special_5" | "Special_6" | "Special_7" | "Special_8" | "Special_9" | "Special_10" | "Special_11" | "ControllerHand_Count" | "EControllerHand_MAX" */)
        fun DisableMotionTrackingOfControllersForPlayer(PlayerIndex: Number)
        fun DisableMotionTrackingOfAllControllers()
        fun DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent)
        fun C(Other: UObject): MotionTrackedDeviceFunctionLibrary
        fun C(Other: Any): MotionTrackedDeviceFunctionLibrary
    }
}

external open class VRNotificationsComponent : ActorComponent {
    constructor()
    constructor(Outer: UObject)
    open var HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDLostDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() -> Unit>
    open var VRControllerRecenteredDelegate: UnrealEngineMulticastDelegate<() -> Unit>

    companion object {
        fun Load(ResourceName: String): VRNotificationsComponent
        fun Find(Outer: UObject, ResourceName: String): VRNotificationsComponent
        fun GetDefaultObject(): VRNotificationsComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): VRNotificationsComponent
        fun C(Other: UObject): VRNotificationsComponent
        fun C(Other: Any): VRNotificationsComponent
    }
}

external open class XRAssetFunctionLibrary : BlueprintFunctionLibrary {
    constructor()
    constructor(Outer: UObject)

    companion object {
        fun Load(ResourceName: String): XRAssetFunctionLibrary
        fun Find(Outer: UObject, ResourceName: String): XRAssetFunctionLibrary
        fun GetDefaultObject(): XRAssetFunctionLibrary
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): XRAssetFunctionLibrary
        fun AddNamedDeviceVisualizationComponentBlocking(Target: Actor, SystemName: String, DeviceName: String, bManualAttachment: Boolean, RelativeTransform: Transform, XRDeviceId: XRDeviceId = definedExternally): `T$427`
        fun AddDeviceVisualizationComponentBlocking(Target: Actor, XRDeviceId: XRDeviceId, bManualAttachment: Boolean, RelativeTransform: Transform): PrimitiveComponent
        fun C(Other: UObject): XRAssetFunctionLibrary
        fun C(Other: Any): XRAssetFunctionLibrary
    }
}

external interface `T$539` {
    var XRDeviceId: XRDeviceId
    var NewComponent: PrimitiveComponent
    var `$`: AsyncTask_LoadXRDeviceVisComponent
}

external interface `T$540` {
    var NewComponent: PrimitiveComponent
    var `$`: AsyncTask_LoadXRDeviceVisComponent
}

external open class AsyncTask_LoadXRDeviceVisComponent : BlueprintAsyncActionBase {
    constructor()
    constructor(Outer: UObject)
    open var OnModelLoaded: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) -> Unit>
    open var OnLoadFailure: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) -> Unit>
    open var SpawnedComponent: PrimitiveComponent

    companion object {
        fun Load(ResourceName: String): AsyncTask_LoadXRDeviceVisComponent
        fun Find(Outer: UObject, ResourceName: String): AsyncTask_LoadXRDeviceVisComponent
        fun GetDefaultObject(): AsyncTask_LoadXRDeviceVisComponent
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AsyncTask_LoadXRDeviceVisComponent
        fun AddNamedDeviceVisualizationComponentAsync(Target: Actor, SystemName: String, DeviceName: String, bManualAttachment: Boolean, RelativeTransform: Transform, XRDeviceId: XRDeviceId = definedExternally, NewComponent: PrimitiveComponent = definedExternally): `T$539`
        fun AddDeviceVisualizationComponentAsync(Target: Actor, XRDeviceId: XRDeviceId, bManualAttachment: Boolean, RelativeTransform: Transform, NewComponent: PrimitiveComponent = definedExternally): `T$540`
        fun C(Other: UObject): AsyncTask_LoadXRDeviceVisComponent
        fun C(Other: Any): AsyncTask_LoadXRDeviceVisComponent
    }
}

external open class CookerStats : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Assets: Array<Any>
    open var SizeBefore: Number
    open var SizeAfter: Number
    open var Path: String

    companion object {
        fun Load(ResourceName: String): CookerStats
        fun Find(Outer: UObject, ResourceName: String): CookerStats
        fun GetDefaultObject(): CookerStats
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): CookerStats
        fun C(Other: UObject): CookerStats
        fun C(Other: Any): CookerStats
    }
}

external open class LightingBuildInfo : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UObject: Any
    open var LightingTime: Number
    open var UnmappedTexelsPercentage: Number
    open var UnmappedTexelsMemory: Number
    open var TotalTexelMemory: Number
    open var LevelName: String

    companion object {
        fun Load(ResourceName: String): LightingBuildInfo
        fun Find(Outer: UObject, ResourceName: String): LightingBuildInfo
        fun GetDefaultObject(): LightingBuildInfo
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LightingBuildInfo
        fun C(Other: UObject): LightingBuildInfo
        fun C(Other: Any): LightingBuildInfo
    }
}

external open class PrimitiveStats : UObject {
    constructor()
    constructor(Outer: UObject)
    open var UObject: Any
    open var Actors: Array<Any>
    open var Type: String
    open var Count: Number
    open var Sections: Number
    open var HWInstances: Number
    open var InstSections: Number
    open var Triangles: Number
    open var InstTriangles: Number
    open var ResourceSize: Number
    open var VertexColorMem: Number
    open var InstVertexColorMem: Number
    open var LightsLM: Number
    open var LightsOther: Number
    open var LightsTotal: Number
    open var ObjLightCost: Number
    open var LightMapData: Number
    open var LMSMResolution: Number
    open var RadiusMin: Number
    open var RadiusMax: Number
    open var RadiusAvg: Number

    companion object {
        fun Load(ResourceName: String): PrimitiveStats
        fun Find(Outer: UObject, ResourceName: String): PrimitiveStats
        fun GetDefaultObject(): PrimitiveStats
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): PrimitiveStats
        fun C(Other: UObject): PrimitiveStats
        fun C(Other: Any): PrimitiveStats
    }
}

external open class StaticMeshLightingInfo : UObject {
    constructor()
    constructor(Outer: UObject)
    open var StaticMeshActor: Any
    open var StaticMesh: Any
    open var LevelName: String
    open var TextureMapping: String
    open var bTextureMapping: Boolean
    open var bHasLightmapTexCoords: Boolean
    open var StaticLightingResolution: Number
    open var TextureLightMapMemoryUsage: Number
    open var VertexLightMapMemoryUsage: Number
    open var LightMapLightCount: Number
    open var TextureShadowMapMemoryUsage: Number
    open var VertexShadowMapMemoryUsage: Number
    open var ShadowMapLightCount: Number

    companion object {
        fun Load(ResourceName: String): StaticMeshLightingInfo
        fun Find(Outer: UObject, ResourceName: String): StaticMeshLightingInfo
        fun GetDefaultObject(): StaticMeshLightingInfo
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): StaticMeshLightingInfo
        fun C(Other: UObject): StaticMeshLightingInfo
        fun C(Other: Any): StaticMeshLightingInfo
    }
}

external open class TextureStats : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Texture: Any
    open var Actors: Array<Any>
    open var Type: String
    open var MaxDim: Vector2D
    open var CurrentDim: Vector2D
    open var Format: String /* "PF_Unknown" | "PF_A32B32G32R32F" | "PF_B8G8R8A8" | "PF_G8" | "PF_G16" | "PF_DXT1" | "PF_DXT3" | "PF_DXT5" | "PF_UYVY" | "PF_FloatRGB" | "PF_FloatRGBA" | "PF_DepthStencil" | "PF_ShadowDepth" | "PF_R32_FLOAT" | "PF_G16R16" | "PF_G16R16F" | "PF_G16R16F_FILTER" | "PF_G32R32F" | "PF_A2B10G10R10" | "PF_A16B16G16R16" | "PF_D24" | "PF_R16F" | "PF_R16F_FILTER" | "PF_BC5" | "PF_V8U8" | "PF_A1" | "PF_FloatR11G11B10" | "PF_A8" | "PF_R32_UINT" | "PF_R32_SINT" | "PF_PVRTC2" | "PF_PVRTC4" | "PF_R16_UINT" | "PF_R16_SINT" | "PF_R16G16B16A16_UINT" | "PF_R16G16B16A16_SINT" | "PF_R5G6B5_UNORM" | "PF_R8G8B8A8" | "PF_A8R8G8B8" | "PF_BC4" | "PF_R8G8" | "PF_ATC_RGB" | "PF_ATC_RGBA_E" | "PF_ATC_RGBA_I" | "PF_X24_G8" | "PF_ETC1" | "PF_ETC2_RGB" | "PF_ETC2_RGBA" | "PF_R32G32B32A32_UINT" | "PF_R16G16_UINT" | "PF_ASTC_4x4" | "PF_ASTC_6x6" | "PF_ASTC_8x8" | "PF_ASTC_10x10" | "PF_ASTC_12x12" | "PF_BC6H" | "PF_BC7" | "PF_R8_UINT" | "PF_L8" | "PF_XGXR8" | "PF_R8G8B8A8_UINT" | "PF_R8G8B8A8_SNORM" | "PF_R16G16B16A16_UNORM" | "PF_R16G16B16A16_SNORM" | "PF_PLATFORM_HDR_0" | "PF_PLATFORM_HDR_1" | "PF_PLATFORM_HDR_2" | "PF_NV12" | "PF_R32G32_UINT" | "PF_MAX" */
    open var Group: String /* "TEXTUREGROUP_World" | "TEXTUREGROUP_WorldNormalMap" | "TEXTUREGROUP_WorldSpecular" | "TEXTUREGROUP_Character" | "TEXTUREGROUP_CharacterNormalMap" | "TEXTUREGROUP_CharacterSpecular" | "TEXTUREGROUP_Weapon" | "TEXTUREGROUP_WeaponNormalMap" | "TEXTUREGROUP_WeaponSpecular" | "TEXTUREGROUP_Vehicle" | "TEXTUREGROUP_VehicleNormalMap" | "TEXTUREGROUP_VehicleSpecular" | "TEXTUREGROUP_Cinematic" | "TEXTUREGROUP_Effects" | "TEXTUREGROUP_EffectsNotFiltered" | "TEXTUREGROUP_Skybox" | "TEXTUREGROUP_UI" | "TEXTUREGROUP_Lightmap" | "TEXTUREGROUP_RenderTarget" | "TEXTUREGROUP_MobileFlattened" | "TEXTUREGROUP_ProcBuilding_Face" | "TEXTUREGROUP_ProcBuilding_LightMap" | "TEXTUREGROUP_Shadowmap" | "TEXTUREGROUP_ColorLookupTable" | "TEXTUREGROUP_Terrain_Heightmap" | "TEXTUREGROUP_Terrain_Weightmap" | "TEXTUREGROUP_Bokeh" | "TEXTUREGROUP_IESLightProfile" | "TEXTUREGROUP_Pixels2D" | "TEXTUREGROUP_HierarchicalLOD" | "TEXTUREGROUP_Impostor" | "TEXTUREGROUP_ImpostorNormalDepth" | "TEXTUREGROUP_8BitData" | "TEXTUREGROUP_16BitData" | "TEXTUREGROUP_Project01" | "TEXTUREGROUP_Project02" | "TEXTUREGROUP_Project03" | "TEXTUREGROUP_Project04" | "TEXTUREGROUP_Project05" | "TEXTUREGROUP_Project06" | "TEXTUREGROUP_Project07" | "TEXTUREGROUP_Project08" | "TEXTUREGROUP_Project09" | "TEXTUREGROUP_Project10" | "TEXTUREGROUP_MAX" */
    open var LODBias: Number
    open var CurrentKB: Number
    open var FullyLoadedKB: Number
    open var NumUses: Number
    open var LastTimeRendered: Number
    open var Path: String

    companion object {
        fun Load(ResourceName: String): TextureStats
        fun Find(Outer: UObject, ResourceName: String): TextureStats
        fun GetDefaultObject(): TextureStats
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): TextureStats
        fun C(Other: UObject): TextureStats
        fun C(Other: Any): TextureStats
    }
}

external open class PreviewSceneProfile {
    open var ProfileName: String
    open var bSharedProfile: Boolean
    open var bUseSkyLighting: Boolean
    open var DirectionalLightIntensity: Number
    open var DirectionalLightColor: LinearColor
    open var SkyLightIntensity: Number
    open var bRotateLightingRig: Boolean
    open var bShowEnvironment: Boolean
    open var bShowFloor: Boolean
    open var EnvironmentColor: LinearColor
    open var EnvironmentIntensity: Number
    open var EnvironmentCubeMap: TextureCube
    open var EnvironmentCubeMapPath: String
    open var bPostProcessingEnabled: Boolean
    open var PostProcessingSettings: PostProcessSettings
    open var LightingRigRotation: Number
    open var RotationSpeed: Number
    open var DirectionalLightRotation: Rotator
    open fun clone(): PreviewSceneProfile

    companion object {
        fun C(Other: UObject): PreviewSceneProfile
        fun C(Other: Any): PreviewSceneProfile
    }
}

external open class LocalProfiles : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Profiles: Array<PreviewSceneProfile>

    companion object {
        fun Load(ResourceName: String): LocalProfiles
        fun Find(Outer: UObject, ResourceName: String): LocalProfiles
        fun GetDefaultObject(): LocalProfiles
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): LocalProfiles
        fun C(Other: UObject): LocalProfiles
        fun C(Other: Any): LocalProfiles
    }
}

external open class SharedProfiles : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Profiles: Array<PreviewSceneProfile>

    companion object {
        fun Load(ResourceName: String): SharedProfiles
        fun Find(Outer: UObject, ResourceName: String): SharedProfiles
        fun GetDefaultObject(): SharedProfiles
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): SharedProfiles
        fun C(Other: UObject): SharedProfiles
        fun C(Other: Any): SharedProfiles
    }
}

external open class AssetViewerSettings : UObject {
    constructor()
    constructor(Outer: UObject)
    open var Profiles: Array<PreviewSceneProfile>

    companion object {
        fun Load(ResourceName: String): AssetViewerSettings
        fun Find(Outer: UObject, ResourceName: String): AssetViewerSettings
        fun GetDefaultObject(): AssetViewerSettings
        fun CreateDefaultSubobject(Name: String, Transient: Boolean = definedExternally, Required: Boolean = definedExternally, Abstract: Boolean = definedExternally): AssetViewerSettings
        fun C(Other: UObject): AssetViewerSettings
        fun C(Other: Any): AssetViewerSettings
    }
}